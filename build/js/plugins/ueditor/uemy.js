define(function(require){
	/*!
	 * UEditor
	 * version: ueditor
	 * build: Wed Aug 10 2016 11:06:16 GMT+0800 (CST)
	 */

	(function(){

	// editor.js
	UEDITOR_CONFIG = window.UEDITOR_CONFIG || {};

	var baidu = window.baidu || {};

	window.baidu = baidu;

	window.UE = baidu.editor =  window.UE || {};

	UE.plugins = {};

	UE.commands = {};

	UE.instants = {};

	UE.I18N = {};

	UE._customizeUI = {};

	UE.version = "1.4.3";

	var dom = UE.dom = {};

	// core/browser.js
	/**
	 * 浏览器判断模块
	 * @file
	 * @module UE.browser
	 * @since 1.2.6.1
	 */

	/**
	 * 提供浏览器检测的模块
	 * @unfile
	 * @module UE.browser
	 */
	var browser = UE.browser = function(){
	    var agent = navigator.userAgent.toLowerCase(),
	        opera = window.opera,
	        browser = {
	        /**
	         * @property {boolean} ie 检测当前浏览器是否为IE
	         * @example
	         * ```javascript
	         * if ( UE.browser.ie ) {
	         *     console.log( '当前浏览器是IE' );
	         * }
	         * ```
	         */
	        ie		:  /(msie\s|trident.*rv:)([\w.]+)/.test(agent),

	        /**
	         * @property {boolean} opera 检测当前浏览器是否为Opera
	         * @example
	         * ```javascript
	         * if ( UE.browser.opera ) {
	         *     console.log( '当前浏览器是Opera' );
	         * }
	         * ```
	         */
	        opera	: ( !!opera && opera.version ),

	        /**
	         * @property {boolean} webkit 检测当前浏览器是否是webkit内核的浏览器
	         * @example
	         * ```javascript
	         * if ( UE.browser.webkit ) {
	         *     console.log( '当前浏览器是webkit内核浏览器' );
	         * }
	         * ```
	         */
	        webkit	: ( agent.indexOf( ' applewebkit/' ) > -1 ),

	        /**
	         * @property {boolean} mac 检测当前浏览器是否是运行在mac平台下
	         * @example
	         * ```javascript
	         * if ( UE.browser.mac ) {
	         *     console.log( '当前浏览器运行在mac平台下' );
	         * }
	         * ```
	         */
	        mac	: ( agent.indexOf( 'macintosh' ) > -1 ),

	        /**
	         * @property {boolean} quirks 检测当前浏览器是否处于“怪异模式”下
	         * @example
	         * ```javascript
	         * if ( UE.browser.quirks ) {
	         *     console.log( '当前浏览器运行处于“怪异模式”' );
	         * }
	         * ```
	         */
	        quirks : ( document.compatMode == 'BackCompat' )
	    };

	    /**
	    * @property {boolean} gecko 检测当前浏览器内核是否是gecko内核
	    * @example
	    * ```javascript
	    * if ( UE.browser.gecko ) {
	    *     console.log( '当前浏览器内核是gecko内核' );
	    * }
	    * ```
	    */
	    browser.gecko =( navigator.product == 'Gecko' && !browser.webkit && !browser.opera && !browser.ie);

	    var version = 0;

	    // Internet Explorer 6.0+
	    if ( browser.ie ){

	        var v1 =  agent.match(/(?:msie\s([\w.]+))/);
	        var v2 = agent.match(/(?:trident.*rv:([\w.]+))/);
	        if(v1 && v2 && v1[1] && v2[1]){
	            version = Math.max(v1[1]*1,v2[1]*1);
	        }else if(v1 && v1[1]){
	            version = v1[1]*1;
	        }else if(v2 && v2[1]){
	            version = v2[1]*1;
	        }else{
	            version = 0;
	        }

	        browser.ie11Compat = document.documentMode == 11;
	        /**
	         * @property { boolean } ie9Compat 检测浏览器模式是否为 IE9 兼容模式
	         * @warning 如果浏览器不是IE， 则该值为undefined
	         * @example
	         * ```javascript
	         * if ( UE.browser.ie9Compat ) {
	         *     console.log( '当前浏览器运行在IE9兼容模式下' );
	         * }
	         * ```
	         */
	        browser.ie9Compat = document.documentMode == 9;

	        /**
	         * @property { boolean } ie8 检测浏览器是否是IE8浏览器
	         * @warning 如果浏览器不是IE， 则该值为undefined
	         * @example
	         * ```javascript
	         * if ( UE.browser.ie8 ) {
	         *     console.log( '当前浏览器是IE8浏览器' );
	         * }
	         * ```
	         */
	        browser.ie8 = !!document.documentMode;

	        /**
	         * @property { boolean } ie8Compat 检测浏览器模式是否为 IE8 兼容模式
	         * @warning 如果浏览器不是IE， 则该值为undefined
	         * @example
	         * ```javascript
	         * if ( UE.browser.ie8Compat ) {
	         *     console.log( '当前浏览器运行在IE8兼容模式下' );
	         * }
	         * ```
	         */
	        browser.ie8Compat = document.documentMode == 8;

	        /**
	         * @property { boolean } ie7Compat 检测浏览器模式是否为 IE7 兼容模式
	         * @warning 如果浏览器不是IE， 则该值为undefined
	         * @example
	         * ```javascript
	         * if ( UE.browser.ie7Compat ) {
	         *     console.log( '当前浏览器运行在IE7兼容模式下' );
	         * }
	         * ```
	         */
	        browser.ie7Compat = ( ( version == 7 && !document.documentMode )
	                || document.documentMode == 7 );

	        /**
	         * @property { boolean } ie6Compat 检测浏览器模式是否为 IE6 模式 或者怪异模式
	         * @warning 如果浏览器不是IE， 则该值为undefined
	         * @example
	         * ```javascript
	         * if ( UE.browser.ie6Compat ) {
	         *     console.log( '当前浏览器运行在IE6模式或者怪异模式下' );
	         * }
	         * ```
	         */
	        browser.ie6Compat = ( version < 7 || browser.quirks );

	        browser.ie9above = version > 8;

	        browser.ie9below = version < 9;

	        browser.ie11above = version > 10;

	        browser.ie11below = version < 11;

	    }

	    // Gecko.
	    if ( browser.gecko ){
	        var geckoRelease = agent.match( /rv:([\d\.]+)/ );
	        if ( geckoRelease )
	        {
	            geckoRelease = geckoRelease[1].split( '.' );
	            version = geckoRelease[0] * 10000 + ( geckoRelease[1] || 0 ) * 100 + ( geckoRelease[2] || 0 ) * 1;
	        }
	    }

	    /**
	     * @property { Number } chrome 检测当前浏览器是否为Chrome, 如果是，则返回Chrome的大版本号
	     * @warning 如果浏览器不是chrome， 则该值为undefined
	     * @example
	     * ```javascript
	     * if ( UE.browser.chrome ) {
	     *     console.log( '当前浏览器是Chrome' );
	     * }
	     * ```
	     */
	    if (/chrome\/(\d+\.\d)/i.test(agent)) {
	        browser.chrome = + RegExp['\x241'];
	    }

	    /**
	     * @property { Number } safari 检测当前浏览器是否为Safari, 如果是，则返回Safari的大版本号
	     * @warning 如果浏览器不是safari， 则该值为undefined
	     * @example
	     * ```javascript
	     * if ( UE.browser.safari ) {
	     *     console.log( '当前浏览器是Safari' );
	     * }
	     * ```
	     */
	    if(/(\d+\.\d)?(?:\.\d)?\s+safari\/?(\d+\.\d+)?/i.test(agent) && !/chrome/i.test(agent)){
	    	browser.safari = + (RegExp['\x241'] || RegExp['\x242']);
	    }


	    // Opera 9.50+
	    if ( browser.opera )
	        version = parseFloat( opera.version() );

	    // WebKit 522+ (Safari 3+)
	    if ( browser.webkit )
	        version = parseFloat( agent.match( / applewebkit\/(\d+)/ )[1] );

	    /**
	     * @property { Number } version 检测当前浏览器版本号
	     * @remind
	     * <ul>
	     *     <li>IE系列返回值为5,6,7,8,9,10等</li>
	     *     <li>gecko系列会返回10900，158900等</li>
	     *     <li>webkit系列会返回其build号 (如 522等)</li>
	     * </ul>
	     * @example
	     * ```javascript
	     * console.log( '当前浏览器版本号是： ' + UE.browser.version );
	     * ```
	     */
	    browser.version = version;

	    /**
	     * @property { boolean } isCompatible 检测当前浏览器是否能够与UEditor良好兼容
	     * @example
	     * ```javascript
	     * if ( UE.browser.isCompatible ) {
	     *     console.log( '浏览器与UEditor能够良好兼容' );
	     * }
	     * ```
	     */
	    browser.isCompatible =
	        !browser.mobile && (
	        ( browser.ie && version >= 6 ) ||
	        ( browser.gecko && version >= 10801 ) ||
	        ( browser.opera && version >= 9.5 ) ||
	        ( browser.air && version >= 1 ) ||
	        ( browser.webkit && version >= 522 ) ||
	        false );
	    return browser;
	}();
	//快捷方式
	var ie = browser.ie,
	    webkit = browser.webkit,
	    gecko = browser.gecko,
	    opera = browser.opera;

	// core/utils.js
	/**
	 * 工具函数包
	 * @file
	 * @module UE.utils
	 * @since 1.2.6.1
	 */

	/**
	 * UEditor封装使用的静态工具函数
	 * @module UE.utils
	 * @unfile
	 */

	var utils = UE.utils = {

	    /**
	     * 用给定的迭代器遍历对象
	     * @method each
	     * @param { Object } obj 需要遍历的对象
	     * @param { Function } iterator 迭代器， 该方法接受两个参数， 第一个参数是当前所处理的value， 第二个参数是当前遍历对象的key
	     * @example
	     * ```javascript
	     * var demoObj = {
	     *     key1: 1,
	     *     key2: 2
	     * };
	     *
	     * //output: key1: 1, key2: 2
	     * UE.utils.each( demoObj, funciton ( value, key ) {
	     *
	     *     console.log( key + ":" + value );
	     *
	     * } );
	     * ```
	     */

	    /**
	     * 用给定的迭代器遍历数组或类数组对象
	     * @method each
	     * @param { Array } array 需要遍历的数组或者类数组
	     * @param { Function } iterator 迭代器， 该方法接受两个参数， 第一个参数是当前所处理的value， 第二个参数是当前遍历对象的key
	     * @example
	     * ```javascript
	     * var divs = document.getElmentByTagNames( "div" );
	     *
	     * //output: 0: DIV, 1: DIV ...
	     * UE.utils.each( divs, funciton ( value, key ) {
	     *
	     *     console.log( key + ":" + value.tagName );
	     *
	     * } );
	     * ```
	     */
	    each : function(obj, iterator, context) {
	        if (obj == null) return;
	        if (obj.length === +obj.length) {
	            for (var i = 0, l = obj.length; i < l; i++) {
	                if(iterator.call(context, obj[i], i, obj) === false)
	                    return false;
	            }
	        } else {
	            for (var key in obj) {
	                if (obj.hasOwnProperty(key)) {
	                    if(iterator.call(context, obj[key], key, obj) === false)
	                        return false;
	                }
	            }
	        }
	    },

	    /**
	     * 以给定对象作为原型创建一个新对象
	     * @method makeInstance
	     * @param { Object } protoObject 该对象将作为新创建对象的原型
	     * @return { Object } 新的对象， 该对象的原型是给定的protoObject对象
	     * @example
	     * ```javascript
	     *
	     * var protoObject = { sayHello: function () { console.log('Hello UEditor!'); } };
	     *
	     * var newObject = UE.utils.makeInstance( protoObject );
	     * //output: Hello UEditor!
	     * newObject.sayHello();
	     * ```
	     */
	    makeInstance:function (obj) {
	        var noop = new Function();
	        noop.prototype = obj;
	        obj = new noop;
	        noop.prototype = null;
	        return obj;
	    },

	    /**
	     * 将source对象中的属性扩展到target对象上
	     * @method extend
	     * @remind 该方法将强制把source对象上的属性复制到target对象上
	     * @see UE.utils.extend(Object,Object,Boolean)
	     * @param { Object } target 目标对象， 新的属性将附加到该对象上
	     * @param { Object } source 源对象， 该对象的属性会被附加到target对象上
	     * @return { Object } 返回target对象
	     * @example
	     * ```javascript
	     *
	     * var target = { name: 'target', sex: 1 },
	     *      source = { name: 'source', age: 17 };
	     *
	     * UE.utils.extend( target, source );
	     *
	     * //output: { name: 'source', sex: 1, age: 17 }
	     * console.log( target );
	     *
	     * ```
	     */

	    /**
	     * 将source对象中的属性扩展到target对象上， 根据指定的isKeepTarget值决定是否保留目标对象中与
	     * 源对象属性名相同的属性值。
	     * @method extend
	     * @param { Object } target 目标对象， 新的属性将附加到该对象上
	     * @param { Object } source 源对象， 该对象的属性会被附加到target对象上
	     * @param { Boolean } isKeepTarget 是否保留目标对象中与源对象中属性名相同的属性
	     * @return { Object } 返回target对象
	     * @example
	     * ```javascript
	     *
	     * var target = { name: 'target', sex: 1 },
	     *      source = { name: 'source', age: 17 };
	     *
	     * UE.utils.extend( target, source, true );
	     *
	     * //output: { name: 'target', sex: 1, age: 17 }
	     * console.log( target );
	     *
	     * ```
	     */
	    extend:function (t, s, b) {
	        if (s) {
	            for (var k in s) {
	                if (!b || !t.hasOwnProperty(k)) {
	                    t[k] = s[k];
	                }
	            }
	        }
	        return t;
	    },

	    /**
	     * 将给定的多个对象的属性复制到目标对象target上
	     * @method extend2
	     * @remind 该方法将强制把源对象上的属性复制到target对象上
	     * @remind 该方法支持两个及以上的参数， 从第二个参数开始， 其属性都会被复制到第一个参数上。 如果遇到同名的属性，
	     *          将会覆盖掉之前的值。
	     * @param { Object } target 目标对象， 新的属性将附加到该对象上
	     * @param { Object... } source 源对象， 支持多个对象， 该对象的属性会被附加到target对象上
	     * @return { Object } 返回target对象
	     * @example
	     * ```javascript
	     *
	     * var target = {},
	     *     source1 = { name: 'source', age: 17 },
	     *     source2 = { title: 'dev' };
	     *
	     * UE.utils.extend2( target, source1, source2 );
	     *
	     * //output: { name: 'source', age: 17, title: 'dev' }
	     * console.log( target );
	     *
	     * ```
	     */
	    extend2:function (t) {
	        var a = arguments;
	        for (var i = 1; i < a.length; i++) {
	            var x = a[i];
	            for (var k in x) {
	                if (!t.hasOwnProperty(k)) {
	                    t[k] = x[k];
	                }
	            }
	        }
	        return t;
	    },

	    /**
	     * 模拟继承机制， 使得subClass继承自superClass
	     * @method inherits
	     * @param { Object } subClass 子类对象
	     * @param { Object } superClass 超类对象
	     * @warning 该方法只能让subClass继承超类的原型， subClass对象自身的属性和方法不会被继承
	     * @return { Object } 继承superClass后的子类对象
	     * @example
	     * ```javascript
	     * function SuperClass(){
	     *     this.name = "小李";
	     * }
	     *
	     * SuperClass.prototype = {
	     *     hello:function(str){
	     *         console.log(this.name + str);
	     *     }
	     * }
	     *
	     * function SubClass(){
	     *     this.name = "小张";
	     * }
	     *
	     * UE.utils.inherits(SubClass,SuperClass);
	     *
	     * var sub = new SubClass();
	     * //output: '小张早上好!
	     * sub.hello("早上好!");
	     * ```
	     */
	    inherits:function (subClass, superClass) {
	        var oldP = subClass.prototype,
	            newP = utils.makeInstance(superClass.prototype);
	        utils.extend(newP, oldP, true);
	        subClass.prototype = newP;
	        return (newP.constructor = subClass);
	    },

	    /**
	     * 用指定的context对象作为函数fn的上下文
	     * @method bind
	     * @param { Function } fn 需要绑定上下文的函数对象
	     * @param { Object } content 函数fn新的上下文对象
	     * @return { Function } 一个新的函数， 该函数作为原始函数fn的代理， 将完成fn的上下文调换工作。
	     * @example
	     * ```javascript
	     *
	     * var name = 'window',
	     *     newTest = null;
	     *
	     * function test () {
	     *     console.log( this.name );
	     * }
	     *
	     * newTest = UE.utils.bind( test, { name: 'object' } );
	     *
	     * //output: object
	     * newTest();
	     *
	     * //output: window
	     * test();
	     *
	     * ```
	     */
	    bind:function (fn, context) {
	        return function () {
	            return fn.apply(context, arguments);
	        };
	    },

	    /**
	     * 创建延迟指定时间后执行的函数fn
	     * @method defer
	     * @param { Function } fn 需要延迟执行的函数对象
	     * @param { int } delay 延迟的时间， 单位是毫秒
	     * @warning 该方法的时间控制是不精确的，仅仅只能保证函数的执行是在给定的时间之后，
	     *           而不能保证刚好到达延迟时间时执行。
	     * @return { Function } 目标函数fn的代理函数， 只有执行该函数才能起到延时效果
	     * @example
	     * ```javascript
	     * var start = 0;
	     *
	     * function test(){
	     *     console.log( new Date() - start );
	     * }
	     *
	     * var testDefer = UE.utils.defer( test, 1000 );
	     * //
	     * start = new Date();
	     * //output: (大约在1000毫秒之后输出) 1000
	     * testDefer();
	     * ```
	     */

	    /**
	     * 创建延迟指定时间后执行的函数fn, 如果在延迟时间内再次执行该方法， 将会根据指定的exclusion的值，
	     * 决定是否取消前一次函数的执行， 如果exclusion的值为true， 则取消执行，反之，将继续执行前一个方法。
	     * @method defer
	     * @param { Function } fn 需要延迟执行的函数对象
	     * @param { int } delay 延迟的时间， 单位是毫秒
	     * @param { Boolean } exclusion 如果在延迟时间内再次执行该函数，该值将决定是否取消执行前一次函数的执行，
	     *                     值为true表示取消执行， 反之则将在执行前一次函数之后才执行本次函数调用。
	     * @warning 该方法的时间控制是不精确的，仅仅只能保证函数的执行是在给定的时间之后，
	     *           而不能保证刚好到达延迟时间时执行。
	     * @return { Function } 目标函数fn的代理函数， 只有执行该函数才能起到延时效果
	     * @example
	     * ```javascript
	     *
	     * function test(){
	     *     console.log(1);
	     * }
	     *
	     * var testDefer = UE.utils.defer( test, 1000, true );
	     *
	     * //output: (两次调用仅有一次输出) 1
	     * testDefer();
	     * testDefer();
	     * ```
	     */
	    defer:function (fn, delay, exclusion) {
	        var timerID;
	        return function () {
	            if (exclusion) {
	                clearTimeout(timerID);
	            }
	            timerID = setTimeout(fn, delay);
	        };
	    },

	    /**
	     * 获取元素item在数组array中首次出现的位置, 如果未找到item， 则返回-1
	     * @method indexOf
	     * @remind 该方法的匹配过程使用的是恒等“===”
	     * @param { Array } array 需要查找的数组对象
	     * @param { * } item 需要在目标数组中查找的值
	     * @return { int } 返回item在目标数组array中首次出现的位置， 如果在数组中未找到item， 则返回-1
	     * @example
	     * ```javascript
	     * var item = 1,
	     *     arr = [ 3, 4, 6, 8, 1, 1, 2 ];
	     *
	     * //output: 4
	     * console.log( UE.utils.indexOf( arr, item ) );
	     * ```
	     */

	    /**
	     * 获取元素item数组array中首次出现的位置, 如果未找到item， 则返回-1。通过start的值可以指定搜索的起始位置。
	     * @method indexOf
	     * @remind 该方法的匹配过程使用的是恒等“===”
	     * @param { Array } array 需要查找的数组对象
	     * @param { * } item 需要在目标数组中查找的值
	     * @param { int } start 搜索的起始位置
	     * @return { int } 返回item在目标数组array中的start位置之后首次出现的位置， 如果在数组中未找到item， 则返回-1
	     * @example
	     * ```javascript
	     * var item = 1,
	     *     arr = [ 3, 4, 6, 8, 1, 2, 8, 3, 2, 1, 1, 4 ];
	     *
	     * //output: 9
	     * console.log( UE.utils.indexOf( arr, item, 5 ) );
	     * ```
	     */
	    indexOf:function (array, item, start) {
	        var index = -1;
	        start = this.isNumber(start) ? start : 0;
	        this.each(array, function (v, i) {
	            if (i >= start && v === item) {
	                index = i;
	                return false;
	            }
	        });
	        return index;
	    },

	    /**
	     * 移除数组array中所有的元素item
	     * @method removeItem
	     * @param { Array } array 要移除元素的目标数组
	     * @param { * } item 将要被移除的元素
	     * @remind 该方法的匹配过程使用的是恒等“===”
	     * @example
	     * ```javascript
	     * var arr = [ 4, 5, 7, 1, 3, 4, 6 ];
	     *
	     * UE.utils.removeItem( arr, 4 );
	     * //output: [ 5, 7, 1, 3, 6 ]
	     * console.log( arr );
	     *
	     * ```
	     */
	    removeItem:function (array, item) {
	        for (var i = 0, l = array.length; i < l; i++) {
	            if (array[i] === item) {
	                array.splice(i, 1);
	                i--;
	            }
	        }
	    },

	    /**
	     * 删除字符串str的首尾空格
	     * @method trim
	     * @param { String } str 需要删除首尾空格的字符串
	     * @return { String } 删除了首尾的空格后的字符串
	     * @example
	     * ```javascript
	     *
	     * var str = " UEdtior ";
	     *
	     * //output: 9
	     * console.log( str.length );
	     *
	     * //output: 7
	     * console.log( UE.utils.trim( " UEdtior " ).length );
	     *
	     * //output: 9
	     * console.log( str.length );
	     *
	     *  ```
	     */
	    trim:function (str) {
	        return str.replace(/(^[ \t\n\r]+)|([ \t\n\r]+$)/g, '');
	    },

	    /**
	     * 将字符串str以','分隔成数组后，将该数组转换成哈希对象， 其生成的hash对象的key为数组中的元素， value为1
	     * @method listToMap
	     * @warning 该方法在生成的hash对象中，会为每一个key同时生成一个另一个全大写的key。
	     * @param { String } str 该字符串将被以','分割为数组， 然后进行转化
	     * @return { Object } 转化之后的hash对象
	     * @example
	     * ```javascript
	     *
	     * //output: Object {UEdtior: 1, UEDTIOR: 1, Hello: 1, HELLO: 1}
	     * console.log( UE.utils.listToMap( 'UEdtior,Hello' ) );
	     *
	     * ```
	     */

	    /**
	     * 将字符串数组转换成哈希对象， 其生成的hash对象的key为数组中的元素， value为1
	     * @method listToMap
	     * @warning 该方法在生成的hash对象中，会为每一个key同时生成一个另一个全大写的key。
	     * @param { Array } arr 字符串数组
	     * @return { Object } 转化之后的hash对象
	     * @example
	     * ```javascript
	     *
	     * //output: Object {UEdtior: 1, UEDTIOR: 1, Hello: 1, HELLO: 1}
	     * console.log( UE.utils.listToMap( [ 'UEdtior', 'Hello' ] ) );
	     *
	     * ```
	     */
	    listToMap:function (list) {
	        if (!list)return {};
	        list = utils.isArray(list) ? list : list.split(',');
	        for (var i = 0, ci, obj = {}; ci = list[i++];) {
	            obj[ci.toUpperCase()] = obj[ci] = 1;
	        }
	        return obj;
	    },

	    /**
	     * 将str中的html符号转义,将转义“'，&，<，"，>”五个字符
	     * @method unhtml
	     * @param { String } str 需要转义的字符串
	     * @return { String } 转义后的字符串
	     * @example
	     * ```javascript
	     * var html = '<body>&</body>';
	     *
	     * //output: &lt;body&gt;&amp;&lt;/body&gt;
	     * console.log( UE.utils.unhtml( html ) );
	     *
	     * ```
	     */
	    unhtml:function (str, reg) {
	        return str ? str.replace(reg || /[&<">'](?:(amp|lt|quot|gt|#39|nbsp|#\d+);)?/g, function (a, b) {
	            if (b) {
	                return a;
	            } else {
	                return {
	                    '<':'&lt;',
	                    '&':'&amp;',
	                    '"':'&quot;',
	                    '>':'&gt;',
	                    "'":'&#39;'
	                }[a]
	            }

	        }) : '';
	    },
	    /**
	     * 将url中的html字符转义， 仅转义  ', ", <, > 四个字符
	     * @param  { String } str 需要转义的字符串
	     * @param  { RegExp } reg 自定义的正则
	     * @return { String }     转义后的字符串
	     */
	    unhtmlForUrl:function (str, reg) {
	        return str ? str.replace(reg || /[<">']/g, function (a) {
	            return {
	                '<':'&lt;',
	                '&':'&amp;',
	                '"':'&quot;',
	                '>':'&gt;',
	                "'":'&#39;'
	            }[a]

	        }) : '';
	    },

	    /**
	     * 将str中的转义字符还原成html字符
	     * @see UE.utils.unhtml(String);
	     * @method html
	     * @param { String } str 需要逆转义的字符串
	     * @return { String } 逆转义后的字符串
	     * @example
	     * ```javascript
	     *
	     * var str = '&lt;body&gt;&amp;&lt;/body&gt;';
	     *
	     * //output: <body>&</body>
	     * console.log( UE.utils.html( str ) );
	     *
	     * ```
	     */
	    html:function (str) {
	        return str ? str.replace(/&((g|l|quo)t|amp|#39|nbsp);/g, function (m) {
	            return {
	                '&lt;':'<',
	                '&amp;':'&',
	                '&quot;':'"',
	                '&gt;':'>',
	                '&#39;':"'",
	                '&nbsp;':' '
	            }[m]
	        }) : '';
	    },

	    /**
	     * 将css样式转换为驼峰的形式
	     * @method cssStyleToDomStyle
	     * @param { String } cssName 需要转换的css样式名
	     * @return { String } 转换成驼峰形式后的css样式名
	     * @example
	     * ```javascript
	     *
	     * var str = 'border-top';
	     *
	     * //output: borderTop
	     * console.log( UE.utils.cssStyleToDomStyle( str ) );
	     *
	     * ```
	     */
	    cssStyleToDomStyle:function () {
	        var test = document.createElement('div').style,
	            cache = {
	                'float':test.cssFloat != undefined ? 'cssFloat' : test.styleFloat != undefined ? 'styleFloat' : 'float'
	            };

	        return function (cssName) {
	            return cache[cssName] || (cache[cssName] = cssName.toLowerCase().replace(/-./g, function (match) {
	                return match.charAt(1).toUpperCase();
	            }));
	        };
	    }(),

	    /**
	     * 动态加载文件到doc中
	     * @method loadFile
	     * @param { DomDocument } document 需要加载资源文件的文档对象
	     * @param { Object } options 加载资源文件的属性集合， 取值请参考代码示例
	     * @example
	     * ```javascript
	     *
	     * UE.utils.loadFile( document, {
	     *     src:"test.js",
	     *     tag:"script",
	     *     type:"text/javascript",
	     *     defer:"defer"
	     * } );
	     *
	     * ```
	     */

	    /**
	     * 动态加载文件到doc中，加载成功后执行的回调函数fn
	     * @method loadFile
	     * @param { DomDocument } document 需要加载资源文件的文档对象
	     * @param { Object } options 加载资源文件的属性集合， 该集合支持的值是script标签和style标签支持的所有属性。
	     * @param { Function } fn 资源文件加载成功之后执行的回调
	     * @warning 对于在同一个文档中多次加载同一URL的文件， 该方法会在第一次加载之后缓存该请求，
	     *           在此之后的所有同一URL的请求， 将会直接触发回调。
	     * @example
	     * ```javascript
	     *
	     * UE.utils.loadFile( document, {
	     *     src:"test.js",
	     *     tag:"script",
	     *     type:"text/javascript",
	     *     defer:"defer"
	     * }, function () {
	     *     console.log('加载成功');
	     * } );
	     *
	     * ```
	     */
	    loadFile:function () {
	        var tmpList = [];

	        function getItem(doc, obj) {
	            try {
	                for (var i = 0, ci; ci = tmpList[i++];) {
	                    if (ci.doc === doc && ci.url == (obj.src || obj.href)) {
	                        return ci;
	                    }
	                }
	            } catch (e) {
	                return null;
	            }

	        }

	        return function (doc, obj, fn) {
	            var item = getItem(doc, obj);
	            if (item) {
	                if (item.ready) {
	                    fn && fn();
	                } else {
	                    item.funs.push(fn)
	                }
	                return;
	            }
	            tmpList.push({
	                doc:doc,
	                url:obj.src || obj.href,
	                funs:[fn]
	            });
	            if (!doc.body) {
	                var html = [];
	                for (var p in obj) {
	                    if (p == 'tag')continue;
	                    html.push(p + '="' + obj[p] + '"')
	                }
	                doc.write('<' + obj.tag + ' ' + html.join(' ') + ' ></' + obj.tag + '>');
	                return;
	            }
	            if (obj.id && doc.getElementById(obj.id)) {
	                return;
	            }
	            var element = doc.createElement(obj.tag);
	            delete obj.tag;
	            for (var p in obj) {
	                element.setAttribute(p, obj[p]);
	            }
	            element.onload = element.onreadystatechange = function () {
	                if (!this.readyState || /loaded|complete/.test(this.readyState)) {
	                    item = getItem(doc, obj);
	                    if (item.funs.length > 0) {
	                        item.ready = 1;
	                        for (var fi; fi = item.funs.pop();) {
	                            fi();
	                        }
	                    }
	                    element.onload = element.onreadystatechange = null;
	                }
	            };
	            element.onerror = function () {
	                throw Error('The load ' + (obj.href || obj.src) + ' fails,check the url settings of file ueditor.config.js ')
	            };
	            doc.getElementsByTagName("head")[0].appendChild(element);
	        }
	    }(),

	    /**
	     * 判断obj对象是否为空
	     * @method isEmptyObject
	     * @param { * } obj 需要判断的对象
	     * @remind 如果判断的对象是NULL， 将直接返回true， 如果是数组且为空， 返回true， 如果是字符串， 且字符串为空，
	     *          返回true， 如果是普通对象， 且该对象没有任何实例属性， 返回true
	     * @return { Boolean } 对象是否为空
	     * @example
	     * ```javascript
	     *
	     * //output: true
	     * console.log( UE.utils.isEmptyObject( {} ) );
	     *
	     * //output: true
	     * console.log( UE.utils.isEmptyObject( [] ) );
	     *
	     * //output: true
	     * console.log( UE.utils.isEmptyObject( "" ) );
	     *
	     * //output: false
	     * console.log( UE.utils.isEmptyObject( { key: 1 } ) );
	     *
	     * //output: false
	     * console.log( UE.utils.isEmptyObject( [1] ) );
	     *
	     * //output: false
	     * console.log( UE.utils.isEmptyObject( "1" ) );
	     *
	     * ```
	     */
	    isEmptyObject:function (obj) {
	        if (obj == null) return true;
	        if (this.isArray(obj) || this.isString(obj)) return obj.length === 0;
	        for (var key in obj) if (obj.hasOwnProperty(key)) return false;
	        return true;
	    },

	    /**
	     * 把rgb格式的颜色值转换成16进制格式
	     * @method fixColor
	     * @param { String } rgb格式的颜色值
	     * @param { String }
	     * @example
	     * rgb(255,255,255)  => "#ffffff"
	     */
	    fixColor:function (name, value) {
	        if (/color/i.test(name) && /rgba?/.test(value)) {
	            var array = value.split(",");
	            if (array.length > 3)
	                return "";
	            value = "#";
	            for (var i = 0, color; color = array[i++];) {
	                color = parseInt(color.replace(/[^\d]/gi, ''), 10).toString(16);
	                value += color.length == 1 ? "0" + color : color;
	            }
	            value = value.toUpperCase();
	        }
	        return  value;
	    },
	    /**
	     * 只针对border,padding,margin做了处理，因为性能问题
	     * @public
	     * @function
	     * @param {String}    val style字符串
	     */
	    optCss:function (val) {
	        var padding, margin, border;
	        val = val.replace(/(padding|margin|border)\-([^:]+):([^;]+);?/gi, function (str, key, name, val) {
	            if (val.split(' ').length == 1) {
	                switch (key) {
	                    case 'padding':
	                        !padding && (padding = {});
	                        padding[name] = val;
	                        return '';
	                    case 'margin':
	                        !margin && (margin = {});
	                        margin[name] = val;
	                        return '';
	                    case 'border':
	                        return val == 'initial' ? '' : str;
	                }
	            }
	            return str;
	        });

	        function opt(obj, name) {
	            if (!obj) {
	                return '';
	            }
	            var t = obj.top , b = obj.bottom, l = obj.left, r = obj.right, val = '';
	            if (!t || !l || !b || !r) {
	                for (var p in obj) {
	                    val += ';' + name + '-' + p + ':' + obj[p] + ';';
	                }
	            } else {
	                val += ';' + name + ':' +
	                    (t == b && b == l && l == r ? t :
	                        t == b && l == r ? (t + ' ' + l) :
	                            l == r ? (t + ' ' + l + ' ' + b) : (t + ' ' + r + ' ' + b + ' ' + l)) + ';'
	            }
	            return val;
	        }

	        val += opt(padding, 'padding') + opt(margin, 'margin');
	        return val.replace(/^[ \n\r\t;]*|[ \n\r\t]*$/, '').replace(/;([ \n\r\t]+)|\1;/g, ';')
	            .replace(/(&((l|g)t|quot|#39))?;{2,}/g, function (a, b) {
	                return b ? b + ";;" : ';'
	            });
	    },

	    /**
	     * 克隆对象
	     * @method clone
	     * @param { Object } source 源对象
	     * @return { Object } source的一个副本
	     */

	    /**
	     * 深度克隆对象，将source的属性克隆到target对象， 会覆盖target重名的属性。
	     * @method clone
	     * @param { Object } source 源对象
	     * @param { Object } target 目标对象
	     * @return { Object } 附加了source对象所有属性的target对象
	     */
	    clone:function (source, target) {
	        var tmp;
	        target = target || {};
	        for (var i in source) {
	            if (source.hasOwnProperty(i)) {
	                tmp = source[i];
	                if (typeof tmp == 'object') {
	                    target[i] = utils.isArray(tmp) ? [] : {};
	                    utils.clone(source[i], target[i])
	                } else {
	                    target[i] = tmp;
	                }
	            }
	        }
	        return target;
	    },

	    /**
	     * 把cm／pt为单位的值转换为px为单位的值
	     * @method transUnitToPx
	     * @param { String } 待转换的带单位的字符串
	     * @return { String } 转换为px为计量单位的值的字符串
	     * @example
	     * ```javascript
	     *
	     * //output: 500px
	     * console.log( UE.utils.transUnitToPx( '20cm' ) );
	     *
	     * //output: 27px
	     * console.log( UE.utils.transUnitToPx( '20pt' ) );
	     *
	     * ```
	     */
	    transUnitToPx:function (val) {
	        if (!/(pt|cm)/.test(val)) {
	            return val
	        }
	        var unit;
	        val.replace(/([\d.]+)(\w+)/, function (str, v, u) {
	            val = v;
	            unit = u;
	        });
	        switch (unit) {
	            case 'cm':
	                val = parseFloat(val) * 25;
	                break;
	            case 'pt':
	                val = Math.round(parseFloat(val) * 96 / 72);
	        }
	        return val + (val ? 'px' : '');
	    },

	    /**
	     * 在dom树ready之后执行给定的回调函数
	     * @method domReady
	     * @remind 如果在执行该方法的时候， dom树已经ready， 那么回调函数将立刻执行
	     * @param { Function } fn dom树ready之后的回调函数
	     * @example
	     * ```javascript
	     *
	     * UE.utils.domReady( function () {
	     *
	     *     console.log('123');
	     *
	     * } );
	     *
	     * ```
	     */
	    domReady:function () {

	        var fnArr = [];

	        function doReady(doc) {
	            //确保onready只执行一次
	            doc.isReady = true;
	            for (var ci; ci = fnArr.pop(); ci()) {
	            }
	        }

	        return function (onready, win) {
	            win = win || window;
	            var doc = win.document;
	            onready && fnArr.push(onready);
	            if (doc.readyState === "complete") {
	                doReady(doc);
	            } else {
	                doc.isReady && doReady(doc);
	                if (browser.ie && browser.version != 11) {
	                    (function () {
	                        if (doc.isReady) return;
	                        try {
	                            doc.documentElement.doScroll("left");
	                        } catch (error) {
	                            setTimeout(arguments.callee, 0);
	                            return;
	                        }
	                        doReady(doc);
	                    })();
	                    win.attachEvent('onload', function () {
	                        doReady(doc)
	                    });
	                } else {
	                    doc.addEventListener("DOMContentLoaded", function () {
	                        doc.removeEventListener("DOMContentLoaded", arguments.callee, false);
	                        doReady(doc);
	                    }, false);
	                    win.addEventListener('load', function () {
	                        doReady(doc)
	                    }, false);
	                }
	            }

	        }
	    }(),

	    /**
	     * 动态添加css样式
	     * @method cssRule
	     * @param { String } 节点名称
	     * @grammar UE.utils.cssRule('添加的样式的节点名称',['样式'，'放到哪个document上'])
	     * @grammar UE.utils.cssRule('body','body{background:#ccc}') => null  //给body添加背景颜色
	     * @grammar UE.utils.cssRule('body') =>样式的字符串  //取得key值为body的样式的内容,如果没有找到key值先关的样式将返回空，例如刚才那个背景颜色，将返回 body{background:#ccc}
	     * @grammar UE.utils.cssRule('body',document) => 返回指定key的样式，并且指定是哪个document
	     * @grammar UE.utils.cssRule('body','') =>null //清空给定的key值的背景颜色
	     */
	    cssRule:browser.ie && browser.version != 11 ? function (key, style, doc) {
	        var indexList, index;
	        if(style === undefined || style && style.nodeType && style.nodeType == 9){
	            //获取样式
	            doc = style && style.nodeType && style.nodeType == 9 ? style : (doc || document);
	            indexList = doc.indexList || (doc.indexList = {});
	            index = indexList[key];
	            if(index !==  undefined){
	                return doc.styleSheets[index].cssText
	            }
	            return undefined;
	        }
	        doc = doc || document;
	        indexList = doc.indexList || (doc.indexList = {});
	        index = indexList[key];
	        //清除样式
	        if(style === ''){
	            if(index!== undefined){
	                doc.styleSheets[index].cssText = '';
	                delete indexList[key];
	                return true
	            }
	            return false;
	        }

	        //添加样式
	        if(index!== undefined){
	            sheetStyle =  doc.styleSheets[index];
	        }else{
	            sheetStyle = doc.createStyleSheet('', index = doc.styleSheets.length);
	            indexList[key] = index;
	        }
	        sheetStyle.cssText = style;
	    }: function (key, style, doc) {
	        var head, node;
	        if(style === undefined || style && style.nodeType && style.nodeType == 9){
	            //获取样式
	            doc = style && style.nodeType && style.nodeType == 9 ? style : (doc || document);
	            node = doc.getElementById(key);
	            return node ? node.innerHTML : undefined;
	        }
	        doc = doc || document;
	        node = doc.getElementById(key);

	        //清除样式
	        if(style === ''){
	            if(node){
	                node.parentNode.removeChild(node);
	                return true
	            }
	            return false;
	        }

	        //添加样式
	        if(node){
	            node.innerHTML = style;
	        }else{
	            node = doc.createElement('style');
	            node.id = key;
	            node.innerHTML = style;
	            doc.getElementsByTagName('head')[0].appendChild(node);
	        }
	    },
	    sort:function(array,compareFn){
	        compareFn = compareFn || function(item1, item2){ return item1.localeCompare(item2);};
	        for(var i= 0,len = array.length; i<len; i++){
	            for(var j = i,length = array.length; j<length; j++){
	                if(compareFn(array[i], array[j]) > 0){
	                    var t = array[i];
	                    array[i] = array[j];
	                    array[j] = t;
	                }
	            }
	        }
	        return array;
	    },
	    serializeParam:function (json) {
	        var strArr = [];
	        for (var i in json) {
	            //忽略默认的几个参数
	            if(i=="method" || i=="timeout" || i=="async") continue;
	            //传递过来的对象和函数不在提交之列
	            if (!((typeof json[i]).toLowerCase() == "function" || (typeof json[i]).toLowerCase() == "object")) {
	                strArr.push( encodeURIComponent(i) + "="+encodeURIComponent(json[i]) );
	            } else if (utils.isArray(json[i])) {
	                //支持传数组内容
	                for(var j = 0; j < json[i].length; j++) {
	                    strArr.push( encodeURIComponent(i) + "[]="+encodeURIComponent(json[i][j]) );
	                }
	            }
	        }
	        return strArr.join("&");
	    },
	    formatUrl:function (url) {
	        var u = url.replace(/&&/g, '&');
	        u = u.replace(/\?&/g, '?');
	        u = u.replace(/&$/g, '');
	        u = u.replace(/&#/g, '#');
	        u = u.replace(/&+/g, '&');
	        return u;
	    },
	    isCrossDomainUrl:function (url) {
	        var a = document.createElement('a');
	        a.href = url;
	        if (browser.ie) {
	            a.href = a.href;
	        }
	        return !(a.protocol == location.protocol && a.hostname == location.hostname &&
	        (a.port == location.port || (a.port == '80' && location.port == '') || (a.port == '' && location.port == '80')));
	    },
	    clearEmptyAttrs : function(obj){
	        for(var p in obj){
	            if(obj[p] === ''){
	                delete obj[p]
	            }
	        }
	        return obj;
	    },
	    str2json : function(s){

	        if (!utils.isString(s)) return null;
	        if (window.JSON) {
	            return JSON.parse(s);
	        } else {
	            return (new Function("return " + utils.trim(s || '')))();
	        }

	    },
	    json2str : (function(){

	        if (window.JSON) {

	            return JSON.stringify;

	        } else {

	            var escapeMap = {
	                "\b": '\\b',
	                "\t": '\\t',
	                "\n": '\\n',
	                "\f": '\\f',
	                "\r": '\\r',
	                '"' : '\\"',
	                "\\": '\\\\'
	            };

	            function encodeString(source) {
	                if (/["\\\x00-\x1f]/.test(source)) {
	                    source = source.replace(
	                        /["\\\x00-\x1f]/g,
	                        function (match) {
	                            var c = escapeMap[match];
	                            if (c) {
	                                return c;
	                            }
	                            c = match.charCodeAt();
	                            return "\\u00"
	                            + Math.floor(c / 16).toString(16)
	                            + (c % 16).toString(16);
	                        });
	                }
	                return '"' + source + '"';
	            }

	            function encodeArray(source) {
	                var result = ["["],
	                    l = source.length,
	                    preComma, i, item;

	                for (i = 0; i < l; i++) {
	                    item = source[i];

	                    switch (typeof item) {
	                        case "undefined":
	                        case "function":
	                        case "unknown":
	                            break;
	                        default:
	                            if(preComma) {
	                                result.push(',');
	                            }
	                            result.push(utils.json2str(item));
	                            preComma = 1;
	                    }
	                }
	                result.push("]");
	                return result.join("");
	            }

	            function pad(source) {
	                return source < 10 ? '0' + source : source;
	            }

	            function encodeDate(source){
	                return '"' + source.getFullYear() + "-"
	                + pad(source.getMonth() + 1) + "-"
	                + pad(source.getDate()) + "T"
	                + pad(source.getHours()) + ":"
	                + pad(source.getMinutes()) + ":"
	                + pad(source.getSeconds()) + '"';
	            }

	            return function (value) {
	                switch (typeof value) {
	                    case 'undefined':
	                        return 'undefined';

	                    case 'number':
	                        return isFinite(value) ? String(value) : "null";

	                    case 'string':
	                        return encodeString(value);

	                    case 'boolean':
	                        return String(value);

	                    default:
	                        if (value === null) {
	                            return 'null';
	                        } else if (utils.isArray(value)) {
	                            return encodeArray(value);
	                        } else if (utils.isDate(value)) {
	                            return encodeDate(value);
	                        } else {
	                            var result = ['{'],
	                                encode = utils.json2str,
	                                preComma,
	                                item;

	                            for (var key in value) {
	                                if (Object.prototype.hasOwnProperty.call(value, key)) {
	                                    item = value[key];
	                                    switch (typeof item) {
	                                        case 'undefined':
	                                        case 'unknown':
	                                        case 'function':
	                                            break;
	                                        default:
	                                            if (preComma) {
	                                                result.push(',');
	                                            }
	                                            preComma = 1;
	                                            result.push(encode(key) + ':' + encode(item));
	                                    }
	                                }
	                            }
	                            result.push('}');
	                            return result.join('');
	                        }
	                }
	            };
	        }

	    })()

	};
	/**
	 * 判断给定的对象是否是字符串
	 * @method isString
	 * @param { * } object 需要判断的对象
	 * @return { Boolean } 给定的对象是否是字符串
	 */

	/**
	 * 判断给定的对象是否是数组
	 * @method isArray
	 * @param { * } object 需要判断的对象
	 * @return { Boolean } 给定的对象是否是数组
	 */

	/**
	 * 判断给定的对象是否是一个Function
	 * @method isFunction
	 * @param { * } object 需要判断的对象
	 * @return { Boolean } 给定的对象是否是Function
	 */

	/**
	 * 判断给定的对象是否是Number
	 * @method isNumber
	 * @param { * } object 需要判断的对象
	 * @return { Boolean } 给定的对象是否是Number
	 */

	/**
	 * 判断给定的对象是否是一个正则表达式
	 * @method isRegExp
	 * @param { * } object 需要判断的对象
	 * @return { Boolean } 给定的对象是否是正则表达式
	 */

	/**
	 * 判断给定的对象是否是一个普通对象
	 * @method isObject
	 * @param { * } object 需要判断的对象
	 * @return { Boolean } 给定的对象是否是普通对象
	 */
	utils.each(['String', 'Function', 'Array', 'Number', 'RegExp', 'Object', 'Date'], function (v) {
	    UE.utils['is' + v] = function (obj) {
	        return Object.prototype.toString.apply(obj) == '[object ' + v + ']';
	    }
	});


	// core/EventBase.js
	/**
	 * UE采用的事件基类
	 * @file
	 * @module UE
	 * @class EventBase
	 * @since 1.2.6.1
	 */

	/**
	 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
	 * @unfile
	 * @module UE
	 */

	/**
	 * UE采用的事件基类，继承此类的对应类将获取addListener,removeListener,fireEvent方法。
	 * 在UE中，Editor以及所有ui实例都继承了该类，故可以在对应的ui对象以及editor对象上使用上述方法。
	 * @unfile
	 * @module UE
	 * @class EventBase
	 */

	/**
	 * 通过此构造器，子类可以继承EventBase获取事件监听的方法
	 * @constructor
	 * @example
	 * ```javascript
	 * UE.EventBase.call(editor);
	 * ```
	 */
	var EventBase = UE.EventBase = function () {};

	EventBase.prototype = {

	    /**
	     * 注册事件监听器
	     * @method addListener
	     * @param { String } types 监听的事件名称，同时监听多个事件使用空格分隔
	     * @param { Function } fn 监听的事件被触发时，会执行该回调函数
	     * @waining 事件被触发时，监听的函数假如返回的值恒等于true，回调函数的队列中后面的函数将不执行
	     * @example
	     * ```javascript
	     * editor.addListener('selectionchange',function(){
	     *      console.log("选区已经变化！");
	     * })
	     * editor.addListener('beforegetcontent aftergetcontent',function(type){
	     *         if(type == 'beforegetcontent'){
	     *             //do something
	     *         }else{
	     *             //do something
	     *         }
	     *         console.log(this.getContent) // this是注册的事件的编辑器实例
	     * })
	     * ```
	     * @see UE.EventBase:fireEvent(String)
	     */
	    addListener:function (types, listener) {
	        types = utils.trim(types).split(/\s+/);
	        for (var i = 0, ti; ti = types[i++];) {
	            getListener(this, ti, true).push(listener);
	        }
	    },

	    on : function(types, listener){
	      return this.addListener(types,listener);
	    },
	    off : function(types, listener){
	        return this.removeListener(types, listener)
	    },
	    trigger:function(){
	        return this.fireEvent.apply(this,arguments);
	    },
	    /**
	     * 移除事件监听器
	     * @method removeListener
	     * @param { String } types 移除的事件名称，同时移除多个事件使用空格分隔
	     * @param { Function } fn 移除监听事件的函数引用
	     * @example
	     * ```javascript
	     * //changeCallback为方法体
	     * editor.removeListener("selectionchange",changeCallback);
	     * ```
	     */
	    removeListener:function (types, listener) {
	        types = utils.trim(types).split(/\s+/);
	        for (var i = 0, ti; ti = types[i++];) {
	            utils.removeItem(getListener(this, ti) || [], listener);
	        }
	    },

	    /**
	     * 触发事件
	     * @method fireEvent
	     * @param { String } types 触发的事件名称，同时触发多个事件使用空格分隔
	     * @remind 该方法会触发addListener
	     * @return { * } 返回触发事件的队列中，最后执行的回调函数的返回值
	     * @example
	     * ```javascript
	     * editor.fireEvent("selectionchange");
	     * ```
	     */

	    /**
	     * 触发事件
	     * @method fireEvent
	     * @param { String } types 触发的事件名称，同时触发多个事件使用空格分隔
	     * @param { *... } options 可选参数，可以传入一个或多个参数，会传给事件触发的回调函数
	     * @return { * } 返回触发事件的队列中，最后执行的回调函数的返回值
	     * @example
	     * ```javascript
	     *
	     * editor.addListener( "selectionchange", function ( type, arg1, arg2 ) {
	     *
	     *     console.log( arg1 + " " + arg2 );
	     *
	     * } );
	     *
	     * //触发selectionchange事件， 会执行上面的事件监听器
	     * //output: Hello World
	     * editor.fireEvent("selectionchange", "Hello", "World");
	     * ```
	     */
	    fireEvent:function () {
	        var types = arguments[0];
	        types = utils.trim(types).split(' ');
	        for (var i = 0, ti; ti = types[i++];) {
	            var listeners = getListener(this, ti),
	                r, t, k;
	            if (listeners) {
	                k = listeners.length;
	                while (k--) {
	                    if(!listeners[k])continue;
	                    t = listeners[k].apply(this, arguments);
	                    if(t === true){
	                        return t;
	                    }
	                    if (t !== undefined) {
	                        r = t;
	                    }
	                }
	            }
	            if (t = this['on' + ti.toLowerCase()]) {
	                r = t.apply(this, arguments);
	            }
	        }
	        return r;
	    }
	};
	/**
	 * 获得对象所拥有监听类型的所有监听器
	 * @unfile
	 * @module UE
	 * @since 1.2.6.1
	 * @method getListener
	 * @public
	 * @param { Object } obj  查询监听器的对象
	 * @param { String } type 事件类型
	 * @param { Boolean } force  为true且当前所有type类型的侦听器不存在时，创建一个空监听器数组
	 * @return { Array } 监听器数组
	 */
	function getListener(obj, type, force) {
	    var allListeners;
	    type = type.toLowerCase();
	    return ( ( allListeners = ( obj.__allListeners || force && ( obj.__allListeners = {} ) ) )
	        && ( allListeners[type] || force && ( allListeners[type] = [] ) ) );
	}



	// core/dtd.js
	///import editor.js
	///import core/dom/dom.js
	///import core/utils.js
	/**
	 * dtd html语义化的体现类
	 * @constructor
	 * @namespace dtd
	 */
	var dtd = dom.dtd = (function() {
	    function _( s ) {
	        for (var k in s) {
	            s[k.toUpperCase()] = s[k];
	        }
	        return s;
	    }
	    var X = utils.extend2;
	    var A = _({isindex:1,fieldset:1}),
	        B = _({input:1,button:1,select:1,textarea:1,label:1}),
	        C = X( _({a:1}), B ),
	        D = X( {iframe:1}, C ),
	        E = _({hr:1,ul:1,menu:1,div:1,blockquote:1,noscript:1,table:1,center:1,address:1,dir:1,pre:1,h5:1,dl:1,h4:1,noframes:1,h6:1,ol:1,h1:1,h3:1,h2:1}),
	        F = _({ins:1,del:1,script:1,style:1}),
	        G = X( _({b:1,acronym:1,bdo:1,'var':1,'#':1,abbr:1,code:1,br:1,i:1,cite:1,kbd:1,u:1,strike:1,s:1,tt:1,strong:1,q:1,samp:1,em:1,dfn:1,span:1}), F ),
	        H = X( _({sub:1,img:1,embed:1,object:1,sup:1,basefont:1,map:1,applet:1,font:1,big:1,small:1}), G ),
	        I = X( _({p:1}), H ),
	        J = X( _({iframe:1}), H, B ),
	        K = _({img:1,embed:1,noscript:1,br:1,kbd:1,center:1,button:1,basefont:1,h5:1,h4:1,samp:1,h6:1,ol:1,h1:1,h3:1,h2:1,form:1,font:1,'#':1,select:1,menu:1,ins:1,abbr:1,label:1,code:1,table:1,script:1,cite:1,input:1,iframe:1,strong:1,textarea:1,noframes:1,big:1,small:1,span:1,hr:1,sub:1,bdo:1,'var':1,div:1,object:1,sup:1,strike:1,dir:1,map:1,dl:1,applet:1,del:1,isindex:1,fieldset:1,ul:1,b:1,acronym:1,a:1,blockquote:1,i:1,u:1,s:1,tt:1,address:1,q:1,pre:1,p:1,em:1,dfn:1}),

	        L = X( _({a:0}), J ),//a不能被切开，所以把他
	        M = _({tr:1}),
	        N = _({'#':1}),
	        O = X( _({param:1}), K ),
	        P = X( _({form:1}), A, D, E, I ),
	        Q = _({li:1,ol:1,ul:1}),
	        R = _({style:1,script:1}),
	        S = _({base:1,link:1,meta:1,title:1}),
	        T = X( S, R ),
	        U = _({head:1,body:1}),
	        V = _({html:1});

	    var block = _({address:1,blockquote:1,center:1,dir:1,div:1,dl:1,fieldset:1,form:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,hr:1,isindex:1,menu:1,noframes:1,ol:1,p:1,pre:1,table:1,ul:1}),

	        empty =  _({area:1,base:1,basefont:1,br:1,col:1,command:1,dialog:1,embed:1,hr:1,img:1,input:1,isindex:1,keygen:1,link:1,meta:1,param:1,source:1,track:1,wbr:1});

	    return  _({

	        // $ 表示自定的属性

	        // body外的元素列表.
	        $nonBodyContent: X( V, U, S ),

	        //块结构元素列表
	        $block : block,

	        //内联元素列表
	        $inline : L,

	        $inlineWithA : X(_({a:1}),L),

	        $body : X( _({script:1,style:1}), block ),

	        $cdata : _({script:1,style:1}),

	        //自闭和元素
	        $empty : empty,

	        //不是自闭合，但不能让range选中里边
	        $nonChild : _({iframe:1,textarea:1}),
	        //列表元素列表
	        $listItem : _({dd:1,dt:1,li:1}),

	        //列表根元素列表
	        $list: _({ul:1,ol:1,dl:1}),

	        //不能认为是空的元素
	        $isNotEmpty : _({table:1,ul:1,ol:1,dl:1,iframe:1,area:1,base:1,col:1,hr:1,img:1,embed:1,input:1,link:1,meta:1,param:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1}),

	        //如果没有子节点就可以删除的元素列表，像span,a
	        $removeEmpty : _({a:1,abbr:1,acronym:1,address:1,b:1,bdo:1,big:1,cite:1,code:1,del:1,dfn:1,em:1,font:1,i:1,ins:1,label:1,kbd:1,q:1,s:1,samp:1,small:1,span:1,strike:1,strong:1,sub:1,sup:1,tt:1,u:1,'var':1}),

	        $removeEmptyBlock : _({'p':1,'div':1}),

	        //在table元素里的元素列表
	        $tableContent : _({caption:1,col:1,colgroup:1,tbody:1,td:1,tfoot:1,th:1,thead:1,tr:1,table:1}),
	        //不转换的标签
	        $notTransContent : _({pre:1,script:1,style:1,textarea:1}),
	        html: U,
	        head: T,
	        style: N,
	        script: N,
	        body: P,
	        base: {},
	        link: {},
	        meta: {},
	        title: N,
	        col : {},
	        tr : _({td:1,th:1}),
	        img : {},
	        embed: {},
	        colgroup : _({thead:1,col:1,tbody:1,tr:1,tfoot:1}),
	        noscript : P,
	        td : P,
	        br : {},
	        th : P,
	        center : P,
	        kbd : L,
	        button : X( I, E ),
	        basefont : {},
	        h5 : L,
	        h4 : L,
	        samp : L,
	        h6 : L,
	        ol : Q,
	        h1 : L,
	        h3 : L,
	        option : N,
	        h2 : L,
	        form : X( A, D, E, I ),
	        select : _({optgroup:1,option:1}),
	        font : L,
	        ins : L,
	        menu : Q,
	        abbr : L,
	        label : L,
	        table : _({thead:1,col:1,tbody:1,tr:1,colgroup:1,caption:1,tfoot:1}),
	        code : L,
	        tfoot : M,
	        cite : L,
	        li : P,
	        input : {},
	        iframe : P,
	        strong : L,
	        textarea : N,
	        noframes : P,
	        big : L,
	        small : L,
	        //trace:
	        span :_({'#':1,br:1,b:1,strong:1,u:1,i:1,em:1,sub:1,sup:1,strike:1,span:1}),
	        hr : L,
	        dt : L,
	        sub : L,
	        optgroup : _({option:1}),
	        param : {},
	        bdo : L,
	        'var' : L,
	        div : P,
	        object : O,
	        sup : L,
	        dd : P,
	        strike : L,
	        area : {},
	        dir : Q,
	        map : X( _({area:1,form:1,p:1}), A, F, E ),
	        applet : O,
	        dl : _({dt:1,dd:1}),
	        del : L,
	        isindex : {},
	        fieldset : X( _({legend:1}), K ),
	        thead : M,
	        ul : Q,
	        acronym : L,
	        b : L,
	        a : X( _({a:1}), J ),
	        blockquote :X(_({td:1,tr:1,tbody:1,li:1}),P),
	        caption : L,
	        i : L,
	        u : L,
	        tbody : M,
	        s : L,
	        address : X( D, I ),
	        tt : L,
	        legend : L,
	        q : L,
	        pre : X( G, C ),
	        p : X(_({'a':1}),L),
	        em :L,
	        dfn : L
	    });
	})();


	// core/domUtils.js
	/**
	 * Dom操作工具包
	 * @file
	 * @module UE.dom.domUtils
	 * @since 1.2.6.1
	 */

	/**
	 * Dom操作工具包
	 * @unfile
	 * @module UE.dom.domUtils
	 */
	function getDomNode(node, start, ltr, startFromChild, fn, guard) {
	    var tmpNode = startFromChild && node[start],
	        parent;
	    !tmpNode && (tmpNode = node[ltr]);
	    while (!tmpNode && (parent = (parent || node).parentNode)) {
	        if (parent.tagName == 'BODY' || guard && !guard(parent)) {
	            return null;
	        }
	        tmpNode = parent[ltr];
	    }
	    if (tmpNode && fn && !fn(tmpNode)) {
	        return  getDomNode(tmpNode, start, ltr, false, fn);
	    }
	    return tmpNode;
	}
	var attrFix = ie && browser.version < 9 ? {
	        tabindex:"tabIndex",
	        readonly:"readOnly",
	        "for":"htmlFor",
	        "class":"className",
	        maxlength:"maxLength",
	        cellspacing:"cellSpacing",
	        cellpadding:"cellPadding",
	        rowspan:"rowSpan",
	        colspan:"colSpan",
	        usemap:"useMap",
	        frameborder:"frameBorder"
	    } : {
	        tabindex:"tabIndex",
	        readonly:"readOnly"
	    },
	    styleBlock = utils.listToMap([
	        '-webkit-box', '-moz-box', 'block' ,
	        'list-item' , 'table' , 'table-row-group' ,
	        'table-header-group', 'table-footer-group' ,
	        'table-row' , 'table-column-group' , 'table-column' ,
	        'table-cell' , 'table-caption'
	    ]);
	var domUtils = dom.domUtils = {
	    //节点常量
	    NODE_ELEMENT:1,
	    NODE_DOCUMENT:9,
	    NODE_TEXT:3,
	    NODE_COMMENT:8,
	    NODE_DOCUMENT_FRAGMENT:11,

	    //位置关系
	    POSITION_IDENTICAL:0,
	    POSITION_DISCONNECTED:1,
	    POSITION_FOLLOWING:2,
	    POSITION_PRECEDING:4,
	    POSITION_IS_CONTAINED:8,
	    POSITION_CONTAINS:16,
	    //ie6使用其他的会有一段空白出现
	    fillChar:ie && browser.version == '6' ? '\ufeff' : '\u200B',
	    //-------------------------Node部分--------------------------------
	    keys:{
	        /*Backspace*/ 8:1, /*Delete*/ 46:1,
	        /*Shift*/ 16:1, /*Ctrl*/ 17:1, /*Alt*/ 18:1,
	        37:1, 38:1, 39:1, 40:1,
	        13:1 /*enter*/
	    },
	    /**
	     * 获取节点A相对于节点B的位置关系
	     * @method getPosition
	     * @param { Node } nodeA 需要查询位置关系的节点A
	     * @param { Node } nodeB 需要查询位置关系的节点B
	     * @return { Number } 节点A与节点B的关系
	     * @example
	     * ```javascript
	     * //output: 20
	     * var position = UE.dom.domUtils.getPosition( document.documentElement, document.body );
	     *
	     * switch ( position ) {
	     *
	     *      //0
	     *      case UE.dom.domUtils.POSITION_IDENTICAL:
	     *          console.log('元素相同');
	     *          break;
	     *      //1
	     *      case UE.dom.domUtils.POSITION_DISCONNECTED:
	     *          console.log('两个节点在不同的文档中');
	     *          break;
	     *      //2
	     *      case UE.dom.domUtils.POSITION_FOLLOWING:
	     *          console.log('节点A在节点B之后');
	     *          break;
	     *      //4
	     *      case UE.dom.domUtils.POSITION_PRECEDING;
	     *          console.log('节点A在节点B之前');
	     *          break;
	     *      //8
	     *      case UE.dom.domUtils.POSITION_IS_CONTAINED:
	     *          console.log('节点A被节点B包含');
	     *          break;
	     *      case 10:
	     *          console.log('节点A被节点B包含且节点A在节点B之后');
	     *          break;
	     *      //16
	     *      case UE.dom.domUtils.POSITION_CONTAINS:
	     *          console.log('节点A包含节点B');
	     *          break;
	     *      case 20:
	     *          console.log('节点A包含节点B且节点A在节点B之前');
	     *          break;
	     *
	     * }
	     * ```
	     */
	    getPosition:function (nodeA, nodeB) {
	        // 如果两个节点是同一个节点
	        if (nodeA === nodeB) {
	            // domUtils.POSITION_IDENTICAL
	            return 0;
	        }
	        var node,
	            parentsA = [nodeA],
	            parentsB = [nodeB];
	        node = nodeA;
	        while (node = node.parentNode) {
	            // 如果nodeB是nodeA的祖先节点
	            if (node === nodeB) {
	                // domUtils.POSITION_IS_CONTAINED + domUtils.POSITION_FOLLOWING
	                return 10;
	            }
	            parentsA.push(node);
	        }
	        node = nodeB;
	        while (node = node.parentNode) {
	            // 如果nodeA是nodeB的祖先节点
	            if (node === nodeA) {
	                // domUtils.POSITION_CONTAINS + domUtils.POSITION_PRECEDING
	                return 20;
	            }
	            parentsB.push(node);
	        }
	        parentsA.reverse();
	        parentsB.reverse();
	        if (parentsA[0] !== parentsB[0]) {
	            // domUtils.POSITION_DISCONNECTED
	            return 1;
	        }
	        var i = -1;
	        while (i++, parentsA[i] === parentsB[i]) {
	        }
	        nodeA = parentsA[i];
	        nodeB = parentsB[i];
	        while (nodeA = nodeA.nextSibling) {
	            if (nodeA === nodeB) {
	                // domUtils.POSITION_PRECEDING
	                return 4
	            }
	        }
	        // domUtils.POSITION_FOLLOWING
	        return  2;
	    },

	    /**
	     * 检测节点node在父节点中的索引位置
	     * @method getNodeIndex
	     * @param { Node } node 需要检测的节点对象
	     * @return { Number } 该节点在父节点中的位置
	     * @see UE.dom.domUtils.getNodeIndex(Node,Boolean)
	     */

	    /**
	     * 检测节点node在父节点中的索引位置， 根据给定的mergeTextNode参数决定是否要合并多个连续的文本节点为一个节点
	     * @method getNodeIndex
	     * @param { Node } node 需要检测的节点对象
	     * @param { Boolean } mergeTextNode 是否合并多个连续的文本节点为一个节点
	     * @return { Number } 该节点在父节点中的位置
	     * @example
	     * ```javascript
	     *
	     *      var node = document.createElement("div");
	     *
	     *      node.appendChild( document.createTextNode( "hello" ) );
	     *      node.appendChild( document.createTextNode( "world" ) );
	     *      node.appendChild( node = document.createElement( "div" ) );
	     *
	     *      //output: 2
	     *      console.log( UE.dom.domUtils.getNodeIndex( node ) );
	     *
	     *      //output: 1
	     *      console.log( UE.dom.domUtils.getNodeIndex( node, true ) );
	     *
	     * ```
	     */
	    getNodeIndex:function (node, ignoreTextNode) {
	        var preNode = node,
	            i = 0;
	        while (preNode = preNode.previousSibling) {
	            if (ignoreTextNode && preNode.nodeType == 3) {
	                if(preNode.nodeType != preNode.nextSibling.nodeType ){
	                    i++;
	                }
	                continue;
	            }
	            i++;
	        }
	        return i;
	    },

	    /**
	     * 检测节点node是否在给定的document对象上
	     * @method inDoc
	     * @param { Node } node 需要检测的节点对象
	     * @param { DomDocument } doc 需要检测的document对象
	     * @return { Boolean } 该节点node是否在给定的document的dom树上
	     * @example
	     * ```javascript
	     *
	     * var node = document.createElement("div");
	     *
	     * //output: false
	     * console.log( UE.do.domUtils.inDoc( node, document ) );
	     *
	     * document.body.appendChild( node );
	     *
	     * //output: true
	     * console.log( UE.do.domUtils.inDoc( node, document ) );
	     *
	     * ```
	     */
	    inDoc:function (node, doc) {
	        return domUtils.getPosition(node, doc) == 10;
	    },
	    /**
	     * 根据给定的过滤规则filterFn， 查找符合该过滤规则的node节点的第一个祖先节点，
	     * 查找的起点是给定node节点的父节点。
	     * @method findParent
	     * @param { Node } node 需要查找的节点
	     * @param { Function } filterFn 自定义的过滤方法。
	     * @warning 查找的终点是到body节点为止
	     * @remind 自定义的过滤方法filterFn接受一个Node对象作为参数， 该对象代表当前执行检测的祖先节点。 如果该
	     *          节点满足过滤条件， 则要求返回true， 这时将直接返回该节点作为findParent()的结果， 否则， 请返回false。
	     * @return { Node | Null } 如果找到符合过滤条件的节点， 就返回该节点， 否则返回NULL
	     * @example
	     * ```javascript
	     * var filterNode = UE.dom.domUtils.findParent( document.body.firstChild, function ( node ) {
	     *
	     *     //由于查找的终点是body节点， 所以永远也不会匹配当前过滤器的条件， 即这里永远会返回false
	     *     return node.tagName === "HTML";
	     *
	     * } );
	     *
	     * //output: true
	     * console.log( filterNode === null );
	     * ```
	     */

	    /**
	     * 根据给定的过滤规则filterFn， 查找符合该过滤规则的node节点的第一个祖先节点，
	     * 如果includeSelf的值为true，则查找的起点是给定的节点node， 否则， 起点是node的父节点
	     * @method findParent
	     * @param { Node } node 需要查找的节点
	     * @param { Function } filterFn 自定义的过滤方法。
	     * @param { Boolean } includeSelf 查找过程是否包含自身
	     * @warning 查找的终点是到body节点为止
	     * @remind 自定义的过滤方法filterFn接受一个Node对象作为参数， 该对象代表当前执行检测的祖先节点。 如果该
	     *          节点满足过滤条件， 则要求返回true， 这时将直接返回该节点作为findParent()的结果， 否则， 请返回false。
	     * @remind 如果includeSelf为true， 则过滤器第一次执行时的参数会是节点本身。
	     *          反之， 过滤器第一次执行时的参数将是该节点的父节点。
	     * @return { Node | Null } 如果找到符合过滤条件的节点， 就返回该节点， 否则返回NULL
	     * @example
	     * ```html
	     * <body>
	     *
	     *      <div id="test">
	     *      </div>
	     *
	     *      <script type="text/javascript">
	     *
	     *          //output: DIV, BODY
	     *          var filterNode = UE.dom.domUtils.findParent( document.getElementById( "test" ), function ( node ) {
	     *
	     *              console.log( node.tagName );
	     *              return false;
	     *
	     *          }, true );
	     *
	     *      </script>
	     * </body>
	     * ```
	     */
	    findParent:function (node, filterFn, includeSelf) {
	        if (node && !domUtils.isBody(node)) {
	            node = includeSelf ? node : node.parentNode;
	            while (node) {
	                if (!filterFn || filterFn(node) || domUtils.isBody(node)) {
	                    return filterFn && !filterFn(node) && domUtils.isBody(node) ? null : node;
	                }
	                node = node.parentNode;
	            }
	        }
	        return null;
	    },
	    /**
	     * 查找node的节点名为tagName的第一个祖先节点， 查找的起点是node节点的父节点。
	     * @method findParentByTagName
	     * @param { Node } node 需要查找的节点对象
	     * @param { Array } tagNames 需要查找的父节点的名称数组
	     * @warning 查找的终点是到body节点为止
	     * @return { Node | NULL } 如果找到符合条件的节点， 则返回该节点， 否则返回NULL
	     * @example
	     * ```javascript
	     * var node = UE.dom.domUtils.findParentByTagName( document.getElementsByTagName("div")[0], [ "BODY" ] );
	     * //output: BODY
	     * console.log( node.tagName );
	     * ```
	     */

	    /**
	     * 查找node的节点名为tagName的祖先节点， 如果includeSelf的值为true，则查找的起点是给定的节点node，
	     * 否则， 起点是node的父节点。
	     * @method findParentByTagName
	     * @param { Node } node 需要查找的节点对象
	     * @param { Array } tagNames 需要查找的父节点的名称数组
	     * @param { Boolean } includeSelf 查找过程是否包含node节点自身
	     * @warning 查找的终点是到body节点为止
	     * @return { Node | NULL } 如果找到符合条件的节点， 则返回该节点， 否则返回NULL
	     * @example
	     * ```javascript
	     * var queryTarget = document.getElementsByTagName("div")[0];
	     * var node = UE.dom.domUtils.findParentByTagName( queryTarget, [ "DIV" ], true );
	     * //output: true
	     * console.log( queryTarget === node );
	     * ```
	     */
	    findParentByTagName:function (node, tagNames, includeSelf, excludeFn) {
	        tagNames = utils.listToMap(utils.isArray(tagNames) ? tagNames : [tagNames]);
	        return domUtils.findParent(node, function (node) {
	            return tagNames[node.tagName] && !(excludeFn && excludeFn(node));
	        }, includeSelf);
	    },
	    /**
	     * 查找节点node的祖先节点集合， 查找的起点是给定节点的父节点，结果集中不包含给定的节点。
	     * @method findParents
	     * @param { Node } node 需要查找的节点对象
	     * @return { Array } 给定节点的祖先节点数组
	     * @grammar UE.dom.domUtils.findParents(node)  => Array  //返回一个祖先节点数组集合，不包含自身
	     * @grammar UE.dom.domUtils.findParents(node,includeSelf)  => Array  //返回一个祖先节点数组集合，includeSelf指定是否包含自身
	     * @grammar UE.dom.domUtils.findParents(node,includeSelf,filterFn)  => Array  //返回一个祖先节点数组集合，filterFn指定过滤条件，返回true的node将被选取
	     * @grammar UE.dom.domUtils.findParents(node,includeSelf,filterFn,closerFirst)  => Array  //返回一个祖先节点数组集合，closerFirst为true的话，node的直接父亲节点是数组的第0个
	     */

	    /**
	     * 查找节点node的祖先节点集合， 如果includeSelf的值为true，
	     * 则返回的结果集中允许出现当前给定的节点， 否则， 该节点不会出现在其结果集中。
	     * @method findParents
	     * @param { Node } node 需要查找的节点对象
	     * @param { Boolean } includeSelf 查找的结果中是否允许包含当前查找的节点对象
	     * @return { Array } 给定节点的祖先节点数组
	     */
	    findParents:function (node, includeSelf, filterFn, closerFirst) {
	        var parents = includeSelf && ( filterFn && filterFn(node) || !filterFn ) ? [node] : [];
	        while (node = domUtils.findParent(node, filterFn)) {
	            parents.push(node);
	        }
	        return closerFirst ? parents : parents.reverse();
	    },

	    /**
	     * 在节点node后面插入新节点newNode
	     * @method insertAfter
	     * @param { Node } node 目标节点
	     * @param { Node } newNode 新插入的节点， 该节点将置于目标节点之后
	     * @return { Node } 新插入的节点
	     */
	    insertAfter:function (node, newNode) {
	        return node.nextSibling ? node.parentNode.insertBefore(newNode, node.nextSibling):
	            node.parentNode.appendChild(newNode);
	    },

	    /**
	     * 删除节点node及其下属的所有节点
	     * @method remove
	     * @param { Node } node 需要删除的节点对象
	     * @return { Node } 返回刚删除的节点对象
	     * @example
	     * ```html
	     * <div id="test">
	     *     <div id="child">你好</div>
	     * </div>
	     * <script>
	     *     UE.dom.domUtils.remove( document.body, false );
	     *     //output: false
	     *     console.log( document.getElementById( "child" ) !== null );
	     * </script>
	     * ```
	     */

	    /**
	     * 删除节点node，并根据keepChildren的值决定是否保留子节点
	     * @method remove
	     * @param { Node } node 需要删除的节点对象
	     * @param { Boolean } keepChildren 是否需要保留子节点
	     * @return { Node } 返回刚删除的节点对象
	     * @example
	     * ```html
	     * <div id="test">
	     *     <div id="child">你好</div>
	     * </div>
	     * <script>
	     *     UE.dom.domUtils.remove( document.body, true );
	     *     //output: true
	     *     console.log( document.getElementById( "child" ) !== null );
	     * </script>
	     * ```
	     */
	    remove:function (node, keepChildren) {
	        var parent = node.parentNode,
	            child;
	        if (parent) {
	            if (keepChildren && node.hasChildNodes()) {
	                while (child = node.firstChild) {
	                    parent.insertBefore(child, node);
	                }
	            }
	            parent.removeChild(node);
	        }
	        return node;
	    },

	    /**
	     * 取得node节点的下一个兄弟节点， 如果该节点其后没有兄弟节点， 则递归查找其父节点之后的第一个兄弟节点，
	     * 直到找到满足条件的节点或者递归到BODY节点之后才会结束。
	     * @method getNextDomNode
	     * @param { Node } node 需要获取其后的兄弟节点的节点对象
	     * @return { Node | NULL } 如果找满足条件的节点， 则返回该节点， 否则返回NULL
	     * @example
	     * ```html
	     *     <body>
	     *      <div id="test">
	     *          <span></span>
	     *      </div>
	     *      <i>xxx</i>
	     * </body>
	     * <script>
	     *
	     *     //output: i节点
	     *     console.log( UE.dom.domUtils.getNextDomNode( document.getElementById( "test" ) ) );
	     *
	     * </script>
	     * ```
	     * @example
	     * ```html
	     * <body>
	     *      <div>
	     *          <span></span>
	     *          <i id="test">xxx</i>
	     *      </div>
	     *      <b>xxx</b>
	     * </body>
	     * <script>
	     *
	     *     //由于id为test的i节点之后没有兄弟节点， 则查找其父节点（div）后面的兄弟节点
	     *     //output: b节点
	     *     console.log( UE.dom.domUtils.getNextDomNode( document.getElementById( "test" ) ) );
	     *
	     * </script>
	     * ```
	     */

	    /**
	     * 取得node节点的下一个兄弟节点， 如果startFromChild的值为ture，则先获取其子节点，
	     * 如果有子节点则直接返回第一个子节点；如果没有子节点或者startFromChild的值为false，
	     * 则执行<a href="#UE.dom.domUtils.getNextDomNode(Node)">getNextDomNode(Node node)</a>的查找过程。
	     * @method getNextDomNode
	     * @param { Node } node 需要获取其后的兄弟节点的节点对象
	     * @param { Boolean } startFromChild 查找过程是否从其子节点开始
	     * @return { Node | NULL } 如果找满足条件的节点， 则返回该节点， 否则返回NULL
	     * @see UE.dom.domUtils.getNextDomNode(Node)
	     */
	    getNextDomNode:function (node, startFromChild, filterFn, guard) {
	        return getDomNode(node, 'firstChild', 'nextSibling', startFromChild, filterFn, guard);
	    },
	    getPreDomNode:function (node, startFromChild, filterFn, guard) {
	        return getDomNode(node, 'lastChild', 'previousSibling', startFromChild, filterFn, guard);
	    },
	    /**
	     * 检测节点node是否属是UEditor定义的bookmark节点
	     * @method isBookmarkNode
	     * @private
	     * @param { Node } node 需要检测的节点对象
	     * @return { Boolean } 是否是bookmark节点
	     * @example
	     * ```html
	     * <span id="_baidu_bookmark_1"></span>
	     * <script>
	     *      var bookmarkNode = document.getElementById("_baidu_bookmark_1");
	     *      //output: true
	     *      console.log( UE.dom.domUtils.isBookmarkNode( bookmarkNode ) );
	     * </script>
	     * ```
	     */
	    isBookmarkNode:function (node) {
	        return node.nodeType == 1 && node.id && /^_baidu_bookmark_/i.test(node.id);
	    },
	    /**
	     * 获取节点node所属的window对象
	     * @method  getWindow
	     * @param { Node } node 节点对象
	     * @return { Window } 当前节点所属的window对象
	     * @example
	     * ```javascript
	     * //output: true
	     * console.log( UE.dom.domUtils.getWindow( document.body ) === window );
	     * ```
	     */
	    getWindow:function (node) {
	        var doc = node.ownerDocument || node;
	        return doc.defaultView || doc.parentWindow;
	    },
	    /**
	     * 获取离nodeA与nodeB最近的公共的祖先节点
	     * @method  getCommonAncestor
	     * @param { Node } nodeA 第一个节点
	     * @param { Node } nodeB 第二个节点
	     * @remind 如果给定的两个节点是同一个节点， 将直接返回该节点。
	     * @return { Node | NULL } 如果未找到公共节点， 返回NULL， 否则返回最近的公共祖先节点。
	     * @example
	     * ```javascript
	     * var commonAncestor = UE.dom.domUtils.getCommonAncestor( document.body, document.body.firstChild );
	     * //output: true
	     * console.log( commonAncestor.tagName.toLowerCase() === 'body' );
	     * ```
	     */
	    getCommonAncestor:function (nodeA, nodeB) {
	        if (nodeA === nodeB)
	            return nodeA;
	        var parentsA = [nodeA] , parentsB = [nodeB], parent = nodeA, i = -1;
	        while (parent = parent.parentNode) {
	            if (parent === nodeB) {
	                return parent;
	            }
	            parentsA.push(parent);
	        }
	        parent = nodeB;
	        while (parent = parent.parentNode) {
	            if (parent === nodeA)
	                return parent;
	            parentsB.push(parent);
	        }
	        parentsA.reverse();
	        parentsB.reverse();
	        while (i++, parentsA[i] === parentsB[i]) {
	        }
	        return i == 0 ? null : parentsA[i - 1];

	    },
	    /**
	     * 清除node节点左右连续为空的兄弟inline节点
	     * @method clearEmptySibling
	     * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，
	     * 则这些兄弟节点将被删除
	     * @grammar UE.dom.domUtils.clearEmptySibling(node,ignoreNext)  //ignoreNext指定是否忽略右边空节点
	     * @grammar UE.dom.domUtils.clearEmptySibling(node,ignoreNext,ignorePre)  //ignorePre指定是否忽略左边空节点
	     * @example
	     * ```html
	     * <body>
	     *     <div></div>
	     *     <span id="test"></span>
	     *     <i></i>
	     *     <b></b>
	     *     <em>xxx</em>
	     *     <span></span>
	     * </body>
	     * <script>
	     *
	     *      UE.dom.domUtils.clearEmptySibling( document.getElementById( "test" ) );
	     *
	     *      //output: <div></div><span id="test"></span><em>xxx</em><span></span>
	     *      console.log( document.body.innerHTML );
	     *
	     * </script>
	     * ```
	     */

	    /**
	     * 清除node节点左右连续为空的兄弟inline节点， 如果ignoreNext的值为true，
	     * 则忽略对右边兄弟节点的操作。
	     * @method clearEmptySibling
	     * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，
	     * @param { Boolean } ignoreNext 是否忽略忽略对右边的兄弟节点的操作
	     * 则这些兄弟节点将被删除
	     * @see UE.dom.domUtils.clearEmptySibling(Node)
	     */

	    /**
	     * 清除node节点左右连续为空的兄弟inline节点， 如果ignoreNext的值为true，
	     * 则忽略对右边兄弟节点的操作， 如果ignorePre的值为true，则忽略对左边兄弟节点的操作。
	     * @method clearEmptySibling
	     * @param { Node } node 执行的节点对象， 如果该节点的左右连续的兄弟节点是空的inline节点，
	     * @param { Boolean } ignoreNext 是否忽略忽略对右边的兄弟节点的操作
	     * @param { Boolean } ignorePre 是否忽略忽略对左边的兄弟节点的操作
	     * 则这些兄弟节点将被删除
	     * @see UE.dom.domUtils.clearEmptySibling(Node)
	     */
	    clearEmptySibling:function (node, ignoreNext, ignorePre) {
	        function clear(next, dir) {
	            var tmpNode;
	            while (next && !domUtils.isBookmarkNode(next) && (domUtils.isEmptyInlineElement(next)
	                //这里不能把空格算进来会吧空格干掉，出现文字间的空格丢掉了
	                || !new RegExp('[^\t\n\r' + domUtils.fillChar + ']').test(next.nodeValue) )) {
	                tmpNode = next[dir];
	                domUtils.remove(next);
	                next = tmpNode;
	            }
	        }
	        !ignoreNext && clear(node.nextSibling, 'nextSibling');
	        !ignorePre && clear(node.previousSibling, 'previousSibling');
	    },
	    /**
	     * 将一个文本节点textNode拆分成两个文本节点，offset指定拆分位置
	     * @method split
	     * @param { Node } textNode 需要拆分的文本节点对象
	     * @param { int } offset 需要拆分的位置， 位置计算从0开始
	     * @return { Node } 拆分后形成的新节点
	     * @example
	     * ```html
	     * <div id="test">abcdef</div>
	     * <script>
	     *      var newNode = UE.dom.domUtils.split( document.getElementById( "test" ).firstChild, 3 );
	     *      //output: def
	     *      console.log( newNode.nodeValue );
	     * </script>
	     * ```
	     */
	    split:function (node, offset) {
	        var doc = node.ownerDocument;
	        if (browser.ie && offset == node.nodeValue.length) {
	            var next = doc.createTextNode('');
	            return domUtils.insertAfter(node, next);
	        }
	        var retval = node.splitText(offset);
	        //ie8下splitText不会跟新childNodes,我们手动触发他的更新
	        if (browser.ie8) {
	            var tmpNode = doc.createTextNode('');
	            domUtils.insertAfter(retval, tmpNode);
	            domUtils.remove(tmpNode);
	        }
	        return retval;
	    },

	    /**
	     * 检测文本节点textNode是否为空节点（包括空格、换行、占位符等字符）
	     * @method  isWhitespace
	     * @param { Node } node 需要检测的节点对象
	     * @return { Boolean } 检测的节点是否为空
	     * @example
	     * ```html
	     * <div id="test">
	     *
	     * </div>
	     * <script>
	     *      //output: true
	     *      console.log( UE.dom.domUtils.isWhitespace( document.getElementById("test").firstChild ) );
	     * </script>
	     * ```
	     */
	    isWhitespace:function (node) {
	        return !new RegExp('[^ \t\n\r' + domUtils.fillChar + ']').test(node.nodeValue);
	    },
	    /**
	     * 获取元素element相对于viewport的位置坐标
	     * @method getXY
	     * @param { Node } element 需要计算位置的节点对象
	     * @return { Object } 返回形如{x:left,y:top}的一个key-value映射对象， 其中键x代表水平偏移距离，
	     *                          y代表垂直偏移距离。
	     *
	     * @example
	     * ```javascript
	     * var location = UE.dom.domUtils.getXY( document.getElementById("test") );
	     * //output: test的坐标为: 12, 24
	     * console.log( 'test的坐标为： ', location.x, ',', location.y );
	     * ```
	     */
	    getXY:function (element) {
	        var x = 0, y = 0;
	        while (element.offsetParent) {
	            y += element.offsetTop;
	            x += element.offsetLeft;
	            element = element.offsetParent;
	        }
	        return { 'x':x, 'y':y};
	    },
	    /**
	     * 为元素element绑定原生DOM事件，type为事件类型，handler为处理函数
	     * @method on
	     * @param { Node } element 需要绑定事件的节点对象
	     * @param { String } type 绑定的事件类型
	     * @param { Function } handler 事件处理器
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.on(document.body,"click",function(e){
	     *     //e为事件对象，this为被点击元素对戏那个
	     * });
	     * ```
	     */

	    /**
	     * 为元素element绑定原生DOM事件，type为事件类型，handler为处理函数
	     * @method on
	     * @param { Node } element 需要绑定事件的节点对象
	     * @param { Array } type 绑定的事件类型数组
	     * @param { Function } handler 事件处理器
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.on(document.body,["click","mousedown"],function(evt){
	     *     //evt为事件对象，this为被点击元素对象
	     * });
	     * ```
	     */
	    on:function (element, type, handler) {

	        var types = utils.isArray(type) ? type : utils.trim(type).split(/\s+/),
	            k = types.length;
	        if (k) while (k--) {
	            type = types[k];
	            if (element.addEventListener) {
	                element.addEventListener(type, handler, false);
	            } else {
	                if (!handler._d) {
	                    handler._d = {
	                        els : []
	                    };
	                }
	                var key = type + handler.toString(),index = utils.indexOf(handler._d.els,element);
	                if (!handler._d[key] || index == -1) {
	                    if(index == -1){
	                        handler._d.els.push(element);
	                    }
	                    if(!handler._d[key]){
	                        handler._d[key] = function (evt) {
	                            return handler.call(evt.srcElement, evt || window.event);
	                        };
	                    }


	                    element.attachEvent('on' + type, handler._d[key]);
	                }
	            }
	        }
	        element = null;
	    },
	    /**
	     * 解除DOM事件绑定
	     * @method un
	     * @param { Node } element 需要解除事件绑定的节点对象
	     * @param { String } type 需要接触绑定的事件类型
	     * @param { Function } handler 对应的事件处理器
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.un(document.body,"click",function(evt){
	     *     //evt为事件对象，this为被点击元素对象
	     * });
	     * ```
	     */

	    /**
	     * 解除DOM事件绑定
	     * @method un
	     * @param { Node } element 需要解除事件绑定的节点对象
	     * @param { Array } type 需要接触绑定的事件类型数组
	     * @param { Function } handler 对应的事件处理器
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.un(document.body, ["click","mousedown"],function(evt){
	     *     //evt为事件对象，this为被点击元素对象
	     * });
	     * ```
	     */
	    un:function (element, type, handler) {
	        var types = utils.isArray(type) ? type : utils.trim(type).split(/\s+/),
	            k = types.length;
	        if (k) while (k--) {
	            type = types[k];
	            if (element.removeEventListener) {
	                element.removeEventListener(type, handler, false);
	            } else {
	                var key = type + handler.toString();
	                try{
	                    element.detachEvent('on' + type, handler._d ? handler._d[key] : handler);
	                }catch(e){}
	                if (handler._d && handler._d[key]) {
	                    var index = utils.indexOf(handler._d.els,element);
	                    if(index!=-1){
	                        handler._d.els.splice(index,1);
	                    }
	                    handler._d.els.length == 0 && delete handler._d[key];
	                }
	            }
	        }
	    },

	    /**
	     * 比较节点nodeA与节点nodeB是否具有相同的标签名、属性名以及属性值
	     * @method  isSameElement
	     * @param { Node } nodeA 需要比较的节点
	     * @param { Node } nodeB 需要比较的节点
	     * @return { Boolean } 两个节点是否具有相同的标签名、属性名以及属性值
	     * @example
	     * ```html
	     * <span style="font-size:12px">ssss</span>
	     * <span style="font-size:12px">bbbbb</span>
	     * <span style="font-size:13px">ssss</span>
	     * <span style="font-size:14px">bbbbb</span>
	     *
	     * <script>
	     *
	     *     var nodes = document.getElementsByTagName( "span" );
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.isSameElement( nodes[0], nodes[1] ) );
	     *
	     *     //output: false
	     *     console.log( UE.dom.domUtils.isSameElement( nodes[2], nodes[3] ) );
	     *
	     * </script>
	     * ```
	     */
	    isSameElement:function (nodeA, nodeB) {
	        if (nodeA.tagName != nodeB.tagName) {
	            return false;
	        }
	        var thisAttrs = nodeA.attributes,
	            otherAttrs = nodeB.attributes;
	        if (!ie && thisAttrs.length != otherAttrs.length) {
	            return false;
	        }
	        var attrA, attrB, al = 0, bl = 0;
	        for (var i = 0; attrA = thisAttrs[i++];) {
	            if (attrA.nodeName == 'style') {
	                if (attrA.specified) {
	                    al++;
	                }
	                if (domUtils.isSameStyle(nodeA, nodeB)) {
	                    continue;
	                } else {
	                    return false;
	                }
	            }
	            if (ie) {
	                if (attrA.specified) {
	                    al++;
	                    attrB = otherAttrs.getNamedItem(attrA.nodeName);
	                } else {
	                    continue;
	                }
	            } else {
	                attrB = nodeB.attributes[attrA.nodeName];
	            }
	            if (!attrB.specified || attrA.nodeValue != attrB.nodeValue) {
	                return false;
	            }
	        }
	        // 有可能attrB的属性包含了attrA的属性之外还有自己的属性
	        if (ie) {
	            for (i = 0; attrB = otherAttrs[i++];) {
	                if (attrB.specified) {
	                    bl++;
	                }
	            }
	            if (al != bl) {
	                return false;
	            }
	        }
	        return true;
	    },

	    /**
	     * 判断节点nodeA与节点nodeB的元素的style属性是否一致
	     * @method isSameStyle
	     * @param { Node } nodeA 需要比较的节点
	     * @param { Node } nodeB 需要比较的节点
	     * @return { Boolean } 两个节点是否具有相同的style属性值
	     * @example
	     * ```html
	     * <span style="font-size:12px">ssss</span>
	     * <span style="font-size:12px">bbbbb</span>
	     * <span style="font-size:13px">ssss</span>
	     * <span style="font-size:14px">bbbbb</span>
	     *
	     * <script>
	     *
	     *     var nodes = document.getElementsByTagName( "span" );
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.isSameStyle( nodes[0], nodes[1] ) );
	     *
	     *     //output: false
	     *     console.log( UE.dom.domUtils.isSameStyle( nodes[2], nodes[3] ) );
	     *
	     * </script>
	     * ```
	     */
	    isSameStyle:function (nodeA, nodeB) {
	        var styleA = nodeA.style.cssText.replace(/( ?; ?)/g, ';').replace(/( ?: ?)/g, ':'),
	            styleB = nodeB.style.cssText.replace(/( ?; ?)/g, ';').replace(/( ?: ?)/g, ':');
	        if (browser.opera) {
	            styleA = nodeA.style;
	            styleB = nodeB.style;
	            if (styleA.length != styleB.length)
	                return false;
	            for (var p in styleA) {
	                if (/^(\d+|csstext)$/i.test(p)) {
	                    continue;
	                }
	                if (styleA[p] != styleB[p]) {
	                    return false;
	                }
	            }
	            return true;
	        }
	        if (!styleA || !styleB) {
	            return styleA == styleB;
	        }
	        styleA = styleA.split(';');
	        styleB = styleB.split(';');
	        if (styleA.length != styleB.length) {
	            return false;
	        }
	        for (var i = 0, ci; ci = styleA[i++];) {
	            if (utils.indexOf(styleB, ci) == -1) {
	                return false;
	            }
	        }
	        return true;
	    },
	    /**
	     * 检查节点node是否为block元素
	     * @method isBlockElm
	     * @param { Node } node 需要检测的节点对象
	     * @return { Boolean } 是否是block元素节点
	     * @warning 该方法的判断规则如下： 如果该元素原本是block元素， 则不论该元素当前的css样式是什么都会返回true；
	     *          否则，检测该元素的css样式， 如果该元素当前是block元素， 则返回true。 其余情况下都返回false。
	     * @example
	     * ```html
	     * <span id="test1" style="display: block"></span>
	     * <span id="test2"></span>
	     * <div id="test3" style="display: inline"></div>
	     *
	     * <script>
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.isBlockElm( document.getElementById("test1") ) );
	     *
	     *     //output: false
	     *     console.log( UE.dom.domUtils.isBlockElm( document.getElementById("test2") ) );
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.isBlockElm( document.getElementById("test3") ) );
	     *
	     * </script>
	     * ```
	     */
	    isBlockElm:function (node) {
	        return node.nodeType == 1 && (dtd.$block[node.tagName] || styleBlock[domUtils.getComputedStyle(node, 'display')]) && !dtd.$nonChild[node.tagName];
	    },
	    /**
	     * 检测node节点是否为body节点
	     * @method isBody
	     * @param { Element } node 需要检测的dom元素
	     * @return { Boolean } 给定的元素是否是body元素
	     * @example
	     * ```javascript
	     * //output: true
	     * console.log( UE.dom.domUtils.isBody( document.body ) );
	     * ```
	     */
	    isBody:function (node) {
	        return  node && node.nodeType == 1 && node.tagName.toLowerCase() == 'body';
	    },
	    /**
	     * 以node节点为分界，将该节点的指定祖先节点parent拆分成两个独立的节点，
	     * 拆分形成的两个节点之间是node节点
	     * @method breakParent
	     * @param { Node } node 作为分界的节点对象
	     * @param { Node } parent 该节点必须是node节点的祖先节点， 且是block节点。
	     * @return { Node } 给定的node分界节点
	     * @example
	     * ```javascript
	     *
	     *      var node = document.createElement("span"),
	     *          wrapNode = document.createElement( "div" ),
	     *          parent = document.createElement("p");
	     *
	     *      parent.appendChild( node );
	     *      wrapNode.appendChild( parent );
	     *
	     *      //拆分前
	     *      //output: <p><span></span></p>
	     *      console.log( wrapNode.innerHTML );
	     *
	     *
	     *      UE.dom.domUtils.breakParent( node, parent );
	     *      //拆分后
	     *      //output: <p></p><span></span><p></p>
	     *      console.log( wrapNode.innerHTML );
	     *
	     * ```
	     */
	    breakParent:function (node, parent) {
	        var tmpNode,
	            parentClone = node,
	            clone = node,
	            leftNodes,
	            rightNodes;
	        do {
	            parentClone = parentClone.parentNode;
	            if (leftNodes) {
	                tmpNode = parentClone.cloneNode(false);
	                tmpNode.appendChild(leftNodes);
	                leftNodes = tmpNode;
	                tmpNode = parentClone.cloneNode(false);
	                tmpNode.appendChild(rightNodes);
	                rightNodes = tmpNode;
	            } else {
	                leftNodes = parentClone.cloneNode(false);
	                rightNodes = leftNodes.cloneNode(false);
	            }
	            while (tmpNode = clone.previousSibling) {
	                leftNodes.insertBefore(tmpNode, leftNodes.firstChild);
	            }
	            while (tmpNode = clone.nextSibling) {
	                rightNodes.appendChild(tmpNode);
	            }
	            clone = parentClone;
	        } while (parent !== parentClone);
	        tmpNode = parent.parentNode;
	        tmpNode.insertBefore(leftNodes, parent);
	        tmpNode.insertBefore(rightNodes, parent);
	        tmpNode.insertBefore(node, rightNodes);
	        domUtils.remove(parent);
	        return node;
	    },
	    /**
	     * 检查节点node是否是空inline节点
	     * @method  isEmptyInlineElement
	     * @param { Node } node 需要检测的节点对象
	     * @return { Number }  如果给定的节点是空的inline节点， 则返回1, 否则返回0。
	     * @example
	     * ```html
	     * <b><i></i></b> => 1
	     * <b><i></i><u></u></b> => 1
	     * <b></b> => 1
	     * <b>xx<i></i></b> => 0
	     * ```
	     */
	    isEmptyInlineElement:function (node) {
	        if (node.nodeType != 1 || !dtd.$removeEmpty[ node.tagName ]) {
	            return 0;
	        }
	        node = node.firstChild;
	        while (node) {
	            //如果是创建的bookmark就跳过
	            if (domUtils.isBookmarkNode(node)) {
	                return 0;
	            }
	            if (node.nodeType == 1 && !domUtils.isEmptyInlineElement(node) ||
	                node.nodeType == 3 && !domUtils.isWhitespace(node)
	                ) {
	                return 0;
	            }
	            node = node.nextSibling;
	        }
	        return 1;

	    },

	    /**
	     * 删除node节点下首尾两端的空白文本子节点
	     * @method trimWhiteTextNode
	     * @param { Element } node 需要执行删除操作的元素对象
	     * @example
	     * ```javascript
	     *      var node = document.createElement("div");
	     *
	     *      node.appendChild( document.createTextNode( "" ) );
	     *
	     *      node.appendChild( document.createElement("div") );
	     *
	     *      node.appendChild( document.createTextNode( "" ) );
	     *
	     *      //3
	     *      console.log( node.childNodes.length );
	     *
	     *      UE.dom.domUtils.trimWhiteTextNode( node );
	     *
	     *      //1
	     *      console.log( node.childNodes.length );
	     * ```
	     */
	    trimWhiteTextNode:function (node) {
	        function remove(dir) {
	            var child;
	            while ((child = node[dir]) && child.nodeType == 3 && domUtils.isWhitespace(child)) {
	                node.removeChild(child);
	            }
	        }
	        remove('firstChild');
	        remove('lastChild');
	    },

	    /**
	     * 合并node节点下相同的子节点
	     * @name mergeChild
	     * @desc
	     * UE.dom.domUtils.mergeChild(node,tagName) //tagName要合并的子节点的标签
	     * @example
	     * <p><span style="font-size:12px;">xx<span style="font-size:12px;">aa</span>xx</span></p>
	     * ==> UE.dom.domUtils.mergeChild(node,'span')
	     * <p><span style="font-size:12px;">xxaaxx</span></p>
	     */
	    mergeChild:function (node, tagName, attrs) {
	        var list = domUtils.getElementsByTagName(node, node.tagName.toLowerCase());
	        for (var i = 0, ci; ci = list[i++];) {
	            if (!ci.parentNode || domUtils.isBookmarkNode(ci)) {
	                continue;
	            }
	            //span单独处理
	            if (ci.tagName.toLowerCase() == 'span') {
	                if (node === ci.parentNode) {
	                    domUtils.trimWhiteTextNode(node);
	                    if (node.childNodes.length == 1) {
	                        node.style.cssText = ci.style.cssText + ";" + node.style.cssText;
	                        domUtils.remove(ci, true);
	                        continue;
	                    }
	                }
	                ci.style.cssText = node.style.cssText + ';' + ci.style.cssText;
	                if (attrs) {
	                    var style = attrs.style;
	                    if (style) {
	                        style = style.split(';');
	                        for (var j = 0, s; s = style[j++];) {
	                            ci.style[utils.cssStyleToDomStyle(s.split(':')[0])] = s.split(':')[1];
	                        }
	                    }
	                }
	                if (domUtils.isSameStyle(ci, node)) {
	                    domUtils.remove(ci, true);
	                }
	                continue;
	            }
	            if (domUtils.isSameElement(node, ci)) {
	                domUtils.remove(ci, true);
	            }
	        }
	    },

	    /**
	     * 原生方法getElementsByTagName的封装
	     * @method getElementsByTagName
	     * @param { Node } node 目标节点对象
	     * @param { String } tagName 需要查找的节点的tagName， 多个tagName以空格分割
	     * @return { Array } 符合条件的节点集合
	     */
	    getElementsByTagName:function (node, name,filter) {
	        if(filter && utils.isString(filter)){
	           var className = filter;
	           filter =  function(node){return domUtils.hasClass(node,className)}
	        }
	        name = utils.trim(name).replace(/[ ]{2,}/g,' ').split(' ');
	        var arr = [];
	        for(var n = 0,ni;ni=name[n++];){
	            var list = node.getElementsByTagName(ni);
	            for (var i = 0, ci; ci = list[i++];) {
	                if(!filter || filter(ci))
	                    arr.push(ci);
	            }
	        }

	        return arr;
	    },
	    /**
	     * 将节点node提取到父节点上
	     * @method mergeToParent
	     * @param { Element } node 需要提取的元素对象
	     * @example
	     * ```html
	     * <div id="parent">
	     *     <div id="sub">
	     *         <span id="child"></span>
	     *     </div>
	     * </div>
	     *
	     * <script>
	     *
	     *     var child = document.getElementById( "child" );
	     *
	     *     //output: sub
	     *     console.log( child.parentNode.id );
	     *
	     *     UE.dom.domUtils.mergeToParent( child );
	     *
	     *     //output: parent
	     *     console.log( child.parentNode.id );
	     *
	     * </script>
	     * ```
	     */
	    mergeToParent:function (node) {
	        var parent = node.parentNode;
	        while (parent && dtd.$removeEmpty[parent.tagName]) {
	            if (parent.tagName == node.tagName || parent.tagName == 'A') {//针对a标签单独处理
	                domUtils.trimWhiteTextNode(parent);
	                //span需要特殊处理  不处理这样的情况 <span stlye="color:#fff">xxx<span style="color:#ccc">xxx</span>xxx</span>
	                if (parent.tagName == 'SPAN' && !domUtils.isSameStyle(parent, node)
	                    || (parent.tagName == 'A' && node.tagName == 'SPAN')) {
	                    if (parent.childNodes.length > 1 || parent !== node.parentNode) {
	                        node.style.cssText = parent.style.cssText + ";" + node.style.cssText;
	                        parent = parent.parentNode;
	                        continue;
	                    } else {
	                        parent.style.cssText += ";" + node.style.cssText;
	                        //trace:952 a标签要保持下划线
	                        if (parent.tagName == 'A') {
	                            parent.style.textDecoration = 'underline';
	                        }
	                    }
	                }
	                if (parent.tagName != 'A') {
	                    parent === node.parentNode && domUtils.remove(node, true);
	                    break;
	                }
	            }
	            parent = parent.parentNode;
	        }
	    },
	    /**
	     * 合并节点node的左右兄弟节点
	     * @method mergeSibling
	     * @param { Element } node 需要合并的目标节点
	     * @example
	     * ```html
	     * <b>xxxx</b><b id="test">ooo</b><b>xxxx</b>
	     *
	     * <script>
	     *     var demoNode = document.getElementById("test");
	     *     UE.dom.domUtils.mergeSibling( demoNode );
	     *     //output: xxxxoooxxxx
	     *     console.log( demoNode.innerHTML );
	     * </script>
	     * ```
	     */

	    /**
	     * 合并节点node的左右兄弟节点， 可以根据给定的条件选择是否忽略合并左节点。
	     * @method mergeSibling
	     * @param { Element } node 需要合并的目标节点
	     * @param { Boolean } ignorePre 是否忽略合并左节点
	     * @example
	     * ```html
	     * <b>xxxx</b><b id="test">ooo</b><b>xxxx</b>
	     *
	     * <script>
	     *     var demoNode = document.getElementById("test");
	     *     UE.dom.domUtils.mergeSibling( demoNode, true );
	     *     //output: oooxxxx
	     *     console.log( demoNode.innerHTML );
	     * </script>
	     * ```
	     */

	    /**
	     * 合并节点node的左右兄弟节点，可以根据给定的条件选择是否忽略合并左右节点。
	     * @method mergeSibling
	     * @param { Element } node 需要合并的目标节点
	     * @param { Boolean } ignorePre 是否忽略合并左节点
	     * @param { Boolean } ignoreNext 是否忽略合并右节点
	     * @remind 如果同时忽略左右节点， 则该操作什么也不会做
	     * @example
	     * ```html
	     * <b>xxxx</b><b id="test">ooo</b><b>xxxx</b>
	     *
	     * <script>
	     *     var demoNode = document.getElementById("test");
	     *     UE.dom.domUtils.mergeSibling( demoNode, false, true );
	     *     //output: xxxxooo
	     *     console.log( demoNode.innerHTML );
	     * </script>
	     * ```
	     */
	    mergeSibling:function (node, ignorePre, ignoreNext) {
	        function merge(rtl, start, node) {
	            var next;
	            if ((next = node[rtl]) && !domUtils.isBookmarkNode(next) && next.nodeType == 1 && domUtils.isSameElement(node, next)) {
	                while (next.firstChild) {
	                    if (start == 'firstChild') {
	                        node.insertBefore(next.lastChild, node.firstChild);
	                    } else {
	                        node.appendChild(next.firstChild);
	                    }
	                }
	                domUtils.remove(next);
	            }
	        }
	        !ignorePre && merge('previousSibling', 'firstChild', node);
	        !ignoreNext && merge('nextSibling', 'lastChild', node);
	    },

	    /**
	     * 设置节点node及其子节点不会被选中
	     * @method unSelectable
	     * @param { Element } node 需要执行操作的dom元素
	     * @remind 执行该操作后的节点， 将不能被鼠标选中
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.unSelectable( document.body );
	     * ```
	     */
	    unSelectable:ie && browser.ie9below || browser.opera ? function (node) {
	        //for ie9
	        node.onselectstart = function () {
	            return false;
	        };
	        node.onclick = node.onkeyup = node.onkeydown = function () {
	            return false;
	        };
	        node.unselectable = 'on';
	        node.setAttribute("unselectable", "on");
	        for (var i = 0, ci; ci = node.all[i++];) {
	            switch (ci.tagName.toLowerCase()) {
	                case 'iframe' :
	                case 'textarea' :
	                case 'input' :
	                case 'select' :
	                    break;
	                default :
	                    ci.unselectable = 'on';
	                    node.setAttribute("unselectable", "on");
	            }
	        }
	    } : function (node) {
	        node.style.MozUserSelect =
	            node.style.webkitUserSelect =
	                node.style.msUserSelect =
	                    node.style.KhtmlUserSelect = 'none';
	    },
	    /**
	     * 删除节点node上的指定属性名称的属性
	     * @method  removeAttributes
	     * @param { Node } node 需要删除属性的节点对象
	     * @param { String } attrNames 可以是空格隔开的多个属性名称，该操作将会依次删除相应的属性
	     * @example
	     * ```html
	     * <div id="wrap">
	     *      <span style="font-size:14px;" id="test" name="followMe">xxxxx</span>
	     * </div>
	     *
	     * <script>
	     *
	     *     UE.dom.domUtils.removeAttributes( document.getElementById( "test" ), "id name" );
	     *
	     *     //output: <span style="font-size:14px;">xxxxx</span>
	     *     console.log( document.getElementById("wrap").innerHTML );
	     *
	     * </script>
	     * ```
	     */

	    /**
	     * 删除节点node上的指定属性名称的属性
	     * @method  removeAttributes
	     * @param { Node } node 需要删除属性的节点对象
	     * @param { Array } attrNames 需要删除的属性名数组
	     * @example
	     * ```html
	     * <div id="wrap">
	     *      <span style="font-size:14px;" id="test" name="followMe">xxxxx</span>
	     * </div>
	     *
	     * <script>
	     *
	     *     UE.dom.domUtils.removeAttributes( document.getElementById( "test" ), ["id", "name"] );
	     *
	     *     //output: <span style="font-size:14px;">xxxxx</span>
	     *     console.log( document.getElementById("wrap").innerHTML );
	     *
	     * </script>
	     * ```
	     */
	    removeAttributes:function (node, attrNames) {
	        attrNames = utils.isArray(attrNames) ? attrNames : utils.trim(attrNames).replace(/[ ]{2,}/g,' ').split(' ');
	        for (var i = 0, ci; ci = attrNames[i++];) {
	            ci = attrFix[ci] || ci;
	            switch (ci) {
	                case 'className':
	                    node[ci] = '';
	                    break;
	                case 'style':
	                    node.style.cssText = '';
	                    var val = node.getAttributeNode('style');
	                    !browser.ie && val && node.removeAttributeNode(val);
	            }
	            node.removeAttribute(ci);
	        }
	    },
	    /**
	     * 在doc下创建一个标签名为tag，属性为attrs的元素
	     * @method createElement
	     * @param { DomDocument } doc 新创建的元素属于该document节点创建
	     * @param { String } tagName 需要创建的元素的标签名
	     * @param { Object } attrs 新创建的元素的属性key-value集合
	     * @return { Element } 新创建的元素对象
	     * @example
	     * ```javascript
	     * var ele = UE.dom.domUtils.createElement( document, 'div', {
	     *     id: 'test'
	     * } );
	     *
	     * //output: DIV
	     * console.log( ele.tagName );
	     *
	     * //output: test
	     * console.log( ele.id );
	     *
	     * ```
	     */
	    createElement:function (doc, tag, attrs) {
	        return domUtils.setAttributes(doc.createElement(tag), attrs)
	    },
	    /**
	     * 为节点node添加属性attrs，attrs为属性键值对
	     * @method setAttributes
	     * @param { Element } node 需要设置属性的元素对象
	     * @param { Object } attrs 需要设置的属性名-值对
	     * @return { Element } 设置属性的元素对象
	     * @example
	     * ```html
	     * <span id="test"></span>
	     *
	     * <script>
	     *
	     *     var testNode = UE.dom.domUtils.setAttributes( document.getElementById( "test" ), {
	     *         id: 'demo'
	     *     } );
	     *
	     *     //output: demo
	     *     console.log( testNode.id );
	     *
	     * </script>
	     *
	     */
	    setAttributes:function (node, attrs) {
	        for (var attr in attrs) {
	            if(attrs.hasOwnProperty(attr)){
	                var value = attrs[attr];
	                switch (attr) {
	                    case 'class':
	                        //ie下要这样赋值，setAttribute不起作用
	                        node.className = value;
	                        break;
	                    case 'style' :
	                        node.style.cssText = node.style.cssText + ";" + value;
	                        break;
	                    case 'innerHTML':
	                        node[attr] = value;
	                        break;
	                    case 'value':
	                        node.value = value;
	                        break;
	                    default:
	                        node.setAttribute(attrFix[attr] || attr, value);
	                }
	            }
	        }
	        return node;
	    },

	    /**
	     * 获取元素element经过计算后的样式值
	     * @method getComputedStyle
	     * @param { Element } element 需要获取样式的元素对象
	     * @param { String } styleName 需要获取的样式名
	     * @return { String } 获取到的样式值
	     * @example
	     * ```html
	     * <style type="text/css">
	     *      #test {
	     *          font-size: 15px;
	     *      }
	     * </style>
	     *
	     * <span id="test"></span>
	     *
	     * <script>
	     *     //output: 15px
	     *     console.log( UE.dom.domUtils.getComputedStyle( document.getElementById( "test" ), 'font-size' ) );
	     * </script>
	     * ```
	     */
	    getComputedStyle:function (element, styleName) {
	        //一下的属性单独处理
	        var pros = 'width height top left';

	        if(pros.indexOf(styleName) > -1){
	            return element['offset' + styleName.replace(/^\w/,function(s){return s.toUpperCase()})] + 'px';
	        }
	        //忽略文本节点
	        if (element.nodeType == 3) {
	            element = element.parentNode;
	        }
	        //ie下font-size若body下定义了font-size，则从currentStyle里会取到这个font-size. 取不到实际值，故此修改.
	        if (browser.ie && browser.version < 9 && styleName == 'font-size' && !element.style.fontSize &&
	            !dtd.$empty[element.tagName] && !dtd.$nonChild[element.tagName]) {
	            var span = element.ownerDocument.createElement('span');
	            span.style.cssText = 'padding:0;border:0;font-family:simsun;';
	            span.innerHTML = '.';
	            element.appendChild(span);
	            var result = span.offsetHeight;
	            element.removeChild(span);
	            span = null;
	            return result + 'px';
	        }
	        try {
	            var value = domUtils.getStyle(element, styleName) ||
	                (window.getComputedStyle ? domUtils.getWindow(element).getComputedStyle(element, '').getPropertyValue(styleName) :
	                    ( element.currentStyle || element.style )[utils.cssStyleToDomStyle(styleName)]);

	        } catch (e) {
	            return "";
	        }
	        return utils.transUnitToPx(utils.fixColor(styleName, value));
	    },
	    /**
	     * 删除元素element指定的className
	     * @method removeClasses
	     * @param { Element } ele 需要删除class的元素节点
	     * @param { String } classNames 需要删除的className， 多个className之间以空格分开
	     * @example
	     * ```html
	     * <span id="test" class="test1 test2 test3">xxx</span>
	     *
	     * <script>
	     *
	     *     var testNode = document.getElementById( "test" );
	     *     UE.dom.domUtils.removeClasses( testNode, "test1 test2" );
	     *
	     *     //output: test3
	     *     console.log( testNode.className );
	     *
	     * </script>
	     * ```
	     */

	    /**
	     * 删除元素element指定的className
	     * @method removeClasses
	     * @param { Element } ele 需要删除class的元素节点
	     * @param { Array } classNames 需要删除的className数组
	     * @example
	     * ```html
	     * <span id="test" class="test1 test2 test3">xxx</span>
	     *
	     * <script>
	     *
	     *     var testNode = document.getElementById( "test" );
	     *     UE.dom.domUtils.removeClasses( testNode, ["test1", "test2"] );
	     *
	     *     //output: test3
	     *     console.log( testNode.className );
	     *
	     * </script>
	     * ```
	     */
	    removeClasses:function (elm, classNames) {
	        classNames = utils.isArray(classNames) ? classNames :
	            utils.trim(classNames).replace(/[ ]{2,}/g,' ').split(' ');
	        for(var i = 0,ci,cls = elm.className;ci=classNames[i++];){
	            cls = cls.replace(new RegExp('\\b' + ci + '\\b'),'')
	        }
	        cls = utils.trim(cls).replace(/[ ]{2,}/g,' ');
	        if(cls){
	            elm.className = cls;
	        }else{
	            domUtils.removeAttributes(elm,['class']);
	        }
	    },
	    /**
	     * 给元素element添加className
	     * @method addClass
	     * @param { Node } ele 需要增加className的元素
	     * @param { String } classNames 需要添加的className， 多个className之间以空格分割
	     * @remind 相同的类名不会被重复添加
	     * @example
	     * ```html
	     * <span id="test" class="cls1 cls2"></span>
	     *
	     * <script>
	     *     var testNode = document.getElementById("test");
	     *
	     *     UE.dom.domUtils.addClass( testNode, "cls2 cls3 cls4" );
	     *
	     *     //output: cl1 cls2 cls3 cls4
	     *     console.log( testNode.className );
	     *
	     * <script>
	     * ```
	     */

	    /**
	     * 给元素element添加className
	     * @method addClass
	     * @param { Node } ele 需要增加className的元素
	     * @param { Array } classNames 需要添加的className的数组
	     * @remind 相同的类名不会被重复添加
	     * @example
	     * ```html
	     * <span id="test" class="cls1 cls2"></span>
	     *
	     * <script>
	     *     var testNode = document.getElementById("test");
	     *
	     *     UE.dom.domUtils.addClass( testNode, ["cls2", "cls3", "cls4"] );
	     *
	     *     //output: cl1 cls2 cls3 cls4
	     *     console.log( testNode.className );
	     *
	     * <script>
	     * ```
	     */
	    addClass:function (elm, classNames) {
	        if(!elm)return;
	        classNames = utils.trim(classNames).replace(/[ ]{2,}/g,' ').split(' ');
	        for(var i = 0,ci,cls = elm.className;ci=classNames[i++];){
	            if(!new RegExp('\\b' + ci + '\\b').test(cls)){
	                cls += ' ' + ci;
	            }
	        }
	        elm.className = utils.trim(cls);
	    },
	    /**
	     * 判断元素element是否包含给定的样式类名className
	     * @method hasClass
	     * @param { Node } ele 需要检测的元素
	     * @param { String } classNames 需要检测的className， 多个className之间用空格分割
	     * @return { Boolean } 元素是否包含所有给定的className
	     * @example
	     * ```html
	     * <span id="test1" class="cls1 cls2"></span>
	     *
	     * <script>
	     *     var test1 = document.getElementById("test1");
	     *
	     *     //output: false
	     *     console.log( UE.dom.domUtils.hasClass( test1, "cls2 cls1 cls3" ) );
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.hasClass( test1, "cls2 cls1" ) );
	     * </script>
	     * ```
	     */

	    /**
	     * 判断元素element是否包含给定的样式类名className
	     * @method hasClass
	     * @param { Node } ele 需要检测的元素
	     * @param { Array } classNames 需要检测的className数组
	     * @return { Boolean } 元素是否包含所有给定的className
	     * @example
	     * ```html
	     * <span id="test1" class="cls1 cls2"></span>
	     *
	     * <script>
	     *     var test1 = document.getElementById("test1");
	     *
	     *     //output: false
	     *     console.log( UE.dom.domUtils.hasClass( test1, [ "cls2", "cls1", "cls3" ] ) );
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.hasClass( test1, [ "cls2", "cls1" ]) );
	     * </script>
	     * ```
	     */
	    hasClass:function (element, className) {
	        if(utils.isRegExp(className)){
	            return className.test(element.className)
	        }
	        className = utils.trim(className).replace(/[ ]{2,}/g,' ').split(' ');
	        for(var i = 0,ci,cls = element.className;ci=className[i++];){
	            if(!new RegExp('\\b' + ci + '\\b','i').test(cls)){
	                return false;
	            }
	        }
	        return i - 1 == className.length;
	    },

	    /**
	     * 阻止事件默认行为
	     * @method preventDefault
	     * @param { Event } evt 需要阻止默认行为的事件对象
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.preventDefault( evt );
	     * ```
	     */
	    preventDefault:function (evt) {
	        evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
	    },
	    /**
	     * 删除元素element指定的样式
	     * @method removeStyle
	     * @param { Element } element 需要删除样式的元素
	     * @param { String } styleName 需要删除的样式名
	     * @example
	     * ```html
	     * <span id="test" style="color: red; background: blue;"></span>
	     *
	     * <script>
	     *
	     *     var testNode = document.getElementById("test");
	     *
	     *     UE.dom.domUtils.removeStyle( testNode, 'color' );
	     *
	     *     //output: background: blue;
	     *     console.log( testNode.style.cssText );
	     *
	     * </script>
	     * ```
	     */
	    removeStyle:function (element, name) {
	        if(browser.ie ){
	            //针对color先单独处理一下
	            if(name == 'color'){
	                name = '(^|;)' + name;
	            }
	            element.style.cssText = element.style.cssText.replace(new RegExp(name + '[^:]*:[^;]+;?','ig'),'')
	        }else{
	            if (element.style.removeProperty) {
	                element.style.removeProperty (name);
	            }else {
	                element.style.removeAttribute (utils.cssStyleToDomStyle(name));
	            }
	        }


	        if (!element.style.cssText) {
	            domUtils.removeAttributes(element, ['style']);
	        }
	    },
	    /**
	     * 获取元素element的style属性的指定值
	     * @method getStyle
	     * @param { Element } element 需要获取属性值的元素
	     * @param { String } styleName 需要获取的style的名称
	     * @warning 该方法仅获取元素style属性中所标明的值
	     * @return { String } 该元素包含指定的style属性值
	     * @example
	     * ```html
	     * <div id="test" style="color: red;"></div>
	     *
	     * <script>
	     *
	     *      var testNode = document.getElementById( "test" );
	     *
	     *      //output: red
	     *      console.log( UE.dom.domUtils.getStyle( testNode, "color" ) );
	     *
	     *      //output: ""
	     *      console.log( UE.dom.domUtils.getStyle( testNode, "background" ) );
	     *
	     * </script>
	     * ```
	     */
	    getStyle:function (element, name) {
	        var value = element.style[ utils.cssStyleToDomStyle(name) ];
	        return utils.fixColor(name, value);
	    },
	    /**
	     * 为元素element设置样式属性值
	     * @method setStyle
	     * @param { Element } element 需要设置样式的元素
	     * @param { String } styleName 样式名
	     * @param { String } styleValue 样式值
	     * @example
	     * ```html
	     * <div id="test"></div>
	     *
	     * <script>
	     *
	     *      var testNode = document.getElementById( "test" );
	     *
	     *      //output: ""
	     *      console.log( testNode.style.color );
	     *
	     *      UE.dom.domUtils.setStyle( testNode, 'color', 'red' );
	     *      //output: "red"
	     *      console.log( testNode.style.color );
	     *
	     * </script>
	     * ```
	     */
	    setStyle:function (element, name, value) {
	        element.style[utils.cssStyleToDomStyle(name)] = value;
	        if(!utils.trim(element.style.cssText)){
	            this.removeAttributes(element,'style')
	        }
	    },
	    /**
	     * 为元素element设置多个样式属性值
	     * @method setStyles
	     * @param { Element } element 需要设置样式的元素
	     * @param { Object } styles 样式名值对
	     * @example
	     * ```html
	     * <div id="test"></div>
	     *
	     * <script>
	     *
	     *      var testNode = document.getElementById( "test" );
	     *
	     *      //output: ""
	     *      console.log( testNode.style.color );
	     *
	     *      UE.dom.domUtils.setStyles( testNode, {
	     *          'color': 'red'
	     *      } );
	     *      //output: "red"
	     *      console.log( testNode.style.color );
	     *
	     * </script>
	     * ```
	     */
	    setStyles:function (element, styles) {
	        for (var name in styles) {
	            if (styles.hasOwnProperty(name)) {
	                domUtils.setStyle(element, name, styles[name]);
	            }
	        }
	    },
	    /**
	     * 删除_moz_dirty属性
	     * @private
	     * @method removeDirtyAttr
	     */
	    removeDirtyAttr:function (node) {
	        for (var i = 0, ci, nodes = node.getElementsByTagName('*'); ci = nodes[i++];) {
	            ci.removeAttribute('_moz_dirty');
	        }
	        node.removeAttribute('_moz_dirty');
	    },
	    /**
	     * 获取子节点的数量
	     * @method getChildCount
	     * @param { Element } node 需要检测的元素
	     * @return { Number } 给定的node元素的子节点数量
	     * @example
	     * ```html
	     * <div id="test">
	     *      <span></span>
	     * </div>
	     *
	     * <script>
	     *
	     *     //output: 3
	     *     console.log( UE.dom.domUtils.getChildCount( document.getElementById("test") ) );
	     *
	     * </script>
	     * ```
	     */

	    /**
	     * 根据给定的过滤规则， 获取符合条件的子节点的数量
	     * @method getChildCount
	     * @param { Element } node 需要检测的元素
	     * @param { Function } fn 过滤器， 要求对符合条件的子节点返回true， 反之则要求返回false
	     * @return { Number } 符合过滤条件的node元素的子节点数量
	     * @example
	     * ```html
	     * <div id="test">
	     *      <span></span>
	     * </div>
	     *
	     * <script>
	     *
	     *     //output: 1
	     *     console.log( UE.dom.domUtils.getChildCount( document.getElementById("test"), function ( node ) {
	     *
	     *         return node.nodeType === 1;
	     *
	     *     } ) );
	     *
	     * </script>
	     * ```
	     */
	    getChildCount:function (node, fn) {
	        var count = 0, first = node.firstChild;
	        fn = fn || function () {
	            return 1;
	        };
	        while (first) {
	            if (fn(first)) {
	                count++;
	            }
	            first = first.nextSibling;
	        }
	        return count;
	    },

	    /**
	     * 判断给定节点是否为空节点
	     * @method isEmptyNode
	     * @param { Node } node 需要检测的节点对象
	     * @return { Boolean } 节点是否为空
	     * @example
	     * ```javascript
	     * UE.dom.domUtils.isEmptyNode( document.body );
	     * ```
	     */
	    isEmptyNode:function (node) {
	        return !node.firstChild || domUtils.getChildCount(node, function (node) {
	            return  !domUtils.isBr(node) && !domUtils.isBookmarkNode(node) && !domUtils.isWhitespace(node)
	        }) == 0
	    },
	    clearSelectedArr:function (nodes) {
	        var node;
	        while (node = nodes.pop()) {
	            domUtils.removeAttributes(node, ['class']);
	        }
	    },
	    /**
	     * 将显示区域滚动到指定节点的位置
	     * @method scrollToView
	     * @param    {Node}   node    节点
	     * @param    {window}   win      window对象
	     * @param    {Number}    offsetTop    距离上方的偏移量
	     */
	    scrollToView:function (node, win, offsetTop) {
	        var getViewPaneSize = function () {
	                var doc = win.document,
	                    mode = doc.compatMode == 'CSS1Compat';
	                return {
	                    width:( mode ? doc.documentElement.clientWidth : doc.body.clientWidth ) || 0,
	                    height:( mode ? doc.documentElement.clientHeight : doc.body.clientHeight ) || 0
	                };
	            },
	            getScrollPosition = function (win) {
	                if ('pageXOffset' in win) {
	                    return {
	                        x:win.pageXOffset || 0,
	                        y:win.pageYOffset || 0
	                    };
	                }
	                else {
	                    var doc = win.document;
	                    return {
	                        x:doc.documentElement.scrollLeft || doc.body.scrollLeft || 0,
	                        y:doc.documentElement.scrollTop || doc.body.scrollTop || 0
	                    };
	                }
	            };
	        var winHeight = getViewPaneSize().height, offset = winHeight * -1 + offsetTop;
	        offset += (node.offsetHeight || 0);
	        var elementPosition = domUtils.getXY(node);
	        offset += elementPosition.y;
	        var currentScroll = getScrollPosition(win).y;
	        // offset += 50;
	        if (offset > currentScroll || offset < currentScroll - winHeight) {
	            win.scrollTo(0, offset + (offset < 0 ? -20 : 20));
	        }
	    },
	    /**
	     * 判断给定节点是否为br
	     * @method isBr
	     * @param { Node } node 需要判断的节点对象
	     * @return { Boolean } 给定的节点是否是br节点
	     */
	    isBr:function (node) {
	        return node.nodeType == 1 && node.tagName == 'BR';
	    },
	    /**
	     * 判断给定的节点是否是一个“填充”节点
	     * @private
	     * @method isFillChar
	     * @param { Node } node 需要判断的节点
	     * @param { Boolean } isInStart 是否从节点内容的开始位置匹配
	     * @returns { Boolean } 节点是否是填充节点
	     */
	    isFillChar:function (node,isInStart) {
	        if(node.nodeType != 3)
	            return false;
	        var text = node.nodeValue;
	        if(isInStart){
	            return new RegExp('^' + domUtils.fillChar).test(text)
	        }
	        return !text.replace(new RegExp(domUtils.fillChar,'g'), '').length
	    },
	    isStartInblock:function (range) {
	        var tmpRange = range.cloneRange(),
	            flag = 0,
	            start = tmpRange.startContainer,
	            tmp;
	        if(start.nodeType == 1 && start.childNodes[tmpRange.startOffset]){
	            start = start.childNodes[tmpRange.startOffset];
	            var pre = start.previousSibling;
	            while(pre && domUtils.isFillChar(pre)){
	                start = pre;
	                pre = pre.previousSibling;
	            }
	        }
	        if(this.isFillChar(start,true) && tmpRange.startOffset == 1){
	            tmpRange.setStartBefore(start);
	            start = tmpRange.startContainer;
	        }

	        while (start && domUtils.isFillChar(start)) {
	            tmp = start;
	            start = start.previousSibling
	        }
	        if (tmp) {
	            tmpRange.setStartBefore(tmp);
	            start = tmpRange.startContainer;
	        }
	        if (start.nodeType == 1 && domUtils.isEmptyNode(start) && tmpRange.startOffset == 1) {
	            tmpRange.setStart(start, 0).collapse(true);
	        }
	        while (!tmpRange.startOffset) {
	            start = tmpRange.startContainer;
	            if (domUtils.isBlockElm(start) || domUtils.isBody(start)) {
	                flag = 1;
	                break;
	            }
	            var pre = tmpRange.startContainer.previousSibling,
	                tmpNode;
	            if (!pre) {
	                tmpRange.setStartBefore(tmpRange.startContainer);
	            } else {
	                while (pre && domUtils.isFillChar(pre)) {
	                    tmpNode = pre;
	                    pre = pre.previousSibling;
	                }
	                if (tmpNode) {
	                    tmpRange.setStartBefore(tmpNode);
	                } else {
	                    tmpRange.setStartBefore(tmpRange.startContainer);
	                }
	            }
	        }
	        return flag && !domUtils.isBody(tmpRange.startContainer) ? 1 : 0;
	    },

	    /**
	     * 判断给定的元素是否是一个空元素
	     * @method isEmptyBlock
	     * @param { Element } node 需要判断的元素
	     * @return { Boolean } 是否是空元素
	     * @example
	     * ```html
	     * <div id="test"></div>
	     *
	     * <script>
	     *     //output: true
	     *     console.log( UE.dom.domUtils.isEmptyBlock( document.getElementById("test") ) );
	     * </script>
	     * ```
	     */

	    /**
	     * 根据指定的判断规则判断给定的元素是否是一个空元素
	     * @method isEmptyBlock
	     * @param { Element } node 需要判断的元素
	     * @param { RegExp } reg 对内容执行判断的正则表达式对象
	     * @return { Boolean } 是否是空元素
	     */
	    isEmptyBlock:function (node,reg) {
	        if(node.nodeType != 1)
	            return 0;
	        reg = reg || new RegExp('[ \xa0\t\r\n' + domUtils.fillChar + ']', 'g');

	        if (node[browser.ie ? 'innerText' : 'textContent'].replace(reg, '').length > 0) {
	            return 0;
	        }
	        for (var n in dtd.$isNotEmpty) {
	            if (node.getElementsByTagName(n).length) {
	                return 0;
	            }
	        }
	        return 1;
	    },

	    /**
	     * 移动元素使得该元素的位置移动指定的偏移量的距离
	     * @method setViewportOffset
	     * @param { Element } element 需要设置偏移量的元素
	     * @param { Object } offset 偏移量， 形如{ left: 100, top: 50 }的一个键值对， 表示该元素将在
	     *                                  现有的位置上向水平方向偏移offset.left的距离， 在竖直方向上偏移
	     *                                  offset.top的距离
	     * @example
	     * ```html
	     * <div id="test" style="top: 100px; left: 50px; position: absolute;"></div>
	     *
	     * <script>
	     *
	     *     var testNode = document.getElementById("test");
	     *
	     *     UE.dom.domUtils.setViewportOffset( testNode, {
	     *         left: 200,
	     *         top: 50
	     *     } );
	     *
	     *     //output: top: 300px; left: 100px; position: absolute;
	     *     console.log( testNode.style.cssText );
	     *
	     * </script>
	     * ```
	     */
	    setViewportOffset:function (element, offset) {
	        var left = parseInt(element.style.left) | 0;
	        var top = parseInt(element.style.top) | 0;
	        var rect = element.getBoundingClientRect();
	        var offsetLeft = offset.left - rect.left;
	        var offsetTop = offset.top - rect.top;
	        if (offsetLeft) {
	            element.style.left = left + offsetLeft + 'px';
	        }
	        if (offsetTop) {
	            element.style.top = top + offsetTop + 'px';
	        }
	    },

	    /**
	     * 用“填充字符”填充节点
	     * @method fillNode
	     * @private
	     * @param { DomDocument } doc 填充的节点所在的docment对象
	     * @param { Node } node 需要填充的节点对象
	     * @example
	     * ```html
	     * <div id="test"></div>
	     *
	     * <script>
	     *     var testNode = document.getElementById("test");
	     *
	     *     //output: 0
	     *     console.log( testNode.childNodes.length );
	     *
	     *     UE.dom.domUtils.fillNode( document, testNode );
	     *
	     *     //output: 1
	     *     console.log( testNode.childNodes.length );
	     *
	     * </script>
	     * ```
	     */
	    fillNode:function (doc, node) {
	        var tmpNode = browser.ie ? doc.createTextNode(domUtils.fillChar) : doc.createElement('br');
	        node.innerHTML = '';
	        node.appendChild(tmpNode);
	    },

	    /**
	     * 把节点src的所有子节点追加到另一个节点tag上去
	     * @method moveChild
	     * @param { Node } src 源节点， 该节点下的所有子节点将被移除
	     * @param { Node } tag 目标节点， 从源节点移除的子节点将被追加到该节点下
	     * @example
	     * ```html
	     * <div id="test1">
	     *      <span></span>
	     * </div>
	     * <div id="test2">
	     *     <div></div>
	     * </div>
	     *
	     * <script>
	     *
	     *     var test1 = document.getElementById("test1"),
	     *         test2 = document.getElementById("test2");
	     *
	     *     UE.dom.domUtils.moveChild( test1, test2 );
	     *
	     *     //output: ""（空字符串）
	     *     console.log( test1.innerHTML );
	     *
	     *     //output: "<div></div><span></span>"
	     *     console.log( test2.innerHTML );
	     *
	     * </script>
	     * ```
	     */

	    /**
	     * 把节点src的所有子节点移动到另一个节点tag上去, 可以通过dir参数控制附加的行为是“追加”还是“插入顶部”
	     * @method moveChild
	     * @param { Node } src 源节点， 该节点下的所有子节点将被移除
	     * @param { Node } tag 目标节点， 从源节点移除的子节点将被附加到该节点下
	     * @param { Boolean } dir 附加方式， 如果为true， 则附加进去的节点将被放到目标节点的顶部， 反之，则放到末尾
	     * @example
	     * ```html
	     * <div id="test1">
	     *      <span></span>
	     * </div>
	     * <div id="test2">
	     *     <div></div>
	     * </div>
	     *
	     * <script>
	     *
	     *     var test1 = document.getElementById("test1"),
	     *         test2 = document.getElementById("test2");
	     *
	     *     UE.dom.domUtils.moveChild( test1, test2, true );
	     *
	     *     //output: ""（空字符串）
	     *     console.log( test1.innerHTML );
	     *
	     *     //output: "<span></span><div></div>"
	     *     console.log( test2.innerHTML );
	     *
	     * </script>
	     * ```
	     */
	    moveChild:function (src, tag, dir) {
	        while (src.firstChild) {
	            if (dir && tag.firstChild) {
	                tag.insertBefore(src.lastChild, tag.firstChild);
	            } else {
	                tag.appendChild(src.firstChild);
	            }
	        }
	    },

	    /**
	     * 判断节点的标签上是否不存在任何属性
	     * @method hasNoAttributes
	     * @private
	     * @param { Node } node 需要检测的节点对象
	     * @return { Boolean } 节点是否不包含任何属性
	     * @example
	     * ```html
	     * <div id="test"><span>xxxx</span></div>
	     *
	     * <script>
	     *
	     *     //output: false
	     *     console.log( UE.dom.domUtils.hasNoAttributes( document.getElementById("test") ) );
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.hasNoAttributes( document.getElementById("test").firstChild ) );
	     *
	     * </script>
	     * ```
	     */
	    hasNoAttributes:function (node) {
	        return browser.ie ? /^<\w+\s*?>/.test(node.outerHTML) : node.attributes.length == 0;
	    },

	    /**
	     * 检测节点是否是UEditor所使用的辅助节点
	     * @method isCustomeNode
	     * @private
	     * @param { Node } node 需要检测的节点
	     * @remind 辅助节点是指编辑器要完成工作临时添加的节点， 在输出的时候将会从编辑器内移除， 不会影响最终的结果。
	     * @return { Boolean } 给定的节点是否是一个辅助节点
	     */
	    isCustomeNode:function (node) {
	        return node.nodeType == 1 && node.getAttribute('_ue_custom_node_');
	    },

	    /**
	     * 检测节点的标签是否是给定的标签
	     * @method isTagNode
	     * @param { Node } node 需要检测的节点对象
	     * @param { String } tagName 标签
	     * @return { Boolean } 节点的标签是否是给定的标签
	     * @example
	     * ```html
	     * <div id="test"></div>
	     *
	     * <script>
	     *
	     *     //output: true
	     *     console.log( UE.dom.domUtils.isTagNode( document.getElementById("test"), "div" ) );
	     *
	     * </script>
	     * ```
	     */
	    isTagNode:function (node, tagNames) {
	        return node.nodeType == 1 && new RegExp('\\b' + node.tagName + '\\b','i').test(tagNames)
	    },

	    /**
	     * 给定一个节点数组，在通过指定的过滤器过滤后， 获取其中满足过滤条件的第一个节点
	     * @method filterNodeList
	     * @param { Array } nodeList 需要过滤的节点数组
	     * @param { Function } fn 过滤器， 对符合条件的节点， 执行结果返回true， 反之则返回false
	     * @return { Node | NULL } 如果找到符合过滤条件的节点， 则返回该节点， 否则返回NULL
	     * @example
	     * ```javascript
	     * var divNodes = document.getElementsByTagName("div");
	     * divNodes = [].slice.call( divNodes, 0 );
	     *
	     * //output: null
	     * console.log( UE.dom.domUtils.filterNodeList( divNodes, function ( node ) {
	     *     return node.tagName.toLowerCase() !== 'div';
	     * } ) );
	     * ```
	     */

	    /**
	     * 给定一个节点数组nodeList和一组标签名tagNames， 获取其中能够匹配标签名的节点集合中的第一个节点
	     * @method filterNodeList
	     * @param { Array } nodeList 需要过滤的节点数组
	     * @param { String } tagNames 需要匹配的标签名， 多个标签名之间用空格分割
	     * @return { Node | NULL } 如果找到标签名匹配的节点， 则返回该节点， 否则返回NULL
	     * @example
	     * ```javascript
	     * var divNodes = document.getElementsByTagName("div");
	     * divNodes = [].slice.call( divNodes, 0 );
	     *
	     * //output: null
	     * console.log( UE.dom.domUtils.filterNodeList( divNodes, 'a span' ) );
	     * ```
	     */

	    /**
	     * 给定一个节点数组，在通过指定的过滤器过滤后， 如果参数forAll为true， 则会返回所有满足过滤
	     * 条件的节点集合， 否则， 返回满足条件的节点集合中的第一个节点
	     * @method filterNodeList
	     * @param { Array } nodeList 需要过滤的节点数组
	     * @param { Function } fn 过滤器， 对符合条件的节点， 执行结果返回true， 反之则返回false
	     * @param { Boolean } forAll 是否返回整个节点数组, 如果该参数为false， 则返回节点集合中的第一个节点
	     * @return { Array | Node | NULL } 如果找到符合过滤条件的节点， 则根据参数forAll的值决定返回满足
	     *                                      过滤条件的节点数组或第一个节点， 否则返回NULL
	     * @example
	     * ```javascript
	     * var divNodes = document.getElementsByTagName("div");
	     * divNodes = [].slice.call( divNodes, 0 );
	     *
	     * //output: 3（假定有3个div）
	     * console.log( divNodes.length );
	     *
	     * var nodes = UE.dom.domUtils.filterNodeList( divNodes, function ( node ) {
	     *     return node.tagName.toLowerCase() === 'div';
	     * }, true );
	     *
	     * //output: 3
	     * console.log( nodes.length );
	     *
	     * var node = UE.dom.domUtils.filterNodeList( divNodes, function ( node ) {
	     *     return node.tagName.toLowerCase() === 'div';
	     * }, false );
	     *
	     * //output: div
	     * console.log( node.nodeName );
	     * ```
	     */
	    filterNodeList : function(nodelist,filter,forAll){
	        var results = [];
	        if(!utils .isFunction(filter)){
	            var str = filter;
	            filter = function(n){
	                return utils.indexOf(utils.isArray(str) ? str:str.split(' '), n.tagName.toLowerCase()) != -1
	            };
	        }
	        utils.each(nodelist,function(n){
	            filter(n) && results.push(n)
	        });
	        return results.length  == 0 ? null : results.length == 1 || !forAll ? results[0] : results
	    },

	    /**
	     * 查询给定的range选区是否在给定的node节点内，且在该节点的最末尾
	     * @method isInNodeEndBoundary
	     * @param { UE.dom.Range } rng 需要判断的range对象， 该对象的startContainer不能为NULL
	     * @param node 需要检测的节点对象
	     * @return { Number } 如果给定的选取range对象是在node内部的最末端， 则返回1, 否则返回0
	     */
	    isInNodeEndBoundary : function (rng,node){
	        var start = rng.startContainer;
	        if(start.nodeType == 3 && rng.startOffset != start.nodeValue.length){
	            return 0;
	        }
	        if(start.nodeType == 1 && rng.startOffset != start.childNodes.length){
	            return 0;
	        }
	        while(start !== node){
	            if(start.nextSibling){
	                return 0
	            };
	            start = start.parentNode;
	        }
	        return 1;
	    },
	    isBoundaryNode : function (node,dir){
	        var tmp;
	        while(!domUtils.isBody(node)){
	            tmp = node;
	            node = node.parentNode;
	            if(tmp !== node[dir]){
	                return false;
	            }
	        }
	        return true;
	    },
	    fillHtml :  browser.ie11below ? '&nbsp;' : '<br/>'
	};
	var fillCharReg = new RegExp(domUtils.fillChar, 'g');

	// core/Range.js
	/**
	 * Range封装
	 * @file
	 * @module UE.dom
	 * @class Range
	 * @since 1.2.6.1
	 */

	/**
	 * dom操作封装
	 * @unfile
	 * @module UE.dom
	 */

	/**
	 * Range实现类，本类是UEditor底层核心类，封装不同浏览器之间的Range操作。
	 * @unfile
	 * @module UE.dom
	 * @class Range
	 */


	(function () {
	    var guid = 0,
	        fillChar = domUtils.fillChar,
	        fillData;

	    /**
	     * 更新range的collapse状态
	     * @param  {Range}   range    range对象
	     */
	    function updateCollapse(range) {
	        range.collapsed =
	            range.startContainer && range.endContainer &&
	                range.startContainer === range.endContainer &&
	                range.startOffset == range.endOffset;
	    }

	    function selectOneNode(rng){
	        return !rng.collapsed && rng.startContainer.nodeType == 1 && rng.startContainer === rng.endContainer && rng.endOffset - rng.startOffset == 1
	    }
	    function setEndPoint(toStart, node, offset, range) {
	        //如果node是自闭合标签要处理
	        if (node.nodeType == 1 && (dtd.$empty[node.tagName] || dtd.$nonChild[node.tagName])) {
	            offset = domUtils.getNodeIndex(node) + (toStart ? 0 : 1);
	            node = node.parentNode;
	        }
	        if (toStart) {
	            range.startContainer = node;
	            range.startOffset = offset;
	            if (!range.endContainer) {
	                range.collapse(true);
	            }
	        } else {
	            range.endContainer = node;
	            range.endOffset = offset;
	            if (!range.startContainer) {
	                range.collapse(false);
	            }
	        }
	        updateCollapse(range);
	        return range;
	    }

	    function execContentsAction(range, action) {
	        //调整边界
	        //range.includeBookmark();
	        var start = range.startContainer,
	            end = range.endContainer,
	            startOffset = range.startOffset,
	            endOffset = range.endOffset,
	            doc = range.document,
	            frag = doc.createDocumentFragment(),
	            tmpStart, tmpEnd;
	        if (start.nodeType == 1) {
	            start = start.childNodes[startOffset] || (tmpStart = start.appendChild(doc.createTextNode('')));
	        }
	        if (end.nodeType == 1) {
	            end = end.childNodes[endOffset] || (tmpEnd = end.appendChild(doc.createTextNode('')));
	        }
	        if (start === end && start.nodeType == 3) {
	            frag.appendChild(doc.createTextNode(start.substringData(startOffset, endOffset - startOffset)));
	            //is not clone
	            if (action) {
	                start.deleteData(startOffset, endOffset - startOffset);
	                range.collapse(true);
	            }
	            return frag;
	        }
	        var current, currentLevel, clone = frag,
	            startParents = domUtils.findParents(start, true), endParents = domUtils.findParents(end, true);
	        for (var i = 0; startParents[i] == endParents[i];) {
	            i++;
	        }
	        for (var j = i, si; si = startParents[j]; j++) {
	            current = si.nextSibling;
	            if (si == start) {
	                if (!tmpStart) {
	                    if (range.startContainer.nodeType == 3) {
	                        clone.appendChild(doc.createTextNode(start.nodeValue.slice(startOffset)));
	                        //is not clone
	                        if (action) {
	                            start.deleteData(startOffset, start.nodeValue.length - startOffset);
	                        }
	                    } else {
	                        clone.appendChild(!action ? start.cloneNode(true) : start);
	                    }
	                }
	            } else {
	                currentLevel = si.cloneNode(false);
	                clone.appendChild(currentLevel);
	            }
	            while (current) {
	                if (current === end || current === endParents[j]) {
	                    break;
	                }
	                si = current.nextSibling;
	                clone.appendChild(!action ? current.cloneNode(true) : current);
	                current = si;
	            }
	            clone = currentLevel;
	        }
	        clone = frag;
	        if (!startParents[i]) {
	            clone.appendChild(startParents[i - 1].cloneNode(false));
	            clone = clone.firstChild;
	        }
	        for (var j = i, ei; ei = endParents[j]; j++) {
	            current = ei.previousSibling;
	            if (ei == end) {
	                if (!tmpEnd && range.endContainer.nodeType == 3) {
	                    clone.appendChild(doc.createTextNode(end.substringData(0, endOffset)));
	                    //is not clone
	                    if (action) {
	                        end.deleteData(0, endOffset);
	                    }
	                }
	            } else {
	                currentLevel = ei.cloneNode(false);
	                clone.appendChild(currentLevel);
	            }
	            //如果两端同级，右边第一次已经被开始做了
	            if (j != i || !startParents[i]) {
	                while (current) {
	                    if (current === start) {
	                        break;
	                    }
	                    ei = current.previousSibling;
	                    clone.insertBefore(!action ? current.cloneNode(true) : current, clone.firstChild);
	                    current = ei;
	                }
	            }
	            clone = currentLevel;
	        }
	        if (action) {
	            range.setStartBefore(!endParents[i] ? endParents[i - 1] : !startParents[i] ? startParents[i - 1] : endParents[i]).collapse(true);
	        }
	        tmpStart && domUtils.remove(tmpStart);
	        tmpEnd && domUtils.remove(tmpEnd);
	        return frag;
	    }

	    /**
	     * 创建一个跟document绑定的空的Range实例
	     * @constructor
	     * @param { Document } document 新建的选区所属的文档对象
	     */

	    /**
	     * @property { Node } startContainer 当前Range的开始边界的容器节点, 可以是一个元素节点或者是文本节点
	     */

	    /**
	     * @property { Node } startOffset 当前Range的开始边界容器节点的偏移量, 如果是元素节点，
	     *                              该值就是childNodes中的第几个节点， 如果是文本节点就是文本内容的第几个字符
	     */

	    /**
	     * @property { Node } endContainer 当前Range的结束边界的容器节点, 可以是一个元素节点或者是文本节点
	     */

	    /**
	     * @property { Node } endOffset 当前Range的结束边界容器节点的偏移量, 如果是元素节点，
	     *                              该值就是childNodes中的第几个节点， 如果是文本节点就是文本内容的第几个字符
	     */

	    /**
	     * @property { Boolean } collapsed 当前Range是否闭合
	     * @default true
	     * @remind Range是闭合的时候， startContainer === endContainer && startOffset === endOffset
	     */

	    /**
	     * @property { Document } document 当前Range所属的Document对象
	     * @remind 不同range的的document属性可以是不同的
	     */
	    var Range = dom.Range = function (document) {
	        var me = this;
	        me.startContainer =
	            me.startOffset =
	                me.endContainer =
	                    me.endOffset = null;
	        me.document = document;
	        me.collapsed = true;
	    };

	    /**
	     * 删除fillData
	     * @param doc
	     * @param excludeNode
	     */
	    function removeFillData(doc, excludeNode) {
	        try {
	            if (fillData && domUtils.inDoc(fillData, doc)) {
	                if (!fillData.nodeValue.replace(fillCharReg, '').length) {
	                    var tmpNode = fillData.parentNode;
	                    domUtils.remove(fillData);
	                    while (tmpNode && domUtils.isEmptyInlineElement(tmpNode) &&
	                        //safari的contains有bug
	                        (browser.safari ? !(domUtils.getPosition(tmpNode,excludeNode) & domUtils.POSITION_CONTAINS) : !tmpNode.contains(excludeNode))
	                        ) {
	                        fillData = tmpNode.parentNode;
	                        domUtils.remove(tmpNode);
	                        tmpNode = fillData;
	                    }
	                } else {
	                    fillData.nodeValue = fillData.nodeValue.replace(fillCharReg, '');
	                }
	            }
	        } catch (e) {
	        }
	    }

	    /**
	     * @param node
	     * @param dir
	     */
	    function mergeSibling(node, dir) {
	        var tmpNode;
	        node = node[dir];
	        while (node && domUtils.isFillChar(node)) {
	            tmpNode = node[dir];
	            domUtils.remove(node);
	            node = tmpNode;
	        }
	    }

	    Range.prototype = {

	        /**
	         * 克隆选区的内容到一个DocumentFragment里
	         * @method cloneContents
	         * @return { DocumentFragment | NULL } 如果选区是闭合的将返回null， 否则， 返回包含所clone内容的DocumentFragment元素
	         * @example
	         * ```html
	         * <body>
	         *      <!-- 中括号表示选区 -->
	         *      <b>x<i>x[x</i>xx]x</b>
	         *
	         *      <script>
	         *          //range是已选中的选区
	         *          var fragment = range.cloneContents(),
	         *              node = document.createElement("div");
	         *
	         *          node.appendChild( fragment );
	         *
	         *          //output: <i>x</i>xx
	         *          console.log( node.innerHTML );
	         *
	         *      </script>
	         * </body>
	         * ```
	         */
	        cloneContents:function () {
	            return this.collapsed ? null : execContentsAction(this, 0);
	        },

	        /**
	         * 删除当前选区范围中的所有内容
	         * @method deleteContents
	         * @remind 执行完该操作后， 当前Range对象变成了闭合状态
	         * @return { UE.dom.Range } 当前操作的Range对象
	         * @example
	         * ```html
	         * <body>
	         *      <!-- 中括号表示选区 -->
	         *      <b>x<i>x[x</i>xx]x</b>
	         *
	         *      <script>
	         *          //range是已选中的选区
	         *          range.deleteContents();
	         *
	         *          //竖线表示闭合后的选区位置
	         *          //output: <b>x<i>x</i>|x</b>
	         *          console.log( document.body.innerHTML );
	         *
	         *          //此时， range的各项属性为
	         *          //output: B
	         *          console.log( range.startContainer.tagName );
	         *          //output: 2
	         *          console.log( range.startOffset );
	         *          //output: B
	         *          console.log( range.endContainer.tagName );
	         *          //output: 2
	         *          console.log( range.endOffset );
	         *          //output: true
	         *          console.log( range.collapsed );
	         *
	         *      </script>
	         * </body>
	         * ```
	         */
	        deleteContents:function () {
	            var txt;
	            if (!this.collapsed) {
	                execContentsAction(this, 1);
	            }
	            if (browser.webkit) {
	                txt = this.startContainer;
	                if (txt.nodeType == 3 && !txt.nodeValue.length) {
	                    this.setStartBefore(txt).collapse(true);
	                    domUtils.remove(txt);
	                }
	            }
	            return this;
	        },

	        /**
	         * 将当前选区的内容提取到一个DocumentFragment里
	         * @method extractContents
	         * @remind 执行该操作后， 选区将变成闭合状态
	         * @warning 执行该操作后， 原来选区所选中的内容将从dom树上剥离出来
	         * @return { DocumentFragment } 返回包含所提取内容的DocumentFragment对象
	         * @example
	         * ```html
	         * <body>
	         *      <!-- 中括号表示选区 -->
	         *      <b>x<i>x[x</i>xx]x</b>
	         *
	         *      <script>
	         *          //range是已选中的选区
	         *          var fragment = range.extractContents(),
	         *              node = document.createElement( "div" );
	         *
	         *          node.appendChild( fragment );
	         *
	         *          //竖线表示闭合后的选区位置
	         *
	         *          //output: <b>x<i>x</i>|x</b>
	         *          console.log( document.body.innerHTML );
	         *          //output: <i>x</i>xx
	         *          console.log( node.innerHTML );
	         *
	         *          //此时， range的各项属性为
	         *          //output: B
	         *          console.log( range.startContainer.tagName );
	         *          //output: 2
	         *          console.log( range.startOffset );
	         *          //output: B
	         *          console.log( range.endContainer.tagName );
	         *          //output: 2
	         *          console.log( range.endOffset );
	         *          //output: true
	         *          console.log( range.collapsed );
	         *
	         *      </script>
	         * </body>
	         */
	        extractContents:function () {
	            return this.collapsed ? null : execContentsAction(this, 2);
	        },

	        /**
	         * 设置Range的开始容器节点和偏移量
	         * @method  setStart
	         * @remind 如果给定的节点是元素节点，那么offset指的是其子元素中索引为offset的元素，
	         *          如果是文本节点，那么offset指的是其文本内容的第offset个字符
	         * @remind 如果提供的容器节点是一个不能包含子元素的节点， 则该选区的开始容器将被设置
	         *          为该节点的父节点， 此时， 其距离开始容器的偏移量也变成了该节点在其父节点
	         *          中的索引
	         * @param { Node } node 将被设为当前选区开始边界容器的节点对象
	         * @param { int } offset 选区的开始位置偏移量
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         * <!-- 选区 -->
	         * <b>xxx<i>x<span>xx</span>xx<em>xx</em>xxx</i>[xxx]</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.setStart( document.getElementsByTagName("i")[0], 1 );
	         *
	         *     //此时， 选区变成了
	         *     //<b>xxx<i>x[<span>xx</span>xx<em>xx</em>xxx</i>xxx]</b>
	         *
	         * </script>
	         * ```
	         * @example
	         * ```html
	         * <!-- 选区 -->
	         * <b>xxx<img>[xx]x</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.setStart( document.getElementsByTagName("img")[0], 3 );
	         *
	         *     //此时， 选区变成了
	         *     //<b>xxx[<img>xx]x</b>
	         *
	         * </script>
	         * ```
	         */
	        setStart:function (node, offset) {
	            return setEndPoint(true, node, offset, this);
	        },

	        /**
	         * 设置Range的结束容器和偏移量
	         * @method  setEnd
	         * @param { Node } node 作为当前选区结束边界容器的节点对象
	         * @param { int } offset 结束边界的偏移量
	         * @see UE.dom.Range:setStart(Node,int)
	         * @return { UE.dom.Range } 当前range对象
	         */
	        setEnd:function (node, offset) {
	            return setEndPoint(false, node, offset, this);
	        },

	        /**
	         * 将Range开始位置设置到node节点之后
	         * @method  setStartAfter
	         * @remind 该操作将会把给定节点的父节点作为range的开始容器， 且偏移量是该节点在其父节点中的位置索引+1
	         * @param { Node } node 选区的开始边界将紧接着该节点之后
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>xx<i>xxx</i><span>xx[x</span>xxx]</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.setStartAfter( document.getElementsByTagName("i")[0] );
	         *
	         *     //结果选区
	         *     //<b>xx<i>xxx</i>[<span>xxx</span>xxx]</b>
	         *
	         * </script>
	         * ```
	         */
	        setStartAfter:function (node) {
	            return this.setStart(node.parentNode, domUtils.getNodeIndex(node) + 1);
	        },

	        /**
	         * 将Range开始位置设置到node节点之前
	         * @method  setStartBefore
	         * @remind 该操作将会把给定节点的父节点作为range的开始容器， 且偏移量是该节点在其父节点中的位置索引
	         * @param { Node } node 新的选区开始位置在该节点之前
	         * @see UE.dom.Range:setStartAfter(Node)
	         * @return { UE.dom.Range } 当前range对象
	         */
	        setStartBefore:function (node) {
	            return this.setStart(node.parentNode, domUtils.getNodeIndex(node));
	        },

	        /**
	         * 将Range结束位置设置到node节点之后
	         * @method  setEndAfter
	         * @remind 该操作将会把给定节点的父节点作为range的结束容器， 且偏移量是该节点在其父节点中的位置索引+1
	         * @param { Node } node 目标节点
	         * @see UE.dom.Range:setStartAfter(Node)
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>[xx<i>xxx</i><span>xx]x</span>xxx</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.setStartAfter( document.getElementsByTagName("span")[0] );
	         *
	         *     //结果选区
	         *     //<b>[xx<i>xxx</i><span>xxx</span>]xxx</b>
	         *
	         * </script>
	         * ```
	         */
	        setEndAfter:function (node) {
	            return this.setEnd(node.parentNode, domUtils.getNodeIndex(node) + 1);
	        },

	        /**
	         * 将Range结束位置设置到node节点之前
	         * @method  setEndBefore
	         * @remind 该操作将会把给定节点的父节点作为range的结束容器， 且偏移量是该节点在其父节点中的位置索引
	         * @param { Node } node 目标节点
	         * @see UE.dom.Range:setEndAfter(Node)
	         * @return { UE.dom.Range } 当前range对象
	         */
	        setEndBefore:function (node) {
	            return this.setEnd(node.parentNode, domUtils.getNodeIndex(node));
	        },

	        /**
	         * 设置Range的开始位置到node节点内的第一个子节点之前
	         * @method  setStartAtFirst
	         * @remind 选区的开始容器将变成给定的节点， 且偏移量为0
	         * @remind 如果给定的节点是元素节点， 则该节点必须是允许包含子节点的元素。
	         * @param { Node } node 目标节点
	         * @see UE.dom.Range:setStartBefore(Node)
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.setStartAtFirst( document.getElementsByTagName("i")[0] );
	         *
	         *     //结果选区
	         *     //<b>xx<i>[xxx</i><span>xx]x</span>xxx</b>
	         *
	         * </script>
	         * ```
	         */
	        setStartAtFirst:function (node) {
	            return this.setStart(node, 0);
	        },

	        /**
	         * 设置Range的开始位置到node节点内的最后一个节点之后
	         * @method setStartAtLast
	         * @remind 选区的开始容器将变成给定的节点， 且偏移量为该节点的子节点数
	         * @remind 如果给定的节点是元素节点， 则该节点必须是允许包含子节点的元素。
	         * @param { Node } node 目标节点
	         * @see UE.dom.Range:setStartAtFirst(Node)
	         * @return { UE.dom.Range } 当前range对象
	         */
	        setStartAtLast:function (node) {
	            return this.setStart(node, node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length);
	        },

	        /**
	         * 设置Range的结束位置到node节点内的第一个节点之前
	         * @method  setEndAtFirst
	         * @param { Node } node 目标节点
	         * @remind 选区的结束容器将变成给定的节点， 且偏移量为0
	         * @remind node必须是一个元素节点， 且必须是允许包含子节点的元素。
	         * @see UE.dom.Range:setStartAtFirst(Node)
	         * @return { UE.dom.Range } 当前range对象
	         */
	        setEndAtFirst:function (node) {
	            return this.setEnd(node, 0);
	        },

	        /**
	         * 设置Range的结束位置到node节点内的最后一个节点之后
	         * @method  setEndAtLast
	         * @param { Node } node 目标节点
	         * @remind 选区的结束容器将变成给定的节点， 且偏移量为该节点的子节点数量
	         * @remind node必须是一个元素节点， 且必须是允许包含子节点的元素。
	         * @see UE.dom.Range:setStartAtFirst(Node)
	         * @return { UE.dom.Range } 当前range对象
	         */
	        setEndAtLast:function (node) {
	            return this.setEnd(node, node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length);
	        },

	        /**
	         * 选中给定节点
	         * @method  selectNode
	         * @remind 此时， 选区的开始容器和结束容器都是该节点的父节点， 其startOffset是该节点在父节点中的位置索引，
	         *          而endOffset为startOffset+1
	         * @param { Node } node 需要选中的节点
	         * @return { UE.dom.Range } 当前range对象，此时的range仅包含当前给定的节点对象
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.selectNode( document.getElementsByTagName("i")[0] );
	         *
	         *     //结果选区
	         *     //<b>xx[<i>xxx</i>]<span>xxx</span>xxx</b>
	         *
	         * </script>
	         * ```
	         */
	        selectNode:function (node) {
	            return this.setStartBefore(node).setEndAfter(node);
	        },

	        /**
	         * 选中给定节点内部的所有节点
	         * @method  selectNodeContents
	         * @remind 此时， 选区的开始容器和结束容器都是该节点， 其startOffset为0，
	         *          而endOffset是该节点的子节点数。
	         * @param { Node } node 目标节点， 当前range将包含该节点内的所有节点
	         * @return { UE.dom.Range } 当前range对象， 此时range仅包含给定节点的所有子节点
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.selectNode( document.getElementsByTagName("b")[0] );
	         *
	         *     //结果选区
	         *     //<b>[xx<i>xxx</i><span>xxx</span>xxx]</b>
	         *
	         * </script>
	         * ```
	         */
	        selectNodeContents:function (node) {
	            return this.setStart(node, 0).setEndAtLast(node);
	        },

	        /**
	         * clone当前Range对象
	         * @method  cloneRange
	         * @remind 返回的range是一个全新的range对象， 其内部所有属性与当前被clone的range相同。
	         * @return { UE.dom.Range } 当前range对象的一个副本
	         */
	        cloneRange:function () {
	            var me = this;
	            return new Range(me.document).setStart(me.startContainer, me.startOffset).setEnd(me.endContainer, me.endOffset);

	        },

	        /**
	         * 向当前选区的结束处闭合选区
	         * @method  collapse
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.collapse();
	         *
	         *     //结果选区
	         *     //“|”表示选区已闭合
	         *     //<b>xx<i>xxx</i><span>xx|x</span>xxx</b>
	         *
	         * </script>
	         * ```
	         */

	        /**
	         * 闭合当前选区，根据给定的toStart参数项决定是向当前选区开始处闭合还是向结束处闭合，
	         * 如果toStart的值为true，则向开始位置闭合， 反之，向结束位置闭合。
	         * @method  collapse
	         * @param { Boolean } toStart 是否向选区开始处闭合
	         * @return { UE.dom.Range } 当前range对象，此时range对象处于闭合状态
	         * @see UE.dom.Range:collapse()
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>xx<i>xxx</i><span>[xx]x</span>xxx</b>
	         *
	         * <script>
	         *
	         *     //执行操作
	         *     range.collapse( true );
	         *
	         *     //结果选区
	         *     //“|”表示选区已闭合
	         *     //<b>xx<i>xxx</i><span>|xxx</span>xxx</b>
	         *
	         * </script>
	         * ```
	         */
	        collapse:function (toStart) {
	            var me = this;
	            if (toStart) {
	                me.endContainer = me.startContainer;
	                me.endOffset = me.startOffset;
	            } else {
	                me.startContainer = me.endContainer;
	                me.startOffset = me.endOffset;
	            }
	            me.collapsed = true;
	            return me;
	        },

	        /**
	         * 调整range的开始位置和结束位置，使其"收缩"到最小的位置
	         * @method  shrinkBoundary
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         * <span>xx<b>xx[</b>xxxxx]</span> => <span>xx<b>xx</b>[xxxxx]</span>
	         * ```
	         *
	         * @example
	         * ```html
	         * <!-- 选区示例 -->
	         * <b>x[xx</b><i>]xxx</i>
	         *
	         * <script>
	         *
	         *     //执行收缩
	         *     range.shrinkBoundary();
	         *
	         *     //结果选区
	         *     //<b>x[xx]</b><i>xxx</i>
	         * </script>
	         * ```
	         *
	         * @example
	         * ```html
	         * [<b><i>xxxx</i>xxxxxxx</b>] => <b><i>[xxxx</i>xxxxxxx]</b>
	         * ```
	         */

	        /**
	         * 调整range的开始位置和结束位置，使其"收缩"到最小的位置，
	         * 如果ignoreEnd的值为true，则忽略对结束位置的调整
	         * @method  shrinkBoundary
	         * @param { Boolean } ignoreEnd 是否忽略对结束位置的调整
	         * @return { UE.dom.Range } 当前range对象
	         * @see UE.dom.domUtils.Range:shrinkBoundary()
	         */
	        shrinkBoundary:function (ignoreEnd) {
	            var me = this, child,
	                collapsed = me.collapsed;
	            function check(node){
	                return node.nodeType == 1 && !domUtils.isBookmarkNode(node) && !dtd.$empty[node.tagName] && !dtd.$nonChild[node.tagName]
	            }
	            while (me.startContainer.nodeType == 1 //是element
	                && (child = me.startContainer.childNodes[me.startOffset]) //子节点也是element
	                && check(child)) {
	                me.setStart(child, 0);
	            }
	            if (collapsed) {
	                return me.collapse(true);
	            }
	            if (!ignoreEnd) {
	                while (me.endContainer.nodeType == 1//是element
	                    && me.endOffset > 0 //如果是空元素就退出 endOffset=0那么endOffst-1为负值，childNodes[endOffset]报错
	                    && (child = me.endContainer.childNodes[me.endOffset - 1]) //子节点也是element
	                    && check(child)) {
	                    me.setEnd(child, child.childNodes.length);
	                }
	            }
	            return me;
	        },

	        /**
	         * 获取离当前选区内包含的所有节点最近的公共祖先节点，
	         * @method  getCommonAncestor
	         * @remind 返回的公共祖先节点一定不是range自身的容器节点， 但有可能是一个文本节点
	         * @return { Node } 当前range对象内所有节点的公共祖先节点
	         * @example
	         * ```html
	         * //选区示例
	         * <span>xxx<b>x[x<em>xx]x</em>xxx</b>xx</span>
	         * <script>
	         *
	         *     var node = range.getCommonAncestor();
	         *
	         *     //公共祖先节点是： b节点
	         *     //输出： B
	         *     console.log(node.tagName);
	         *
	         * </script>
	         * ```
	         */

	        /**
	         * 获取当前选区所包含的所有节点的公共祖先节点， 可以根据给定的参数 includeSelf 决定获取到
	         * 的公共祖先节点是否可以是当前选区的startContainer或endContainer节点， 如果 includeSelf
	         * 的取值为true， 则返回的节点可以是自身的容器节点， 否则， 则不能是容器节点
	         * @method  getCommonAncestor
	         * @param { Boolean } includeSelf 是否允许获取到的公共祖先节点是当前range对象的容器节点
	         * @return { Node } 当前range对象内所有节点的公共祖先节点
	         * @see UE.dom.Range:getCommonAncestor()
	         * @example
	         * ```html
	         * <body>
	         *
	         *     <!-- 选区示例 -->
	         *     <b>xxx<i>xxxx<span>xx[x</span>xx]x</i>xxxxxxx</b>
	         *
	         *     <script>
	         *
	         *         var node = range.getCommonAncestor( false );
	         *
	         *         //这里的公共祖先节点是B而不是I， 是因为参数限制了获取到的节点不能是容器节点
	         *         //output: B
	         *         console.log( node.tagName );
	         *
	         *     </script>
	         *
	         * </body>
	         * ```
	         */

	        /**
	         * 获取当前选区所包含的所有节点的公共祖先节点， 可以根据给定的参数 includeSelf 决定获取到
	         * 的公共祖先节点是否可以是当前选区的startContainer或endContainer节点， 如果 includeSelf
	         * 的取值为true， 则返回的节点可以是自身的容器节点， 否则， 则不能是容器节点； 同时可以根据
	         * ignoreTextNode 参数的取值决定是否忽略类型为文本节点的祖先节点。
	         * @method  getCommonAncestor
	         * @param { Boolean } includeSelf 是否允许获取到的公共祖先节点是当前range对象的容器节点
	         * @param { Boolean } ignoreTextNode 获取祖先节点的过程中是否忽略类型为文本节点的祖先节点
	         * @return { Node } 当前range对象内所有节点的公共祖先节点
	         * @see UE.dom.Range:getCommonAncestor()
	         * @see UE.dom.Range:getCommonAncestor(Boolean)
	         * @example
	         * ```html
	         * <body>
	         *
	         *     <!-- 选区示例 -->
	         *     <b>xxx<i>xxxx<span>x[x]x</span>xxx</i>xxxxxxx</b>
	         *
	         *     <script>
	         *
	         *         var node = range.getCommonAncestor( true, false );
	         *
	         *         //output: SPAN
	         *         console.log( node.tagName );
	         *
	         *     </script>
	         *
	         * </body>
	         * ```
	         */
	        getCommonAncestor:function (includeSelf, ignoreTextNode) {
	            var me = this,
	                start = me.startContainer,
	                end = me.endContainer;
	            if (start === end) {
	                if (includeSelf && selectOneNode(this)) {
	                    start = start.childNodes[me.startOffset];
	                    if(start.nodeType == 1)
	                        return start;
	                }
	                //只有在上来就相等的情况下才会出现是文本的情况
	                return ignoreTextNode && start.nodeType == 3 ? start.parentNode : start;
	            }
	            return domUtils.getCommonAncestor(start, end);
	        },

	        /**
	         * 调整当前Range的开始和结束边界容器，如果是容器节点是文本节点,就调整到包含该文本节点的父节点上
	         * @method trimBoundary
	         * @remind 该操作有可能会引起文本节点被切开
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         *
	         * //选区示例
	         * <b>xxx<i>[xxxxx]</i>xxx</b>
	         *
	         * <script>
	         *     //未调整前， 选区的开始容器和结束都是文本节点
	         *     //执行调整
	         *     range.trimBoundary();
	         *
	         *     //调整之后， 容器节点变成了i节点
	         *     //<b>xxx[<i>xxxxx</i>]xxx</b>
	         * </script>
	         * ```
	         */

	        /**
	         * 调整当前Range的开始和结束边界容器，如果是容器节点是文本节点,就调整到包含该文本节点的父节点上，
	         * 可以根据 ignoreEnd 参数的值决定是否调整对结束边界的调整
	         * @method trimBoundary
	         * @param { Boolean } ignoreEnd 是否忽略对结束边界的调整
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         *
	         * //选区示例
	         * <b>xxx<i>[xxxxx]</i>xxx</b>
	         *
	         * <script>
	         *     //未调整前， 选区的开始容器和结束都是文本节点
	         *     //执行调整
	         *     range.trimBoundary( true );
	         *
	         *     //调整之后， 开始容器节点变成了i节点
	         *     //但是， 结束容器没有发生变化
	         *     //<b>xxx[<i>xxxxx]</i>xxx</b>
	         * </script>
	         * ```
	         */
	        trimBoundary:function (ignoreEnd) {
	            this.txtToElmBoundary();
	            var start = this.startContainer,
	                offset = this.startOffset,
	                collapsed = this.collapsed,
	                end = this.endContainer;
	            if (start.nodeType == 3) {
	                if (offset == 0) {
	                    this.setStartBefore(start);
	                } else {
	                    if (offset >= start.nodeValue.length) {
	                        this.setStartAfter(start);
	                    } else {
	                        var textNode = domUtils.split(start, offset);
	                        //跟新结束边界
	                        if (start === end) {
	                            this.setEnd(textNode, this.endOffset - offset);
	                        } else if (start.parentNode === end) {
	                            this.endOffset += 1;
	                        }
	                        this.setStartBefore(textNode);
	                    }
	                }
	                if (collapsed) {
	                    return this.collapse(true);
	                }
	            }
	            if (!ignoreEnd) {
	                offset = this.endOffset;
	                end = this.endContainer;
	                if (end.nodeType == 3) {
	                    if (offset == 0) {
	                        this.setEndBefore(end);
	                    } else {
	                        offset < end.nodeValue.length && domUtils.split(end, offset);
	                        this.setEndAfter(end);
	                    }
	                }
	            }
	            return this;
	        },

	        /**
	         * 如果选区在文本的边界上，就扩展选区到文本的父节点上, 如果当前选区是闭合的， 则什么也不做
	         * @method txtToElmBoundary
	         * @remind 该操作不会修改dom节点
	         * @return { UE.dom.Range } 当前range对象
	         */

	        /**
	         * 如果选区在文本的边界上，就扩展选区到文本的父节点上, 如果当前选区是闭合的， 则根据参数项
	         * ignoreCollapsed 的值决定是否执行该调整
	         * @method txtToElmBoundary
	         * @param { Boolean } ignoreCollapsed 是否忽略选区的闭合状态， 如果该参数取值为true， 则
	         *                      不论选区是否闭合， 都会执行该操作， 反之， 则不会对闭合的选区执行该操作
	         * @return { UE.dom.Range } 当前range对象
	         */
	        txtToElmBoundary:function (ignoreCollapsed) {
	            function adjust(r, c) {
	                var container = r[c + 'Container'],
	                    offset = r[c + 'Offset'];
	                if (container.nodeType == 3) {
	                    if (!offset) {
	                        r['set' + c.replace(/(\w)/, function (a) {
	                            return a.toUpperCase();
	                        }) + 'Before'](container);
	                    } else if (offset >= container.nodeValue.length) {
	                        r['set' + c.replace(/(\w)/, function (a) {
	                            return a.toUpperCase();
	                        }) + 'After' ](container);
	                    }
	                }
	            }

	            if (ignoreCollapsed || !this.collapsed) {
	                adjust(this, 'start');
	                adjust(this, 'end');
	            }
	            return this;
	        },

	        /**
	         * 在当前选区的开始位置前插入节点，新插入的节点会被该range包含
	         * @method  insertNode
	         * @param { Node } node 需要插入的节点
	         * @remind 插入的节点可以是一个DocumentFragment依次插入多个节点
	         * @return { UE.dom.Range } 当前range对象
	         */
	        insertNode:function (node) {
	            var first = node, length = 1;
	            if (node.nodeType == 11) {
	                first = node.firstChild;
	                length = node.childNodes.length;
	            }
	            this.trimBoundary(true);
	            var start = this.startContainer,
	                offset = this.startOffset;
	            var nextNode = start.childNodes[ offset ];
	            if (nextNode) {
	                start.insertBefore(node, nextNode);
	            } else {
	                start.appendChild(node);
	            }
	            if (first.parentNode === this.endContainer) {
	                this.endOffset = this.endOffset + length;
	            }
	            return this.setStartBefore(first);
	        },

	        /**
	         * 闭合选区到当前选区的开始位置， 并且定位光标到闭合后的位置
	         * @method  setCursor
	         * @return { UE.dom.Range } 当前range对象
	         * @see UE.dom.Range:collapse()
	         */

	        /**
	         * 闭合选区，可以根据参数toEnd的值控制选区是向前闭合还是向后闭合， 并且定位光标到闭合后的位置。
	         * @method  setCursor
	         * @param { Boolean } toEnd 是否向后闭合， 如果为true， 则闭合选区时， 将向结束容器方向闭合，
	         *                      反之，则向开始容器方向闭合
	         * @return { UE.dom.Range } 当前range对象
	         * @see UE.dom.Range:collapse(Boolean)
	         */
	        setCursor:function (toEnd, noFillData) {
	            return this.collapse(!toEnd).select(noFillData);
	        },

	        /**
	         * 创建当前range的一个书签，记录下当前range的位置，方便当dom树改变时，还能找回原来的选区位置
	         * @method createBookmark
	         * @param { Boolean } serialize 控制返回的标记位置是对当前位置的引用还是ID，如果该值为true，则
	         *                              返回标记位置的ID， 反之则返回标记位置节点的引用
	         * @return { Object } 返回一个书签记录键值对， 其包含的key有： start => 开始标记的ID或者引用，
	         *                          end => 结束标记的ID或引用， id => 当前标记的类型， 如果为true，则表示
	         *                          返回的记录的类型为ID， 反之则为引用
	         */
	        createBookmark:function (serialize, same) {
	            var endNode,
	                startNode = this.document.createElement('span');
	            startNode.style.cssText = 'display:none;line-height:0px;';
	            startNode.appendChild(this.document.createTextNode('\u200D'));
	            startNode.id = '_baidu_bookmark_start_' + (same ? '' : guid++);

	            if (!this.collapsed) {
	                endNode = startNode.cloneNode(true);
	                endNode.id = '_baidu_bookmark_end_' + (same ? '' : guid++);
	            }
	            this.insertNode(startNode);
	            if (endNode) {
	                this.collapse().insertNode(endNode).setEndBefore(endNode);
	            }
	            this.setStartAfter(startNode);
	            return {
	                start:serialize ? startNode.id : startNode,
	                end:endNode ? serialize ? endNode.id : endNode : null,
	                id:serialize
	            }
	        },

	        /**
	         *  调整当前range的边界到书签位置，并删除该书签对象所标记的位置内的节点
	         *  @method  moveToBookmark
	         *  @param { BookMark } bookmark createBookmark所创建的标签对象
	         *  @return { UE.dom.Range } 当前range对象
	         *  @see UE.dom.Range:createBookmark(Boolean)
	         */
	        moveToBookmark:function (bookmark) {
	            var start = bookmark.id ? this.document.getElementById(bookmark.start) : bookmark.start,
	                end = bookmark.end && bookmark.id ? this.document.getElementById(bookmark.end) : bookmark.end;
	            this.setStartBefore(start);
	            domUtils.remove(start);
	            if (end) {
	                this.setEndBefore(end);
	                domUtils.remove(end);
	            } else {
	                this.collapse(true);
	            }
	            return this;
	        },

	        /**
	         * 调整range的边界，使其"放大"到最近的父节点
	         * @method  enlarge
	         * @remind 会引起选区的变化
	         * @return { UE.dom.Range } 当前range对象
	         */

	        /**
	         * 调整range的边界，使其"放大"到最近的父节点，根据参数 toBlock 的取值， 可以
	         * 要求扩大之后的父节点是block节点
	         * @method  enlarge
	         * @param { Boolean } toBlock 是否要求扩大之后的父节点必须是block节点
	         * @return { UE.dom.Range } 当前range对象
	         */
	        enlarge:function (toBlock, stopFn) {
	            var isBody = domUtils.isBody,
	                pre, node, tmp = this.document.createTextNode('');
	            if (toBlock) {
	                node = this.startContainer;
	                if (node.nodeType == 1) {
	                    if (node.childNodes[this.startOffset]) {
	                        pre = node = node.childNodes[this.startOffset]
	                    } else {
	                        node.appendChild(tmp);
	                        pre = node = tmp;
	                    }
	                } else {
	                    pre = node;
	                }
	                while (1) {
	                    if (domUtils.isBlockElm(node)) {
	                        node = pre;
	                        while ((pre = node.previousSibling) && !domUtils.isBlockElm(pre)) {
	                            node = pre;
	                        }
	                        this.setStartBefore(node);
	                        break;
	                    }
	                    pre = node;
	                    node = node.parentNode;
	                }
	                node = this.endContainer;
	                if (node.nodeType == 1) {
	                    if (pre = node.childNodes[this.endOffset]) {
	                        node.insertBefore(tmp, pre);
	                    } else {
	                        node.appendChild(tmp);
	                    }
	                    pre = node = tmp;
	                } else {
	                    pre = node;
	                }
	                while (1) {
	                    if (domUtils.isBlockElm(node)) {
	                        node = pre;
	                        while ((pre = node.nextSibling) && !domUtils.isBlockElm(pre)) {
	                            node = pre;
	                        }
	                        this.setEndAfter(node);
	                        break;
	                    }
	                    pre = node;
	                    node = node.parentNode;
	                }
	                if (tmp.parentNode === this.endContainer) {
	                    this.endOffset--;
	                }
	                domUtils.remove(tmp);
	            }

	            // 扩展边界到最大
	            if (!this.collapsed) {
	                while (this.startOffset == 0) {
	                    if (stopFn && stopFn(this.startContainer)) {
	                        break;
	                    }
	                    if (isBody(this.startContainer)) {
	                        break;
	                    }
	                    this.setStartBefore(this.startContainer);
	                }
	                while (this.endOffset == (this.endContainer.nodeType == 1 ? this.endContainer.childNodes.length : this.endContainer.nodeValue.length)) {
	                    if (stopFn && stopFn(this.endContainer)) {
	                        break;
	                    }
	                    if (isBody(this.endContainer)) {
	                        break;
	                    }
	                    this.setEndAfter(this.endContainer);
	                }
	            }
	            return this;
	        },
	        enlargeToBlockElm:function(ignoreEnd){
	            while(!domUtils.isBlockElm(this.startContainer)){
	                this.setStartBefore(this.startContainer);
	            }
	            if(!ignoreEnd){
	                while(!domUtils.isBlockElm(this.endContainer)){
	                    this.setEndAfter(this.endContainer);
	                }
	            }
	            return this;
	        },
	        /**
	         * 调整Range的边界，使其"缩小"到最合适的位置
	         * @method adjustmentBoundary
	         * @return { UE.dom.Range } 当前range对象
	         * @see UE.dom.Range:shrinkBoundary()
	         */
	        adjustmentBoundary:function () {
	            if (!this.collapsed) {
	                while (!domUtils.isBody(this.startContainer) &&
	                    this.startOffset == this.startContainer[this.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length &&
	                    this.startContainer[this.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length
	                    ) {

	                    this.setStartAfter(this.startContainer);
	                }
	                while (!domUtils.isBody(this.endContainer) && !this.endOffset &&
	                    this.endContainer[this.endContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length
	                    ) {
	                    this.setEndBefore(this.endContainer);
	                }
	            }
	            return this;
	        },

	        /**
	         * 给range选区中的内容添加给定的inline标签
	         * @method applyInlineStyle
	         * @param { String } tagName 需要添加的标签名
	         * @example
	         * ```html
	         * <p>xxxx[xxxx]x</p>  ==>  range.applyInlineStyle("strong")  ==>  <p>xxxx[<strong>xxxx</strong>]x</p>
	         * ```
	         */

	        /**
	         * 给range选区中的内容添加给定的inline标签， 并且为标签附加上一些初始化属性。
	         * @method applyInlineStyle
	         * @param { String } tagName 需要添加的标签名
	         * @param { Object } attrs 跟随新添加的标签的属性
	         * @return { UE.dom.Range } 当前选区
	         * @example
	         * ```html
	         * <p>xxxx[xxxx]x</p>
	         *
	         * ==>
	         *
	         * <!-- 执行操作 -->
	         * range.applyInlineStyle("strong",{"style":"font-size:12px"})
	         *
	         * ==>
	         *
	         * <p>xxxx[<strong style="font-size:12px">xxxx</strong>]x</p>
	         * ```
	         */
	        applyInlineStyle:function (tagName, attrs, list) {
	            if (this.collapsed)return this;
	            this.trimBoundary().enlarge(false,
	                function (node) {
	                    return node.nodeType == 1 && domUtils.isBlockElm(node)
	                }).adjustmentBoundary();
	            var bookmark = this.createBookmark(),
	                end = bookmark.end,
	                filterFn = function (node) {
	                    return node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' : !domUtils.isWhitespace(node);
	                },
	                current = domUtils.getNextDomNode(bookmark.start, false, filterFn),
	                node,
	                pre,
	                range = this.cloneRange();
	            while (current && (domUtils.getPosition(current, end) & domUtils.POSITION_PRECEDING)) {
	                if (current.nodeType == 3 || dtd[tagName][current.tagName]) {
	                    range.setStartBefore(current);
	                    node = current;
	                    while (node && (node.nodeType == 3 || dtd[tagName][node.tagName]) && node !== end) {
	                        pre = node;
	                        node = domUtils.getNextDomNode(node, node.nodeType == 1, null, function (parent) {
	                            return dtd[tagName][parent.tagName];
	                        });
	                    }
	                    var frag = range.setEndAfter(pre).extractContents(), elm;
	                    if (list && list.length > 0) {
	                        var level, top;
	                        top = level = list[0].cloneNode(false);
	                        for (var i = 1, ci; ci = list[i++];) {
	                            level.appendChild(ci.cloneNode(false));
	                            level = level.firstChild;
	                        }
	                        elm = level;
	                    } else {
	                        elm = range.document.createElement(tagName);
	                    }
	                    if (attrs) {
	                        domUtils.setAttributes(elm, attrs);
	                    }
	                    elm.appendChild(frag);
	                    range.insertNode(list ? top : elm);
	                    //处理下滑线在a上的情况
	                    var aNode;
	                    if (tagName == 'span' && attrs.style && /text\-decoration/.test(attrs.style) && (aNode = domUtils.findParentByTagName(elm, 'a', true))) {
	                        domUtils.setAttributes(aNode, attrs);
	                        domUtils.remove(elm, true);
	                        elm = aNode;
	                    } else {
	                        domUtils.mergeSibling(elm);
	                        domUtils.clearEmptySibling(elm);
	                    }
	                    //去除子节点相同的
	                    domUtils.mergeChild(elm, attrs);
	                    current = domUtils.getNextDomNode(elm, false, filterFn);
	                    domUtils.mergeToParent(elm);
	                    if (node === end) {
	                        break;
	                    }
	                } else {
	                    current = domUtils.getNextDomNode(current, true, filterFn);
	                }
	            }
	            return this.moveToBookmark(bookmark);
	        },

	        /**
	         * 移除当前选区内指定的inline标签，但保留其中的内容
	         * @method removeInlineStyle
	         * @param { String } tagName 需要移除的标签名
	         * @return { UE.dom.Range } 当前的range对象
	         * @example
	         * ```html
	         * xx[x<span>xxx<em>yyy</em>zz]z</span>  => range.removeInlineStyle(["em"])  => xx[x<span>xxxyyyzz]z</span>
	         * ```
	         */

	        /**
	         * 移除当前选区内指定的一组inline标签，但保留其中的内容
	         * @method removeInlineStyle
	         * @param { Array } tagNameArr 需要移除的标签名的数组
	         * @return { UE.dom.Range } 当前的range对象
	         * @see UE.dom.Range:removeInlineStyle(String)
	         */
	        removeInlineStyle:function (tagNames) {
	            if (this.collapsed)return this;
	            tagNames = utils.isArray(tagNames) ? tagNames : [tagNames];
	            this.shrinkBoundary().adjustmentBoundary();
	            var start = this.startContainer, end = this.endContainer;
	            while (1) {
	                if (start.nodeType == 1) {
	                    if (utils.indexOf(tagNames, start.tagName.toLowerCase()) > -1) {
	                        break;
	                    }
	                    if (start.tagName.toLowerCase() == 'body') {
	                        start = null;
	                        break;
	                    }
	                }
	                start = start.parentNode;
	            }
	            while (1) {
	                if (end.nodeType == 1) {
	                    if (utils.indexOf(tagNames, end.tagName.toLowerCase()) > -1) {
	                        break;
	                    }
	                    if (end.tagName.toLowerCase() == 'body') {
	                        end = null;
	                        break;
	                    }
	                }
	                end = end.parentNode;
	            }
	            var bookmark = this.createBookmark(),
	                frag,
	                tmpRange;
	            if (start) {
	                tmpRange = this.cloneRange().setEndBefore(bookmark.start).setStartBefore(start);
	                frag = tmpRange.extractContents();
	                tmpRange.insertNode(frag);
	                domUtils.clearEmptySibling(start, true);
	                start.parentNode.insertBefore(bookmark.start, start);
	            }
	            if (end) {
	                tmpRange = this.cloneRange().setStartAfter(bookmark.end).setEndAfter(end);
	                frag = tmpRange.extractContents();
	                tmpRange.insertNode(frag);
	                domUtils.clearEmptySibling(end, false, true);
	                end.parentNode.insertBefore(bookmark.end, end.nextSibling);
	            }
	            var current = domUtils.getNextDomNode(bookmark.start, false, function (node) {
	                return node.nodeType == 1;
	            }), next;
	            while (current && current !== bookmark.end) {
	                next = domUtils.getNextDomNode(current, true, function (node) {
	                    return node.nodeType == 1;
	                });
	                if (utils.indexOf(tagNames, current.tagName.toLowerCase()) > -1) {
	                    domUtils.remove(current, true);
	                }
	                current = next;
	            }
	            return this.moveToBookmark(bookmark);
	        },

	        /**
	         * 获取当前选中的自闭合的节点
	         * @method  getClosedNode
	         * @return { Node | NULL } 如果当前选中的是自闭合节点， 则返回该节点， 否则返回NULL
	         */
	        getClosedNode:function () {
	            var node;
	            if (!this.collapsed) {
	                var range = this.cloneRange().adjustmentBoundary().shrinkBoundary();
	                if (selectOneNode(range)) {
	                    var child = range.startContainer.childNodes[range.startOffset];
	                    if (child && child.nodeType == 1 && (dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName])) {
	                        node = child;
	                    }
	                }
	            }
	            return node;
	        },

	        /**
	         * 在页面上高亮range所表示的选区
	         * @method select
	         * @return { UE.dom.Range } 返回当前Range对象
	         */
	            //这里不区分ie9以上，trace:3824
	        select:browser.ie ? function (noFillData, textRange) {
	            var nativeRange;
	            if (!this.collapsed)
	                this.shrinkBoundary();
	            var node = this.getClosedNode();
	            if (node && !textRange) {
	                try {
	                    nativeRange = this.document.body.createControlRange();
	                    nativeRange.addElement(node);
	                    nativeRange.select();
	                } catch (e) {}
	                return this;
	            }
	            var bookmark = this.createBookmark(),
	                start = bookmark.start,
	                end;
	            nativeRange = this.document.body.createTextRange();
	            nativeRange.moveToElementText(start);
	            nativeRange.moveStart('character', 1);
	            if (!this.collapsed) {
	                var nativeRangeEnd = this.document.body.createTextRange();
	                end = bookmark.end;
	                nativeRangeEnd.moveToElementText(end);
	                nativeRange.setEndPoint('EndToEnd', nativeRangeEnd);
	            } else {
	                if (!noFillData && this.startContainer.nodeType != 3) {
	                    //使用<span>|x<span>固定住光标
	                    var tmpText = this.document.createTextNode(fillChar),
	                        tmp = this.document.createElement('span');
	                    tmp.appendChild(this.document.createTextNode(fillChar));
	                    start.parentNode.insertBefore(tmp, start);
	                    start.parentNode.insertBefore(tmpText, start);
	                    //当点b,i,u时，不能清除i上边的b
	                    removeFillData(this.document, tmpText);
	                    fillData = tmpText;
	                    mergeSibling(tmp, 'previousSibling');
	                    mergeSibling(start, 'nextSibling');
	                    nativeRange.moveStart('character', -1);
	                    nativeRange.collapse(true);
	                }
	            }
	            this.moveToBookmark(bookmark);
	            tmp && domUtils.remove(tmp);
	            //IE在隐藏状态下不支持range操作，catch一下
	            try {
	                nativeRange.select();
	            } catch (e) {
	            }
	            return this;
	        } : function (notInsertFillData) {
	            function checkOffset(rng){

	                function check(node,offset,dir){
	                    if(node.nodeType == 3 && node.nodeValue.length < offset){
	                        rng[dir + 'Offset'] = node.nodeValue.length
	                    }
	                }
	                check(rng.startContainer,rng.startOffset,'start');
	                check(rng.endContainer,rng.endOffset,'end');
	            }
	            var win = domUtils.getWindow(this.document),
	                sel = win.getSelection(),
	                txtNode;
	            //FF下关闭自动长高时滚动条在关闭dialog时会跳
	            //ff下如果不body.focus将不能定位闭合光标到编辑器内
	            browser.gecko ? this.document.body.focus() : win.focus();
	            if (sel) {
	                sel.removeAllRanges();
	                // trace:870 chrome/safari后边是br对于闭合得range不能定位 所以去掉了判断
	                // this.startContainer.nodeType != 3 &&! ((child = this.startContainer.childNodes[this.startOffset]) && child.nodeType == 1 && child.tagName == 'BR'
	                if (this.collapsed && !notInsertFillData) {
//	                    //opear如果没有节点接着，原生的不能够定位,不能在body的第一级插入空白节点
//	                    if (notInsertFillData && browser.opera && !domUtils.isBody(this.startContainer) && this.startContainer.nodeType == 1) {
//	                        var tmp = this.document.createTextNode('');
//	                        this.insertNode(tmp).setStart(tmp, 0).collapse(true);
//	                    }
	//
	                    //处理光标落在文本节点的情况
	                    //处理以下的情况
	                    //<b>|xxxx</b>
	                    //<b>xxxx</b>|xxxx
	                    //xxxx<b>|</b>
	                    var start = this.startContainer,child = start;
	                    if(start.nodeType == 1){
	                        child = start.childNodes[this.startOffset];

	                    }
	                    if( !(start.nodeType == 3 && this.startOffset)  &&
	                        (child ?
	                            (!child.previousSibling || child.previousSibling.nodeType != 3)
	                            :
	                            (!start.lastChild || start.lastChild.nodeType != 3)
	                        )
	                    ){
	                        txtNode = this.document.createTextNode(fillChar);
	                        //跟着前边走
	                        this.insertNode(txtNode);
	                        removeFillData(this.document, txtNode);
	                        mergeSibling(txtNode, 'previousSibling');
	                        mergeSibling(txtNode, 'nextSibling');
	                        fillData = txtNode;
	                        this.setStart(txtNode, browser.webkit ? 1 : 0).collapse(true);
	                    }
	                }
	                var nativeRange = this.document.createRange();
	                if(this.collapsed && browser.opera && this.startContainer.nodeType == 1){
	                    var child = this.startContainer.childNodes[this.startOffset];
	                    if(!child){
	                        //往前靠拢
	                        child = this.startContainer.lastChild;
	                        if( child && domUtils.isBr(child)){
	                            this.setStartBefore(child).collapse(true);
	                        }
	                    }else{
	                        //向后靠拢
	                        while(child && domUtils.isBlockElm(child)){
	                            if(child.nodeType == 1 && child.childNodes[0]){
	                                child = child.childNodes[0]
	                            }else{
	                                break;
	                            }
	                        }
	                        child && this.setStartBefore(child).collapse(true)
	                    }

	                }
	                //是createAddress最后一位算的不准，现在这里进行微调
	                checkOffset(this);
	                nativeRange.setStart(this.startContainer, this.startOffset);
	                nativeRange.setEnd(this.endContainer, this.endOffset);
	                sel.addRange(nativeRange);
	            }
	            return this;
	        },

	        /**
	         * 滚动到当前range开始的位置
	         * @method scrollToView
	         * @param { Window } win 当前range对象所属的window对象
	         * @return { UE.dom.Range } 当前Range对象
	         */

	        /**
	         * 滚动到距离当前range开始位置 offset 的位置处
	         * @method scrollToView
	         * @param { Window } win 当前range对象所属的window对象
	         * @param { Number } offset 距离range开始位置处的偏移量， 如果为正数， 则向下偏移， 反之， 则向上偏移
	         * @return { UE.dom.Range } 当前Range对象
	         */
	        scrollToView:function (win, offset) {
	            win = win ? window : domUtils.getWindow(this.document);
	            var me = this,
	                span = me.document.createElement('span');
	            //trace:717
	            span.innerHTML = '&nbsp;';
	            me.cloneRange().insertNode(span);
	            domUtils.scrollToView(span, win, offset);
	            domUtils.remove(span);
	            return me;
	        },

	        /**
	         * 判断当前选区内容是否占位符
	         * @private
	         * @method inFillChar
	         * @return { Boolean } 如果是占位符返回true，否则返回false
	         */
	        inFillChar : function(){
	            var start = this.startContainer;
	            if(this.collapsed && start.nodeType == 3
	                && start.nodeValue.replace(new RegExp('^' + domUtils.fillChar),'').length + 1 == start.nodeValue.length
	                ){
	                return true;
	            }
	            return false;
	        },

	        /**
	         * 保存
	         * @method createAddress
	         * @private
	         * @return { Boolean } 返回开始和结束的位置
	         * @example
	         * ```html
	         * <body>
	         *     <p>
	         *         aaaa
	         *         <em>
	         *             <!-- 选区开始 -->
	         *             bbbb
	         *             <!-- 选区结束 -->
	         *         </em>
	         *     </p>
	         *
	         *     <script>
	         *         //output: {startAddress:[0,1,0,0],endAddress:[0,1,0,4]}
	         *         console.log( range.createAddress() );
	         *     </script>
	         * </body>
	         * ```
	         */
	        createAddress : function(ignoreEnd,ignoreTxt){
	            var addr = {},me = this;

	            function getAddress(isStart){
	                var node = isStart ? me.startContainer : me.endContainer;
	                var parents = domUtils.findParents(node,true,function(node){return !domUtils.isBody(node)}),
	                    addrs = [];
	                for(var i = 0,ci;ci = parents[i++];){
	                    addrs.push(domUtils.getNodeIndex(ci,ignoreTxt));
	                }
	                var firstIndex = 0;

	                if(ignoreTxt){
	                    if(node.nodeType == 3){
	                        var tmpNode = node.previousSibling;
	                        while(tmpNode && tmpNode.nodeType == 3){
	                            firstIndex += tmpNode.nodeValue.replace(fillCharReg,'').length;
	                            tmpNode = tmpNode.previousSibling;
	                        }
	                        firstIndex +=  (isStart ? me.startOffset : me.endOffset)// - (fillCharReg.test(node.nodeValue) ? 1 : 0 )
	                    }else{
	                        node =  node.childNodes[ isStart ? me.startOffset : me.endOffset];
	                        if(node){
	                            firstIndex = domUtils.getNodeIndex(node,ignoreTxt);
	                        }else{
	                            node = isStart ? me.startContainer : me.endContainer;
	                            var first = node.firstChild;
	                            while(first){
	                                if(domUtils.isFillChar(first)){
	                                    first = first.nextSibling;
	                                    continue;
	                                }
	                                firstIndex++;
	                                if(first.nodeType == 3){
	                                    while( first && first.nodeType == 3){
	                                        first = first.nextSibling;
	                                    }
	                                }else{
	                                    first = first.nextSibling;
	                                }
	                            }
	                        }
	                    }

	                }else{
	                    firstIndex = isStart ? domUtils.isFillChar(node) ? 0 : me.startOffset  : me.endOffset
	                }
	                if(firstIndex < 0){
	                    firstIndex = 0;
	                }
	                addrs.push(firstIndex);
	                return addrs;
	            }
	            addr.startAddress = getAddress(true);
	            if(!ignoreEnd){
	                addr.endAddress = me.collapsed ? [].concat(addr.startAddress) : getAddress();
	            }
	            return addr;
	        },

	        /**
	         * 保存
	         * @method createAddress
	         * @private
	         * @return { Boolean } 返回开始和结束的位置
	         * @example
	         * ```html
	         * <body>
	         *     <p>
	         *         aaaa
	         *         <em>
	         *             <!-- 选区开始 -->
	         *             bbbb
	         *             <!-- 选区结束 -->
	         *         </em>
	         *     </p>
	         *
	         *     <script>
	         *         var range = editor.selection.getRange();
	         *         range.moveToAddress({startAddress:[0,1,0,0],endAddress:[0,1,0,4]});
	         *         range.select();
	         *         //output: 'bbbb'
	         *         console.log(editor.selection.getText());
	         *     </script>
	         * </body>
	         * ```
	         */
	        moveToAddress : function(addr,ignoreEnd){
	            var me = this;
	            function getNode(address,isStart){
	                var tmpNode = me.document.body,
	                    parentNode,offset;
	                for(var i= 0,ci,l=address.length;i<l;i++){
	                    ci = address[i];
	                    parentNode = tmpNode;
	                    tmpNode = tmpNode.childNodes[ci];
	                    if(!tmpNode){
	                        offset = ci;
	                        break;
	                    }
	                }
	                if(isStart){
	                    if(tmpNode){
	                        me.setStartBefore(tmpNode)
	                    }else{
	                        me.setStart(parentNode,offset)
	                    }
	                }else{
	                    if(tmpNode){
	                        me.setEndBefore(tmpNode)
	                    }else{
	                        me.setEnd(parentNode,offset)
	                    }
	                }
	            }
	            getNode(addr.startAddress,true);
	            !ignoreEnd && addr.endAddress &&  getNode(addr.endAddress);
	            return me;
	        },

	        /**
	         * 判断给定的Range对象是否和当前Range对象表示的是同一个选区
	         * @method equals
	         * @param { UE.dom.Range } 需要判断的Range对象
	         * @return { Boolean } 如果给定的Range对象与当前Range对象表示的是同一个选区， 则返回true， 否则返回false
	         */
	        equals : function(rng){
	            for(var p in this){
	                if(this.hasOwnProperty(p)){
	                    if(this[p] !== rng[p])
	                        return false
	                }
	            }
	            return true;

	        },

	        /**
	         * 遍历range内的节点。每当遍历一个节点时， 都会执行参数项 doFn 指定的函数， 该函数的接受当前遍历的节点
	         * 作为其参数。
	         * @method traversal
	         * @param { Function }  doFn 对每个遍历的节点要执行的方法， 该方法接受当前遍历的节点作为其参数
	         * @return { UE.dom.Range } 当前range对象
	         * @example
	         * ```html
	         *
	         * <body>
	         *
	         *     <!-- 选区开始 -->
	         *     <span></span>
	         *     <a></a>
	         *     <!-- 选区结束 -->
	         * </body>
	         *
	         * <script>
	         *
	         *     //output: <span></span><a></a>
	         *     console.log( range.cloneContents() );
	         *
	         *     range.traversal( function ( node ) {
	         *
	         *         if ( node.nodeType === 1 ) {
	         *             node.className = "test";
	         *         }
	         *
	         *     } );
	         *
	         *     //output: <span class="test"></span><a class="test"></a>
	         *     console.log( range.cloneContents() );
	         *
	         * </script>
	         * ```
	         */

	        /**
	         * 遍历range内的节点。
	         * 每当遍历一个节点时， 都会执行参数项 doFn 指定的函数， 该函数的接受当前遍历的节点
	         * 作为其参数。
	         * 可以通过参数项 filterFn 来指定一个过滤器， 只有符合该过滤器过滤规则的节点才会触
	         * 发doFn函数的执行
	         * @method traversal
	         * @param { Function } doFn 对每个遍历的节点要执行的方法， 该方法接受当前遍历的节点作为其参数
	         * @param { Function } filterFn 过滤器， 该函数接受当前遍历的节点作为参数， 如果该节点满足过滤
	         *                      规则， 请返回true， 该节点会触发doFn， 否则， 请返回false， 则该节点不
	         *                      会触发doFn。
	         * @return { UE.dom.Range } 当前range对象
	         * @see UE.dom.Range:traversal(Function)
	         * @example
	         * ```html
	         *
	         * <body>
	         *
	         *     <!-- 选区开始 -->
	         *     <span></span>
	         *     <a></a>
	         *     <!-- 选区结束 -->
	         * </body>
	         *
	         * <script>
	         *
	         *     //output: <span></span><a></a>
	         *     console.log( range.cloneContents() );
	         *
	         *     range.traversal( function ( node ) {
	         *
	         *         node.className = "test";
	         *
	         *     }, function ( node ) {
	         *          return node.nodeType === 1;
	         *     } );
	         *
	         *     //output: <span class="test"></span><a class="test"></a>
	         *     console.log( range.cloneContents() );
	         *
	         * </script>
	         * ```
	         */
	        traversal:function(doFn,filterFn){
	            if (this.collapsed)
	                return this;
	            var bookmark = this.createBookmark(),
	                end = bookmark.end,
	                current = domUtils.getNextDomNode(bookmark.start, false, filterFn);
	            while (current && current !== end && (domUtils.getPosition(current, end) & domUtils.POSITION_PRECEDING)) {
	                var tmpNode = domUtils.getNextDomNode(current,false,filterFn);
	                doFn(current);
	                current = tmpNode;
	            }
	            return this.moveToBookmark(bookmark);
	        }
	    };
	})();

	// core/Selection.js
	/**
	 * 选集
	 * @file
	 * @module UE.dom
	 * @class Selection
	 * @since 1.2.6.1
	 */

	/**
	 * 选区集合
	 * @unfile
	 * @module UE.dom
	 * @class Selection
	 */
	(function () {

	    function getBoundaryInformation( range, start ) {
	        var getIndex = domUtils.getNodeIndex;
	        range = range.duplicate();
	        range.collapse( start );
	        var parent = range.parentElement();
	        //如果节点里没有子节点，直接退出
	        if ( !parent.hasChildNodes() ) {
	            return  {container:parent, offset:0};
	        }
	        var siblings = parent.children,
	            child,
	            testRange = range.duplicate(),
	            startIndex = 0, endIndex = siblings.length - 1, index = -1,
	            distance;
	        while ( startIndex <= endIndex ) {
	            index = Math.floor( (startIndex + endIndex) / 2 );
	            child = siblings[index];
	            testRange.moveToElementText( child );
	            var position = testRange.compareEndPoints( 'StartToStart', range );
	            if ( position > 0 ) {
	                endIndex = index - 1;
	            } else if ( position < 0 ) {
	                startIndex = index + 1;
	            } else {
	                //trace:1043
	                return  {container:parent, offset:getIndex( child )};
	            }
	        }
	        if ( index == -1 ) {
	            testRange.moveToElementText( parent );
	            testRange.setEndPoint( 'StartToStart', range );
	            distance = testRange.text.replace( /(\r\n|\r)/g, '\n' ).length;
	            siblings = parent.childNodes;
	            if ( !distance ) {
	                child = siblings[siblings.length - 1];
	                return  {container:child, offset:child.nodeValue.length};
	            }

	            var i = siblings.length;
	            while ( distance > 0 ){
	                distance -= siblings[ --i ].nodeValue.length;
	            }
	            return {container:siblings[i], offset:-distance};
	        }
	        testRange.collapse( position > 0 );
	        testRange.setEndPoint( position > 0 ? 'StartToStart' : 'EndToStart', range );
	        distance = testRange.text.replace( /(\r\n|\r)/g, '\n' ).length;
	        if ( !distance ) {
	            return  dtd.$empty[child.tagName] || dtd.$nonChild[child.tagName] ?
	            {container:parent, offset:getIndex( child ) + (position > 0 ? 0 : 1)} :
	            {container:child, offset:position > 0 ? 0 : child.childNodes.length}
	        }
	        while ( distance > 0 ) {
	            try {
	                var pre = child;
	                child = child[position > 0 ? 'previousSibling' : 'nextSibling'];
	                distance -= child.nodeValue.length;
	            } catch ( e ) {
	                return {container:parent, offset:getIndex( pre )};
	            }
	        }
	        return  {container:child, offset:position > 0 ? -distance : child.nodeValue.length + distance}
	    }

	    /**
	     * 将ieRange转换为Range对象
	     * @param {Range}   ieRange    ieRange对象
	     * @param {Range}   range      Range对象
	     * @return  {Range}  range       返回转换后的Range对象
	     */
	    function transformIERangeToRange( ieRange, range ) {
	        if ( ieRange.item ) {
	            range.selectNode( ieRange.item( 0 ) );
	        } else {
	            var bi = getBoundaryInformation( ieRange, true );
	            range.setStart( bi.container, bi.offset );
	            if ( ieRange.compareEndPoints( 'StartToEnd', ieRange ) != 0 ) {
	                bi = getBoundaryInformation( ieRange, false );
	                range.setEnd( bi.container, bi.offset );
	            }
	        }
	        return range;
	    }

	    /**
	     * 获得ieRange
	     * @param {Selection} sel    Selection对象
	     * @return {ieRange}    得到ieRange
	     */
	    function _getIERange( sel ) {
	        var ieRange;
	        //ie下有可能报错
	        try {
	            ieRange = sel.getNative().createRange();
	        } catch ( e ) {
	            return null;
	        }
	        var el = ieRange.item ? ieRange.item( 0 ) : ieRange.parentElement();
	        if ( ( el.ownerDocument || el ) === sel.document ) {
	            return ieRange;
	        }
	        return null;
	    }

	    var Selection = dom.Selection = function ( doc ) {
	        var me = this, iframe;
	        me.document = doc;
	        if ( browser.ie9below ) {
	            iframe = domUtils.getWindow( doc ).frameElement;
	            domUtils.on( iframe, 'beforedeactivate', function () {
	                me._bakIERange = me.getIERange();
	            } );
	            domUtils.on( iframe, 'activate', function () {
	                try {
	                    if ( !_getIERange( me ) && me._bakIERange ) {
	                        me._bakIERange.select();
	                    }
	                } catch ( ex ) {
	                }
	                me._bakIERange = null;
	            } );
	        }
	        iframe = doc = null;
	    };

	    Selection.prototype = {

	        rangeInBody : function(rng,txtRange){
	            var node = browser.ie9below || txtRange ? rng.item ? rng.item() : rng.parentElement() : rng.startContainer;

	            return node === this.document.body || domUtils.inDoc(node,this.document);
	        },

	        /**
	         * 获取原生seleciton对象
	         * @method getNative
	         * @return { Object } 获得selection对象
	         * @example
	         * ```javascript
	         * editor.selection.getNative();
	         * ```
	         */
	        getNative:function () {
	            var doc = this.document;
	            try {
	                return !doc ? null : browser.ie9below ? doc.selection : domUtils.getWindow( doc ).getSelection();
	            } catch ( e ) {
	                return null;
	            }
	        },

	        /**
	         * 获得ieRange
	         * @method getIERange
	         * @return { Object } 返回ie原生的Range
	         * @example
	         * ```javascript
	         * editor.selection.getIERange();
	         * ```
	         */
	        getIERange:function () {
	            var ieRange = _getIERange( this );
	            if ( !ieRange ) {
	                if ( this._bakIERange ) {
	                    return this._bakIERange;
	                }
	            }
	            return ieRange;
	        },

	        /**
	         * 缓存当前选区的range和选区的开始节点
	         * @method cache
	         */
	        cache:function () {
	            this.clear();
	            this._cachedRange = this.getRange();
	            this._cachedStartElement = this.getStart();
	            this._cachedStartElementPath = this.getStartElementPath();
	        },

	        /**
	         * 获取选区开始位置的父节点到body
	         * @method getStartElementPath
	         * @return { Array } 返回父节点集合
	         * @example
	         * ```javascript
	         * editor.selection.getStartElementPath();
	         * ```
	         */
	        getStartElementPath:function () {
	            if ( this._cachedStartElementPath ) {
	                return this._cachedStartElementPath;
	            }
	            var start = this.getStart();
	            if ( start ) {
	                return domUtils.findParents( start, true, null, true )
	            }
	            return [];
	        },

	        /**
	         * 清空缓存
	         * @method clear
	         */
	        clear:function () {
	            this._cachedStartElementPath = this._cachedRange = this._cachedStartElement = null;
	        },

	        /**
	         * 编辑器是否得到了选区
	         * @method isFocus
	         */
	        isFocus:function () {
	            try {
	                if(browser.ie9below){

	                    var nativeRange = _getIERange(this);
	                    return !!(nativeRange && this.rangeInBody(nativeRange));
	                }else{
	                    return !!this.getNative().rangeCount;
	                }
	            } catch ( e ) {
	                return false;
	            }

	        },

	        /**
	         * 获取选区对应的Range
	         * @method getRange
	         * @return { Object } 得到Range对象
	         * @example
	         * ```javascript
	         * editor.selection.getRange();
	         * ```
	         */
	        getRange:function () {
	            var me = this;
	            function optimze( range ) {
	                var child = me.document.body.firstChild,
	                    collapsed = range.collapsed;
	                while ( child && child.firstChild ) {
	                    range.setStart( child, 0 );
	                    child = child.firstChild;
	                }
	                if ( !range.startContainer ) {
	                    range.setStart( me.document.body, 0 )
	                }
	                if ( collapsed ) {
	                    range.collapse( true );
	                }
	            }

	            if ( me._cachedRange != null ) {
	                return this._cachedRange;
	            }
	            var range = new baidu.editor.dom.Range( me.document );

	            if ( browser.ie9below ) {
	                var nativeRange = me.getIERange();
	                if ( nativeRange ) {
	                    //备份的_bakIERange可能已经实效了，dom树发生了变化比如从源码模式切回来，所以try一下，实效就放到body开始位置
	                    try{
	                        transformIERangeToRange( nativeRange, range );
	                    }catch(e){
	                        optimze( range );
	                    }

	                } else {
	                    optimze( range );
	                }
	            } else {
	                var sel = me.getNative();
	                if ( sel && sel.rangeCount ) {
	                    var firstRange = sel.getRangeAt( 0 );
	                    var lastRange = sel.getRangeAt( sel.rangeCount - 1 );
	                    range.setStart( firstRange.startContainer, firstRange.startOffset ).setEnd( lastRange.endContainer, lastRange.endOffset );
	                    if ( range.collapsed && domUtils.isBody( range.startContainer ) && !range.startOffset ) {
	                        optimze( range );
	                    }
	                } else {
	                    //trace:1734 有可能已经不在dom树上了，标识的节点
	                    if ( this._bakRange && domUtils.inDoc( this._bakRange.startContainer, this.document ) ){
	                        return this._bakRange;
	                    }
	                    optimze( range );
	                }
	            }
	            return this._bakRange = range;
	        },

	        /**
	         * 获取开始元素，用于状态反射
	         * @method getStart
	         * @return { Element } 获得开始元素
	         * @example
	         * ```javascript
	         * editor.selection.getStart();
	         * ```
	         */
	        getStart:function () {
	            if ( this._cachedStartElement ) {
	                return this._cachedStartElement;
	            }
	            var range = browser.ie9below ? this.getIERange() : this.getRange(),
	                tmpRange,
	                start, tmp, parent;
	            if ( browser.ie9below ) {
	                if ( !range ) {
	                    //todo 给第一个值可能会有问题
	                    return this.document.body.firstChild;
	                }
	                //control元素
	                if ( range.item ){
	                    return range.item( 0 );
	                }
	                tmpRange = range.duplicate();
	                //修正ie下<b>x</b>[xx] 闭合后 <b>x|</b>xx
	                tmpRange.text.length > 0 && tmpRange.moveStart( 'character', 1 );
	                tmpRange.collapse( 1 );
	                start = tmpRange.parentElement();
	                parent = tmp = range.parentElement();
	                while ( tmp = tmp.parentNode ) {
	                    if ( tmp == start ) {
	                        start = parent;
	                        break;
	                    }
	                }
	            } else {
	                range.shrinkBoundary();
	                start = range.startContainer;
	                if ( start.nodeType == 1 && start.hasChildNodes() ){
	                    start = start.childNodes[Math.min( start.childNodes.length - 1, range.startOffset )];
	                }
	                if ( start.nodeType == 3 ){
	                    return start.parentNode;
	                }
	            }
	            return start;
	        },

	        /**
	         * 得到选区中的文本
	         * @method getText
	         * @return { String } 选区中包含的文本
	         * @example
	         * ```javascript
	         * editor.selection.getText();
	         * ```
	         */
	        getText:function () {
	            var nativeSel, nativeRange;
	            if ( this.isFocus() && (nativeSel = this.getNative()) ) {
	                nativeRange = browser.ie9below ? nativeSel.createRange() : nativeSel.getRangeAt( 0 );
	                return browser.ie9below ? nativeRange.text : nativeRange.toString();
	            }
	            return '';
	        },

	        /**
	         * 清除选区
	         * @method clearRange
	         * @example
	         * ```javascript
	         * editor.selection.clearRange();
	         * ```
	         */
	        clearRange : function(){
	            this.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
	        }
	    };
	})();

	// core/Editor.js
	/**
	 * 编辑器主类，包含编辑器提供的大部分公用接口
	 * @file
	 * @module UE
	 * @class Editor
	 * @since 1.2.6.1
	 */

	/**
	 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
	 * @unfile
	 * @module UE
	 */

	/**
	 * UEditor的核心类，为用户提供与编辑器交互的接口。
	 * @unfile
	 * @module UE
	 * @class Editor
	 */

	(function () {
	    var uid = 0, _selectionChangeTimer;

	    /**
	     * 获取编辑器的html内容，赋值到编辑器所在表单的textarea文本域里面
	     * @private
	     * @method setValue
	     * @param { UE.Editor } editor 编辑器事例
	     */
	    function setValue(form, editor) {
	        var textarea;
	        if (editor.textarea) {
	            if (utils.isString(editor.textarea)) {
	                for (var i = 0, ti, tis = domUtils.getElementsByTagName(form, 'textarea'); ti = tis[i++];) {
	                    if (ti.id == 'ueditor_textarea_' + editor.options.textarea) {
	                        textarea = ti;
	                        break;
	                    }
	                }
	            } else {
	                textarea = editor.textarea;
	            }
	        }
	        if (!textarea) {
	            form.appendChild(textarea = domUtils.createElement(document, 'textarea', {
	                'name': editor.options.textarea,
	                'id': 'ueditor_textarea_' + editor.options.textarea,
	                'style': "display:none"
	            }));
	            //不要产生多个textarea
	            editor.textarea = textarea;
	        }
	        !textarea.getAttribute('name') && textarea.setAttribute('name', editor.options.textarea );
	        textarea.value = editor.hasContents() ?
	            (editor.options.allHtmlEnabled ? editor.getAllHtml() : editor.getContent(null, null, true)) :
	            ''
	    }
	    function loadPlugins(me){
	        //初始化插件
	        for (var pi in UE.plugins) {
	            UE.plugins[pi].call(me);
	        }

	    }
	    function checkCurLang(I18N){
	        for(var lang in I18N){
	            return lang
	        }
	    }

	    function langReadied(me){
	        me.langIsReady = true;

	        me.fireEvent("langReady");
	    }

	    /**
	     * 编辑器准备就绪后会触发该事件
	     * @module UE
	     * @class Editor
	     * @event ready
	     * @remind render方法执行完成之后,会触发该事件
	     * @remind
	     * @example
	     * ```javascript
	     * editor.addListener( 'ready', function( editor ) {
	     *     editor.execCommand( 'focus' ); //编辑器家在完成后，让编辑器拿到焦点
	     * } );
	     * ```
	     */
	    /**
	     * 执行destroy方法,会触发该事件
	     * @module UE
	     * @class Editor
	     * @event destroy
	     * @see UE.Editor:destroy()
	     */
	    /**
	     * 执行reset方法,会触发该事件
	     * @module UE
	     * @class Editor
	     * @event reset
	     * @see UE.Editor:reset()
	     */
	    /**
	     * 执行focus方法,会触发该事件
	     * @module UE
	     * @class Editor
	     * @event focus
	     * @see UE.Editor:focus(Boolean)
	     */
	    /**
	     * 语言加载完成会触发该事件
	     * @module UE
	     * @class Editor
	     * @event langReady
	     */
	    /**
	     * 运行命令之后会触发该命令
	     * @module UE
	     * @class Editor
	     * @event beforeExecCommand
	     */
	    /**
	     * 运行命令之后会触发该命令
	     * @module UE
	     * @class Editor
	     * @event afterExecCommand
	     */
	    /**
	     * 运行命令之前会触发该命令
	     * @module UE
	     * @class Editor
	     * @event firstBeforeExecCommand
	     */
	    /**
	     * 在getContent方法执行之前会触发该事件
	     * @module UE
	     * @class Editor
	     * @event beforeGetContent
	     * @see UE.Editor:getContent()
	     */
	    /**
	     * 在getContent方法执行之后会触发该事件
	     * @module UE
	     * @class Editor
	     * @event afterGetContent
	     * @see UE.Editor:getContent()
	     */
	    /**
	     * 在getAllHtml方法执行时会触发该事件
	     * @module UE
	     * @class Editor
	     * @event getAllHtml
	     * @see UE.Editor:getAllHtml()
	     */
	    /**
	     * 在setContent方法执行之前会触发该事件
	     * @module UE
	     * @class Editor
	     * @event beforeSetContent
	     * @see UE.Editor:setContent(String)
	     */
	    /**
	     * 在setContent方法执行之后会触发该事件
	     * @module UE
	     * @class Editor
	     * @event afterSetContent
	     * @see UE.Editor:setContent(String)
	     */
	    /**
	     * 每当编辑器内部选区发生改变时，将触发该事件
	     * @event selectionchange
	     * @warning 该事件的触发非常频繁，不建议在该事件的处理过程中做重量级的处理
	     * @example
	     * ```javascript
	     * editor.addListener( 'selectionchange', function( editor ) {
	     *     console.log('选区发生改变');
	     * }
	     */
	    /**
	     * 在所有selectionchange的监听函数执行之前，会触发该事件
	     * @module UE
	     * @class Editor
	     * @event beforeSelectionChange
	     * @see UE.Editor:selectionchange
	     */
	    /**
	     * 在所有selectionchange的监听函数执行完之后，会触发该事件
	     * @module UE
	     * @class Editor
	     * @event afterSelectionChange
	     * @see UE.Editor:selectionchange
	     */
	    /**
	     * 编辑器内容发生改变时会触发该事件
	     * @module UE
	     * @class Editor
	     * @event contentChange
	     */


	    /**
	     * 以默认参数构建一个编辑器实例
	     * @constructor
	     * @remind 通过 改构造方法实例化的编辑器,不带ui层.需要render到一个容器,编辑器实例才能正常渲染到页面
	     * @example
	     * ```javascript
	     * var editor = new UE.Editor();
	     * editor.execCommand('blod');
	     * ```
	     * @see UE.Config
	     */

	    /**
	     * 以给定的参数集合创建一个编辑器实例，对于未指定的参数，将应用默认参数。
	     * @constructor
	     * @remind 通过 改构造方法实例化的编辑器,不带ui层.需要render到一个容器,编辑器实例才能正常渲染到页面
	     * @param { Object } setting 创建编辑器的参数
	     * @example
	     * ```javascript
	     * var editor = new UE.Editor();
	     * editor.execCommand('blod');
	     * ```
	     * @see UE.Config
	     */
	    var Editor = UE.Editor = function (options) {
	        var me = this;
	        me.uid = uid++;
	        EventBase.call(me);
	        me.commands = {};
	        me.options = utils.extend(utils.clone(options || {}), UEDITOR_CONFIG, true);
	        me.shortcutkeys = {};
	        me.inputRules = [];
	        me.outputRules = [];
	        //设置默认的常用属性
	        me.setOpt(Editor.defaultOptions(me));

	        /* 尝试异步加载后台配置 */
	        me.loadServerConfig();
	        if(!utils.isEmptyObject(UE.I18N)){
	            //修改默认的语言类型
	            me.options.lang = Cookies.getCook("Prefer_Lang")=="zh_CN"?"zh-cn":"en";
	            UE.plugin.load(me);
	            langReadied(me);

	        }else{
	            utils.loadFile(document, {
	                src: me.options.langPath + me.options.lang + "/" + me.options.lang + ".js",
	                tag: "script",
	                type: "text/javascript",
	                defer: "defer"
	            }, function () {
	                UE.plugin.load(me);
	                langReadied(me);
	            });
	        }

	        UE.instants['ueditorInstant' + me.uid] = me;
	    };
	    Editor.prototype = {
	         registerCommand : function(name,obj){
	            this.commands[name] = obj;
	         },
	        /**
	         * 编辑器对外提供的监听ready事件的接口， 通过调用该方法，达到的效果与监听ready事件是一致的
	         * @method ready
	         * @param { Function } fn 编辑器ready之后所执行的回调, 如果在注册事件之前编辑器已经ready，将会
	         * 立即触发该回调。
	         * @remind 需要等待编辑器加载完成后才能执行的代码,可以使用该方法传入
	         * @example
	         * ```javascript
	         * editor.ready( function( editor ) {
	         *     editor.setContent('初始化完毕');
	         * } );
	         * ```
	         * @see UE.Editor.event:ready
	         */
	        ready: function (fn) {
	            var me = this;
	            if (fn) {
	                me.isReady ? fn.apply(me) : me.addListener('ready', fn);
	            }
	        },

	        /**
	         * 该方法是提供给插件里面使用，设置配置项默认值
	         * @method setOpt
	         * @warning 三处设置配置项的优先级: 实例化时传入参数 > setOpt()设置 > config文件里设置
	         * @warning 该方法仅供编辑器插件内部和编辑器初始化时调用，其他地方不能调用。
	         * @param { String } key 编辑器的可接受的选项名称
	         * @param { * } val  该选项可接受的值
	         * @example
	         * ```javascript
	         * editor.setOpt( 'initContent', '欢迎使用编辑器' );
	         * ```
	         */

	        /**
	         * 该方法是提供给插件里面使用，以{key:value}集合的方式设置插件内用到的配置项默认值
	         * @method setOpt
	         * @warning 三处设置配置项的优先级: 实例化时传入参数 > setOpt()设置 > config文件里设置
	         * @warning 该方法仅供编辑器插件内部和编辑器初始化时调用，其他地方不能调用。
	         * @param { Object } options 将要设置的选项的键值对对象
	         * @example
	         * ```javascript
	         * editor.setOpt( {
	         *     'initContent': '欢迎使用编辑器'
	         * } );
	         * ```
	         */
	        setOpt: function (key, val) {
	            var obj = {};
	            if (utils.isString(key)) {
	                obj[key] = val
	            } else {
	                obj = key;
	            }
	            utils.extend(this.options, obj, true);
	        },
	        getOpt:function(key){
	            return this.options[key]
	        },
	        /**
	         * 销毁编辑器实例，使用textarea代替
	         * @method destroy
	         * @example
	         * ```javascript
	         * editor.destroy();
	         * ```
	         */
	        destroy: function () {

	            var me = this;
	            me.fireEvent('destroy');
	            var container = me.container.parentNode;
	            var textarea = me.textarea;
	            if (!textarea) {
	                textarea = document.createElement('textarea');
	                container.parentNode.insertBefore(textarea, container);
	            } else {
	                textarea.style.display = ''
	            }

	            textarea.style.width = me.iframe.offsetWidth + 'px';
	            textarea.style.height = me.iframe.offsetHeight + 'px';
	            textarea.value = me.getContent();
	            textarea.id = me.key;
	            container.innerHTML = '';
	            domUtils.remove(container);
	            var key = me.key;
	            //trace:2004
	            for (var p in me) {
	                if (me.hasOwnProperty(p)) {
	                    delete this[p];
	                }
	            }
	            UE.delEditor(key);
	        },

	        /**
	         * 渲染编辑器的DOM到指定容器
	         * @method render
	         * @param { String } containerId 指定一个容器ID
	         * @remind 执行该方法,会触发ready事件
	         * @warning 必须且只能调用一次
	         */

	        /**
	         * 渲染编辑器的DOM到指定容器
	         * @method render
	         * @param { Element } containerDom 直接指定容器对象
	         * @remind 执行该方法,会触发ready事件
	         * @warning 必须且只能调用一次
	         */
	        render: function (container) {
	            var me = this,
	                options = me.options,
	                getStyleValue=function(attr){
	                    return parseInt(domUtils.getComputedStyle(container,attr));
	                };
	            if (utils.isString(container)) {
	                container = document.getElementById(container);
	            }
	            if (container) {
	                if(options.initialFrameWidth){
	                    options.minFrameWidth = options.initialFrameWidth
	                }else{
	                    options.minFrameWidth = options.initialFrameWidth = container.offsetWidth;
	                }
	                if(options.initialFrameHeight){
	                    options.minFrameHeight = options.initialFrameHeight
	                }else{
	                    options.initialFrameHeight = options.minFrameHeight = container.offsetHeight;
	                }

	                container.style.width = /%$/.test(options.initialFrameWidth) ?  '100%' : options.initialFrameWidth-
	                    getStyleValue("padding-left")- getStyleValue("padding-right") +'px';
	                container.style.height = /%$/.test(options.initialFrameHeight) ?  '100%' : options.initialFrameHeight -
	                    getStyleValue("padding-top")- getStyleValue("padding-bottom") +'px';

	                container.style.zIndex = options.zIndex;

	                var html = ( ie && browser.version < 9  ? '' : '<!DOCTYPE html>') +
	                    '<html xmlns=\'http://www.w3.org/1999/xhtml\' class=\'view\' ><head>' +
	                    '<style type=\'text/css\'>' +
	                    //设置四周的留边
	                    '.view{padding:0;word-wrap:break-word;cursor:text;height:90%;}\n' +
	                    //设置默认字体和字号
	                    //font-family不能呢随便改，在safari下fillchar会有解析问题
	                    'body{margin:8px;font-family:sans-serif;font-size:16px;}' +
	                    //设置段落间距
	                    'p{margin:5px 0;}</style>' +
	                    ( options.iframeCssUrl ? '<link rel=\'stylesheet\' type=\'text/css\' href=\'' + utils.unhtml(options.iframeCssUrl) + '\'/>' : '' ) +
	                    (options.initialStyle ? '<style>' + options.initialStyle + '</style>' : '') +
	                    '</head><body class=\'view\' ></body>' +
	                    '<script type=\'text/javascript\' ' + (ie ? 'defer=\'defer\'' : '' ) +' id=\'_initialScript\'>' +
	                    'setTimeout(function(){editor = window.parent.UE.instants[\'ueditorInstant' + me.uid + '\'];editor._setup(document);},0);' +
	                    'var _tmpScript = document.getElementById(\'_initialScript\');_tmpScript.parentNode.removeChild(_tmpScript);</script></html>';
	                container.appendChild(domUtils.createElement(document, 'iframe', {
	                    id: 'ueditor_' + me.uid,
	                    width: "100%",
	                    height: "100%",
	                    frameborder: "0",
	                    //先注释掉了，加的原因忘记了，但开启会直接导致全屏模式下内容多时不会出现滚动条
//	                    scrolling :'no',
	                    src: 'javascript:void(function(){document.open();' + (options.customDomain && document.domain != location.hostname ?  'document.domain="' + document.domain + '";' : '') +
	                        'document.write("' + html + '");document.close();}())'
	                }));
	                container.style.overflow = 'hidden';
	                //解决如果是给定的百分比，会导致高度算不对的问题
	                setTimeout(function(){
	                    if( /%$/.test(options.initialFrameWidth)){
	                        options.minFrameWidth = options.initialFrameWidth = container.offsetWidth;
	                        //如果这里给定宽度，会导致ie在拖动窗口大小时，编辑区域不随着变化
//	                        container.style.width = options.initialFrameWidth + 'px';
	                    }
	                    if(/%$/.test(options.initialFrameHeight)){
	                        options.minFrameHeight = options.initialFrameHeight = container.offsetHeight;
	                        container.style.height = options.initialFrameHeight + 'px';
	                    }
	                })
	            }
	        },

	        /**
	         * 编辑器初始化
	         * @method _setup
	         * @private
	         * @param { Element } doc 编辑器Iframe中的文档对象
	         */
	        _setup: function (doc) {

	            var me = this,
	                options = me.options;
	            if (ie) {
	                doc.body.disabled = true;
	                doc.body.contentEditable = true;
	                doc.body.disabled = false;
	            } else {
	                doc.body.contentEditable = true;
	            }
	            doc.body.spellcheck = false;
	            me.document = doc;
	            me.window = doc.defaultView || doc.parentWindow;
	            me.iframe = me.window.frameElement;
	            me.body = doc.body;
	            me.selection = new dom.Selection(doc);
	            //gecko初始化就能得到range,无法判断isFocus了
	            var geckoSel;
	            if (browser.gecko && (geckoSel = this.selection.getNative())) {
	                geckoSel.removeAllRanges();
	            }
	            this._initEvents();
	            //为form提交提供一个隐藏的textarea
	            for (var form = this.iframe.parentNode; !domUtils.isBody(form); form = form.parentNode) {
	                if (form.tagName == 'FORM') {
	                    me.form = form;
	                    if(me.options.autoSyncData){
	                        domUtils.on(me.window,'blur',function(){
	                            setValue(form,me);
	                        });
	                    }else{
	                        domUtils.on(form, 'submit', function () {
	                            setValue(this, me);
	                        });
	                    }
	                    break;
	                }
	            }
	            if (options.initialContent) {
	                if (options.autoClearinitialContent) {
	                    var oldExecCommand = me.execCommand;
	                    me.execCommand = function () {
	                        me.fireEvent('firstBeforeExecCommand');
	                        return oldExecCommand.apply(me, arguments);
	                    };
	                    this._setDefaultContent(options.initialContent);
	                } else
	                    this.setContent(options.initialContent, false, true);
	            }

	            //编辑器不能为空内容

	            if (domUtils.isEmptyNode(me.body)) {
	                me.body.innerHTML = '<p>' + (browser.ie ? '' : '<br/>') + '</p>';
	            }
	            //如果要求focus, 就把光标定位到内容开始
	            if (options.focus) {
	                setTimeout(function () {
	                    me.focus(me.options.focusInEnd);
	                    //如果自动清除开着，就不需要做selectionchange;
	                    !me.options.autoClearinitialContent && me._selectionChange();
	                }, 0);
	            }
	            if (!me.container) {
	                me.container = this.iframe.parentNode;
	            }
	            if (options.fullscreen && me.ui) {
	                me.ui.setFullScreen(true);
	            }

	            try {
	                me.document.execCommand('2D-position', false, false);
	            } catch (e) {
	            }
	            try {
	                me.document.execCommand('enableInlineTableEditing', false, false);
	            } catch (e) {
	            }
	            try {
	                me.document.execCommand('enableObjectResizing', false, false);
	            } catch (e) {
	            }

	            //挂接快捷键
	            me._bindshortcutKeys();
	            me.isReady = 1;
	            me.fireEvent('ready');
	            options.onready && options.onready.call(me);
	            if (!browser.ie9below) {
	                domUtils.on(me.window, ['blur', 'focus'], function (e) {
	                    //chrome下会出现alt+tab切换时，导致选区位置不对
	                    if (e.type == 'blur') {
	                        me._bakRange = me.selection.getRange();
	                        try {
	                            me._bakNativeRange = me.selection.getNative().getRangeAt(0);
	                            me.selection.getNative().removeAllRanges();
	                        } catch (e) {
	                            me._bakNativeRange = null;
	                        }

	                    } else {
	                        try {
	                            me._bakRange && me._bakRange.select();
	                        } catch (e) {
	                        }
	                    }
	                });
	            }
	            //trace:1518 ff3.6body不够寛，会导致点击空白处无法获得焦点
	            if (browser.gecko && browser.version <= 10902) {
	                //修复ff3.6初始化进来，不能点击获得焦点
	                me.body.contentEditable = false;
	                setTimeout(function () {
	                    me.body.contentEditable = true;
	                }, 100);
	                setInterval(function () {
	                    me.body.style.height = me.iframe.offsetHeight - 20 + 'px'
	                }, 100)
	            }

	            !options.isShow && me.setHide();
	            options.readonly && me.setDisabled();
	        },

	        /**
	         * 同步数据到编辑器所在的form
	         * 从编辑器的容器节点向上查找form元素，若找到，就同步编辑内容到找到的form里，为提交数据做准备，主要用于是手动提交的情况
	         * 后台取得数据的键值，使用你容器上的name属性，如果没有就使用参数里的textarea项
	         * @method sync
	         * @example
	         * ```javascript
	         * editor.sync();
	         * form.sumbit(); //form变量已经指向了form元素
	         * ```
	         */

	        /**
	         * 根据传入的formId，在页面上查找要同步数据的表单，若找到，就同步编辑内容到找到的form里，为提交数据做准备
	         * 后台取得数据的键值，该键值默认使用给定的编辑器容器的name属性，如果没有name属性则使用参数项里给定的“textarea”项
	         * @method sync
	         * @param { String } formID 指定一个要同步数据的form的id,编辑器的数据会同步到你指定form下
	         */
	        sync: function (formId) {
	            var me = this,
	                form = formId ? document.getElementById(formId) :
	                    domUtils.findParent(me.iframe.parentNode, function (node) {
	                        return node.tagName == 'FORM'
	                    }, true);
	            form && setValue(form, me);
	        },

	        /**
	         * 设置编辑器高度
	         * @method setHeight
	         * @remind 当配置项autoHeightEnabled为真时,该方法无效
	         * @param { Number } number 设置的高度值，纯数值，不带单位
	         * @example
	         * ```javascript
	         * editor.setHeight(number);
	         * ```
	         */
	        setHeight: function (height,notSetHeight) {
	            if (height !== parseInt(this.iframe.parentNode.style.height)) {
	                this.iframe.parentNode.style.height = height + 'px';
	            }
	            !notSetHeight && (this.options.minFrameHeight = this.options.initialFrameHeight = height);
	            this.body.style.height = height + 'px';
	            !notSetHeight && this.trigger('setHeight')
	        },

	        /**
	         * 为编辑器的编辑命令提供快捷键
	         * 这个接口是为插件扩展提供的接口,主要是为新添加的插件，如果需要添加快捷键，所提供的接口
	         * @method addshortcutkey
	         * @param { Object } keyset 命令名和快捷键键值对对象，多个按钮的快捷键用“＋”分隔
	         * @example
	         * ```javascript
	         * editor.addshortcutkey({
	         *     "Bold" : "ctrl+66",//^B
	         *     "Italic" : "ctrl+73", //^I
	         * });
	         * ```
	         */
	        /**
	         * 这个接口是为插件扩展提供的接口,主要是为新添加的插件，如果需要添加快捷键，所提供的接口
	         * @method addshortcutkey
	         * @param { String } cmd 触发快捷键时，响应的命令
	         * @param { String } keys 快捷键的字符串，多个按钮用“＋”分隔
	         * @example
	         * ```javascript
	         * editor.addshortcutkey("Underline", "ctrl+85"); //^U
	         * ```
	         */
	        addshortcutkey: function (cmd, keys) {
	            var obj = {};
	            if (keys) {
	                obj[cmd] = keys
	            } else {
	                obj = cmd;
	            }
	            utils.extend(this.shortcutkeys, obj)
	        },

	        /**
	         * 对编辑器设置keydown事件监听，绑定快捷键和命令，当快捷键组合触发成功，会响应对应的命令
	         * @method _bindshortcutKeys
	         * @private
	         */
	        _bindshortcutKeys: function () {
	            var me = this, shortcutkeys = this.shortcutkeys;
	            me.addListener('keydown', function (type, e) {
	                var keyCode = e.keyCode || e.which;
	                for (var i in shortcutkeys) {
	                    var tmp = shortcutkeys[i].split(',');
	                    for (var t = 0, ti; ti = tmp[t++];) {
	                        ti = ti.split(':');
	                        var key = ti[0], param = ti[1];
	                        if (/^(ctrl)(\+shift)?\+(\d+)$/.test(key.toLowerCase()) || /^(\d+)$/.test(key)) {
	                            if (( (RegExp.$1 == 'ctrl' ? (e.ctrlKey || e.metaKey) : 0)
	                                && (RegExp.$2 != "" ? e[RegExp.$2.slice(1) + "Key"] : 1)
	                                && keyCode == RegExp.$3
	                                ) ||
	                                keyCode == RegExp.$1
	                                ) {
	                                if (me.queryCommandState(i,param) != -1)
	                                    me.execCommand(i, param);
	                                domUtils.preventDefault(e);
	                            }
	                        }
	                    }

	                }
	            });
	        },

	        /**
	         * 获取编辑器的内容
	         * @method getContent
	         * @warning 该方法获取到的是经过编辑器内置的过滤规则进行过滤后得到的内容
	         * @return { String } 编辑器的内容字符串, 如果编辑器的内容为空，或者是空的标签内容（如:”&lt;p&gt;&lt;br/&gt;&lt;/p&gt;“）， 则返回空字符串
	         * @example
	         * ```javascript
	         * //编辑器html内容:<p>1<strong>2<em>34</em>5</strong>6</p>
	         * var content = editor.getContent(); //返回值:<p>1<strong>2<em>34</em>5</strong>6</p>
	         * ```
	         */

	        /**
	         * 获取编辑器的内容。 可以通过参数定义编辑器内置的判空规则
	         * @method getContent
	         * @param { Function } fn 自定的判空规则， 要求该方法返回一个boolean类型的值，
	         *                      代表当前编辑器的内容是否空，
	         *                      如果返回true， 则该方法将直接返回空字符串；如果返回false，则编辑器将返回
	         *                      经过内置过滤规则处理后的内容。
	         * @remind 该方法在处理包含有初始化内容的时候能起到很好的作用。
	         * @warning 该方法获取到的是经过编辑器内置的过滤规则进行过滤后得到的内容
	         * @return { String } 编辑器的内容字符串
	         * @example
	         * ```javascript
	         * // editor 是一个编辑器的实例
	         * var content = editor.getContent( function ( editor ) {
	         *      return editor.body.innerHTML === '欢迎使用UEditor'; //返回空字符串
	         * } );
	         * ```
	         */
	        getContent: function (cmd, fn,notSetCursor,ignoreBlank,formatter) {
	            var me = this;
	            if (cmd && utils.isFunction(cmd)) {
	                fn = cmd;
	                cmd = '';
	            }
	            if (fn ? !fn() : !this.hasContents()) {
	                return '';
	            }
	            me.fireEvent('beforegetcontent');
	            var root = UE.htmlparser(me.body.innerHTML,ignoreBlank);
	            me.filterOutputRule(root);
	            me.fireEvent('aftergetcontent', cmd,root);
	            return  root.toHtml(formatter);
	        },

	        /**
	         * 取得完整的html代码，可以直接显示成完整的html文档
	         * @method getAllHtml
	         * @return { String } 编辑器的内容html文档字符串
	         * @eaxmple
	         * ```javascript
	         * editor.getAllHtml(); //返回格式大致是: <html><head>...</head><body>...</body></html>
	         * ```
	         */
	        getAllHtml: function () {
	            var me = this,
	                headHtml = [],
	                html = '';
	            me.fireEvent('getAllHtml', headHtml);
	            if (browser.ie && browser.version > 8) {
	                var headHtmlForIE9 = '';
	                utils.each(me.document.styleSheets, function (si) {
	                    headHtmlForIE9 += ( si.href ? '<link rel="stylesheet" type="text/css" href="' + si.href + '" />' : '<style>' + si.cssText + '</style>');
	                });
	                utils.each(me.document.getElementsByTagName('script'), function (si) {
	                    headHtmlForIE9 += si.outerHTML;
	                });

	            }
	            return '<html><head>' + (me.options.charset ? '<meta http-equiv="Content-Type" content="text/html; charset=' + me.options.charset + '"/>' : '')
	                + (headHtmlForIE9 || me.document.getElementsByTagName('head')[0].innerHTML) + headHtml.join('\n') + '</head>'
	                + '<body ' + (ie && browser.version < 9 ? 'class="view"' : '') + '>' + me.getContent(null, null, true) + '</body></html>';
	        },

	        /**
	         * 得到编辑器的纯文本内容，但会保留段落格式
	         * @method getPlainTxt
	         * @return { String } 编辑器带段落格式的纯文本内容字符串
	         * @example
	         * ```javascript
	         * //编辑器html内容:<p><strong>1</strong></p><p><strong>2</strong></p>
	         * console.log(editor.getPlainTxt()); //输出:"1\n2\n
	         * ```
	         */
	        getPlainTxt: function () {
	            var reg = new RegExp(domUtils.fillChar, 'g'),
	                html = this.body.innerHTML.replace(/[\n\r]/g, '');//ie要先去了\n在处理
	            html = html.replace(/<(p|div)[^>]*>(<br\/?>|&nbsp;)<\/\1>/gi, '\n')
	                .replace(/<br\/?>/gi, '\n')
	                .replace(/<[^>/]+>/g, '')
	                .replace(/(\n)?<\/([^>]+)>/g, function (a, b, c) {
	                    return dtd.$block[c] ? '\n' : b ? b : '';
	                });
	            //取出来的空格会有c2a0会变成乱码，处理这种情况\u00a0
	            return html.replace(reg, '').replace(/\u00a0/g, ' ').replace(/&nbsp;/g, ' ');
	        },

	        /**
	         * 获取编辑器中的纯文本内容,没有段落格式
	         * @method getContentTxt
	         * @return { String } 编辑器不带段落格式的纯文本内容字符串
	         * @example
	         * ```javascript
	         * //编辑器html内容:<p><strong>1</strong></p><p><strong>2</strong></p>
	         * console.log(editor.getPlainTxt()); //输出:"12
	         * ```
	         */
	        getContentTxt: function () {
	            var reg = new RegExp(domUtils.fillChar, 'g');
	            //取出来的空格会有c2a0会变成乱码，处理这种情况\u00a0
	            return this.body[browser.ie ? 'innerText' : 'textContent'].replace(reg, '').replace(/\u00a0/g, ' ');
	        },

	        /**
	         * 设置编辑器的内容，可修改编辑器当前的html内容
	         * @method setContent
	         * @warning 通过该方法插入的内容，是经过编辑器内置的过滤规则进行过滤后得到的内容
	         * @warning 该方法会触发selectionchange事件
	         * @param { String } html 要插入的html内容
	         * @example
	         * ```javascript
	         * editor.getContent('<p>test</p>');
	         * ```
	         */

	        /**
	         * 设置编辑器的内容，可修改编辑器当前的html内容
	         * @method setContent
	         * @warning 通过该方法插入的内容，是经过编辑器内置的过滤规则进行过滤后得到的内容
	         * @warning 该方法会触发selectionchange事件
	         * @param { String } html 要插入的html内容
	         * @param { Boolean } isAppendTo 若传入true，不清空原来的内容，在最后插入内容，否则，清空内容再插入
	         * @example
	         * ```javascript
	         * //假设设置前的编辑器内容是 <p>old text</p>
	         * editor.setContent('<p>new text</p>', true); //插入的结果是<p>old text</p><p>new text</p>
	         * ```
	         */
	        setContent: function (html, isAppendTo, notFireSelectionchange) {
	            var me = this;

	            me.fireEvent('beforesetcontent', html);
	            var root = UE.htmlparser(html);
	            me.filterInputRule(root);
	            html = root.toHtml();

	            me.body.innerHTML = (isAppendTo ? me.body.innerHTML : '') + html;


	            function isCdataDiv(node){
	                return  node.tagName == 'DIV' && node.getAttribute('cdata_tag');
	            }
	            //给文本或者inline节点套p标签
	            if (me.options.enterTag == 'p') {

	                var child = this.body.firstChild, tmpNode;
	                if (!child || child.nodeType == 1 &&
	                    (dtd.$cdata[child.tagName] || isCdataDiv(child) ||
	                        domUtils.isCustomeNode(child)
	                        )
	                    && child === this.body.lastChild) {
	                    this.body.innerHTML = '<p>' + (browser.ie ? '&nbsp;' : '<br/>') + '</p>' + this.body.innerHTML;

	                } else {
	                    var p = me.document.createElement('p');
	                    while (child) {
	                        while (child && (child.nodeType == 3 || child.nodeType == 1 && dtd.p[child.tagName] && !dtd.$cdata[child.tagName])) {
	                            tmpNode = child.nextSibling;
	                            p.appendChild(child);
	                            child = tmpNode;
	                        }
	                        if (p.firstChild) {
	                            if (!child) {
	                                me.body.appendChild(p);
	                                break;
	                            } else {
	                                child.parentNode.insertBefore(p, child);
	                                p = me.document.createElement('p');
	                            }
	                        }
	                        child = child.nextSibling;
	                    }
	                }
	            }
	            me.fireEvent('aftersetcontent');
	            me.fireEvent('contentchange');

	            !notFireSelectionchange && me._selectionChange();
	            //清除保存的选区
	            me._bakRange = me._bakIERange = me._bakNativeRange = null;
	            //trace:1742 setContent后gecko能得到焦点问题
	            var geckoSel;
	            if (browser.gecko && (geckoSel = this.selection.getNative())) {
	                geckoSel.removeAllRanges();
	            }
	            if(me.options.autoSyncData){
	                me.form && setValue(me.form,me);
	            }
	        },

	        /**
	         * 让编辑器获得焦点，默认focus到编辑器头部
	         * @method focus
	         * @example
	         * ```javascript
	         * editor.focus()
	         * ```
	         */

	        /**
	         * 让编辑器获得焦点，toEnd确定focus位置
	         * @method focus
	         * @param { Boolean } toEnd 默认focus到编辑器头部，toEnd为true时focus到内容尾部
	         * @example
	         * ```javascript
	         * editor.focus(true)
	         * ```
	         */
	        focus: function (toEnd) {
	            try {
	                var me = this,
	                    rng = me.selection.getRange();
	                if (toEnd) {
	                    var node = me.body.lastChild;
	                    if(node && node.nodeType == 1 && !dtd.$empty[node.tagName]){
	                        if(domUtils.isEmptyBlock(node)){
	                            rng.setStartAtFirst(node)
	                        }else{
	                            rng.setStartAtLast(node)
	                        }
	                        rng.collapse(true);
	                    }
	                    rng.setCursor(true);
	                } else {
	                    if(!rng.collapsed && domUtils.isBody(rng.startContainer) && rng.startOffset == 0){

	                        var node = me.body.firstChild;
	                        if(node && node.nodeType == 1 && !dtd.$empty[node.tagName]){
	                            rng.setStartAtFirst(node).collapse(true);
	                        }
	                    }

	                    rng.select(true);

	                }
	                this.fireEvent('focus selectionchange');
	            } catch (e) {
	            }

	        },
	        isFocus:function(){
	            return this.selection.isFocus();
	        },
	        blur:function(){
	            var sel = this.selection.getNative();
	            if(sel.empty && browser.ie){
	                var nativeRng = document.body.createTextRange();
	                nativeRng.moveToElementText(document.body);
	                nativeRng.collapse(true);
	                nativeRng.select();
	                sel.empty()
	            }else{
	                sel.removeAllRanges()
	            }

	            //this.fireEvent('blur selectionchange');
	        },
	        /**
	         * 初始化UE事件及部分事件代理
	         * @method _initEvents
	         * @private
	         */
	        _initEvents: function () {
	            var me = this,
	                doc = me.document,
	                win = me.window;
	            me._proxyDomEvent = utils.bind(me._proxyDomEvent, me);
	            domUtils.on(doc, ['click', 'contextmenu', 'mousedown', 'keydown', 'keyup', 'keypress', 'mouseup', 'mouseover', 'mouseout', 'selectstart'], me._proxyDomEvent);
	            domUtils.on(win, ['focus', 'blur'], me._proxyDomEvent);
	            domUtils.on(me.body,'drop',function(e){
	                //阻止ff下默认的弹出新页面打开图片
	                if(browser.gecko && e.stopPropagation) { e.stopPropagation(); }
	                me.fireEvent('contentchange')
	            });
	            domUtils.on(doc, ['mouseup', 'keydown'], function (evt) {
	                //特殊键不触发selectionchange
	                if (evt.type == 'keydown' && (evt.ctrlKey || evt.metaKey || evt.shiftKey || evt.altKey)) {
	                    return;
	                }
	                if (evt.button == 2)return;
	                me._selectionChange(250, evt);
	            });
	        },
	        /**
	         * 触发事件代理
	         * @method _proxyDomEvent
	         * @private
	         * @return { * } fireEvent的返回值
	         * @see UE.EventBase:fireEvent(String)
	         */
	        _proxyDomEvent: function (evt) {
	            if(this.fireEvent('before' + evt.type.replace(/^on/, '').toLowerCase()) === false){
	                return false;
	            }
	            if(this.fireEvent(evt.type.replace(/^on/, ''), evt) === false){
	                return false;
	            }
	            return this.fireEvent('after' + evt.type.replace(/^on/, '').toLowerCase())
	        },
	        /**
	         * 变化选区
	         * @method _selectionChange
	         * @private
	         */
	        _selectionChange: function (delay, evt) {
	            var me = this;
	            //有光标才做selectionchange 为了解决未focus时点击source不能触发更改工具栏状态的问题（source命令notNeedUndo=1）
//	            if ( !me.selection.isFocus() ){
//	                return;
//	            }


	            var hackForMouseUp = false;
	            var mouseX, mouseY;
	            if (browser.ie && browser.version < 9 && evt && evt.type == 'mouseup') {
	                var range = this.selection.getRange();
	                if (!range.collapsed) {
	                    hackForMouseUp = true;
	                    mouseX = evt.clientX;
	                    mouseY = evt.clientY;
	                }
	            }
	            clearTimeout(_selectionChangeTimer);
	            _selectionChangeTimer = setTimeout(function () {
	                if (!me.selection || !me.selection.getNative()) {
	                    return;
	                }
	                //修复一个IE下的bug: 鼠标点击一段已选择的文本中间时，可能在mouseup后的一段时间内取到的range是在selection的type为None下的错误值.
	                //IE下如果用户是拖拽一段已选择文本，则不会触发mouseup事件，所以这里的特殊处理不会对其有影响
	                var ieRange;
	                if (hackForMouseUp && me.selection.getNative().type == 'None') {
	                    ieRange = me.document.body.createTextRange();
	                    try {
	                        ieRange.moveToPoint(mouseX, mouseY);
	                    } catch (ex) {
	                        ieRange = null;
	                    }
	                }
	                var bakGetIERange;
	                if (ieRange) {
	                    bakGetIERange = me.selection.getIERange;
	                    me.selection.getIERange = function () {
	                        return ieRange;
	                    };
	                }
	                me.selection.cache();
	                if (bakGetIERange) {
	                    me.selection.getIERange = bakGetIERange;
	                }
	                if (me.selection._cachedRange && me.selection._cachedStartElement) {
	                    me.fireEvent('beforeselectionchange');
	                    // 第二个参数causeByUi为true代表由用户交互造成的selectionchange.
	                    me.fireEvent('selectionchange', !!evt);
	                    me.fireEvent('afterselectionchange');
	                    me.selection.clear();
	                }
	            }, delay || 50);
	        },

	        /**
	         * 执行编辑命令
	         * @method _callCmdFn
	         * @private
	         * @param { String } fnName 函数名称
	         * @param { * } args 传给命令函数的参数
	         * @return { * } 返回命令函数运行的返回值
	         */
	        _callCmdFn: function (fnName, args) {
	            var cmdName = args[0].toLowerCase(),
	                cmd, cmdFn;
	            cmd = this.commands[cmdName] || UE.commands[cmdName];
	            cmdFn = cmd && cmd[fnName];
	            //没有querycommandstate或者没有command的都默认返回0
	            if ((!cmd || !cmdFn) && fnName == 'queryCommandState') {
	                return 0;
	            } else if (cmdFn) {
	                return cmdFn.apply(this, args);
	            }
	        },

	        /**
	         * 执行编辑命令cmdName，完成富文本编辑效果
	         * @method execCommand
	         * @param { String } cmdName 需要执行的命令
	         * @remind 具体命令的使用请参考<a href="#COMMAND.LIST">命令列表</a>
	         * @return { * } 返回命令函数运行的返回值
	         * @example
	         * ```javascript
	         * editor.execCommand(cmdName);
	         * ```
	         */
	        execCommand: function (cmdName) {
	            cmdName = cmdName.toLowerCase();
	            var me = this,
	                result,
	                cmd = me.commands[cmdName] || UE.commands[cmdName];
	            if (!cmd || !cmd.execCommand) {
	                return null;
	            }
	            if (!cmd.notNeedUndo && !me.__hasEnterExecCommand) {
	                me.__hasEnterExecCommand = true;
	                if (me.queryCommandState.apply(me,arguments) != -1) {
	                    me.fireEvent('saveScene');
	                    me.fireEvent.apply(me, ['beforeexeccommand', cmdName].concat(arguments));
	                    result = this._callCmdFn('execCommand', arguments);
	                    //保存场景时，做了内容对比，再看是否进行contentchange触发，这里多触发了一次，去掉
//	                    (!cmd.ignoreContentChange && !me._ignoreContentChange) && me.fireEvent('contentchange');
	                    me.fireEvent.apply(me, ['afterexeccommand', cmdName].concat(arguments));
	                    me.fireEvent('saveScene');
	                }
	                me.__hasEnterExecCommand = false;
	            } else {
	                result = this._callCmdFn('execCommand', arguments);
	                (!me.__hasEnterExecCommand && !cmd.ignoreContentChange && !me._ignoreContentChange) && me.fireEvent('contentchange')
	            }
	            (!me.__hasEnterExecCommand && !cmd.ignoreContentChange && !me._ignoreContentChange) && me._selectionChange();
	            return result;
	        },

	        /**
	         * 根据传入的command命令，查选编辑器当前的选区，返回命令的状态
	         * @method  queryCommandState
	         * @param { String } cmdName 需要查询的命令名称
	         * @remind 具体命令的使用请参考<a href="#COMMAND.LIST">命令列表</a>
	         * @return { Number } number 返回放前命令的状态，返回值三种情况：(-1|0|1)
	         * @example
	         * ```javascript
	         * editor.queryCommandState(cmdName)  => (-1|0|1)
	         * ```
	         * @see COMMAND.LIST
	         */
	        queryCommandState: function (cmdName) {
	            return this._callCmdFn('queryCommandState', arguments);
	        },

	        /**
	         * 根据传入的command命令，查选编辑器当前的选区，根据命令返回相关的值
	         * @method queryCommandValue
	         * @param { String } cmdName 需要查询的命令名称
	         * @remind 具体命令的使用请参考<a href="#COMMAND.LIST">命令列表</a>
	         * @remind 只有部分插件有此方法
	         * @return { * } 返回每个命令特定的当前状态值
	         * @grammar editor.queryCommandValue(cmdName)  =>  {*}
	         * @see COMMAND.LIST
	         */
	        queryCommandValue: function (cmdName) {
	            return this._callCmdFn('queryCommandValue', arguments);
	        },

	        /**
	         * 检查编辑区域中是否有内容
	         * @method  hasContents
	         * @remind 默认有文本内容，或者有以下节点都不认为是空
	         * table,ul,ol,dl,iframe,area,base,col,hr,img,embed,input,link,meta,param
	         * @return { Boolean } 检查有内容返回true，否则返回false
	         * @example
	         * ```javascript
	         * editor.hasContents()
	         * ```
	         */

	        /**
	         * 检查编辑区域中是否有内容，若包含参数tags中的节点类型，直接返回true
	         * @method  hasContents
	         * @param { Array } tags 传入数组判断时用到的节点类型
	         * @return { Boolean } 若文档中包含tags数组里对应的tag，返回true，否则返回false
	         * @example
	         * ```javascript
	         * editor.hasContents(['span']);
	         * ```
	         */
	        hasContents: function (tags) {
	            if (tags) {
	                for (var i = 0, ci; ci = tags[i++];) {
	                    if (this.document.getElementsByTagName(ci).length > 0) {
	                        return true;
	                    }
	                }
	            }
	            if (!domUtils.isEmptyBlock(this.body)) {
	                return true
	            }
	            //随时添加,定义的特殊标签如果存在，不能认为是空
	            tags = ['div'];
	            for (i = 0; ci = tags[i++];) {
	                var nodes = domUtils.getElementsByTagName(this.document, ci);
	                for (var n = 0, cn; cn = nodes[n++];) {
	                    if (domUtils.isCustomeNode(cn)) {
	                        return true;
	                    }
	                }
	            }
	            return false;
	        },

	        /**
	         * 重置编辑器，可用来做多个tab使用同一个编辑器实例
	         * @method  reset
	         * @remind 此方法会清空编辑器内容，清空回退列表，会触发reset事件
	         * @example
	         * ```javascript
	         * editor.reset()
	         * ```
	         */
	        reset: function () {
	            this.fireEvent('reset');
	        },

	        /**
	         * 设置当前编辑区域可以编辑
	         * @method setEnabled
	         * @example
	         * ```javascript
	         * editor.setEnabled()
	         * ```
	         */
	        setEnabled: function () {
	            var me = this, range;
	            if (me.body.contentEditable == 'false') {
	                me.body.contentEditable = true;
	                range = me.selection.getRange();
	                //有可能内容丢失了
	                try {
	                    range.moveToBookmark(me.lastBk);
	                    delete me.lastBk
	                } catch (e) {
	                    range.setStartAtFirst(me.body).collapse(true)
	                }
	                range.select(true);
	                if (me.bkqueryCommandState) {
	                    me.queryCommandState = me.bkqueryCommandState;
	                    delete me.bkqueryCommandState;
	                }
	                if (me.bkqueryCommandValue) {
	                    me.queryCommandValue = me.bkqueryCommandValue;
	                    delete me.bkqueryCommandValue;
	                }
	                me.fireEvent('selectionchange');
	            }
	        },
	        enable: function () {
	            return this.setEnabled();
	        },

	        /** 设置当前编辑区域不可编辑
	         * @method setDisabled
	         */

	        /** 设置当前编辑区域不可编辑,except中的命令除外
	         * @method setDisabled
	         * @param { String } except 例外命令的字符串
	         * @remind 即使设置了disable，此处配置的例外命令仍然可以执行
	         * @example
	         * ```javascript
	         * editor.setDisabled('bold'); //禁用工具栏中除加粗之外的所有功能
	         * ```
	         */

	        /** 设置当前编辑区域不可编辑,except中的命令除外
	         * @method setDisabled
	         * @param { Array } except 例外命令的字符串数组，数组中的命令仍然可以执行
	         * @remind 即使设置了disable，此处配置的例外命令仍然可以执行
	         * @example
	         * ```javascript
	         * editor.setDisabled(['bold','insertimage']); //禁用工具栏中除加粗和插入图片之外的所有功能
	         * ```
	         */
	        setDisabled: function (except) {
	            var me = this;
	            except = except ? utils.isArray(except) ? except : [except] : [];
	            if (me.body.contentEditable == 'true') {
	                if (!me.lastBk) {
	                    me.lastBk = me.selection.getRange().createBookmark(true);
	                }
	                me.body.contentEditable = false;
	                me.bkqueryCommandState = me.queryCommandState;
	                me.bkqueryCommandValue = me.queryCommandValue;
	                me.queryCommandState = function (type) {
	                    if (utils.indexOf(except, type) != -1) {
	                        return me.bkqueryCommandState.apply(me, arguments);
	                    }
	                    return -1;
	                };
	                me.queryCommandValue = function (type) {
	                    if (utils.indexOf(except, type) != -1) {
	                        return me.bkqueryCommandValue.apply(me, arguments);
	                    }
	                    return null;
	                };
	                me.fireEvent('selectionchange');
	            }
	        },
	        disable: function (except) {
	            return this.setDisabled(except);
	        },

	        /**
	         * 设置默认内容
	         * @method _setDefaultContent
	         * @private
	         * @param  { String } cont 要存入的内容
	         */
	        _setDefaultContent: function () {
	            function clear() {
	                var me = this;
	                if (me.document.getElementById('initContent')) {
	                    me.body.innerHTML = '<p>' + (ie ? '' : '<br/>') + '</p>';
	                    me.removeListener('firstBeforeExecCommand focus', clear);
	                    setTimeout(function () {
	                        me.focus();
	                        me._selectionChange();
	                    }, 0)
	                }
	            }

	            return function (cont) {
	                var me = this;
	                me.body.innerHTML = '<p id="initContent">' + cont + '</p>';

	                me.addListener('firstBeforeExecCommand focus', clear);
	            }
	        }(),

	        /**
	         * 显示编辑器
	         * @method setShow
	         * @example
	         * ```javascript
	         * editor.setShow()
	         * ```
	         */
	        setShow: function () {
	            var me = this, range = me.selection.getRange();
	            if (me.container.style.display == 'none') {
	                //有可能内容丢失了
	                try {
	                    range.moveToBookmark(me.lastBk);
	                    delete me.lastBk
	                } catch (e) {
	                    range.setStartAtFirst(me.body).collapse(true)
	                }
	                //ie下focus实效，所以做了个延迟
	                setTimeout(function () {
	                    range.select(true);
	                }, 100);
	                me.container.style.display = '';
	            }

	        },
	        show: function () {
	            return this.setShow();
	        },
	        /**
	         * 隐藏编辑器
	         * @method setHide
	         * @example
	         * ```javascript
	         * editor.setHide()
	         * ```
	         */
	        setHide: function () {
	            var me = this;
	            if (!me.lastBk) {
	                me.lastBk = me.selection.getRange().createBookmark(true);
	            }
	            me.container.style.display = 'none'
	        },
	        hide: function () {
	            return this.setHide();
	        },

	        /**
	         * 根据指定的路径，获取对应的语言资源
	         * @method getLang
	         * @param { String } path 路径根据的是lang目录下的语言文件的路径结构
	         * @return { Object | String } 根据路径返回语言资源的Json格式对象或者语言字符串
	         * @example
	         * ```javascript
	         * editor.getLang('contextMenu.delete'); //如果当前是中文，那返回是的是'删除'
	         * ```
	         */
	        getLang: function (path) {
	            var lang = UE.I18N[this.options.lang];
	            if (!lang) {
	                throw Error("not import language file");
	            }
	            path = (path || "").split(".");
	            for (var i = 0, ci; ci = path[i++];) {
	                lang = lang[ci];
	                if (!lang)break;
	            }
	            return lang;
	        },

	        /**
	         * 计算编辑器html内容字符串的长度
	         * @method  getContentLength
	         * @return { Number } 返回计算的长度
	         * @example
	         * ```javascript
	         * //编辑器html内容<p><strong>132</strong></p>
	         * editor.getContentLength() //返回27
	         * ```
	         */
	        /**
	         * 计算编辑器当前纯文本内容的长度
	         * @method  getContentLength
	         * @param { Boolean } ingoneHtml 传入true时，只按照纯文本来计算
	         * @return { Number } 返回计算的长度，内容中有hr/img/iframe标签，长度加1
	         * @example
	         * ```javascript
	         * //编辑器html内容<p><strong>132</strong></p>
	         * editor.getContentLength() //返回3
	         * ```
	         */
	        getContentLength: function (ingoneHtml, tagNames) {
	            var count = this.getContent(false,false,true).length;
	            if (ingoneHtml) {
	                tagNames = (tagNames || []).concat([ 'hr', 'img', 'iframe']);
	                count = this.getContentTxt().replace(/[\t\r\n]+/g, '').length;
	                for (var i = 0, ci; ci = tagNames[i++];) {
	                    count += this.document.getElementsByTagName(ci).length;
	                }
	            }
	            return count;
	        },

	        /**
	         * 注册输入过滤规则
	         * @method  addInputRule
	         * @param { Function } rule 要添加的过滤规则
	         * @example
	         * ```javascript
	         * editor.addInputRule(function(root){
	         *   $.each(root.getNodesByTagName('div'),function(i,node){
	         *       node.tagName="p";
	         *   });
	         * });
	         * ```
	         */
	        addInputRule: function (rule) {
	            this.inputRules.push(rule);
	        },

	        /**
	         * 执行注册的过滤规则
	         * @method  filterInputRule
	         * @param { UE.uNode } root 要过滤的uNode节点
	         * @remind 执行editor.setContent方法和执行'inserthtml'命令后，会运行该过滤函数
	         * @example
	         * ```javascript
	         * editor.filterInputRule(editor.body);
	         * ```
	         * @see UE.Editor:addInputRule
	         */
	        filterInputRule: function (root) {
	            for (var i = 0, ci; ci = this.inputRules[i++];) {
	                ci.call(this, root)
	            }
	        },

	        /**
	         * 注册输出过滤规则
	         * @method  addOutputRule
	         * @param { Function } rule 要添加的过滤规则
	         * @example
	         * ```javascript
	         * editor.addOutputRule(function(root){
	         *   $.each(root.getNodesByTagName('p'),function(i,node){
	         *       node.tagName="div";
	         *   });
	         * });
	         * ```
	         */
	        addOutputRule: function (rule) {
	            this.outputRules.push(rule)
	        },

	        /**
	         * 根据输出过滤规则，过滤编辑器内容
	         * @method  filterOutputRule
	         * @remind 执行editor.getContent方法的时候，会先运行该过滤函数
	         * @param { UE.uNode } root 要过滤的uNode节点
	         * @example
	         * ```javascript
	         * editor.filterOutputRule(editor.body);
	         * ```
	         * @see UE.Editor:addOutputRule
	         */
	        filterOutputRule: function (root) {
	            for (var i = 0, ci; ci = this.outputRules[i++];) {
	                ci.call(this, root)
	            }
	        },

	        /**
	         * 根据action名称获取请求的路径
	         * @method  getActionUrl
	         * @remind 假如没有设置serverUrl,会根据imageUrl设置默认的controller路径
	         * @param { String } action action名称
	         * @example
	         * ```javascript
	         * editor.getActionUrl('config'); //返回 "/ueditor/php/controller.php?action=config"
	         * editor.getActionUrl('image'); //返回 "/ueditor/php/controller.php?action=uplaodimage"
	         * editor.getActionUrl('scrawl'); //返回 "/ueditor/php/controller.php?action=uplaodscrawl"
	         * editor.getActionUrl('imageManager'); //返回 "/ueditor/php/controller.php?action=listimage"
	         * ```
	         */
	        getActionUrl: function(action){
	            var actionName = this.getOpt(action) || action,
	                imageUrl = this.getOpt('imageUrl'),
	                serverUrl = this.getOpt('serverUrl');

	            if(!serverUrl && imageUrl) {
	                serverUrl = imageUrl.replace(/^(.*[\/]).+([\.].+)$/, '$1controller$2');
	            }

	            if(serverUrl) {
	                serverUrl = serverUrl + (serverUrl.indexOf('?') == -1 ? '?':'&') + 'action=' + (actionName || '');
	                return utils.formatUrl(serverUrl);
	            } else {
	                return '';
	            }
	        }
	    };
	    utils.inherits(Editor, EventBase);
	})();


	// core/Editor.defaultoptions.js
	//维护编辑器一下默认的不在插件中的配置项
	UE.Editor.defaultOptions = function(editor){

	    var _url = editor.options.UEDITOR_HOME_URL;
	    return {
	        isShow: true,
	        initialContent: '',
	        initialStyle:'',
	        autoClearinitialContent: false,
	        iframeCssUrl: _url + 'themes/iframe.css',
	        textarea: 'editorValue',
	        focus: false,
	        focusInEnd: true,
	        autoClearEmptyNode: true,
	        fullscreen: false,
	        readonly: false,
	        zIndex: 999,
	        imagePopup: true,
	        enterTag: 'p',
	        customDomain: false,
	        lang: 'zh-cn',
	        langPath: _url + 'lang/',
	        theme: 'default',
	        themePath: _url + 'themes/',
	        allHtmlEnabled: false,
	        scaleEnabled: false,
	        tableNativeEditInFF: false,
	        autoSyncData : true,
	        fileNameFormat: '{time}{rand:6}'
	    }
	};

	// core/loadconfig.js
	(function(){

	    UE.Editor.prototype.loadServerConfig = function(){
	        var me = this;
	        setTimeout(function(){
	            try{
	                me.options.imageUrl && me.setOpt('serverUrl', me.options.imageUrl.replace(/^(.*[\/]).+([\.].+)$/, '$1controller$2'));

	                var configUrl = me.getActionUrl('config'),
	                    isJsonp = utils.isCrossDomainUrl(configUrl);

	                /* 发出ajax请求 */
	                me._serverConfigLoaded = false;

	                configUrl && UE.ajax.request(configUrl,{
	                    'method': 'GET',
	                    'dataType': isJsonp ? 'jsonp':'',
	                    'onsuccess':function(r){
	                        try {
	                            var config = isJsonp ? r:eval("("+r.responseText+")");
	                            utils.extend(me.options, config);
	                            me.fireEvent('serverConfigLoaded');
	                            me._serverConfigLoaded = true;
	                        } catch (e) {
	                            showErrorMsg(me.getLang('loadconfigFormatError'));
	                        }
	                    },
	                    'onerror':function(){
	                        showErrorMsg(me.getLang('loadconfigHttpError'));
	                    }
	                });
	            } catch(e){
	                showErrorMsg(me.getLang('loadconfigError'));
	            }
	        });

	        function showErrorMsg(msg) {
	            console && console.error(msg);
	            //me.fireEvent('showMessage', {
	            //    'title': msg,
	            //    'type': 'error'
	            //});
	        }
	    };

	    UE.Editor.prototype.isServerConfigLoaded = function(){
	        var me = this;
	        return me._serverConfigLoaded || false;
	    };

	    UE.Editor.prototype.afterConfigReady = function(handler){
	        if (!handler || !utils.isFunction(handler)) return;
	        var me = this;
	        var readyHandler = function(){
	            handler.apply(me, arguments);
	            me.removeListener('serverConfigLoaded', readyHandler);
	        };

	        if (me.isServerConfigLoaded()) {
	            handler.call(me, 'serverConfigLoaded');
	        } else {
	            me.addListener('serverConfigLoaded', readyHandler);
	        }
	    };

	})();


	// core/ajax.js
	/**
	 * @file
	 * @module UE.ajax
	 * @since 1.2.6.1
	 */

	/**
	 * 提供对ajax请求的支持
	 * @module UE.ajax
	 */
	UE.ajax = function() {

	    //创建一个ajaxRequest对象
	    var fnStr = 'XMLHttpRequest()';
	    try {
	        new ActiveXObject("Msxml2.XMLHTTP");
	        fnStr = 'ActiveXObject(\'Msxml2.XMLHTTP\')';
	    } catch (e) {
	        try {
	            new ActiveXObject("Microsoft.XMLHTTP");
	            fnStr = 'ActiveXObject(\'Microsoft.XMLHTTP\')'
	        } catch (e) {
	        }
	    }
	    var creatAjaxRequest = new Function('return new ' + fnStr);


	    /**
	     * 将json参数转化成适合ajax提交的参数列表
	     * @param json
	     */
	    function json2str(json) {
	        var strArr = [];
	        for (var i in json) {
	            //忽略默认的几个参数
	            if(i=="method" || i=="timeout" || i=="async" || i=="dataType" || i=="callback") continue;
	            //忽略控制
	            if(json[i] == undefined || json[i] == null) continue;
	            //传递过来的对象和函数不在提交之列
	            if (!((typeof json[i]).toLowerCase() == "function" || (typeof json[i]).toLowerCase() == "object")) {
	                strArr.push( encodeURIComponent(i) + "="+encodeURIComponent(json[i]) );
	            } else if (utils.isArray(json[i])) {
	            //支持传数组内容
	                for(var j = 0; j < json[i].length; j++) {
	                    strArr.push( encodeURIComponent(i) + "[]="+encodeURIComponent(json[i][j]) );
	                }
	            }
	        }
	        return strArr.join("&");
	    }

	    function doAjax(url, ajaxOptions) {
	        var xhr = creatAjaxRequest(),
	        //是否超时
	            timeIsOut = false,
	        //默认参数
	            defaultAjaxOptions = {
	                method:"POST",
	                timeout:5000,
	                async:true,
	                data:{},//需要传递对象的话只能覆盖
	                onsuccess:function() {
	                },
	                onerror:function() {
	                }
	            };

	        if (typeof url === "object") {
	            ajaxOptions = url;
	            url = ajaxOptions.url;
	        }
	        if (!xhr || !url) return;
	        var ajaxOpts = ajaxOptions ? utils.extend(defaultAjaxOptions,ajaxOptions) : defaultAjaxOptions;

	        var submitStr = json2str(ajaxOpts);  // { name:"Jim",city:"Beijing" } --> "name=Jim&city=Beijing"
	        //如果用户直接通过data参数传递json对象过来，则也要将此json对象转化为字符串
	        if (!utils.isEmptyObject(ajaxOpts.data)){
	            submitStr += (submitStr? "&":"") + json2str(ajaxOpts.data);
	        }
	        //超时检测
	        var timerID = setTimeout(function() {
	            if (xhr.readyState != 4) {
	                timeIsOut = true;
	                xhr.abort();
	                clearTimeout(timerID);
	            }
	        }, ajaxOpts.timeout);

	        var method = ajaxOpts.method.toUpperCase();
	        var str = url + (url.indexOf("?")==-1?"?":"&") + (method=="POST"?"":submitStr+ "&noCache=" + +new Date);
	        xhr.open(method, str, ajaxOpts.async);
	        xhr.onreadystatechange = function() {
	            if (xhr.readyState == 4) {
	                if (!timeIsOut && xhr.status == 200) {
	                    ajaxOpts.onsuccess(xhr);
	                } else {
	                    ajaxOpts.onerror(xhr);
	                }
	            }
	        };
	        if (method == "POST") {
	            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
	            xhr.send(submitStr);
	        } else {
	            xhr.send(null);
	        }
	    }

	    function doJsonp(url, opts) {

	        var successhandler = opts.onsuccess || function(){},
	            scr = document.createElement('SCRIPT'),
	            options = opts || {},
	            charset = options['charset'],
	            callbackField = options['jsonp'] || 'callback',
	            callbackFnName,
	            timeOut = options['timeOut'] || 0,
	            timer,
	            reg = new RegExp('(\\?|&)' + callbackField + '=([^&]*)'),
	            matches;

	        if (utils.isFunction(successhandler)) {
	            callbackFnName = 'bd__editor__' + Math.floor(Math.random() * 2147483648).toString(36);
	            window[callbackFnName] = getCallBack(0);
	        } else if(utils.isString(successhandler)){
	            callbackFnName = successhandler;
	        } else {
	            if (matches = reg.exec(url)) {
	                callbackFnName = matches[2];
	            }
	        }

	        url = url.replace(reg, '\x241' + callbackField + '=' + callbackFnName);

	        if (url.search(reg) < 0) {
	            url += (url.indexOf('?') < 0 ? '?' : '&') + callbackField + '=' + callbackFnName;
	        }

	        var queryStr = json2str(opts);  // { name:"Jim",city:"Beijing" } --> "name=Jim&city=Beijing"
	        //如果用户直接通过data参数传递json对象过来，则也要将此json对象转化为字符串
	        if (!utils.isEmptyObject(opts.data)){
	            queryStr += (queryStr? "&":"") + json2str(opts.data);
	        }
	        if (queryStr) {
	            url = url.replace(/\?/, '?' + queryStr + '&');
	        }

	        scr.onerror = getCallBack(1);
	        if( timeOut ){
	            timer = setTimeout(getCallBack(1), timeOut);
	        }
	        createScriptTag(scr, url, charset);

	        function createScriptTag(scr, url, charset) {
	            scr.setAttribute('type', 'text/javascript');
	            scr.setAttribute('defer', 'defer');
	            charset && scr.setAttribute('charset', charset);
	            scr.setAttribute('src', url);
	            document.getElementsByTagName('head')[0].appendChild(scr);
	        }

	        function getCallBack(onTimeOut){
	            return function(){
	                try {
	                    if(onTimeOut){
	                        options.onerror && options.onerror();
	                    }else{
	                        try{
	                            clearTimeout(timer);
	                            successhandler.apply(window, arguments);
	                        } catch (e){}
	                    }
	                } catch (exception) {
	                    options.onerror && options.onerror.call(window, exception);
	                } finally {
	                    options.oncomplete && options.oncomplete.apply(window, arguments);
	                    scr.parentNode && scr.parentNode.removeChild(scr);
	                    window[callbackFnName] = null;
	                    try {
	                        delete window[callbackFnName];
	                    }catch(e){}
	                }
	            }
	        }
	    }

	    return {
	        /**
	         * 根据给定的参数项，向指定的url发起一个ajax请求。 ajax请求完成后，会根据请求结果调用相应回调： 如果请求
	         * 成功， 则调用onsuccess回调， 失败则调用 onerror 回调
	         * @method request
	         * @param { URLString } url ajax请求的url地址
	         * @param { Object } ajaxOptions ajax请求选项的键值对，支持的选项如下：
	         * @example
	         * ```javascript
	         * //向sayhello.php发起一个异步的Ajax GET请求, 请求超时时间为10s， 请求完成后执行相应的回调。
	         * UE.ajax.requeset( 'sayhello.php', {
	         *
	         *     //请求方法。可选值： 'GET', 'POST'，默认值是'POST'
	         *     method: 'GET',
	         *
	         *     //超时时间。 默认为5000， 单位是ms
	         *     timeout: 10000,
	         *
	         *     //是否是异步请求。 true为异步请求， false为同步请求
	         *     async: true,
	         *
	         *     //请求携带的数据。如果请求为GET请求， data会经过stringify后附加到请求url之后。
	         *     data: {
	         *         name: 'ueditor'
	         *     },
	         *
	         *     //请求成功后的回调， 该回调接受当前的XMLHttpRequest对象作为参数。
	         *     onsuccess: function ( xhr ) {
	         *         console.log( xhr.responseText );
	         *     },
	         *
	         *     //请求失败或者超时后的回调。
	         *     onerror: function ( xhr ) {
	         *          alert( 'Ajax请求失败' );
	         *     }
	         *
	         * } );
	         * ```
	         */

	        /**
	         * 根据给定的参数项发起一个ajax请求， 参数项里必须包含一个url地址。 ajax请求完成后，会根据请求结果调用相应回调： 如果请求
	         * 成功， 则调用onsuccess回调， 失败则调用 onerror 回调。
	         * @method request
	         * @warning 如果在参数项里未提供一个key为“url”的地址值，则该请求将直接退出。
	         * @param { Object } ajaxOptions ajax请求选项的键值对，支持的选项如下：
	         * @example
	         * ```javascript
	         *
	         * //向sayhello.php发起一个异步的Ajax POST请求, 请求超时时间为5s， 请求完成后不执行任何回调。
	         * UE.ajax.requeset( 'sayhello.php', {
	         *
	         *     //请求的地址， 该项是必须的。
	         *     url: 'sayhello.php'
	         *
	         * } );
	         * ```
	         */
			request:function(url, opts) {
	            if (opts && opts.dataType == 'jsonp') {
	                doJsonp(url, opts);
	            } else {
	                doAjax(url, opts);
	            }
			},
	        getJSONP:function(url, data, fn) {
	            var opts = {
	                'data': data,
	                'oncomplete': fn
	            };
	            doJsonp(url, opts);
			}
		};


	}();


	// core/filterword.js
	/**
	 * UE过滤word的静态方法
	 * @file
	 */

	/**
	 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
	 * @module UE
	 */


	/**
	 * 根据传入html字符串过滤word
	 * @module UE
	 * @since 1.2.6.1
	 * @method filterWord
	 * @param { String } html html字符串
	 * @return { String } 已过滤后的结果字符串
	 * @example
	 * ```javascript
	 * UE.filterWord(html);
	 * ```
	 */
	var filterWord = UE.filterWord = function () {

	    //是否是word过来的内容
	    function isWordDocument( str ) {
	        return /(class="?Mso|style="[^"]*\bmso\-|w:WordDocument|<(v|o):|lang=)/ig.test( str );
	    }
	    //去掉小数
	    function transUnit( v ) {
	        v = v.replace( /[\d.]+\w+/g, function ( m ) {
	            return utils.transUnitToPx(m);
	        } );
	        return v;
	    }

	    function filterPasteWord( str ) {
	        return str.replace(/[\t\r\n]+/g,' ')
	                .replace( /<!--[\s\S]*?-->/ig, "" )
	                //转换图片
	                .replace(/<v:shape [^>]*>[\s\S]*?.<\/v:shape>/gi,function(str){
	                    //opera能自己解析出image所这里直接返回空
	                    if(browser.opera){
	                        return '';
	                    }
	                    try{
	                        //有可能是bitmap占为图，无用，直接过滤掉，主要体现在粘贴excel表格中
	                        if(/Bitmap/i.test(str)){
	                            return '';
	                        }
	                        var width = str.match(/width:([ \d.]*p[tx])/i)[1],
	                            height = str.match(/height:([ \d.]*p[tx])/i)[1],
	                            src =  str.match(/src=\s*"([^"]*)"/i)[1];
	                        return '<img width="'+ transUnit(width) +'" height="'+transUnit(height) +'" src="' + src + '" />';
	                    } catch(e){
	                        return '';
	                    }
	                })
	                //针对wps添加的多余标签处理
	                .replace(/<\/?div[^>]*>/g,'')
	                //去掉多余的属性
	                .replace( /v:\w+=(["']?)[^'"]+\1/g, '' )
	                .replace( /<(!|script[^>]*>.*?<\/script(?=[>\s])|\/?(\?xml(:\w+)?|xml|meta|link|style|\w+:\w+)(?=[\s\/>]))[^>]*>/gi, "" )
	                .replace( /<p [^>]*class="?MsoHeading"?[^>]*>(.*?)<\/p>/gi, "<p><strong>$1</strong></p>" )
	                //去掉多余的属性
	                .replace( /\s+(class|lang|align)\s*=\s*(['"]?)([\w-]+)\2/ig, function(str,name,marks,val){
	                    //保留list的标示
	                    return name == 'class' && val == 'MsoListParagraph' ? str : ''
	                })
	                //清除多余的font/span不能匹配&nbsp;有可能是空格
	                .replace( /<(font|span)[^>]*>(\s*)<\/\1>/gi, function(a,b,c){
	                    return c.replace(/[\t\r\n ]+/g,' ')
	                })
	                //处理style的问题
	                .replace( /(<[a-z][^>]*)\sstyle=(["'])([^\2]*?)\2/gi, function( str, tag, tmp, style ) {
	                    var n = [],
	                        s = style.replace( /^\s+|\s+$/, '' )
	                            .replace(/&#39;/g,'\'')
	                            .replace( /&quot;/gi, "'" )
	                            .replace(/[\d.]+(cm|pt)/g,function(str){
	                                return utils.transUnitToPx(str)
	                            })
	                            .split( /;\s*/g );

	                    for ( var i = 0,v; v = s[i];i++ ) {

	                        var name, value,
	                            parts = v.split( ":" );

	                        if ( parts.length == 2 ) {
	                            name = parts[0].toLowerCase();
	                            value = parts[1].toLowerCase();
	                            if(/^(background)\w*/.test(name) && value.replace(/(initial|\s)/g,'').length == 0
	                                ||
	                                /^(margin)\w*/.test(name) && /^0\w+$/.test(value)
	                            ){
	                                continue;
	                            }

	                            switch ( name ) {
	                                case "mso-padding-alt":
	                                case "mso-padding-top-alt":
	                                case "mso-padding-right-alt":
	                                case "mso-padding-bottom-alt":
	                                case "mso-padding-left-alt":
	                                case "mso-margin-alt":
	                                case "mso-margin-top-alt":
	                                case "mso-margin-right-alt":
	                                case "mso-margin-bottom-alt":
	                                case "mso-margin-left-alt":
	                                //ie下会出现挤到一起的情况
	                               //case "mso-table-layout-alt":
	                                case "mso-height":
	                                case "mso-width":
	                                case "mso-vertical-align-alt":
	                                    //trace:1819 ff下会解析出padding在table上
	                                    if(!/<table/.test(tag))
	                                        n[i] = name.replace( /^mso-|-alt$/g, "" ) + ":" + transUnit( value );
	                                    continue;
	                                case "horiz-align":
	                                    n[i] = "text-align:" + value;
	                                    continue;

	                                case "vert-align":
	                                    n[i] = "vertical-align:" + value;
	                                    continue;

	                                case "font-color":
	                                case "mso-foreground":
	                                    n[i] = "color:" + value;
	                                    continue;

	                                case "mso-background":
	                                case "mso-highlight":
	                                    n[i] = "background:" + value;
	                                    continue;

	                                case "mso-default-height":
	                                    n[i] = "min-height:" + transUnit( value );
	                                    continue;

	                                case "mso-default-width":
	                                    n[i] = "min-width:" + transUnit( value );
	                                    continue;

	                                case "mso-padding-between-alt":
	                                    n[i] = "border-collapse:separate;border-spacing:" + transUnit( value );
	                                    continue;

	                                case "text-line-through":
	                                    if ( (value == "single") || (value == "double") ) {
	                                        n[i] = "text-decoration:line-through";
	                                    }
	                                    continue;
	                                case "mso-zero-height":
	                                    if ( value == "yes" ) {
	                                        n[i] = "display:none";
	                                    }
	                                    continue;
//	                                case 'background':
//	                                    break;
	                                case 'margin':
	                                    if ( !/[1-9]/.test( value ) ) {
	                                        continue;
	                                    }

	                            }

	                            if ( /^(mso|column|font-emph|lang|layout|line-break|list-image|nav|panose|punct|row|ruby|sep|size|src|tab-|table-border|text-(?:decor|trans)|top-bar|version|vnd|word-break)/.test( name )
	                                ||
	                                /text\-indent|padding|margin/.test(name) && /\-[\d.]+/.test(value)
	                            ) {
	                                continue;
	                            }

	                            n[i] = name + ":" + parts[1];
	                        }
	                    }
	                    return tag + (n.length ? ' style="' + n.join( ';').replace(/;{2,}/g,';') + '"' : '');
	                })


	    }

	    return function ( html ) {
	        return (isWordDocument( html ) ? filterPasteWord( html ) : html);
	    };
	}();

	// core/node.js
	/**
	 * 编辑器模拟的节点类
	 * @file
	 * @module UE
	 * @class uNode
	 * @since 1.2.6.1
	 */

	/**
	 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
	 * @unfile
	 * @module UE
	 */

	(function () {

	    /**
	     * 编辑器模拟的节点类
	     * @unfile
	     * @module UE
	     * @class uNode
	     */

	    /**
	     * 通过一个键值对，创建一个uNode对象
	     * @constructor
	     * @param { Object } attr 传入要创建的uNode的初始属性
	     * @example
	     * ```javascript
	     * var node = new uNode({
	     *     type:'element',
	     *     tagName:'span',
	     *     attrs:{style:'font-size:14px;'}
	     * }
	     * ```
	     */
	    var uNode = UE.uNode = function (obj) {
	        this.type = obj.type;
	        this.data = obj.data;
	        this.tagName = obj.tagName;
	        this.parentNode = obj.parentNode;
	        this.attrs = obj.attrs || {};
	        this.children = obj.children;
	    };

	    var notTransAttrs = {
	        'href':1,
	        'src':1,
	        '_src':1,
	        '_href':1,
	        'cdata_data':1
	    };

	    var notTransTagName = {
	        style:1,
	        script:1
	    };

	    var indentChar = '    ',
	        breakChar = '\n';

	    function insertLine(arr, current, begin) {
	        arr.push(breakChar);
	        return current + (begin ? 1 : -1);
	    }

	    function insertIndent(arr, current) {
	        //插入缩进
	        for (var i = 0; i < current; i++) {
	            arr.push(indentChar);
	        }
	    }

	    //创建uNode的静态方法
	    //支持标签和html
	    uNode.createElement = function (html) {
	        if (/[<>]/.test(html)) {
	            return UE.htmlparser(html).children[0]
	        } else {
	            return new uNode({
	                type:'element',
	                children:[],
	                tagName:html
	            })
	        }
	    };
	    uNode.createText = function (data,noTrans) {
	        return new UE.uNode({
	            type:'text',
	            'data':noTrans ? data : utils.unhtml(data || '')
	        })
	    };
	    function nodeToHtml(node, arr, formatter, current) {
	        switch (node.type) {
	            case 'root':
	                for (var i = 0, ci; ci = node.children[i++];) {
	                    //插入新行
	                    if (formatter && ci.type == 'element' && !dtd.$inlineWithA[ci.tagName] && i > 1) {
	                        insertLine(arr, current, true);
	                        insertIndent(arr, current)
	                    }
	                    nodeToHtml(ci, arr, formatter, current)
	                }
	                break;
	            case 'text':
	                isText(node, arr);
	                break;
	            case 'element':
	                isElement(node, arr, formatter, current);
	                break;
	            case 'comment':
	                isComment(node, arr, formatter);
	        }
	        return arr;
	    }

	    function isText(node, arr) {
	        if(node.parentNode.tagName == 'pre'){
	            //源码模式下输入html标签，不能做转换处理，直接输出
	            arr.push(node.data)
	        }else{
	            arr.push(notTransTagName[node.parentNode.tagName] ? utils.html(node.data) : node.data.replace(/[ ]{2}/g,' &nbsp;'))
	        }

	    }

	    function isElement(node, arr, formatter, current) {
	        var attrhtml = '';
	        if (node.attrs) {
	            attrhtml = [];
	            var attrs = node.attrs;
	            for (var a in attrs) {
	                //这里就针对
	                //<p>'<img src='http://nsclick.baidu.com/u.gif?&asdf=\"sdf&asdfasdfs;asdf'></p>
	                //这里边的\"做转换，要不用innerHTML直接被截断了，属性src
	                //有可能做的不够
	                attrhtml.push(a + (attrs[a] !== undefined ? '="' + (notTransAttrs[a] ? utils.html(attrs[a]).replace(/["]/g, function (a) {
	                   return '&quot;'
	                }) : utils.unhtml(attrs[a])) + '"' : ''))
	            }
	            attrhtml = attrhtml.join(' ');
	        }
	        arr.push('<' + node.tagName +
	            (attrhtml ? ' ' + attrhtml  : '') +
	            (dtd.$empty[node.tagName] ? '\/' : '' ) + '>'
	        );
	        //插入新行
	        if (formatter  &&  !dtd.$inlineWithA[node.tagName] && node.tagName != 'pre') {
	            if(node.children && node.children.length){
	                current = insertLine(arr, current, true);
	                insertIndent(arr, current)
	            }

	        }
	        if (node.children && node.children.length) {
	            for (var i = 0, ci; ci = node.children[i++];) {
	                if (formatter && ci.type == 'element' &&  !dtd.$inlineWithA[ci.tagName] && i > 1) {
	                    insertLine(arr, current);
	                    insertIndent(arr, current)
	                }
	                nodeToHtml(ci, arr, formatter, current)
	            }
	        }
	        if (!dtd.$empty[node.tagName]) {
	            if (formatter && !dtd.$inlineWithA[node.tagName]  && node.tagName != 'pre') {

	                if(node.children && node.children.length){
	                    current = insertLine(arr, current);
	                    insertIndent(arr, current)
	                }
	            }
	            arr.push('<\/' + node.tagName + '>');
	        }

	    }

	    function isComment(node, arr) {
	        arr.push('<!--' + node.data + '-->');
	    }

	    function getNodeById(root, id) {
	        var node;
	        if (root.type == 'element' && root.getAttr('id') == id) {
	            return root;
	        }
	        if (root.children && root.children.length) {
	            for (var i = 0, ci; ci = root.children[i++];) {
	                if (node = getNodeById(ci, id)) {
	                    return node;
	                }
	            }
	        }
	    }

	    function getNodesByTagName(node, tagName, arr) {
	        if (node.type == 'element' && node.tagName == tagName) {
	            arr.push(node);
	        }
	        if (node.children && node.children.length) {
	            for (var i = 0, ci; ci = node.children[i++];) {
	                getNodesByTagName(ci, tagName, arr)
	            }
	        }
	    }
	    function nodeTraversal(root,fn){
	        if(root.children && root.children.length){
	            for(var i= 0,ci;ci=root.children[i];){
	                nodeTraversal(ci,fn);
	                //ci被替换的情况，这里就不再走 fn了
	                if(ci.parentNode ){
	                    if(ci.children && ci.children.length){
	                        fn(ci)
	                    }
	                    if(ci.parentNode) i++
	                }
	            }
	        }else{
	            fn(root)
	        }

	    }
	    uNode.prototype = {

	        /**
	         * 当前节点对象，转换成html文本
	         * @method toHtml
	         * @return { String } 返回转换后的html字符串
	         * @example
	         * ```javascript
	         * node.toHtml();
	         * ```
	         */

	        /**
	         * 当前节点对象，转换成html文本
	         * @method toHtml
	         * @param { Boolean } formatter 是否格式化返回值
	         * @return { String } 返回转换后的html字符串
	         * @example
	         * ```javascript
	         * node.toHtml( true );
	         * ```
	         */
	        toHtml:function (formatter) {
	            var arr = [];
	            nodeToHtml(this, arr, formatter, 0);
	            return arr.join('')
	        },

	        /**
	         * 获取节点的html内容
	         * @method innerHTML
	         * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
	         * @return { String } 返回节点的html内容
	         * @example
	         * ```javascript
	         * var htmlstr = node.innerHTML();
	         * ```
	         */

	        /**
	         * 设置节点的html内容
	         * @method innerHTML
	         * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
	         * @param { String } htmlstr 传入要设置的html内容
	         * @return { UE.uNode } 返回节点本身
	         * @example
	         * ```javascript
	         * node.innerHTML('<span>text</span>');
	         * ```
	         */
	        innerHTML:function (htmlstr) {
	            if (this.type != 'element' || dtd.$empty[this.tagName]) {
	                return this;
	            }
	            if (utils.isString(htmlstr)) {
	                if(this.children){
	                    for (var i = 0, ci; ci = this.children[i++];) {
	                        ci.parentNode = null;
	                    }
	                }
	                this.children = [];
	                var tmpRoot = UE.htmlparser(htmlstr);
	                for (var i = 0, ci; ci = tmpRoot.children[i++];) {
	                    this.children.push(ci);
	                    ci.parentNode = this;
	                }
	                return this;
	            } else {
	                var tmpRoot = new UE.uNode({
	                    type:'root',
	                    children:this.children
	                });
	                return tmpRoot.toHtml();
	            }
	        },

	        /**
	         * 获取节点的纯文本内容
	         * @method innerText
	         * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
	         * @return { String } 返回节点的存文本内容
	         * @example
	         * ```javascript
	         * var textStr = node.innerText();
	         * ```
	         */

	        /**
	         * 设置节点的纯文本内容
	         * @method innerText
	         * @warning 假如节点的type不是'element'，或节点的标签名称不在dtd列表里，直接返回当前节点
	         * @param { String } textStr 传入要设置的文本内容
	         * @return { UE.uNode } 返回节点本身
	         * @example
	         * ```javascript
	         * node.innerText('<span>text</span>');
	         * ```
	         */
	        innerText:function (textStr,noTrans) {
	            if (this.type != 'element' || dtd.$empty[this.tagName]) {
	                return this;
	            }
	            if (textStr) {
	                if(this.children){
	                    for (var i = 0, ci; ci = this.children[i++];) {
	                        ci.parentNode = null;
	                    }
	                }
	                this.children = [];
	                this.appendChild(uNode.createText(textStr,noTrans));
	                return this;
	            } else {
	                return this.toHtml().replace(/<[^>]+>/g, '');
	            }
	        },

	        /**
	         * 获取当前对象的data属性
	         * @method getData
	         * @return { Object } 若节点的type值是elemenet，返回空字符串，否则返回节点的data属性
	         * @example
	         * ```javascript
	         * node.getData();
	         * ```
	         */
	        getData:function () {
	            if (this.type == 'element')
	                return '';
	            return this.data
	        },

	        /**
	         * 获取当前节点下的第一个子节点
	         * @method firstChild
	         * @return { UE.uNode } 返回第一个子节点
	         * @example
	         * ```javascript
	         * node.firstChild(); //返回第一个子节点
	         * ```
	         */
	        firstChild:function () {
//	            if (this.type != 'element' || dtd.$empty[this.tagName]) {
//	                return this;
//	            }
	            return this.children ? this.children[0] : null;
	        },

	        /**
	         * 获取当前节点下的最后一个子节点
	         * @method lastChild
	         * @return { UE.uNode } 返回最后一个子节点
	         * @example
	         * ```javascript
	         * node.lastChild(); //返回最后一个子节点
	         * ```
	         */
	        lastChild:function () {
//	            if (this.type != 'element' || dtd.$empty[this.tagName] ) {
//	                return this;
//	            }
	            return this.children ? this.children[this.children.length - 1] : null;
	        },

	        /**
	         * 获取和当前节点有相同父亲节点的前一个节点
	         * @method previousSibling
	         * @return { UE.uNode } 返回前一个节点
	         * @example
	         * ```javascript
	         * node.children[2].previousSibling(); //返回子节点node.children[1]
	         * ```
	         */
	        previousSibling : function(){
	            var parent = this.parentNode;
	            for (var i = 0, ci; ci = parent.children[i]; i++) {
	                if (ci === this) {
	                   return i == 0 ? null : parent.children[i-1];
	                }
	            }

	        },

	        /**
	         * 获取和当前节点有相同父亲节点的后一个节点
	         * @method nextSibling
	         * @return { UE.uNode } 返回后一个节点,找不到返回null
	         * @example
	         * ```javascript
	         * node.children[2].nextSibling(); //如果有，返回子节点node.children[3]
	         * ```
	         */
	        nextSibling : function(){
	            var parent = this.parentNode;
	            for (var i = 0, ci; ci = parent.children[i++];) {
	                if (ci === this) {
	                    return parent.children[i];
	                }
	            }
	        },

	        /**
	         * 用新的节点替换当前节点
	         * @method replaceChild
	         * @param { UE.uNode } target 要替换成该节点参数
	         * @param { UE.uNode } source 要被替换掉的节点
	         * @return { UE.uNode } 返回替换之后的节点对象
	         * @example
	         * ```javascript
	         * node.replaceChild(newNode, childNode); //用newNode替换childNode,childNode是node的子节点
	         * ```
	         */
	        replaceChild:function (target, source) {
	            if (this.children) {
	                if(target.parentNode){
	                    target.parentNode.removeChild(target);
	                }
	                for (var i = 0, ci; ci = this.children[i]; i++) {
	                    if (ci === source) {
	                        this.children.splice(i, 1, target);
	                        source.parentNode = null;
	                        target.parentNode = this;
	                        return target;
	                    }
	                }
	            }
	        },

	        /**
	         * 在节点的子节点列表最后位置插入一个节点
	         * @method appendChild
	         * @param { UE.uNode } node 要插入的节点
	         * @return { UE.uNode } 返回刚插入的子节点
	         * @example
	         * ```javascript
	         * node.appendChild( newNode ); //在node内插入子节点newNode
	         * ```
	         */
	        appendChild:function (node) {
	            if (this.type == 'root' || (this.type == 'element' && !dtd.$empty[this.tagName])) {
	                if (!this.children) {
	                    this.children = []
	                }
	                if(node.parentNode){
	                    node.parentNode.removeChild(node);
	                }
	                for (var i = 0, ci; ci = this.children[i]; i++) {
	                    if (ci === node) {
	                        this.children.splice(i, 1);
	                        break;
	                    }
	                }
	                this.children.push(node);
	                node.parentNode = this;
	                return node;
	            }


	        },

	        /**
	         * 在传入节点的前面插入一个节点
	         * @method insertBefore
	         * @param { UE.uNode } target 要插入的节点
	         * @param { UE.uNode } source 在该参数节点前面插入
	         * @return { UE.uNode } 返回刚插入的子节点
	         * @example
	         * ```javascript
	         * node.parentNode.insertBefore(newNode, node); //在node节点后面插入newNode
	         * ```
	         */
	        insertBefore:function (target, source) {
	            if (this.children) {
	                if(target.parentNode){
	                    target.parentNode.removeChild(target);
	                }
	                for (var i = 0, ci; ci = this.children[i]; i++) {
	                    if (ci === source) {
	                        this.children.splice(i, 0, target);
	                        target.parentNode = this;
	                        return target;
	                    }
	                }

	            }
	        },

	        /**
	         * 在传入节点的后面插入一个节点
	         * @method insertAfter
	         * @param { UE.uNode } target 要插入的节点
	         * @param { UE.uNode } source 在该参数节点后面插入
	         * @return { UE.uNode } 返回刚插入的子节点
	         * @example
	         * ```javascript
	         * node.parentNode.insertAfter(newNode, node); //在node节点后面插入newNode
	         * ```
	         */
	        insertAfter:function (target, source) {
	            if (this.children) {
	                if(target.parentNode){
	                    target.parentNode.removeChild(target);
	                }
	                for (var i = 0, ci; ci = this.children[i]; i++) {
	                    if (ci === source) {
	                        this.children.splice(i + 1, 0, target);
	                        target.parentNode = this;
	                        return target;
	                    }

	                }
	            }
	        },

	        /**
	         * 从当前节点的子节点列表中，移除节点
	         * @method removeChild
	         * @param { UE.uNode } node 要移除的节点引用
	         * @param { Boolean } keepChildren 是否保留移除节点的子节点，若传入true，自动把移除节点的子节点插入到移除的位置
	         * @return { * } 返回刚移除的子节点
	         * @example
	         * ```javascript
	         * node.removeChild(childNode,true); //在node的子节点列表中移除child节点，并且吧child的子节点插入到移除的位置
	         * ```
	         */
	        removeChild:function (node,keepChildren) {
	            if (this.children) {
	                for (var i = 0, ci; ci = this.children[i]; i++) {
	                    if (ci === node) {
	                        this.children.splice(i, 1);
	                        ci.parentNode = null;
	                        if(keepChildren && ci.children && ci.children.length){
	                            for(var j= 0,cj;cj=ci.children[j];j++){
	                                this.children.splice(i+j,0,cj);
	                                cj.parentNode = this;

	                            }
	                        }
	                        return ci;
	                    }
	                }
	            }
	        },

	        /**
	         * 获取当前节点所代表的元素属性，即获取attrs对象下的属性值
	         * @method getAttr
	         * @param { String } attrName 要获取的属性名称
	         * @return { * } 返回attrs对象下的属性值
	         * @example
	         * ```javascript
	         * node.getAttr('title');
	         * ```
	         */
	        getAttr:function (attrName) {
	            return this.attrs && this.attrs[attrName.toLowerCase()]
	        },

	        /**
	         * 设置当前节点所代表的元素属性，即设置attrs对象下的属性值
	         * @method setAttr
	         * @param { String } attrName 要设置的属性名称
	         * @param { * } attrVal 要设置的属性值，类型视设置的属性而定
	         * @return { * } 返回attrs对象下的属性值
	         * @example
	         * ```javascript
	         * node.setAttr('title','标题');
	         * ```
	         */
	        setAttr:function (attrName, attrVal) {
	            if (!attrName) {
	                delete this.attrs;
	                return;
	            }
	            if(!this.attrs){
	                this.attrs = {};
	            }
	            if (utils.isObject(attrName)) {
	                for (var a in attrName) {
	                    if (!attrName[a]) {
	                        delete this.attrs[a]
	                    } else {
	                        this.attrs[a.toLowerCase()] = attrName[a];
	                    }
	                }
	            } else {
	                if (!attrVal) {
	                    delete this.attrs[attrName]
	                } else {
	                    this.attrs[attrName.toLowerCase()] = attrVal;
	                }

	            }
	        },

	        /**
	         * 获取当前节点在父节点下的位置索引
	         * @method getIndex
	         * @return { Number } 返回索引数值，如果没有父节点，返回-1
	         * @example
	         * ```javascript
	         * node.getIndex();
	         * ```
	         */
	        getIndex:function(){
	            var parent = this.parentNode;
	            for(var i= 0,ci;ci=parent.children[i];i++){
	                if(ci === this){
	                    return i;
	                }
	            }
	            return -1;
	        },

	        /**
	         * 在当前节点下，根据id查找节点
	         * @method getNodeById
	         * @param { String } id 要查找的id
	         * @return { UE.uNode } 返回找到的节点
	         * @example
	         * ```javascript
	         * node.getNodeById('textId');
	         * ```
	         */
	        getNodeById:function (id) {
	            var node;
	            if (this.children && this.children.length) {
	                for (var i = 0, ci; ci = this.children[i++];) {
	                    if (node = getNodeById(ci, id)) {
	                        return node;
	                    }
	                }
	            }
	        },

	        /**
	         * 在当前节点下，根据元素名称查找节点列表
	         * @method getNodesByTagName
	         * @param { String } tagNames 要查找的元素名称
	         * @return { Array } 返回找到的节点列表
	         * @example
	         * ```javascript
	         * node.getNodesByTagName('span');
	         * ```
	         */
	        getNodesByTagName:function (tagNames) {
	            tagNames = utils.trim(tagNames).replace(/[ ]{2,}/g, ' ').split(' ');
	            var arr = [], me = this;
	            utils.each(tagNames, function (tagName) {
	                if (me.children && me.children.length) {
	                    for (var i = 0, ci; ci = me.children[i++];) {
	                        getNodesByTagName(ci, tagName, arr)
	                    }
	                }
	            });
	            return arr;
	        },

	        /**
	         * 根据样式名称，获取节点的样式值
	         * @method getStyle
	         * @param { String } name 要获取的样式名称
	         * @return { String } 返回样式值
	         * @example
	         * ```javascript
	         * node.getStyle('font-size');
	         * ```
	         */
	        getStyle:function (name) {
	            var cssStyle = this.getAttr('style');
	            if (!cssStyle) {
	                return ''
	            }
	            var reg = new RegExp('(^|;)\\s*' + name + ':([^;]+)','i');
	            var match = cssStyle.match(reg);
	            if (match && match[0]) {
	                return match[2]
	            }
	            return '';
	        },

	        /**
	         * 给节点设置样式
	         * @method setStyle
	         * @param { String } name 要设置的的样式名称
	         * @param { String } val 要设置的的样值
	         * @example
	         * ```javascript
	         * node.setStyle('font-size', '12px');
	         * ```
	         */
	        setStyle:function (name, val) {
	            function exec(name, val) {
	                var reg = new RegExp('(^|;)\\s*' + name + ':([^;]+;?)', 'gi');
	                cssStyle = cssStyle.replace(reg, '$1');
	                if (val) {
	                    cssStyle = name + ':' + utils.unhtml(val) + ';' + cssStyle
	                }

	            }

	            var cssStyle = this.getAttr('style');
	            if (!cssStyle) {
	                cssStyle = '';
	            }
	            if (utils.isObject(name)) {
	                for (var a in name) {
	                    exec(a, name[a])
	                }
	            } else {
	                exec(name, val)
	            }
	            this.setAttr('style', utils.trim(cssStyle))
	        },

	        /**
	         * 传入一个函数，递归遍历当前节点下的所有节点
	         * @method traversal
	         * @param { Function } fn 遍历到节点的时，传入节点作为参数，运行此函数
	         * @example
	         * ```javascript
	         * traversal(node, function(){
	         *     console.log(node.type);
	         * });
	         * ```
	         */
	        traversal:function(fn){
	            if(this.children && this.children.length){
	                nodeTraversal(this,fn);
	            }
	            return this;
	        }
	    }
	})();


	// core/htmlparser.js
	/**
	 * html字符串转换成uNode节点
	 * @file
	 * @module UE
	 * @since 1.2.6.1
	 */

	/**
	 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
	 * @unfile
	 * @module UE
	 */

	/**
	 * html字符串转换成uNode节点的静态方法
	 * @method htmlparser
	 * @param { String } htmlstr 要转换的html代码
	 * @param { Boolean } ignoreBlank 若设置为true，转换的时候忽略\n\r\t等空白字符
	 * @return { uNode } 给定的html片段转换形成的uNode对象
	 * @example
	 * ```javascript
	 * var root = UE.htmlparser('<p><b>htmlparser</b></p>', true);
	 * ```
	 */

	var htmlparser = UE.htmlparser = function (htmlstr,ignoreBlank) {
	    //todo 原来的方式  [^"'<>\/] 有\/就不能配对上 <TD vAlign=top background=../AAA.JPG> 这样的标签了
	    //先去掉了，加上的原因忘了，这里先记录
	    var re_tag = /<(?:(?:\/([^>]+)>)|(?:!--([\S|\s]*?)-->)|(?:([^\s\/<>]+)\s*((?:(?:"[^"]*")|(?:'[^']*')|[^"'<>])*)\/?>))/g,
	        re_attr = /([\w\-:.]+)(?:(?:\s*=\s*(?:(?:"([^"]*)")|(?:'([^']*)')|([^\s>]+)))|(?=\s|$))/g;

	    //ie下取得的html可能会有\n存在，要去掉，在处理replace(/[\t\r\n]*/g,'');代码高量的\n不能去除
	    var allowEmptyTags = {
	        b:1,code:1,i:1,u:1,strike:1,s:1,tt:1,strong:1,q:1,samp:1,em:1,span:1,
	        sub:1,img:1,sup:1,font:1,big:1,small:1,iframe:1,a:1,br:1,pre:1
	    };
	    htmlstr = htmlstr.replace(new RegExp(domUtils.fillChar, 'g'), '');
	    if(!ignoreBlank){
	        htmlstr = htmlstr.replace(new RegExp('[\\r\\t\\n'+(ignoreBlank?'':' ')+']*<\/?(\\w+)\\s*(?:[^>]*)>[\\r\\t\\n'+(ignoreBlank?'':' ')+']*','g'), function(a,b){
	            //br暂时单独处理
	            if(b && allowEmptyTags[b.toLowerCase()]){
	                return a.replace(/(^[\n\r]+)|([\n\r]+$)/g,'');
	            }
	            return a.replace(new RegExp('^[\\r\\n'+(ignoreBlank?'':' ')+']+'),'').replace(new RegExp('[\\r\\n'+(ignoreBlank?'':' ')+']+$'),'');
	        });
	    }

	    var notTransAttrs = {
	        'href':1,
	        'src':1
	    };

	    var uNode = UE.uNode,
	        needParentNode = {
	            'td':'tr',
	            'tr':['tbody','thead','tfoot'],
	            'tbody':'table',
	            'th':'tr',
	            'thead':'table',
	            'tfoot':'table',
	            'caption':'table',
	            'li':['ul', 'ol'],
	            'dt':'dl',
	            'dd':'dl',
	            'option':'select'
	        },
	        needChild = {
	            'ol':'li',
	            'ul':'li'
	        };

	    function text(parent, data) {

	        if(needChild[parent.tagName]){
	            var tmpNode = uNode.createElement(needChild[parent.tagName]);
	            parent.appendChild(tmpNode);
	            tmpNode.appendChild(uNode.createText(data));
	            parent = tmpNode;
	        }else{

	            parent.appendChild(uNode.createText(data));
	        }
	    }

	    function element(parent, tagName, htmlattr) {
	        var needParentTag;
	        if (needParentTag = needParentNode[tagName]) {
	            var tmpParent = parent,hasParent;
	            while(tmpParent.type != 'root'){
	                if(utils.isArray(needParentTag) ? utils.indexOf(needParentTag, tmpParent.tagName) != -1 : needParentTag == tmpParent.tagName){
	                    parent = tmpParent;
	                    hasParent = true;
	                    break;
	                }
	                tmpParent = tmpParent.parentNode;
	            }
	            if(!hasParent){
	                parent = element(parent, utils.isArray(needParentTag) ? needParentTag[0] : needParentTag)
	            }
	        }
	        //按dtd处理嵌套
//	        if(parent.type != 'root' && !dtd[parent.tagName][tagName])
//	            parent = parent.parentNode;
	        var elm = new uNode({
	            parentNode:parent,
	            type:'element',
	            tagName:tagName.toLowerCase(),
	            //是自闭合的处理一下
	            children:dtd.$empty[tagName] ? null : []
	        });
	        //如果属性存在，处理属性
	        if (htmlattr) {
	            var attrs = {}, match;
	            while (match = re_attr.exec(htmlattr)) {
	                attrs[match[1].toLowerCase()] = notTransAttrs[match[1].toLowerCase()] ? (match[2] || match[3] || match[4]) : utils.unhtml(match[2] || match[3] || match[4])
	            }
	            elm.attrs = attrs;
	        }
	        //trace:3970
//	        //如果parent下不能放elm
//	        if(dtd.$inline[parent.tagName] && dtd.$block[elm.tagName] && !dtd[parent.tagName][elm.tagName]){
//	            parent = parent.parentNode;
//	            elm.parentNode = parent;
//	        }
	        parent.children.push(elm);
	        //如果是自闭合节点返回父亲节点
	        return  dtd.$empty[tagName] ? parent : elm
	    }

	    function comment(parent, data) {
	        parent.children.push(new uNode({
	            type:'comment',
	            data:data,
	            parentNode:parent
	        }));
	    }

	    var match, currentIndex = 0, nextIndex = 0;
	    //设置根节点
	    var root = new uNode({
	        type:'root',
	        children:[]
	    });
	    var currentParent = root;

	    while (match = re_tag.exec(htmlstr)) {
	        currentIndex = match.index;
	        try{
	            if (currentIndex > nextIndex) {
	                //text node
	                text(currentParent, htmlstr.slice(nextIndex, currentIndex));
	            }
	            if (match[3]) {

	                if(dtd.$cdata[currentParent.tagName]){
	                    text(currentParent, match[0]);
	                }else{
	                    //start tag
	                    currentParent = element(currentParent, match[3].toLowerCase(), match[4]);
	                }


	            } else if (match[1]) {
	                if(currentParent.type != 'root'){
	                    if(dtd.$cdata[currentParent.tagName] && !dtd.$cdata[match[1]]){
	                        text(currentParent, match[0]);
	                    }else{
	                        var tmpParent = currentParent;
	                        while(currentParent.type == 'element' && currentParent.tagName != match[1].toLowerCase()){
	                            currentParent = currentParent.parentNode;
	                            if(currentParent.type == 'root'){
	                                currentParent = tmpParent;
	                                throw 'break'
	                            }
	                        }
	                        //end tag
	                        currentParent = currentParent.parentNode;
	                    }

	                }

	            } else if (match[2]) {
	                //comment
	                comment(currentParent, match[2])
	            }
	        }catch(e){}

	        nextIndex = re_tag.lastIndex;

	    }
	    //如果结束是文本，就有可能丢掉，所以这里手动判断一下
	    //例如 <li>sdfsdfsdf<li>sdfsdfsdfsdf
	    if (nextIndex < htmlstr.length) {
	        text(currentParent, htmlstr.slice(nextIndex));
	    }
	    return root;
	};


	// core/filternode.js
	/**
	 * UE过滤节点的静态方法
	 * @file
	 */

	/**
	 * UEditor公用空间，UEditor所有的功能都挂载在该空间下
	 * @module UE
	 */


	/**
	 * 根据传入节点和过滤规则过滤相应节点
	 * @module UE
	 * @since 1.2.6.1
	 * @method filterNode
	 * @param { Object } root 指定root节点
	 * @param { Object } rules 过滤规则json对象
	 * @example
	 * ```javascript
	 * UE.filterNode(root,editor.options.filterRules);
	 * ```
	 */
	var filterNode = UE.filterNode = function () {
	    function filterNode(node,rules){
	        switch (node.type) {
	            case 'text':
	                break;
	            case 'element':
	                var val;
	                if(val = rules[node.tagName]){
	                   if(val === '-'){
	                       node.parentNode.removeChild(node)
	                   }else if(utils.isFunction(val)){
	                       var parentNode = node.parentNode,
	                           index = node.getIndex();
	                       val(node);
	                       if(node.parentNode){
	                           if(node.children){
	                               for(var i = 0,ci;ci=node.children[i];){
	                                   filterNode(ci,rules);
	                                   if(ci.parentNode){
	                                       i++;
	                                   }
	                               }
	                           }
	                       }else{
	                           for(var i = index,ci;ci=parentNode.children[i];){
	                               filterNode(ci,rules);
	                               if(ci.parentNode){
	                                   i++;
	                               }
	                           }
	                       }


	                   }else{
	                       var attrs = val['$'];
	                       if(attrs && node.attrs){
	                           var tmpAttrs = {},tmpVal;
	                           for(var a in attrs){
	                               tmpVal = node.getAttr(a);
	                               //todo 只先对style单独处理
	                               if(a == 'style' && utils.isArray(attrs[a])){
	                                   var tmpCssStyle = [];
	                                   utils.each(attrs[a],function(v){
	                                       var tmp;
	                                       if(tmp = node.getStyle(v)){
	                                           tmpCssStyle.push(v + ':' + tmp);
	                                       }
	                                   });
	                                   tmpVal = tmpCssStyle.join(';')
	                               }
	                               if(tmpVal){
	                                   tmpAttrs[a] = tmpVal;
	                               }

	                           }
	                           node.attrs = tmpAttrs;
	                       }
	                       if(node.children){
	                           for(var i = 0,ci;ci=node.children[i];){
	                               filterNode(ci,rules);
	                               if(ci.parentNode){
	                                   i++;
	                               }
	                           }
	                       }
	                   }
	                }else{
	                    //如果不在名单里扣出子节点并删除该节点,cdata除外
	                    if(dtd.$cdata[node.tagName]){
	                        node.parentNode.removeChild(node)
	                    }else{
	                        var parentNode = node.parentNode,
	                            index = node.getIndex();
	                        node.parentNode.removeChild(node,true);
	                        for(var i = index,ci;ci=parentNode.children[i];){
	                            filterNode(ci,rules);
	                            if(ci.parentNode){
	                                i++;
	                            }
	                        }
	                    }
	                }
	                break;
	            case 'comment':
	                node.parentNode.removeChild(node)
	        }

	    }
	    return function(root,rules){
	        if(utils.isEmptyObject(rules)){
	            return root;
	        }
	        var val;
	        if(val = rules['-']){
	            utils.each(val.split(' '),function(k){
	                rules[k] = '-'
	            })
	        }
	        for(var i= 0,ci;ci=root.children[i];){
	            filterNode(ci,rules);
	            if(ci.parentNode){
	               i++;
	            }
	        }
	        return root;
	    }
	}();

	// core/plugin.js
	/**
	 * Created with JetBrains PhpStorm.
	 * User: campaign
	 * Date: 10/8/13
	 * Time: 6:15 PM
	 * To change this template use File | Settings | File Templates.
	 */
	UE.plugin = function(){
	    var _plugins = {};
	    return {
	        register : function(pluginName,fn,oldOptionName,afterDisabled){
	            if(oldOptionName && utils.isFunction(oldOptionName)){
	                afterDisabled = oldOptionName;
	                oldOptionName = null
	            }
	            _plugins[pluginName] = {
	                optionName : oldOptionName || pluginName,
	                execFn : fn,
	                //当插件被禁用时执行
	                afterDisabled : afterDisabled
	            }
	        },
	        load : function(editor){
	            utils.each(_plugins,function(plugin){
	                var _export = plugin.execFn.call(editor);
	                if(editor.options[plugin.optionName] !== false){
	                    if(_export){
	                        //后边需要再做扩展
	                        utils.each(_export,function(v,k){
	                            switch(k.toLowerCase()){
	                                case 'shortcutkey':
	                                    editor.addshortcutkey(v);
	                                    break;
	                                case 'bindevents':
	                                    utils.each(v,function(fn,eventName){
	                                        editor.addListener(eventName,fn);
	                                    });
	                                    break;
	                                case 'bindmultievents':
	                                    utils.each(utils.isArray(v) ? v:[v],function(event){
	                                        var types = utils.trim(event.type).split(/\s+/);
	                                        utils.each(types,function(eventName){
	                                            editor.addListener(eventName, event.handler);
	                                        });
	                                    });
	                                    break;
	                                case 'commands':
	                                    utils.each(v,function(execFn,execName){
	                                        editor.commands[execName] = execFn
	                                    });
	                                    break;
	                                case 'outputrule':
	                                    editor.addOutputRule(v);
	                                    break;
	                                case 'inputrule':
	                                    editor.addInputRule(v);
	                                    break;
	                                case 'defaultoptions':
	                                    editor.setOpt(v)
	                            }
	                        })
	                    }

	                }else if(plugin.afterDisabled){
	                    plugin.afterDisabled.call(editor)
	                }

	            });
	            //向下兼容
	            utils.each(UE.plugins,function(plugin){
	                plugin.call(editor);
	            });
	        },
	        run : function(pluginName,editor){
	            var plugin = _plugins[pluginName];
	            if(plugin){
	                plugin.exeFn.call(editor)
	            }
	        }
	    }
	}();

	// core/keymap.js
	var keymap = UE.keymap  = {
	    'Backspace' : 8,
	    'Tab' : 9,
	    'Enter' : 13,

	    'Shift':16,
	    'Control':17,
	    'Alt':18,
	    'CapsLock':20,

	    'Esc':27,

	    'Spacebar':32,

	    'PageUp':33,
	    'PageDown':34,
	    'End':35,
	    'Home':36,

	    'Left':37,
	    'Up':38,
	    'Right':39,
	    'Down':40,

	    'Insert':45,

	    'Del':46,

	    'NumLock':144,

	    'Cmd':91,

	    '=':187,
	    '-':189,

	    "b":66,
	    'i':73,
	    //回退
	    'z':90,
	    'y':89,
	    //粘贴
	    'v' : 86,
	    'x' : 88,

	    's' : 83,

	    'n' : 78
	};

	// core/localstorage.js
	//存储媒介封装
	var LocalStorage = UE.LocalStorage = (function () {

	    var storage = window.localStorage || getUserData() || null,
	        LOCAL_FILE = 'localStorage';

	    return {

	        saveLocalData: function (key, data) {

	            if (storage && data) {
	                storage.setItem(key, data);
	                return true;
	            }

	            return false;

	        },

	        getLocalData: function (key) {

	            if (storage) {
	                return storage.getItem(key);
	            }

	            return null;

	        },

	        removeItem: function (key) {

	            storage && storage.removeItem(key);

	        }

	    };

	    function getUserData() {

	        var container = document.createElement("div");
	        container.style.display = "none";

	        if (!container.addBehavior) {
	            return null;
	        }

	        container.addBehavior("#default#userdata");

	        return {

	            getItem: function (key) {

	                var result = null;

	                try {
	                    document.body.appendChild(container);
	                    container.load(LOCAL_FILE);
	                    result = container.getAttribute(key);
	                    document.body.removeChild(container);
	                } catch (e) {
	                }

	                return result;

	            },

	            setItem: function (key, value) {

	                document.body.appendChild(container);
	                container.setAttribute(key, value);
	                container.save(LOCAL_FILE);
	                document.body.removeChild(container);

	            },

	            //// 暂时没有用到
	            //clear: function () {
	            //
	            //    var expiresTime = new Date();
	            //    expiresTime.setFullYear(expiresTime.getFullYear() - 1);
	            //    document.body.appendChild(container);
	            //    container.expires = expiresTime.toUTCString();
	            //    container.save(LOCAL_FILE);
	            //    document.body.removeChild(container);
	            //
	            //},

	            removeItem: function (key) {

	                document.body.appendChild(container);
	                container.removeAttribute(key);
	                container.save(LOCAL_FILE);
	                document.body.removeChild(container);

	            }

	        };

	    }

	})();

	(function () {

	    var ROOTKEY = 'ueditor_preference';

	    UE.Editor.prototype.setPreferences = function(key,value){
	        var obj = {};
	        if (utils.isString(key)) {
	            obj[ key ] = value;
	        } else {
	            obj = key;
	        }
	        var data = LocalStorage.getLocalData(ROOTKEY);
	        if (data && (data = utils.str2json(data))) {
	            utils.extend(data, obj);
	        } else {
	            data = obj;
	        }
	        data && LocalStorage.saveLocalData(ROOTKEY, utils.json2str(data));
	    };

	    UE.Editor.prototype.getPreferences = function(key){
	        var data = LocalStorage.getLocalData(ROOTKEY);
	        if (data && (data = utils.str2json(data))) {
	            return key ? data[key] : data
	        }
	        return null;
	    };

	    UE.Editor.prototype.removePreferences = function (key) {
	        var data = LocalStorage.getLocalData(ROOTKEY);
	        if (data && (data = utils.str2json(data))) {
	            data[key] = undefined;
	            delete data[key]
	        }
	        data && LocalStorage.saveLocalData(ROOTKEY, utils.json2str(data));
	    };

	})();


	// plugins/defaultfilter.js
	///import core
	///plugin 编辑器默认的过滤转换机制

	UE.plugins['defaultfilter'] = function () {
	    var me = this;
	    me.setOpt({
	        'allowDivTransToP':true,
	        'disabledTableInTable':true
	    });
	    //默认的过滤处理
	    //进入编辑器的内容处理
	    me.addInputRule(function (root) {
	        var allowDivTransToP = this.options.allowDivTransToP;
	        var val;
	        function tdParent(node){
	            while(node && node.type == 'element'){
	                if(node.tagName == 'td'){
	                    return true;
	                }
	                node = node.parentNode;
	            }
	            return false;
	        }
	        //进行默认的处理
	        root.traversal(function (node) {
	            if (node.type == 'element') {
	                if (!dtd.$cdata[node.tagName] && me.options.autoClearEmptyNode && dtd.$inline[node.tagName] && !dtd.$empty[node.tagName] && (!node.attrs || utils.isEmptyObject(node.attrs))) {
	                    if (!node.firstChild()) node.parentNode.removeChild(node);
	                    else if (node.tagName == 'span' && (!node.attrs || utils.isEmptyObject(node.attrs))) {
	                        node.parentNode.removeChild(node, true)
	                    }
	                    return;
	                }
	                switch (node.tagName) {
	                    case 'style':
	                    case 'script':
	                        node.setAttr({
	                            cdata_tag: node.tagName,
	                            cdata_data: (node.innerHTML() || ''),
	                            '_ue_custom_node_':'true'
	                        });
	                        node.tagName = 'div';
	                        node.innerHTML('');
	                        break;
	                    case 'a':
	                        if (val = node.getAttr('href')) {
	                            node.setAttr('_href', val)
	                        }
	                        break;
	                    case 'img':
	                        //todo base64暂时去掉，后边做远程图片上传后，干掉这个
	                        if (val = node.getAttr('src')) {
	                            if (/^data:/.test(val)) {
	                                node.parentNode.removeChild(node);
	                                break;
	                            }
	                        }
	                        node.setAttr('_src', node.getAttr('src'));
	                        break;
	                    case 'span':
	                        if (browser.webkit && (val = node.getStyle('white-space'))) {
	                            if (/nowrap|normal/.test(val)) {
	                                node.setStyle('white-space', '');
	                                if (me.options.autoClearEmptyNode && utils.isEmptyObject(node.attrs)) {
	                                    node.parentNode.removeChild(node, true)
	                                }
	                            }
	                        }
	                        val = node.getAttr('id');
	                        if(val && /^_baidu_bookmark_/i.test(val)){
	                            node.parentNode.removeChild(node)
	                        }
	                        break;
	                    case 'p':
	                        if (val = node.getAttr('align')) {
	                            node.setAttr('align');
	                            node.setStyle('text-align', val)
	                        }
	                        //trace:3431
//	                        var cssStyle = node.getAttr('style');
//	                        if (cssStyle) {
//	                            cssStyle = cssStyle.replace(/(margin|padding)[^;]+/g, '');
//	                            node.setAttr('style', cssStyle)
	//
//	                        }
	                        //p标签不允许嵌套
	                        utils.each(node.children,function(n){
	                            if(n.type == 'element' && n.tagName == 'p'){
	                                var next = n.nextSibling();
	                                node.parentNode.insertAfter(n,node);
	                                var last = n;
	                                while(next){
	                                    var tmp = next.nextSibling();
	                                    node.parentNode.insertAfter(next,last);
	                                    last = next;
	                                    next = tmp;
	                                }
	                                return false;
	                            }
	                        });
	                        if (!node.firstChild()) {
	                            node.innerHTML(browser.ie ? '&nbsp;' : '<br/>')
	                        }
	                        break;
	                    case 'div':
	                        if(node.getAttr('cdata_tag')){
	                            break;
	                        }
	                        //针对代码这里不处理插入代码的div
	                        val = node.getAttr('class');
	                        if(val && /^line number\d+/.test(val)){
	                            break;
	                        }
	                        if(!allowDivTransToP){
	                            break;
	                        }
	                        var tmpNode, p = UE.uNode.createElement('p');
	                        while (tmpNode = node.firstChild()) {
	                            if (tmpNode.type == 'text' || !UE.dom.dtd.$block[tmpNode.tagName]) {
	                                p.appendChild(tmpNode);
	                            } else {
	                                if (p.firstChild()) {
	                                    node.parentNode.insertBefore(p, node);
	                                    p = UE.uNode.createElement('p');
	                                } else {
	                                    node.parentNode.insertBefore(tmpNode, node);
	                                }
	                            }
	                        }
	                        if (p.firstChild()) {
	                            node.parentNode.insertBefore(p, node);
	                        }
	                        node.parentNode.removeChild(node);
	                        break;
	                    case 'dl':
	                        node.tagName = 'ul';
	                        break;
	                    case 'dt':
	                    case 'dd':
	                        node.tagName = 'li';
	                        break;
	                    case 'li':
	                        var className = node.getAttr('class');
	                        if (!className || !/list\-/.test(className)) {
	                            node.setAttr()
	                        }
	                        var tmpNodes = node.getNodesByTagName('ol ul');
	                        UE.utils.each(tmpNodes, function (n) {
	                            node.parentNode.insertAfter(n, node);
	                        });
	                        break;
	                    case 'td':
	                    case 'th':
	                    case 'caption':
	                        if(!node.children || !node.children.length){
	                            node.appendChild(browser.ie11below ? UE.uNode.createText(' ') : UE.uNode.createElement('br'))
	                        }
	                        break;
	                    case 'table':
	                        if(me.options.disabledTableInTable && tdParent(node)){
	                            node.parentNode.insertBefore(UE.uNode.createText(node.innerText()),node);
	                            node.parentNode.removeChild(node)
	                        }
	                }

	            }
//	            if(node.type == 'comment'){
//	                node.parentNode.removeChild(node);
//	            }
	        })

	    });

	    //从编辑器出去的内容处理
	    me.addOutputRule(function (root) {

	        var val;
	        root.traversal(function (node) {
	            if (node.type == 'element') {

	                if (me.options.autoClearEmptyNode && dtd.$inline[node.tagName] && !dtd.$empty[node.tagName] && (!node.attrs || utils.isEmptyObject(node.attrs))) {

	                    if (!node.firstChild()) node.parentNode.removeChild(node);
	                    else if (node.tagName == 'span' && (!node.attrs || utils.isEmptyObject(node.attrs))) {
	                        node.parentNode.removeChild(node, true)
	                    }
	                    return;
	                }
	                switch (node.tagName) {
	                    case 'div':
	                        if (val = node.getAttr('cdata_tag')) {
	                            node.tagName = val;
	                            node.appendChild(UE.uNode.createText(node.getAttr('cdata_data')));
	                            node.setAttr({cdata_tag: '', cdata_data: '','_ue_custom_node_':''});
	                        }
	                        break;
	                    case 'a':
	                        if (val = node.getAttr('_href')) {
	                            node.setAttr({
	                                'href': utils.html(val),
	                                '_href': ''
	                            })
	                        }
	                        break;
	                        break;
	                    case 'span':
	                        val = node.getAttr('id');
	                        if(val && /^_baidu_bookmark_/i.test(val)){
	                            node.parentNode.removeChild(node)
	                        }
	                        break;
	                    case 'img':
	                        if (val = node.getAttr('_src')) {
	                            node.setAttr({
	                                'src': node.getAttr('_src'),
	                                '_src': ''
	                            })
	                        }


	                }
	            }

	        })


	    });
	};


	// plugins/inserthtml.js
	/**
	 * 插入html字符串插件
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 插入html代码
	 * @command inserthtml
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } html 插入的html字符串
	 * @remaind 插入的标签内容是在当前的选区位置上插入，如果当前是闭合状态，那直接插入内容， 如果当前是选中状态，将先清除当前选中内容后，再做插入
	 * @warning 注意:该命令会对当前选区的位置，对插入的内容进行过滤转换处理。 过滤的规则遵循html语意化的原则。
	 * @example
	 * ```javascript
	 * //xxx[BB]xxx 当前选区为非闭合选区，选中BB这两个文本
	 * //执行命令，插入<b>CC</b>
	 * //插入后的效果 xxx<b>CC</b>xxx
	 * //<p>xx|xxx</p> 当前选区为闭合状态
	 * //插入<p>CC</p>
	 * //结果 <p>xx</p><p>CC</p><p>xxx</p>
	 * //<p>xxxx</p>|</p>xxx</p> 当前选区在两个p标签之间
	 * //插入 xxxx
	 * //结果 <p>xxxx</p><p>xxxx</p></p>xxx</p>
	 * ```
	 */

	UE.commands['inserthtml'] = {
	    execCommand: function (command,html,notNeedFilter){
	        var me = this,
	            range,
	            div;
	        if(!html){
	            return;
	        }
	        if(me.fireEvent('beforeinserthtml',html) === true){
	            return;
	        }
	        range = me.selection.getRange();
	        div = range.document.createElement( 'div' );
	        div.style.display = 'inline';

	        if (!notNeedFilter) {
	            var root = UE.htmlparser(html);
	            //如果给了过滤规则就先进行过滤
	            if(me.options.filterRules){
	                UE.filterNode(root,me.options.filterRules);
	            }
	            //执行默认的处理
	            me.filterInputRule(root);
	            html = root.toHtml()
	        }
	        div.innerHTML = utils.trim( html );

	        if ( !range.collapsed ) {
	            var tmpNode = range.startContainer;
	            if(domUtils.isFillChar(tmpNode)){
	                range.setStartBefore(tmpNode)
	            }
	            tmpNode = range.endContainer;
	            if(domUtils.isFillChar(tmpNode)){
	                range.setEndAfter(tmpNode)
	            }
	            range.txtToElmBoundary();
	            //结束边界可能放到了br的前边，要把br包含进来
	            // x[xxx]<br/>
	            if(range.endContainer && range.endContainer.nodeType == 1){
	                tmpNode = range.endContainer.childNodes[range.endOffset];
	                if(tmpNode && domUtils.isBr(tmpNode)){
	                    range.setEndAfter(tmpNode);
	                }
	            }
	            if(range.startOffset == 0){
	                tmpNode = range.startContainer;
	                if(domUtils.isBoundaryNode(tmpNode,'firstChild') ){
	                    tmpNode = range.endContainer;
	                    if(range.endOffset == (tmpNode.nodeType == 3 ? tmpNode.nodeValue.length : tmpNode.childNodes.length) && domUtils.isBoundaryNode(tmpNode,'lastChild')){
	                        me.body.innerHTML = '<p>'+(browser.ie ? '' : '<br/>')+'</p>';
	                        range.setStart(me.body.firstChild,0).collapse(true)

	                    }
	                }
	            }
	            !range.collapsed && range.deleteContents();
	            if(range.startContainer.nodeType == 1){
	                var child = range.startContainer.childNodes[range.startOffset],pre;
	                if(child && domUtils.isBlockElm(child) && (pre = child.previousSibling) && domUtils.isBlockElm(pre)){
	                    range.setEnd(pre,pre.childNodes.length).collapse();
	                    while(child.firstChild){
	                        pre.appendChild(child.firstChild);
	                    }
	                    domUtils.remove(child);
	                }
	            }

	        }


	        var child,parent,pre,tmp,hadBreak = 0, nextNode;
	        //如果当前位置选中了fillchar要干掉，要不会产生空行
	        if(range.inFillChar()){
	            child = range.startContainer;
	            if(domUtils.isFillChar(child)){
	                range.setStartBefore(child).collapse(true);
	                domUtils.remove(child);
	            }else if(domUtils.isFillChar(child,true)){
	                child.nodeValue = child.nodeValue.replace(fillCharReg,'');
	                range.startOffset--;
	                range.collapsed && range.collapse(true)
	            }
	        }
	        //列表单独处理
	        var li = domUtils.findParentByTagName(range.startContainer,'li',true);
	        if(li){
	            var next,last;
	            while(child = div.firstChild){
	                //针对hr单独处理一下先
	                while(child && (child.nodeType == 3 || !domUtils.isBlockElm(child) || child.tagName=='HR' )){
	                    next = child.nextSibling;
	                    range.insertNode( child).collapse();
	                    last = child;
	                    child = next;

	                }
	                if(child){
	                    if(/^(ol|ul)$/i.test(child.tagName)){
	                        while(child.firstChild){
	                            last = child.firstChild;
	                            domUtils.insertAfter(li,child.firstChild);
	                            li = li.nextSibling;
	                        }
	                        domUtils.remove(child)
	                    }else{
	                        var tmpLi;
	                        next = child.nextSibling;
	                        tmpLi = me.document.createElement('li');
	                        domUtils.insertAfter(li,tmpLi);
	                        tmpLi.appendChild(child);
	                        last = child;
	                        child = next;
	                        li = tmpLi;
	                    }
	                }
	            }
	            li = domUtils.findParentByTagName(range.startContainer,'li',true);
	            if(domUtils.isEmptyBlock(li)){
	                domUtils.remove(li)
	            }
	            if(last){

	                range.setStartAfter(last).collapse(true).select(true)
	            }
	        }else{
	            while ( child = div.firstChild ) {
	                if(hadBreak){
	                    var p = me.document.createElement('p');
	                    while(child && (child.nodeType == 3 || !dtd.$block[child.tagName])){
	                        nextNode = child.nextSibling;
	                        p.appendChild(child);
	                        child = nextNode;
	                    }
	                    if(p.firstChild){

	                        child = p
	                    }
	                }
	                range.insertNode( child );
	                nextNode = child.nextSibling;
	                if ( !hadBreak && child.nodeType == domUtils.NODE_ELEMENT && domUtils.isBlockElm( child ) ){

	                    parent = domUtils.findParent( child,function ( node ){ return domUtils.isBlockElm( node ); } );
	                    if ( parent && parent.tagName.toLowerCase() != 'body' && !(dtd[parent.tagName][child.nodeName] && child.parentNode === parent)){
	                        if(!dtd[parent.tagName][child.nodeName]){
	                            pre = parent;
	                        }else{
	                            tmp = child.parentNode;
	                            while (tmp !== parent){
	                                pre = tmp;
	                                tmp = tmp.parentNode;

	                            }
	                        }


	                        domUtils.breakParent( child, pre || tmp );
	                        //去掉break后前一个多余的节点  <p>|<[p> ==> <p></p><div></div><p>|</p>
	                        var pre = child.previousSibling;
	                        domUtils.trimWhiteTextNode(pre);
	                        if(!pre.childNodes.length){
	                            domUtils.remove(pre);
	                        }
	                        //trace:2012,在非ie的情况，切开后剩下的节点有可能不能点入光标添加br占位

	                        if(!browser.ie &&
	                            (next = child.nextSibling) &&
	                            domUtils.isBlockElm(next) &&
	                            next.lastChild &&
	                            !domUtils.isBr(next.lastChild)){
	                            next.appendChild(me.document.createElement('br'));
	                        }
	                        hadBreak = 1;
	                    }
	                }
	                var next = child.nextSibling;
	                if(!div.firstChild && next && domUtils.isBlockElm(next)){

	                    range.setStart(next,0).collapse(true);
	                    break;
	                }
	                range.setEndAfter( child ).collapse();

	            }

	            child = range.startContainer;

	            if(nextNode && domUtils.isBr(nextNode)){
	                domUtils.remove(nextNode)
	            }
	            //用chrome可能有空白展位符
	            if(domUtils.isBlockElm(child) && domUtils.isEmptyNode(child)){
	                if(nextNode = child.nextSibling){
	                    domUtils.remove(child);
	                    if(nextNode.nodeType == 1 && dtd.$block[nextNode.tagName]){

	                        range.setStart(nextNode,0).collapse(true).shrinkBoundary()
	                    }
	                }else{

	                    try{
	                        child.innerHTML = browser.ie ? domUtils.fillChar : '<br/>';
	                    }catch(e){
	                        range.setStartBefore(child);
	                        domUtils.remove(child)
	                    }

	                }

	            }
	            //加上true因为在删除表情等时会删两次，第一次是删的fillData
	            try{
	                range.select(true);
	            }catch(e){}

	        }



	        setTimeout(function(){
	            range = me.selection.getRange();
	            range.scrollToView(me.autoHeightEnabled,me.autoHeightEnabled ? domUtils.getXY(me.iframe).y:0);
	            me.fireEvent('afterinserthtml', html);
	        },200);
	    }
	};


	// plugins/autotypeset.js
	/**
	 * 自动排版
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 对当前编辑器的内容执行自动排版， 排版的行为根据config配置文件里的“autotypeset”选项进行控制。
	 * @command autotypeset
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'autotypeset' );
	 * ```
	 */

	UE.plugins['autotypeset'] = function(){

	    this.setOpt({'autotypeset': {
	        mergeEmptyline: true,           //合并空行
	        removeClass: true,              //去掉冗余的class
	        removeEmptyline: false,         //去掉空行
	        textAlign:"left",               //段落的排版方式，可以是 left,right,center,justify 去掉这个属性表示不执行排版
	        imageBlockLine: 'center',       //图片的浮动方式，独占一行剧中,左右浮动，默认: center,left,right,none 去掉这个属性表示不执行排版
	        pasteFilter: false,             //根据规则过滤没事粘贴进来的内容
	        clearFontSize: false,           //去掉所有的内嵌字号，使用编辑器默认的字号
	        clearFontFamily: false,         //去掉所有的内嵌字体，使用编辑器默认的字体
	        removeEmptyNode: false,         // 去掉空节点
	        //可以去掉的标签
	        removeTagNames: utils.extend({div:1},dtd.$removeEmpty),
	        indent: false,                  // 行首缩进
	        indentValue : '2em',            //行首缩进的大小
	        bdc2sb: false,
	        tobdc: false
	    }});

	    var me = this,
	        opt = me.options.autotypeset,
	        remainClass = {
	            'selectTdClass':1,
	            'pagebreak':1,
	            'anchorclass':1
	        },
	        remainTag = {
	            'li':1
	        },
	        tags = {
	            div:1,
	            p:1,
	            //trace:2183 这些也认为是行
	            blockquote:1,center:1,h1:1,h2:1,h3:1,h4:1,h5:1,h6:1,
	            span:1
	        },
	        highlightCont;
	    //升级了版本，但配置项目里没有autotypeset
	    if(!opt){
	        return;
	    }

	    readLocalOpts();

	    function isLine(node,notEmpty){
	        if(!node || node.nodeType == 3)
	            return 0;
	        if(domUtils.isBr(node))
	            return 1;
	        if(node && node.parentNode && tags[node.tagName.toLowerCase()]){
	            if(highlightCont && highlightCont.contains(node)
	                ||
	                node.getAttribute('pagebreak')
	            ){
	                return 0;
	            }

	            return notEmpty ? !domUtils.isEmptyBlock(node) : domUtils.isEmptyBlock(node,new RegExp('[\\s'+domUtils.fillChar
	                +']','g'));
	        }
	    }

	    function removeNotAttributeSpan(node){
	        if(!node.style.cssText){
	            domUtils.removeAttributes(node,['style']);
	            if(node.tagName.toLowerCase() == 'span' && domUtils.hasNoAttributes(node)){
	                domUtils.remove(node,true);
	            }
	        }
	    }
	    function autotype(type,html){

	        var me = this,cont;
	        if(html){
	            if(!opt.pasteFilter){
	                return;
	            }
	            cont = me.document.createElement('div');
	            cont.innerHTML = html.html;
	        }else{
	            cont = me.document.body;
	        }
	        var nodes = domUtils.getElementsByTagName(cont,'*');

	        // 行首缩进，段落方向，段间距，段内间距
	        for(var i=0,ci;ci=nodes[i++];){

	            if(me.fireEvent('excludeNodeinautotype',ci) === true){
	                continue;
	            }
	             //font-size
	            if(opt.clearFontSize && ci.style.fontSize){
	                domUtils.removeStyle(ci,'font-size');

	                removeNotAttributeSpan(ci);

	            }
	            //font-family
	            if(opt.clearFontFamily && ci.style.fontFamily){
	                domUtils.removeStyle(ci,'font-family');
	                removeNotAttributeSpan(ci);
	            }

	            if(isLine(ci)){
	                //合并空行
	                if(opt.mergeEmptyline ){
	                    var next = ci.nextSibling,tmpNode,isBr = domUtils.isBr(ci);
	                    while(isLine(next)){
	                        tmpNode = next;
	                        next = tmpNode.nextSibling;
	                        if(isBr && (!next || next && !domUtils.isBr(next))){
	                            break;
	                        }
	                        domUtils.remove(tmpNode);
	                    }

	                }
	                 //去掉空行，保留占位的空行
	                if(opt.removeEmptyline && domUtils.inDoc(ci,cont) && !remainTag[ci.parentNode.tagName.toLowerCase()] ){
	                    if(domUtils.isBr(ci)){
	                        next = ci.nextSibling;
	                        if(next && !domUtils.isBr(next)){
	                            continue;
	                        }
	                    }
	                    domUtils.remove(ci);
	                    continue;

	                }

	            }
	            if(isLine(ci,true) && ci.tagName != 'SPAN'){
	                if(opt.indent){
	                    ci.style.textIndent = opt.indentValue;
	                }
	                if(opt.textAlign){
	                    ci.style.textAlign = opt.textAlign;
	                }
	                // if(opt.lineHeight)
	                //     ci.style.lineHeight = opt.lineHeight + 'cm';

	            }

	            //去掉class,保留的class不去掉
	            if(opt.removeClass && ci.className && !remainClass[ci.className.toLowerCase()]){

	                if(highlightCont && highlightCont.contains(ci)){
	                     continue;
	                }
	                domUtils.removeAttributes(ci,['class']);
	            }

	            //表情不处理
	            if(opt.imageBlockLine && ci.tagName.toLowerCase() == 'img' && !ci.getAttribute('emotion')){
	                if(html){
	                    var img = ci;
	                    switch (opt.imageBlockLine){
	                        case 'left':
	                        case 'right':
	                        case 'none':
	                            var pN = img.parentNode,tmpNode,pre,next;
	                            while(dtd.$inline[pN.tagName] || pN.tagName == 'A'){
	                                pN = pN.parentNode;
	                            }
	                            tmpNode = pN;
	                            if(tmpNode.tagName == 'P' && domUtils.getStyle(tmpNode,'text-align') == 'center'){
	                                if(!domUtils.isBody(tmpNode) && domUtils.getChildCount(tmpNode,function(node){return !domUtils.isBr(node) && !domUtils.isWhitespace(node)}) == 1){
	                                    pre = tmpNode.previousSibling;
	                                    next = tmpNode.nextSibling;
	                                    if(pre && next && pre.nodeType == 1 &&  next.nodeType == 1 && pre.tagName == next.tagName && domUtils.isBlockElm(pre)){
	                                        pre.appendChild(tmpNode.firstChild);
	                                        while(next.firstChild){
	                                            pre.appendChild(next.firstChild);
	                                        }
	                                        domUtils.remove(tmpNode);
	                                        domUtils.remove(next);
	                                    }else{
	                                        domUtils.setStyle(tmpNode,'text-align','');
	                                    }


	                                }


	                            }
	                            domUtils.setStyle(img,'float', opt.imageBlockLine);
	                            break;
	                        case 'center':
	                            if(me.queryCommandValue('imagefloat') != 'center'){
	                                pN = img.parentNode;
	                                domUtils.setStyle(img,'float','none');
	                                tmpNode = img;
	                                while(pN && domUtils.getChildCount(pN,function(node){return !domUtils.isBr(node) && !domUtils.isWhitespace(node)}) == 1
	                                    && (dtd.$inline[pN.tagName] || pN.tagName == 'A')){
	                                    tmpNode = pN;
	                                    pN = pN.parentNode;
	                                }
	                                var pNode = me.document.createElement('p');
	                                domUtils.setAttributes(pNode,{

	                                    style:'text-align:center'
	                                });
	                                tmpNode.parentNode.insertBefore(pNode,tmpNode);
	                                pNode.appendChild(tmpNode);
	                                domUtils.setStyle(tmpNode,'float','');

	                            }


	                    }
	                } else {
	                    var range = me.selection.getRange();
	                    range.selectNode(ci).select();
	                    me.execCommand('imagefloat', opt.imageBlockLine);
	                }

	            }

	            //去掉冗余的标签
	            if(opt.removeEmptyNode){
	                if(opt.removeTagNames[ci.tagName.toLowerCase()] && domUtils.hasNoAttributes(ci) && domUtils.isEmptyBlock(ci)){
	                    domUtils.remove(ci);
	                }
	            }
	        }
	        if(opt.tobdc){
	            var root = UE.htmlparser(cont.innerHTML);
	            root.traversal(function(node){
	                if(node.type == 'text'){
	                    node.data = ToDBC(node.data)
	                }
	            });
	            cont.innerHTML = root.toHtml()
	        }
	        if(opt.bdc2sb){
	            var root = UE.htmlparser(cont.innerHTML);
	            root.traversal(function(node){
	                if(node.type == 'text'){
	                    node.data = DBC2SB(node.data)
	                }
	            });
	            cont.innerHTML = root.toHtml()
	        }
	        if(html){
	            html.html = cont.innerHTML;
	        }
	    }
	    if(opt.pasteFilter){
	        me.addListener('beforepaste',autotype);
	    }

	    function DBC2SB(str) {
	        var result = '';
	        for (var i = 0; i < str.length; i++) {
	            var code = str.charCodeAt(i); //获取当前字符的unicode编码
	            if (code >= 65281 && code <= 65373)//在这个unicode编码范围中的是所有的英文字母已经各种字符
	            {
	                result += String.fromCharCode(str.charCodeAt(i) - 65248); //把全角字符的unicode编码转换为对应半角字符的unicode码
	            } else if (code == 12288)//空格
	            {
	                result += String.fromCharCode(str.charCodeAt(i) - 12288 + 32);
	            } else {
	                result += str.charAt(i);
	            }
	        }
	        return result;
	    }
	    function ToDBC(txtstring) {
	        txtstring = utils.html(txtstring);
	        var tmp = "";
	        var mark = "";/*用于判断,如果是html尖括里的标记,则不进行全角的转换*/
	        for (var i = 0; i < txtstring.length; i++) {
	            if (txtstring.charCodeAt(i) == 32) {
	                tmp = tmp + String.fromCharCode(12288);
	            }
	            else if (txtstring.charCodeAt(i) < 127) {
	                tmp = tmp + String.fromCharCode(txtstring.charCodeAt(i) + 65248);
	            }
	            else {
	                tmp += txtstring.charAt(i);
	            }
	        }
	        return tmp;
	    }

	    function readLocalOpts() {
	        var cookieOpt = me.getPreferences('autotypeset');
	        utils.extend(me.options.autotypeset, cookieOpt);
	    }

	    me.commands['autotypeset'] = {
	        execCommand:function () {
	            me.removeListener('beforepaste',autotype);
	            if(opt.pasteFilter){
	                me.addListener('beforepaste',autotype);
	            }
	            autotype.call(me)
	        }

	    };

	};



	// plugins/autosubmit.js
	/**
	 * 快捷键提交
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 提交表单
	 * @command autosubmit
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'autosubmit' );
	 * ```
	 */

	UE.plugin.register('autosubmit',function(){
	    return {
	        shortcutkey:{
	            "autosubmit":"ctrl+13" //手动提交
	        },
	        commands:{
	            'autosubmit':{
	                execCommand:function () {
	                    var me=this,
	                        form = domUtils.findParentByTagName(me.iframe,"form", false);
	                    if (form){
	                        if(me.fireEvent("beforesubmit")===false){
	                            return;
	                        }
	                        me.sync();
	                        form.submit();
	                    }
	                }
	            }
	        }
	    }
	});

	// plugins/background.js
	/**
	 * 背景插件，为UEditor提供设置背景功能
	 * @file
	 * @since 1.2.6.1
	 */
	UE.plugin.register('background', function () {
	    var me = this,
	        cssRuleId = 'editor_background',
	        isSetColored,
	        reg = new RegExp('body[\\s]*\\{(.+)\\}', 'i');

	    function stringToObj(str) {
	        var obj = {}, styles = str.split(';');
	        utils.each(styles, function (v) {
	            var index = v.indexOf(':'),
	                key = utils.trim(v.substr(0, index)).toLowerCase();
	            key && (obj[key] = utils.trim(v.substr(index + 1) || ''));
	        });
	        return obj;
	    }

	    function setBackground(obj) {
	        if (obj) {
	            var styles = [];
	            for (var name in obj) {
	                if (obj.hasOwnProperty(name)) {
	                    styles.push(name + ":" + obj[name] + '; ');
	                }
	            }
	            utils.cssRule(cssRuleId, styles.length ? ('body{' + styles.join("") + '}') : '', me.document);
	        } else {
	            utils.cssRule(cssRuleId, '', me.document)
	        }
	    }
	    //重写editor.hasContent方法

	    var orgFn = me.hasContents;
	    me.hasContents = function(){
	        if(me.queryCommandValue('background')){
	            return true
	        }
	        return orgFn.apply(me,arguments);
	    };
	    return {
	        bindEvents: {
	            'getAllHtml': function (type, headHtml) {
	                var body = this.body,
	                    su = domUtils.getComputedStyle(body, "background-image"),
	                    url = "";
	                if (su.indexOf(me.options.imagePath) > 0) {
	                    url = su.substring(su.indexOf(me.options.imagePath), su.length - 1).replace(/"|\(|\)/ig, "");
	                } else {
	                    url = su != "none" ? su.replace(/url\("?|"?\)/ig, "") : "";
	                }
	                var html = '<style type="text/css">body{';
	                var bgObj = {
	                    "background-color": domUtils.getComputedStyle(body, "background-color") || "#ffffff",
	                    'background-image': url ? 'url(' + url + ')' : '',
	                    'background-repeat': domUtils.getComputedStyle(body, "background-repeat") || "",
	                    'background-position': browser.ie ? (domUtils.getComputedStyle(body, "background-position-x") + " " + domUtils.getComputedStyle(body, "background-position-y")) : domUtils.getComputedStyle(body, "background-position"),
	                    'height': domUtils.getComputedStyle(body, "height")
	                };
	                for (var name in bgObj) {
	                    if (bgObj.hasOwnProperty(name)) {
	                        html += name + ":" + bgObj[name] + "; ";
	                    }
	                }
	                html += '}</style> ';
	                headHtml.push(html);
	            },
	            'aftersetcontent': function () {
	                if(isSetColored == false) setBackground();
	            }
	        },
	        inputRule: function (root) {
	            isSetColored = false;
	            utils.each(root.getNodesByTagName('p'), function (p) {
	                var styles = p.getAttr('data-background');
	                if (styles) {
	                    isSetColored = true;
	                    setBackground(stringToObj(styles));
	                    p.parentNode.removeChild(p);
	                }
	            })
	        },
	        outputRule: function (root) {
	            var me = this,
	                styles = (utils.cssRule(cssRuleId, me.document) || '').replace(/[\n\r]+/g, '').match(reg);
	            if (styles) {
	                root.appendChild(UE.uNode.createElement('<p style="display:none;" data-background="' + utils.trim(styles[1].replace(/"/g, '').replace(/[\s]+/g, ' ')) + '"><br/></p>'));
	            }
	        },
	        commands: {
	            'background': {
	                execCommand: function (cmd, obj) {
	                    setBackground(obj);
	                },
	                queryCommandValue: function () {
	                    var me = this,
	                        styles = (utils.cssRule(cssRuleId, me.document) || '').replace(/[\n\r]+/g, '').match(reg);
	                    return styles ? stringToObj(styles[1]) : null;
	                },
	                notNeedUndo: true
	            }
	        }
	    }
	});

	// plugins/image.js
	/**
	 * 图片插入、排版插件
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 图片对齐方式
	 * @command imagefloat
	 * @method execCommand
	 * @remind 值center为独占一行居中
	 * @param { String } cmd 命令字符串
	 * @param { String } align 对齐方式，可传left、right、none、center
	 * @remaind center表示图片独占一行
	 * @example
	 * ```javascript
	 * editor.execCommand( 'imagefloat', 'center' );
	 * ```
	 */

	/**
	 * 如果选区所在位置是图片区域
	 * @command imagefloat
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 返回图片对齐方式
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'imagefloat' );
	 * ```
	 */

	UE.commands['imagefloat'] = {
	    execCommand:function (cmd, align) {
	        var me = this,
	            range = me.selection.getRange();
	        if (!range.collapsed) {
	            var img = range.getClosedNode();
	            if (img && img.tagName == 'IMG') {
	                switch (align) {
	                    case 'left':
	                    case 'right':
	                    case 'none':
	                        var pN = img.parentNode, tmpNode, pre, next;
	                        while (dtd.$inline[pN.tagName] || pN.tagName == 'A') {
	                            pN = pN.parentNode;
	                        }
	                        tmpNode = pN;
	                        if (tmpNode.tagName == 'P' && domUtils.getStyle(tmpNode, 'text-align') == 'center') {
	                            if (!domUtils.isBody(tmpNode) && domUtils.getChildCount(tmpNode, function (node) {
	                                return !domUtils.isBr(node) && !domUtils.isWhitespace(node);
	                            }) == 1) {
	                                pre = tmpNode.previousSibling;
	                                next = tmpNode.nextSibling;
	                                if (pre && next && pre.nodeType == 1 && next.nodeType == 1 && pre.tagName == next.tagName && domUtils.isBlockElm(pre)) {
	                                    pre.appendChild(tmpNode.firstChild);
	                                    while (next.firstChild) {
	                                        pre.appendChild(next.firstChild);
	                                    }
	                                    domUtils.remove(tmpNode);
	                                    domUtils.remove(next);
	                                } else {
	                                    domUtils.setStyle(tmpNode, 'text-align', '');
	                                }


	                            }

	                            range.selectNode(img).select();
	                        }
	                        domUtils.setStyle(img, 'float', align == 'none' ? '' : align);
	                        if(align == 'none'){
	                            domUtils.removeAttributes(img,'align');
	                        }

	                        break;
	                    case 'center':
	                        if (me.queryCommandValue('imagefloat') != 'center') {
	                            pN = img.parentNode;
	                            domUtils.setStyle(img, 'float', '');
	                            domUtils.removeAttributes(img,'align');
	                            tmpNode = img;
	                            while (pN && domUtils.getChildCount(pN, function (node) {
	                                return !domUtils.isBr(node) && !domUtils.isWhitespace(node);
	                            }) == 1
	                                && (dtd.$inline[pN.tagName] || pN.tagName == 'A')) {
	                                tmpNode = pN;
	                                pN = pN.parentNode;
	                            }
	                            range.setStartBefore(tmpNode).setCursor(false);
	                            pN = me.document.createElement('div');
	                            pN.appendChild(tmpNode);
	                            domUtils.setStyle(tmpNode, 'float', '');

	                            me.execCommand('insertHtml', '<p id="_img_parent_tmp" style="text-align:center">' + pN.innerHTML + '</p>');

	                            tmpNode = me.document.getElementById('_img_parent_tmp');
	                            tmpNode.removeAttribute('id');
	                            tmpNode = tmpNode.firstChild;
	                            range.selectNode(tmpNode).select();
	                            //去掉后边多余的元素
	                            next = tmpNode.parentNode.nextSibling;
	                            if (next && domUtils.isEmptyNode(next)) {
	                                domUtils.remove(next);
	                            }

	                        }

	                        break;
	                }

	            }
	        }
	    },
	    queryCommandValue:function () {
	        var range = this.selection.getRange(),
	            startNode, floatStyle;
	        if (range.collapsed) {
	            return 'none';
	        }
	        startNode = range.getClosedNode();
	        if (startNode && startNode.nodeType == 1 && startNode.tagName == 'IMG') {
	            floatStyle = domUtils.getComputedStyle(startNode, 'float') || startNode.getAttribute('align');

	            if (floatStyle == 'none') {
	                floatStyle = domUtils.getComputedStyle(startNode.parentNode, 'text-align') == 'center' ? 'center' : floatStyle;
	            }
	            return {
	                left:1,
	                right:1,
	                center:1
	            }[floatStyle] ? floatStyle : 'none';
	        }
	        return 'none';


	    },
	    queryCommandState:function () {
	        var range = this.selection.getRange(),
	            startNode;

	        if (range.collapsed)  return -1;

	        startNode = range.getClosedNode();
	        if (startNode && startNode.nodeType == 1 && startNode.tagName == 'IMG') {
	            return 0;
	        }
	        return -1;
	    }
	};


	/**
	 * 插入图片
	 * @command insertimage
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { Object } opt 属性键值对，这些属性都将被复制到当前插入图片
	 * @remind 该命令第二个参数可接受一个图片配置项对象的数组，可以插入多张图片，
	 * 此时数组的每一个元素都是一个Object类型的图片属性集合。
	 * @example
	 * ```javascript
	 * editor.execCommand( 'insertimage', {
	 *     src:'a/b/c.jpg',
	 *     width:'100',
	 *     height:'100'
	 * } );
	 * ```
	 * @example
	 * ```javascript
	 * editor.execCommand( 'insertimage', [{
	 *     src:'a/b/c.jpg',
	 *     width:'100',
	 *     height:'100'
	 * },{
	 *     src:'a/b/d.jpg',
	 *     width:'100',
	 *     height:'100'
	 * }] );
	 * ```
	 */

	UE.commands['insertimage'] = {
	    execCommand:function (cmd, opt) {

	        opt = utils.isArray(opt) ? opt : [opt];
	        if (!opt.length) {
	            return;
	        }
	        var me = this,
	            range = me.selection.getRange(),
	            img = range.getClosedNode();

	        if(me.fireEvent('beforeinsertimage', opt) === true){
	            return;
	        }

	        function unhtmlData(imgCi) {

	            utils.each('width,height,border,hspace,vspace'.split(','), function (item) {

	                if (imgCi[item]) {
	                    imgCi[item] = parseInt(imgCi[item], 10) || 0;
	                }
	            });

	            utils.each('src,_src'.split(','), function (item) {

	                if (imgCi[item]) {
	                    imgCi[item] = utils.unhtmlForUrl(imgCi[item]);
	                }
	            });
	            utils.each('title,alt'.split(','), function (item) {

	                if (imgCi[item]) {
	                    imgCi[item] = utils.unhtml(imgCi[item]);
	                }
	            });
	        }

	        if (img && /img/i.test(img.tagName) && (img.className != "edui-faked-video" || img.className.indexOf("edui-upload-video")!=-1) && !img.getAttribute("word_img")) {
	            var first = opt.shift();
	            var floatStyle = first['floatStyle'];
	            delete first['floatStyle'];
////	                img.style.border = (first.border||0) +"px solid #000";
////	                img.style.margin = (first.margin||0) +"px";
//	                img.style.cssText += ';margin:' + (first.margin||0) +"px;" + 'border:' + (first.border||0) +"px solid #000";
	            domUtils.setAttributes(img, first);
	            me.execCommand('imagefloat', floatStyle);
	            if (opt.length > 0) {
	                range.setStartAfter(img).setCursor(false, true);
	                me.execCommand('insertimage', opt);
	            }

	        } else {
	            var html = [], str = '', ci;
	            ci = opt[0];
	            if (opt.length == 1) {
	                unhtmlData(ci);

	                str = '<img src="' + ci.src + '" ' + (ci._src ? ' _src="' + ci._src + '" ' : '') +
	                    (ci.width ? 'width="' + ci.width + '" ' : '') +
	                    (ci.height ? ' height="' + ci.height + '" ' : '') +
	                    (ci['floatStyle'] == 'left' || ci['floatStyle'] == 'right' ? ' style="float:' + ci['floatStyle'] + ';"' : '') +
	                    (ci.title && ci.title != "" ? ' title="' + ci.title + '"' : '') +
	                    (ci.border && ci.border != "0" ? ' border="' + ci.border + '"' : '') +
	                    (ci.alt && ci.alt != "" ? ' alt="' + ci.alt + '"' : '') +
	                    (ci.hspace && ci.hspace != "0" ? ' hspace = "' + ci.hspace + '"' : '') +
	                    (ci.vspace && ci.vspace != "0" ? ' vspace = "' + ci.vspace + '"' : '') + '/>';
	                if (ci['floatStyle'] == 'center') {
	                    str = '<p style="text-align: center">' + str + '</p>';
	                }
	                html.push(str);

	            } else {
	                for (var i = 0; ci = opt[i++];) {
	                    unhtmlData(ci);
	                    str = '<p ' + (ci['floatStyle'] == 'center' ? 'style="text-align: center" ' : '') + '><img src="' + ci.src + '" ' +
	                        (ci.width ? 'width="' + ci.width + '" ' : '') + (ci._src ? ' _src="' + ci._src + '" ' : '') +
	                        (ci.height ? ' height="' + ci.height + '" ' : '') +
	                        ' style="' + (ci['floatStyle'] && ci['floatStyle'] != 'center' ? 'float:' + ci['floatStyle'] + ';' : '') +
	                        (ci.border || '') + '" ' +
	                        (ci.title ? ' title="' + ci.title + '"' : '') + ' /></p>';
	                    html.push(str);
	                }
	            }

	            me.execCommand('insertHtml', html.join(''));
	        }

	        me.fireEvent('afterinsertimage', opt)
	    }
	};


	// plugins/justify.js
	/**
	 * 段落格式
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 段落对齐方式
	 * @command justify
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } align 对齐方式：left => 居左，right => 居右，center => 居中，justify => 两端对齐
	 * @example
	 * ```javascript
	 * editor.execCommand( 'justify', 'center' );
	 * ```
	 */
	/**
	 * 如果选区所在位置是段落区域，返回当前段落对齐方式
	 * @command justify
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 返回段落对齐方式
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'justify' );
	 * ```
	 */

	UE.plugins['justify']=function(){
	    var me=this,
	        block = domUtils.isBlockElm,
	        defaultValue = {
	            left:1,
	            right:1,
	            center:1,
	            justify:1
	        },
	        doJustify = function (range, style) {
	            var bookmark = range.createBookmark(),
	                filterFn = function (node) {
	                    return node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' && !domUtils.isBookmarkNode(node) : !domUtils.isWhitespace(node);
	                };

	            range.enlarge(true);
	            var bookmark2 = range.createBookmark(),
	                current = domUtils.getNextDomNode(bookmark2.start, false, filterFn),
	                tmpRange = range.cloneRange(),
	                tmpNode;
	            while (current && !(domUtils.getPosition(current, bookmark2.end) & domUtils.POSITION_FOLLOWING)) {
	                if (current.nodeType == 3 || !block(current)) {
	                    tmpRange.setStartBefore(current);
	                    while (current && current !== bookmark2.end && !block(current)) {
	                        tmpNode = current;
	                        current = domUtils.getNextDomNode(current, false, null, function (node) {
	                            return !block(node);
	                        });
	                    }
	                    tmpRange.setEndAfter(tmpNode);
	                    var common = tmpRange.getCommonAncestor();
	                    if (!domUtils.isBody(common) && block(common)) {
	                        domUtils.setStyles(common, utils.isString(style) ? {'text-align':style} : style);
	                        current = common;
	                    } else {
	                        var p = range.document.createElement('p');
	                        domUtils.setStyles(p, utils.isString(style) ? {'text-align':style} : style);
	                        var frag = tmpRange.extractContents();
	                        p.appendChild(frag);
	                        tmpRange.insertNode(p);
	                        current = p;
	                    }
	                    current = domUtils.getNextDomNode(current, false, filterFn);
	                } else {
	                    current = domUtils.getNextDomNode(current, true, filterFn);
	                }
	            }
	            return range.moveToBookmark(bookmark2).moveToBookmark(bookmark);
	        };

	    UE.commands['justify'] = {
	        execCommand:function (cmdName, align) {
	            var range = this.selection.getRange(),
	                txt;

	            //闭合时单独处理
	            if (range.collapsed) {
	                txt = this.document.createTextNode('p');
	                range.insertNode(txt);
	            }
	            doJustify(range, align);
	            if (txt) {
	                range.setStartBefore(txt).collapse(true);
	                domUtils.remove(txt);
	            }

	            range.select();


	            return true;
	        },
	        queryCommandValue:function () {
	            var startNode = this.selection.getStart(),
	                value = domUtils.getComputedStyle(startNode, 'text-align');
	            return defaultValue[value] ? value : 'left';
	        },
	        queryCommandState:function () {
	            var start = this.selection.getStart(),
	                cell = start && domUtils.findParentByTagName(start, ["td", "th","caption"], true);

	            return cell? -1:0;
	        }

	    };
	};


	// plugins/font.js
	/**
	 * 字体颜色,背景色,字号,字体,下划线,删除线
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 字体颜色
	 * @command forecolor
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } value 色值(必须十六进制)
	 * @example
	 * ```javascript
	 * editor.execCommand( 'forecolor', '#000' );
	 * ```
	 */
	/**
	 * 返回选区字体颜色
	 * @command forecolor
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 返回字体颜色
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'forecolor' );
	 * ```
	 */

	/**
	 * 字体背景颜色
	 * @command backcolor
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } value 色值(必须十六进制)
	 * @example
	 * ```javascript
	 * editor.execCommand( 'backcolor', '#000' );
	 * ```
	 */
	/**
	 * 返回选区字体颜色
	 * @command backcolor
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 返回字体背景颜色
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'backcolor' );
	 * ```
	 */

	/**
	 * 字体大小
	 * @command fontsize
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } value 字体大小
	 * @example
	 * ```javascript
	 * editor.execCommand( 'fontsize', '14px' );
	 * ```
	 */
	/**
	 * 返回选区字体大小
	 * @command fontsize
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 返回字体大小
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'fontsize' );
	 * ```
	 */

	/**
	 * 字体样式
	 * @command fontfamily
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } value 字体样式
	 * @example
	 * ```javascript
	 * editor.execCommand( 'fontfamily', '微软雅黑' );
	 * ```
	 */
	/**
	 * 返回选区字体样式
	 * @command fontfamily
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 返回字体样式
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'fontfamily' );
	 * ```
	 */

	/**
	 * 字体下划线,与删除线互斥
	 * @command underline
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'underline' );
	 * ```
	 */

	/**
	 * 字体删除线,与下划线互斥
	 * @command strikethrough
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'strikethrough' );
	 * ```
	 */

	/**
	 * 字体边框
	 * @command fontborder
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'fontborder' );
	 * ```
	 */

	UE.plugins['font'] = function () {
	    var me = this,
	        fonts = {
	            'forecolor': 'color',
	            'backcolor': 'background-color',
	            'fontsize': 'font-size',
	            'fontfamily': 'font-family',
	            'underline': 'text-decoration',
	            'strikethrough': 'text-decoration',
	            'fontborder': 'border'
	        },
	        needCmd = {'underline': 1, 'strikethrough': 1, 'fontborder': 1},
	        needSetChild = {
	            'forecolor': 'color',
	            'backcolor': 'background-color',
	            'fontsize': 'font-size',
	            'fontfamily': 'font-family'

	        };
	    me.setOpt({
	        'fontfamily': [
	            { name: 'songti', val: '宋体,SimSun'},
	            { name: 'yahei', val: '微软雅黑,Microsoft YaHei'},
	            { name: 'kaiti', val: '楷体,楷体_GB2312, SimKai'},
	            { name: 'heiti', val: '黑体, SimHei'},
	            { name: 'lishu', val: '隶书, SimLi'},
	            { name: 'andaleMono', val: 'andale mono'},
	            { name: 'arial', val: 'arial, helvetica,sans-serif'},
	            { name: 'arialBlack', val: 'arial black,avant garde'},
	            { name: 'comicSansMs', val: 'comic sans ms'},
	            { name: 'impact', val: 'impact,chicago'},
	            { name: 'timesNewRoman', val: 'times new roman'}
	        ],
	        'fontsize': [10, 11, 12, 14, 16, 18, 20, 24, 36]
	    });

	    function mergeWithParent(node){
	        var parent;
	        while(parent = node.parentNode){
	            if(parent.tagName == 'SPAN' && domUtils.getChildCount(parent,function(child){
	                return !domUtils.isBookmarkNode(child) && !domUtils.isBr(child)
	            }) == 1) {
	                parent.style.cssText += node.style.cssText;
	                domUtils.remove(node,true);
	                node = parent;

	            }else{
	                break;
	            }
	        }

	    }
	    function mergeChild(rng,cmdName,value){
	        if(needSetChild[cmdName]){
	            rng.adjustmentBoundary();
	            if(!rng.collapsed && rng.startContainer.nodeType == 1){
	                var start = rng.startContainer.childNodes[rng.startOffset];
	                if(start && domUtils.isTagNode(start,'span')){
	                    var bk = rng.createBookmark();
	                    utils.each(domUtils.getElementsByTagName(start, 'span'), function (span) {
	                        if (!span.parentNode || domUtils.isBookmarkNode(span))return;
	                        if(cmdName == 'backcolor' && domUtils.getComputedStyle(span,'background-color').toLowerCase() === value){
	                            return;
	                        }
	                        domUtils.removeStyle(span,needSetChild[cmdName]);
	                        if(span.style.cssText.replace(/^\s+$/,'').length == 0){
	                            domUtils.remove(span,true)
	                        }
	                    });
	                    rng.moveToBookmark(bk)
	                }
	            }
	        }

	    }
	    function mergesibling(rng,cmdName,value) {
	        var collapsed = rng.collapsed,
	            bk = rng.createBookmark(), common;
	        if (collapsed) {
	            common = bk.start.parentNode;
	            while (dtd.$inline[common.tagName]) {
	                common = common.parentNode;
	            }
	        } else {
	            common = domUtils.getCommonAncestor(bk.start, bk.end);
	        }
	        utils.each(domUtils.getElementsByTagName(common, 'span'), function (span) {
	            if (!span.parentNode || domUtils.isBookmarkNode(span))return;
	            if (/\s*border\s*:\s*none;?\s*/i.test(span.style.cssText)) {
	                if(/^\s*border\s*:\s*none;?\s*$/.test(span.style.cssText)){
	                    domUtils.remove(span, true);
	                }else{
	                    domUtils.removeStyle(span,'border');
	                }
	                return
	            }
	            if (/border/i.test(span.style.cssText) && span.parentNode.tagName == 'SPAN' && /border/i.test(span.parentNode.style.cssText)) {
	                span.style.cssText = span.style.cssText.replace(/border[^:]*:[^;]+;?/gi, '');
	            }
	            if(!(cmdName=='fontborder' && value=='none')){
	                var next = span.nextSibling;
	                while (next && next.nodeType == 1 && next.tagName == 'SPAN' ) {
	                    if(domUtils.isBookmarkNode(next) && cmdName == 'fontborder') {
	                        span.appendChild(next);
	                        next = span.nextSibling;
	                        continue;
	                    }
	                    if (next.style.cssText == span.style.cssText) {
	                        domUtils.moveChild(next, span);
	                        domUtils.remove(next);
	                    }
	                    if (span.nextSibling === next)
	                        break;
	                    next = span.nextSibling;
	                }
	            }


	            mergeWithParent(span);
	            if(browser.ie && browser.version > 8 ){
	                //拷贝父亲们的特别的属性,这里只做背景颜色的处理
	                var parent = domUtils.findParent(span,function(n){return n.tagName == 'SPAN' && /background-color/.test(n.style.cssText)});
	                if(parent && !/background-color/.test(span.style.cssText)){
	                    span.style.backgroundColor = parent.style.backgroundColor;
	                }
	            }

	        });
	        rng.moveToBookmark(bk);
	        mergeChild(rng,cmdName,value)
	    }

	    me.addInputRule(function (root) {
	        utils.each(root.getNodesByTagName('u s del font strike'), function (node) {
	            if (node.tagName == 'font') {
	                var cssStyle = [];
	                for (var p in node.attrs) {
	                    switch (p) {
	                        case 'size':
	                            cssStyle.push('font-size:' +
	                                ({
	                                '1':'10',
	                                '2':'12',
	                                '3':'16',
	                                '4':'18',
	                                '5':'24',
	                                '6':'32',
	                                '7':'48'
	                            }[node.attrs[p]] || node.attrs[p]) + 'px');
	                            break;
	                        case 'color':
	                            cssStyle.push('color:' + node.attrs[p]);
	                            break;
	                        case 'face':
	                            cssStyle.push('font-family:' + node.attrs[p]);
	                            break;
	                        case 'style':
	                            cssStyle.push(node.attrs[p]);
	                    }
	                }
	                node.attrs = {
	                    'style': cssStyle.join(';')
	                };
	            } else {
	                var val = node.tagName == 'u' ? 'underline' : 'line-through';
	                node.attrs = {
	                    'style': (node.getAttr('style') || '') + 'text-decoration:' + val + ';'
	                }
	            }
	            node.tagName = 'span';
	        });
//	        utils.each(root.getNodesByTagName('span'), function (node) {
//	            var val;
//	            if(val = node.getAttr('class')){
//	                if(/fontstrikethrough/.test(val)){
//	                    node.setStyle('text-decoration','line-through');
//	                    if(node.attrs['class']){
//	                        node.attrs['class'] = node.attrs['class'].replace(/fontstrikethrough/,'');
//	                    }else{
//	                        node.setAttr('class')
//	                    }
//	                }
//	                if(/fontborder/.test(val)){
//	                    node.setStyle('border','1px solid #000');
//	                    if(node.attrs['class']){
//	                        node.attrs['class'] = node.attrs['class'].replace(/fontborder/,'');
//	                    }else{
//	                        node.setAttr('class')
//	                    }
//	                }
//	            }
//	        });
	    });
//	    me.addOutputRule(function(root){
//	        utils.each(root.getNodesByTagName('span'), function (node) {
//	            var val;
//	            if(val = node.getStyle('text-decoration')){
//	                if(/line-through/.test(val)){
//	                    if(node.attrs['class']){
//	                        node.attrs['class'] += ' fontstrikethrough';
//	                    }else{
//	                        node.setAttr('class','fontstrikethrough')
//	                    }
//	                }
	//
//	                node.setStyle('text-decoration')
//	            }
//	            if(val = node.getStyle('border')){
//	                if(/1px/.test(val) && /solid/.test(val)){
//	                    if(node.attrs['class']){
//	                        node.attrs['class'] += ' fontborder';
	//
//	                    }else{
//	                        node.setAttr('class','fontborder')
//	                    }
//	                }
//	                node.setStyle('border')
	//
//	            }
//	        });
//	    });
	    for (var p in fonts) {
	        (function (cmd, style) {
	            UE.commands[cmd] = {
	                execCommand: function (cmdName, value) {
	                    value = value || (this.queryCommandState(cmdName) ? 'none' : cmdName == 'underline' ? 'underline' :
	                        cmdName == 'fontborder' ? '1px solid #000' :
	                            'line-through');
	                    var me = this,
	                        range = this.selection.getRange(),
	                        text;

	                    if (value == 'default') {

	                        if (range.collapsed) {
	                            text = me.document.createTextNode('font');
	                            range.insertNode(text).select();

	                        }
	                        me.execCommand('removeFormat', 'span,a', style);
	                        if (text) {
	                            range.setStartBefore(text).collapse(true);
	                            domUtils.remove(text);
	                        }
	                        mergesibling(range,cmdName,value);
	                        range.select()
	                    } else {
	                        if (!range.collapsed) {
	                            if (needCmd[cmd] && me.queryCommandValue(cmd)) {
	                                me.execCommand('removeFormat', 'span,a', style);
	                            }
	                            range = me.selection.getRange();

	                            range.applyInlineStyle('span', {'style': style + ':' + value});
	                            mergesibling(range, cmdName,value);
	                            range.select();
	                        } else {

	                            var span = domUtils.findParentByTagName(range.startContainer, 'span', true);
	                            text = me.document.createTextNode('font');
	                            if (span && !span.children.length && !span[browser.ie ? 'innerText' : 'textContent'].replace(fillCharReg, '').length) {
	                                //for ie hack when enter
	                                range.insertNode(text);
	                                if (needCmd[cmd]) {
	                                    range.selectNode(text).select();
	                                    me.execCommand('removeFormat', 'span,a', style, null);

	                                    span = domUtils.findParentByTagName(text, 'span', true);
	                                    range.setStartBefore(text);

	                                }
	                                span && (span.style.cssText += ';' + style + ':' + value);
	                                range.collapse(true).select();


	                            } else {
	                                range.insertNode(text);
	                                range.selectNode(text).select();
	                                span = range.document.createElement('span');

	                                if (needCmd[cmd]) {
	                                    //a标签内的不处理跳过
	                                    if (domUtils.findParentByTagName(text, 'a', true)) {
	                                        range.setStartBefore(text).setCursor();
	                                        domUtils.remove(text);
	                                        return;
	                                    }
	                                    me.execCommand('removeFormat', 'span,a', style);
	                                }

	                                span.style.cssText = style + ':' + value;


	                                text.parentNode.insertBefore(span, text);
	                                //修复，span套span 但样式不继承的问题
	                                if (!browser.ie || browser.ie && browser.version == 9) {
	                                    var spanParent = span.parentNode;
	                                    while (!domUtils.isBlockElm(spanParent)) {
	                                        if (spanParent.tagName == 'SPAN') {
	                                            //opera合并style不会加入";"
	                                            span.style.cssText = spanParent.style.cssText + ";" + span.style.cssText;
	                                        }
	                                        spanParent = spanParent.parentNode;
	                                    }
	                                }


	                                if (opera) {
	                                    setTimeout(function () {
	                                        range.setStart(span, 0).collapse(true);
	                                        mergesibling(range, cmdName,value);
	                                        range.select();
	                                    });
	                                } else {
	                                    range.setStart(span, 0).collapse(true);
	                                    mergesibling(range,cmdName,value);
	                                    range.select();
	                                }

	                                //trace:981
	                                //domUtils.mergeToParent(span)
	                            }
	                            domUtils.remove(text);
	                        }


	                    }
	                    return true;
	                },
	                queryCommandValue: function (cmdName) {
	                    var startNode = this.selection.getStart();

	                    //trace:946
	                    if (cmdName == 'underline' || cmdName == 'strikethrough') {
	                        var tmpNode = startNode, value;
	                        while (tmpNode && !domUtils.isBlockElm(tmpNode) && !domUtils.isBody(tmpNode)) {
	                            if (tmpNode.nodeType == 1) {
	                                value = domUtils.getComputedStyle(tmpNode, style);
	                                if (value != 'none') {
	                                    return value;
	                                }
	                            }

	                            tmpNode = tmpNode.parentNode;
	                        }
	                        return 'none';
	                    }
	                    if (cmdName == 'fontborder') {
	                        var tmp = startNode, val;
	                        while (tmp && dtd.$inline[tmp.tagName]) {
	                            if (val = domUtils.getComputedStyle(tmp, 'border')) {

	                                if (/1px/.test(val) && /solid/.test(val)) {
	                                    return val;
	                                }
	                            }
	                            tmp = tmp.parentNode;
	                        }
	                        return ''
	                    }

	                    if( cmdName == 'FontSize' ) {
	                        var styleVal = domUtils.getComputedStyle(startNode, style),
	                            tmp = /^([\d\.]+)(\w+)$/.exec( styleVal );

	                        if( tmp ) {

	                            return Math.floor( tmp[1] ) + tmp[2];

	                        }

	                        return styleVal;

	                    }

	                    return  domUtils.getComputedStyle(startNode, style);
	                },
	                queryCommandState: function (cmdName) {
	                    if (!needCmd[cmdName])
	                        return 0;
	                    var val = this.queryCommandValue(cmdName);
	                    if (cmdName == 'fontborder') {
	                        return /1px/.test(val) && /solid/.test(val)
	                    } else {
	                        return  cmdName == 'underline' ? /underline/.test(val) : /line\-through/.test(val);

	                    }

	                }
	            };
	        })(p, fonts[p]);
	    }
	};

	// plugins/link.js
	/**
	 * 超链接
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 插入超链接
	 * @command link
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { Object } options   设置自定义属性，例如：url、title、target
	 * @example
	 * ```javascript
	 * editor.execCommand( 'link', '{
	 *     url:'ueditor.baidu.com',
	 *     title:'ueditor',
	 *     target:'_blank'
	 * }' );
	 * ```
	 */
	/**
	 * 返回当前选中的第一个超链接节点
	 * @command link
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { Element } 超链接节点
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'link' );
	 * ```
	 */

	/**
	 * 取消超链接
	 * @command unlink
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'unlink');
	 * ```
	 */

	UE.plugins['link'] = function(){
	    function optimize( range ) {
	        var start = range.startContainer,end = range.endContainer;

	        if ( start = domUtils.findParentByTagName( start, 'a', true ) ) {
	            range.setStartBefore( start );
	        }
	        if ( end = domUtils.findParentByTagName( end, 'a', true ) ) {
	            range.setEndAfter( end );
	        }
	    }


	    UE.commands['unlink'] = {
	        execCommand : function() {
	            var range = this.selection.getRange(),
	                bookmark;
	            if(range.collapsed && !domUtils.findParentByTagName( range.startContainer, 'a', true )){
	                return;
	            }
	            bookmark = range.createBookmark();
	            optimize( range );
	            range.removeInlineStyle( 'a' ).moveToBookmark( bookmark ).select();
	        },
	        queryCommandState : function(){
	            return !this.highlight && this.queryCommandValue('link') ?  0 : -1;
	        }

	    };
	    function doLink(range,opt,me){
	        var rngClone = range.cloneRange(),
	            link = me.queryCommandValue('link');
	        optimize( range = range.adjustmentBoundary() );
	        var start = range.startContainer;
	        if(start.nodeType == 1 && link){
	            start = start.childNodes[range.startOffset];
	            if(start && start.nodeType == 1 && start.tagName == 'A' && /^(?:https?|ftp|file)\s*:\s*\/\//.test(start[browser.ie?'innerText':'textContent'])){
	                start[browser.ie ? 'innerText' : 'textContent'] =  utils.html(opt.textValue||opt.href);

	            }
	        }
	        if( !rngClone.collapsed || link){
	            range.removeInlineStyle( 'a' );
	            rngClone = range.cloneRange();
	        }

	        if ( rngClone.collapsed ) {
	            var a = range.document.createElement( 'a'),
	                text = '';
	            if(opt.textValue){

	                text =   utils.html(opt.textValue);
	                delete opt.textValue;
	            }else{
	                text =   utils.html(opt.href);

	            }
	            domUtils.setAttributes( a, opt );
	            start =  domUtils.findParentByTagName( rngClone.startContainer, 'a', true );
	            if(start && domUtils.isInNodeEndBoundary(rngClone,start)){
	                range.setStartAfter(start).collapse(true);

	            }
	            a[browser.ie ? 'innerText' : 'textContent'] = text;
	            range.insertNode(a).selectNode( a );
	        } else {
	            range.applyInlineStyle( 'a', opt );

	        }
	    }
	    UE.commands['link'] = {
	        execCommand : function( cmdName, opt ) {
	            var range;
	            opt._href && (opt._href = utils.unhtml(opt._href,/[<">]/g));
	            opt.href && (opt.href = utils.unhtml(opt.href,/[<">]/g));
	            opt.textValue && (opt.textValue = utils.unhtml(opt.textValue,/[<">]/g));
	            doLink(range=this.selection.getRange(),opt,this);
	            //闭合都不加占位符，如果加了会在a后边多个占位符节点，导致a是图片背景组成的列表，出现空白问题
	            range.collapse().select(true);

	        },
	        queryCommandValue : function() {
	            var range = this.selection.getRange(),
	                node;
	            if ( range.collapsed ) {
//	                    node = this.selection.getStart();
	                //在ie下getstart()取值偏上了
	                node = range.startContainer;
	                node = node.nodeType == 1 ? node : node.parentNode;

	                if ( node && (node = domUtils.findParentByTagName( node, 'a', true )) && ! domUtils.isInNodeEndBoundary(range,node)) {

	                    return node;
	                }
	            } else {
	                //trace:1111  如果是<p><a>xx</a></p> startContainer是p就会找不到a
	                range.shrinkBoundary();
	                var start = range.startContainer.nodeType  == 3 || !range.startContainer.childNodes[range.startOffset] ? range.startContainer : range.startContainer.childNodes[range.startOffset],
	                    end =  range.endContainer.nodeType == 3 || range.endOffset == 0 ? range.endContainer : range.endContainer.childNodes[range.endOffset-1],
	                    common = range.getCommonAncestor();
	                node = domUtils.findParentByTagName( common, 'a', true );
	                if ( !node && common.nodeType == 1){

	                    var as = common.getElementsByTagName( 'a' ),
	                        ps,pe;

	                    for ( var i = 0,ci; ci = as[i++]; ) {
	                        ps = domUtils.getPosition( ci, start ),pe = domUtils.getPosition( ci,end);
	                        if ( (ps & domUtils.POSITION_FOLLOWING || ps & domUtils.POSITION_CONTAINS)
	                            &&
	                            (pe & domUtils.POSITION_PRECEDING || pe & domUtils.POSITION_CONTAINS)
	                            ) {
	                            node = ci;
	                            break;
	                        }
	                    }
	                }
	                return node;
	            }

	        },
	        queryCommandState : function() {
	            //判断如果是视频的话连接不可用
	            //fix 853
	            var img = this.selection.getRange().getClosedNode(),
	                flag = img && (img.className == "edui-faked-video" || img.className.indexOf("edui-upload-video")!=-1);
	            return flag ? -1 : 0;
	        }
	    };
	};

	// plugins/iframe.js
	///import core
	///import plugins\inserthtml.js
	///commands 插入框架
	///commandsName  InsertFrame
	///commandsTitle  插入Iframe
	///commandsDialog  dialogs\insertframe

	UE.plugins['insertframe'] = function() {
	   var me =this;
	    function deleteIframe(){
	        me._iframe && delete me._iframe;
	    }

	    me.addListener("selectionchange",function(){
	        deleteIframe();
	    });

	};



	// plugins/scrawl.js
	///import core
	///commands 涂鸦
	///commandsName  Scrawl
	///commandsTitle  涂鸦
	///commandsDialog  dialogs\scrawl
	UE.commands['scrawl'] = {
	    queryCommandState : function(){
	        return ( browser.ie && browser.version  <= 8 ) ? -1 :0;
	    }
	};


	// plugins/removeformat.js
	/**
	 * 清除格式
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 清除文字样式
	 * @command removeformat
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param   {String}   tags     以逗号隔开的标签。如：strong
	 * @param   {String}   style    样式如：color
	 * @param   {String}   attrs    属性如:width
	 * @example
	 * ```javascript
	 * editor.execCommand( 'removeformat', 'strong','color','width' );
	 * ```
	 */

	UE.plugins['removeformat'] = function(){
	    var me = this;
	    me.setOpt({
	       'removeFormatTags': 'b,big,code,del,dfn,em,font,i,ins,kbd,q,samp,small,span,strike,strong,sub,sup,tt,u,var',
	       'removeFormatAttributes':'class,style,lang,width,height,align,hspace,valign'
	    });
	    me.commands['removeformat'] = {
	        execCommand : function( cmdName, tags, style, attrs,notIncludeA ) {

	            var tagReg = new RegExp( '^(?:' + (tags || this.options.removeFormatTags).replace( /,/g, '|' ) + ')$', 'i' ) ,
	                removeFormatAttributes = style ? [] : (attrs || this.options.removeFormatAttributes).split( ',' ),
	                range = new dom.Range( this.document ),
	                bookmark,node,parent,
	                filter = function( node ) {
	                    return node.nodeType == 1;
	                };

	            function isRedundantSpan (node) {
	                if (node.nodeType == 3 || node.tagName.toLowerCase() != 'span'){
	                    return 0;
	                }
	                if (browser.ie) {
	                    //ie 下判断实效，所以只能简单用style来判断
	                    //return node.style.cssText == '' ? 1 : 0;
	                    var attrs = node.attributes;
	                    if ( attrs.length ) {
	                        for ( var i = 0,l = attrs.length; i<l; i++ ) {
	                            if ( attrs[i].specified ) {
	                                return 0;
	                            }
	                        }
	                        return 1;
	                    }
	                }
	                return !node.attributes.length;
	            }
	            function doRemove( range ) {

	                var bookmark1 = range.createBookmark();
	                if ( range.collapsed ) {
	                    range.enlarge( true );
	                }

	                //不能把a标签切了
	                if(!notIncludeA){
	                    var aNode = domUtils.findParentByTagName(range.startContainer,'a',true);
	                    if(aNode){
	                        range.setStartBefore(aNode);
	                    }

	                    aNode = domUtils.findParentByTagName(range.endContainer,'a',true);
	                    if(aNode){
	                        range.setEndAfter(aNode);
	                    }

	                }


	                bookmark = range.createBookmark();

	                node = bookmark.start;

	                //切开始
	                while ( (parent = node.parentNode) && !domUtils.isBlockElm( parent ) ) {
	                    domUtils.breakParent( node, parent );

	                    domUtils.clearEmptySibling( node );
	                }
	                if ( bookmark.end ) {
	                    //切结束
	                    node = bookmark.end;
	                    while ( (parent = node.parentNode) && !domUtils.isBlockElm( parent ) ) {
	                        domUtils.breakParent( node, parent );
	                        domUtils.clearEmptySibling( node );
	                    }

	                    //开始去除样式
	                    var current = domUtils.getNextDomNode( bookmark.start, false, filter ),
	                        next;
	                    while ( current ) {
	                        if ( current == bookmark.end ) {
	                            break;
	                        }

	                        next = domUtils.getNextDomNode( current, true, filter );

	                        if ( !dtd.$empty[current.tagName.toLowerCase()] && !domUtils.isBookmarkNode( current ) ) {
	                            if ( tagReg.test( current.tagName ) ) {
	                                if ( style ) {
	                                    domUtils.removeStyle( current, style );
	                                    if ( isRedundantSpan( current ) && style != 'text-decoration'){
	                                        domUtils.remove( current, true );
	                                    }
	                                } else {
	                                    domUtils.remove( current, true );
	                                }
	                            } else {
	                                //trace:939  不能把list上的样式去掉
	                                if(!dtd.$tableContent[current.tagName] && !dtd.$list[current.tagName]){
	                                    domUtils.removeAttributes( current, removeFormatAttributes );
	                                    if ( isRedundantSpan( current ) ){
	                                        domUtils.remove( current, true );
	                                    }
	                                }

	                            }
	                        }
	                        current = next;
	                    }
	                }
	                //trace:1035
	                //trace:1096 不能把td上的样式去掉，比如边框
	                var pN = bookmark.start.parentNode;
	                if(domUtils.isBlockElm(pN) && !dtd.$tableContent[pN.tagName] && !dtd.$list[pN.tagName]){
	                    domUtils.removeAttributes(  pN,removeFormatAttributes );
	                }
	                pN = bookmark.end.parentNode;
	                if(bookmark.end && domUtils.isBlockElm(pN) && !dtd.$tableContent[pN.tagName]&& !dtd.$list[pN.tagName]){
	                    domUtils.removeAttributes(  pN,removeFormatAttributes );
	                }
	                range.moveToBookmark( bookmark ).moveToBookmark(bookmark1);
	                //清除冗余的代码 <b><bookmark></b>
	                var node = range.startContainer,
	                    tmp,
	                    collapsed = range.collapsed;
	                while(node.nodeType == 1 && domUtils.isEmptyNode(node) && dtd.$removeEmpty[node.tagName]){
	                    tmp = node.parentNode;
	                    range.setStartBefore(node);
	                    //trace:937
	                    //更新结束边界
	                    if(range.startContainer === range.endContainer){
	                        range.endOffset--;
	                    }
	                    domUtils.remove(node);
	                    node = tmp;
	                }

	                if(!collapsed){
	                    node = range.endContainer;
	                    while(node.nodeType == 1 && domUtils.isEmptyNode(node) && dtd.$removeEmpty[node.tagName]){
	                        tmp = node.parentNode;
	                        range.setEndBefore(node);
	                        domUtils.remove(node);

	                        node = tmp;
	                    }


	                }
	            }



	            range = this.selection.getRange();
	            doRemove( range );
	            range.select();

	        }

	    };

	};


	// plugins/blockquote.js
	/**
	 * 添加引用
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 添加引用
	 * @command blockquote
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'blockquote' );
	 * ```
	 */

	/**
	 * 添加引用
	 * @command blockquote
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { Object } attrs 节点属性
	 * @example
	 * ```javascript
	 * editor.execCommand( 'blockquote',{
	 *     style: "color: red;"
	 * } );
	 * ```
	 */


	UE.plugins['blockquote'] = function(){
	    var me = this;
	    function getObj(editor){
	        return domUtils.filterNodeList(editor.selection.getStartElementPath(),'blockquote');
	    }
	    me.commands['blockquote'] = {
	        execCommand : function( cmdName, attrs ) {
	            var range = this.selection.getRange(),
	                obj = getObj(this),
	                blockquote = dtd.blockquote,
	                bookmark = range.createBookmark();

	            if ( obj ) {

	                    var start = range.startContainer,
	                        startBlock = domUtils.isBlockElm(start) ? start : domUtils.findParent(start,function(node){return domUtils.isBlockElm(node)}),

	                        end = range.endContainer,
	                        endBlock = domUtils.isBlockElm(end) ? end :  domUtils.findParent(end,function(node){return domUtils.isBlockElm(node)});

	                    //处理一下li
	                    startBlock = domUtils.findParentByTagName(startBlock,'li',true) || startBlock;
	                    endBlock = domUtils.findParentByTagName(endBlock,'li',true) || endBlock;


	                    if(startBlock.tagName == 'LI' || startBlock.tagName == 'TD' || startBlock === obj || domUtils.isBody(startBlock)){
	                        domUtils.remove(obj,true);
	                    }else{
	                        domUtils.breakParent(startBlock,obj);
	                    }

	                    if(startBlock !== endBlock){
	                        obj = domUtils.findParentByTagName(endBlock,'blockquote');
	                        if(obj){
	                            if(endBlock.tagName == 'LI' || endBlock.tagName == 'TD'|| domUtils.isBody(endBlock)){
	                                obj.parentNode && domUtils.remove(obj,true);
	                            }else{
	                                domUtils.breakParent(endBlock,obj);
	                            }

	                        }
	                    }

	                    var blockquotes = domUtils.getElementsByTagName(this.document,'blockquote');
	                    for(var i=0,bi;bi=blockquotes[i++];){
	                        if(!bi.childNodes.length){
	                            domUtils.remove(bi);
	                        }else if(domUtils.getPosition(bi,startBlock)&domUtils.POSITION_FOLLOWING && domUtils.getPosition(bi,endBlock)&domUtils.POSITION_PRECEDING){
	                            domUtils.remove(bi,true);
	                        }
	                    }




	            } else {

	                var tmpRange = range.cloneRange(),
	                    node = tmpRange.startContainer.nodeType == 1 ? tmpRange.startContainer : tmpRange.startContainer.parentNode,
	                    preNode = node,
	                    doEnd = 1;

	                //调整开始
	                while ( 1 ) {
	                    if ( domUtils.isBody(node) ) {
	                        if ( preNode !== node ) {
	                            if ( range.collapsed ) {
	                                tmpRange.selectNode( preNode );
	                                doEnd = 0;
	                            } else {
	                                tmpRange.setStartBefore( preNode );
	                            }
	                        }else{
	                            tmpRange.setStart(node,0);
	                        }

	                        break;
	                    }
	                    if ( !blockquote[node.tagName] ) {
	                        if ( range.collapsed ) {
	                            tmpRange.selectNode( preNode );
	                        } else{
	                            tmpRange.setStartBefore( preNode);
	                        }
	                        break;
	                    }

	                    preNode = node;
	                    node = node.parentNode;
	                }

	                //调整结束
	                if ( doEnd ) {
	                    preNode = node =  node = tmpRange.endContainer.nodeType == 1 ? tmpRange.endContainer : tmpRange.endContainer.parentNode;
	                    while ( 1 ) {

	                        if ( domUtils.isBody( node ) ) {
	                            if ( preNode !== node ) {

	                                tmpRange.setEndAfter( preNode );

	                            } else {
	                                tmpRange.setEnd( node, node.childNodes.length );
	                            }

	                            break;
	                        }
	                        if ( !blockquote[node.tagName] ) {
	                            tmpRange.setEndAfter( preNode );
	                            break;
	                        }

	                        preNode = node;
	                        node = node.parentNode;
	                    }

	                }


	                node = range.document.createElement( 'blockquote' );
	                domUtils.setAttributes( node, attrs );
	                node.appendChild( tmpRange.extractContents() );
	                tmpRange.insertNode( node );
	                //去除重复的
	                var childs = domUtils.getElementsByTagName(node,'blockquote');
	                for(var i=0,ci;ci=childs[i++];){
	                    if(ci.parentNode){
	                        domUtils.remove(ci,true);
	                    }
	                }

	            }
	            range.moveToBookmark( bookmark ).select();
	        },
	        queryCommandState : function() {
	            return getObj(this) ? 1 : 0;
	        }
	    };
	};



	// plugins/convertcase.js
	/**
	 * 大小写转换
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 把选区内文本变大写，与“tolowercase”命令互斥
	 * @command touppercase
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'touppercase' );
	 * ```
	 */

	/**
	 * 把选区内文本变小写，与“touppercase”命令互斥
	 * @command tolowercase
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'tolowercase' );
	 * ```
	 */
	UE.commands['touppercase'] =
	UE.commands['tolowercase'] = {
	    execCommand:function (cmd) {
	        var me = this;
	        var rng = me.selection.getRange();
	        if(rng.collapsed){
	            return rng;
	        }
	        var bk = rng.createBookmark(),
	            bkEnd = bk.end,
	            filterFn = function( node ) {
	                return !domUtils.isBr(node) && !domUtils.isWhitespace( node );
	            },
	            curNode = domUtils.getNextDomNode( bk.start, false, filterFn );
	        while ( curNode && (domUtils.getPosition( curNode, bkEnd ) & domUtils.POSITION_PRECEDING) ) {

	            if ( curNode.nodeType == 3 ) {
	                curNode.nodeValue = curNode.nodeValue[cmd == 'touppercase' ? 'toUpperCase' : 'toLowerCase']();
	            }
	            curNode = domUtils.getNextDomNode( curNode, true, filterFn );
	            if(curNode === bkEnd){
	                break;
	            }

	        }
	        rng.moveToBookmark(bk).select();
	    }
	};



	// plugins/indent.js
	/**
	 * 首行缩进
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 缩进
	 * @command indent
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'indent' );
	 * ```
	 */
	UE.commands['indent'] = {
	    execCommand : function() {
	         var me = this,value = me.queryCommandState("indent") ? "0em" : (me.options.indentValue || '2em');
	         me.execCommand('Paragraph','p',{style:'text-indent:'+ value});
	    },
	    queryCommandState : function() {
	        var pN = domUtils.filterNodeList(this.selection.getStartElementPath(),'p h1 h2 h3 h4 h5 h6');
	        return pN && pN.style.textIndent && parseInt(pN.style.textIndent) ?  1 : 0;
	    }

	};


	// plugins/print.js
	/**
	 * 打印
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 打印
	 * @command print
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'print' );
	 * ```
	 */
	UE.commands['print'] = {
	    execCommand : function(){
	        this.window.print();
	    },
	    notNeedUndo : 1
	};



	// plugins/preview.js
	/**
	 * 预览
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 预览
	 * @command preview
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'preview' );
	 * ```
	 */
	UE.commands['preview'] = {
	    execCommand : function(){
	        var w = window.open('', '_blank', ''),
	            d = w.document;
	        d.open();
	        d.write('<!DOCTYPE html><html><head><meta charset="utf-8"/><script src="'+this.options.UEDITOR_HOME_URL+'ueditor.parse.js"></script><script>' +
	            "setTimeout(function(){uParse('div',{rootPath: '"+ this.options.UEDITOR_HOME_URL +"'})},300)" +
	            '</script></head><body><div>'+this.getContent(null,null,true)+'</div></body></html>');
	        d.close();
	    },
	    notNeedUndo : 1
	};


	// plugins/selectall.js
	/**
	 * 全选
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 选中所有内容
	 * @command selectall
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'selectall' );
	 * ```
	 */
	UE.plugins['selectall'] = function(){
	    var me = this;
	    me.commands['selectall'] = {
	        execCommand : function(){
	            //去掉了原生的selectAll,因为会出现报错和当内容为空时，不能出现闭合状态的光标
	            var me = this,body = me.body,
	                range = me.selection.getRange();
	            range.selectNodeContents(body);
	            if(domUtils.isEmptyBlock(body)){
	                //opera不能自动合并到元素的里边，要手动处理一下
	                if(browser.opera && body.firstChild && body.firstChild.nodeType == 1){
	                    range.setStartAtFirst(body.firstChild);
	                }
	                range.collapse(true);
	            }
	            range.select(true);
	        },
	        notNeedUndo : 1
	    };


	    //快捷键
	    me.addshortcutkey({
	         "selectAll" : "ctrl+65"
	    });
	};


	// plugins/paragraph.js
	/**
	 * 段落样式
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 段落格式
	 * @command paragraph
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param {String}   style               标签值为：'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'
	 * @param {Object}   attrs               标签的属性
	 * @example
	 * ```javascript
	 * editor.execCommand( 'Paragraph','h1','{
	 *     class:'test'
	 * }' );
	 * ```
	 */

	/**
	 * 返回选区内节点标签名
	 * @command paragraph
	 * @method queryCommandValue
	 * @param { String } cmd 命令字符串
	 * @return { String } 节点标签名
	 * @example
	 * ```javascript
	 * editor.queryCommandValue( 'Paragraph' );
	 * ```
	 */

	UE.plugins['paragraph'] = function() {
	    var me = this,
	        block = domUtils.isBlockElm,
	        notExchange = ['TD','LI','PRE'],

	        doParagraph = function(range,style,attrs,sourceCmdName){
	            var bookmark = range.createBookmark(),
	                filterFn = function( node ) {
	                    return   node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' &&  !domUtils.isBookmarkNode(node) : !domUtils.isWhitespace( node );
	                },
	                para;

	            range.enlarge( true );
	            var bookmark2 = range.createBookmark(),
	                current = domUtils.getNextDomNode( bookmark2.start, false, filterFn ),
	                tmpRange = range.cloneRange(),
	                tmpNode;
	            while ( current && !(domUtils.getPosition( current, bookmark2.end ) & domUtils.POSITION_FOLLOWING) ) {
	                if ( current.nodeType == 3 || !block( current ) ) {
	                    tmpRange.setStartBefore( current );
	                    while ( current && current !== bookmark2.end && !block( current ) ) {
	                        tmpNode = current;
	                        current = domUtils.getNextDomNode( current, false, null, function( node ) {
	                            return !block( node );
	                        } );
	                    }
	                    tmpRange.setEndAfter( tmpNode );
	                    
	                    para = range.document.createElement( style );
	                    if(attrs){
	                        domUtils.setAttributes(para,attrs);
	                        if(sourceCmdName && sourceCmdName == 'customstyle' && attrs.style){
	                            para.style.cssText = attrs.style;
	                        }
	                    }
	                    para.appendChild( tmpRange.extractContents() );
	                    //需要内容占位
	                    if(domUtils.isEmptyNode(para)){
	                        domUtils.fillChar(range.document,para);
	                        
	                    }

	                    tmpRange.insertNode( para );

	                    var parent = para.parentNode;
	                    //如果para上一级是一个block元素且不是body,td就删除它
	                    if ( block( parent ) && !domUtils.isBody( para.parentNode ) && utils.indexOf(notExchange,parent.tagName)==-1) {
	                        //存储dir,style
	                        if(!(sourceCmdName && sourceCmdName == 'customstyle')){
	                            parent.getAttribute('dir') && para.setAttribute('dir',parent.getAttribute('dir'));
	                            //trace:1070
	                            parent.style.cssText && (para.style.cssText = parent.style.cssText + ';' + para.style.cssText);
	                            //trace:1030
	                            parent.style.textAlign && !para.style.textAlign && (para.style.textAlign = parent.style.textAlign);
	                            parent.style.textIndent && !para.style.textIndent && (para.style.textIndent = parent.style.textIndent);
	                            parent.style.padding && !para.style.padding && (para.style.padding = parent.style.padding);
	                        }

	                        //trace:1706 选择的就是h1-6要删除
	                        if(attrs && /h\d/i.test(parent.tagName) && !/h\d/i.test(para.tagName) ){
	                            domUtils.setAttributes(parent,attrs);
	                            if(sourceCmdName && sourceCmdName == 'customstyle' && attrs.style){
	                                parent.style.cssText = attrs.style;
	                            }
	                            domUtils.remove(para,true);
	                            para = parent;
	                        }else{
	                            domUtils.remove( para.parentNode, true );
	                        }

	                    }
	                    if(  utils.indexOf(notExchange,parent.tagName)!=-1){
	                        current = parent;
	                    }else{
	                       current = para;
	                    }


	                    current = domUtils.getNextDomNode( current, false, filterFn );
	                } else {
	                    current = domUtils.getNextDomNode( current, true, filterFn );
	                }
	            }
	            return range.moveToBookmark( bookmark2 ).moveToBookmark( bookmark );
	        };
	    me.setOpt('paragraph',{'p':'', 'h1':'', 'h2':'', 'h3':'', 'h4':'', 'h5':'', 'h6':''});
	    me.commands['paragraph'] = {
	        execCommand : function( cmdName, style,attrs,sourceCmdName ) {
	            var range = this.selection.getRange();
	             //闭合时单独处理
	            if(range.collapsed){
	                var txt = this.document.createTextNode('p');
	                range.insertNode(txt);
	                //去掉冗余的fillchar
	                if(browser.ie){
	                    var node = txt.previousSibling;
	                    if(node && domUtils.isWhitespace(node)){
	                        domUtils.remove(node);
	                    }
	                    node = txt.nextSibling;
	                    if(node && domUtils.isWhitespace(node)){
	                        domUtils.remove(node);
	                    }
	                }

	            }
	            range = doParagraph(range,style,attrs,sourceCmdName);
	            if(txt){
	                range.setStartBefore(txt).collapse(true);
	                pN = txt.parentNode;

	                domUtils.remove(txt);

	                if(domUtils.isBlockElm(pN)&&domUtils.isEmptyNode(pN)){
	                    domUtils.fillNode(this.document,pN);
	                }

	            }

	            if(browser.gecko && range.collapsed && range.startContainer.nodeType == 1){
	                var child = range.startContainer.childNodes[range.startOffset];
	                if(child && child.nodeType == 1 && child.tagName.toLowerCase() == style){
	                    range.setStart(child,0).collapse(true);
	                }
	            }
	            //trace:1097 原来有true，原因忘了，但去了就不能清除多余的占位符了
	            range.select();


	            return true;
	        },
	        queryCommandValue : function() {
	            var node = domUtils.filterNodeList(this.selection.getStartElementPath(),'p h1 h2 h3 h4 h5 h6');
	            return node ? node.tagName.toLowerCase() : '';
	        }
	    };
	};


	// plugins/directionality.js
	/**
	 * 设置文字输入的方向的插件
	 * @file
	 * @since 1.2.6.1
	 */
	(function() {
	    var block = domUtils.isBlockElm ,
	        getObj = function(editor){
//	            var startNode = editor.selection.getStart(),
//	                parents;
//	            if ( startNode ) {
//	                //查找所有的是block的父亲节点
//	                parents = domUtils.findParents( startNode, true, block, true );
//	                for ( var i = 0,ci; ci = parents[i++]; ) {
//	                    if ( ci.getAttribute( 'dir' ) ) {
//	                        return ci;
//	                    }
//	                }
//	            }
	            return domUtils.filterNodeList(editor.selection.getStartElementPath(),function(n){return n && n.nodeType == 1 && n.getAttribute('dir')});

	        },
	        doDirectionality = function(range,editor,forward){
	            
	            var bookmark,
	                filterFn = function( node ) {
	                    return   node.nodeType == 1 ? !domUtils.isBookmarkNode(node) : !domUtils.isWhitespace(node);
	                },

	                obj = getObj( editor );

	            if ( obj && range.collapsed ) {
	                obj.setAttribute( 'dir', forward );
	                return range;
	            }
	            bookmark = range.createBookmark();
	            range.enlarge( true );
	            var bookmark2 = range.createBookmark(),
	                current = domUtils.getNextDomNode( bookmark2.start, false, filterFn ),
	                tmpRange = range.cloneRange(),
	                tmpNode;
	            while ( current &&  !(domUtils.getPosition( current, bookmark2.end ) & domUtils.POSITION_FOLLOWING) ) {
	                if ( current.nodeType == 3 || !block( current ) ) {
	                    tmpRange.setStartBefore( current );
	                    while ( current && current !== bookmark2.end && !block( current ) ) {
	                        tmpNode = current;
	                        current = domUtils.getNextDomNode( current, false, null, function( node ) {
	                            return !block( node );
	                        } );
	                    }
	                    tmpRange.setEndAfter( tmpNode );
	                    var common = tmpRange.getCommonAncestor();
	                    if ( !domUtils.isBody( common ) && block( common ) ) {
	                        //遍历到了block节点
	                        common.setAttribute( 'dir', forward );
	                        current = common;
	                    } else {
	                        //没有遍历到，添加一个block节点
	                        var p = range.document.createElement( 'p' );
	                        p.setAttribute( 'dir', forward );
	                        var frag = tmpRange.extractContents();
	                        p.appendChild( frag );
	                        tmpRange.insertNode( p );
	                        current = p;
	                    }

	                    current = domUtils.getNextDomNode( current, false, filterFn );
	                } else {
	                    current = domUtils.getNextDomNode( current, true, filterFn );
	                }
	            }
	            return range.moveToBookmark( bookmark2 ).moveToBookmark( bookmark );
	        };

	    /**
	     * 文字输入方向
	     * @command directionality
	     * @method execCommand
	     * @param { String } cmdName 命令字符串
	     * @param { String } forward 传入'ltr'表示从左向右输入，传入'rtl'表示从右向左输入
	     * @example
	     * ```javascript
	     * editor.execCommand( 'directionality', 'ltr');
	     * ```
	     */

	    /**
	     * 查询当前选区的文字输入方向
	     * @command directionality
	     * @method queryCommandValue
	     * @param { String } cmdName 命令字符串
	     * @return { String } 返回'ltr'表示从左向右输入，返回'rtl'表示从右向左输入
	     * @example
	     * ```javascript
	     * editor.queryCommandValue( 'directionality');
	     * ```
	     */
	    UE.commands['directionality'] = {
	        execCommand : function( cmdName,forward ) {
	            var range = this.selection.getRange();
	            //闭合时单独处理
	            if(range.collapsed){
	                var txt = this.document.createTextNode('d');
	                range.insertNode(txt);
	            }
	            doDirectionality(range,this,forward);
	            if(txt){
	                range.setStartBefore(txt).collapse(true);
	                domUtils.remove(txt);
	            }

	            range.select();
	            return true;
	        },
	        queryCommandValue : function() {
	            var node = getObj(this);
	            return node ? node.getAttribute('dir') : 'ltr';
	        }
	    };
	})();



	// plugins/horizontal.js
	/**
	 * 插入分割线插件
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 插入分割线
	 * @command horizontal
	 * @method execCommand
	 * @param { String } cmdName 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'horizontal' );
	 * ```
	 */
	UE.plugins['horizontal'] = function(){
	    var me = this;
	    me.commands['horizontal'] = {
	        execCommand : function( cmdName ) {
	            var me = this;
	            if(me.queryCommandState(cmdName)!==-1){
	                me.execCommand('insertHtml','<hr>');
	                var range = me.selection.getRange(),
	                    start = range.startContainer;
	                if(start.nodeType == 1 && !start.childNodes[range.startOffset] ){

	                    var tmp;
	                    if(tmp = start.childNodes[range.startOffset - 1]){
	                        if(tmp.nodeType == 1 && tmp.tagName == 'HR'){
	                            if(me.options.enterTag == 'p'){
	                                tmp = me.document.createElement('p');
	                                range.insertNode(tmp);
	                                range.setStart(tmp,0).setCursor();

	                            }else{
	                                tmp = me.document.createElement('br');
	                                range.insertNode(tmp);
	                                range.setStartBefore(tmp).setCursor();
	                            }
	                        }
	                    }

	                }
	                return true;
	            }

	        },
	        //边界在table里不能加分隔线
	        queryCommandState : function() {
	            return domUtils.filterNodeList(this.selection.getStartElementPath(),'table') ? -1 : 0;
	        }
	    };
//	    me.addListener('delkeyup',function(){
//	        var rng = this.selection.getRange();
//	        if(browser.ie && browser.version > 8){
//	            rng.txtToElmBoundary(true);
//	            if(domUtils.isStartInblock(rng)){
//	                var tmpNode = rng.startContainer;
//	                var pre = tmpNode.previousSibling;
//	                if(pre && domUtils.isTagNode(pre,'hr')){
//	                    domUtils.remove(pre);
//	                    rng.select();
//	                    return;
//	                }
//	            }
//	        }
//	        if(domUtils.isBody(rng.startContainer)){
//	            var hr = rng.startContainer.childNodes[rng.startOffset -1];
//	            if(hr && hr.nodeName == 'HR'){
//	                var next = hr.nextSibling;
//	                if(next){
//	                    rng.setStart(next,0)
//	                }else if(hr.previousSibling){
//	                    rng.setStartAtLast(hr.previousSibling)
//	                }else{
//	                    var p = this.document.createElement('p');
//	                    hr.parentNode.insertBefore(p,hr);
//	                    domUtils.fillNode(this.document,p);
//	                    rng.setStart(p,0);
//	                }
//	                domUtils.remove(hr);
//	                rng.setCursor(false,true);
//	            }
//	        }
//	    })
	    me.addListener('delkeydown',function(name,evt){
	        var rng = this.selection.getRange();
	        rng.txtToElmBoundary(true);
	        if(domUtils.isStartInblock(rng)){
	            var tmpNode = rng.startContainer;
	            var pre = tmpNode.previousSibling;
	            if(pre && domUtils.isTagNode(pre,'hr')){
	                domUtils.remove(pre);
	                rng.select();
	                domUtils.preventDefault(evt);
	                return true;

	            }
	        }

	    })
	};



	// plugins/time.js
	/**
	 * 插入时间和日期
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 插入时间，默认格式：12:59:59
	 * @command time
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'time');
	 * ```
	 */

	/**
	 * 插入日期，默认格式：2013-08-30
	 * @command date
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'date');
	 * ```
	 */
	UE.commands['time'] = UE.commands["date"] = {
	    execCommand : function(cmd, format){
	        var date = new Date;

	        function formatTime(date, format) {
	            var hh = ('0' + date.getHours()).slice(-2),
	                ii = ('0' + date.getMinutes()).slice(-2),
	                ss = ('0' + date.getSeconds()).slice(-2);
	            format = format || 'hh:ii:ss';
	            return format.replace(/hh/ig, hh).replace(/ii/ig, ii).replace(/ss/ig, ss);
	        }
	        function formatDate(date, format) {
	            var yyyy = ('000' + date.getFullYear()).slice(-4),
	                yy = yyyy.slice(-2),
	                mm = ('0' + (date.getMonth()+1)).slice(-2),
	                dd = ('0' + date.getDate()).slice(-2);
	            format = format || 'yyyy-mm-dd';
	            return format.replace(/yyyy/ig, yyyy).replace(/yy/ig, yy).replace(/mm/ig, mm).replace(/dd/ig, dd);
	        }

	        this.execCommand('insertHtml',cmd == "time" ? formatTime(date, format):formatDate(date, format) );
	    }
	};


	// plugins/rowspacing.js
	/**
	 * 段前段后间距插件
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 设置段间距
	 * @command rowspacing
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @param { String } value 段间距的值，以px为单位
	 * @param { String } dir 间距位置，top或bottom，分别表示段前和段后
	 * @example
	 * ```javascript
	 * editor.execCommand( 'rowspacing', '10', 'top' );
	 * ```
	 */

	UE.plugins['rowspacing'] = function(){
	    var me = this;
	    me.setOpt({
	        'rowspacingtop':['5', '10', '15', '20', '25'],
	        'rowspacingbottom':['5', '10', '15', '20', '25']

	    });
	    me.commands['rowspacing'] =  {
	        execCommand : function( cmdName,value,dir ) {
	            this.execCommand('paragraph','p',{style:'margin-'+dir+':'+value + 'px'});
	            return true;
	        },
	        queryCommandValue : function(cmdName,dir) {
	            var pN = domUtils.filterNodeList(this.selection.getStartElementPath(),function(node){return domUtils.isBlockElm(node) }),
	                value;
	            //trace:1026
	            if(pN){
	                value = domUtils.getComputedStyle(pN,'margin-'+dir).replace(/[^\d]/g,'');
	                return !value ? 0 : value;
	            }
	            return 0;

	        }
	    };
	};




	// plugins/lineheight.js
	/**
	 * 设置行内间距
	 * @file
	 * @since 1.2.6.1
	 */
	UE.plugins['lineheight'] = function(){
	    var me = this;
	    me.setOpt({'lineheight':['1', '1.5','1.75','2', '3', '4', '5']});

	    /**
	     * 行距
	     * @command lineheight
	     * @method execCommand
	     * @param { String } cmdName 命令字符串
	     * @param { String } value 传入的行高值， 该值是当前字体的倍数， 例如： 1.5, 1.75
	     * @example
	     * ```javascript
	     * editor.execCommand( 'lineheight', 1.5);
	     * ```
	     */
	    /**
	     * 查询当前选区内容的行高大小
	     * @command lineheight
	     * @method queryCommandValue
	     * @param { String } cmd 命令字符串
	     * @return { String } 返回当前行高大小
	     * @example
	     * ```javascript
	     * editor.queryCommandValue( 'lineheight' );
	     * ```
	     */

	    me.commands['lineheight'] =  {
	        execCommand : function( cmdName,value ) {
	            this.execCommand('paragraph','p',{style:'line-height:'+ (value == "1" ? "normal" : value + 'em') });
	            return true;
	        },
	        queryCommandValue : function() {
	            var pN = domUtils.filterNodeList(this.selection.getStartElementPath(),function(node){return domUtils.isBlockElm(node)});
	            if(pN){
	                var value = domUtils.getComputedStyle(pN,'line-height');
	                return value == 'normal' ? 1 : value.replace(/[^\d.]*/ig,"");
	            }
	        }
	    };
	};




	// plugins/insertcode.js
	/**
	 * 插入代码插件
	 * @file
	 * @since 1.2.6.1
	 */

	UE.plugins['insertcode'] = function() {
	    var me = this;
	    me.ready(function(){
	        utils.cssRule('pre','pre{margin:.5em 0;padding:.4em .6em;border-radius:8px;background:#f8f8f8;}',
	            me.document)
	    });
	    me.setOpt('insertcode',{
	            'as3':'ActionScript3',
	            'bash':'Bash/Shell',
	            'cpp':'C/C++',
	            'css':'Css',
	            'cf':'CodeFunction',
	            'c#':'C#',
	            'delphi':'Delphi',
	            'diff':'Diff',
	            'erlang':'Erlang',
	            'groovy':'Groovy',
	            'html':'Html',
	            'java':'Java',
	            'jfx':'JavaFx',
	            'js':'Javascript',
	            'pl':'Perl',
	            'php':'Php',
	            'plain':'Plain Text',
	            'ps':'PowerShell',
	            'python':'Python',
	            'ruby':'Ruby',
	            'scala':'Scala',
	            'sql':'Sql',
	            'vb':'Vb',
	            'xml':'Xml'
	    });

	    /**
	     * 插入代码
	     * @command insertcode
	     * @method execCommand
	     * @param { String } cmd 命令字符串
	     * @param { String } lang 插入代码的语言
	     * @example
	     * ```javascript
	     * editor.execCommand( 'insertcode', 'javascript' );
	     * ```
	     */

	    /**
	     * 如果选区所在位置是插入插入代码区域，返回代码的语言
	     * @command insertcode
	     * @method queryCommandValue
	     * @param { String } cmd 命令字符串
	     * @return { String } 返回代码的语言
	     * @example
	     * ```javascript
	     * editor.queryCommandValue( 'insertcode' );
	     * ```
	     */

	    me.commands['insertcode'] = {
	        execCommand : function(cmd,lang){
	            var me = this,
	                rng = me.selection.getRange(),
	                pre = domUtils.findParentByTagName(rng.startContainer,'pre',true);
	            if(pre){
	                pre.className = 'brush:'+lang+';toolbar:false;';
	            }else{
	                var code = '';
	                if(rng.collapsed){
	                    code = browser.ie && browser.ie11below ? (browser.version <= 8 ? '&nbsp;':''):'<br/>';
	                }else{
	                    var frag = rng.extractContents();
	                    var div = me.document.createElement('div');
	                    div.appendChild(frag);

	                    utils.each(UE.filterNode(UE.htmlparser(div.innerHTML.replace(/[\r\t]/g,'')),me.options.filterTxtRules).children,function(node){
	                        if(browser.ie && browser.ie11below && browser.version > 8){

	                            if(node.type =='element'){
	                                if(node.tagName == 'br'){
	                                    code += '\n'
	                                }else if(!dtd.$empty[node.tagName]){
	                                    utils.each(node.children,function(cn){
	                                        if(cn.type =='element'){
	                                            if(cn.tagName == 'br'){
	                                                code += '\n'
	                                            }else if(!dtd.$empty[node.tagName]){
	                                                code += cn.innerText();
	                                            }
	                                        }else{
	                                            code += cn.data
	                                        }
	                                    })
	                                    if(!/\n$/.test(code)){
	                                        code += '\n';
	                                    }
	                                }
	                            }else{
	                                code += node.data + '\n'
	                            }
	                            if(!node.nextSibling() && /\n$/.test(code)){
	                                code = code.replace(/\n$/,'');
	                            }
	                        }else{
	                            if(browser.ie && browser.ie11below){

	                                if(node.type =='element'){
	                                    if(node.tagName == 'br'){
	                                        code += '<br>'
	                                    }else if(!dtd.$empty[node.tagName]){
	                                        utils.each(node.children,function(cn){
	                                            if(cn.type =='element'){
	                                                if(cn.tagName == 'br'){
	                                                    code += '<br>'
	                                                }else if(!dtd.$empty[node.tagName]){
	                                                    code += cn.innerText();
	                                                }
	                                            }else{
	                                                code += cn.data
	                                            }
	                                        });
	                                        if(!/br>$/.test(code)){
	                                            code += '<br>';
	                                        }
	                                    }
	                                }else{
	                                    code += node.data + '<br>'
	                                }
	                                if(!node.nextSibling() && /<br>$/.test(code)){
	                                    code = code.replace(/<br>$/,'');
	                                }

	                            }else{
	                                code += (node.type == 'element' ? (dtd.$empty[node.tagName] ?  '' : node.innerText()) : node.data);
	                                if(!/br\/?\s*>$/.test(code)){
	                                    if(!node.nextSibling())
	                                        return;
	                                    code += '<br>'
	                                }
	                            }

	                        }

	                    });
	                }
	                me.execCommand('inserthtml','<pre id="coder"class="brush:'+lang+';toolbar:false">'+code+'</pre>',true);

	                pre = me.document.getElementById('coder');
	                domUtils.removeAttributes(pre,'id');
	                var tmpNode = pre.previousSibling;

	                if(tmpNode && (tmpNode.nodeType == 3 && tmpNode.nodeValue.length == 1 && browser.ie && browser.version == 6 ||  domUtils.isEmptyBlock(tmpNode))){

	                    domUtils.remove(tmpNode)
	                }
	                var rng = me.selection.getRange();
	                if(domUtils.isEmptyBlock(pre)){
	                    rng.setStart(pre,0).setCursor(false,true)
	                }else{
	                    rng.selectNodeContents(pre).select()
	                }
	            }



	        },
	        queryCommandValue : function(){
	            var path = this.selection.getStartElementPath();
	            var lang = '';
	            utils.each(path,function(node){
	                if(node.nodeName =='PRE'){
	                    var match = node.className.match(/brush:([^;]+)/);
	                    lang = match && match[1] ? match[1] : '';
	                    return false;
	                }
	            });
	            return lang;
	        }
	    };

	    me.addInputRule(function(root){
	       utils.each(root.getNodesByTagName('pre'),function(pre){
	           var brs = pre.getNodesByTagName('br');
	           if(brs.length){
	               browser.ie && browser.ie11below && browser.version > 8 && utils.each(brs,function(br){
	                   var txt = UE.uNode.createText('\n');
	                   br.parentNode.insertBefore(txt,br);
	                   br.parentNode.removeChild(br);
	               });
	               return;
	            }
	           if(browser.ie && browser.ie11below && browser.version > 8)
	                return;
	            var code = pre.innerText().split(/\n/);
	            pre.innerHTML('');
	            utils.each(code,function(c){
	                if(c.length){
	                    pre.appendChild(UE.uNode.createText(c));
	                }
	                pre.appendChild(UE.uNode.createElement('br'))
	            })
	       })
	    });
	    me.addOutputRule(function(root){
	        utils.each(root.getNodesByTagName('pre'),function(pre){
	            var code = '';
	            utils.each(pre.children,function(n){
	               if(n.type == 'text'){
	                   //在ie下文本内容有可能末尾带有\n要去掉
	                   //trace:3396
	                   code += n.data.replace(/[ ]/g,'&nbsp;').replace(/\n$/,'');
	               }else{
	                   if(n.tagName == 'br'){
	                       code  += '\n'
	                   }else{
	                       code += (!dtd.$empty[n.tagName] ? '' : n.innerText());
	                   }

	               }

	            });

	            pre.innerText(code.replace(/(&nbsp;|\n)+$/,''))
	        })
	    });
	    //不需要判断highlight的command列表
	    me.notNeedCodeQuery ={
	        help:1,
	        undo:1,
	        redo:1,
	        source:1,
	        print:1,
	        searchreplace:1,
	        fullscreen:1,
	        preview:1,
	        insertparagraph:1,
	        elementpath:1,
	        insertcode:1,
	        inserthtml:1,
	        selectall:1
	    };
	    //将queyCommamndState重置
	    var orgQuery = me.queryCommandState;
	    me.queryCommandState = function(cmd){
	        var me = this;

	        if(!me.notNeedCodeQuery[cmd.toLowerCase()] && me.selection && me.queryCommandValue('insertcode')){
	            return -1;
	        }
	        return UE.Editor.prototype.queryCommandState.apply(this,arguments)
	    };
	    me.addListener('beforeenterkeydown',function(){
	        var rng = me.selection.getRange();
	        var pre = domUtils.findParentByTagName(rng.startContainer,'pre',true);
	        if(pre){
	            me.fireEvent('saveScene');
	            if(!rng.collapsed){
	               rng.deleteContents();
	            }
	            if(!browser.ie || browser.ie9above){
	                var tmpNode = me.document.createElement('br'),pre;
	                rng.insertNode(tmpNode).setStartAfter(tmpNode).collapse(true);
	                var next = tmpNode.nextSibling;
	                if(!next && (!browser.ie || browser.version > 10)){
	                    rng.insertNode(tmpNode.cloneNode(false));
	                }else{
	                    rng.setStartAfter(tmpNode);
	                }
	                pre = tmpNode.previousSibling;
	                var tmp;
	                while(pre ){
	                    tmp = pre;
	                    pre = pre.previousSibling;
	                    if(!pre || pre.nodeName == 'BR'){
	                        pre = tmp;
	                        break;
	                    }
	                }
	                if(pre){
	                    var str = '';
	                    while(pre && pre.nodeName != 'BR' &&  new RegExp('^[\\s'+domUtils.fillChar+']*$').test(pre.nodeValue)){
	                        str += pre.nodeValue;
	                        pre = pre.nextSibling;
	                    }
	                    if(pre.nodeName != 'BR'){
	                        var match = pre.nodeValue.match(new RegExp('^([\\s'+domUtils.fillChar+']+)'));
	                        if(match && match[1]){
	                            str += match[1]
	                        }

	                    }
	                    if(str){
	                        str = me.document.createTextNode(str);
	                        rng.insertNode(str).setStartAfter(str);
	                    }
	                }
	                rng.collapse(true).select(true);
	            }else{
	                if(browser.version > 8){

	                    var txt = me.document.createTextNode('\n');
	                    var start = rng.startContainer;
	                    if(rng.startOffset == 0){
	                        var preNode = start.previousSibling;
	                        if(preNode){
	                            rng.insertNode(txt);
	                            var fillchar = me.document.createTextNode(' ');
	                            rng.setStartAfter(txt).insertNode(fillchar).setStart(fillchar,0).collapse(true).select(true)
	                        }
	                    }else{
	                        rng.insertNode(txt).setStartAfter(txt);
	                        var fillchar = me.document.createTextNode(' ');
	                        start = rng.startContainer.childNodes[rng.startOffset];
	                        if(start && !/^\n/.test(start.nodeValue)){
	                            rng.setStartBefore(txt)
	                        }
	                        rng.insertNode(fillchar).setStart(fillchar,0).collapse(true).select(true)
	                    }

	                }else{
	                    var tmpNode = me.document.createElement('br');
	                    rng.insertNode(tmpNode);
	                    rng.insertNode(me.document.createTextNode(domUtils.fillChar));
	                    rng.setStartAfter(tmpNode);
	                    pre = tmpNode.previousSibling;
	                    var tmp;
	                    while(pre ){
	                        tmp = pre;
	                        pre = pre.previousSibling;
	                        if(!pre || pre.nodeName == 'BR'){
	                            pre = tmp;
	                            break;
	                        }
	                    }
	                    if(pre){
	                        var str = '';
	                        while(pre && pre.nodeName != 'BR' &&  new RegExp('^[ '+domUtils.fillChar+']*$').test(pre.nodeValue)){
	                            str += pre.nodeValue;
	                            pre = pre.nextSibling;
	                        }
	                        if(pre.nodeName != 'BR'){
	                            var match = pre.nodeValue.match(new RegExp('^([ '+domUtils.fillChar+']+)'));
	                            if(match && match[1]){
	                                str += match[1]
	                            }

	                        }

	                        str = me.document.createTextNode(str);
	                        rng.insertNode(str).setStartAfter(str);
	                    }
	                    rng.collapse(true).select();
	                }


	            }
	            me.fireEvent('saveScene');
	            return true;
	        }


	    });

	    me.addListener('tabkeydown',function(cmd,evt){
	        var rng = me.selection.getRange();
	        var pre = domUtils.findParentByTagName(rng.startContainer,'pre',true);
	        if(pre){
	            me.fireEvent('saveScene');
	            if(evt.shiftKey){

	            }else{
	                if(!rng.collapsed){
	                    var bk = rng.createBookmark();
	                    var start = bk.start.previousSibling;

	                    while(start){
	                        if(pre.firstChild === start && !domUtils.isBr(start)){
	                            pre.insertBefore(me.document.createTextNode('    '),start);

	                            break;
	                        }
	                        if(domUtils.isBr(start)){
	                            pre.insertBefore(me.document.createTextNode('    '),start.nextSibling);

	                            break;
	                        }
	                        start = start.previousSibling;
	                    }
	                    var end = bk.end;
	                    start = bk.start.nextSibling;
	                    if(pre.firstChild === bk.start){
	                        pre.insertBefore(me.document.createTextNode('    '),start.nextSibling)

	                    }
	                    while(start && start !== end){
	                        if(domUtils.isBr(start) && start.nextSibling){
	                            if(start.nextSibling === end){
	                                break;
	                            }
	                            pre.insertBefore(me.document.createTextNode('    '),start.nextSibling)
	                        }

	                        start = start.nextSibling;
	                    }
	                    rng.moveToBookmark(bk).select();
	                }else{
	                    var tmpNode = me.document.createTextNode('    ');
	                    rng.insertNode(tmpNode).setStartAfter(tmpNode).collapse(true).select(true);
	                }
	            }


	            me.fireEvent('saveScene');
	            return true;
	        }


	    });


	    me.addListener('beforeinserthtml',function(evtName,html){
	        var me = this,
	            rng = me.selection.getRange(),
	            pre = domUtils.findParentByTagName(rng.startContainer,'pre',true);
	        if(pre){
	            if(!rng.collapsed){
	                rng.deleteContents()
	            }
	            var htmlstr = '';
	            if(browser.ie && browser.version > 8){

	                utils.each(UE.filterNode(UE.htmlparser(html),me.options.filterTxtRules).children,function(node){
	                    if(node.type =='element'){
	                        if(node.tagName == 'br'){
	                            htmlstr += '\n'
	                        }else if(!dtd.$empty[node.tagName]){
	                            utils.each(node.children,function(cn){
	                                if(cn.type =='element'){
	                                    if(cn.tagName == 'br'){
	                                        htmlstr += '\n'
	                                    }else if(!dtd.$empty[node.tagName]){
	                                        htmlstr += cn.innerText();
	                                    }
	                                }else{
	                                    htmlstr += cn.data
	                                }
	                            })
	                            if(!/\n$/.test(htmlstr)){
	                                htmlstr += '\n';
	                            }
	                        }
	                    }else{
	                        htmlstr += node.data + '\n'
	                    }
	                    if(!node.nextSibling() && /\n$/.test(htmlstr)){
	                        htmlstr = htmlstr.replace(/\n$/,'');
	                    }
	                });
	                var tmpNode = me.document.createTextNode(utils.html(htmlstr.replace(/&nbsp;/g,' ')));
	                rng.insertNode(tmpNode).selectNode(tmpNode).select();
	            }else{
	                var frag = me.document.createDocumentFragment();

	                utils.each(UE.filterNode(UE.htmlparser(html),me.options.filterTxtRules).children,function(node){
	                    if(node.type =='element'){
	                        if(node.tagName == 'br'){
	                            frag.appendChild(me.document.createElement('br'))
	                        }else if(!dtd.$empty[node.tagName]){
	                            utils.each(node.children,function(cn){
	                                if(cn.type =='element'){
	                                    if(cn.tagName == 'br'){

	                                        frag.appendChild(me.document.createElement('br'))
	                                    }else if(!dtd.$empty[node.tagName]){
	                                        frag.appendChild(me.document.createTextNode(utils.html(cn.innerText().replace(/&nbsp;/g,' '))));

	                                    }
	                                }else{
	                                    frag.appendChild(me.document.createTextNode(utils.html( cn.data.replace(/&nbsp;/g,' '))));

	                                }
	                            })
	                            if(frag.lastChild.nodeName != 'BR'){
	                                frag.appendChild(me.document.createElement('br'))
	                            }
	                        }
	                    }else{
	                        frag.appendChild(me.document.createTextNode(utils.html( node.data.replace(/&nbsp;/g,' '))));
	                    }
	                    if(!node.nextSibling() && frag.lastChild.nodeName == 'BR'){
	                       frag.removeChild(frag.lastChild)
	                    }


	                });
	                rng.insertNode(frag).select();

	            }

	            return true;
	        }
	    });
	    //方向键的处理
	    me.addListener('keydown',function(cmd,evt){
	        var me = this,keyCode = evt.keyCode || evt.which;
	        if(keyCode == 40){
	            var rng = me.selection.getRange(),pre,start = rng.startContainer;
	            if(rng.collapsed && (pre = domUtils.findParentByTagName(rng.startContainer,'pre',true)) && !pre.nextSibling){
	                var last = pre.lastChild
	                while(last && last.nodeName == 'BR'){
	                    last = last.previousSibling;
	                }
	                if(last === start || rng.startContainer === pre && rng.startOffset == pre.childNodes.length){
	                    me.execCommand('insertparagraph');
	                    domUtils.preventDefault(evt)
	                }

	            }
	        }
	    });
	    //trace:3395
	    me.addListener('delkeydown',function(type,evt){
	        var rng = this.selection.getRange();
	        rng.txtToElmBoundary(true);
	        var start = rng.startContainer;
	        if(domUtils.isTagNode(start,'pre') && rng.collapsed && domUtils.isStartInblock(rng)){
	            var p = me.document.createElement('p');
	            domUtils.fillNode(me.document,p);
	            start.parentNode.insertBefore(p,start);
	            domUtils.remove(start);
	            rng.setStart(p,0).setCursor(false,true);
	            domUtils.preventDefault(evt);
	            return true;
	        }
	    })
	};


	// plugins/cleardoc.js
	/**
	 * 清空文档插件
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 清空文档
	 * @command cleardoc
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * //editor 是编辑器实例
	 * editor.execCommand('cleardoc');
	 * ```
	 */

	UE.commands['cleardoc'] = {
	    execCommand : function( cmdName) {
	        var me = this,
	            enterTag = me.options.enterTag,
	            range = me.selection.getRange();
	        if(enterTag == "br"){
	            me.body.innerHTML = "<br/>";
	            range.setStart(me.body,0).setCursor();
	        }else{
	            me.body.innerHTML = "<p>"+(ie ? "" : "<br/>")+"</p>";
	            range.setStart(me.body.firstChild,0).setCursor(false,true);
	        }
	        setTimeout(function(){
	            me.fireEvent("clearDoc");
	        },0);

	    }
	};



	// plugins/anchor.js
	/**
	 * 锚点插件，为UEditor提供插入锚点支持
	 * @file
	 * @since 1.2.6.1
	 */
	UE.plugin.register('anchor', function (){

	    return {
	        bindEvents:{
	            'ready':function(){
	                utils.cssRule('anchor',
	                    '.anchorclass{background: url(\''
	                        + this.options.themePath
	                        + this.options.theme +'/images/anchor.gif\') no-repeat scroll left center transparent;cursor: auto;display: inline-block;height: 16px;width: 15px;}',
	                    this.document);
	            }
	        },
	       outputRule: function(root){
	           utils.each(root.getNodesByTagName('img'),function(a){
	               var val;
	               if(val = a.getAttr('anchorname')){
	                   a.tagName = 'a';
	                   a.setAttr({
	                       anchorname : '',
	                       name : val,
	                       'class' : ''
	                   })
	               }
	           })
	       },
	       inputRule:function(root){
	           utils.each(root.getNodesByTagName('a'),function(a){
	               var val;
	               if((val = a.getAttr('name')) && !a.getAttr('href')){
	                   a.tagName = 'img';
	                   a.setAttr({
	                       anchorname :a.getAttr('name'),
	                       'class' : 'anchorclass'
	                   });
	                   a.setAttr('name')

	               }
	           })

	       },
	       commands:{
	           /**
	            * 插入锚点
	            * @command anchor
	            * @method execCommand
	            * @param { String } cmd 命令字符串
	            * @param { String } name 锚点名称字符串
	            * @example
	            * ```javascript
	            * //editor 是编辑器实例
	            * editor.execCommand('anchor', 'anchor1');
	            * ```
	            */
	           'anchor':{
	               execCommand:function (cmd, name) {
	                   var range = this.selection.getRange(),img = range.getClosedNode();
	                   if (img && img.getAttribute('anchorname')) {
	                       if (name) {
	                           img.setAttribute('anchorname', name);
	                       } else {
	                           range.setStartBefore(img).setCursor();
	                           domUtils.remove(img);
	                       }
	                   } else {
	                       if (name) {
	                           //只在选区的开始插入
	                           var anchor = this.document.createElement('img');
	                           range.collapse(true);
	                           domUtils.setAttributes(anchor,{
	                               'anchorname':name,
	                               'class':'anchorclass'
	                           });
	                           range.insertNode(anchor).setStartAfter(anchor).setCursor(false,true);
	                       }
	                   }
	               }
	           }
	       }
	    }
	});


	// plugins/wordcount.js
	///import core
	///commands 字数统计
	///commandsName  WordCount,wordCount
	///commandsTitle  字数统计
	/*
	 * Created by JetBrains WebStorm.
	 * User: taoqili
	 * Date: 11-9-7
	 * Time: 下午8:18
	 * To change this template use File | Settings | File Templates.
	 */

	UE.plugins['wordcount'] = function(){
	    var me = this;
	    me.setOpt('wordCount',true);
	    me.addListener('contentchange',function(){
	        me.fireEvent('wordcount');
	    });
	    var timer;
	    me.addListener('ready',function(){
	        var me = this;
	        domUtils.on(me.body,"keyup",function(evt){
	            var code = evt.keyCode||evt.which,
	                //忽略的按键,ctr,alt,shift,方向键
	                ignores = {"16":1,"18":1,"20":1,"37":1,"38":1,"39":1,"40":1};
	            if(code in ignores) return;
	            clearTimeout(timer);
	            timer = setTimeout(function(){
	                me.fireEvent('wordcount');
	            },200)
	        })
	    });
	};


	// plugins/pagebreak.js
	/**
	 * 分页功能插件
	 * @file
	 * @since 1.2.6.1
	 */
	UE.plugins['pagebreak'] = function () {
	    var me = this,
	        notBreakTags = ['td'];
	    me.setOpt('pageBreakTag','_ueditor_page_break_tag_');

	    function fillNode(node){
	        if(domUtils.isEmptyBlock(node)){
	            var firstChild = node.firstChild,tmpNode;

	            while(firstChild && firstChild.nodeType == 1 && domUtils.isEmptyBlock(firstChild)){
	                tmpNode = firstChild;
	                firstChild = firstChild.firstChild;
	            }
	            !tmpNode && (tmpNode = node);
	            domUtils.fillNode(me.document,tmpNode);
	        }
	    }
	    //分页符样式添加

	    me.ready(function(){
	        utils.cssRule('pagebreak','.pagebreak{display:block;clear:both !important;cursor:default !important;width: 100% !important;margin:0;}',me.document);
	    });
	    function isHr(node){
	        return node && node.nodeType == 1 && node.tagName == 'HR' && node.className == 'pagebreak';
	    }
	    me.addInputRule(function(root){
	        root.traversal(function(node){
	            if(node.type == 'text' && node.data == me.options.pageBreakTag){
	                var hr = UE.uNode.createElement('<hr class="pagebreak" noshade="noshade" size="5" style="-webkit-user-select: none;">');
	                node.parentNode.insertBefore(hr,node);
	                node.parentNode.removeChild(node)
	            }
	        })
	    });
	    me.addOutputRule(function(node){
	        utils.each(node.getNodesByTagName('hr'),function(n){
	            if(n.getAttr('class') == 'pagebreak'){
	                var txt = UE.uNode.createText(me.options.pageBreakTag);
	                n.parentNode.insertBefore(txt,n);
	                n.parentNode.removeChild(n);
	            }
	        })

	    });

	    /**
	     * 插入分页符
	     * @command pagebreak
	     * @method execCommand
	     * @param { String } cmd 命令字符串
	     * @remind 在表格中插入分页符会把表格切分成两部分
	     * @remind 获取编辑器内的数据时， 编辑器会把分页符转换成“_ueditor_page_break_tag_”字符串，
	     *          以便于提交数据到服务器端后处理分页。
	     * @example
	     * ```javascript
	     * editor.execCommand( 'pagebreak'); //插入一个hr标签，带有样式类名pagebreak
	     * ```
	     */

	    me.commands['pagebreak'] = {
	        execCommand:function () {
	            var range = me.selection.getRange(),hr = me.document.createElement('hr');
	            domUtils.setAttributes(hr,{
	                'class' : 'pagebreak',
	                noshade:"noshade",
	                size:"5"
	            });
	            domUtils.unSelectable(hr);
	            //table单独处理
	            var node = domUtils.findParentByTagName(range.startContainer, notBreakTags, true),

	                parents = [], pN;
	            if (node) {
	                switch (node.tagName) {
	                    case 'TD':
	                        pN = node.parentNode;
	                        if (!pN.previousSibling) {
	                            var table = domUtils.findParentByTagName(pN, 'table');
//	                            var tableWrapDiv = table.parentNode;
//	                            if(tableWrapDiv && tableWrapDiv.nodeType == 1
//	                                && tableWrapDiv.tagName == 'DIV'
//	                                && tableWrapDiv.getAttribute('dropdrag')
//	                                ){
//	                                domUtils.remove(tableWrapDiv,true);
//	                            }
	                            table.parentNode.insertBefore(hr, table);
	                            parents = domUtils.findParents(hr, true);

	                        } else {
	                            pN.parentNode.insertBefore(hr, pN);
	                            parents = domUtils.findParents(hr);

	                        }
	                        pN = parents[1];
	                        if (hr !== pN) {
	                            domUtils.breakParent(hr, pN);

	                        }
	                        //table要重写绑定一下拖拽
	                        me.fireEvent('afteradjusttable',me.document);
	                }

	            } else {

	                if (!range.collapsed) {
	                    range.deleteContents();
	                    var start = range.startContainer;
	                    while ( !domUtils.isBody(start) && domUtils.isBlockElm(start) && domUtils.isEmptyNode(start)) {
	                        range.setStartBefore(start).collapse(true);
	                        domUtils.remove(start);
	                        start = range.startContainer;
	                    }

	                }
	                range.insertNode(hr);

	                var pN = hr.parentNode, nextNode;
	                while (!domUtils.isBody(pN)) {
	                    domUtils.breakParent(hr, pN);
	                    nextNode = hr.nextSibling;
	                    if (nextNode && domUtils.isEmptyBlock(nextNode)) {
	                        domUtils.remove(nextNode);
	                    }
	                    pN = hr.parentNode;
	                }
	                nextNode = hr.nextSibling;
	                var pre = hr.previousSibling;
	                if(isHr(pre)){
	                    domUtils.remove(pre);
	                }else{
	                    pre && fillNode(pre);
	                }

	                if(!nextNode){
	                    var p = me.document.createElement('p');

	                    hr.parentNode.appendChild(p);
	                    domUtils.fillNode(me.document,p);
	                    range.setStart(p,0).collapse(true);
	                }else{
	                    if(isHr(nextNode)){
	                        domUtils.remove(nextNode);
	                    }else{
	                        fillNode(nextNode);
	                    }
	                    range.setEndAfter(hr).collapse(false);
	                }

	                range.select(true);

	            }

	        }
	    };
	};

	// plugins/wordimage.js
	///import core
	///commands 本地图片引导上传
	///commandsName  WordImage
	///commandsTitle  本地图片引导上传
	///commandsDialog  dialogs\wordimage

	UE.plugin.register('wordimage',function(){
	    var me = this,
	        images = [];
	    return {
	        commands : {
	            'wordimage':{
	                execCommand:function () {
	                    var images = domUtils.getElementsByTagName(me.body, "img");
	                    var urlList = [];
	                    for (var i = 0, ci; ci = images[i++];) {
	                        var url = ci.getAttribute("word_img");
	                        url && urlList.push(url);
	                    }
	                    return urlList;
	                },
	                queryCommandState:function () {
	                    images = domUtils.getElementsByTagName(me.body, "img");
	                    for (var i = 0, ci; ci = images[i++];) {
	                        if (ci.getAttribute("word_img")) {
	                            return 1;
	                        }
	                    }
	                    return -1;
	                },
	                notNeedUndo:true
	            }
	        },
	        inputRule : function (root) {
	            utils.each(root.getNodesByTagName('img'), function (img) {
	                var attrs = img.attrs,
	                    flag = parseInt(attrs.width) < 128 || parseInt(attrs.height) < 43,
	                    opt = me.options,
	                    src = opt.UEDITOR_HOME_URL + 'themes/default/images/spacer.gif';
	                if (attrs['src'] && /^(?:(file:\/+))/.test(attrs['src'])) {
	                    img.setAttr({
	                        width:attrs.width,
	                        height:attrs.height,
	                        alt:attrs.alt,
	                        word_img: attrs.src,
	                        src:src,
	                        'style':'background:url(' + ( flag ? opt.themePath + opt.theme + '/images/word.gif' : opt.langPath + opt.lang + '/images/localimage.png') + ') no-repeat center center;border:1px solid #ddd'
	                    })
	                }
	            })
	        }
	    }
	});

	// plugins/dragdrop.js
	UE.plugins['dragdrop'] = function (){

	    var me = this;
	    me.ready(function(){
	        domUtils.on(this.body,'dragend',function(){
	            var rng = me.selection.getRange();
	            var node = rng.getClosedNode()||me.selection.getStart();

	            if(node && node.tagName == 'IMG'){

	                var pre = node.previousSibling,next;
	                while(next = node.nextSibling){
	                    if(next.nodeType == 1 && next.tagName == 'SPAN' && !next.firstChild){
	                        domUtils.remove(next)
	                    }else{
	                        break;
	                    }
	                }


	                if((pre && pre.nodeType == 1 && !domUtils.isEmptyBlock(pre) || !pre) && (!next || next && !domUtils.isEmptyBlock(next))){
	                    if(pre && pre.tagName == 'P' && !domUtils.isEmptyBlock(pre)){
	                        pre.appendChild(node);
	                        domUtils.moveChild(next,pre);
	                        domUtils.remove(next);
	                    }else  if(next && next.tagName == 'P' && !domUtils.isEmptyBlock(next)){
	                        next.insertBefore(node,next.firstChild);
	                    }

	                    if(pre && pre.tagName == 'P' && domUtils.isEmptyBlock(pre)){
	                        domUtils.remove(pre)
	                    }
	                    if(next && next.tagName == 'P' && domUtils.isEmptyBlock(next)){
	                        domUtils.remove(next)
	                    }
	                    rng.selectNode(node).select();
	                    me.fireEvent('saveScene');

	                }

	            }

	        })
	    });
	    me.addListener('keyup', function(type, evt) {
	        var keyCode = evt.keyCode || evt.which;
	        if (keyCode == 13) {
	            var rng = me.selection.getRange(),node;
	            if(node = domUtils.findParentByTagName(rng.startContainer,'p',true)){
	                if(domUtils.getComputedStyle(node,'text-align') == 'center'){
	                    domUtils.removeStyle(node,'text-align')
	                }
	            }
	        }
	    })
	};


	// plugins/undo.js
	/**
	 * undo redo
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 撤销上一次执行的命令
	 * @command undo
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'undo' );
	 * ```
	 */

	/**
	 * 重做上一次执行的命令
	 * @command redo
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'redo' );
	 * ```
	 */

	UE.plugins['undo'] = function () {
	    var saveSceneTimer;
	    var me = this,
	        maxUndoCount = me.options.maxUndoCount || 20,
	        maxInputCount = me.options.maxInputCount || 20,
	        fillchar = new RegExp(domUtils.fillChar + '|<\/hr>', 'gi');// ie会产生多余的</hr>
	    var noNeedFillCharTags = {
	        ol:1,ul:1,table:1,tbody:1,tr:1,body:1
	    };
	    var orgState = me.options.autoClearEmptyNode;
	    function compareAddr(indexA, indexB) {
	        if (indexA.length != indexB.length)
	            return 0;
	        for (var i = 0, l = indexA.length; i < l; i++) {
	            if (indexA[i] != indexB[i])
	                return 0
	        }
	        return 1;
	    }

	    function compareRangeAddress(rngAddrA, rngAddrB) {
	        if (rngAddrA.collapsed != rngAddrB.collapsed) {
	            return 0;
	        }
	        if (!compareAddr(rngAddrA.startAddress, rngAddrB.startAddress) || !compareAddr(rngAddrA.endAddress, rngAddrB.endAddress)) {
	            return 0;
	        }
	        return 1;
	    }

	    function UndoManager() {
	        this.list = [];
	        this.index = 0;
	        this.hasUndo = false;
	        this.hasRedo = false;
	        this.undo = function () {
	            if (this.hasUndo) {
	                if (!this.list[this.index - 1] && this.list.length == 1) {
	                    this.reset();
	                    return;
	                }
	                while (this.list[this.index].content == this.list[this.index - 1].content) {
	                    this.index--;
	                    if (this.index == 0) {
	                        return this.restore(0);
	                    }
	                }
	                this.restore(--this.index);
	            }
	        };
	        this.redo = function () {
	            if (this.hasRedo) {
	                while (this.list[this.index].content == this.list[this.index + 1].content) {
	                    this.index++;
	                    if (this.index == this.list.length - 1) {
	                        return this.restore(this.index);
	                    }
	                }
	                this.restore(++this.index);
	            }
	        };

	        this.restore = function () {
	            var me = this.editor;
	            var scene = this.list[this.index];
	            var root = UE.htmlparser(scene.content.replace(fillchar, ''));
	            me.options.autoClearEmptyNode = false;
	            me.filterInputRule(root);
	            me.options.autoClearEmptyNode = orgState;
	            //trace:873
	            //去掉展位符
	            me.document.body.innerHTML = root.toHtml();
	            me.fireEvent('afterscencerestore');
	            //处理undo后空格不展位的问题
	            if (browser.ie) {
	                utils.each(domUtils.getElementsByTagName(me.document,'td th caption p'),function(node){
	                    if(domUtils.isEmptyNode(node)){
	                        domUtils.fillNode(me.document, node);
	                    }
	                })
	            }

	            try{
	                var rng = new dom.Range(me.document).moveToAddress(scene.address);
	                rng.select(noNeedFillCharTags[rng.startContainer.nodeName.toLowerCase()]);
	            }catch(e){}

	            this.update();
	            this.clearKey();
	            //不能把自己reset了
	            me.fireEvent('reset', true);
	        };

	        this.getScene = function () {
	            var me = this.editor;
	            var rng = me.selection.getRange(),
	                rngAddress = rng.createAddress(false,true);
	            me.fireEvent('beforegetscene');
	            var root = UE.htmlparser(me.body.innerHTML);
	            me.options.autoClearEmptyNode = false;
	            me.filterOutputRule(root);
	            me.options.autoClearEmptyNode = orgState;
	            var cont = root.toHtml();
	            //trace:3461
	            //这个会引起回退时导致空格丢失的情况
//	            browser.ie && (cont = cont.replace(/>&nbsp;</g, '><').replace(/\s*</g, '<').replace(/>\s*/g, '>'));
	            me.fireEvent('aftergetscene');

	            return {
	                address:rngAddress,
	                content:cont
	            }
	        };
	        this.save = function (notCompareRange,notSetCursor) {
	            clearTimeout(saveSceneTimer);
	            var currentScene = this.getScene(notSetCursor),
	                lastScene = this.list[this.index];

	            if(lastScene && lastScene.content != currentScene.content){
	                me.trigger('contentchange')
	            }
	            //内容相同位置相同不存
	            if (lastScene && lastScene.content == currentScene.content &&
	                ( notCompareRange ? 1 : compareRangeAddress(lastScene.address, currentScene.address) )
	                ) {
	                return;
	            }
	            this.list = this.list.slice(0, this.index + 1);
	            this.list.push(currentScene);
	            //如果大于最大数量了，就把最前的剔除
	            if (this.list.length > maxUndoCount) {
	                this.list.shift();
	            }
	            this.index = this.list.length - 1;
	            this.clearKey();
	            //跟新undo/redo状态
	            this.update();

	        };
	        this.update = function () {
	            this.hasRedo = !!this.list[this.index + 1];
	            this.hasUndo = !!this.list[this.index - 1];
	        };
	        this.reset = function () {
	            this.list = [];
	            this.index = 0;
	            this.hasUndo = false;
	            this.hasRedo = false;
	            this.clearKey();
	        };
	        this.clearKey = function () {
	            keycont = 0;
	            lastKeyCode = null;
	        };
	    }

	    me.undoManger = new UndoManager();
	    me.undoManger.editor = me;
	    function saveScene() {
	        this.undoManger.save();
	    }

	    me.addListener('saveScene', function () {
	        var args = Array.prototype.splice.call(arguments,1);
	        this.undoManger.save.apply(this.undoManger,args);
	    });

//	    me.addListener('beforeexeccommand', saveScene);
//	    me.addListener('afterexeccommand', saveScene);

	    me.addListener('reset', function (type, exclude) {
	        if (!exclude) {
	            this.undoManger.reset();
	        }
	    });
	    me.commands['redo'] = me.commands['undo'] = {
	        execCommand:function (cmdName) {
	            this.undoManger[cmdName]();
	        },
	        queryCommandState:function (cmdName) {
	            return this.undoManger['has' + (cmdName.toLowerCase() == 'undo' ? 'Undo' : 'Redo')] ? 0 : -1;
	        },
	        notNeedUndo:1
	    };

	    var keys = {
	            //  /*Backspace*/ 8:1, /*Delete*/ 46:1,
	            /*Shift*/ 16:1, /*Ctrl*/ 17:1, /*Alt*/ 18:1,
	            37:1, 38:1, 39:1, 40:1

	        },
	        keycont = 0,
	        lastKeyCode;
	    //输入法状态下不计算字符数
	    var inputType = false;
	    me.addListener('ready', function () {
	        domUtils.on(this.body, 'compositionstart', function () {
	            inputType = true;
	        });
	        domUtils.on(this.body, 'compositionend', function () {
	            inputType = false;
	        })
	    });
	    //快捷键
	    me.addshortcutkey({
	        "Undo":"ctrl+90", //undo
	        "Redo":"ctrl+89" //redo

	    });
	    var isCollapsed = true;
	    me.addListener('keydown', function (type, evt) {

	        var me = this;
	        var keyCode = evt.keyCode || evt.which;
	        if (!keys[keyCode] && !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {
	            if (inputType)
	                return;

	            if(!me.selection.getRange().collapsed){
	                me.undoManger.save(false,true);
	                isCollapsed = false;
	                return;
	            }
	            if (me.undoManger.list.length == 0) {
	                me.undoManger.save(true);
	            }
	            clearTimeout(saveSceneTimer);
	            function save(cont){
	                cont.undoManger.save(false,true);
	                cont.fireEvent('selectionchange');
	            }
	            saveSceneTimer = setTimeout(function(){
	                if(inputType){
	                    var interalTimer = setInterval(function(){
	                        if(!inputType){
	                            save(me);
	                            clearInterval(interalTimer)
	                        }
	                    },300)
	                    return;
	                }
	                save(me);
	            },200);

	            lastKeyCode = keyCode;
	            keycont++;
	            if (keycont >= maxInputCount ) {
	                save(me)
	            }
	        }
	    });
	    me.addListener('keyup', function (type, evt) {
	        var keyCode = evt.keyCode || evt.which;
	        if (!keys[keyCode] && !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {
	            if (inputType)
	                return;
	            if(!isCollapsed){
	                this.undoManger.save(false,true);
	                isCollapsed = true;
	            }
	        }
	    });
	    //扩展实例，添加关闭和开启命令undo
	    me.stopCmdUndo = function(){
	        me.__hasEnterExecCommand = true;
	    };
	    me.startCmdUndo = function(){
	        me.__hasEnterExecCommand = false;
	    }
	};


	// plugins/copy.js
	UE.plugin.register('copy', function () {

	    var me = this;

	    function initZeroClipboard() {

	        ZeroClipboard.config({
	            debug: false,
	            swfPath: me.options.UEDITOR_HOME_URL + 'third-party/zeroclipboard/ZeroClipboard.swf'
	        });

	        var client = me.zeroclipboard = new ZeroClipboard();

	        // 复制内容
	        client.on('copy', function (e) {
	            var client = e.client,
	                rng = me.selection.getRange(),
	                div = document.createElement('div');

	            div.appendChild(rng.cloneContents());
	            client.setText(div.innerText || div.textContent);
	            client.setHtml(div.innerHTML);
	            rng.select();
	        });
	        // hover事件传递到target
	        client.on('mouseover mouseout', function (e) {
	            var target = e.target;
	            if (e.type == 'mouseover') {
	                domUtils.addClass(target, 'edui-state-hover');
	            } else if (e.type == 'mouseout') {
	                domUtils.removeClasses(target, 'edui-state-hover');
	            }
	        });
	        // flash加载不成功
	        client.on('wrongflash noflash', function () {
	            ZeroClipboard.destroy();
	        });
	    }

	    return {
	        bindEvents: {
	            'ready': function () {
	                if (!browser.ie) {
	                    if (window.ZeroClipboard) {
	                        initZeroClipboard();
	                    } else {
	                        utils.loadFile(document, {
	                            src: me.options.UEDITOR_HOME_URL + "third-party/zeroclipboard/ZeroClipboard.js",
	                            tag: "script",
	                            type: "text/javascript",
	                            defer: "defer"
	                        }, function () {
	                            initZeroClipboard();
	                        });
	                    }
	                }
	            }
	        },
	        commands: {
	            'copy': {
	                execCommand: function (cmd) {
	                    if (!me.document.execCommand('copy')) {
	                        alert(me.getLang('copymsg'));
	                    }
	                }
	            }
	        }
	    }
	});


	// plugins/paste.js
	///import core
	///import plugins/inserthtml.js
	///import plugins/undo.js
	///import plugins/serialize.js
	///commands 粘贴
	///commandsName  PastePlain
	///commandsTitle  纯文本粘贴模式
	/**
	 * @description 粘贴
	 * @author zhanyi
	 */
	UE.plugins['paste'] = function () {
	    function getClipboardData(callback) {
	        var doc = this.document;
	        if (doc.getElementById('baidu_pastebin')) {
	            return;
	        }
	        var range = this.selection.getRange(),
	            bk = range.createBookmark(),
	        //创建剪贴的容器div
	            pastebin = doc.createElement('div');
	        pastebin.id = 'baidu_pastebin';
	        // Safari 要求div必须有内容，才能粘贴内容进来
	        browser.webkit && pastebin.appendChild(doc.createTextNode(domUtils.fillChar + domUtils.fillChar));
	        doc.body.appendChild(pastebin);
	        //trace:717 隐藏的span不能得到top
	        //bk.start.innerHTML = '&nbsp;';
	        bk.start.style.display = '';
	        pastebin.style.cssText = "position:absolute;width:1px;height:1px;overflow:hidden;left:-1000px;white-space:nowrap;top:" +
	            //要在现在光标平行的位置加入，否则会出现跳动的问题
	            domUtils.getXY(bk.start).y + 'px';

	        range.selectNodeContents(pastebin).select(true);

	        setTimeout(function () {
	            if (browser.webkit) {
	                for (var i = 0, pastebins = doc.querySelectorAll('#baidu_pastebin'), pi; pi = pastebins[i++];) {
	                    if (domUtils.isEmptyNode(pi)) {
	                        domUtils.remove(pi);
	                    } else {
	                        pastebin = pi;
	                        break;
	                    }
	                }
	            }
	            try {
	                pastebin.parentNode.removeChild(pastebin);
	            } catch (e) {
	            }
	            range.moveToBookmark(bk).select(true);
	            callback(pastebin);
	        }, 0);
	    }

	    var me = this;

	    me.setOpt({
	        retainOnlyLabelPasted : false
	    });

	    var txtContent, htmlContent, address;

	    function getPureHtml(html){
	        return html.replace(/<(\/?)([\w\-]+)([^>]*)>/gi, function (a, b, tagName, attrs) {
	            tagName = tagName.toLowerCase();
	            if ({img: 1}[tagName]) {
	                return a;
	            }
	            attrs = attrs.replace(/([\w\-]*?)\s*=\s*(("([^"]*)")|('([^']*)')|([^\s>]+))/gi, function (str, atr, val) {
	                if ({
	                    'src': 1,
	                    'href': 1,
	                    'name': 1
	                }[atr.toLowerCase()]) {
	                    return atr + '=' + val + ' '
	                }
	                return ''
	            });
	            if ({
	                'span': 1,
	                'div': 1
	            }[tagName]) {
	                return ''
	            } else {

	                return '<' + b + tagName + ' ' + utils.trim(attrs) + '>'
	            }

	        });
	    }
	    function filter(div) {
	        var html;
	        if (div.firstChild) {
	            //去掉cut中添加的边界值
	            var nodes = domUtils.getElementsByTagName(div, 'span');
	            for (var i = 0, ni; ni = nodes[i++];) {
	                if (ni.id == '_baidu_cut_start' || ni.id == '_baidu_cut_end') {
	                    domUtils.remove(ni);
	                }
	            }

	            if (browser.webkit) {

	                var brs = div.querySelectorAll('div br');
	                for (var i = 0, bi; bi = brs[i++];) {
	                    var pN = bi.parentNode;
	                    if (pN.tagName == 'DIV' && pN.childNodes.length == 1) {
	                        pN.innerHTML = '<p><br/></p>';
	                        domUtils.remove(pN);
	                    }
	                }
	                var divs = div.querySelectorAll('#baidu_pastebin');
	                for (var i = 0, di; di = divs[i++];) {
	                    var tmpP = me.document.createElement('p');
	                    di.parentNode.insertBefore(tmpP, di);
	                    while (di.firstChild) {
	                        tmpP.appendChild(di.firstChild);
	                    }
	                    domUtils.remove(di);
	                }

	                var metas = div.querySelectorAll('meta');
	                for (var i = 0, ci; ci = metas[i++];) {
	                    domUtils.remove(ci);
	                }

	                var brs = div.querySelectorAll('br');
	                for (i = 0; ci = brs[i++];) {
	                    if (/^apple-/i.test(ci.className)) {
	                        domUtils.remove(ci);
	                    }
	                }
	            }
	            if (browser.gecko) {
	                var dirtyNodes = div.querySelectorAll('[_moz_dirty]');
	                for (i = 0; ci = dirtyNodes[i++];) {
	                    ci.removeAttribute('_moz_dirty');
	                }
	            }
	            if (!browser.ie) {
	                var spans = div.querySelectorAll('span.Apple-style-span');
	                for (var i = 0, ci; ci = spans[i++];) {
	                    domUtils.remove(ci, true);
	                }
	            }

	            //ie下使用innerHTML会产生多余的\r\n字符，也会产生&nbsp;这里过滤掉
	            html = div.innerHTML;//.replace(/>(?:(\s|&nbsp;)*?)</g,'><');

	            //过滤word粘贴过来的冗余属性
	            html = UE.filterWord(html);
	            //取消了忽略空白的第二个参数，粘贴过来的有些是有空白的，会被套上相关的标签
	            var root = UE.htmlparser(html);
	            //如果给了过滤规则就先进行过滤
	            if (me.options.filterRules) {
	                UE.filterNode(root, me.options.filterRules);
	            }
	            //执行默认的处理
	            me.filterInputRule(root);
	            //针对chrome的处理
	            if (browser.webkit) {
	                var br = root.lastChild();
	                if (br && br.type == 'element' && br.tagName == 'br') {
	                    root.removeChild(br)
	                }
	                utils.each(me.body.querySelectorAll('div'), function (node) {
	                    if (domUtils.isEmptyBlock(node)) {
	                        domUtils.remove(node,true)
	                    }
	                })
	            }
	            html = {'html': root.toHtml()};
	            me.fireEvent('beforepaste', html, root);
	            //抢了默认的粘贴，那后边的内容就不执行了，比如表格粘贴
	            if(!html.html){
	                return;
	            }
	            root = UE.htmlparser(html.html,true);
	            //如果开启了纯文本模式
	            if (me.queryCommandState('pasteplain') === 1) {
	                me.execCommand('insertHtml', UE.filterNode(root, me.options.filterTxtRules).toHtml(), true);
	            } else {
	                //文本模式
	                UE.filterNode(root, me.options.filterTxtRules);
	                txtContent = root.toHtml();
	                //完全模式
	                htmlContent = html.html;

	                address = me.selection.getRange().createAddress(true);
	                me.execCommand('insertHtml', me.getOpt('retainOnlyLabelPasted') === true ?  getPureHtml(htmlContent) : htmlContent, true);
	            }
	            me.fireEvent("afterpaste", html);
	        }
	    }

	    me.addListener('pasteTransfer', function (cmd, plainType) {

	        if (address && txtContent && htmlContent && txtContent != htmlContent) {
	            var range = me.selection.getRange();
	            range.moveToAddress(address, true);

	            if (!range.collapsed) {

	                while (!domUtils.isBody(range.startContainer)
	                    ) {
	                    var start = range.startContainer;
	                    if(start.nodeType == 1){
	                        start = start.childNodes[range.startOffset];
	                        if(!start){
	                            range.setStartBefore(range.startContainer);
	                            continue;
	                        }
	                        var pre = start.previousSibling;

	                        if(pre && pre.nodeType == 3 && new RegExp('^[\n\r\t '+domUtils.fillChar+']*$').test(pre.nodeValue)){
	                            range.setStartBefore(pre)
	                        }
	                    }
	                    if(range.startOffset == 0){
	                        range.setStartBefore(range.startContainer);
	                    }else{
	                        break;
	                    }

	                }
	                while (!domUtils.isBody(range.endContainer)
	                    ) {
	                    var end = range.endContainer;
	                    if(end.nodeType == 1){
	                        end = end.childNodes[range.endOffset];
	                        if(!end){
	                            range.setEndAfter(range.endContainer);
	                            continue;
	                        }
	                        var next = end.nextSibling;
	                        if(next && next.nodeType == 3 && new RegExp('^[\n\r\t'+domUtils.fillChar+']*$').test(next.nodeValue)){
	                            range.setEndAfter(next)
	                        }
	                    }
	                    if(range.endOffset == range.endContainer[range.endContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length){
	                        range.setEndAfter(range.endContainer);
	                    }else{
	                        break;
	                    }

	                }

	            }

	            range.deleteContents();
	            range.select(true);
	            me.__hasEnterExecCommand = true;
	            var html = htmlContent;
	            if (plainType === 2 ) {
	                html = getPureHtml(html);
	            } else if (plainType) {
	                html = txtContent;
	            }
	            me.execCommand('inserthtml', html, true);
	            me.__hasEnterExecCommand = false;
	            var rng = me.selection.getRange();
	            while (!domUtils.isBody(rng.startContainer) && !rng.startOffset &&
	                rng.startContainer[rng.startContainer.nodeType == 3 ? 'nodeValue' : 'childNodes'].length
	                ) {
	                rng.setStartBefore(rng.startContainer);
	            }
	            var tmpAddress = rng.createAddress(true);
	            address.endAddress = tmpAddress.startAddress;
	        }
	    });

	    me.addListener('ready', function () {
	        domUtils.on(me.body, 'cut', function () {
	            var range = me.selection.getRange();
	            if (!range.collapsed && me.undoManger) {
	                me.undoManger.save();
	            }
	        });

	        //ie下beforepaste在点击右键时也会触发，所以用监控键盘才处理
	        domUtils.on(me.body, browser.ie || browser.opera ? 'keydown' : 'paste', function (e) {
	            if ((browser.ie || browser.opera) && ((!e.ctrlKey && !e.metaKey) || e.keyCode != '86')) {
	                return;
	            }
	            getClipboardData.call(me, function (div) {
	                filter(div);
	            });
	        });

	    });

	    me.commands['paste'] = {
	        execCommand: function (cmd) {
	            if (browser.ie) {
	                getClipboardData.call(me, function (div) {
	                    filter(div);
	                });
	                me.document.execCommand('paste');
	            } else {
	                alert(me.getLang('pastemsg'));
	            }
	        }
	    }
	};



	// plugins/puretxtpaste.js
	/**
	 * 纯文本粘贴插件
	 * @file
	 * @since 1.2.6.1
	 */

	UE.plugins['pasteplain'] = function(){
	    var me = this;
	    me.setOpt({
	        'pasteplain':false,
	        'filterTxtRules' : function(){
	            function transP(node){
	                node.tagName = 'p';
	                node.setStyle();
	            }
	            function removeNode(node){
	                node.parentNode.removeChild(node,true)
	            }
	            return {
	                //直接删除及其字节点内容
	                '-' : 'script style object iframe embed input select',
	                'p': {$:{}},
	                'br':{$:{}},
	                div: function (node) {
	                    var tmpNode, p = UE.uNode.createElement('p');
	                    while (tmpNode = node.firstChild()) {
	                        if (tmpNode.type == 'text' || !UE.dom.dtd.$block[tmpNode.tagName]) {
	                            p.appendChild(tmpNode);
	                        } else {
	                            if (p.firstChild()) {
	                                node.parentNode.insertBefore(p, node);
	                                p = UE.uNode.createElement('p');
	                            } else {
	                                node.parentNode.insertBefore(tmpNode, node);
	                            }
	                        }
	                    }
	                    if (p.firstChild()) {
	                        node.parentNode.insertBefore(p, node);
	                    }
	                    node.parentNode.removeChild(node);
	                },
	                ol: removeNode,
	                ul: removeNode,
	                dl:removeNode,
	                dt:removeNode,
	                dd:removeNode,
	                'li':removeNode,
	                'caption':transP,
	                'th':transP,
	                'tr':transP,
	                'h1':transP,'h2':transP,'h3':transP,'h4':transP,'h5':transP,'h6':transP,
	                'td':function(node){
	                        //没有内容的td直接删掉
	                        var txt = !!node.innerText();
	                        if(txt){
	                         node.parentNode.insertAfter(UE.uNode.createText(' &nbsp; &nbsp;'),node);
	                    }
	                    node.parentNode.removeChild(node,node.innerText())
	                }
	            }
	        }()
	    });
	    //暂时这里支持一下老版本的属性
	    var pasteplain = me.options.pasteplain;

	    /**
	     * 启用或取消纯文本粘贴模式
	     * @command pasteplain
	     * @method execCommand
	     * @param { String } cmd 命令字符串
	     * @example
	     * ```javascript
	     * editor.queryCommandState( 'pasteplain' );
	     * ```
	     */

	    /**
	     * 查询当前是否处于纯文本粘贴模式
	     * @command pasteplain
	     * @method queryCommandState
	     * @param { String } cmd 命令字符串
	     * @return { int } 如果处于纯文本模式，返回1，否则，返回0
	     * @example
	     * ```javascript
	     * editor.queryCommandState( 'pasteplain' );
	     * ```
	     */
	    me.commands['pasteplain'] = {
	        queryCommandState: function (){
	            return pasteplain ? 1 : 0;
	        },
	        execCommand: function (){
	            pasteplain = !pasteplain|0;
	        },
	        notNeedUndo : 1
	    };
	};

	// plugins/list.js
	/**
	 * 有序列表,无序列表插件
	 * @file
	 * @since 1.2.6.1
	 */

	UE.plugins['list'] = function () {
	    var me = this,
	        notExchange = {
	            'TD':1,
	            'PRE':1,
	            'BLOCKQUOTE':1
	        };
	    var customStyle = {
	        'cn' : 'cn-1-',
	        'cn1' : 'cn-2-',
	        'cn2' : 'cn-3-',
	        'num':  'num-1-',
	        'num1' : 'num-2-',
	        'num2' : 'num-3-',
	        'dash'  : 'dash',
	        'dot':'dot'
	    };

	    me.setOpt( {
	        'autoTransWordToList':false,
	        'insertorderedlist':{
	            'num':'',
	            'num1':'',
	            'num2':'',
	            'cn':'',
	            'cn1':'',
	            'cn2':'',
	            'decimal':'',
	            'lower-alpha':'',
	            'lower-roman':'',
	            'upper-alpha':'',
	            'upper-roman':''
	        },
	        'insertunorderedlist':{
	            'circle':'',
	            'disc':'',
	            'square':'',
	            'dash' : '',
	            'dot':''
	        },
	        listDefaultPaddingLeft : '30',
	        listiconpath : 'http://bs.baidu.com/listicon/',
	        maxListLevel : -1,//-1不限制
	        disablePInList:false
	    } );
	    function listToArray(list){
	        var arr = [];
	        for(var p in list){
	            arr.push(p)
	        }
	        return arr;
	    }
	    var listStyle = {
	        'OL':listToArray(me.options.insertorderedlist),
	        'UL':listToArray(me.options.insertunorderedlist)
	    };
	    var liiconpath = me.options.listiconpath;

	    //根据用户配置，调整customStyle
	    for(var s in customStyle){
	        if(!me.options.insertorderedlist.hasOwnProperty(s) && !me.options.insertunorderedlist.hasOwnProperty(s)){
	            delete customStyle[s];
	        }
	    }

	    me.ready(function () {
	        var customCss = [];
	        for(var p in customStyle){
	            if(p == 'dash' || p == 'dot'){
	                customCss.push('li.list-' + customStyle[p] + '{background-image:url(' + liiconpath +customStyle[p]+'.gif)}');
	                customCss.push('ul.custom_'+p+'{list-style:none;}ul.custom_'+p+' li{background-position:0 3px;background-repeat:no-repeat}');
	            }else{
	                for(var i= 0;i<99;i++){
	                    customCss.push('li.list-' + customStyle[p] + i + '{background-image:url(' + liiconpath + 'list-'+customStyle[p] + i + '.gif)}')
	                }
	                customCss.push('ol.custom_'+p+'{list-style:none;}ol.custom_'+p+' li{background-position:0 3px;background-repeat:no-repeat}');
	            }
	            switch(p){
	                case 'cn':
	                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:25px}');
	                    customCss.push('li.list-'+p+'-paddingleft-2{padding-left:40px}');
	                    customCss.push('li.list-'+p+'-paddingleft-3{padding-left:55px}');
	                    break;
	                case 'cn1':
	                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:30px}');
	                    customCss.push('li.list-'+p+'-paddingleft-2{padding-left:40px}');
	                    customCss.push('li.list-'+p+'-paddingleft-3{padding-left:55px}');
	                    break;
	                case 'cn2':
	                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:40px}');
	                    customCss.push('li.list-'+p+'-paddingleft-2{padding-left:55px}');
	                    customCss.push('li.list-'+p+'-paddingleft-3{padding-left:68px}');
	                    break;
	                case 'num':
	                case 'num1':
	                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:25px}');
	                    break;
	                case 'num2':
	                    customCss.push('li.list-'+p+'-paddingleft-1{padding-left:35px}');
	                    customCss.push('li.list-'+p+'-paddingleft-2{padding-left:40px}');
	                    break;
	                case 'dash':
	                    customCss.push('li.list-'+p+'-paddingleft{padding-left:35px}');
	                    break;
	                case 'dot':
	                    customCss.push('li.list-'+p+'-paddingleft{padding-left:20px}');
	            }
	        }
	        customCss.push('.list-paddingleft-1{padding-left:0}');
	        customCss.push('.list-paddingleft-2{padding-left:'+me.options.listDefaultPaddingLeft+'px}');
	        customCss.push('.list-paddingleft-3{padding-left:'+me.options.listDefaultPaddingLeft*2+'px}');
	        //如果不给宽度会在自定应样式里出现滚动条
	        utils.cssRule('list', 'ol,ul{margin:0;pading:0;'+(browser.ie ? '' : 'width:95%')+'}li{clear:both;}'+customCss.join('\n'), me.document);
	    });
	    //单独处理剪切的问题
	    me.ready(function(){
	        domUtils.on(me.body,'cut',function(){
	            setTimeout(function(){
	                var rng = me.selection.getRange(),li;
	                //trace:3416
	                if(!rng.collapsed){
	                    if(li = domUtils.findParentByTagName(rng.startContainer,'li',true)){
	                        if(!li.nextSibling && domUtils.isEmptyBlock(li)){
	                            var pn = li.parentNode,node;
	                            if(node = pn.previousSibling){
	                                domUtils.remove(pn);
	                                rng.setStartAtLast(node).collapse(true);
	                                rng.select(true);
	                            }else if(node = pn.nextSibling){
	                                domUtils.remove(pn);
	                                rng.setStartAtFirst(node).collapse(true);
	                                rng.select(true);
	                            }else{
	                                var tmpNode = me.document.createElement('p');
	                                domUtils.fillNode(me.document,tmpNode);
	                                pn.parentNode.insertBefore(tmpNode,pn);
	                                domUtils.remove(pn);
	                                rng.setStart(tmpNode,0).collapse(true);
	                                rng.select(true);
	                            }
	                        }
	                    }
	                }

	            })
	        })
	    });

	    function getStyle(node){
	        var cls = node.className;
	        if(domUtils.hasClass(node,/custom_/)){
	            return cls.match(/custom_(\w+)/)[1]
	        }
	        return domUtils.getStyle(node, 'list-style-type')

	    }

	    me.addListener('beforepaste',function(type,html){
	        var me = this,
	            rng = me.selection.getRange(),li;
	        var root = UE.htmlparser(html.html,true);
	        if(li = domUtils.findParentByTagName(rng.startContainer,'li',true)){
	            var list = li.parentNode,tagName = list.tagName == 'OL' ? 'ul':'ol';
	            utils.each(root.getNodesByTagName(tagName),function(n){
	                n.tagName = list.tagName;
	                n.setAttr();
	                if(n.parentNode === root){
	                    type = getStyle(list) || (list.tagName == 'OL' ? 'decimal' : 'disc')
	                }else{
	                    var className = n.parentNode.getAttr('class');
	                    if(className && /custom_/.test(className)){
	                        type = className.match(/custom_(\w+)/)[1]
	                    }else{
	                        type = n.parentNode.getStyle('list-style-type');
	                    }
	                    if(!type){
	                        type = list.tagName == 'OL' ? 'decimal' : 'disc';
	                    }
	                }
	                var index = utils.indexOf(listStyle[list.tagName], type);
	                if(n.parentNode !== root)
	                    index = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
	                var currentStyle = listStyle[list.tagName][index];
	                if(customStyle[currentStyle]){
	                    n.setAttr('class', 'custom_' + currentStyle)

	                }else{
	                    n.setStyle('list-style-type',currentStyle)
	                }
	            })

	        }

	        html.html = root.toHtml();
	    });
	    //导出时，去掉p标签
	    me.getOpt('disablePInList') === true && me.addOutputRule(function(root){
	        utils.each(root.getNodesByTagName('li'),function(li){
	            var newChildrens = [],index=0;
	            utils.each(li.children,function(n){
	                if(n.tagName == 'p'){
	                    var tmpNode;
	                    while(tmpNode = n.children.pop()) {
	                        newChildrens.splice(index,0,tmpNode);
	                        tmpNode.parentNode = li;
	                        lastNode = tmpNode;
	                    }
	                    tmpNode = newChildrens[newChildrens.length-1];
	                    if(!tmpNode || tmpNode.type != 'element' || tmpNode.tagName != 'br'){
	                        var br = UE.uNode.createElement('br');
	                        br.parentNode = li;
	                        newChildrens.push(br);
	                    }

	                    index = newChildrens.length;
	                }
	            });
	            if(newChildrens.length){
	                li.children = newChildrens;
	            }
	        });
	    });
	    //进入编辑器的li要套p标签
	    me.addInputRule(function(root){
	        utils.each(root.getNodesByTagName('li'),function(li){
	            var tmpP = UE.uNode.createElement('p');
	            for(var i= 0,ci;ci=li.children[i];){
	                if(ci.type == 'text' || dtd.p[ci.tagName]){
	                    tmpP.appendChild(ci);
	                }else{
	                    if(tmpP.firstChild()){
	                        li.insertBefore(tmpP,ci);
	                        tmpP = UE.uNode.createElement('p');
	                        i = i + 2;
	                    }else{
	                        i++;
	                    }

	                }
	            }
	            if(tmpP.firstChild() && !tmpP.parentNode || !li.firstChild()){
	                li.appendChild(tmpP);
	            }
	            //trace:3357
	            //p不能为空
	            if (!tmpP.firstChild()) {
	                tmpP.innerHTML(browser.ie ? '&nbsp;' : '<br/>')
	            }
	            //去掉末尾的空白
	            var p = li.firstChild();
	            var lastChild = p.lastChild();
	            if(lastChild && lastChild.type == 'text' && /^\s*$/.test(lastChild.data)){
	                p.removeChild(lastChild)
	            }
	        });
	        if(me.options.autoTransWordToList){
	            var orderlisttype = {
	                    'num1':/^\d+\)/,
	                    'decimal':/^\d+\./,
	                    'lower-alpha':/^[a-z]+\)/,
	                    'upper-alpha':/^[A-Z]+\./,
	                    'cn':/^[\u4E00\u4E8C\u4E09\u56DB\u516d\u4e94\u4e03\u516b\u4e5d]+[\u3001]/,
	                    'cn2':/^\([\u4E00\u4E8C\u4E09\u56DB\u516d\u4e94\u4e03\u516b\u4e5d]+\)/
	                },
	                unorderlisttype = {
	                    'square':'n'
	                };
	            function checkListType(content,container){
	                var span = container.firstChild();
	                if(span &&  span.type == 'element' && span.tagName == 'span' && /Wingdings|Symbol/.test(span.getStyle('font-family'))){
	                    for(var p in unorderlisttype){
	                        if(unorderlisttype[p] == span.data){
	                            return p
	                        }
	                    }
	                    return 'disc'
	                }
	                for(var p in orderlisttype){
	                    if(orderlisttype[p].test(content)){
	                        return p;
	                    }
	                }

	            }
	            utils.each(root.getNodesByTagName('p'),function(node){
	                if(node.getAttr('class') != 'MsoListParagraph'){
	                    return
	                }

	                //word粘贴过来的会带有margin要去掉,但这样也可能会误命中一些央视
	                node.setStyle('margin','');
	                node.setStyle('margin-left','');
	                node.setAttr('class','');

	                function appendLi(list,p,type){
	                    if(list.tagName == 'ol'){
	                        if(browser.ie){
	                            var first = p.firstChild();
	                            if(first.type =='element' && first.tagName == 'span' && orderlisttype[type].test(first.innerText())){
	                                p.removeChild(first);
	                            }
	                        }else{
	                            p.innerHTML(p.innerHTML().replace(orderlisttype[type],''));
	                        }
	                    }else{
	                        p.removeChild(p.firstChild())
	                    }

	                    var li = UE.uNode.createElement('li');
	                    li.appendChild(p);
	                    list.appendChild(li);
	                }
	                var tmp = node,type,cacheNode = node;

	                if(node.parentNode.tagName != 'li' && (type = checkListType(node.innerText(),node))){

	                    var list = UE.uNode.createElement(me.options.insertorderedlist.hasOwnProperty(type) ? 'ol' : 'ul');
	                    if(customStyle[type]){
	                        list.setAttr('class','custom_'+type)
	                    }else{
	                        list.setStyle('list-style-type',type)
	                    }
	                    while(node && node.parentNode.tagName != 'li' && checkListType(node.innerText(),node)){
	                        tmp = node.nextSibling();
	                        if(!tmp){
	                            node.parentNode.insertBefore(list,node)
	                        }
	                        appendLi(list,node,type);
	                        node = tmp;
	                    }
	                    if(!list.parentNode && node && node.parentNode){
	                        node.parentNode.insertBefore(list,node)
	                    }
	                }
	                var span = cacheNode.firstChild();
	                if(span && span.type == 'element' && span.tagName == 'span' && /^\s*(&nbsp;)+\s*$/.test(span.innerText())){
	                    span.parentNode.removeChild(span)
	                }
	            })
	        }

	    });

	    //调整索引标签
	    me.addListener('contentchange',function(){
	        adjustListStyle(me.document)
	    });

	    function adjustListStyle(doc,ignore){
	        utils.each(domUtils.getElementsByTagName(doc,'ol ul'),function(node){

	            if(!domUtils.inDoc(node,doc))
	                return;

	            var parent = node.parentNode;
	            if(parent.tagName == node.tagName){
	                var nodeStyleType = getStyle(node) || (node.tagName == 'OL' ? 'decimal' : 'disc'),
	                    parentStyleType = getStyle(parent) || (parent.tagName == 'OL' ? 'decimal' : 'disc');
	                if(nodeStyleType == parentStyleType){
	                    var styleIndex = utils.indexOf(listStyle[node.tagName], nodeStyleType);
	                    styleIndex = styleIndex + 1 == listStyle[node.tagName].length ? 0 : styleIndex + 1;
	                    setListStyle(node,listStyle[node.tagName][styleIndex])
	                }

	            }
	            var index = 0,type = 2;
	            if( domUtils.hasClass(node,/custom_/)){
	                if(!(/[ou]l/i.test(parent.tagName) && domUtils.hasClass(parent,/custom_/))){
	                    type = 1;
	                }
	            }else{
	                if(/[ou]l/i.test(parent.tagName) && domUtils.hasClass(parent,/custom_/)){
	                    type = 3;
	                }
	            }

	            var style = domUtils.getStyle(node, 'list-style-type');
	            style && (node.style.cssText = 'list-style-type:' + style);
	            node.className = utils.trim(node.className.replace(/list-paddingleft-\w+/,'')) + ' list-paddingleft-' + type;
	            utils.each(domUtils.getElementsByTagName(node,'li'),function(li){
	                li.style.cssText && (li.style.cssText = '');
	                if(!li.firstChild){
	                    domUtils.remove(li);
	                    return;
	                }
	                if(li.parentNode !== node){
	                    return;
	                }
	                index++;
	                if(domUtils.hasClass(node,/custom_/) ){
	                    var paddingLeft = 1,currentStyle = getStyle(node);
	                    if(node.tagName == 'OL'){
	                        if(currentStyle){
	                            switch(currentStyle){
	                                case 'cn' :
	                                case 'cn1':
	                                case 'cn2':
	                                    if(index > 10 && (index % 10 == 0 || index > 10 && index < 20)){
	                                        paddingLeft = 2
	                                    }else if(index > 20){
	                                        paddingLeft = 3
	                                    }
	                                    break;
	                                case 'num2' :
	                                    if(index > 9){
	                                        paddingLeft = 2
	                                    }
	                            }
	                        }
	                        li.className = 'list-'+customStyle[currentStyle]+ index + ' ' + 'list-'+currentStyle+'-paddingleft-' + paddingLeft;
	                    }else{
	                        li.className = 'list-'+customStyle[currentStyle]  + ' ' + 'list-'+currentStyle+'-paddingleft';
	                    }
	                }else{
	                    li.className = li.className.replace(/list-[\w\-]+/gi,'');
	                }
	                var className = li.getAttribute('class');
	                if(className !== null && !className.replace(/\s/g,'')){
	                    domUtils.removeAttributes(li,'class')
	                }
	            });
	            !ignore && adjustList(node,node.tagName.toLowerCase(),getStyle(node)||domUtils.getStyle(node, 'list-style-type'),true);
	        })
	    }
	    function adjustList(list, tag, style,ignoreEmpty) {
	        var nextList = list.nextSibling;
	        if (nextList && nextList.nodeType == 1 && nextList.tagName.toLowerCase() == tag && (getStyle(nextList) || domUtils.getStyle(nextList, 'list-style-type') || (tag == 'ol' ? 'decimal' : 'disc')) == style) {
	            domUtils.moveChild(nextList, list);
	            if (nextList.childNodes.length == 0) {
	                domUtils.remove(nextList);
	            }
	        }
	        if(nextList && domUtils.isFillChar(nextList)){
	            domUtils.remove(nextList);
	        }
	        var preList = list.previousSibling;
	        if (preList && preList.nodeType == 1 && preList.tagName.toLowerCase() == tag && (getStyle(preList) || domUtils.getStyle(preList, 'list-style-type') || (tag == 'ol' ? 'decimal' : 'disc')) == style) {
	            domUtils.moveChild(list, preList);
	        }
	        if(preList && domUtils.isFillChar(preList)){
	            domUtils.remove(preList);
	        }
	        !ignoreEmpty && domUtils.isEmptyBlock(list) && domUtils.remove(list);
	        if(getStyle(list)){
	            adjustListStyle(list.ownerDocument,true)
	        }
	    }

	    function setListStyle(list,style){
	        if(customStyle[style]){
	            list.className = 'custom_' + style;
	        }
	        try{
	            domUtils.setStyle(list, 'list-style-type', style);
	        }catch(e){}
	    }
	    function clearEmptySibling(node) {
	        var tmpNode = node.previousSibling;
	        if (tmpNode && domUtils.isEmptyBlock(tmpNode)) {
	            domUtils.remove(tmpNode);
	        }
	        tmpNode = node.nextSibling;
	        if (tmpNode && domUtils.isEmptyBlock(tmpNode)) {
	            domUtils.remove(tmpNode);
	        }
	    }

	    me.addListener('keydown', function (type, evt) {
	        function preventAndSave() {
	            evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
	            me.fireEvent('contentchange');
	            me.undoManger && me.undoManger.save();
	        }
	        function findList(node,filterFn){
	            while(node && !domUtils.isBody(node)){
	                if(filterFn(node)){
	                    return null
	                }
	                if(node.nodeType == 1 && /[ou]l/i.test(node.tagName)){
	                    return node;
	                }
	                node = node.parentNode;
	            }
	            return null;
	        }
	        var keyCode = evt.keyCode || evt.which;
	        if (keyCode == 13 && !evt.shiftKey) {//回车
	            var rng = me.selection.getRange(),
	                parent = domUtils.findParent(rng.startContainer,function(node){return domUtils.isBlockElm(node)},true),
	                li = domUtils.findParentByTagName(rng.startContainer,'li',true);
	            if(parent && parent.tagName != 'PRE' && !li){
	                var html = parent.innerHTML.replace(new RegExp(domUtils.fillChar, 'g'),'');
	                if(/^\s*1\s*\.[^\d]/.test(html)){
	                    parent.innerHTML = html.replace(/^\s*1\s*\./,'');
	                    rng.setStartAtLast(parent).collapse(true).select();
	                    me.__hasEnterExecCommand = true;
	                    me.execCommand('insertorderedlist');
	                    me.__hasEnterExecCommand = false;
	                }
	            }
	            var range = me.selection.getRange(),
	                start = findList(range.startContainer,function (node) {
	                    return node.tagName == 'TABLE';
	                }),
	                end = range.collapsed ? start : findList(range.endContainer,function (node) {
	                    return node.tagName == 'TABLE';
	                });

	            if (start && end && start === end) {

	                if (!range.collapsed) {
	                    start = domUtils.findParentByTagName(range.startContainer, 'li', true);
	                    end = domUtils.findParentByTagName(range.endContainer, 'li', true);
	                    if (start && end && start === end) {
	                        range.deleteContents();
	                        li = domUtils.findParentByTagName(range.startContainer, 'li', true);
	                        if (li && domUtils.isEmptyBlock(li)) {

	                            pre = li.previousSibling;
	                            next = li.nextSibling;
	                            p = me.document.createElement('p');

	                            domUtils.fillNode(me.document, p);
	                            parentList = li.parentNode;
	                            if (pre && next) {
	                                range.setStart(next, 0).collapse(true).select(true);
	                                domUtils.remove(li);

	                            } else {
	                                if (!pre && !next || !pre) {

	                                    parentList.parentNode.insertBefore(p, parentList);


	                                } else {
	                                    li.parentNode.parentNode.insertBefore(p, parentList.nextSibling);
	                                }
	                                domUtils.remove(li);
	                                if (!parentList.firstChild) {
	                                    domUtils.remove(parentList);
	                                }
	                                range.setStart(p, 0).setCursor();


	                            }
	                            preventAndSave();
	                            return;

	                        }
	                    } else {
	                        var tmpRange = range.cloneRange(),
	                            bk = tmpRange.collapse(false).createBookmark();

	                        range.deleteContents();
	                        tmpRange.moveToBookmark(bk);
	                        var li = domUtils.findParentByTagName(tmpRange.startContainer, 'li', true);

	                        clearEmptySibling(li);
	                        tmpRange.select();
	                        preventAndSave();
	                        return;
	                    }
	                }


	                li = domUtils.findParentByTagName(range.startContainer, 'li', true);

	                if (li) {
	                    if (domUtils.isEmptyBlock(li)) {
	                        bk = range.createBookmark();
	                        var parentList = li.parentNode;
	                        if (li !== parentList.lastChild) {
	                            domUtils.breakParent(li, parentList);
	                            clearEmptySibling(li);
	                        } else {

	                            parentList.parentNode.insertBefore(li, parentList.nextSibling);
	                            if (domUtils.isEmptyNode(parentList)) {
	                                domUtils.remove(parentList);
	                            }
	                        }
	                        //嵌套不处理
	                        if (!dtd.$list[li.parentNode.tagName]) {

	                            if (!domUtils.isBlockElm(li.firstChild)) {
	                                p = me.document.createElement('p');
	                                li.parentNode.insertBefore(p, li);
	                                while (li.firstChild) {
	                                    p.appendChild(li.firstChild);
	                                }
	                                domUtils.remove(li);
	                            } else {
	                                domUtils.remove(li, true);
	                            }
	                        }
	                        range.moveToBookmark(bk).select();


	                    } else {
	                        var first = li.firstChild;
	                        if (!first || !domUtils.isBlockElm(first)) {
	                            var p = me.document.createElement('p');

	                            !li.firstChild && domUtils.fillNode(me.document, p);
	                            while (li.firstChild) {

	                                p.appendChild(li.firstChild);
	                            }
	                            li.appendChild(p);
	                            first = p;
	                        }

	                        var span = me.document.createElement('span');

	                        range.insertNode(span);
	                        domUtils.breakParent(span, li);

	                        var nextLi = span.nextSibling;
	                        first = nextLi.firstChild;

	                        if (!first) {
	                            p = me.document.createElement('p');

	                            domUtils.fillNode(me.document, p);
	                            nextLi.appendChild(p);
	                            first = p;
	                        }
	                        if (domUtils.isEmptyNode(first)) {
	                            first.innerHTML = '';
	                            domUtils.fillNode(me.document, first);
	                        }

	                        range.setStart(first, 0).collapse(true).shrinkBoundary().select();
	                        domUtils.remove(span);
	                        var pre = nextLi.previousSibling;
	                        if (pre && domUtils.isEmptyBlock(pre)) {
	                            pre.innerHTML = '<p></p>';
	                            domUtils.fillNode(me.document, pre.firstChild);
	                        }

	                    }
//	                        }
	                    preventAndSave();
	                }


	            }


	        }
	        if (keyCode == 8) {
	            //修中ie中li下的问题
	            range = me.selection.getRange();
	            if (range.collapsed && domUtils.isStartInblock(range)) {
	                tmpRange = range.cloneRange().trimBoundary();
	                li = domUtils.findParentByTagName(range.startContainer, 'li', true);
	                //要在li的最左边，才能处理
	                if (li && domUtils.isStartInblock(tmpRange)) {
	                    start = domUtils.findParentByTagName(range.startContainer, 'p', true);
	                    if (start && start !== li.firstChild) {
	                        var parentList = domUtils.findParentByTagName(start,['ol','ul']);
	                        domUtils.breakParent(start,parentList);
	                        clearEmptySibling(start);
	                        me.fireEvent('contentchange');
	                        range.setStart(start,0).setCursor(false,true);
	                        me.fireEvent('saveScene');
	                        domUtils.preventDefault(evt);
	                        return;
	                    }

	                    if (li && (pre = li.previousSibling)) {
	                        if (keyCode == 46 && li.childNodes.length) {
	                            return;
	                        }
	                        //有可能上边的兄弟节点是个2级菜单，要追加到2级菜单的最后的li
	                        if (dtd.$list[pre.tagName]) {
	                            pre = pre.lastChild;
	                        }
	                        me.undoManger && me.undoManger.save();
	                        first = li.firstChild;
	                        if (domUtils.isBlockElm(first)) {
	                            if (domUtils.isEmptyNode(first)) {
//	                                    range.setEnd(pre, pre.childNodes.length).shrinkBoundary().collapse().select(true);
	                                pre.appendChild(first);
	                                range.setStart(first, 0).setCursor(false, true);
	                                //first不是唯一的节点
	                                while (li.firstChild) {
	                                    pre.appendChild(li.firstChild);
	                                }
	                            } else {

	                                span = me.document.createElement('span');
	                                range.insertNode(span);
	                                //判断pre是否是空的节点,如果是<p><br/></p>类型的空节点，干掉p标签防止它占位
	                                if (domUtils.isEmptyBlock(pre)) {
	                                    pre.innerHTML = '';
	                                }
	                                domUtils.moveChild(li, pre);
	                                range.setStartBefore(span).collapse(true).select(true);

	                                domUtils.remove(span);

	                            }
	                        } else {
	                            if (domUtils.isEmptyNode(li)) {
	                                var p = me.document.createElement('p');
	                                pre.appendChild(p);
	                                range.setStart(p, 0).setCursor();
//	                                    range.setEnd(pre, pre.childNodes.length).shrinkBoundary().collapse().select(true);
	                            } else {
	                                range.setEnd(pre, pre.childNodes.length).collapse().select(true);
	                                while (li.firstChild) {
	                                    pre.appendChild(li.firstChild);
	                                }
	                            }
	                        }
	                        domUtils.remove(li);
	                        me.fireEvent('contentchange');
	                        me.fireEvent('saveScene');
	                        domUtils.preventDefault(evt);
	                        return;

	                    }
	                    //trace:980

	                    if (li && !li.previousSibling) {
	                        var parentList = li.parentNode;
	                        var bk = range.createBookmark();
	                        if(domUtils.isTagNode(parentList.parentNode,'ol ul')){
	                            parentList.parentNode.insertBefore(li,parentList);
	                            if(domUtils.isEmptyNode(parentList)){
	                                domUtils.remove(parentList)
	                            }
	                        }else{

	                            while(li.firstChild){
	                                parentList.parentNode.insertBefore(li.firstChild,parentList);
	                            }

	                            domUtils.remove(li);
	                            if(domUtils.isEmptyNode(parentList)){
	                                domUtils.remove(parentList)
	                            }

	                        }
	                        range.moveToBookmark(bk).setCursor(false,true);
	                        me.fireEvent('contentchange');
	                        me.fireEvent('saveScene');
	                        domUtils.preventDefault(evt);
	                        return;

	                    }


	                }


	            }

	        }
	    });

	    me.addListener('keyup',function(type, evt){
	        var keyCode = evt.keyCode || evt.which;
	        if (keyCode == 8) {
	            var rng = me.selection.getRange(),list;
	            if(list = domUtils.findParentByTagName(rng.startContainer,['ol', 'ul'],true)){
	                adjustList(list,list.tagName.toLowerCase(),getStyle(list)||domUtils.getComputedStyle(list,'list-style-type'),true)
	            }
	        }
	    });
	    //处理tab键
	    me.addListener('tabkeydown',function(){

	        var range = me.selection.getRange();

	        //控制级数
	        function checkLevel(li){
	            if(me.options.maxListLevel != -1){
	                var level = li.parentNode,levelNum = 0;
	                while(/[ou]l/i.test(level.tagName)){
	                    levelNum++;
	                    level = level.parentNode;
	                }
	                if(levelNum >= me.options.maxListLevel){
	                    return true;
	                }
	            }
	        }
	        //只以开始为准
	        //todo 后续改进
	        var li = domUtils.findParentByTagName(range.startContainer, 'li', true);
	        if(li){

	            var bk;
	            if(range.collapsed){
	                if(checkLevel(li))
	                    return true;
	                var parentLi = li.parentNode,
	                    list = me.document.createElement(parentLi.tagName),
	                    index = utils.indexOf(listStyle[list.tagName], getStyle(parentLi)||domUtils.getComputedStyle(parentLi, 'list-style-type'));
	                index = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
	                var currentStyle = listStyle[list.tagName][index];
	                setListStyle(list,currentStyle);
	                if(domUtils.isStartInblock(range)){
	                    me.fireEvent('saveScene');
	                    bk = range.createBookmark();
	                    parentLi.insertBefore(list, li);
	                    list.appendChild(li);
	                    adjustList(list,list.tagName.toLowerCase(),currentStyle);
	                    me.fireEvent('contentchange');
	                    range.moveToBookmark(bk).select(true);
	                    return true;
	                }
	            }else{
	                me.fireEvent('saveScene');
	                bk = range.createBookmark();
	                for(var i= 0,closeList,parents = domUtils.findParents(li),ci;ci=parents[i++];){
	                    if(domUtils.isTagNode(ci,'ol ul')){
	                        closeList = ci;
	                        break;
	                    }
	                }
	                var current = li;
	                if(bk.end){
	                    while(current && !(domUtils.getPosition(current, bk.end) & domUtils.POSITION_FOLLOWING)){
	                        if(checkLevel(current)){
	                            current = domUtils.getNextDomNode(current,false,null,function(node){return node !== closeList});
	                            continue;
	                        }
	                        var parentLi = current.parentNode,
	                            list = me.document.createElement(parentLi.tagName),
	                            index = utils.indexOf(listStyle[list.tagName], getStyle(parentLi)||domUtils.getComputedStyle(parentLi, 'list-style-type'));
	                        var currentIndex = index + 1 == listStyle[list.tagName].length ? 0 : index + 1;
	                        var currentStyle = listStyle[list.tagName][currentIndex];
	                        setListStyle(list,currentStyle);
	                        parentLi.insertBefore(list, current);
	                        while(current && !(domUtils.getPosition(current, bk.end) & domUtils.POSITION_FOLLOWING)){
	                            li = current.nextSibling;
	                            list.appendChild(current);
	                            if(!li || domUtils.isTagNode(li,'ol ul')){
	                                if(li){
	                                    while(li = li.firstChild){
	                                        if(li.tagName == 'LI'){
	                                            break;
	                                        }
	                                    }
	                                }else{
	                                    li = domUtils.getNextDomNode(current,false,null,function(node){return node !== closeList});
	                                }
	                                break;
	                            }
	                            current = li;
	                        }
	                        adjustList(list,list.tagName.toLowerCase(),currentStyle);
	                        current = li;
	                    }
	                }
	                me.fireEvent('contentchange');
	                range.moveToBookmark(bk).select();
	                return true;
	            }
	        }

	    });
	    function getLi(start){
	        while(start && !domUtils.isBody(start)){
	            if(start.nodeName == 'TABLE'){
	                return null;
	            }
	            if(start.nodeName == 'LI'){
	                return start
	            }
	            start = start.parentNode;
	        }
	    }

	    /**
	     * 有序列表，与“insertunorderedlist”命令互斥
	     * @command insertorderedlist
	     * @method execCommand
	     * @param { String } command 命令字符串
	     * @param { String } style 插入的有序列表类型，值为：decimal,lower-alpha,lower-roman,upper-alpha,upper-roman,cn,cn1,cn2,num,num1,num2
	     * @example
	     * ```javascript
	     * editor.execCommand( 'insertorderedlist','decimal');
	     * ```
	     */
	    /**
	     * 查询当前选区内容是否有序列表
	     * @command insertorderedlist
	     * @method queryCommandState
	     * @param { String } cmd 命令字符串
	     * @return { int } 如果当前选区是有序列表返回1，否则返回0
	     * @example
	     * ```javascript
	     * editor.queryCommandState( 'insertorderedlist' );
	     * ```
	     */
	    /**
	     * 查询当前选区内容是否有序列表
	     * @command insertorderedlist
	     * @method queryCommandValue
	     * @param { String } cmd 命令字符串
	     * @return { String } 返回当前有序列表的类型，值为null或decimal,lower-alpha,lower-roman,upper-alpha,upper-roman,cn,cn1,cn2,num,num1,num2
	     * @example
	     * ```javascript
	     * editor.queryCommandValue( 'insertorderedlist' );
	     * ```
	     */

	    /**
	     * 无序列表，与“insertorderedlist”命令互斥
	     * @command insertunorderedlist
	     * @method execCommand
	     * @param { String } command 命令字符串
	     * @param { String } style 插入的无序列表类型，值为：circle,disc,square,dash,dot
	     * @example
	     * ```javascript
	     * editor.execCommand( 'insertunorderedlist','circle');
	     * ```
	     */
	    /**
	     * 查询当前是否有word文档粘贴进来的图片
	     * @command insertunorderedlist
	     * @method insertunorderedlist
	     * @param { String } command 命令字符串
	     * @return { int } 如果当前选区是无序列表返回1，否则返回0
	     * @example
	     * ```javascript
	     * editor.queryCommandState( 'insertunorderedlist' );
	     * ```
	     */
	    /**
	     * 查询当前选区内容是否有序列表
	     * @command insertunorderedlist
	     * @method queryCommandValue
	     * @param { String } command 命令字符串
	     * @return { String } 返回当前无序列表的类型，值为null或circle,disc,square,dash,dot
	     * @example
	     * ```javascript
	     * editor.queryCommandValue( 'insertunorderedlist' );
	     * ```
	     */

	    me.commands['insertorderedlist'] =
	    me.commands['insertunorderedlist'] = {
	            execCommand:function (command, style) {

	                if (!style) {
	                    style = command.toLowerCase() == 'insertorderedlist' ? 'decimal' : 'disc';
	                }
	                var me = this,
	                    range = this.selection.getRange(),
	                    filterFn = function (node) {
	                        return   node.nodeType == 1 ? node.tagName.toLowerCase() != 'br' : !domUtils.isWhitespace(node);
	                    },
	                    tag = command.toLowerCase() == 'insertorderedlist' ? 'ol' : 'ul',
	                    frag = me.document.createDocumentFragment();
	                //去掉是因为会出现选到末尾，导致adjustmentBoundary缩到ol/ul的位置
	                //range.shrinkBoundary();//.adjustmentBoundary();
	                range.adjustmentBoundary().shrinkBoundary();
	                var bko = range.createBookmark(true),
	                    start = getLi(me.document.getElementById(bko.start)),
	                    modifyStart = 0,
	                    end =  getLi(me.document.getElementById(bko.end)),
	                    modifyEnd = 0,
	                    startParent, endParent,
	                    list, tmp;

	                if (start || end) {
	                    start && (startParent = start.parentNode);
	                    if (!bko.end) {
	                        end = start;
	                    }
	                    end && (endParent = end.parentNode);

	                    if (startParent === endParent) {
	                        while (start !== end) {
	                            tmp = start;
	                            start = start.nextSibling;
	                            if (!domUtils.isBlockElm(tmp.firstChild)) {
	                                var p = me.document.createElement('p');
	                                while (tmp.firstChild) {
	                                    p.appendChild(tmp.firstChild);
	                                }
	                                tmp.appendChild(p);
	                            }
	                            frag.appendChild(tmp);
	                        }
	                        tmp = me.document.createElement('span');
	                        startParent.insertBefore(tmp, end);
	                        if (!domUtils.isBlockElm(end.firstChild)) {
	                            p = me.document.createElement('p');
	                            while (end.firstChild) {
	                                p.appendChild(end.firstChild);
	                            }
	                            end.appendChild(p);
	                        }
	                        frag.appendChild(end);
	                        domUtils.breakParent(tmp, startParent);
	                        if (domUtils.isEmptyNode(tmp.previousSibling)) {
	                            domUtils.remove(tmp.previousSibling);
	                        }
	                        if (domUtils.isEmptyNode(tmp.nextSibling)) {
	                            domUtils.remove(tmp.nextSibling)
	                        }
	                        var nodeStyle = getStyle(startParent) || domUtils.getComputedStyle(startParent, 'list-style-type') || (command.toLowerCase() == 'insertorderedlist' ? 'decimal' : 'disc');
	                        if (startParent.tagName.toLowerCase() == tag && nodeStyle == style) {
	                            for (var i = 0, ci, tmpFrag = me.document.createDocumentFragment(); ci = frag.firstChild;) {
	                                if(domUtils.isTagNode(ci,'ol ul')){
//	                                  删除时，子列表不处理
//	                                  utils.each(domUtils.getElementsByTagName(ci,'li'),function(li){
//	                                        while(li.firstChild){
//	                                            tmpFrag.appendChild(li.firstChild);
//	                                        }
	//
//	                                    });
	                                    tmpFrag.appendChild(ci);
	                                }else{
	                                    while (ci.firstChild) {

	                                        tmpFrag.appendChild(ci.firstChild);
	                                        domUtils.remove(ci);
	                                    }
	                                }

	                            }
	                            tmp.parentNode.insertBefore(tmpFrag, tmp);
	                        } else {
	                            list = me.document.createElement(tag);
	                            setListStyle(list,style);
	                            list.appendChild(frag);
	                            tmp.parentNode.insertBefore(list, tmp);
	                        }

	                        domUtils.remove(tmp);
	                        list && adjustList(list, tag, style);
	                        range.moveToBookmark(bko).select();
	                        return;
	                    }
	                    //开始
	                    if (start) {
	                        while (start) {
	                            tmp = start.nextSibling;
	                            if (domUtils.isTagNode(start, 'ol ul')) {
	                                frag.appendChild(start);
	                            } else {
	                                var tmpfrag = me.document.createDocumentFragment(),
	                                    hasBlock = 0;
	                                while (start.firstChild) {
	                                    if (domUtils.isBlockElm(start.firstChild)) {
	                                        hasBlock = 1;
	                                    }
	                                    tmpfrag.appendChild(start.firstChild);
	                                }
	                                if (!hasBlock) {
	                                    var tmpP = me.document.createElement('p');
	                                    tmpP.appendChild(tmpfrag);
	                                    frag.appendChild(tmpP);
	                                } else {
	                                    frag.appendChild(tmpfrag);
	                                }
	                                domUtils.remove(start);
	                            }

	                            start = tmp;
	                        }
	                        startParent.parentNode.insertBefore(frag, startParent.nextSibling);
	                        if (domUtils.isEmptyNode(startParent)) {
	                            range.setStartBefore(startParent);
	                            domUtils.remove(startParent);
	                        } else {
	                            range.setStartAfter(startParent);
	                        }
	                        modifyStart = 1;
	                    }

	                    if (end && domUtils.inDoc(endParent, me.document)) {
	                        //结束
	                        start = endParent.firstChild;
	                        while (start && start !== end) {
	                            tmp = start.nextSibling;
	                            if (domUtils.isTagNode(start, 'ol ul')) {
	                                frag.appendChild(start);
	                            } else {
	                                tmpfrag = me.document.createDocumentFragment();
	                                hasBlock = 0;
	                                while (start.firstChild) {
	                                    if (domUtils.isBlockElm(start.firstChild)) {
	                                        hasBlock = 1;
	                                    }
	                                    tmpfrag.appendChild(start.firstChild);
	                                }
	                                if (!hasBlock) {
	                                    tmpP = me.document.createElement('p');
	                                    tmpP.appendChild(tmpfrag);
	                                    frag.appendChild(tmpP);
	                                } else {
	                                    frag.appendChild(tmpfrag);
	                                }
	                                domUtils.remove(start);
	                            }
	                            start = tmp;
	                        }
	                        var tmpDiv = domUtils.createElement(me.document, 'div', {
	                            'tmpDiv':1
	                        });
	                        domUtils.moveChild(end, tmpDiv);

	                        frag.appendChild(tmpDiv);
	                        domUtils.remove(end);
	                        endParent.parentNode.insertBefore(frag, endParent);
	                        range.setEndBefore(endParent);
	                        if (domUtils.isEmptyNode(endParent)) {
	                            domUtils.remove(endParent);
	                        }

	                        modifyEnd = 1;
	                    }


	                }

	                if (!modifyStart) {
	                    range.setStartBefore(me.document.getElementById(bko.start));
	                }
	                if (bko.end && !modifyEnd) {
	                    range.setEndAfter(me.document.getElementById(bko.end));
	                }
	                range.enlarge(true, function (node) {
	                    return notExchange[node.tagName];
	                });

	                frag = me.document.createDocumentFragment();

	                var bk = range.createBookmark(),
	                    current = domUtils.getNextDomNode(bk.start, false, filterFn),
	                    tmpRange = range.cloneRange(),
	                    tmpNode,
	                    block = domUtils.isBlockElm;

	                while (current && current !== bk.end && (domUtils.getPosition(current, bk.end) & domUtils.POSITION_PRECEDING)) {

	                    if (current.nodeType == 3 || dtd.li[current.tagName]) {
	                        if (current.nodeType == 1 && dtd.$list[current.tagName]) {
	                            while (current.firstChild) {
	                                frag.appendChild(current.firstChild);
	                            }
	                            tmpNode = domUtils.getNextDomNode(current, false, filterFn);
	                            domUtils.remove(current);
	                            current = tmpNode;
	                            continue;

	                        }
	                        tmpNode = current;
	                        tmpRange.setStartBefore(current);

	                        while (current && current !== bk.end && (!block(current) || domUtils.isBookmarkNode(current) )) {
	                            tmpNode = current;
	                            current = domUtils.getNextDomNode(current, false, null, function (node) {
	                                return !notExchange[node.tagName];
	                            });
	                        }

	                        if (current && block(current)) {
	                            tmp = domUtils.getNextDomNode(tmpNode, false, filterFn);
	                            if (tmp && domUtils.isBookmarkNode(tmp)) {
	                                current = domUtils.getNextDomNode(tmp, false, filterFn);
	                                tmpNode = tmp;
	                            }
	                        }
	                        tmpRange.setEndAfter(tmpNode);

	                        current = domUtils.getNextDomNode(tmpNode, false, filterFn);

	                        var li = range.document.createElement('li');

	                        li.appendChild(tmpRange.extractContents());
	                        if(domUtils.isEmptyNode(li)){
	                            var tmpNode = range.document.createElement('p');
	                            while(li.firstChild){
	                                tmpNode.appendChild(li.firstChild)
	                            }
	                            li.appendChild(tmpNode);
	                        }
	                        frag.appendChild(li);
	                    } else {
	                        current = domUtils.getNextDomNode(current, true, filterFn);
	                    }
	                }
	                range.moveToBookmark(bk).collapse(true);
	                list = me.document.createElement(tag);
	                setListStyle(list,style);
	                list.appendChild(frag);
	                range.insertNode(list);
	                //当前list上下看能否合并
	                adjustList(list, tag, style);
	                //去掉冗余的tmpDiv
	                for (var i = 0, ci, tmpDivs = domUtils.getElementsByTagName(list, 'div'); ci = tmpDivs[i++];) {
	                    if (ci.getAttribute('tmpDiv')) {
	                        domUtils.remove(ci, true)
	                    }
	                }
	                range.moveToBookmark(bko).select();

	            },
	            queryCommandState:function (command) {
	                var tag = command.toLowerCase() == 'insertorderedlist' ? 'ol' : 'ul';
	                var path = this.selection.getStartElementPath();
	                for(var i= 0,ci;ci = path[i++];){
	                    if(ci.nodeName == 'TABLE'){
	                        return 0
	                    }
	                    if(tag == ci.nodeName.toLowerCase()){
	                        return 1
	                    };
	                }
	                return 0;

	            },
	            queryCommandValue:function (command) {
	                var tag = command.toLowerCase() == 'insertorderedlist' ? 'ol' : 'ul';
	                var path = this.selection.getStartElementPath(),
	                    node;
	                for(var i= 0,ci;ci = path[i++];){
	                    if(ci.nodeName == 'TABLE'){
	                        node = null;
	                        break;
	                    }
	                    if(tag == ci.nodeName.toLowerCase()){
	                        node = ci;
	                        break;
	                    };
	                }
	                return node ? getStyle(node) || domUtils.getComputedStyle(node, 'list-style-type') : null;
	            }
	        };
	};



	// plugins/source.js
	/**
	 * 源码编辑插件
	 * @file
	 * @since 1.2.6.1
	 */

	(function (){
	    var sourceEditors = {
	        textarea: function (editor, holder){
	            var textarea = holder.ownerDocument.createElement('textarea');
	            textarea.style.cssText = 'position:absolute;resize:none;width:100%;height:100%;border:0;padding:0;margin:0;overflow-y:auto;';
	            // todo: IE下只有onresize属性可用... 很纠结
	            if (browser.ie && browser.version < 8) {
	                textarea.style.width = holder.offsetWidth + 'px';
	                textarea.style.height = holder.offsetHeight + 'px';
	                holder.onresize = function (){
	                    textarea.style.width = holder.offsetWidth + 'px';
	                    textarea.style.height = holder.offsetHeight + 'px';
	                };
	            }
	            holder.appendChild(textarea);
	            return {
	                setContent: function (content){
	                    textarea.value = content;
	                },
	                getContent: function (){
	                    return textarea.value;
	                },
	                select: function (){
	                    var range;
	                    if (browser.ie) {
	                        range = textarea.createTextRange();
	                        range.collapse(true);
	                        range.select();
	                    } else {
	                        //todo: chrome下无法设置焦点
	                        textarea.setSelectionRange(0, 0);
	                        textarea.focus();
	                    }
	                },
	                dispose: function (){
	                    holder.removeChild(textarea);
	                    // todo
	                    holder.onresize = null;
	                    textarea = null;
	                    holder = null;
	                }
	            };
	        },
	        codemirror: function (editor, holder){

	            var codeEditor = window.CodeMirror(holder, {
	                mode: "text/html",
	                tabMode: "indent",
	                lineNumbers: true,
	                lineWrapping:true
	            });
	            var dom = codeEditor.getWrapperElement();
	            dom.style.cssText = 'position:absolute;left:0;top:0;width:100%;height:100%;font-family:consolas,"Courier new",monospace;font-size:13px;';
	            codeEditor.getScrollerElement().style.cssText = 'position:absolute;left:0;top:0;width:100%;height:100%;';
	            codeEditor.refresh();
	            return {
	                getCodeMirror:function(){
	                    return codeEditor;
	                },
	                setContent: function (content){
	                    codeEditor.setValue(content);
	                },
	                getContent: function (){
	                    return codeEditor.getValue();
	                },
	                select: function (){
	                    codeEditor.focus();
	                },
	                dispose: function (){
	                    holder.removeChild(dom);
	                    dom = null;
	                    codeEditor = null;
	                }
	            };
	        }
	    };

	    UE.plugins['source'] = function (){
	        var me = this;
	        var opt = this.options;
	        var sourceMode = false;
	        var sourceEditor;
	        var orgSetContent;
	        opt.sourceEditor = browser.ie  ? 'textarea' : (opt.sourceEditor || 'codemirror');

	        me.setOpt({
	            sourceEditorFirst:false
	        });
	        function createSourceEditor(holder){
	            return sourceEditors[opt.sourceEditor == 'codemirror' && window.CodeMirror ? 'codemirror' : 'textarea'](me, holder);
	        }

	        var bakCssText;
	        //解决在源码模式下getContent不能得到最新的内容问题
	        var oldGetContent,
	            bakAddress;

	        /**
	         * 切换源码模式和编辑模式
	         * @command source
	         * @method execCommand
	         * @param { String } cmd 命令字符串
	         * @example
	         * ```javascript
	         * editor.execCommand( 'source');
	         * ```
	         */

	        /**
	         * 查询当前编辑区域的状态是源码模式还是可视化模式
	         * @command source
	         * @method queryCommandState
	         * @param { String } cmd 命令字符串
	         * @return { int } 如果当前是源码编辑模式，返回1，否则返回0
	         * @example
	         * ```javascript
	         * editor.queryCommandState( 'source' );
	         * ```
	         */

	        me.commands['source'] = {
	            execCommand: function (){

	                sourceMode = !sourceMode;
	                if (sourceMode) {
	                    bakAddress = me.selection.getRange().createAddress(false,true);
	                    me.undoManger && me.undoManger.save(true);
	                    if(browser.gecko){
	                        me.body.contentEditable = false;
	                    }

	                    bakCssText = me.iframe.style.cssText;
	                    me.iframe.style.cssText += 'position:absolute;left:-32768px;top:-32768px;';


	                    me.fireEvent('beforegetcontent');
	                    var root = UE.htmlparser(me.body.innerHTML);
	                    me.filterOutputRule(root);
	                    root.traversal(function (node) {
	                        if (node.type == 'element') {
	                            switch (node.tagName) {
	                                case 'td':
	                                case 'th':
	                                case 'caption':
	                                if(node.children && node.children.length == 1){
	                                    if(node.firstChild().tagName == 'br' ){
	                                        node.removeChild(node.firstChild())
	                                    }
	                                };
	                                break;
	                                case 'pre':
	                                    node.innerText(node.innerText().replace(/&nbsp;/g,' '))

	                            }
	                        }
	                    });

	                    me.fireEvent('aftergetcontent');

	                    var content = root.toHtml(true);

	                    sourceEditor = createSourceEditor(me.iframe.parentNode);

	                    sourceEditor.setContent(content);

	                    orgSetContent = me.setContent;

	                    me.setContent = function(html){
	                        //这里暂时不触发事件，防止报错
	                        var root = UE.htmlparser(html);
	                        me.filterInputRule(root);
	                        html = root.toHtml();
	                        sourceEditor.setContent(html);
	                    };

	                    setTimeout(function (){
	                        sourceEditor.select();
	                        me.addListener('fullscreenchanged', function(){
	                            try{
	                                sourceEditor.getCodeMirror().refresh()
	                            }catch(e){}
	                        });
	                    });

	                    //重置getContent，源码模式下取值也能是最新的数据
	                    oldGetContent = me.getContent;
	                    me.getContent = function (){
	                        return sourceEditor.getContent() || '<p>' + (browser.ie ? '' : '<br/>')+'</p>';
	                    };
	                } else {
	                    me.iframe.style.cssText = bakCssText;
	                    var cont = sourceEditor.getContent() || '<p>' + (browser.ie ? '' : '<br/>')+'</p>';
	                    //处理掉block节点前后的空格,有可能会误命中，暂时不考虑
	                    cont = cont.replace(new RegExp('[\\r\\t\\n ]*<\/?(\\w+)\\s*(?:[^>]*)>','g'), function(a,b){
	                        if(b && !dtd.$inlineWithA[b.toLowerCase()]){
	                            return a.replace(/(^[\n\r\t ]*)|([\n\r\t ]*$)/g,'');
	                        }
	                        return a.replace(/(^[\n\r\t]*)|([\n\r\t]*$)/g,'')
	                    });

	                    me.setContent = orgSetContent;

	                    me.setContent(cont);
	                    sourceEditor.dispose();
	                    sourceEditor = null;
	                    //还原getContent方法
	                    me.getContent = oldGetContent;
	                    var first = me.body.firstChild;
	                    //trace:1106 都删除空了，下边会报错，所以补充一个p占位
	                    if(!first){
	                        me.body.innerHTML = '<p>'+(browser.ie?'':'<br/>')+'</p>';
	                        first = me.body.firstChild;
	                    }


	                    //要在ifm为显示时ff才能取到selection,否则报错
	                    //这里不能比较位置了
	                    me.undoManger && me.undoManger.save(true);

	                    if(browser.gecko){

	                        var input = document.createElement('input');
	                        input.style.cssText = 'position:absolute;left:0;top:-32768px';

	                        document.body.appendChild(input);

	                        me.body.contentEditable = false;
	                        setTimeout(function(){
	                            domUtils.setViewportOffset(input, { left: -32768, top: 0 });
	                            input.focus();
	                            setTimeout(function(){
	                                me.body.contentEditable = true;
	                                me.selection.getRange().moveToAddress(bakAddress).select(true);
	                                domUtils.remove(input);
	                            });

	                        });
	                    }else{
	                        //ie下有可能报错，比如在代码顶头的情况
	                        try{
	                            me.selection.getRange().moveToAddress(bakAddress).select(true);
	                        }catch(e){}

	                    }
	                }
	                this.fireEvent('sourcemodechanged', sourceMode);
	            },
	            queryCommandState: function (){
	                return sourceMode|0;
	            },
	            notNeedUndo : 1
	        };
	        var oldQueryCommandState = me.queryCommandState;

	        me.queryCommandState = function (cmdName){
	            cmdName = cmdName.toLowerCase();
	            if (sourceMode) {
	                //源码模式下可以开启的命令
	                return cmdName in {
	                    'source' : 1,
	                    'fullscreen' : 1
	                } ? 1 : -1
	            }
	            return oldQueryCommandState.apply(this, arguments);
	        };

	        if(opt.sourceEditor == "codemirror"){

	            me.addListener("ready",function(){
	                utils.loadFile(document,{
	                    src : opt.codeMirrorJsUrl || opt.UEDITOR_HOME_URL + "third-party/codemirror/codemirror.js",
	                    tag : "script",
	                    type : "text/javascript",
	                    defer : "defer"
	                },function(){
	                    if(opt.sourceEditorFirst){
	                        setTimeout(function(){
	                            me.execCommand("source");
	                        },0);
	                    }
	                });
	                utils.loadFile(document,{
	                    tag : "link",
	                    rel : "stylesheet",
	                    type : "text/css",
	                    href : opt.codeMirrorCssUrl || opt.UEDITOR_HOME_URL + "third-party/codemirror/codemirror.css"
	                });

	            });
	        }

	    };

	})();

	// plugins/enterkey.js
	///import core
	///import plugins/undo.js
	///commands 设置回车标签p或br
	///commandsName  EnterKey
	///commandsTitle  设置回车标签p或br
	/**
	 * @description 处理回车
	 * @author zhanyi
	 */
	UE.plugins['enterkey'] = function() {
	    var hTag,
	        me = this,
	        tag = me.options.enterTag;
	    me.addListener('keyup', function(type, evt) {

	        var keyCode = evt.keyCode || evt.which;
	        if (keyCode == 13) {
	            var range = me.selection.getRange(),
	                start = range.startContainer,
	                doSave;

	            //修正在h1-h6里边回车后不能嵌套p的问题
	            if (!browser.ie) {

	                if (/h\d/i.test(hTag)) {
	                    if (browser.gecko) {
	                        var h = domUtils.findParentByTagName(start, [ 'h1', 'h2', 'h3', 'h4', 'h5', 'h6','blockquote','caption','table'], true);
	                        if (!h) {
	                            me.document.execCommand('formatBlock', false, '<p>');
	                            doSave = 1;
	                        }
	                    } else {
	                        //chrome remove div
	                        if (start.nodeType == 1) {
	                            var tmp = me.document.createTextNode(''),div;
	                            range.insertNode(tmp);
	                            div = domUtils.findParentByTagName(tmp, 'div', true);
	                            if (div) {
	                                var p = me.document.createElement('p');
	                                while (div.firstChild) {
	                                    p.appendChild(div.firstChild);
	                                }
	                                div.parentNode.insertBefore(p, div);
	                                domUtils.remove(div);
	                                range.setStartBefore(tmp).setCursor();
	                                doSave = 1;
	                            }
	                            domUtils.remove(tmp);

	                        }
	                    }

	                    if (me.undoManger && doSave) {
	                        me.undoManger.save();
	                    }
	                }
	                //没有站位符，会出现多行的问题
	                browser.opera &&  range.select();
	            }else{
	                me.fireEvent('saveScene',true,true)
	            }
	        }
	    });

	    me.addListener('keydown', function(type, evt) {
	        var keyCode = evt.keyCode || evt.which;
	        if (keyCode == 13) {//回车
	            if(me.fireEvent('beforeenterkeydown')){
	                domUtils.preventDefault(evt);
	                return;
	            }
	            me.fireEvent('saveScene',true,true);
	            hTag = '';


	            var range = me.selection.getRange();

	            if (!range.collapsed) {
	                //跨td不能删
	                var start = range.startContainer,
	                    end = range.endContainer,
	                    startTd = domUtils.findParentByTagName(start, 'td', true),
	                    endTd = domUtils.findParentByTagName(end, 'td', true);
	                if (startTd && endTd && startTd !== endTd || !startTd && endTd || startTd && !endTd) {
	                    evt.preventDefault ? evt.preventDefault() : ( evt.returnValue = false);
	                    return;
	                }
	            }
	            if (tag == 'p') {


	                if (!browser.ie) {

	                    start = domUtils.findParentByTagName(range.startContainer, ['ol','ul','p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6','blockquote','caption'], true);

	                    //opera下执行formatblock会在table的场景下有问题，回车在opera原生支持很好，所以暂时在opera去掉调用这个原生的command
	                    //trace:2431
	                    if (!start && !browser.opera) {

	                        me.document.execCommand('formatBlock', false, '<p>');

	                        if (browser.gecko) {
	                            range = me.selection.getRange();
	                            start = domUtils.findParentByTagName(range.startContainer, 'p', true);
	                            start && domUtils.removeDirtyAttr(start);
	                        }


	                    } else {
	                        hTag = start.tagName;
	                        start.tagName.toLowerCase() == 'p' && browser.gecko && domUtils.removeDirtyAttr(start);
	                    }

	                }

	            } else {
	                evt.preventDefault ? evt.preventDefault() : ( evt.returnValue = false);

	                if (!range.collapsed) {
	                    range.deleteContents();
	                    start = range.startContainer;
	                    if (start.nodeType == 1 && (start = start.childNodes[range.startOffset])) {
	                        while (start.nodeType == 1) {
	                            if (dtd.$empty[start.tagName]) {
	                                range.setStartBefore(start).setCursor();
	                                if (me.undoManger) {
	                                    me.undoManger.save();
	                                }
	                                return false;
	                            }
	                            if (!start.firstChild) {
	                                var br = range.document.createElement('br');
	                                start.appendChild(br);
	                                range.setStart(start, 0).setCursor();
	                                if (me.undoManger) {
	                                    me.undoManger.save();
	                                }
	                                return false;
	                            }
	                            start = start.firstChild;
	                        }
	                        if (start === range.startContainer.childNodes[range.startOffset]) {
	                            br = range.document.createElement('br');
	                            range.insertNode(br).setCursor();

	                        } else {
	                            range.setStart(start, 0).setCursor();
	                        }


	                    } else {
	                        br = range.document.createElement('br');
	                        range.insertNode(br).setStartAfter(br).setCursor();
	                    }


	                } else {
	                    br = range.document.createElement('br');
	                    range.insertNode(br);
	                    var parent = br.parentNode;
	                    if (parent.lastChild === br) {
	                        br.parentNode.insertBefore(br.cloneNode(true), br);
	                        range.setStartBefore(br);
	                    } else {
	                        range.setStartAfter(br);
	                    }
	                    range.setCursor();

	                }

	            }

	        }
	    });
	};


	// plugins/keystrokes.js
	/* 处理特殊键的兼容性问题 */
	UE.plugins['keystrokes'] = function() {
	    var me = this;
	    var collapsed = true;
	    me.addListener('keydown', function(type, evt) {
	        var keyCode = evt.keyCode || evt.which,
	            rng = me.selection.getRange();

	        //处理全选的情况
	        if(!rng.collapsed && !(evt.ctrlKey || evt.shiftKey || evt.altKey || evt.metaKey) && (keyCode >= 65 && keyCode <=90
	            || keyCode >= 48 && keyCode <= 57 ||
	            keyCode >= 96 && keyCode <= 111 || {
	                    13:1,
	                    8:1,
	                    46:1
	                }[keyCode])
	            ){

	            var tmpNode = rng.startContainer;
	            if(domUtils.isFillChar(tmpNode)){
	                rng.setStartBefore(tmpNode)
	            }
	            tmpNode = rng.endContainer;
	            if(domUtils.isFillChar(tmpNode)){
	                rng.setEndAfter(tmpNode)
	            }
	            rng.txtToElmBoundary();
	            //结束边界可能放到了br的前边，要把br包含进来
	            // x[xxx]<br/>
	            if(rng.endContainer && rng.endContainer.nodeType == 1){
	                tmpNode = rng.endContainer.childNodes[rng.endOffset];
	                if(tmpNode && domUtils.isBr(tmpNode)){
	                    rng.setEndAfter(tmpNode);
	                }
	            }
	            if(rng.startOffset == 0){
	                tmpNode = rng.startContainer;
	                if(domUtils.isBoundaryNode(tmpNode,'firstChild') ){
	                    tmpNode = rng.endContainer;
	                    if(rng.endOffset == (tmpNode.nodeType == 3 ? tmpNode.nodeValue.length : tmpNode.childNodes.length) && domUtils.isBoundaryNode(tmpNode,'lastChild')){
	                        me.fireEvent('saveScene');
	                        me.body.innerHTML = '<p>'+(browser.ie ? '' : '<br/>')+'</p>';
	                        rng.setStart(me.body.firstChild,0).setCursor(false,true);
	                        me._selectionChange();
	                        return;
	                    }
	                }
	            }
	        }

	        //处理backspace
	        if (keyCode == keymap.Backspace) {
	            rng = me.selection.getRange();
	            collapsed = rng.collapsed;
	            if(me.fireEvent('delkeydown',evt)){
	                return;
	            }
	            var start,end;
	            //避免按两次删除才能生效的问题
	            if(rng.collapsed && rng.inFillChar()){
	                start = rng.startContainer;

	                if(domUtils.isFillChar(start)){
	                    rng.setStartBefore(start).shrinkBoundary(true).collapse(true);
	                    domUtils.remove(start)
	                }else{
	                    start.nodeValue = start.nodeValue.replace(new RegExp('^' + domUtils.fillChar ),'');
	                    rng.startOffset--;
	                    rng.collapse(true).select(true)
	                }
	            }

	            //解决选中control元素不能删除的问题
	            if (start = rng.getClosedNode()) {
	                me.fireEvent('saveScene');
	                rng.setStartBefore(start);
	                domUtils.remove(start);
	                rng.setCursor();
	                me.fireEvent('saveScene');
	                domUtils.preventDefault(evt);
	                return;
	            }
	            //阻止在table上的删除
	            if (!browser.ie) {
	                start = domUtils.findParentByTagName(rng.startContainer, 'table', true);
	                end = domUtils.findParentByTagName(rng.endContainer, 'table', true);
	                if (start && !end || !start && end || start !== end) {
	                    evt.preventDefault();
	                    return;
	                }
	            }

	        }
	        //处理tab键的逻辑
	        if (keyCode == keymap.Tab) {
	            //不处理以下标签
	            var excludeTagNameForTabKey = {
	                'ol' : 1,
	                'ul' : 1,
	                'table':1
	            };
	            //处理组件里的tab按下事件
	            if(me.fireEvent('tabkeydown',evt)){
	                domUtils.preventDefault(evt);
	                return;
	            }
	            var range = me.selection.getRange();
	            me.fireEvent('saveScene');
	            for (var i = 0,txt = '',tabSize = me.options.tabSize|| 4,tabNode =  me.options.tabNode || '&nbsp;'; i < tabSize; i++) {
	                txt += tabNode;
	            }
	            var span = me.document.createElement('span');
	            span.innerHTML = txt + domUtils.fillChar;
	            if (range.collapsed) {
	                range.insertNode(span.cloneNode(true).firstChild).setCursor(true);
	            } else {
	                var filterFn = function(node) {
	                    return domUtils.isBlockElm(node) && !excludeTagNameForTabKey[node.tagName.toLowerCase()]

	                };
	                //普通的情况
	                start = domUtils.findParent(range.startContainer, filterFn,true);
	                end = domUtils.findParent(range.endContainer, filterFn,true);
	                if (start && end && start === end) {
	                    range.deleteContents();
	                    range.insertNode(span.cloneNode(true).firstChild).setCursor(true);
	                } else {
	                    var bookmark = range.createBookmark();
	                    range.enlarge(true);
	                    var bookmark2 = range.createBookmark(),
	                        current = domUtils.getNextDomNode(bookmark2.start, false, filterFn);
	                    while (current && !(domUtils.getPosition(current, bookmark2.end) & domUtils.POSITION_FOLLOWING)) {
	                        current.insertBefore(span.cloneNode(true).firstChild, current.firstChild);
	                        current = domUtils.getNextDomNode(current, false, filterFn);
	                    }
	                    range.moveToBookmark(bookmark2).moveToBookmark(bookmark).select();
	                }
	            }
	            domUtils.preventDefault(evt)
	        }
	        //trace:1634
	        //ff的del键在容器空的时候，也会删除
	        if(browser.gecko && keyCode == 46){
	            range = me.selection.getRange();
	            if(range.collapsed){
	                start = range.startContainer;
	                if(domUtils.isEmptyBlock(start)){
	                    var parent = start.parentNode;
	                    while(domUtils.getChildCount(parent) == 1 && !domUtils.isBody(parent)){
	                        start = parent;
	                        parent = parent.parentNode;
	                    }
	                    if(start === parent.lastChild)
	                        evt.preventDefault();
	                    return;
	                }
	            }
	        }
	    });
	    me.addListener('keyup', function(type, evt) {
	        var keyCode = evt.keyCode || evt.which,
	            rng,me = this;
	        if(keyCode == keymap.Backspace){
	            if(me.fireEvent('delkeyup')){
	                return;
	            }
	            rng = me.selection.getRange();
	            if(rng.collapsed){
	                var tmpNode,
	                    autoClearTagName = ['h1','h2','h3','h4','h5','h6'];
	                if(tmpNode = domUtils.findParentByTagName(rng.startContainer,autoClearTagName,true)){
	                    if(domUtils.isEmptyBlock(tmpNode)){
	                        var pre = tmpNode.previousSibling;
	                        if(pre && pre.nodeName != 'TABLE'){
	                            domUtils.remove(tmpNode);
	                            rng.setStartAtLast(pre).setCursor(false,true);
	                            return;
	                        }else{
	                            var next = tmpNode.nextSibling;
	                            if(next && next.nodeName != 'TABLE'){
	                                domUtils.remove(tmpNode);
	                                rng.setStartAtFirst(next).setCursor(false,true);
	                                return;
	                            }
	                        }
	                    }
	                }
	                //处理当删除到body时，要重新给p标签展位
	                if(domUtils.isBody(rng.startContainer)){
	                    var tmpNode = domUtils.createElement(me.document,'p',{
	                        'innerHTML' : browser.ie ? domUtils.fillChar : '<br/>'
	                    });
	                    rng.insertNode(tmpNode).setStart(tmpNode,0).setCursor(false,true);
	                }
	            }


	            //chrome下如果删除了inline标签，浏览器会有记忆，在输入文字还是会套上刚才删除的标签，所以这里再选一次就不会了
	            if( !collapsed && (rng.startContainer.nodeType == 3 || rng.startContainer.nodeType == 1 && domUtils.isEmptyBlock(rng.startContainer))){
	                if(browser.ie){
	                    var span = rng.document.createElement('span');
	                    rng.insertNode(span).setStartBefore(span).collapse(true);
	                    rng.select();
	                    domUtils.remove(span)
	                }else{
	                    rng.select()
	                }

	            }
	        }


	    })
	};

	// plugins/fiximgclick.js
	///import core
	///commands 修复chrome下图片不能点击的问题，出现八个角可改变大小
	///commandsName  FixImgClick
	///commandsTitle  修复chrome下图片不能点击的问题，出现八个角可改变大小
	//修复chrome下图片不能点击的问题，出现八个角可改变大小

	UE.plugins['fiximgclick'] = (function () {

	    var elementUpdated = false;
	    function Scale() {
	        this.editor = null;
	        this.resizer = null;
	        this.cover = null;
	        this.doc = document;
	        this.prePos = {x: 0, y: 0};
	        this.startPos = {x: 0, y: 0};
	    }

	    (function () {
	        var rect = [
	            //[left, top, width, height]
	            [0, 0, -1, -1],
	            [0, 0, 0, -1],
	            [0, 0, 1, -1],
	            [0, 0, -1, 0],
	            [0, 0, 1, 0],
	            [0, 0, -1, 1],
	            [0, 0, 0, 1],
	            [0, 0, 1, 1]
	        ];

	        Scale.prototype = {
	            init: function (editor) {
	                var me = this;
	                me.editor = editor;
	                me.startPos = this.prePos = {x: 0, y: 0};
	                me.dragId = -1;

	                var hands = [],
	                    cover = me.cover = document.createElement('div'),
	                    resizer = me.resizer = document.createElement('div');

	                cover.id = me.editor.ui.id + '_imagescale_cover';
	                cover.style.cssText = 'position:absolute;display:none;z-index:' + (me.editor.options.zIndex) + ';filter:alpha(opacity=0); opacity:0;background:#CCC;';
	                domUtils.on(cover, 'mousedown click', function () {
	                    me.hide();
	                });

	                for (i = 0; i < 8; i++) {
	                    hands.push('<span class="edui-editor-imagescale-hand' + i + '"></span>');
	                }
	                resizer.id = me.editor.ui.id + '_imagescale';
	                resizer.className = 'edui-editor-imagescale';
	                resizer.innerHTML = hands.join('');
	                resizer.style.cssText += ';display:none;border:1px solid #3b77ff;z-index:' + (me.editor.options.zIndex) + ';';

	                me.editor.ui.getDom().appendChild(cover);
	                me.editor.ui.getDom().appendChild(resizer);

	                me.initStyle();
	                me.initEvents();
	            },
	            initStyle: function () {
	                utils.cssRule('imagescale', '.edui-editor-imagescale{display:none;position:absolute;border:1px solid #38B2CE;cursor:hand;-webkit-box-sizing: content-box;-moz-box-sizing: content-box;box-sizing: content-box;}' +
	                    '.edui-editor-imagescale span{position:absolute;width:6px;height:6px;overflow:hidden;font-size:0px;display:block;background-color:#3C9DD0;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand0{cursor:nw-resize;top:0;margin-top:-4px;left:0;margin-left:-4px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand1{cursor:n-resize;top:0;margin-top:-4px;left:50%;margin-left:-4px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand2{cursor:ne-resize;top:0;margin-top:-4px;left:100%;margin-left:-3px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand3{cursor:w-resize;top:50%;margin-top:-4px;left:0;margin-left:-4px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand4{cursor:e-resize;top:50%;margin-top:-4px;left:100%;margin-left:-3px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand5{cursor:sw-resize;top:100%;margin-top:-3px;left:0;margin-left:-4px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand6{cursor:s-resize;top:100%;margin-top:-3px;left:50%;margin-left:-4px;}'
	                    + '.edui-editor-imagescale .edui-editor-imagescale-hand7{cursor:se-resize;top:100%;margin-top:-3px;left:100%;margin-left:-3px;}');
	            },
	            initEvents: function () {
	                var me = this;

	                me.startPos.x = me.startPos.y = 0;
	                me.isDraging = false;
	            },
	            _eventHandler: function (e) {
	                var me = this;
	                switch (e.type) {
	                    case 'mousedown':
	                        var hand = e.target || e.srcElement, hand;
	                        if (hand.className.indexOf('edui-editor-imagescale-hand') != -1 && me.dragId == -1) {
	                            me.dragId = hand.className.slice(-1);
	                            me.startPos.x = me.prePos.x = e.clientX;
	                            me.startPos.y = me.prePos.y = e.clientY;
	                            domUtils.on(me.doc,'mousemove', me.proxy(me._eventHandler, me));
	                        }
	                        break;
	                    case 'mousemove':
	                        if (me.dragId != -1) {
	                            me.updateContainerStyle(me.dragId, {x: e.clientX - me.prePos.x, y: e.clientY - me.prePos.y});
	                            me.prePos.x = e.clientX;
	                            me.prePos.y = e.clientY;
	                            elementUpdated = true;
	                            me.updateTargetElement();

	                        }
	                        break;
	                    case 'mouseup':
	                        if (me.dragId != -1) {
	                            me.updateContainerStyle(me.dragId, {x: e.clientX - me.prePos.x, y: e.clientY - me.prePos.y});
	                            me.updateTargetElement();
	                            if (me.target.parentNode) me.attachTo(me.target);
	                            me.dragId = -1;
	                        }
	                        domUtils.un(me.doc,'mousemove', me.proxy(me._eventHandler, me));
	                        //修复只是点击挪动点，但没有改变大小，不应该触发contentchange
	                        if(elementUpdated){
	                            elementUpdated = false;
	                            me.editor.fireEvent('contentchange');
	                        }

	                        break;
	                    default:
	                        break;
	                }
	            },
	            updateTargetElement: function () {
	                var me = this;
	                domUtils.setStyles(me.target, {
	                    'width': me.resizer.style.width,
	                    'height': me.resizer.style.height
	                });
	                me.target.width = parseInt(me.resizer.style.width);
	                me.target.height = parseInt(me.resizer.style.height);
	                me.attachTo(me.target);
	            },
	            updateContainerStyle: function (dir, offset) {
	                var me = this,
	                    dom = me.resizer, tmp;

	                if (rect[dir][0] != 0) {
	                    tmp = parseInt(dom.style.left) + offset.x;
	                    dom.style.left = me._validScaledProp('left', tmp) + 'px';
	                }
	                if (rect[dir][1] != 0) {
	                    tmp = parseInt(dom.style.top) + offset.y;
	                    dom.style.top = me._validScaledProp('top', tmp) + 'px';
	                }
	                if (rect[dir][2] != 0) {
	                    tmp = dom.clientWidth + rect[dir][2] * offset.x;
	                    dom.style.width = me._validScaledProp('width', tmp) + 'px';
	                }
	                if (rect[dir][3] != 0) {
	                    tmp = dom.clientHeight + rect[dir][3] * offset.y;
	                    dom.style.height = me._validScaledProp('height', tmp) + 'px';
	                }
	            },
	            _validScaledProp: function (prop, value) {
	                var ele = this.resizer,
	                    wrap = document;

	                value = isNaN(value) ? 0 : value;
	                switch (prop) {
	                    case 'left':
	                        return value < 0 ? 0 : (value + ele.clientWidth) > wrap.clientWidth ? wrap.clientWidth - ele.clientWidth : value;
	                    case 'top':
	                        return value < 0 ? 0 : (value + ele.clientHeight) > wrap.clientHeight ? wrap.clientHeight - ele.clientHeight : value;
	                    case 'width':
	                        return value <= 0 ? 1 : (value + ele.offsetLeft) > wrap.clientWidth ? wrap.clientWidth - ele.offsetLeft : value;
	                    case 'height':
	                        return value <= 0 ? 1 : (value + ele.offsetTop) > wrap.clientHeight ? wrap.clientHeight - ele.offsetTop : value;
	                }
	            },
	            hideCover: function () {
	                this.cover.style.display = 'none';
	            },
	            showCover: function () {
	                var me = this,
	                    editorPos = domUtils.getXY(me.editor.ui.getDom()),
	                    iframePos = domUtils.getXY(me.editor.iframe);

	                domUtils.setStyles(me.cover, {
	                    'width': me.editor.iframe.offsetWidth + 'px',
	                    'height': me.editor.iframe.offsetHeight + 'px',
	                    'top': iframePos.y - editorPos.y + 'px',
	                    'left': iframePos.x - editorPos.x + 'px',
	                    'position': 'absolute',
	                    'display': ''
	                })
	            },
	            show: function (targetObj) {
	                var me = this;
	                me.resizer.style.display = 'block';
	                if(targetObj) me.attachTo(targetObj);

	                domUtils.on(this.resizer, 'mousedown', me.proxy(me._eventHandler, me));
	                domUtils.on(me.doc, 'mouseup', me.proxy(me._eventHandler, me));

	                me.showCover();
	                me.editor.fireEvent('afterscaleshow', me);
	                me.editor.fireEvent('saveScene');
	            },
	            hide: function () {
	                var me = this;
	                me.hideCover();
	                me.resizer.style.display = 'none';

	                domUtils.un(me.resizer, 'mousedown', me.proxy(me._eventHandler, me));
	                domUtils.un(me.doc, 'mouseup', me.proxy(me._eventHandler, me));
	                me.editor.fireEvent('afterscalehide', me);
	            },
	            proxy: function( fn, context ) {
	                return function(e) {
	                    return fn.apply( context || this, arguments);
	                };
	            },
	            attachTo: function (targetObj) {
	                var me = this,
	                    target = me.target = targetObj,
	                    resizer = this.resizer,
	                    imgPos = domUtils.getXY(target),
	                    iframePos = domUtils.getXY(me.editor.iframe),
	                    editorPos = domUtils.getXY(resizer.parentNode);

	                domUtils.setStyles(resizer, {
	                    'width': target.width + 'px',
	                    'height': target.height + 'px',
	                    'left': iframePos.x + imgPos.x - me.editor.document.body.scrollLeft - editorPos.x - parseInt(resizer.style.borderLeftWidth) + 'px',
	                    'top': iframePos.y + imgPos.y - me.editor.document.body.scrollTop - editorPos.y - parseInt(resizer.style.borderTopWidth) + 'px'
	                });
	            }
	        }
	    })();

	    return function () {
	        var me = this,
	            imageScale;

	        me.setOpt('imageScaleEnabled', true);

	        if ( !browser.ie && me.options.imageScaleEnabled) {
	            me.addListener('click', function (type, e) {

	                var range = me.selection.getRange(),
	                    img = range.getClosedNode();

	                if (img && img.tagName == 'IMG' && me.body.contentEditable!="false") {

	                    if (img.className.indexOf("edui-faked-music") != -1 ||
	                        img.getAttribute("anchorname") ||
	                        domUtils.hasClass(img, 'loadingclass') ||
	                        domUtils.hasClass(img, 'loaderrorclass')) { return }

	                    if (!imageScale) {
	                        imageScale = new Scale();
	                        imageScale.init(me);
	                        me.ui.getDom().appendChild(imageScale.resizer);

	                        var _keyDownHandler = function (e) {
	                            imageScale.hide();
	                            if(imageScale.target) me.selection.getRange().selectNode(imageScale.target).select();
	                        }, _mouseDownHandler = function (e) {
	                            var ele = e.target || e.srcElement;
	                            if (ele && (ele.className===undefined || ele.className.indexOf('edui-editor-imagescale') == -1)) {
	                                _keyDownHandler(e);
	                            }
	                        }, timer;

	                        me.addListener('afterscaleshow', function (e) {
	                            me.addListener('beforekeydown', _keyDownHandler);
	                            me.addListener('beforemousedown', _mouseDownHandler);
	                            domUtils.on(document, 'keydown', _keyDownHandler);
	                            domUtils.on(document,'mousedown', _mouseDownHandler);
	                            me.selection.getNative().removeAllRanges();
	                        });
	                        me.addListener('afterscalehide', function (e) {
	                            me.removeListener('beforekeydown', _keyDownHandler);
	                            me.removeListener('beforemousedown', _mouseDownHandler);
	                            domUtils.un(document, 'keydown', _keyDownHandler);
	                            domUtils.un(document,'mousedown', _mouseDownHandler);
	                            var target = imageScale.target;
	                            if (target.parentNode) {
	                                me.selection.getRange().selectNode(target).select();
	                            }
	                        });
	                        //TODO 有iframe的情况，mousedown不能往下传。。
	                        domUtils.on(imageScale.resizer, 'mousedown', function (e) {
	                            me.selection.getNative().removeAllRanges();
	                            var ele = e.target || e.srcElement;
	                            if (ele && ele.className.indexOf('edui-editor-imagescale-hand') == -1) {
	                                timer = setTimeout(function () {
	                                    imageScale.hide();
	                                    if(imageScale.target) me.selection.getRange().selectNode(ele).select();
	                                }, 200);
	                            }
	                        });
	                        domUtils.on(imageScale.resizer, 'mouseup', function (e) {
	                            var ele = e.target || e.srcElement;
	                            if (ele && ele.className.indexOf('edui-editor-imagescale-hand') == -1) {
	                                clearTimeout(timer);
	                            }
	                        });
	                    }
	                    imageScale.show(img);
	                } else {
	                    if (imageScale && imageScale.resizer.style.display != 'none') imageScale.hide();
	                }
	            });
	        }

	        if (browser.webkit) {
	            me.addListener('click', function (type, e) {
	                if (e.target.tagName == 'IMG' && me.body.contentEditable!="false") {
	                    var range = new dom.Range(me.document);
	                    range.selectNode(e.target).select();
	                }
	            });
	        }
	    }
	})();

	// plugins/autolink.js
	///import core
	///commands 为非ie浏览器自动添加a标签
	///commandsName  AutoLink
	///commandsTitle  自动增加链接
	/**
	 * @description 为非ie浏览器自动添加a标签
	 * @author zhanyi
	 */

	UE.plugin.register('autolink',function(){
	    var cont = 0;

	    return !browser.ie ? {

	            bindEvents:{
	                'reset' : function(){
	                    cont = 0;
	                },
	                'keydown':function(type, evt) {
	                    var me = this;
	                    var keyCode = evt.keyCode || evt.which;

	                    if (keyCode == 32 || keyCode == 13) {

	                        var sel = me.selection.getNative(),
	                            range = sel.getRangeAt(0).cloneRange(),
	                            offset,
	                            charCode;

	                        var start = range.startContainer;
	                        while (start.nodeType == 1 && range.startOffset > 0) {
	                            start = range.startContainer.childNodes[range.startOffset - 1];
	                            if (!start){
	                                break;
	                            }
	                            range.setStart(start, start.nodeType == 1 ? start.childNodes.length : start.nodeValue.length);
	                            range.collapse(true);
	                            start = range.startContainer;
	                        }

	                        do{
	                            if (range.startOffset == 0) {
	                                start = range.startContainer.previousSibling;

	                                while (start && start.nodeType == 1) {
	                                    start = start.lastChild;
	                                }
	                                if (!start || domUtils.isFillChar(start)){
	                                    break;
	                                }
	                                offset = start.nodeValue.length;
	                            } else {
	                                start = range.startContainer;
	                                offset = range.startOffset;
	                            }
	                            range.setStart(start, offset - 1);
	                            charCode = range.toString().charCodeAt(0);
	                        } while (charCode != 160 && charCode != 32);

	                        if (range.toString().replace(new RegExp(domUtils.fillChar, 'g'), '').match(/(?:https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.)/i)) {
	                            while(range.toString().length){
	                                if(/^(?:https?:\/\/|ssh:\/\/|ftp:\/\/|file:\/|www\.)/i.test(range.toString())){
	                                    break;
	                                }
	                                try{
	                                    range.setStart(range.startContainer,range.startOffset+1);
	                                }catch(e){
	                                    //trace:2121
	                                    var start = range.startContainer;
	                                    while(!(next = start.nextSibling)){
	                                        if(domUtils.isBody(start)){
	                                            return;
	                                        }
	                                        start = start.parentNode;

	                                    }
	                                    range.setStart(next,0);

	                                }

	                            }
	                            //range的开始边界已经在a标签里的不再处理
	                            if(domUtils.findParentByTagName(range.startContainer,'a',true)){
	                                return;
	                            }
	                            var a = me.document.createElement('a'),text = me.document.createTextNode(' '),href;

	                            me.undoManger && me.undoManger.save();
	                            a.appendChild(range.extractContents());
	                            a.href = a.innerHTML = a.innerHTML.replace(/<[^>]+>/g,'');
	                            href = a.getAttribute("href").replace(new RegExp(domUtils.fillChar,'g'),'');
	                            href = /^(?:https?:\/\/)/ig.test(href) ? href : "http://"+ href;
	                            a.setAttribute('_src',utils.html(href));
	                            a.href = utils.html(href);

	                            range.insertNode(a);
	                            a.parentNode.insertBefore(text, a.nextSibling);
	                            range.setStart(text, 0);
	                            range.collapse(true);
	                            sel.removeAllRanges();
	                            sel.addRange(range);
	                            me.undoManger && me.undoManger.save();
	                        }
	                    }
	                }
	            }
	        }:{}
	    },function(){
	        var keyCodes = {
	            37:1, 38:1, 39:1, 40:1,
	            13:1,32:1
	        };
	        function checkIsCludeLink(node){
	            if(node.nodeType == 3){
	                return null
	            }
	            if(node.nodeName == 'A'){
	                return node;
	            }
	            var lastChild = node.lastChild;

	            while(lastChild){
	                if(lastChild.nodeName == 'A'){
	                    return lastChild;
	                }
	                if(lastChild.nodeType == 3){
	                    if(domUtils.isWhitespace(lastChild)){
	                        lastChild = lastChild.previousSibling;
	                        continue;
	                    }
	                    return null
	                }
	                lastChild = lastChild.lastChild;
	            }
	        }
	        browser.ie && this.addListener('keyup',function(cmd,evt){
	            var me = this,keyCode = evt.keyCode;
	            if(keyCodes[keyCode]){
	                var rng = me.selection.getRange();
	                var start = rng.startContainer;

	                if(keyCode == 13){
	                    while(start && !domUtils.isBody(start) && !domUtils.isBlockElm(start)){
	                        start = start.parentNode;
	                    }
	                    if(start && !domUtils.isBody(start) && start.nodeName == 'P'){
	                        var pre = start.previousSibling;
	                        if(pre && pre.nodeType == 1){
	                            var pre = checkIsCludeLink(pre);
	                            if(pre && !pre.getAttribute('_href')){
	                                domUtils.remove(pre,true);
	                            }
	                        }
	                    }
	                }else if(keyCode == 32 ){
	                    if(start.nodeType == 3 && /^\s$/.test(start.nodeValue)){
	                        start = start.previousSibling;
	                        if(start && start.nodeName == 'A' && !start.getAttribute('_href')){
	                            domUtils.remove(start,true);
	                        }
	                    }
	                }else {
	                    start = domUtils.findParentByTagName(start,'a',true);
	                    if(start && !start.getAttribute('_href')){
	                        var bk = rng.createBookmark();

	                        domUtils.remove(start,true);
	                        rng.moveToBookmark(bk).select(true)
	                    }
	                }

	            }


	        });
	    }
	);

	// plugins/autoheight.js
	///import core
	///commands 当输入内容超过编辑器高度时，编辑器自动增高
	///commandsName  AutoHeight,autoHeightEnabled
	///commandsTitle  自动增高
	/**
	 * @description 自动伸展
	 * @author zhanyi
	 */
	UE.plugins['autoheight'] = function () {
	    var me = this;
	    //提供开关，就算加载也可以关闭
	    me.autoHeightEnabled = me.options.autoHeightEnabled !== false;
	    if (!me.autoHeightEnabled) {
	        return;
	    }

	    var bakOverflow,
	        lastHeight = 0,
	        options = me.options,
	        currentHeight,
	        timer;

	    function adjustHeight() {
	        var me = this;
	        clearTimeout(timer);
	        if(isFullscreen)return;
	        if (!me.queryCommandState || me.queryCommandState && me.queryCommandState('source') != 1) {
	            timer = setTimeout(function(){

	                var node = me.body.lastChild;
	                while(node && node.nodeType != 1){
	                    node = node.previousSibling;
	                }
	                if(node && node.nodeType == 1){
	                    node.style.clear = 'both';
	                    currentHeight = Math.max(domUtils.getXY(node).y + node.offsetHeight + 25 ,Math.max(options.minFrameHeight, options.initialFrameHeight)) ;
	                    if (currentHeight != lastHeight) {
	                        if (currentHeight !== parseInt(me.iframe.parentNode.style.height)) {
	                            me.iframe.parentNode.style.height = currentHeight + 'px';
	                        }
	                        me.body.style.height = currentHeight + 'px';
	                        lastHeight = currentHeight;
	                    }
	                    domUtils.removeStyle(node,'clear');
	                }


	            },50)
	        }
	    }
	    var isFullscreen;
	    me.addListener('fullscreenchanged',function(cmd,f){
	        isFullscreen = f
	    });
	    me.addListener('destroy', function () {
	        me.removeListener('contentchange afterinserthtml keyup mouseup',adjustHeight)
	    });
	    me.enableAutoHeight = function () {
	        var me = this;
	        if (!me.autoHeightEnabled) {
	            return;
	        }
	        var doc = me.document;
	        me.autoHeightEnabled = true;
	        bakOverflow = doc.body.style.overflowY;
	        doc.body.style.overflowY = 'hidden';
	        me.addListener('contentchange afterinserthtml keyup mouseup',adjustHeight);
	        //ff不给事件算得不对

	        setTimeout(function () {
	            adjustHeight.call(me);
	        }, browser.gecko ? 100 : 0);
	        me.fireEvent('autoheightchanged', me.autoHeightEnabled);
	    };
	    me.disableAutoHeight = function () {

	        me.body.style.overflowY = bakOverflow || '';

	        me.removeListener('contentchange', adjustHeight);
	        me.removeListener('keyup', adjustHeight);
	        me.removeListener('mouseup', adjustHeight);
	        me.autoHeightEnabled = false;
	        me.fireEvent('autoheightchanged', me.autoHeightEnabled);
	    };

	    me.on('setHeight',function(){
	        me.disableAutoHeight()
	    });
	    me.addListener('ready', function () {
	        me.enableAutoHeight();
	        //trace:1764
	        var timer;
	        domUtils.on(browser.ie ? me.body : me.document, browser.webkit ? 'dragover' : 'drop', function () {
	            clearTimeout(timer);
	            timer = setTimeout(function () {
	                //trace:3681
	                adjustHeight.call(me);
	            }, 100);

	        });
	        //修复内容过多时，回到顶部，顶部内容被工具栏遮挡问题
	        var lastScrollY;
	        window.onscroll = function(){
	            if(lastScrollY === null){
	                lastScrollY = this.scrollY
	            }else if(this.scrollY == 0 && lastScrollY != 0){
	                me.window.scrollTo(0,0);
	                lastScrollY = null;
	            }
	        }
	    });


	};



	// plugins/autofloat.js
	///import core
	///commands 悬浮工具栏
	///commandsName  AutoFloat,autoFloatEnabled
	///commandsTitle  悬浮工具栏
	/**
	 *  modified by chengchao01
	 *  注意： 引入此功能后，在IE6下会将body的背景图片覆盖掉！
	 */
	UE.plugins['autofloat'] = function() {
	    var me = this,
	        lang = me.getLang();
	    me.setOpt({
	        topOffset:0
	    });
	    var optsAutoFloatEnabled = me.options.autoFloatEnabled !== false,
	        topOffset = me.options.topOffset;


	    //如果不固定toolbar的位置，则直接退出
	    if(!optsAutoFloatEnabled){
	        return;
	    }
	    var uiUtils = UE.ui.uiUtils,
	        LteIE6 = browser.ie && browser.version <= 6,
	        quirks = browser.quirks;

	    function checkHasUI(){
	        if(!UE.ui){
	            alert(lang.autofloatMsg);
	            return 0;
	        }
	        return 1;
	    }
	    function fixIE6FixedPos(){
	        var docStyle = document.body.style;
	        docStyle.backgroundImage = 'url("about:blank")';
	        docStyle.backgroundAttachment = 'fixed';
	    }
	    var	bakCssText,
	        placeHolder = document.createElement('div'),
	        toolbarBox,orgTop,
	        getPosition,
	        flag =true;   //ie7模式下需要偏移
	    function setFloating(){
	        var toobarBoxPos = domUtils.getXY(toolbarBox),
	            origalFloat = domUtils.getComputedStyle(toolbarBox,'position'),
	            origalLeft = domUtils.getComputedStyle(toolbarBox,'left');
	        toolbarBox.style.width = toolbarBox.offsetWidth + 'px';
	        toolbarBox.style.zIndex = me.options.zIndex * 1 + 1;
	        toolbarBox.parentNode.insertBefore(placeHolder, toolbarBox);
	        if (LteIE6 || (quirks && browser.ie)) {
	            if(toolbarBox.style.position != 'absolute'){
	                toolbarBox.style.position = 'absolute';
	            }
	            toolbarBox.style.top = (document.body.scrollTop||document.documentElement.scrollTop) - orgTop + topOffset  + 'px';
	        } else {
	            if (browser.ie7Compat && flag) {
	                flag = false;
	                toolbarBox.style.left =  domUtils.getXY(toolbarBox).x - document.documentElement.getBoundingClientRect().left+2  + 'px';
	            }
	            if(toolbarBox.style.position != 'fixed'){
	                toolbarBox.style.position = 'fixed';
	                toolbarBox.style.top = topOffset +"px";
	                ((origalFloat == 'absolute' || origalFloat == 'relative') && parseFloat(origalLeft)) && (toolbarBox.style.left = toobarBoxPos.x + 'px');
	            }
	        }
	    }
	    function unsetFloating(){
	        flag = true;
	        if(placeHolder.parentNode){
	            placeHolder.parentNode.removeChild(placeHolder);
	        }

	        toolbarBox.style.cssText = bakCssText;
	    }

	    function updateFloating(){
	        var rect3 = getPosition(me.container);
	        var offset=me.options.toolbarTopOffset||0;
	        if (rect3.top < 0 && rect3.bottom - toolbarBox.offsetHeight > offset) {
	            setFloating();
	        }else{
	            unsetFloating();
	        }
	    }
	    var defer_updateFloating = utils.defer(function(){
	        updateFloating();
	    },browser.ie ? 200 : 100,true);

	    me.addListener('destroy',function(){
	        domUtils.un(window, ['scroll','resize'], updateFloating);
	        me.removeListener('keydown', defer_updateFloating);
	    });

	    me.addListener('ready', function(){
	        if(checkHasUI(me)){
	            //加载了ui组件，但在new时，没有加载ui，导致编辑器实例上没有ui类，所以这里做判断
	            if(!me.ui){
	                return;
	            }
	            getPosition = uiUtils.getClientRect;
	            toolbarBox = me.ui.getDom('toolbarbox');
	            orgTop = getPosition(toolbarBox).top;
	            bakCssText = toolbarBox.style.cssText;
	            placeHolder.style.height = toolbarBox.offsetHeight + 'px';
	            if(LteIE6){
	                fixIE6FixedPos();
	            }
	            domUtils.on(window, ['scroll','resize'], updateFloating);
	            me.addListener('keydown', defer_updateFloating);

	            me.addListener('beforefullscreenchange', function (t, enabled){
	                if (enabled) {
	                    unsetFloating();
	                }
	            });
	            me.addListener('fullscreenchanged', function (t, enabled){
	                if (!enabled) {
	                    updateFloating();
	                }
	            });
	            me.addListener('sourcemodechanged', function (t, enabled){
	                setTimeout(function (){
	                    updateFloating();
	                },0);
	            });
	            me.addListener("clearDoc",function(){
	                setTimeout(function(){
	                    updateFloating();
	                },0);

	            })
	        }
	    });
	};


	// plugins/video.js
	/**
	 * video插件， 为UEditor提供视频插入支持
	 * @file
	 * @since 1.2.6.1
	 */

	UE.plugins['video'] = function (){
	    var me =this;

	    /**
	     * 创建插入视频字符窜
	     * @param url 视频地址
	     * @param width 视频宽度
	     * @param height 视频高度
	     * @param align 视频对齐
	     * @param toEmbed 是否以flash代替显示
	     * @param addParagraph  是否需要添加P 标签
	     */
	    function creatInsertStr(url,width,height,id,align,classname,type){

	        url = utils.unhtmlForUrl(url);
	        align = utils.unhtml(align);
	        classname = utils.unhtml(classname);

	        width = parseInt(width, 10) || 0;
	        height = parseInt(height, 10) || 0;

	        var str;
	        switch (type){
	            case 'image':
	                str = '<img ' + (id ? 'id="' + id+'"' : '') + ' width="'+ width +'" height="' + height + '" _url="'+url+'" class="' + classname.replace(/\bvideo-js\b/, '') + '"'  +
	                    ' src="' + me.options.UEDITOR_HOME_URL+'themes/default/images/spacer.gif" style="background:url('+me.options.UEDITOR_HOME_URL+'themes/default/images/videologo.gif) no-repeat center center; border:1px solid gray;'+(align ? 'float:' + align + ';': '')+'" />'
	                break;
	            case 'embed':
	                str = '<embed type="application/x-shockwave-flash" class="' + classname + '" pluginspage="http://www.macromedia.com/go/getflashplayer"' +
	                    ' src="' +  utils.html(url) + '" width="' + width  + '" height="' + height  + '"'  + (align ? ' style="float:' + align + '"': '') +
	                    ' wmode="transparent" play="true" loop="false" menu="false" allowscriptaccess="never" allowfullscreen="true" >';
	                break;
	            case 'video':
	                var ext = url.substr(url.lastIndexOf('.') + 1);
	                if(ext == 'ogv') ext = 'ogg';
	                str = '<video' + (id ? ' id="' + id + '"' : '') + ' class="' + classname + ' video-js" ' + (align ? ' style="float:' + align + '"': '') +
	                    ' controls preload="none" width="' + width + '" height="' + height + '" src="' + url + '" data-setup="{}">' +
	                    '<source src="' + url + '" type="video/' + ext + '" /></video>';
	                break;
	        }
	        return str;
	    }

	    function switchImgAndVideo(root,img2video){
	        utils.each(root.getNodesByTagName(img2video ? 'img' : 'embed video'),function(node){
	            var className = node.getAttr('class');
	            if(className && className.indexOf('edui-faked-video') != -1){
	                var html = creatInsertStr( img2video ? node.getAttr('_url') : node.getAttr('src'),node.getAttr('width'),node.getAttr('height'),null,node.getStyle('float') || '',className,img2video ? 'embed':'image');
	                node.parentNode.replaceChild(UE.uNode.createElement(html),node);
	            }
	            if(className && className.indexOf('edui-upload-video') != -1){
	                var html = creatInsertStr( img2video ? node.getAttr('_url') : node.getAttr('src'),node.getAttr('width'),node.getAttr('height'),null,node.getStyle('float') || '',className,img2video ? 'video':'image');
	                node.parentNode.replaceChild(UE.uNode.createElement(html),node);
	            }
	        })
	    }

	    me.addOutputRule(function(root){
	        switchImgAndVideo(root,true)
	    });
	    me.addInputRule(function(root){
	        switchImgAndVideo(root)
	    });

	    /**
	     * 插入视频
	     * @command insertvideo
	     * @method execCommand
	     * @param { String } cmd 命令字符串
	     * @param { Object } videoAttr 键值对对象， 描述一个视频的所有属性
	     * @example
	     * ```javascript
	     *
	     * var videoAttr = {
	     *      //视频地址
	     *      url: 'http://www.youku.com/xxx',
	     *      //视频宽高值， 单位px
	     *      width: 200,
	     *      height: 100
	     * };
	     *
	     * //editor 是编辑器实例
	     * //向编辑器插入单个视频
	     * editor.execCommand( 'insertvideo', videoAttr );
	     * ```
	     */

	    /**
	     * 插入视频
	     * @command insertvideo
	     * @method execCommand
	     * @param { String } cmd 命令字符串
	     * @param { Array } videoArr 需要插入的视频的数组， 其中的每一个元素都是一个键值对对象， 描述了一个视频的所有属性
	     * @example
	     * ```javascript
	     *
	     * var videoAttr1 = {
	     *      //视频地址
	     *      url: 'http://www.youku.com/xxx',
	     *      //视频宽高值， 单位px
	     *      width: 200,
	     *      height: 100
	     * },
	     * videoAttr2 = {
	     *      //视频地址
	     *      url: 'http://www.youku.com/xxx',
	     *      //视频宽高值， 单位px
	     *      width: 200,
	     *      height: 100
	     * }
	     *
	     * //editor 是编辑器实例
	     * //该方法将会向编辑器内插入两个视频
	     * editor.execCommand( 'insertvideo', [ videoAttr1, videoAttr2 ] );
	     * ```
	     */

	    /**
	     * 查询当前光标所在处是否是一个视频
	     * @command insertvideo
	     * @method queryCommandState
	     * @param { String } cmd 需要查询的命令字符串
	     * @return { int } 如果当前光标所在处的元素是一个视频对象， 则返回1，否则返回0
	     * @example
	     * ```javascript
	     *
	     * //editor 是编辑器实例
	     * editor.queryCommandState( 'insertvideo' );
	     * ```
	     */
	    me.commands["insertvideo"] = {
	        execCommand: function (cmd, videoObjs, type){
	            videoObjs = utils.isArray(videoObjs)?videoObjs:[videoObjs];
	            var html = [],id = 'tmpVedio', cl;
	            for(var i=0,vi,len = videoObjs.length;i<len;i++){
	                vi = videoObjs[i];
	                cl = (type == 'upload' ? 'edui-upload-video video-js vjs-default-skin':'edui-faked-video');
	                html.push(creatInsertStr( vi.url, vi.width || 420,  vi.height || 280, id + i, null, cl, 'image'));
	            }
	            me.execCommand("inserthtml",html.join(""),true);
	            var rng = this.selection.getRange();
	            for(var i= 0,len=videoObjs.length;i<len;i++){
	                var img = this.document.getElementById('tmpVedio'+i);
	                domUtils.removeAttributes(img,'id');
	                rng.selectNode(img).select();
	                me.execCommand('imagefloat',videoObjs[i].align)
	            }
	        },
	        queryCommandState : function(){
	            var img = me.selection.getRange().getClosedNode(),
	                flag = img && (img.className == "edui-faked-video" || img.className.indexOf("edui-upload-video")!=-1);
	            return flag ? 1 : 0;
	        }
	    };
	};


	// plugins/table.core.js
	/**
	 * Created with JetBrains WebStorm.
	 * User: taoqili
	 * Date: 13-1-18
	 * Time: 上午11:09
	 * To change this template use File | Settings | File Templates.
	 */
	/**
	 * UE表格操作类
	 * @param table
	 * @constructor
	 */
	(function () {
	    var UETable = UE.UETable = function (table) {
	        this.table = table;
	        this.indexTable = [];
	        this.selectedTds = [];
	        this.cellsRange = {};
	        this.update(table);
	    };

	    //===以下为静态工具方法===
	    UETable.removeSelectedClass = function (cells) {
	        utils.each(cells, function (cell) {
	            domUtils.removeClasses(cell, "selectTdClass");
	        })
	    };
	    UETable.addSelectedClass = function (cells) {
	        utils.each(cells, function (cell) {
	            domUtils.addClass(cell, "selectTdClass");
	        })
	    };
	    UETable.isEmptyBlock = function (node) {
	        var reg = new RegExp(domUtils.fillChar, 'g');
	        if (node[browser.ie ? 'innerText' : 'textContent'].replace(/^\s*$/, '').replace(reg, '').length > 0) {
	            return 0;
	        }
	        for (var i in dtd.$isNotEmpty) if (dtd.$isNotEmpty.hasOwnProperty(i)) {
	            if (node.getElementsByTagName(i).length) {
	                return 0;
	            }
	        }
	        return 1;
	    };
	    UETable.getWidth = function (cell) {
	        if (!cell)return 0;
	        return parseInt(domUtils.getComputedStyle(cell, "width"), 10);
	    };

	    /**
	     * 获取单元格或者单元格组的“对齐”状态。 如果当前的检测对象是一个单元格组， 只有在满足所有单元格的 水平和竖直 对齐属性都相同的
	     * 条件时才会返回其状态值，否则将返回null； 如果当前只检测了一个单元格， 则直接返回当前单元格的对齐状态；
	     * @param table cell or table cells , 支持单个单元格dom对象 或者 单元格dom对象数组
	     * @return { align: 'left' || 'right' || 'center', valign: 'top' || 'middle' || 'bottom' } 或者 null
	     */
	    UETable.getTableCellAlignState = function ( cells ) {

	        !utils.isArray( cells ) && ( cells = [cells] );

	        var result = {},
	            status = ['align', 'valign'],
	            tempStatus = null,
	            isSame = true;//状态是否相同

	        utils.each( cells, function( cellNode ){

	            utils.each( status, function( currentState ){

	                tempStatus = cellNode.getAttribute( currentState );

	                if( !result[ currentState ] && tempStatus ) {
	                    result[ currentState ] = tempStatus;
	                } else if( !result[ currentState ] || ( tempStatus !== result[ currentState ] ) ) {
	                    isSame = false;
	                    return false;
	                }

	            } );

	            return isSame;

	        });

	        return isSame ? result : null;

	    };

	    /**
	     * 根据当前选区获取相关的table信息
	     * @return {Object}
	     */
	    UETable.getTableItemsByRange = function (editor) {
	        var start = editor.selection.getStart();

	        //ff下会选中bookmark
	        if( start && start.id && start.id.indexOf('_baidu_bookmark_start_') === 0 && start.nextSibling) {
	            start = start.nextSibling;
	        }

	        //在table或者td边缘有可能存在选中tr的情况
	        var cell = start && domUtils.findParentByTagName(start, ["td", "th"], true),
	            tr = cell && cell.parentNode,
	            caption = start && domUtils.findParentByTagName(start, 'caption', true),
	            table = caption ? caption.parentNode : tr && tr.parentNode.parentNode;

	        return {
	            cell:cell,
	            tr:tr,
	            table:table,
	            caption:caption
	        }
	    };
	    UETable.getUETableBySelected = function (editor) {
	        var table = UETable.getTableItemsByRange(editor).table;
	        if (table && table.ueTable && table.ueTable.selectedTds.length) {
	            return table.ueTable;
	        }
	        return null;
	    };

	    UETable.getDefaultValue = function (editor, table) {
	        var borderMap = {
	                thin:'0px',
	                medium:'1px',
	                thick:'2px'
	            },
	            tableBorder, tdPadding, tdBorder, tmpValue;
	        if (!table) {
	            table = editor.document.createElement('table');
	            table.insertRow(0).insertCell(0).innerHTML = 'xxx';
	            editor.body.appendChild(table);
	            var td = table.getElementsByTagName('td')[0];
	            tmpValue = domUtils.getComputedStyle(table, 'border-left-width');
	            tableBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
	            tmpValue = domUtils.getComputedStyle(td, 'padding-left');
	            tdPadding = parseInt(borderMap[tmpValue] || tmpValue, 10);
	            tmpValue = domUtils.getComputedStyle(td, 'border-left-width');
	            tdBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
	            domUtils.remove(table);
	            return {
	                tableBorder:tableBorder,
	                tdPadding:tdPadding,
	                tdBorder:tdBorder
	            };
	        } else {
	            td = table.getElementsByTagName('td')[0];
	            tmpValue = domUtils.getComputedStyle(table, 'border-left-width');
	            tableBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
	            tmpValue = domUtils.getComputedStyle(td, 'padding-left');
	            tdPadding = parseInt(borderMap[tmpValue] || tmpValue, 10);
	            tmpValue = domUtils.getComputedStyle(td, 'border-left-width');
	            tdBorder = parseInt(borderMap[tmpValue] || tmpValue, 10);
	            return {
	                tableBorder:tableBorder,
	                tdPadding:tdPadding,
	                tdBorder:tdBorder
	            };
	        }
	    };
	    /**
	     * 根据当前点击的td或者table获取索引对象
	     * @param tdOrTable
	     */
	    UETable.getUETable = function (tdOrTable) {
	        var tag = tdOrTable.tagName.toLowerCase();
	        tdOrTable = (tag == "td" || tag == "th" || tag == 'caption') ? domUtils.findParentByTagName(tdOrTable, "table", true) : tdOrTable;
	        if (!tdOrTable.ueTable) {
	            tdOrTable.ueTable = new UETable(tdOrTable);
	        }
	        return tdOrTable.ueTable;
	    };

	    UETable.cloneCell = function(cell,ignoreMerge,keepPro){
	        if (!cell || utils.isString(cell)) {
	            return this.table.ownerDocument.createElement(cell || 'td');
	        }
	        var flag = domUtils.hasClass(cell, "selectTdClass");
	        flag && domUtils.removeClasses(cell, "selectTdClass");
	        var tmpCell = cell.cloneNode(true);
	        if (ignoreMerge) {
	            tmpCell.rowSpan = tmpCell.colSpan = 1;
	        }
	        //去掉宽高
	        !keepPro && domUtils.removeAttributes(tmpCell,'width height');
	        !keepPro && domUtils.removeAttributes(tmpCell,'style');

	        tmpCell.style.borderLeftStyle = "";
	        tmpCell.style.borderTopStyle = "";
	        tmpCell.style.borderLeftColor = cell.style.borderRightColor;
	        tmpCell.style.borderLeftWidth = cell.style.borderRightWidth;
	        tmpCell.style.borderTopColor = cell.style.borderBottomColor;
	        tmpCell.style.borderTopWidth = cell.style.borderBottomWidth;
	        flag && domUtils.addClass(cell, "selectTdClass");
	        return tmpCell;
	    }

	    UETable.prototype = {
	        getMaxRows:function () {
	            var rows = this.table.rows, maxLen = 1;
	            for (var i = 0, row; row = rows[i]; i++) {
	                var currentMax = 1;
	                for (var j = 0, cj; cj = row.cells[j++];) {
	                    currentMax = Math.max(cj.rowSpan || 1, currentMax);
	                }
	                maxLen = Math.max(currentMax + i, maxLen);
	            }
	            return maxLen;
	        },
	        /**
	         * 获取当前表格的最大列数
	         */
	        getMaxCols:function () {
	            var rows = this.table.rows, maxLen = 0, cellRows = {};
	            for (var i = 0, row; row = rows[i]; i++) {
	                var cellsNum = 0;
	                for (var j = 0, cj; cj = row.cells[j++];) {
	                    cellsNum += (cj.colSpan || 1);
	                    if (cj.rowSpan && cj.rowSpan > 1) {
	                        for (var k = 1; k < cj.rowSpan; k++) {
	                            if (!cellRows['row_' + (i + k)]) {
	                                cellRows['row_' + (i + k)] = (cj.colSpan || 1);
	                            } else {
	                                cellRows['row_' + (i + k)]++
	                            }
	                        }

	                    }
	                }
	                cellsNum += cellRows['row_' + i] || 0;
	                maxLen = Math.max(cellsNum, maxLen);
	            }
	            return maxLen;
	        },
	        getCellColIndex:function (cell) {

	        },
	        /**
	         * 获取当前cell旁边的单元格，
	         * @param cell
	         * @param right
	         */
	        getHSideCell:function (cell, right) {
	            try {
	                var cellInfo = this.getCellInfo(cell),
	                    previewRowIndex, previewColIndex;
	                var len = this.selectedTds.length,
	                    range = this.cellsRange;
	                //首行或者首列没有前置单元格
	                if ((!right && (!len ? !cellInfo.colIndex : !range.beginColIndex)) || (right && (!len ? (cellInfo.colIndex == (this.colsNum - 1)) : (range.endColIndex == this.colsNum - 1)))) return null;

	                previewRowIndex = !len ? cellInfo.rowIndex : range.beginRowIndex;
	                previewColIndex = !right ? ( !len ? (cellInfo.colIndex < 1 ? 0 : (cellInfo.colIndex - 1)) : range.beginColIndex - 1)
	                    : ( !len ? cellInfo.colIndex + 1 : range.endColIndex + 1);
	                return this.getCell(this.indexTable[previewRowIndex][previewColIndex].rowIndex, this.indexTable[previewRowIndex][previewColIndex].cellIndex);
	            } catch (e) {
	                showError(e);
	            }
	        },
	        getTabNextCell:function (cell, preRowIndex) {
	            var cellInfo = this.getCellInfo(cell),
	                rowIndex = preRowIndex || cellInfo.rowIndex,
	                colIndex = cellInfo.colIndex + 1 + (cellInfo.colSpan - 1),
	                nextCell;
	            try {
	                nextCell = this.getCell(this.indexTable[rowIndex][colIndex].rowIndex, this.indexTable[rowIndex][colIndex].cellIndex);
	            } catch (e) {
	                try {
	                    rowIndex = rowIndex * 1 + 1;
	                    colIndex = 0;
	                    nextCell = this.getCell(this.indexTable[rowIndex][colIndex].rowIndex, this.indexTable[rowIndex][colIndex].cellIndex);
	                } catch (e) {
	                }
	            }
	            return nextCell;

	        },
	        /**
	         * 获取视觉上的后置单元格
	         * @param cell
	         * @param bottom
	         */
	        getVSideCell:function (cell, bottom, ignoreRange) {
	            try {
	                var cellInfo = this.getCellInfo(cell),
	                    nextRowIndex, nextColIndex;
	                var len = this.selectedTds.length && !ignoreRange,
	                    range = this.cellsRange;
	                //末行或者末列没有后置单元格
	                if ((!bottom && (cellInfo.rowIndex == 0)) || (bottom && (!len ? (cellInfo.rowIndex + cellInfo.rowSpan > this.rowsNum - 1) : (range.endRowIndex == this.rowsNum - 1)))) return null;

	                nextRowIndex = !bottom ? ( !len ? cellInfo.rowIndex - 1 : range.beginRowIndex - 1)
	                    : ( !len ? (cellInfo.rowIndex + cellInfo.rowSpan) : range.endRowIndex + 1);
	                nextColIndex = !len ? cellInfo.colIndex : range.beginColIndex;
	                return this.getCell(this.indexTable[nextRowIndex][nextColIndex].rowIndex, this.indexTable[nextRowIndex][nextColIndex].cellIndex);
	            } catch (e) {
	                showError(e);
	            }
	        },
	        /**
	         * 获取相同结束位置的单元格，xOrY指代了是获取x轴相同还是y轴相同
	         */
	        getSameEndPosCells:function (cell, xOrY) {
	            try {
	                var flag = (xOrY.toLowerCase() === "x"),
	                    end = domUtils.getXY(cell)[flag ? 'x' : 'y'] + cell["offset" + (flag ? 'Width' : 'Height')],
	                    rows = this.table.rows,
	                    cells = null, returns = [];
	                for (var i = 0; i < this.rowsNum; i++) {
	                    cells = rows[i].cells;
	                    for (var j = 0, tmpCell; tmpCell = cells[j++];) {
	                        var tmpEnd = domUtils.getXY(tmpCell)[flag ? 'x' : 'y'] + tmpCell["offset" + (flag ? 'Width' : 'Height')];
	                        //对应行的td已经被上面行rowSpan了
	                        if (tmpEnd > end && flag) break;
	                        if (cell == tmpCell || end == tmpEnd) {
	                            //只获取单一的单元格
	                            //todo 仅获取单一单元格在特定情况下会造成returns为空，从而影响后续的拖拽实现，修正这个。需考虑性能
	                            if (tmpCell[flag ? "colSpan" : "rowSpan"] == 1) {
	                                returns.push(tmpCell);
	                            }
	                            if (flag) break;
	                        }
	                    }
	                }
	                return returns;
	            } catch (e) {
	                showError(e);
	            }
	        },
	        setCellContent:function (cell, content) {
	            cell.innerHTML = content || (browser.ie ? domUtils.fillChar : "<br />");
	        },
	        cloneCell:UETable.cloneCell,
	        /**
	         * 获取跟当前单元格的右边竖线为左边的所有未合并单元格
	         */
	        getSameStartPosXCells:function (cell) {
	            try {
	                var start = domUtils.getXY(cell).x + cell.offsetWidth,
	                    rows = this.table.rows, cells , returns = [];
	                for (var i = 0; i < this.rowsNum; i++) {
	                    cells = rows[i].cells;
	                    for (var j = 0, tmpCell; tmpCell = cells[j++];) {
	                        var tmpStart = domUtils.getXY(tmpCell).x;
	                        if (tmpStart > start) break;
	                        if (tmpStart == start && tmpCell.colSpan == 1) {
	                            returns.push(tmpCell);
	                            break;
	                        }
	                    }
	                }
	                return returns;
	            } catch (e) {
	                showError(e);
	            }
	        },
	        /**
	         * 更新table对应的索引表
	         */
	        update:function (table) {
	            this.table = table || this.table;
	            this.selectedTds = [];
	            this.cellsRange = {};
	            this.indexTable = [];
	            var rows = this.table.rows,
	                rowsNum = this.getMaxRows(),
	                dNum = rowsNum - rows.length,
	                colsNum = this.getMaxCols();
	            while (dNum--) {
	                this.table.insertRow(rows.length);
	            }
	            this.rowsNum = rowsNum;
	            this.colsNum = colsNum;
	            for (var i = 0, len = rows.length; i < len; i++) {
	                this.indexTable[i] = new Array(colsNum);
	            }
	            //填充索引表
	            for (var rowIndex = 0, row; row = rows[rowIndex]; rowIndex++) {
	                for (var cellIndex = 0, cell, cells = row.cells; cell = cells[cellIndex]; cellIndex++) {
	                    //修正整行被rowSpan时导致的行数计算错误
	                    if (cell.rowSpan > rowsNum) {
	                        cell.rowSpan = rowsNum;
	                    }
	                    var colIndex = cellIndex,
	                        rowSpan = cell.rowSpan || 1,
	                        colSpan = cell.colSpan || 1;
	                    //当已经被上一行rowSpan或者被前一列colSpan了，则跳到下一个单元格进行
	                    while (this.indexTable[rowIndex][colIndex]) colIndex++;
	                    for (var j = 0; j < rowSpan; j++) {
	                        for (var k = 0; k < colSpan; k++) {
	                            this.indexTable[rowIndex + j][colIndex + k] = {
	                                rowIndex:rowIndex,
	                                cellIndex:cellIndex,
	                                colIndex:colIndex,
	                                rowSpan:rowSpan,
	                                colSpan:colSpan
	                            }
	                        }
	                    }
	                }
	            }
	            //修复残缺td
	            for (j = 0; j < rowsNum; j++) {
	                for (k = 0; k < colsNum; k++) {
	                    if (this.indexTable[j][k] === undefined) {
	                        row = rows[j];
	                        cell = row.cells[row.cells.length - 1];
	                        cell = cell ? cell.cloneNode(true) : this.table.ownerDocument.createElement("td");
	                        this.setCellContent(cell);
	                        if (cell.colSpan !== 1)cell.colSpan = 1;
	                        if (cell.rowSpan !== 1)cell.rowSpan = 1;
	                        row.appendChild(cell);
	                        this.indexTable[j][k] = {
	                            rowIndex:j,
	                            cellIndex:cell.cellIndex,
	                            colIndex:k,
	                            rowSpan:1,
	                            colSpan:1
	                        }
	                    }
	                }
	            }
	            //当框选后删除行或者列后撤销，需要重建选区。
	            var tds = domUtils.getElementsByTagName(this.table, "td"),
	                selectTds = [];
	            utils.each(tds, function (td) {
	                if (domUtils.hasClass(td, "selectTdClass")) {
	                    selectTds.push(td);
	                }
	            });
	            if (selectTds.length) {
	                var start = selectTds[0],
	                    end = selectTds[selectTds.length - 1],
	                    startInfo = this.getCellInfo(start),
	                    endInfo = this.getCellInfo(end);
	                this.selectedTds = selectTds;
	                this.cellsRange = {
	                    beginRowIndex:startInfo.rowIndex,
	                    beginColIndex:startInfo.colIndex,
	                    endRowIndex:endInfo.rowIndex + endInfo.rowSpan - 1,
	                    endColIndex:endInfo.colIndex + endInfo.colSpan - 1
	                };
	            }
	            //给第一行设置firstRow的样式名称,在排序图标的样式上使用到
	            if(!domUtils.hasClass(this.table.rows[0], "firstRow")) {
	                domUtils.addClass(this.table.rows[0], "firstRow");
	                for(var i = 1; i< this.table.rows.length; i++) {
	                    domUtils.removeClasses(this.table.rows[i], "firstRow");
	                }
	            }
	        },
	        /**
	         * 获取单元格的索引信息
	         */
	        getCellInfo:function (cell) {
	            if (!cell) return;
	            var cellIndex = cell.cellIndex,
	                rowIndex = cell.parentNode.rowIndex,
	                rowInfo = this.indexTable[rowIndex],
	                numCols = this.colsNum;
	            for (var colIndex = cellIndex; colIndex < numCols; colIndex++) {
	                var cellInfo = rowInfo[colIndex];
	                if (cellInfo.rowIndex === rowIndex && cellInfo.cellIndex === cellIndex) {
	                    return cellInfo;
	                }
	            }
	        },
	        /**
	         * 根据行列号获取单元格
	         */
	        getCell:function (rowIndex, cellIndex) {
	            return rowIndex < this.rowsNum && this.table.rows[rowIndex].cells[cellIndex] || null;
	        },
	        /**
	         * 删除单元格
	         */
	        deleteCell:function (cell, rowIndex) {
	            rowIndex = typeof rowIndex == 'number' ? rowIndex : cell.parentNode.rowIndex;
	            var row = this.table.rows[rowIndex];
	            row.deleteCell(cell.cellIndex);
	        },
	        /**
	         * 根据始末两个单元格获取被框选的所有单元格范围
	         */
	        getCellsRange:function (cellA, cellB) {
	            function checkRange(beginRowIndex, beginColIndex, endRowIndex, endColIndex) {
	                var tmpBeginRowIndex = beginRowIndex,
	                    tmpBeginColIndex = beginColIndex,
	                    tmpEndRowIndex = endRowIndex,
	                    tmpEndColIndex = endColIndex,
	                    cellInfo, colIndex, rowIndex;
	                // 通过indexTable检查是否存在超出TableRange上边界的情况
	                if (beginRowIndex > 0) {
	                    for (colIndex = beginColIndex; colIndex < endColIndex; colIndex++) {
	                        cellInfo = me.indexTable[beginRowIndex][colIndex];
	                        rowIndex = cellInfo.rowIndex;
	                        if (rowIndex < beginRowIndex) {
	                            tmpBeginRowIndex = Math.min(rowIndex, tmpBeginRowIndex);
	                        }
	                    }
	                }
	                // 通过indexTable检查是否存在超出TableRange右边界的情况
	                if (endColIndex < me.colsNum) {
	                    for (rowIndex = beginRowIndex; rowIndex < endRowIndex; rowIndex++) {
	                        cellInfo = me.indexTable[rowIndex][endColIndex];
	                        colIndex = cellInfo.colIndex + cellInfo.colSpan - 1;
	                        if (colIndex > endColIndex) {
	                            tmpEndColIndex = Math.max(colIndex, tmpEndColIndex);
	                        }
	                    }
	                }
	                // 检查是否有超出TableRange下边界的情况
	                if (endRowIndex < me.rowsNum) {
	                    for (colIndex = beginColIndex; colIndex < endColIndex; colIndex++) {
	                        cellInfo = me.indexTable[endRowIndex][colIndex];
	                        rowIndex = cellInfo.rowIndex + cellInfo.rowSpan - 1;
	                        if (rowIndex > endRowIndex) {
	                            tmpEndRowIndex = Math.max(rowIndex, tmpEndRowIndex);
	                        }
	                    }
	                }
	                // 检查是否有超出TableRange左边界的情况
	                if (beginColIndex > 0) {
	                    for (rowIndex = beginRowIndex; rowIndex < endRowIndex; rowIndex++) {
	                        cellInfo = me.indexTable[rowIndex][beginColIndex];
	                        colIndex = cellInfo.colIndex;
	                        if (colIndex < beginColIndex) {
	                            tmpBeginColIndex = Math.min(cellInfo.colIndex, tmpBeginColIndex);
	                        }
	                    }
	                }
	                //递归调用直至所有完成所有框选单元格的扩展
	                if (tmpBeginRowIndex != beginRowIndex || tmpBeginColIndex != beginColIndex || tmpEndRowIndex != endRowIndex || tmpEndColIndex != endColIndex) {
	                    return checkRange(tmpBeginRowIndex, tmpBeginColIndex, tmpEndRowIndex, tmpEndColIndex);
	                } else {
	                    // 不需要扩展TableRange的情况
	                    return {
	                        beginRowIndex:beginRowIndex,
	                        beginColIndex:beginColIndex,
	                        endRowIndex:endRowIndex,
	                        endColIndex:endColIndex
	                    };
	                }
	            }

	            try {
	                var me = this,
	                    cellAInfo = me.getCellInfo(cellA);
	                if (cellA === cellB) {
	                    return {
	                        beginRowIndex:cellAInfo.rowIndex,
	                        beginColIndex:cellAInfo.colIndex,
	                        endRowIndex:cellAInfo.rowIndex + cellAInfo.rowSpan - 1,
	                        endColIndex:cellAInfo.colIndex + cellAInfo.colSpan - 1
	                    };
	                }
	                var cellBInfo = me.getCellInfo(cellB);
	                // 计算TableRange的四个边
	                var beginRowIndex = Math.min(cellAInfo.rowIndex, cellBInfo.rowIndex),
	                    beginColIndex = Math.min(cellAInfo.colIndex, cellBInfo.colIndex),
	                    endRowIndex = Math.max(cellAInfo.rowIndex + cellAInfo.rowSpan - 1, cellBInfo.rowIndex + cellBInfo.rowSpan - 1),
	                    endColIndex = Math.max(cellAInfo.colIndex + cellAInfo.colSpan - 1, cellBInfo.colIndex + cellBInfo.colSpan - 1);

	                return checkRange(beginRowIndex, beginColIndex, endRowIndex, endColIndex);
	            } catch (e) {
	                //throw e;
	            }
	        },
	        /**
	         * 依据cellsRange获取对应的单元格集合
	         */
	        getCells:function (range) {
	            //每次获取cells之前必须先清除上次的选择，否则会对后续获取操作造成影响
	            this.clearSelected();
	            var beginRowIndex = range.beginRowIndex,
	                beginColIndex = range.beginColIndex,
	                endRowIndex = range.endRowIndex,
	                endColIndex = range.endColIndex,
	                cellInfo, rowIndex, colIndex, tdHash = {}, returnTds = [];
	            for (var i = beginRowIndex; i <= endRowIndex; i++) {
	                for (var j = beginColIndex; j <= endColIndex; j++) {
	                    cellInfo = this.indexTable[i][j];
	                    rowIndex = cellInfo.rowIndex;
	                    colIndex = cellInfo.colIndex;
	                    // 如果Cells里已经包含了此Cell则跳过
	                    var key = rowIndex + '|' + colIndex;
	                    if (tdHash[key]) continue;
	                    tdHash[key] = 1;
	                    if (rowIndex < i || colIndex < j || rowIndex + cellInfo.rowSpan - 1 > endRowIndex || colIndex + cellInfo.colSpan - 1 > endColIndex) {
	                        return null;
	                    }
	                    returnTds.push(this.getCell(rowIndex, cellInfo.cellIndex));
	                }
	            }
	            return returnTds;
	        },
	        /**
	         * 清理已经选中的单元格
	         */
	        clearSelected:function () {
	            UETable.removeSelectedClass(this.selectedTds);
	            this.selectedTds = [];
	            this.cellsRange = {};
	        },
	        /**
	         * 根据range设置已经选中的单元格
	         */
	        setSelected:function (range) {
	            var cells = this.getCells(range);
	            UETable.addSelectedClass(cells);
	            this.selectedTds = cells;
	            this.cellsRange = range;
	        },
	        isFullRow:function () {
	            var range = this.cellsRange;
	            return (range.endColIndex - range.beginColIndex + 1) == this.colsNum;
	        },
	        isFullCol:function () {
	            var range = this.cellsRange,
	                table = this.table,
	                ths = table.getElementsByTagName("th"),
	                rows = range.endRowIndex - range.beginRowIndex + 1;
	            return  !ths.length ? rows == this.rowsNum : rows == this.rowsNum || (rows == this.rowsNum - 1);

	        },
	        /**
	         * 获取视觉上的前置单元格，默认是左边，top传入时
	         * @param cell
	         * @param top
	         */
	        getNextCell:function (cell, bottom, ignoreRange) {
	            try {
	                var cellInfo = this.getCellInfo(cell),
	                    nextRowIndex, nextColIndex;
	                var len = this.selectedTds.length && !ignoreRange,
	                    range = this.cellsRange;
	                //末行或者末列没有后置单元格
	                if ((!bottom && (cellInfo.rowIndex == 0)) || (bottom && (!len ? (cellInfo.rowIndex + cellInfo.rowSpan > this.rowsNum - 1) : (range.endRowIndex == this.rowsNum - 1)))) return null;

	                nextRowIndex = !bottom ? ( !len ? cellInfo.rowIndex - 1 : range.beginRowIndex - 1)
	                    : ( !len ? (cellInfo.rowIndex + cellInfo.rowSpan) : range.endRowIndex + 1);
	                nextColIndex = !len ? cellInfo.colIndex : range.beginColIndex;
	                return this.getCell(this.indexTable[nextRowIndex][nextColIndex].rowIndex, this.indexTable[nextRowIndex][nextColIndex].cellIndex);
	            } catch (e) {
	                showError(e);
	            }
	        },
	        getPreviewCell:function (cell, top) {
	            try {
	                var cellInfo = this.getCellInfo(cell),
	                    previewRowIndex, previewColIndex;
	                var len = this.selectedTds.length,
	                    range = this.cellsRange;
	                //首行或者首列没有前置单元格
	                if ((!top && (!len ? !cellInfo.colIndex : !range.beginColIndex)) || (top && (!len ? (cellInfo.rowIndex > (this.colsNum - 1)) : (range.endColIndex == this.colsNum - 1)))) return null;

	                previewRowIndex = !top ? ( !len ? cellInfo.rowIndex : range.beginRowIndex )
	                    : ( !len ? (cellInfo.rowIndex < 1 ? 0 : (cellInfo.rowIndex - 1)) : range.beginRowIndex);
	                previewColIndex = !top ? ( !len ? (cellInfo.colIndex < 1 ? 0 : (cellInfo.colIndex - 1)) : range.beginColIndex - 1)
	                    : ( !len ? cellInfo.colIndex : range.endColIndex + 1);
	                return this.getCell(this.indexTable[previewRowIndex][previewColIndex].rowIndex, this.indexTable[previewRowIndex][previewColIndex].cellIndex);
	            } catch (e) {
	                showError(e);
	            }
	        },
	        /**
	         * 移动单元格中的内容
	         */
	        moveContent:function (cellTo, cellFrom) {
	            if (UETable.isEmptyBlock(cellFrom)) return;
	            if (UETable.isEmptyBlock(cellTo)) {
	                cellTo.innerHTML = cellFrom.innerHTML;
	                return;
	            }
	            var child = cellTo.lastChild;
	            if (child.nodeType == 3 || !dtd.$block[child.tagName]) {
	                cellTo.appendChild(cellTo.ownerDocument.createElement('br'))
	            }
	            while (child = cellFrom.firstChild) {
	                cellTo.appendChild(child);
	            }
	        },
	        /**
	         * 向右合并单元格
	         */
	        mergeRight:function (cell) {
	            var cellInfo = this.getCellInfo(cell),
	                rightColIndex = cellInfo.colIndex + cellInfo.colSpan,
	                rightCellInfo = this.indexTable[cellInfo.rowIndex][rightColIndex],
	                rightCell = this.getCell(rightCellInfo.rowIndex, rightCellInfo.cellIndex);
	            //合并
	            cell.colSpan = cellInfo.colSpan + rightCellInfo.colSpan;
	            //被合并的单元格不应存在宽度属性
	            cell.removeAttribute("width");
	            //移动内容
	            this.moveContent(cell, rightCell);
	            //删掉被合并的Cell
	            this.deleteCell(rightCell, rightCellInfo.rowIndex);
	            this.update();
	        },
	        /**
	         * 向下合并单元格
	         */
	        mergeDown:function (cell) {
	            var cellInfo = this.getCellInfo(cell),
	                downRowIndex = cellInfo.rowIndex + cellInfo.rowSpan,
	                downCellInfo = this.indexTable[downRowIndex][cellInfo.colIndex],
	                downCell = this.getCell(downCellInfo.rowIndex, downCellInfo.cellIndex);
	            cell.rowSpan = cellInfo.rowSpan + downCellInfo.rowSpan;
	            cell.removeAttribute("height");
	            this.moveContent(cell, downCell);
	            this.deleteCell(downCell, downCellInfo.rowIndex);
	            this.update();
	        },
	        /**
	         * 合并整个range中的内容
	         */
	        mergeRange:function () {
	            //由于合并操作可以在任意时刻进行，所以无法通过鼠标位置等信息实时生成range，只能通过缓存实例中的cellsRange对象来访问
	            var range = this.cellsRange,
	                leftTopCell = this.getCell(range.beginRowIndex, this.indexTable[range.beginRowIndex][range.beginColIndex].cellIndex);

	            if (leftTopCell.tagName == "TH" && range.endRowIndex !== range.beginRowIndex) {
	                var index = this.indexTable,
	                    info = this.getCellInfo(leftTopCell);
	                leftTopCell = this.getCell(1, index[1][info.colIndex].cellIndex);
	                range = this.getCellsRange(leftTopCell, this.getCell(index[this.rowsNum - 1][info.colIndex].rowIndex, index[this.rowsNum - 1][info.colIndex].cellIndex));
	            }

	            // 删除剩余的Cells
	            var cells = this.getCells(range);
	            for(var i= 0,ci;ci=cells[i++];){
	                if (ci !== leftTopCell) {
	                    this.moveContent(leftTopCell, ci);
	                    this.deleteCell(ci);
	                }
	            }
	            // 修改左上角Cell的rowSpan和colSpan，并调整宽度属性设置
	            leftTopCell.rowSpan = range.endRowIndex - range.beginRowIndex + 1;
	            leftTopCell.rowSpan > 1 && leftTopCell.removeAttribute("height");
	            leftTopCell.colSpan = range.endColIndex - range.beginColIndex + 1;
	            leftTopCell.colSpan > 1 && leftTopCell.removeAttribute("width");
	            if (leftTopCell.rowSpan == this.rowsNum && leftTopCell.colSpan != 1) {
	                leftTopCell.colSpan = 1;
	            }

	            if (leftTopCell.colSpan == this.colsNum && leftTopCell.rowSpan != 1) {
	                var rowIndex = leftTopCell.parentNode.rowIndex;
	                //解决IE下的表格操作问题
	                if( this.table.deleteRow ) {
	                    for (var i = rowIndex+ 1, curIndex=rowIndex+ 1, len=leftTopCell.rowSpan; i < len; i++) {
	                        this.table.deleteRow(curIndex);
	                    }
	                } else {
	                    for (var i = 0, len=leftTopCell.rowSpan - 1; i < len; i++) {
	                        var row = this.table.rows[rowIndex + 1];
	                        row.parentNode.removeChild(row);
	                    }
	                }
	                leftTopCell.rowSpan = 1;
	            }
	            this.update();
	        },
	        /**
	         * 插入一行单元格
	         */
	        insertRow:function (rowIndex, sourceCell) {
	            var numCols = this.colsNum,
	                table = this.table,
	                row = table.insertRow(rowIndex), cell,
	                isInsertTitle = typeof sourceCell == 'string' && sourceCell.toUpperCase() == 'TH';

	            function replaceTdToTh(colIndex, cell, tableRow) {
	                if (colIndex == 0) {
	                    var tr = tableRow.nextSibling || tableRow.previousSibling,
	                        th = tr.cells[colIndex];
	                    if (th.tagName == 'TH') {
	                        th = cell.ownerDocument.createElement("th");
	                        th.appendChild(cell.firstChild);
	                        tableRow.insertBefore(th, cell);
	                        domUtils.remove(cell)
	                    }
	                }else{
	                    if (cell.tagName == 'TH') {
	                        var td = cell.ownerDocument.createElement("td");
	                        td.appendChild(cell.firstChild);
	                        tableRow.insertBefore(td, cell);
	                        domUtils.remove(cell)
	                    }
	                }
	            }

	            //首行直接插入,无需考虑部分单元格被rowspan的情况
	            if (rowIndex == 0 || rowIndex == this.rowsNum) {
	                for (var colIndex = 0; colIndex < numCols; colIndex++) {
	                    cell = this.cloneCell(sourceCell, true);
	                    this.setCellContent(cell);
	                    cell.getAttribute('vAlign') && cell.setAttribute('vAlign', cell.getAttribute('vAlign'));
	                    row.appendChild(cell);
	                    if(!isInsertTitle) replaceTdToTh(colIndex, cell, row);
	                }
	            } else {
	                var infoRow = this.indexTable[rowIndex],
	                    cellIndex = 0;
	                for (colIndex = 0; colIndex < numCols; colIndex++) {
	                    var cellInfo = infoRow[colIndex];
	                    //如果存在某个单元格的rowspan穿过待插入行的位置，则修改该单元格的rowspan即可，无需插入单元格
	                    if (cellInfo.rowIndex < rowIndex) {
	                        cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
	                        cell.rowSpan = cellInfo.rowSpan + 1;
	                    } else {
	                        cell = this.cloneCell(sourceCell, true);
	                        this.setCellContent(cell);
	                        row.appendChild(cell);
	                    }
	                    if(!isInsertTitle) replaceTdToTh(colIndex, cell, row);
	                }
	            }
	            //框选时插入不触发contentchange，需要手动更新索引。
	            this.update();
	            return row;
	        },
	        /**
	         * 删除一行单元格
	         * @param rowIndex
	         */
	        deleteRow:function (rowIndex) {
	            var row = this.table.rows[rowIndex],
	                infoRow = this.indexTable[rowIndex],
	                colsNum = this.colsNum,
	                count = 0;     //处理计数
	            for (var colIndex = 0; colIndex < colsNum;) {
	                var cellInfo = infoRow[colIndex],
	                    cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
	                if (cell.rowSpan > 1) {
	                    if (cellInfo.rowIndex == rowIndex) {
	                        var clone = cell.cloneNode(true);
	                        clone.rowSpan = cell.rowSpan - 1;
	                        clone.innerHTML = "";
	                        cell.rowSpan = 1;
	                        var nextRowIndex = rowIndex + 1,
	                            nextRow = this.table.rows[nextRowIndex],
	                            insertCellIndex,
	                            preMerged = this.getPreviewMergedCellsNum(nextRowIndex, colIndex) - count;
	                        if (preMerged < colIndex) {
	                            insertCellIndex = colIndex - preMerged - 1;
	                            //nextRow.insertCell(insertCellIndex);
	                            domUtils.insertAfter(nextRow.cells[insertCellIndex], clone);
	                        } else {
	                            if (nextRow.cells.length) nextRow.insertBefore(clone, nextRow.cells[0])
	                        }
	                        count += 1;
	                        //cell.parentNode.removeChild(cell);
	                    }
	                }
	                colIndex += cell.colSpan || 1;
	            }
	            var deleteTds = [], cacheMap = {};
	            for (colIndex = 0; colIndex < colsNum; colIndex++) {
	                var tmpRowIndex = infoRow[colIndex].rowIndex,
	                    tmpCellIndex = infoRow[colIndex].cellIndex,
	                    key = tmpRowIndex + "_" + tmpCellIndex;
	                if (cacheMap[key])continue;
	                cacheMap[key] = 1;
	                cell = this.getCell(tmpRowIndex, tmpCellIndex);
	                deleteTds.push(cell);
	            }
	            var mergeTds = [];
	            utils.each(deleteTds, function (td) {
	                if (td.rowSpan == 1) {
	                    td.parentNode.removeChild(td);
	                } else {
	                    mergeTds.push(td);
	                }
	            });
	            utils.each(mergeTds, function (td) {
	                td.rowSpan--;
	            });
	            row.parentNode.removeChild(row);
	            //浏览器方法本身存在bug,采用自定义方法删除
	            //this.table.deleteRow(rowIndex);
	            this.update();
	        },
	        insertCol:function (colIndex, sourceCell, defaultValue) {
	            var rowsNum = this.rowsNum,
	                rowIndex = 0,
	                tableRow, cell,
	                backWidth = parseInt((this.table.offsetWidth - (this.colsNum + 1) * 20 - (this.colsNum + 1)) / (this.colsNum + 1), 10),
	                isInsertTitleCol = typeof sourceCell == 'string' && sourceCell.toUpperCase() == 'TH';

	            function replaceTdToTh(rowIndex, cell, tableRow) {
	                if (rowIndex == 0) {
	                    var th = cell.nextSibling || cell.previousSibling;
	                    if (th.tagName == 'TH') {
	                        th = cell.ownerDocument.createElement("th");
	                        th.appendChild(cell.firstChild);
	                        tableRow.insertBefore(th, cell);
	                        domUtils.remove(cell)
	                    }
	                }else{
	                    if (cell.tagName == 'TH') {
	                        var td = cell.ownerDocument.createElement("td");
	                        td.appendChild(cell.firstChild);
	                        tableRow.insertBefore(td, cell);
	                        domUtils.remove(cell)
	                    }
	                }
	            }

	            var preCell;
	            if (colIndex == 0 || colIndex == this.colsNum) {
	                for (; rowIndex < rowsNum; rowIndex++) {
	                    tableRow = this.table.rows[rowIndex];
	                    preCell = tableRow.cells[colIndex == 0 ? colIndex : tableRow.cells.length];
	                    cell = this.cloneCell(sourceCell, true); //tableRow.insertCell(colIndex == 0 ? colIndex : tableRow.cells.length);
	                    this.setCellContent(cell);
	                    cell.setAttribute('vAlign', cell.getAttribute('vAlign'));
	                    preCell && cell.setAttribute('width', preCell.getAttribute('width'));
	                    if (!colIndex) {
	                        tableRow.insertBefore(cell, tableRow.cells[0]);
	                    } else {
	                        domUtils.insertAfter(tableRow.cells[tableRow.cells.length - 1], cell);
	                    }
	                    if(!isInsertTitleCol) replaceTdToTh(rowIndex, cell, tableRow)
	                }
	            } else {
	                for (; rowIndex < rowsNum; rowIndex++) {
	                    var cellInfo = this.indexTable[rowIndex][colIndex];
	                    if (cellInfo.colIndex < colIndex) {
	                        cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
	                        cell.colSpan = cellInfo.colSpan + 1;
	                    } else {
	                        tableRow = this.table.rows[rowIndex];
	                        preCell = tableRow.cells[cellInfo.cellIndex];

	                        cell = this.cloneCell(sourceCell, true);//tableRow.insertCell(cellInfo.cellIndex);
	                        this.setCellContent(cell);
	                        cell.setAttribute('vAlign', cell.getAttribute('vAlign'));
	                        preCell && cell.setAttribute('width', preCell.getAttribute('width'));
	                        //防止IE下报错
	                        preCell ? tableRow.insertBefore(cell, preCell) : tableRow.appendChild(cell);
	                    }
	                    if(!isInsertTitleCol) replaceTdToTh(rowIndex, cell, tableRow);
	                }
	            }
	            //框选时插入不触发contentchange，需要手动更新索引
	            this.update();
	            this.updateWidth(backWidth, defaultValue || {tdPadding:10, tdBorder:1});
	        },
	        updateWidth:function (width, defaultValue) {
	            var table = this.table,
	                tmpWidth = UETable.getWidth(table) - defaultValue.tdPadding * 2 - defaultValue.tdBorder + width;
	            if (tmpWidth < table.ownerDocument.body.offsetWidth) {
	                table.setAttribute("width", tmpWidth);
	                return;
	            }
	            var tds = domUtils.getElementsByTagName(this.table, "td th");
	            utils.each(tds, function (td) {
	                td.setAttribute("width", width);
	            })
	        },
	        deleteCol:function (colIndex) {
	            var indexTable = this.indexTable,
	                tableRows = this.table.rows,
	                backTableWidth = this.table.getAttribute("width"),
	                backTdWidth = 0,
	                rowsNum = this.rowsNum,
	                cacheMap = {};
	            for (var rowIndex = 0; rowIndex < rowsNum;) {
	                var infoRow = indexTable[rowIndex],
	                    cellInfo = infoRow[colIndex],
	                    key = cellInfo.rowIndex + '_' + cellInfo.colIndex;
	                // 跳过已经处理过的Cell
	                if (cacheMap[key])continue;
	                cacheMap[key] = 1;
	                var cell = this.getCell(cellInfo.rowIndex, cellInfo.cellIndex);
	                if (!backTdWidth) backTdWidth = cell && parseInt(cell.offsetWidth / cell.colSpan, 10).toFixed(0);
	                // 如果Cell的colSpan大于1, 就修改colSpan, 否则就删掉这个Cell
	                if (cell.colSpan > 1) {
	                    cell.colSpan--;
	                } else {
	                    tableRows[rowIndex].deleteCell(cellInfo.cellIndex);
	                }
	                rowIndex += cellInfo.rowSpan || 1;
	            }
	            this.table.setAttribute("width", backTableWidth - backTdWidth);
	            this.update();
	        },
	        splitToCells:function (cell) {
	            var me = this,
	                cells = this.splitToRows(cell);
	            utils.each(cells, function (cell) {
	                me.splitToCols(cell);
	            })
	        },
	        splitToRows:function (cell) {
	            var cellInfo = this.getCellInfo(cell),
	                rowIndex = cellInfo.rowIndex,
	                colIndex = cellInfo.colIndex,
	                results = [];
	            // 修改Cell的rowSpan
	            cell.rowSpan = 1;
	            results.push(cell);
	            // 补齐单元格
	            for (var i = rowIndex, endRow = rowIndex + cellInfo.rowSpan; i < endRow; i++) {
	                if (i == rowIndex)continue;
	                var tableRow = this.table.rows[i],
	                    tmpCell = tableRow.insertCell(colIndex - this.getPreviewMergedCellsNum(i, colIndex));
	                tmpCell.colSpan = cellInfo.colSpan;
	                this.setCellContent(tmpCell);
	                tmpCell.setAttribute('vAlign', cell.getAttribute('vAlign'));
	                tmpCell.setAttribute('align', cell.getAttribute('align'));
	                if (cell.style.cssText) {
	                    tmpCell.style.cssText = cell.style.cssText;
	                }
	                results.push(tmpCell);
	            }
	            this.update();
	            return results;
	        },
	        getPreviewMergedCellsNum:function (rowIndex, colIndex) {
	            var indexRow = this.indexTable[rowIndex],
	                num = 0;
	            for (var i = 0; i < colIndex;) {
	                var colSpan = indexRow[i].colSpan,
	                    tmpRowIndex = indexRow[i].rowIndex;
	                num += (colSpan - (tmpRowIndex == rowIndex ? 1 : 0));
	                i += colSpan;
	            }
	            return num;
	        },
	        splitToCols:function (cell) {
	            var backWidth = (cell.offsetWidth / cell.colSpan - 22).toFixed(0),

	                cellInfo = this.getCellInfo(cell),
	                rowIndex = cellInfo.rowIndex,
	                colIndex = cellInfo.colIndex,
	                results = [];
	            // 修改Cell的rowSpan
	            cell.colSpan = 1;
	            cell.setAttribute("width", backWidth);
	            results.push(cell);
	            // 补齐单元格
	            for (var j = colIndex, endCol = colIndex + cellInfo.colSpan; j < endCol; j++) {
	                if (j == colIndex)continue;
	                var tableRow = this.table.rows[rowIndex],
	                    tmpCell = tableRow.insertCell(this.indexTable[rowIndex][j].cellIndex + 1);
	                tmpCell.rowSpan = cellInfo.rowSpan;
	                this.setCellContent(tmpCell);
	                tmpCell.setAttribute('vAlign', cell.getAttribute('vAlign'));
	                tmpCell.setAttribute('align', cell.getAttribute('align'));
	                tmpCell.setAttribute('width', backWidth);
	                if (cell.style.cssText) {
	                    tmpCell.style.cssText = cell.style.cssText;
	                }
	                //处理th的情况
	                if (cell.tagName == 'TH') {
	                    var th = cell.ownerDocument.createElement('th');
	                    th.appendChild(tmpCell.firstChild);
	                    th.setAttribute('vAlign', cell.getAttribute('vAlign'));
	                    th.rowSpan = tmpCell.rowSpan;
	                    tableRow.insertBefore(th, tmpCell);
	                    domUtils.remove(tmpCell);
	                }
	                results.push(tmpCell);
	            }
	            this.update();
	            return results;
	        },
	        isLastCell:function (cell, rowsNum, colsNum) {
	            rowsNum = rowsNum || this.rowsNum;
	            colsNum = colsNum || this.colsNum;
	            var cellInfo = this.getCellInfo(cell);
	            return ((cellInfo.rowIndex + cellInfo.rowSpan) == rowsNum) &&
	                ((cellInfo.colIndex + cellInfo.colSpan) == colsNum);
	        },
	        getLastCell:function (cells) {
	            cells = cells || this.table.getElementsByTagName("td");
	            var firstInfo = this.getCellInfo(cells[0]);
	            var me = this, last = cells[0],
	                tr = last.parentNode,
	                cellsNum = 0, cols = 0, rows;
	            utils.each(cells, function (cell) {
	                if (cell.parentNode == tr)cols += cell.colSpan || 1;
	                cellsNum += cell.rowSpan * cell.colSpan || 1;
	            });
	            rows = cellsNum / cols;
	            utils.each(cells, function (cell) {
	                if (me.isLastCell(cell, rows, cols)) {
	                    last = cell;
	                    return false;
	                }
	            });
	            return last;

	        },
	        selectRow:function (rowIndex) {
	            var indexRow = this.indexTable[rowIndex],
	                start = this.getCell(indexRow[0].rowIndex, indexRow[0].cellIndex),
	                end = this.getCell(indexRow[this.colsNum - 1].rowIndex, indexRow[this.colsNum - 1].cellIndex),
	                range = this.getCellsRange(start, end);
	            this.setSelected(range);
	        },
	        selectTable:function () {
	            var tds = this.table.getElementsByTagName("td"),
	                range = this.getCellsRange(tds[0], tds[tds.length - 1]);
	            this.setSelected(range);
	        },
	        setBackground:function (cells, value) {
	            if (typeof value === "string") {
	                utils.each(cells, function (cell) {
	                    cell.style.backgroundColor = value;
	                })
	            } else if (typeof value === "object") {
	                value = utils.extend({
	                    repeat:true,
	                    colorList:["#ddd", "#fff"]
	                }, value);
	                var rowIndex = this.getCellInfo(cells[0]).rowIndex,
	                    count = 0,
	                    colors = value.colorList,
	                    getColor = function (list, index, repeat) {
	                        return list[index] ? list[index] : repeat ? list[index % list.length] : "";
	                    };
	                for (var i = 0, cell; cell = cells[i++];) {
	                    var cellInfo = this.getCellInfo(cell);
	                    cell.style.backgroundColor = getColor(colors, ((rowIndex + count) == cellInfo.rowIndex) ? count : ++count, value.repeat);
	                }
	            }
	        },
	        removeBackground:function (cells) {
	            utils.each(cells, function (cell) {
	                cell.style.backgroundColor = "";
	            })
	        }


	    };
	    function showError(e) {
	    }
	})();

	// plugins/table.cmds.js
	/**
	 * Created with JetBrains PhpStorm.
	 * User: taoqili
	 * Date: 13-2-20
	 * Time: 下午6:25
	 * To change this template use File | Settings | File Templates.
	 */
	;
	(function () {
	    var UT = UE.UETable,
	        getTableItemsByRange = function (editor) {
	            return UT.getTableItemsByRange(editor);
	        },
	        getUETableBySelected = function (editor) {
	            return UT.getUETableBySelected(editor)
	        },
	        getDefaultValue = function (editor, table) {
	            return UT.getDefaultValue(editor, table);
	        },
	        getUETable = function (tdOrTable) {
	            return UT.getUETable(tdOrTable);
	        };


	    UE.commands['inserttable'] = {
	        queryCommandState: function () {
	            return getTableItemsByRange(this).table ? -1 : 0;
	        },
	        execCommand: function (cmd, opt) {
	            function createTable(opt, tdWidth) {
	                var html = [],
	                    rowsNum = opt.numRows,
	                    colsNum = opt.numCols;
	                for (var r = 0; r < rowsNum; r++) {
	                    html.push('<tr' + (r == 0 ? ' class="firstRow"':'') + '>');
	                    for (var c = 0; c < colsNum; c++) {
	                        html.push('<td width="' + tdWidth + '"  vAlign="' + opt.tdvalign + '" >' + (browser.ie && browser.version < 11 ? domUtils.fillChar : '<br/>') + '</td>')
	                    }
	                    html.push('</tr>')
	                }
	                //禁止指定table-width
	                return '<table><tbody>' + html.join('') + '</tbody></table>'
	            }

	            if (!opt) {
	                opt = utils.extend({}, {
	                    numCols: this.options.defaultCols,
	                    numRows: this.options.defaultRows,
	                    tdvalign: this.options.tdvalign
	                })
	            }
	            var me = this;
	            var range = this.selection.getRange(),
	                start = range.startContainer,
	                firstParentBlock = domUtils.findParent(start, function (node) {
	                    return domUtils.isBlockElm(node);
	                }, true) || me.body;

	            var defaultValue = getDefaultValue(me),
	                tableWidth = firstParentBlock.offsetWidth,
	                tdWidth = Math.floor(tableWidth / opt.numCols - defaultValue.tdPadding * 2 - defaultValue.tdBorder);

	            //todo其他属性
	            !opt.tdvalign && (opt.tdvalign = me.options.tdvalign);
	            me.execCommand("inserthtml", createTable(opt, tdWidth));
	        }
	    };

	    UE.commands['insertparagraphbeforetable'] = {
	        queryCommandState: function () {
	            return getTableItemsByRange(this).cell ? 0 : -1;
	        },
	        execCommand: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                var p = this.document.createElement("p");
	                p.innerHTML = browser.ie ? '&nbsp;' : '<br />';
	                table.parentNode.insertBefore(p, table);
	                this.selection.getRange().setStart(p, 0).setCursor();
	            }
	        }
	    };

	    UE.commands['deletetable'] = {
	        queryCommandState: function () {
	            var rng = this.selection.getRange();
	            return domUtils.findParentByTagName(rng.startContainer, 'table', true) ? 0 : -1;
	        },
	        execCommand: function (cmd, table) {
	            var rng = this.selection.getRange();
	            table = table || domUtils.findParentByTagName(rng.startContainer, 'table', true);
	            if (table) {
	                var next = table.nextSibling;
	                if (!next) {
	                    next = domUtils.createElement(this.document, 'p', {
	                        'innerHTML': browser.ie ? domUtils.fillChar : '<br/>'
	                    });
	                    table.parentNode.insertBefore(next, table);
	                }
	                domUtils.remove(table);
	                rng = this.selection.getRange();
	                if (next.nodeType == 3) {
	                    rng.setStartBefore(next)
	                } else {
	                    rng.setStart(next, 0)
	                }
	                rng.setCursor(false, true)
	                this.fireEvent("tablehasdeleted")

	            }

	        }
	    };
	    UE.commands['cellalign'] = {
	        queryCommandState: function () {
	            return getSelectedArr(this).length ? 0 : -1
	        },
	        execCommand: function (cmd, align) {
	            var selectedTds = getSelectedArr(this);
	            if (selectedTds.length) {
	                for (var i = 0, ci; ci = selectedTds[i++];) {
	                    ci.setAttribute('align', align);
	                }
	            }
	        }
	    };
	    UE.commands['cellvalign'] = {
	        queryCommandState: function () {
	            return getSelectedArr(this).length ? 0 : -1;
	        },
	        execCommand: function (cmd, valign) {
	            var selectedTds = getSelectedArr(this);
	            if (selectedTds.length) {
	                for (var i = 0, ci; ci = selectedTds[i++];) {
	                    ci.setAttribute('vAlign', valign);
	                }
	            }
	        }
	    };
	    UE.commands['insertcaption'] = {
	        queryCommandState: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                return table.getElementsByTagName('caption').length == 0 ? 1 : -1;
	            }
	            return -1;
	        },
	        execCommand: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                var caption = this.document.createElement('caption');
	                caption.innerHTML = browser.ie ? domUtils.fillChar : '<br/>';
	                table.insertBefore(caption, table.firstChild);
	                var range = this.selection.getRange();
	                range.setStart(caption, 0).setCursor();
	            }

	        }
	    };
	    UE.commands['deletecaption'] = {
	        queryCommandState: function () {
	            var rng = this.selection.getRange(),
	                table = domUtils.findParentByTagName(rng.startContainer, 'table');
	            if (table) {
	                return table.getElementsByTagName('caption').length == 0 ? -1 : 1;
	            }
	            return -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                table = domUtils.findParentByTagName(rng.startContainer, 'table');
	            if (table) {
	                domUtils.remove(table.getElementsByTagName('caption')[0]);
	                var range = this.selection.getRange();
	                range.setStart(table.rows[0].cells[0], 0).setCursor();
	            }

	        }
	    };
	    UE.commands['inserttitle'] = {
	        queryCommandState: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                var firstRow = table.rows[0];
	                return firstRow.cells[firstRow.cells.length-1].tagName.toLowerCase() != 'th' ? 0 : -1
	            }
	            return -1;
	        },
	        execCommand: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                getUETable(table).insertRow(0, 'th');
	            }
	            var th = table.getElementsByTagName('th')[0];
	            this.selection.getRange().setStart(th, 0).setCursor(false, true);
	        }
	    };
	    UE.commands['deletetitle'] = {
	        queryCommandState: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                var firstRow = table.rows[0];
	                return firstRow.cells[firstRow.cells.length-1].tagName.toLowerCase() == 'th' ? 0 : -1
	            }
	            return -1;
	        },
	        execCommand: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                domUtils.remove(table.rows[0])
	            }
	            var td = table.getElementsByTagName('td')[0];
	            this.selection.getRange().setStart(td, 0).setCursor(false, true);
	        }
	    };
	    UE.commands['inserttitlecol'] = {
	        queryCommandState: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                var lastRow = table.rows[table.rows.length-1];
	                return lastRow.getElementsByTagName('th').length ? -1 : 0;
	            }
	            return -1;
	        },
	        execCommand: function (cmd) {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                getUETable(table).insertCol(0, 'th');
	            }
	            resetTdWidth(table, this);
	            var th = table.getElementsByTagName('th')[0];
	            this.selection.getRange().setStart(th, 0).setCursor(false, true);
	        }
	    };
	    UE.commands['deletetitlecol'] = {
	        queryCommandState: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                var lastRow = table.rows[table.rows.length-1];
	                return lastRow.getElementsByTagName('th').length ? 0 : -1;
	            }
	            return -1;
	        },
	        execCommand: function () {
	            var table = getTableItemsByRange(this).table;
	            if (table) {
	                for(var i = 0; i< table.rows.length; i++ ){
	                    domUtils.remove(table.rows[i].children[0])
	                }
	            }
	            resetTdWidth(table, this);
	            var td = table.getElementsByTagName('td')[0];
	            this.selection.getRange().setStart(td, 0).setCursor(false, true);
	        }
	    };

	    UE.commands["mergeright"] = {
	        queryCommandState: function (cmd) {
	            var tableItems = getTableItemsByRange(this),
	                table = tableItems.table,
	                cell = tableItems.cell;

	            if (!table || !cell) return -1;
	            var ut = getUETable(table);
	            if (ut.selectedTds.length) return -1;

	            var cellInfo = ut.getCellInfo(cell),
	                rightColIndex = cellInfo.colIndex + cellInfo.colSpan;
	            if (rightColIndex >= ut.colsNum) return -1; // 如果处于最右边则不能向右合并

	            var rightCellInfo = ut.indexTable[cellInfo.rowIndex][rightColIndex],
	                rightCell = table.rows[rightCellInfo.rowIndex].cells[rightCellInfo.cellIndex];
	            if (!rightCell || cell.tagName != rightCell.tagName) return -1; // TH和TD不能相互合并

	            // 当且仅当两个Cell的开始列号和结束列号一致时能进行合并
	            return (rightCellInfo.rowIndex == cellInfo.rowIndex && rightCellInfo.rowSpan == cellInfo.rowSpan) ? 0 : -1;
	        },
	        execCommand: function (cmd) {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell);
	            ut.mergeRight(cell);
	            rng.moveToBookmark(bk).select();
	        }
	    };
	    UE.commands["mergedown"] = {
	        queryCommandState: function (cmd) {
	            var tableItems = getTableItemsByRange(this),
	                table = tableItems.table,
	                cell = tableItems.cell;

	            if (!table || !cell) return -1;
	            var ut = getUETable(table);
	            if (ut.selectedTds.length)return -1;

	            var cellInfo = ut.getCellInfo(cell),
	                downRowIndex = cellInfo.rowIndex + cellInfo.rowSpan;
	            if (downRowIndex >= ut.rowsNum) return -1; // 如果处于最下边则不能向下合并

	            var downCellInfo = ut.indexTable[downRowIndex][cellInfo.colIndex],
	                downCell = table.rows[downCellInfo.rowIndex].cells[downCellInfo.cellIndex];
	            if (!downCell || cell.tagName != downCell.tagName) return -1; // TH和TD不能相互合并

	            // 当且仅当两个Cell的开始列号和结束列号一致时能进行合并
	            return (downCellInfo.colIndex == cellInfo.colIndex && downCellInfo.colSpan == cellInfo.colSpan) ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell);
	            ut.mergeDown(cell);
	            rng.moveToBookmark(bk).select();
	        }
	    };
	    UE.commands["mergecells"] = {
	        queryCommandState: function () {
	            return getUETableBySelected(this) ? 0 : -1;
	        },
	        execCommand: function () {
	            var ut = getUETableBySelected(this);
	            if (ut && ut.selectedTds.length) {
	                var cell = ut.selectedTds[0];
	                ut.mergeRange();
	                var rng = this.selection.getRange();
	                if (domUtils.isEmptyBlock(cell)) {
	                    rng.setStart(cell, 0).collapse(true)
	                } else {
	                    rng.selectNodeContents(cell)
	                }
	                rng.select();
	            }


	        }
	    };
	    UE.commands["insertrow"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            return cell && (cell.tagName == "TD" || (cell.tagName == 'TH' && tableItems.tr !== tableItems.table.rows[0])) &&
	                getUETable(tableItems.table).rowsNum < this.options.maxRowNum ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell,
	                table = tableItems.table,
	                ut = getUETable(table),
	                cellInfo = ut.getCellInfo(cell);
	            //ut.insertRow(!ut.selectedTds.length ? cellInfo.rowIndex:ut.cellsRange.beginRowIndex,'');
	            if (!ut.selectedTds.length) {
	                ut.insertRow(cellInfo.rowIndex, cell);
	            } else {
	                var range = ut.cellsRange;
	                for (var i = 0, len = range.endRowIndex - range.beginRowIndex + 1; i < len; i++) {
	                    ut.insertRow(range.beginRowIndex, cell);
	                }
	            }
	            rng.moveToBookmark(bk).select();
	            if (table.getAttribute("interlaced") === "enabled")this.fireEvent("interlacetable", table);
	        }
	    };
	    //后插入行
	    UE.commands["insertrownext"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            return cell && (cell.tagName == "TD") && getUETable(tableItems.table).rowsNum < this.options.maxRowNum ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell,
	                table = tableItems.table,
	                ut = getUETable(table),
	                cellInfo = ut.getCellInfo(cell);
	            //ut.insertRow(!ut.selectedTds.length? cellInfo.rowIndex + cellInfo.rowSpan : ut.cellsRange.endRowIndex + 1,'');
	            if (!ut.selectedTds.length) {
	                ut.insertRow(cellInfo.rowIndex + cellInfo.rowSpan, cell);
	            } else {
	                var range = ut.cellsRange;
	                for (var i = 0, len = range.endRowIndex - range.beginRowIndex + 1; i < len; i++) {
	                    ut.insertRow(range.endRowIndex + 1, cell);
	                }
	            }
	            rng.moveToBookmark(bk).select();
	            if (table.getAttribute("interlaced") === "enabled")this.fireEvent("interlacetable", table);
	        }
	    };
	    UE.commands["deleterow"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this);
	            return tableItems.cell ? 0 : -1;
	        },
	        execCommand: function () {
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell),
	                cellsRange = ut.cellsRange,
	                cellInfo = ut.getCellInfo(cell),
	                preCell = ut.getVSideCell(cell),
	                nextCell = ut.getVSideCell(cell, true),
	                rng = this.selection.getRange();
	            if (utils.isEmptyObject(cellsRange)) {
	                ut.deleteRow(cellInfo.rowIndex);
	            } else {
	                for (var i = cellsRange.beginRowIndex; i < cellsRange.endRowIndex + 1; i++) {
	                    ut.deleteRow(cellsRange.beginRowIndex);
	                }
	            }
	            var table = ut.table;
	            if (!table.getElementsByTagName('td').length) {
	                var nextSibling = table.nextSibling;
	                domUtils.remove(table);
	                if (nextSibling) {
	                    rng.setStart(nextSibling, 0).setCursor(false, true);
	                }
	            } else {
	                if (cellInfo.rowSpan == 1 || cellInfo.rowSpan == cellsRange.endRowIndex - cellsRange.beginRowIndex + 1) {
	                    if (nextCell || preCell) rng.selectNodeContents(nextCell || preCell).setCursor(false, true);
	                } else {
	                    var newCell = ut.getCell(cellInfo.rowIndex, ut.indexTable[cellInfo.rowIndex][cellInfo.colIndex].cellIndex);
	                    if (newCell) rng.selectNodeContents(newCell).setCursor(false, true);
	                }
	            }
	            if (table.getAttribute("interlaced") === "enabled")this.fireEvent("interlacetable", table);
	        }
	    };
	    UE.commands["insertcol"] = {
	        queryCommandState: function (cmd) {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            return cell && (cell.tagName == "TD" || (cell.tagName == 'TH' && cell !== tableItems.tr.cells[0])) &&
	                getUETable(tableItems.table).colsNum < this.options.maxColNum ? 0 : -1;
	        },
	        execCommand: function (cmd) {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            if (this.queryCommandState(cmd) == -1)return;
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell),
	                cellInfo = ut.getCellInfo(cell);

	            //ut.insertCol(!ut.selectedTds.length ? cellInfo.colIndex:ut.cellsRange.beginColIndex);
	            if (!ut.selectedTds.length) {
	                ut.insertCol(cellInfo.colIndex, cell);
	            } else {
	                var range = ut.cellsRange;
	                for (var i = 0, len = range.endColIndex - range.beginColIndex + 1; i < len; i++) {
	                    ut.insertCol(range.beginColIndex, cell);
	                }
	            }
	            rng.moveToBookmark(bk).select(true);
	        }
	    };
	    UE.commands["insertcolnext"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            return cell && getUETable(tableItems.table).colsNum < this.options.maxColNum ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell),
	                cellInfo = ut.getCellInfo(cell);
	            //ut.insertCol(!ut.selectedTds.length ? cellInfo.colIndex + cellInfo.colSpan:ut.cellsRange.endColIndex +1);
	            if (!ut.selectedTds.length) {
	                ut.insertCol(cellInfo.colIndex + cellInfo.colSpan, cell);
	            } else {
	                var range = ut.cellsRange;
	                for (var i = 0, len = range.endColIndex - range.beginColIndex + 1; i < len; i++) {
	                    ut.insertCol(range.endColIndex + 1, cell);
	                }
	            }
	            rng.moveToBookmark(bk).select();
	        }
	    };

	    UE.commands["deletecol"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this);
	            return tableItems.cell ? 0 : -1;
	        },
	        execCommand: function () {
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell),
	                range = ut.cellsRange,
	                cellInfo = ut.getCellInfo(cell),
	                preCell = ut.getHSideCell(cell),
	                nextCell = ut.getHSideCell(cell, true);
	            if (utils.isEmptyObject(range)) {
	                ut.deleteCol(cellInfo.colIndex);
	            } else {
	                for (var i = range.beginColIndex; i < range.endColIndex + 1; i++) {
	                    ut.deleteCol(range.beginColIndex);
	                }
	            }
	            var table = ut.table,
	                rng = this.selection.getRange();

	            if (!table.getElementsByTagName('td').length) {
	                var nextSibling = table.nextSibling;
	                domUtils.remove(table);
	                if (nextSibling) {
	                    rng.setStart(nextSibling, 0).setCursor(false, true);
	                }
	            } else {
	                if (domUtils.inDoc(cell, this.document)) {
	                    rng.setStart(cell, 0).setCursor(false, true);
	                } else {
	                    if (nextCell && domUtils.inDoc(nextCell, this.document)) {
	                        rng.selectNodeContents(nextCell).setCursor(false, true);
	                    } else {
	                        if (preCell && domUtils.inDoc(preCell, this.document)) {
	                            rng.selectNodeContents(preCell).setCursor(true, true);
	                        }
	                    }
	                }
	            }
	        }
	    };
	    UE.commands["splittocells"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            if (!cell) return -1;
	            var ut = getUETable(tableItems.table);
	            if (ut.selectedTds.length > 0) return -1;
	            return cell && (cell.colSpan > 1 || cell.rowSpan > 1) ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell);
	            ut.splitToCells(cell);
	            rng.moveToBookmark(bk).select();
	        }
	    };
	    UE.commands["splittorows"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            if (!cell) return -1;
	            var ut = getUETable(tableItems.table);
	            if (ut.selectedTds.length > 0) return -1;
	            return cell && cell.rowSpan > 1 ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell);
	            ut.splitToRows(cell);
	            rng.moveToBookmark(bk).select();
	        }
	    };
	    UE.commands["splittocols"] = {
	        queryCommandState: function () {
	            var tableItems = getTableItemsByRange(this),
	                cell = tableItems.cell;
	            if (!cell) return -1;
	            var ut = getUETable(tableItems.table);
	            if (ut.selectedTds.length > 0) return -1;
	            return cell && cell.colSpan > 1 ? 0 : -1;
	        },
	        execCommand: function () {
	            var rng = this.selection.getRange(),
	                bk = rng.createBookmark(true);
	            var cell = getTableItemsByRange(this).cell,
	                ut = getUETable(cell);
	            ut.splitToCols(cell);
	            rng.moveToBookmark(bk).select();

	        }
	    };

	    UE.commands["adaptbytext"] =
	        UE.commands["adaptbywindow"] = {
	            queryCommandState: function () {
	                return getTableItemsByRange(this).table ? 0 : -1
	            },
	            execCommand: function (cmd) {
	                var tableItems = getTableItemsByRange(this),
	                    table = tableItems.table;
	                if (table) {
	                    if (cmd == 'adaptbywindow') {
	                        resetTdWidth(table, this);
	                    } else {
	                        var cells = domUtils.getElementsByTagName(table, "td th");
	                        utils.each(cells, function (cell) {
	                            cell.removeAttribute("width");
	                        });
	                        table.removeAttribute("width");
	                    }
	                }
	            }
	        };

	    //平均分配各列
	    UE.commands['averagedistributecol'] = {
	        queryCommandState: function () {
	            var ut = getUETableBySelected(this);
	            if (!ut) return -1;
	            return ut.isFullRow() || ut.isFullCol() ? 0 : -1;
	        },
	        execCommand: function (cmd) {
	            var me = this,
	                ut = getUETableBySelected(me);

	            function getAverageWidth() {
	                var tb = ut.table,
	                    averageWidth, sumWidth = 0, colsNum = 0,
	                    tbAttr = getDefaultValue(me, tb);

	                if (ut.isFullRow()) {
	                    sumWidth = tb.offsetWidth;
	                    colsNum = ut.colsNum;
	                } else {
	                    var begin = ut.cellsRange.beginColIndex,
	                        end = ut.cellsRange.endColIndex,
	                        node;
	                    for (var i = begin; i <= end;) {
	                        node = ut.selectedTds[i];
	                        sumWidth += node.offsetWidth;
	                        i += node.colSpan;
	                        colsNum += 1;
	                    }
	                }
	                averageWidth = Math.ceil(sumWidth / colsNum) - tbAttr.tdBorder * 2 - tbAttr.tdPadding * 2;
	                return averageWidth;
	            }

	            function setAverageWidth(averageWidth) {
	                utils.each(domUtils.getElementsByTagName(ut.table, "th"), function (node) {
	                    node.setAttribute("width", "");
	                });
	                var cells = ut.isFullRow() ? domUtils.getElementsByTagName(ut.table, "td") : ut.selectedTds;

	                utils.each(cells, function (node) {
	                    if (node.colSpan == 1) {
	                        node.setAttribute("width", averageWidth);
	                    }
	                });
	            }

	            if (ut && ut.selectedTds.length) {
	                setAverageWidth(getAverageWidth());
	            }
	        }
	    };
	    //平均分配各行
	    UE.commands['averagedistributerow'] = {
	        queryCommandState: function () {
	            var ut = getUETableBySelected(this);
	            if (!ut) return -1;
	            if (ut.selectedTds && /th/ig.test(ut.selectedTds[0].tagName)) return -1;
	            return ut.isFullRow() || ut.isFullCol() ? 0 : -1;
	        },
	        execCommand: function (cmd) {
	            var me = this,
	                ut = getUETableBySelected(me);

	            function getAverageHeight() {
	                var averageHeight, rowNum, sumHeight = 0,
	                    tb = ut.table,
	                    tbAttr = getDefaultValue(me, tb),
	                    tdpadding = parseInt(domUtils.getComputedStyle(tb.getElementsByTagName('td')[0], "padding-top"));

	                if (ut.isFullCol()) {
	                    var captionArr = domUtils.getElementsByTagName(tb, "caption"),
	                        thArr = domUtils.getElementsByTagName(tb, "th"),
	                        captionHeight, thHeight;

	                    if (captionArr.length > 0) {
	                        captionHeight = captionArr[0].offsetHeight;
	                    }
	                    if (thArr.length > 0) {
	                        thHeight = thArr[0].offsetHeight;
	                    }

	                    sumHeight = tb.offsetHeight - (captionHeight || 0) - (thHeight || 0);
	                    rowNum = thArr.length == 0 ? ut.rowsNum : (ut.rowsNum - 1);
	                } else {
	                    var begin = ut.cellsRange.beginRowIndex,
	                        end = ut.cellsRange.endRowIndex,
	                        count = 0,
	                        trs = domUtils.getElementsByTagName(tb, "tr");
	                    for (var i = begin; i <= end; i++) {
	                        sumHeight += trs[i].offsetHeight;
	                        count += 1;
	                    }
	                    rowNum = count;
	                }
	                //ie8下是混杂模式
	                if (browser.ie && browser.version < 9) {
	                    averageHeight = Math.ceil(sumHeight / rowNum);
	                } else {
	                    averageHeight = Math.ceil(sumHeight / rowNum) - tbAttr.tdBorder * 2 - tdpadding * 2;
	                }
	                return averageHeight;
	            }

	            function setAverageHeight(averageHeight) {
	                var cells = ut.isFullCol() ? domUtils.getElementsByTagName(ut.table, "td") : ut.selectedTds;
	                utils.each(cells, function (node) {
	                    if (node.rowSpan == 1) {
	                        node.setAttribute("height", averageHeight);
	                    }
	                });
	            }

	            if (ut && ut.selectedTds.length) {
	                setAverageHeight(getAverageHeight());
	            }
	        }
	    };

	    //单元格对齐方式
	    UE.commands['cellalignment'] = {
	        queryCommandState: function () {
	            return getTableItemsByRange(this).table ? 0 : -1
	        },
	        execCommand: function (cmd, data) {
	            var me = this,
	                ut = getUETableBySelected(me);

	            if (!ut) {
	                var start = me.selection.getStart(),
	                    cell = start && domUtils.findParentByTagName(start, ["td", "th", "caption"], true);
	                if (!/caption/ig.test(cell.tagName)) {
	                    domUtils.setAttributes(cell, data);
	                } else {
	                    cell.style.textAlign = data.align;
	                    cell.style.verticalAlign = data.vAlign;
	                }
	                me.selection.getRange().setCursor(true);
	            } else {
	                utils.each(ut.selectedTds, function (cell) {
	                    domUtils.setAttributes(cell, data);
	                });
	            }
	        },
	        /**
	         * 查询当前点击的单元格的对齐状态， 如果当前已经选择了多个单元格， 则会返回所有单元格经过统一协调过后的状态
	         * @see UE.UETable.getTableCellAlignState
	         */
	        queryCommandValue: function (cmd) {

	            var activeMenuCell = getTableItemsByRange( this).cell;

	            if( !activeMenuCell ) {
	                activeMenuCell = getSelectedArr(this)[0];
	            }

	            if (!activeMenuCell) {

	                return null;

	            } else {

	                //获取同时选中的其他单元格
	                var cells = UE.UETable.getUETable(activeMenuCell).selectedTds;

	                !cells.length && ( cells = activeMenuCell );

	                return UE.UETable.getTableCellAlignState(cells);

	            }

	        }
	    };
	    //表格对齐方式
	    UE.commands['tablealignment'] = {
	        queryCommandState: function () {
	            if (browser.ie && browser.version < 8) {
	                return -1;
	            }
	            return getTableItemsByRange(this).table ? 0 : -1
	        },
	        execCommand: function (cmd, value) {
	            var me = this,
	                start = me.selection.getStart(),
	                table = start && domUtils.findParentByTagName(start, ["table"], true);

	            if (table) {
	                table.setAttribute("align",value);
	            }
	        }
	    };

	    //表格属性
	    UE.commands['edittable'] = {
	        queryCommandState: function () {
	            return getTableItemsByRange(this).table ? 0 : -1
	        },
	        execCommand: function (cmd, color) {
	            var rng = this.selection.getRange(),
	                table = domUtils.findParentByTagName(rng.startContainer, 'table');
	            if (table) {
	                var arr = domUtils.getElementsByTagName(table, "td").concat(
	                    domUtils.getElementsByTagName(table, "th"),
	                    domUtils.getElementsByTagName(table, "caption")
	                );
	                utils.each(arr, function (node) {
	                    node.style.borderColor = color;
	                });
	            }
	        }
	    };
	    //单元格属性
	    UE.commands['edittd'] = {
	        queryCommandState: function () {
	            return getTableItemsByRange(this).table ? 0 : -1
	        },
	        execCommand: function (cmd, bkColor) {
	            var me = this,
	                ut = getUETableBySelected(me);

	            if (!ut) {
	                var start = me.selection.getStart(),
	                    cell = start && domUtils.findParentByTagName(start, ["td", "th", "caption"], true);
	                if (cell) {
	                    cell.style.backgroundColor = bkColor;
	                }
	            } else {
	                utils.each(ut.selectedTds, function (cell) {
	                    cell.style.backgroundColor = bkColor;
	                });
	            }
	        }
	    };

	    UE.commands["settablebackground"] = {
	        queryCommandState: function () {
	            return getSelectedArr(this).length > 1 ? 0 : -1;
	        },
	        execCommand: function (cmd, value) {
	            var cells, ut;
	            cells = getSelectedArr(this);
	            ut = getUETable(cells[0]);
	            ut.setBackground(cells, value);
	        }
	    };

	    UE.commands["cleartablebackground"] = {
	        queryCommandState: function () {
	            var cells = getSelectedArr(this);
	            if (!cells.length)return -1;
	            for (var i = 0, cell; cell = cells[i++];) {
	                if (cell.style.backgroundColor !== "") return 0;
	            }
	            return -1;
	        },
	        execCommand: function () {
	            var cells = getSelectedArr(this),
	                ut = getUETable(cells[0]);
	            ut.removeBackground(cells);
	        }
	    };

	    UE.commands["interlacetable"] = UE.commands["uninterlacetable"] = {
	        queryCommandState: function (cmd) {
	            var table = getTableItemsByRange(this).table;
	            if (!table) return -1;
	            var interlaced = table.getAttribute("interlaced");
	            if (cmd == "interlacetable") {
	                //TODO 待定
	                //是否需要待定，如果设置，则命令只能单次执行成功，但反射具备toggle效果；否则可以覆盖前次命令，但反射将不存在toggle效果
	                return (interlaced === "enabled") ? -1 : 0;
	            } else {
	                return (!interlaced || interlaced === "disabled") ? -1 : 0;
	            }
	        },
	        execCommand: function (cmd, classList) {
	            var table = getTableItemsByRange(this).table;
	            if (cmd == "interlacetable") {
	                table.setAttribute("interlaced", "enabled");
	                this.fireEvent("interlacetable", table, classList);
	            } else {
	                table.setAttribute("interlaced", "disabled");
	                this.fireEvent("uninterlacetable", table);
	            }
	        }
	    };
	    UE.commands["setbordervisible"] = {
	        queryCommandState: function (cmd) {
	            var table = getTableItemsByRange(this).table;
	            if (!table) return -1;
	            return 0;
	        },
	        execCommand: function () {
	            var table = getTableItemsByRange(this).table;
	            utils.each(domUtils.getElementsByTagName(table,'td'),function(td){
	                td.style.borderWidth = '1px';
	                td.style.borderStyle = 'solid';
	            })
	        }
	    };
	    function resetTdWidth(table, editor) {
	        var tds = domUtils.getElementsByTagName(table,'td th');
	        utils.each(tds, function (td) {
	            td.removeAttribute("width");
	        });
	        table.setAttribute('width', getTableWidth(editor, true, getDefaultValue(editor, table)));
	        var tdsWidths = [];
	        setTimeout(function () {
	            utils.each(tds, function (td) {
	                (td.colSpan == 1) && tdsWidths.push(td.offsetWidth)
	            })
	            utils.each(tds, function (td,i) {
	                (td.colSpan == 1) && td.setAttribute("width", tdsWidths[i] + "");
	            })
	        }, 0);
	    }

	    function getTableWidth(editor, needIEHack, defaultValue) {
	        var body = editor.body;
	        return body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (editor.options.offsetWidth || 0);
	    }

	    function getSelectedArr(editor) {
	        var cell = getTableItemsByRange(editor).cell;
	        if (cell) {
	            var ut = getUETable(cell);
	            return ut.selectedTds.length ? ut.selectedTds : [cell];
	        } else {
	            return [];
	        }
	    }
	})();


	// plugins/table.action.js
	/**
	 * Created with JetBrains PhpStorm.
	 * User: taoqili
	 * Date: 12-10-12
	 * Time: 上午10:05
	 * To change this template use File | Settings | File Templates.
	 */
	UE.plugins['table'] = function () {
	    var me = this,
	        tabTimer = null,
	        //拖动计时器
	        tableDragTimer = null,
	        //双击计时器
	        tableResizeTimer = null,
	        //单元格最小宽度
	        cellMinWidth = 5,
	        isInResizeBuffer = false,
	        //单元格边框大小
	        cellBorderWidth = 5,
	        //鼠标偏移距离
	        offsetOfTableCell = 10,
	        //记录在有限时间内的点击状态， 共有3个取值， 0, 1, 2。 0代表未初始化， 1代表单击了1次，2代表2次
	        singleClickState = 0,
	        userActionStatus = null,
	        //双击允许的时间范围
	        dblclickTime = 360,
	        UT = UE.UETable,
	        getUETable = function (tdOrTable) {
	            return UT.getUETable(tdOrTable);
	        },
	        getUETableBySelected = function (editor) {
	            return UT.getUETableBySelected(editor);
	        },
	        getDefaultValue = function (editor, table) {
	            return UT.getDefaultValue(editor, table);
	        },
	        removeSelectedClass = function (cells) {
	            return UT.removeSelectedClass(cells);
	        };

	    function showError(e) {
//	        throw e;
	    }
	    me.ready(function(){
	        var me = this;
	        var orgGetText = me.selection.getText;
	        me.selection.getText = function(){
	            var table = getUETableBySelected(me);
	            if(table){
	                var str = '';
	                utils.each(table.selectedTds,function(td){
	                    str += td[browser.ie?'innerText':'textContent'];
	                })
	                return str;
	            }else{
	                return orgGetText.call(me.selection)
	            }

	        }
	    })

	    //处理拖动及框选相关方法
	    var startTd = null, //鼠标按下时的锚点td
	        currentTd = null, //当前鼠标经过时的td
	        onDrag = "", //指示当前拖动状态，其值可为"","h","v" ,分别表示未拖动状态，横向拖动状态，纵向拖动状态，用于鼠标移动过程中的判断
	        onBorder = false, //检测鼠标按下时是否处在单元格边缘位置
	        dragButton = null,
	        dragOver = false,
	        dragLine = null, //模拟的拖动线
	        dragTd = null;    //发生拖动的目标td

	    var mousedown = false,
	    //todo 判断混乱模式
	        needIEHack = true;

	    me.setOpt({
	        'maxColNum':20,
	        'maxRowNum':100,
	        'defaultCols':5,
	        'defaultRows':5,
	        'tdvalign':'top',
	        'cursorpath':me.options.UEDITOR_HOME_URL + "themes/default/images/cursor_",
	        'tableDragable':false,
	        'classList':["ue-table-interlace-color-single","ue-table-interlace-color-double"]
	    });
	    me.getUETable = getUETable;
	    var commands = {
	        'deletetable':1,
	        'inserttable':1,
	        'cellvalign':1,
	        'insertcaption':1,
	        'deletecaption':1,
	        'inserttitle':1,
	        'deletetitle':1,
	        "mergeright":1,
	        "mergedown":1,
	        "mergecells":1,
	        "insertrow":1,
	        "insertrownext":1,
	        "deleterow":1,
	        "insertcol":1,
	        "insertcolnext":1,
	        "deletecol":1,
	        "splittocells":1,
	        "splittorows":1,
	        "splittocols":1,
	        "adaptbytext":1,
	        "adaptbywindow":1,
	        "adaptbycustomer":1,
	        "insertparagraph":1,
	        "insertparagraphbeforetable":1,
	        "averagedistributecol":1,
	        "averagedistributerow":1
	    };
	    me.ready(function () {
	        utils.cssRule('table',
	            //选中的td上的样式
	            '.selectTdClass{background-color:#edf5fa !important}' +
	                'table.noBorderTable td,table.noBorderTable th,table.noBorderTable caption{border:1px dashed #ddd !important}' +
	                //插入的表格的默认样式
	                'table{margin-bottom:10px;border-collapse:collapse;display:table;}' +
	                'td,th{padding: 5px 10px;border: 1px solid #DDD;}' +
	                'caption{border:1px dashed #DDD;border-bottom:0;padding:3px;text-align:center;}' +
	                'th{border-top:1px solid #BBB;background-color:#F7F7F7;}' +
	                'table tr.firstRow th{border-top-width:2px;}' +
	                '.ue-table-interlace-color-single{ background-color: #fcfcfc; } .ue-table-interlace-color-double{ background-color: #f7faff; }' +
	                'td p{margin:0;padding:0;}', me.document);

	        var tableCopyList, isFullCol, isFullRow;
	        //注册del/backspace事件
	        me.addListener('keydown', function (cmd, evt) {
	            var me = this;
	            var keyCode = evt.keyCode || evt.which;

	            if (keyCode == 8) {

	                var ut = getUETableBySelected(me);
	                if (ut && ut.selectedTds.length) {

	                    if (ut.isFullCol()) {
	                        me.execCommand('deletecol')
	                    } else if (ut.isFullRow()) {
	                        me.execCommand('deleterow')
	                    } else {
	                        me.fireEvent('delcells');
	                    }
	                    domUtils.preventDefault(evt);
	                }

	                var caption = domUtils.findParentByTagName(me.selection.getStart(), 'caption', true),
	                    range = me.selection.getRange();
	                if (range.collapsed && caption && isEmptyBlock(caption)) {
	                    me.fireEvent('saveScene');
	                    var table = caption.parentNode;
	                    domUtils.remove(caption);
	                    if (table) {
	                        range.setStart(table.rows[0].cells[0], 0).setCursor(false, true);
	                    }
	                    me.fireEvent('saveScene');
	                }

	            }

	            if (keyCode == 46) {

	                ut = getUETableBySelected(me);
	                if (ut) {
	                    me.fireEvent('saveScene');
	                    for (var i = 0, ci; ci = ut.selectedTds[i++];) {
	                        domUtils.fillNode(me.document, ci)
	                    }
	                    me.fireEvent('saveScene');
	                    domUtils.preventDefault(evt);

	                }

	            }
	            if (keyCode == 13) {

	                var rng = me.selection.getRange(),
	                    caption = domUtils.findParentByTagName(rng.startContainer, 'caption', true);
	                if (caption) {
	                    var table = domUtils.findParentByTagName(caption, 'table');
	                    if (!rng.collapsed) {

	                        rng.deleteContents();
	                        me.fireEvent('saveScene');
	                    } else {
	                        if (caption) {
	                            rng.setStart(table.rows[0].cells[0], 0).setCursor(false, true);
	                        }
	                    }
	                    domUtils.preventDefault(evt);
	                    return;
	                }
	                if (rng.collapsed) {
	                    var table = domUtils.findParentByTagName(rng.startContainer, 'table');
	                    if (table) {
	                        var cell = table.rows[0].cells[0],
	                            start = domUtils.findParentByTagName(me.selection.getStart(), ['td', 'th'], true),
	                            preNode = table.previousSibling;
	                        if (cell === start && (!preNode || preNode.nodeType == 1 && preNode.tagName == 'TABLE' ) && domUtils.isStartInblock(rng)) {
	                            var first = domUtils.findParent(me.selection.getStart(), function(n){return domUtils.isBlockElm(n)}, true);
	                            if(first && ( /t(h|d)/i.test(first.tagName) || first ===  start.firstChild )){
	                                me.execCommand('insertparagraphbeforetable');
	                                domUtils.preventDefault(evt);
	                            }

	                        }
	                    }
	                }
	            }

	            if ((evt.ctrlKey || evt.metaKey) && evt.keyCode == '67') {
	                tableCopyList = null;
	                var ut = getUETableBySelected(me);
	                if (ut) {
	                    var tds = ut.selectedTds;
	                    isFullCol = ut.isFullCol();
	                    isFullRow = ut.isFullRow();
	                    tableCopyList = [
	                        [ut.cloneCell(tds[0],null,true)]
	                    ];
	                    for (var i = 1, ci; ci = tds[i]; i++) {
	                        if (ci.parentNode !== tds[i - 1].parentNode) {
	                            tableCopyList.push([ut.cloneCell(ci,null,true)]);
	                        } else {
	                            tableCopyList[tableCopyList.length - 1].push(ut.cloneCell(ci,null,true));
	                        }

	                    }
	                }
	            }
	        });
	        me.addListener("tablehasdeleted",function(){
	            toggleDraggableState(this, false, "", null);
	            if (dragButton)domUtils.remove(dragButton);
	        });

	        me.addListener('beforepaste', function (cmd, html) {
	            var me = this;
	            var rng = me.selection.getRange();
	            if (domUtils.findParentByTagName(rng.startContainer, 'caption', true)) {
	                var div = me.document.createElement("div");
	                div.innerHTML = html.html;
	                //trace:3729
	                html.html = div[browser.ie9below ? 'innerText' : 'textContent'];
	                return;
	            }
	            var table = getUETableBySelected(me);
	            if (tableCopyList) {
	                me.fireEvent('saveScene');
	                var rng = me.selection.getRange();
	                var td = domUtils.findParentByTagName(rng.startContainer, ['td', 'th'], true), tmpNode, preNode;
	                if (td) {
	                    var ut = getUETable(td);
	                    if (isFullRow) {
	                        var rowIndex = ut.getCellInfo(td).rowIndex;
	                        if (td.tagName == 'TH') {
	                            rowIndex++;
	                        }
	                        for (var i = 0, ci; ci = tableCopyList[i++];) {
	                            var tr = ut.insertRow(rowIndex++, "td");
	                            for (var j = 0, cj; cj = ci[j]; j++) {
	                                var cell = tr.cells[j];
	                                if (!cell) {
	                                    cell = tr.insertCell(j)
	                                }
	                                cell.innerHTML = cj.innerHTML;
	                                cj.getAttribute('width') && cell.setAttribute('width', cj.getAttribute('width'));
	                                cj.getAttribute('vAlign') && cell.setAttribute('vAlign', cj.getAttribute('vAlign'));
	                                cj.getAttribute('align') && cell.setAttribute('align', cj.getAttribute('align'));
	                                cj.style.cssText && (cell.style.cssText = cj.style.cssText)
	                            }
	                            for (var j = 0, cj; cj = tr.cells[j]; j++) {
	                                if (!ci[j])
	                                    break;
	                                cj.innerHTML = ci[j].innerHTML;
	                                ci[j].getAttribute('width') && cj.setAttribute('width', ci[j].getAttribute('width'));
	                                ci[j].getAttribute('vAlign') && cj.setAttribute('vAlign', ci[j].getAttribute('vAlign'));
	                                ci[j].getAttribute('align') && cj.setAttribute('align', ci[j].getAttribute('align'));
	                                ci[j].style.cssText && (cj.style.cssText = ci[j].style.cssText)
	                            }
	                        }
	                    } else {
	                        if (isFullCol) {
	                            cellInfo = ut.getCellInfo(td);
	                            var maxColNum = 0;
	                            for (var j = 0, ci = tableCopyList[0], cj; cj = ci[j++];) {
	                                maxColNum += cj.colSpan || 1;
	                            }
	                            me.__hasEnterExecCommand = true;
	                            for (i = 0; i < maxColNum; i++) {
	                                me.execCommand('insertcol');
	                            }
	                            me.__hasEnterExecCommand = false;
	                            td = ut.table.rows[0].cells[cellInfo.cellIndex];
	                            if (td.tagName == 'TH') {
	                                td = ut.table.rows[1].cells[cellInfo.cellIndex];
	                            }
	                        }
	                        for (var i = 0, ci; ci = tableCopyList[i++];) {
	                            tmpNode = td;
	                            for (var j = 0, cj; cj = ci[j++];) {
	                                if (td) {
	                                    td.innerHTML = cj.innerHTML;
	                                    //todo 定制处理
	                                    cj.getAttribute('width') && td.setAttribute('width', cj.getAttribute('width'));
	                                    cj.getAttribute('vAlign') && td.setAttribute('vAlign', cj.getAttribute('vAlign'));
	                                    cj.getAttribute('align') && td.setAttribute('align', cj.getAttribute('align'));
	                                    cj.style.cssText && (td.style.cssText = cj.style.cssText);
	                                    preNode = td;
	                                    td = td.nextSibling;
	                                } else {
	                                    var cloneTd = cj.cloneNode(true);
	                                    domUtils.removeAttributes(cloneTd, ['class', 'rowSpan', 'colSpan']);

	                                    preNode.parentNode.appendChild(cloneTd)
	                                }
	                            }
	                            td = ut.getNextCell(tmpNode, true, true);
	                            if (!tableCopyList[i])
	                                break;
	                            if (!td) {
	                                var cellInfo = ut.getCellInfo(tmpNode);
	                                ut.table.insertRow(ut.table.rows.length);
	                                ut.update();
	                                td = ut.getVSideCell(tmpNode, true);
	                            }
	                        }
	                    }
	                    ut.update();
	                } else {
	                    table = me.document.createElement('table');
	                    for (var i = 0, ci; ci = tableCopyList[i++];) {
	                        var tr = table.insertRow(table.rows.length);
	                        for (var j = 0, cj; cj = ci[j++];) {
	                            cloneTd = UT.cloneCell(cj,null,true);
	                            domUtils.removeAttributes(cloneTd, ['class']);
	                            tr.appendChild(cloneTd)
	                        }
	                        if (j == 2 && cloneTd.rowSpan > 1) {
	                            cloneTd.rowSpan = 1;
	                        }
	                    }

	                    var defaultValue = getDefaultValue(me),
	                        width = me.body.offsetWidth -
	                            (needIEHack ? parseInt(domUtils.getComputedStyle(me.body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (me.options.offsetWidth || 0);
	                    me.execCommand('insertHTML', '<table  ' +
	                        ( isFullCol && isFullRow ? 'width="' + width + '"' : '') +
	                        '>' + table.innerHTML.replace(/>\s*</g, '><').replace(/\bth\b/gi, "td") + '</table>')
	                }
	                me.fireEvent('contentchange');
	                me.fireEvent('saveScene');
	                html.html = '';
	                return true;
	            } else {
	                var div = me.document.createElement("div"), tables;
	                div.innerHTML = html.html;
	                tables = div.getElementsByTagName("table");
	                if (domUtils.findParentByTagName(me.selection.getStart(), 'table')) {
	                    utils.each(tables, function (t) {
	                        domUtils.remove(t)
	                    });
	                    if (domUtils.findParentByTagName(me.selection.getStart(), 'caption', true)) {
	                        div.innerHTML = div[browser.ie ? 'innerText' : 'textContent'];
	                    }
	                } else {
	                    utils.each(tables, function (table) {
	                        removeStyleSize(table, true);
	                        domUtils.removeAttributes(table, ['style', 'border']);
	                        utils.each(domUtils.getElementsByTagName(table, "td"), function (td) {
	                            if (isEmptyBlock(td)) {
	                                domUtils.fillNode(me.document, td);
	                            }
	                            removeStyleSize(td, true);
//	                            domUtils.removeAttributes(td, ['style'])
	                        });
	                    });
	                }
	                html.html = div.innerHTML;
	            }
	        });

	        me.addListener('afterpaste', function () {
	            utils.each(domUtils.getElementsByTagName(me.body, "table"), function (table) {
	                if (table.offsetWidth > me.body.offsetWidth) {
	                    var defaultValue = getDefaultValue(me, table);
	                    table.style.width = me.body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(me.body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (me.options.offsetWidth || 0) + 'px'
	                }
	            })
	        });
	        me.addListener('blur', function () {
	            tableCopyList = null;
	        });
	        var timer;
	        me.addListener('keydown', function () {
	            clearTimeout(timer);
	            timer = setTimeout(function () {
	                var rng = me.selection.getRange(),
	                    cell = domUtils.findParentByTagName(rng.startContainer, ['th', 'td'], true);
	                if (cell) {
	                    var table = cell.parentNode.parentNode.parentNode;
	                    if (table.offsetWidth > table.getAttribute("width")) {
	                        cell.style.wordBreak = "break-all";
	                    }
	                }

	            }, 100);
	        });
	        me.addListener("selectionchange", function () {
	            toggleDraggableState(me, false, "", null);
	        });


	        //内容变化时触发索引更新
	        //todo 可否考虑标记检测，如果不涉及表格的变化就不进行索引重建和更新
	        me.addListener("contentchange", function () {
	            var me = this;
	            //尽可能排除一些不需要更新的状况
	            hideDragLine(me);
	            if (getUETableBySelected(me))return;
	            var rng = me.selection.getRange();
	            var start = rng.startContainer;
	            start = domUtils.findParentByTagName(start, ['td', 'th'], true);
	            utils.each(domUtils.getElementsByTagName(me.document, 'table'), function (table) {
	                if (me.fireEvent("excludetable", table) === true) return;
	                table.ueTable = new UT(table);
	                //trace:3742
//	                utils.each(domUtils.getElementsByTagName(me.document, 'td'), function (td) {
	//
//	                    if (domUtils.isEmptyBlock(td) && td !== start) {
//	                        domUtils.fillNode(me.document, td);
//	                        if (browser.ie && browser.version == 6) {
//	                            td.innerHTML = '&nbsp;'
//	                        }
//	                    }
//	                });
//	                utils.each(domUtils.getElementsByTagName(me.document, 'th'), function (th) {
//	                    if (domUtils.isEmptyBlock(th) && th !== start) {
//	                        domUtils.fillNode(me.document, th);
//	                        if (browser.ie && browser.version == 6) {
//	                            th.innerHTML = '&nbsp;'
//	                        }
//	                    }
//	                });
	                table.onmouseover = function () {
	                    me.fireEvent('tablemouseover', table);
	                };
	                table.onmousemove = function () {
	                    me.fireEvent('tablemousemove', table);
	                    me.options.tableDragable && toggleDragButton(true, this, me);
	                    utils.defer(function(){
	                        me.fireEvent('contentchange',50)
	                    },true)
	                };
	                table.onmouseout = function () {
	                    me.fireEvent('tablemouseout', table);
	                    toggleDraggableState(me, false, "", null);
	                    hideDragLine(me);
	                };
	                table.onclick = function (evt) {
	                    evt = me.window.event || evt;
	                    var target = getParentTdOrTh(evt.target || evt.srcElement);
	                    if (!target)return;
	                    var ut = getUETable(target),
	                        table = ut.table,
	                        cellInfo = ut.getCellInfo(target),
	                        cellsRange,
	                        rng = me.selection.getRange();
//	                    if ("topLeft" == inPosition(table, mouseCoords(evt))) {
//	                        cellsRange = ut.getCellsRange(ut.table.rows[0].cells[0], ut.getLastCell());
//	                        ut.setSelected(cellsRange);
//	                        return;
//	                    }
//	                    if ("bottomRight" == inPosition(table, mouseCoords(evt))) {
	//
//	                        return;
//	                    }
	                    if (inTableSide(table, target, evt, true)) {
	                        var endTdCol = ut.getCell(ut.indexTable[ut.rowsNum - 1][cellInfo.colIndex].rowIndex, ut.indexTable[ut.rowsNum - 1][cellInfo.colIndex].cellIndex);
	                        if (evt.shiftKey && ut.selectedTds.length) {
	                            if (ut.selectedTds[0] !== endTdCol) {
	                                cellsRange = ut.getCellsRange(ut.selectedTds[0], endTdCol);
	                                ut.setSelected(cellsRange);
	                            } else {
	                                rng && rng.selectNodeContents(endTdCol).select();
	                            }
	                        } else {
	                            if (target !== endTdCol) {
	                                cellsRange = ut.getCellsRange(target, endTdCol);
	                                ut.setSelected(cellsRange);
	                            } else {
	                                rng && rng.selectNodeContents(endTdCol).select();
	                            }
	                        }
	                        return;
	                    }
	                    if (inTableSide(table, target, evt)) {
	                        var endTdRow = ut.getCell(ut.indexTable[cellInfo.rowIndex][ut.colsNum - 1].rowIndex, ut.indexTable[cellInfo.rowIndex][ut.colsNum - 1].cellIndex);
	                        if (evt.shiftKey && ut.selectedTds.length) {
	                            if (ut.selectedTds[0] !== endTdRow) {
	                                cellsRange = ut.getCellsRange(ut.selectedTds[0], endTdRow);
	                                ut.setSelected(cellsRange);
	                            } else {
	                                rng && rng.selectNodeContents(endTdRow).select();
	                            }
	                        } else {
	                            if (target !== endTdRow) {
	                                cellsRange = ut.getCellsRange(target, endTdRow);
	                                ut.setSelected(cellsRange);
	                            } else {
	                                rng && rng.selectNodeContents(endTdRow).select();
	                            }
	                        }
	                    }
	                };
	            });

	            switchBorderColor(me, true);
	        });

	        domUtils.on(me.document, "mousemove", mouseMoveEvent);

	        domUtils.on(me.document, "mouseout", function (evt) {
	            var target = evt.target || evt.srcElement;
	            if (target.tagName == "TABLE") {
	                toggleDraggableState(me, false, "", null);
	            }
	        });
	        /**
	         * 表格隔行变色
	         */
	        me.addListener("interlacetable",function(type,table,classList){
	            if(!table) return;
	            var me = this,
	                rows = table.rows,
	                len = rows.length,
	                getClass = function(list,index,repeat){
	                    return list[index] ? list[index] : repeat ? list[index % list.length]: "";
	                };
	            for(var i = 0;i<len;i++){
	                rows[i].className = getClass( classList|| me.options.classList,i,true);
	            }
	        });
	        me.addListener("uninterlacetable",function(type,table){
	            if(!table) return;
	            var me = this,
	                rows = table.rows,
	                classList = me.options.classList,
	                len = rows.length;
	            for(var i = 0;i<len;i++){
	                domUtils.removeClasses( rows[i], classList );
	            }
	        });

	        me.addListener("mousedown", mouseDownEvent);
	        me.addListener("mouseup", mouseUpEvent);
	        //拖动的时候触发mouseup
	        domUtils.on( me.body, 'dragstart', function( evt ){
	            mouseUpEvent.call( me, 'dragstart', evt );
	        });
	        me.addOutputRule(function(root){
	            utils.each(root.getNodesByTagName('div'),function(n){
	                if (n.getAttr('id') == 'ue_tableDragLine') {
	                    n.parentNode.removeChild(n);
	                }
	            });
	        });

	        var currentRowIndex = 0;
	        me.addListener("mousedown", function () {
	            currentRowIndex = 0;
	        });
	        me.addListener('tabkeydown', function () {
	            var range = this.selection.getRange(),
	                common = range.getCommonAncestor(true, true),
	                table = domUtils.findParentByTagName(common, 'table');
	            if (table) {
	                if (domUtils.findParentByTagName(common, 'caption', true)) {
	                    var cell = domUtils.getElementsByTagName(table, 'th td');
	                    if (cell && cell.length) {
	                        range.setStart(cell[0], 0).setCursor(false, true)
	                    }
	                } else {
	                    var cell = domUtils.findParentByTagName(common, ['td', 'th'], true),
	                        ua = getUETable(cell);
	                    currentRowIndex = cell.rowSpan > 1 ? currentRowIndex : ua.getCellInfo(cell).rowIndex;
	                    var nextCell = ua.getTabNextCell(cell, currentRowIndex);
	                    if (nextCell) {
	                        if (isEmptyBlock(nextCell)) {
	                            range.setStart(nextCell, 0).setCursor(false, true)
	                        } else {
	                            range.selectNodeContents(nextCell).select()
	                        }
	                    } else {
	                        me.fireEvent('saveScene');
	                        me.__hasEnterExecCommand = true;
	                        this.execCommand('insertrownext');
	                        me.__hasEnterExecCommand = false;
	                        range = this.selection.getRange();
	                        range.setStart(table.rows[table.rows.length - 1].cells[0], 0).setCursor();
	                        me.fireEvent('saveScene');
	                    }
	                }
	                return true;
	            }

	        });
	        browser.ie && me.addListener('selectionchange', function () {
	            toggleDraggableState(this, false, "", null);
	        });
	        me.addListener("keydown", function (type, evt) {
	            var me = this;
	            //处理在表格的最后一个输入tab产生新的表格
	            var keyCode = evt.keyCode || evt.which;
	            if (keyCode == 8 || keyCode == 46) {
	                return;
	            }
	            var notCtrlKey = !evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey;
	            notCtrlKey && removeSelectedClass(domUtils.getElementsByTagName(me.body, "td"));
	            var ut = getUETableBySelected(me);
	            if (!ut) return;
	            notCtrlKey && ut.clearSelected();
	        });

	        me.addListener("beforegetcontent", function () {
	            switchBorderColor(this, false);
	            browser.ie && utils.each(this.document.getElementsByTagName('caption'), function (ci) {
	                if (domUtils.isEmptyNode(ci)) {
	                    ci.innerHTML = '&nbsp;'
	                }
	            });
	        });
	        me.addListener("aftergetcontent", function () {
	            switchBorderColor(this, true);
	        });
	        me.addListener("getAllHtml", function () {
	            removeSelectedClass(me.document.getElementsByTagName("td"));
	        });
	        //修正全屏状态下插入的表格宽度在非全屏状态下撑开编辑器的情况
	        me.addListener("fullscreenchanged", function (type, fullscreen) {
	            if (!fullscreen) {
	                var ratio = this.body.offsetWidth / document.body.offsetWidth,
	                    tables = domUtils.getElementsByTagName(this.body, "table");
	                utils.each(tables, function (table) {
	                    if (table.offsetWidth < me.body.offsetWidth) return false;
	                    var tds = domUtils.getElementsByTagName(table, "td"),
	                        backWidths = [];
	                    utils.each(tds, function (td) {
	                        backWidths.push(td.offsetWidth);
	                    });
	                    for (var i = 0, td; td = tds[i]; i++) {
	                        td.setAttribute("width", Math.floor(backWidths[i] * ratio));
	                    }
	                    table.setAttribute("width", Math.floor(getTableWidth(me, needIEHack, getDefaultValue(me))))
	                });
	            }
	        });

	        //重写execCommand命令，用于处理框选时的处理
	        var oldExecCommand = me.execCommand;
	        me.execCommand = function (cmd, datatat) {

	            var me = this,
	                args = arguments;

	            cmd = cmd.toLowerCase();
	            var ut = getUETableBySelected(me), tds,
	                range = new dom.Range(me.document),
	                cmdFun = me.commands[cmd] || UE.commands[cmd],
	                result;
	            if (!cmdFun) return;
	            if (ut && !commands[cmd] && !cmdFun.notNeedUndo && !me.__hasEnterExecCommand) {
	                me.__hasEnterExecCommand = true;
	                me.fireEvent("beforeexeccommand", cmd);
	                tds = ut.selectedTds;
	                var lastState = -2, lastValue = -2, value, state;
	                for (var i = 0, td; td = tds[i]; i++) {
	                    if (isEmptyBlock(td)) {
	                        range.setStart(td, 0).setCursor(false, true)
	                    } else {
	                        range.selectNode(td).select(true);
	                    }
	                    state = me.queryCommandState(cmd);
	                    value = me.queryCommandValue(cmd);
	                    if (state != -1) {
	                        if (lastState !== state || lastValue !== value) {
	                            me._ignoreContentChange = true;
	                            result = oldExecCommand.apply(me, arguments);
	                            me._ignoreContentChange = false;

	                        }
	                        lastState = me.queryCommandState(cmd);
	                        lastValue = me.queryCommandValue(cmd);
	                        if (domUtils.isEmptyBlock(td)) {
	                            domUtils.fillNode(me.document, td)
	                        }
	                    }
	                }
	                range.setStart(tds[0], 0).shrinkBoundary(true).setCursor(false, true);
	                me.fireEvent('contentchange');
	                me.fireEvent("afterexeccommand", cmd);
	                me.__hasEnterExecCommand = false;
	                me._selectionChange();
	            } else {
	                result = oldExecCommand.apply(me, arguments);
	            }
	            return result;
	        };


	    });
	    /**
	     * 删除obj的宽高style，改成属性宽高
	     * @param obj
	     * @param replaceToProperty
	     */
	    function removeStyleSize(obj, replaceToProperty) {
	        removeStyle(obj, "width", true);
	        removeStyle(obj, "height", true);
	    }

	    function removeStyle(obj, styleName, replaceToProperty) {
	        if (obj.style[styleName]) {
	            replaceToProperty && obj.setAttribute(styleName, parseInt(obj.style[styleName], 10));
	            obj.style[styleName] = "";
	        }
	    }

	    function getParentTdOrTh(ele) {
	        if (ele.tagName == "TD" || ele.tagName == "TH") return ele;
	        var td;
	        if (td = domUtils.findParentByTagName(ele, "td", true) || domUtils.findParentByTagName(ele, "th", true)) return td;
	        return null;
	    }

	    function isEmptyBlock(node) {
	        var reg = new RegExp(domUtils.fillChar, 'g');
	        if (node[browser.ie ? 'innerText' : 'textContent'].replace(/^\s*$/, '').replace(reg, '').length > 0) {
	            return 0;
	        }
	        for (var n in dtd.$isNotEmpty) {
	            if (node.getElementsByTagName(n).length) {
	                return 0;
	            }
	        }
	        return 1;
	    }


	    function mouseCoords(evt) {
	        if (evt.pageX || evt.pageY) {
	            return { x:evt.pageX, y:evt.pageY };
	        }
	        return {
	            x:evt.clientX + me.document.body.scrollLeft - me.document.body.clientLeft,
	            y:evt.clientY + me.document.body.scrollTop - me.document.body.clientTop
	        };
	    }

	    function mouseMoveEvent(evt) {

	        if( isEditorDisabled() ) {
	            return;
	        }

	        try {

	            //普通状态下鼠标移动
	            var target = getParentTdOrTh(evt.target || evt.srcElement),
	                pos;

	            //区分用户的行为是拖动还是双击
	            if( isInResizeBuffer  ) {

	                me.body.style.webkitUserSelect = 'none';

	                if( Math.abs( userActionStatus.x - evt.clientX ) > offsetOfTableCell || Math.abs( userActionStatus.y - evt.clientY ) > offsetOfTableCell ) {
	                    clearTableDragTimer();
	                    isInResizeBuffer = false;
	                    singleClickState = 0;
	                    //drag action
	                    tableBorderDrag(evt);
	                }
	            }

	            //修改单元格大小时的鼠标移动
	            if (onDrag && dragTd) {
	                singleClickState = 0;
	                me.body.style.webkitUserSelect = 'none';
	                me.selection.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
	                pos = mouseCoords(evt);
	                toggleDraggableState(me, true, onDrag, pos, target);
	                if (onDrag == "h") {
	                    dragLine.style.left = getPermissionX(dragTd, evt) + "px";
	                } else if (onDrag == "v") {
	                    dragLine.style.top = getPermissionY(dragTd, evt) + "px";
	                }
	                return;
	            }
	            //当鼠标处于table上时，修改移动过程中的光标状态
	            if (target) {
	                //针对使用table作为容器的组件不触发拖拽效果
	                if (me.fireEvent('excludetable', target) === true)
	                    return;
	                pos = mouseCoords(evt);
	                var state = getRelation(target, pos),
	                    table = domUtils.findParentByTagName(target, "table", true);

	                if (inTableSide(table, target, evt, true)) {
	                    if (me.fireEvent("excludetable", table) === true) return;
	                    me.body.style.cursor = "url(" + me.options.cursorpath + "h.png),pointer";
	                } else if (inTableSide(table, target, evt)) {
	                    if (me.fireEvent("excludetable", table) === true) return;
	                    me.body.style.cursor = "url(" + me.options.cursorpath + "v.png),pointer";
	                } else {
	                    me.body.style.cursor = "text";
	                    var curCell = target;
	                    if (/\d/.test(state)) {
	                        state = state.replace(/\d/, '');
	                        target = getUETable(target).getPreviewCell(target, state == "v");
	                    }
	                    //位于第一行的顶部或者第一列的左边时不可拖动
	                    toggleDraggableState(me, target ? !!state : false, target ? state : '', pos, target);

	                }
	            } else {
	                toggleDragButton(false, table, me);
	            }

	        } catch (e) {
	            showError(e);
	        }
	    }

	    var dragButtonTimer;

	    function toggleDragButton(show, table, editor) {
	        if (!show) {
	            if (dragOver)return;
	            dragButtonTimer = setTimeout(function () {
	                !dragOver && dragButton && dragButton.parentNode && dragButton.parentNode.removeChild(dragButton);
	            }, 2000);
	        } else {
	            createDragButton(table, editor);
	        }
	    }

	    function createDragButton(table, editor) {
	        var pos = domUtils.getXY(table),
	            doc = table.ownerDocument;
	        if (dragButton && dragButton.parentNode)return dragButton;
	        dragButton = doc.createElement("div");
	        dragButton.contentEditable = false;
	        dragButton.innerHTML = "";
	        dragButton.style.cssText = "width:15px;height:15px;background-image:url(" + editor.options.UEDITOR_HOME_URL + "dialogs/table/dragicon.png);position: absolute;cursor:move;top:" + (pos.y - 15) + "px;left:" + (pos.x) + "px;";
	        domUtils.unSelectable(dragButton);
	        dragButton.onmouseover = function (evt) {
	            dragOver = true;
	        };
	        dragButton.onmouseout = function (evt) {
	            dragOver = false;
	        };
	        domUtils.on(dragButton, 'click', function (type, evt) {
	            doClick(evt, this);
	        });
	        domUtils.on(dragButton, 'dblclick', function (type, evt) {
	            doDblClick(evt);
	        });
	        domUtils.on(dragButton, 'dragstart', function (type, evt) {
	            domUtils.preventDefault(evt);
	        });
	        var timer;

	        function doClick(evt, button) {
	            // 部分浏览器下需要清理
	            clearTimeout(timer);
	            timer = setTimeout(function () {
	                editor.fireEvent("tableClicked", table, button);
	            }, 300);
	        }

	        function doDblClick(evt) {
	            clearTimeout(timer);
	            var ut = getUETable(table),
	                start = table.rows[0].cells[0],
	                end = ut.getLastCell(),
	                range = ut.getCellsRange(start, end);
	            editor.selection.getRange().setStart(start, 0).setCursor(false, true);
	            ut.setSelected(range);
	        }

	        doc.body.appendChild(dragButton);
	    }


//	    function inPosition(table, pos) {
//	        var tablePos = domUtils.getXY(table),
//	            width = table.offsetWidth,
//	            height = table.offsetHeight;
//	        if (pos.x - tablePos.x < 5 && pos.y - tablePos.y < 5) {
//	            return "topLeft";
//	        } else if (tablePos.x + width - pos.x < 5 && tablePos.y + height - pos.y < 5) {
//	            return "bottomRight";
//	        }
//	    }

	    function inTableSide(table, cell, evt, top) {
	        var pos = mouseCoords(evt),
	            state = getRelation(cell, pos);

	        if (top) {
	            var caption = table.getElementsByTagName("caption")[0],
	                capHeight = caption ? caption.offsetHeight : 0;
	            return (state == "v1") && ((pos.y - domUtils.getXY(table).y - capHeight) < 8);
	        } else {
	            return (state == "h1") && ((pos.x - domUtils.getXY(table).x) < 8);
	        }
	    }

	    /**
	     * 获取拖动时允许的X轴坐标
	     * @param dragTd
	     * @param evt
	     */
	    function getPermissionX(dragTd, evt) {
	        var ut = getUETable(dragTd);
	        if (ut) {
	            var preTd = ut.getSameEndPosCells(dragTd, "x")[0],
	                nextTd = ut.getSameStartPosXCells(dragTd)[0],
	                mouseX = mouseCoords(evt).x,
	                left = (preTd ? domUtils.getXY(preTd).x : domUtils.getXY(ut.table).x) + 20 ,
	                right = nextTd ? domUtils.getXY(nextTd).x + nextTd.offsetWidth - 20 : (me.body.offsetWidth + 5 || parseInt(domUtils.getComputedStyle(me.body, "width"), 10));

	            left += cellMinWidth;
	            right -= cellMinWidth;

	            return mouseX < left ? left : mouseX > right ? right : mouseX;
	        }
	    }

	    /**
	     * 获取拖动时允许的Y轴坐标
	     */
	    function getPermissionY(dragTd, evt) {
	        try {
	            var top = domUtils.getXY(dragTd).y,
	                mousePosY = mouseCoords(evt).y;
	            return mousePosY < top ? top : mousePosY;
	        } catch (e) {
	            showError(e);
	        }
	    }

	    /**
	     * 移动状态切换
	     */
	    function toggleDraggableState(editor, draggable, dir, mousePos, cell) {
	        try {
	            editor.body.style.cursor = dir == "h" ? "col-resize" : dir == "v" ? "row-resize" : "text";
	            if (browser.ie) {
	                if (dir && !mousedown && !getUETableBySelected(editor)) {
	                    getDragLine(editor, editor.document);
	                    showDragLineAt(dir, cell);
	                } else {
	                    hideDragLine(editor)
	                }
	            }
	            onBorder = draggable;
	        } catch (e) {
	            showError(e);
	        }
	    }

	    /**
	     * 获取与UETable相关的resize line
	     * @param uetable UETable对象
	     */
	    function getResizeLineByUETable() {

	        var lineId = '_UETableResizeLine',
	            line = this.document.getElementById( lineId );

	        if( !line ) {
	            line = this.document.createElement("div");
	            line.id = lineId;
	            line.contnetEditable = false;
	            line.setAttribute("unselectable", "on");

	            var styles = {
	                width: 2*cellBorderWidth + 1 + 'px',
	                position: 'absolute',
	                'z-index': 100000,
	                cursor: 'col-resize',
	                background: 'red',
	                display: 'none'
	            };

	            //切换状态
	            line.onmouseout = function(){
	                this.style.display = 'none';
	            };

	            utils.extend( line.style, styles );

	            this.document.body.appendChild( line );

	        }

	        return line;

	    }

	    /**
	     * 更新resize-line
	     */
	    function updateResizeLine( cell, uetable ) {

	        var line = getResizeLineByUETable.call( this ),
	            table = uetable.table,
	            styles = {
	                top: domUtils.getXY( table ).y + 'px',
	                left: domUtils.getXY( cell).x + cell.offsetWidth - cellBorderWidth + 'px',
	                display: 'block',
	                height: table.offsetHeight + 'px'
	            };

	        utils.extend( line.style, styles );

	    }

	    /**
	     * 显示resize-line
	     */
	    function showResizeLine( cell ) {

	        var uetable = getUETable( cell );

	        updateResizeLine.call( this, cell, uetable );

	    }

	    /**
	     * 获取鼠标与当前单元格的相对位置
	     * @param ele
	     * @param mousePos
	     */
	    function getRelation(ele, mousePos) {
	        var elePos = domUtils.getXY(ele);

	        if( !elePos ) {
	            return '';
	        }

	        if (elePos.x + ele.offsetWidth - mousePos.x < cellBorderWidth) {
	            return "h";
	        }
	        if (mousePos.x - elePos.x < cellBorderWidth) {
	            return 'h1'
	        }
	        if (elePos.y + ele.offsetHeight - mousePos.y < cellBorderWidth) {
	            return "v";
	        }
	        if (mousePos.y - elePos.y < cellBorderWidth) {
	            return 'v1'
	        }
	        return '';
	    }

	    function mouseDownEvent(type, evt) {

	        if( isEditorDisabled() ) {
	            return ;
	        }

	        userActionStatus = {
	            x: evt.clientX,
	            y: evt.clientY
	        };

	        //右键菜单单独处理
	        if (evt.button == 2) {
	            var ut = getUETableBySelected(me),
	                flag = false;

	            if (ut) {
	                var td = getTargetTd(me, evt);
	                utils.each(ut.selectedTds, function (ti) {
	                    if (ti === td) {
	                        flag = true;
	                    }
	                });
	                if (!flag) {
	                    removeSelectedClass(domUtils.getElementsByTagName(me.body, "th td"));
	                    ut.clearSelected()
	                } else {
	                    td = ut.selectedTds[0];
	                    setTimeout(function () {
	                        me.selection.getRange().setStart(td, 0).setCursor(false, true);
	                    }, 0);

	                }
	            }
	        } else {
	            tableClickHander( evt );
	        }

	    }

	    //清除表格的计时器
	    function clearTableTimer() {
	        tabTimer && clearTimeout( tabTimer );
	        tabTimer = null;
	    }

	    //双击收缩
	    function tableDbclickHandler(evt) {
	        singleClickState = 0;
	        evt = evt || me.window.event;
	        var target = getParentTdOrTh(evt.target || evt.srcElement);
	        if (target) {
	            var h;
	            if (h = getRelation(target, mouseCoords(evt))) {

	                hideDragLine( me );

	                if (h == 'h1') {
	                    h = 'h';
	                    if (inTableSide(domUtils.findParentByTagName(target, "table"), target, evt)) {
	                        me.execCommand('adaptbywindow');
	                    } else {
	                        target = getUETable(target).getPreviewCell(target);
	                        if (target) {
	                            var rng = me.selection.getRange();
	                            rng.selectNodeContents(target).setCursor(true, true)
	                        }
	                    }
	                }
	                if (h == 'h') {
	                    var ut = getUETable(target),
	                        table = ut.table,
	                        cells = getCellsByMoveBorder( target, table, true );

	                    cells = extractArray( cells, 'left' );

	                    ut.width = ut.offsetWidth;

	                    var oldWidth = [],
	                        newWidth = [];

	                    utils.each( cells, function( cell ){

	                        oldWidth.push( cell.offsetWidth );

	                    } );

	                    utils.each( cells, function( cell ){

	                        cell.removeAttribute("width");

	                    } );

	                    window.setTimeout( function(){

	                        //是否允许改变
	                        var changeable = true;

	                        utils.each( cells, function( cell, index ){

	                            var width = cell.offsetWidth;

	                            if( width > oldWidth[index] ) {
	                                changeable = false;
	                                return false;
	                            }

	                            newWidth.push( width );

	                        } );

	                        var change = changeable ? newWidth : oldWidth;

	                        utils.each( cells, function( cell, index ){

	                            cell.width = change[index] - getTabcellSpace();

	                        } );


	                    }, 0 );

//	                    minWidth -= cellMinWidth;
	//
//	                    table.removeAttribute("width");
//	                    utils.each(cells, function (cell) {
//	                        cell.style.width = "";
//	                        cell.width -= minWidth;
//	                    });

	                }
	            }
	        }
	    }

	    function tableClickHander( evt ) {

	        removeSelectedClass(domUtils.getElementsByTagName(me.body, "td th"));
	        //trace:3113
	        //选中单元格，点击table外部，不会清掉table上挂的ueTable,会引起getUETableBySelected方法返回值
	        utils.each(me.document.getElementsByTagName('table'), function (t) {
	            t.ueTable = null;
	        });
	        startTd = getTargetTd(me, evt);
	        if( !startTd ) return;
	        var table = domUtils.findParentByTagName(startTd, "table", true);
	        ut = getUETable(table);
	        ut && ut.clearSelected();

	        //判断当前鼠标状态
	        if (!onBorder) {
	            me.document.body.style.webkitUserSelect = '';
	            mousedown = true;
	            me.addListener('mouseover', mouseOverEvent);
	        } else {
	            //边框上的动作处理
	            borderActionHandler( evt );
	        }


	    }

	    //处理表格边框上的动作, 这里做延时处理，避免两种动作互相影响
	    function borderActionHandler( evt ) {

	        if ( browser.ie ) {
	            evt = reconstruct(evt );
	        }

	        clearTableDragTimer();

	        //是否正在等待resize的缓冲中
	        isInResizeBuffer = true;

	        tableDragTimer = setTimeout(function(){
	            tableBorderDrag( evt );
	        }, dblclickTime);

	    }

	    function extractArray( originArr, key ) {

	        var result = [],
	            tmp = null;

	        for( var i = 0, len = originArr.length; i<len; i++ ) {

	            tmp = originArr[ i ][ key ];

	            if( tmp ) {
	                result.push( tmp );
	            }

	        }

	        return result;

	    }

	    function clearTableDragTimer() {
	        tableDragTimer && clearTimeout(tableDragTimer);
	        tableDragTimer = null;
	    }

	    function reconstruct( obj ) {

	        var attrs = ['pageX', 'pageY', 'clientX', 'clientY', 'srcElement', 'target'],
	            newObj = {};

	        if( obj ) {

	            for( var i = 0, key, val; key = attrs[i]; i++ ) {
	                val=obj[ key ];
	                val && (newObj[ key ] = val);
	            }

	        }

	        return newObj;

	    }

	    //边框拖动
	    function tableBorderDrag( evt ) {

	        isInResizeBuffer = false;

	        startTd = evt.target || evt.srcElement;
	        if( !startTd ) return;
	        var state = getRelation(startTd, mouseCoords(evt));
	        if (/\d/.test(state)) {
	            state = state.replace(/\d/, '');
	            startTd = getUETable(startTd).getPreviewCell(startTd, state == 'v');
	        }
	        hideDragLine(me);
	        getDragLine(me, me.document);
	        me.fireEvent('saveScene');
	        showDragLineAt(state, startTd);
	        mousedown = true;
	        //拖动开始
	        onDrag = state;
	        dragTd = startTd;
	    }

	    function mouseUpEvent(type, evt) {

	        if( isEditorDisabled() ) {
	            return ;
	        }

	        clearTableDragTimer();

	        isInResizeBuffer = false;

	        if( onBorder ) {
	            singleClickState = ++singleClickState % 3;

	            userActionStatus = {
	                x: evt.clientX,
	                y: evt.clientY
	            };

	            tableResizeTimer = setTimeout(function(){
	                singleClickState > 0 && singleClickState--;
	            }, dblclickTime );

	            if( singleClickState === 2 ) {

	                singleClickState = 0;
	                tableDbclickHandler(evt);
	                return;

	            }

	        }

	        if (evt.button == 2)return;
	        var me = this;
	        //清除表格上原生跨选问题
	        var range = me.selection.getRange(),
	            start = domUtils.findParentByTagName(range.startContainer, 'table', true),
	            end = domUtils.findParentByTagName(range.endContainer, 'table', true);

	        if (start || end) {
	            if (start === end) {
	                start = domUtils.findParentByTagName(range.startContainer, ['td', 'th', 'caption'], true);
	                end = domUtils.findParentByTagName(range.endContainer, ['td', 'th', 'caption'], true);
	                if (start !== end) {
	                    me.selection.clearRange()
	                }
	            } else {
	                me.selection.clearRange()
	            }
	        }
	        mousedown = false;
	        me.document.body.style.webkitUserSelect = '';
	        //拖拽状态下的mouseUP
	        if ( onDrag && dragTd ) {

	            me.selection.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();

	            singleClickState = 0;
	            dragLine = me.document.getElementById('ue_tableDragLine');

	            // trace 3973
	            if (dragLine) {
	                var dragTdPos = domUtils.getXY(dragTd),
	                    dragLinePos = domUtils.getXY(dragLine);

	                switch (onDrag) {
	                    case "h":
	                        changeColWidth(dragTd, dragLinePos.x - dragTdPos.x);
	                        break;
	                    case "v":
	                        changeRowHeight(dragTd, dragLinePos.y - dragTdPos.y - dragTd.offsetHeight);
	                        break;
	                    default:
	                }
	                onDrag = "";
	                dragTd = null;

	                hideDragLine(me);
	                me.fireEvent('saveScene');
	                return;
	            }
	        }
	        //正常状态下的mouseup
	        if (!startTd) {
	            var target = domUtils.findParentByTagName(evt.target || evt.srcElement, "td", true);
	            if (!target) target = domUtils.findParentByTagName(evt.target || evt.srcElement, "th", true);
	            if (target && (target.tagName == "TD" || target.tagName == "TH")) {
	                if (me.fireEvent("excludetable", target) === true) return;
	                range = new dom.Range(me.document);
	                range.setStart(target, 0).setCursor(false, true);
	            }
	        } else {
	            var ut = getUETable(startTd),
	                cell = ut ? ut.selectedTds[0] : null;
	            if (cell) {
	                range = new dom.Range(me.document);
	                if (domUtils.isEmptyBlock(cell)) {
	                    range.setStart(cell, 0).setCursor(false, true);
	                } else {
	                    range.selectNodeContents(cell).shrinkBoundary().setCursor(false, true);
	                }
	            } else {
	                range = me.selection.getRange().shrinkBoundary();
	                if (!range.collapsed) {
	                    var start = domUtils.findParentByTagName(range.startContainer, ['td', 'th'], true),
	                        end = domUtils.findParentByTagName(range.endContainer, ['td', 'th'], true);
	                    //在table里边的不能清除
	                    if (start && !end || !start && end || start && end && start !== end) {
	                        range.setCursor(false, true);
	                    }
	                }
	            }
	            startTd = null;
	            me.removeListener('mouseover', mouseOverEvent);
	        }
	        me._selectionChange(250, evt);
	    }

	    function mouseOverEvent(type, evt) {

	        if( isEditorDisabled() ) {
	            return;
	        }

	        var me = this,
	            tar = evt.target || evt.srcElement;
	        currentTd = domUtils.findParentByTagName(tar, "td", true) || domUtils.findParentByTagName(tar, "th", true);
	        //需要判断两个TD是否位于同一个表格内
	        if (startTd && currentTd &&
	            ((startTd.tagName == "TD" && currentTd.tagName == "TD") || (startTd.tagName == "TH" && currentTd.tagName == "TH")) &&
	            domUtils.findParentByTagName(startTd, 'table') == domUtils.findParentByTagName(currentTd, 'table')) {
	            var ut = getUETable(currentTd);
	            if (startTd != currentTd) {
	                me.document.body.style.webkitUserSelect = 'none';
	                me.selection.getNative()[browser.ie9below ? 'empty' : 'removeAllRanges']();
	                var range = ut.getCellsRange(startTd, currentTd);
	                ut.setSelected(range);
	            } else {
	                me.document.body.style.webkitUserSelect = '';
	                ut.clearSelected();
	            }

	        }
	        evt.preventDefault ? evt.preventDefault() : (evt.returnValue = false);
	    }

	    function setCellHeight(cell, height, backHeight) {
	        var lineHight = parseInt(domUtils.getComputedStyle(cell, "line-height"), 10),
	            tmpHeight = backHeight + height;
	        height = tmpHeight < lineHight ? lineHight : tmpHeight;
	        if (cell.style.height) cell.style.height = "";
	        cell.rowSpan == 1 ? cell.setAttribute("height", height) : (cell.removeAttribute && cell.removeAttribute("height"));
	    }

	    function getWidth(cell) {
	        if (!cell)return 0;
	        return parseInt(domUtils.getComputedStyle(cell, "width"), 10);
	    }

	    function changeColWidth(cell, changeValue) {

	        var ut = getUETable(cell);
	        if (ut) {

	            //根据当前移动的边框获取相关的单元格
	            var table = ut.table,
	                cells = getCellsByMoveBorder( cell, table );

	            table.style.width = "";
	            table.removeAttribute("width");

	            //修正改变量
	            changeValue = correctChangeValue( changeValue, cell, cells );

	            if (cell.nextSibling) {

	                var i=0;

	                utils.each( cells, function( cellGroup ){

	                    cellGroup.left.width = (+cellGroup.left.width)+changeValue;
	                    cellGroup.right && ( cellGroup.right.width = (+cellGroup.right.width)-changeValue );

	                } );

	            } else {

	                utils.each( cells, function( cellGroup ){
	                    cellGroup.left.width -= -changeValue;
	                } );

	            }
	        }

	    }

	    function isEditorDisabled() {
	        return me.body.contentEditable === "false";
	    }

	    function changeRowHeight(td, changeValue) {
	        if (Math.abs(changeValue) < 10) return;
	        var ut = getUETable(td);
	        if (ut) {
	            var cells = ut.getSameEndPosCells(td, "y"),
	            //备份需要连带变化的td的原始高度，否则后期无法获取正确的值
	                backHeight = cells[0] ? cells[0].offsetHeight : 0;
	            for (var i = 0, cell; cell = cells[i++];) {
	                setCellHeight(cell, changeValue, backHeight);
	            }
	        }

	    }

	    /**
	     * 获取调整单元格大小的相关单元格
	     * @isContainMergeCell 返回的结果中是否包含发生合并后的单元格
	     */
	    function getCellsByMoveBorder( cell, table, isContainMergeCell ) {

	        if( !table ) {
	            table = domUtils.findParentByTagName( cell, 'table' );
	        }

	        if( !table ) {
	            return null;
	        }

	        //获取到该单元格所在行的序列号
	        var index = domUtils.getNodeIndex( cell ),
	            temp = cell,
	            rows = table.rows,
	            colIndex = 0;

	        while( temp ) {
	            //获取到当前单元格在未发生单元格合并时的序列
	            if( temp.nodeType === 1 ) {
	                colIndex += (temp.colSpan || 1);
	            }
	            temp = temp.previousSibling;
	        }

	        temp = null;

	        //记录想关的单元格
	        var borderCells = [];

	        utils.each(rows, function( tabRow ){

	            var cells = tabRow.cells,
	                currIndex = 0;

	            utils.each( cells, function( tabCell ){

	                currIndex += (tabCell.colSpan || 1);

	                if( currIndex === colIndex ) {

	                    borderCells.push({
	                        left: tabCell,
	                        right: tabCell.nextSibling || null
	                    });

	                    return false;

	                } else if( currIndex > colIndex ) {

	                    if( isContainMergeCell ) {
	                        borderCells.push({
	                            left: tabCell
	                        });
	                    }

	                    return false;
	                }


	            } );

	        });

	        return borderCells;

	    }


	    /**
	     * 通过给定的单元格集合获取最小的单元格width
	     */
	    function getMinWidthByTableCells( cells ) {

	        var minWidth = Number.MAX_VALUE;

	        for( var i = 0, curCell; curCell = cells[ i ] ; i++ ) {

	            minWidth = Math.min( minWidth, curCell.width || getTableCellWidth( curCell ) );

	        }

	        return minWidth;

	    }

	    function correctChangeValue( changeValue, relatedCell, cells ) {

	        //为单元格的paading预留空间
	        changeValue -= getTabcellSpace();

	        if( changeValue < 0 ) {
	            return 0;
	        }

	        changeValue -= getTableCellWidth( relatedCell );

	        //确定方向
	        var direction = changeValue < 0 ? 'left':'right';

	        changeValue = Math.abs(changeValue);

	        //只关心非最后一个单元格就可以
	        utils.each( cells, function( cellGroup ){

	            var curCell = cellGroup[direction];

	            //为单元格保留最小空间
	            if( curCell ) {
	                changeValue = Math.min( changeValue, getTableCellWidth( curCell )-cellMinWidth );
	            }


	        } );


	        //修正越界
	        changeValue = changeValue < 0 ? 0 : changeValue;

	        return direction === 'left' ? -changeValue : changeValue;

	    }

	    function getTableCellWidth( cell ) {

	        var width = 0,
	            //偏移纠正量
	            offset = 0,
	            width = cell.offsetWidth - getTabcellSpace();

	        //最后一个节点纠正一下
	        if( !cell.nextSibling ) {

	            width -= getTableCellOffset( cell );

	        }

	        width = width < 0 ? 0 : width;

	        try {
	            cell.width = width;
	        } catch(e) {
	        }

	        return width;

	    }

	    /**
	     * 获取单元格所在表格的最末单元格的偏移量
	     */
	    function getTableCellOffset( cell ) {

	        tab = domUtils.findParentByTagName( cell, "table", false);

	        if( tab.offsetVal === undefined ) {

	            var prev = cell.previousSibling;

	            if( prev ) {

	                //最后一个单元格和前一个单元格的width diff结果 如果恰好为一个border width， 则条件成立
	                tab.offsetVal = cell.offsetWidth - prev.offsetWidth === UT.borderWidth ? UT.borderWidth : 0;

	            } else {
	                tab.offsetVal = 0;
	            }

	        }

	        return tab.offsetVal;

	    }

	    function getTabcellSpace() {

	        if( UT.tabcellSpace === undefined ) {

	            var cell = null,
	                tab = me.document.createElement("table"),
	                tbody = me.document.createElement("tbody"),
	                trow = me.document.createElement("tr"),
	                tabcell = me.document.createElement("td"),
	                mirror = null;

	            tabcell.style.cssText = 'border: 0;';
	            tabcell.width = 1;

	            trow.appendChild( tabcell );
	            trow.appendChild( mirror = tabcell.cloneNode( false ) );

	            tbody.appendChild( trow );

	            tab.appendChild( tbody );

	            tab.style.cssText = "visibility: hidden;";

	            me.body.appendChild( tab );

	            UT.paddingSpace = tabcell.offsetWidth - 1;

	            var tmpTabWidth = tab.offsetWidth;

	            tabcell.style.cssText = '';
	            mirror.style.cssText = '';

	            UT.borderWidth = ( tab.offsetWidth - tmpTabWidth ) / 3;

	            UT.tabcellSpace = UT.paddingSpace + UT.borderWidth;

	            me.body.removeChild( tab );

	        }

	        getTabcellSpace = function(){ return UT.tabcellSpace; };

	        return UT.tabcellSpace;

	    }

	    function getDragLine(editor, doc) {
	        if (mousedown)return;
	        dragLine = editor.document.createElement("div");
	        domUtils.setAttributes(dragLine, {
	            id:"ue_tableDragLine",
	            unselectable:'on',
	            contenteditable:false,
	            'onresizestart':'return false',
	            'ondragstart':'return false',
	            'onselectstart':'return false',
	            style:"background-color:blue;position:absolute;padding:0;margin:0;background-image:none;border:0px none;opacity:0;filter:alpha(opacity=0)"
	        });
	        editor.body.appendChild(dragLine);
	    }

	    function hideDragLine(editor) {
	        if (mousedown)return;
	        var line;
	        while (line = editor.document.getElementById('ue_tableDragLine')) {
	            domUtils.remove(line)
	        }
	    }

	    /**
	     * 依据state（v|h）在cell位置显示横线
	     * @param state
	     * @param cell
	     */
	    function showDragLineAt(state, cell) {
	        if (!cell) return;
	        var table = domUtils.findParentByTagName(cell, "table"),
	            caption = table.getElementsByTagName('caption'),
	            width = table.offsetWidth,
	            height = table.offsetHeight - (caption.length > 0 ? caption[0].offsetHeight : 0),
	            tablePos = domUtils.getXY(table),
	            cellPos = domUtils.getXY(cell), css;
	        switch (state) {
	            case "h":
	                css = 'height:' + height + 'px;top:' + (tablePos.y + (caption.length > 0 ? caption[0].offsetHeight : 0)) + 'px;left:' + (cellPos.x + cell.offsetWidth);
	                dragLine.style.cssText = css + 'px;position: absolute;display:block;background-color:blue;width:1px;border:0; color:blue;opacity:.3;filter:alpha(opacity=30)';
	                break;
	            case "v":
	                css = 'width:' + width + 'px;left:' + tablePos.x + 'px;top:' + (cellPos.y + cell.offsetHeight );
	                //必须加上border:0和color:blue，否则低版ie不支持背景色显示
	                dragLine.style.cssText = css + 'px;overflow:hidden;position: absolute;display:block;background-color:blue;height:1px;border:0;color:blue;opacity:.2;filter:alpha(opacity=20)';
	                break;
	            default:
	        }
	    }

	    /**
	     * 当表格边框颜色为白色时设置为虚线,true为添加虚线
	     * @param editor
	     * @param flag
	     */
	    function switchBorderColor(editor, flag) {
	        var tableArr = domUtils.getElementsByTagName(editor.body, "table"), color;
	        for (var i = 0, node; node = tableArr[i++];) {
	            var td = domUtils.getElementsByTagName(node, "td");
	            if (td[0]) {
	                if (flag) {
	                    color = (td[0].style.borderColor).replace(/\s/g, "");
	                    if (/(#ffffff)|(rgb\(255,255,255\))/ig.test(color))
	                        domUtils.addClass(node, "noBorderTable")
	                } else {
	                    domUtils.removeClasses(node, "noBorderTable")
	                }
	            }

	        }
	    }

	    function getTableWidth(editor, needIEHack, defaultValue) {
	        var body = editor.body;
	        return body.offsetWidth - (needIEHack ? parseInt(domUtils.getComputedStyle(body, 'margin-left'), 10) * 2 : 0) - defaultValue.tableBorder * 2 - (editor.options.offsetWidth || 0);
	    }

	    /**
	     * 获取当前拖动的单元格
	     */
	    function getTargetTd(editor, evt) {

	        var target = domUtils.findParentByTagName(evt.target || evt.srcElement, ["td", "th"], true),
	            dir = null;

	        if( !target ) {
	            return null;
	        }

	        dir = getRelation( target, mouseCoords( evt ) );

	        //如果有前一个节点， 需要做一个修正， 否则可能会得到一个错误的td

	        if( !target ) {
	            return null;
	        }

	        if( dir === 'h1' && target.previousSibling ) {

	            var position = domUtils.getXY( target),
	                cellWidth = target.offsetWidth;

	            if( Math.abs( position.x + cellWidth - evt.clientX ) > cellWidth / 3 ) {
	                target = target.previousSibling;
	            }

	        } else if( dir === 'v1' && target.parentNode.previousSibling ) {

	            var position = domUtils.getXY( target),
	                cellHeight = target.offsetHeight;

	            if( Math.abs( position.y + cellHeight - evt.clientY ) > cellHeight / 3 ) {
	                target = target.parentNode.previousSibling.firstChild;
	            }

	        }


	        //排除了非td内部以及用于代码高亮部分的td
	        return target && !(editor.fireEvent("excludetable", target) === true) ? target : null;
	    }

	};


	// plugins/table.sort.js
	/**
	 * Created with JetBrains PhpStorm.
	 * User: Jinqn
	 * Date: 13-10-12
	 * Time: 上午10:20
	 * To change this template use File | Settings | File Templates.
	 */

	UE.UETable.prototype.sortTable = function (sortByCellIndex, compareFn) {
	    var table = this.table,
	        rows = table.rows,
	        trArray = [],
	        flag = rows[0].cells[0].tagName === "TH",
	        lastRowIndex = 0;
	    if(this.selectedTds.length){
	        var range = this.cellsRange,
	            len = range.endRowIndex + 1;
	        for (var i = range.beginRowIndex; i < len; i++) {
	            trArray[i] = rows[i];
	        }
	        trArray.splice(0,range.beginRowIndex);
	        lastRowIndex = (range.endRowIndex +1) === this.rowsNum ? 0 : range.endRowIndex +1;
	    }else{
	        for (var i = 0,len = rows.length; i < len; i++) {
	            trArray[i] = rows[i];
	        }
	    }

	    var Fn = {
	        'reversecurrent': function(td1,td2){
	            return 1;
	        },
	        'orderbyasc': function(td1,td2){
	            var value1 = td1.innerText||td1.textContent,
	                value2 = td2.innerText||td2.textContent;
	            return value1.localeCompare(value2);
	        },
	        'reversebyasc': function(td1,td2){
	            var value1 = td1.innerHTML,
	                value2 = td2.innerHTML;
	            return value2.localeCompare(value1);
	        },
	        'orderbynum': function(td1,td2){
	            var value1 = td1[browser.ie ? 'innerText':'textContent'].match(/\d+/),
	                value2 = td2[browser.ie ? 'innerText':'textContent'].match(/\d+/);
	            if(value1) value1 = +value1[0];
	            if(value2) value2 = +value2[0];
	            return (value1||0) - (value2||0);
	        },
	        'reversebynum': function(td1,td2){
	            var value1 = td1[browser.ie ? 'innerText':'textContent'].match(/\d+/),
	                value2 = td2[browser.ie ? 'innerText':'textContent'].match(/\d+/);
	            if(value1) value1 = +value1[0];
	            if(value2) value2 = +value2[0];
	            return (value2||0) - (value1||0);
	        }
	    };

	    //对表格设置排序的标记data-sort-type
	    table.setAttribute('data-sort-type', compareFn && typeof compareFn === "string" && Fn[compareFn] ? compareFn:'');

	    //th不参与排序
	    flag && trArray.splice(0, 1);
	    trArray = utils.sort(trArray,function (tr1, tr2) {
	        var result;
	        if (compareFn && typeof compareFn === "function") {
	            result = compareFn.call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex]);
	        } else if (compareFn && typeof compareFn === "number") {
	            result = 1;
	        } else if (compareFn && typeof compareFn === "string" && Fn[compareFn]) {
	            result = Fn[compareFn].call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex]);
	        } else {
	            result = Fn['orderbyasc'].call(this, tr1.cells[sortByCellIndex], tr2.cells[sortByCellIndex]);
	        }
	        return result;
	    });
	    var fragment = table.ownerDocument.createDocumentFragment();
	    for (var j = 0, len = trArray.length; j < len; j++) {
	        fragment.appendChild(trArray[j]);
	    }
	    var tbody = table.getElementsByTagName("tbody")[0];
	    if(!lastRowIndex){
	        tbody.appendChild(fragment);
	    }else{
	        tbody.insertBefore(fragment,rows[lastRowIndex- range.endRowIndex + range.beginRowIndex - 1])
	    }
	};

	UE.plugins['tablesort'] = function () {
	    var me = this,
	        UT = UE.UETable,
	        getUETable = function (tdOrTable) {
	            return UT.getUETable(tdOrTable);
	        },
	        getTableItemsByRange = function (editor) {
	            return UT.getTableItemsByRange(editor);
	        };


	    me.ready(function () {
	        //添加表格可排序的样式
	        utils.cssRule('tablesort',
	            'table.sortEnabled tr.firstRow th,table.sortEnabled tr.firstRow td{padding-right:20px;background-repeat: no-repeat;background-position: center right;' +
	                '   background-image:url(' + me.options.themePath + me.options.theme + '/images/sortable.png);}',
	            me.document);

	        //做单元格合并操作时,清除可排序标识
	        me.addListener("afterexeccommand", function (type, cmd) {
	            if( cmd == 'mergeright' || cmd == 'mergedown' || cmd == 'mergecells') {
	                this.execCommand('disablesort');
	            }
	        });
	    });



	    //表格排序
	    UE.commands['sorttable'] = {
	        queryCommandState: function () {
	            var me = this,
	                tableItems = getTableItemsByRange(me);
	            if (!tableItems.cell) return -1;
	            var table = tableItems.table,
	                cells = table.getElementsByTagName("td");
	            for (var i = 0, cell; cell = cells[i++];) {
	                if (cell.rowSpan != 1 || cell.colSpan != 1) return -1;
	            }
	            return 0;
	        },
	        execCommand: function (cmd, fn) {
	            var me = this,
	                range = me.selection.getRange(),
	                bk = range.createBookmark(true),
	                tableItems = getTableItemsByRange(me),
	                cell = tableItems.cell,
	                ut = getUETable(tableItems.table),
	                cellInfo = ut.getCellInfo(cell);
	            ut.sortTable(cellInfo.cellIndex, fn);
	            range.moveToBookmark(bk);
	            try{
	                range.select();
	            }catch(e){}
	        }
	    };

	    //设置表格可排序,清除表格可排序
	    UE.commands["enablesort"] = UE.commands["disablesort"] = {
	        queryCommandState: function (cmd) {
	            var table = getTableItemsByRange(this).table;
	            if(table && cmd=='enablesort') {
	                var cells = domUtils.getElementsByTagName(table, 'th td');
	                for(var i = 0; i<cells.length; i++) {
	                    if(cells[i].getAttribute('colspan')>1 || cells[i].getAttribute('rowspan')>1) return -1;
	                }
	            }

	            return !table ? -1: cmd=='enablesort' ^ table.getAttribute('data-sort')!='sortEnabled' ? -1:0;
	        },
	        execCommand: function (cmd) {
	            var table = getTableItemsByRange(this).table;
	            table.setAttribute("data-sort", cmd == "enablesort" ? "sortEnabled" : "sortDisabled");
	            cmd == "enablesort" ? domUtils.addClass(table,"sortEnabled"):domUtils.removeClasses(table,"sortEnabled");
	        }
	    };
	};


	// plugins/contextmenu.js
	///import core
	///commands 右键菜单
	///commandsName  ContextMenu
	///commandsTitle  右键菜单
	/**
	 * 右键菜单
	 * @function
	 * @name baidu.editor.plugins.contextmenu
	 * @author zhanyi
	 */

	UE.plugins['contextmenu'] = function () {
	    var me = this;
	    me.setOpt('enableContextMenu',true);
	    if(me.getOpt('enableContextMenu') === false){
	        return;
	    }
	    var lang = me.getLang( "contextMenu" ),
	            menu,
	            items = me.options.contextMenu || [
	                {label:lang['selectall'], cmdName:'selectall'},
	                {
	                    label:lang.cleardoc,
	                    cmdName:'cleardoc',
	                    exec:function () {
	                        if ( confirm( lang.confirmclear ) ) {
	                            this.execCommand( 'cleardoc' );
	                        }
	                    }
	                },
	                '-',
	                {
	                    label:lang.unlink,
	                    cmdName:'unlink'
	                },
	                '-',
	                {
	                    group:lang.paragraph,
	                    icon:'justifyjustify',
	                    subMenu:[
	                        {
	                            label:lang.justifyleft,
	                            cmdName:'justify',
	                            value:'left'
	                        },
	                        {
	                            label:lang.justifyright,
	                            cmdName:'justify',
	                            value:'right'
	                        },
	                        {
	                            label:lang.justifycenter,
	                            cmdName:'justify',
	                            value:'center'
	                        },
	                        {
	                            label:lang.justifyjustify,
	                            cmdName:'justify',
	                            value:'justify'
	                        }
	                    ]
	                },
	                '-',
	                {
	                    group:lang.table,
	                    icon:'table',
	                    subMenu:[
	                        {
	                            label:lang.inserttable,
	                            cmdName:'inserttable'
	                        },
	                        {
	                            label:lang.deletetable,
	                            cmdName:'deletetable'
	                        },
	                        '-',
	                        {
	                            label:lang.deleterow,
	                            cmdName:'deleterow'
	                        },
	                        {
	                            label:lang.deletecol,
	                            cmdName:'deletecol'
	                        },
	                        {
	                            label:lang.insertcol,
	                            cmdName:'insertcol'
	                        },
	                        {
	                            label:lang.insertcolnext,
	                            cmdName:'insertcolnext'
	                        },
	                        {
	                            label:lang.insertrow,
	                            cmdName:'insertrow'
	                        },
	                        {
	                            label:lang.insertrownext,
	                            cmdName:'insertrownext'
	                        },
	                        '-',
	                        {
	                            label:lang.insertcaption,
	                            cmdName:'insertcaption'
	                        },
	                        {
	                            label:lang.deletecaption,
	                            cmdName:'deletecaption'
	                        },
	                        {
	                            label:lang.inserttitle,
	                            cmdName:'inserttitle'
	                        },
	                        {
	                            label:lang.deletetitle,
	                            cmdName:'deletetitle'
	                        },
	                        {
	                            label:lang.inserttitlecol,
	                            cmdName:'inserttitlecol'
	                        },
	                        {
	                            label:lang.deletetitlecol,
	                            cmdName:'deletetitlecol'
	                        },
	                        '-',
	                        {
	                            label:lang.mergecells,
	                            cmdName:'mergecells'
	                        },
	                        {
	                            label:lang.mergeright,
	                            cmdName:'mergeright'
	                        },
	                        {
	                            label:lang.mergedown,
	                            cmdName:'mergedown'
	                        },
	                        '-',
	                        {
	                            label:lang.splittorows,
	                            cmdName:'splittorows'
	                        },
	                        {
	                            label:lang.splittocols,
	                            cmdName:'splittocols'
	                        },
	                        {
	                            label:lang.splittocells,
	                            cmdName:'splittocells'
	                        },
	                        '-',
	                        {
	                            label:lang.averageDiseRow,
	                            cmdName:'averagedistributerow'
	                        },
	                        {
	                            label:lang.averageDisCol,
	                            cmdName:'averagedistributecol'
	                        },
	                        '-',
	                        {
	                            label:lang.edittd,
	                            cmdName:'edittd',
	                            exec:function () {
	                                if ( UE.ui['edittd'] ) {
	                                    new UE.ui['edittd']( this );
	                                }
	                                this.getDialog('edittd').open();
	                            }
	                        },
	                        {
	                            label:lang.edittable,
	                            cmdName:'edittable',
	                            exec:function () {
	                                if ( UE.ui['edittable'] ) {
	                                    new UE.ui['edittable']( this );
	                                }
	                                this.getDialog('edittable').open();
	                            }
	                        },
	                        {
	                            label:lang.setbordervisible,
	                            cmdName:'setbordervisible'
	                        }
	                    ]
	                },
	                {
	                    group:lang.tablesort,
	                    icon:'tablesort',
	                    subMenu:[
	                        {
	                            label:lang.enablesort,
	                            cmdName:'enablesort'
	                        },
	                        {
	                            label:lang.disablesort,
	                            cmdName:'disablesort'
	                        },
	                        '-',
	                        {
	                            label:lang.reversecurrent,
	                            cmdName:'sorttable',
	                            value:'reversecurrent'
	                        },
	                        {
	                            label:lang.orderbyasc,
	                            cmdName:'sorttable',
	                            value:'orderbyasc'
	                        },
	                        {
	                            label:lang.reversebyasc,
	                            cmdName:'sorttable',
	                            value:'reversebyasc'
	                        },
	                        {
	                            label:lang.orderbynum,
	                            cmdName:'sorttable',
	                            value:'orderbynum'
	                        },
	                        {
	                            label:lang.reversebynum,
	                            cmdName:'sorttable',
	                            value:'reversebynum'
	                        }
	                    ]
	                },
	                {
	                    group:lang.borderbk,
	                    icon:'borderBack',
	                    subMenu:[
	                        {
	                            label:lang.setcolor,
	                            cmdName:"interlacetable",
	                            exec:function(){
	                                this.execCommand("interlacetable");
	                            }
	                        },
	                        {
	                            label:lang.unsetcolor,
	                            cmdName:"uninterlacetable",
	                            exec:function(){
	                                this.execCommand("uninterlacetable");
	                            }
	                        },
	                        {
	                            label:lang.setbackground,
	                            cmdName:"settablebackground",
	                            exec:function(){
	                                this.execCommand("settablebackground",{repeat:true,colorList:["#bbb","#ccc"]});
	                            }
	                        },
	                        {
	                            label:lang.unsetbackground,
	                            cmdName:"cleartablebackground",
	                            exec:function(){
	                                this.execCommand("cleartablebackground");
	                            }
	                        },
	                        {
	                            label:lang.redandblue,
	                            cmdName:"settablebackground",
	                            exec:function(){
	                                this.execCommand("settablebackground",{repeat:true,colorList:["red","blue"]});
	                            }
	                        },
	                        {
	                            label:lang.threecolorgradient,
	                            cmdName:"settablebackground",
	                            exec:function(){
	                                this.execCommand("settablebackground",{repeat:true,colorList:["#aaa","#bbb","#ccc"]});
	                            }
	                        }
	                    ]
	                },
	                {
	                    group:lang.aligntd,
	                    icon:'aligntd',
	                    subMenu:[
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'left',vAlign:'top'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'center',vAlign:'top'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'right',vAlign:'top'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'left',vAlign:'middle'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'center',vAlign:'middle'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'right',vAlign:'middle'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'left',vAlign:'bottom'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'center',vAlign:'bottom'}
	                        },
	                        {
	                            cmdName:'cellalignment',
	                            value:{align:'right',vAlign:'bottom'}
	                        }
	                    ]
	                },
	                {
	                    group:lang.aligntable,
	                    icon:'aligntable',
	                    subMenu:[
	                        {
	                            cmdName:'tablealignment',
	                            className: 'left',
	                            label:lang.tableleft,
	                            value:"left"
	                        },
	                        {
	                            cmdName:'tablealignment',
	                            className: 'center',
	                            label:lang.tablecenter,
	                            value:"center"
	                        },
	                        {
	                            cmdName:'tablealignment',
	                            className: 'right',
	                            label:lang.tableright,
	                            value:"right"
	                        }
	                    ]
	                },
	                '-',
	                {
	                    label:lang.insertparagraphbefore,
	                    cmdName:'insertparagraph',
	                    value:true
	                },
	                {
	                    label:lang.insertparagraphafter,
	                    cmdName:'insertparagraph'
	                },
	                {
	                    label:lang['copy'],
	                    cmdName:'copy'
	                },
	                {
	                    label:lang['paste'],
	                    cmdName:'paste'
	                }
	            ];
	    if ( !items.length ) {
	        return;
	    }
	    var uiUtils = UE.ui.uiUtils;

	    me.addListener( 'contextmenu', function ( type, evt ) {

	        var offset = uiUtils.getViewportOffsetByEvent( evt );
	        me.fireEvent( 'beforeselectionchange' );
	        if ( menu ) {
	            menu.destroy();
	        }
	        for ( var i = 0, ti, contextItems = []; ti = items[i]; i++ ) {
	            var last;
	            (function ( item ) {
	                if ( item == '-' ) {
	                    if ( (last = contextItems[contextItems.length - 1 ] ) && last !== '-' ) {
	                        contextItems.push( '-' );
	                    }
	                } else if ( item.hasOwnProperty( "group" ) ) {
	                    for ( var j = 0, cj, subMenu = []; cj = item.subMenu[j]; j++ ) {
	                        (function ( subItem ) {
	                            if ( subItem == '-' ) {
	                                if ( (last = subMenu[subMenu.length - 1 ] ) && last !== '-' ) {
	                                    subMenu.push( '-' );
	                                }else{
	                                    subMenu.splice(subMenu.length-1);
	                                }
	                            } else {
	                                if ( (me.commands[subItem.cmdName] || UE.commands[subItem.cmdName] || subItem.query) &&
	                                        (subItem.query ? subItem.query() : me.queryCommandState( subItem.cmdName )) > -1 ) {
	                                    subMenu.push( {
	                                        'label':subItem.label || me.getLang( "contextMenu." + subItem.cmdName + (subItem.value || '') )||"",
	                                        'className':'edui-for-' +subItem.cmdName + ( subItem.className ? ( ' edui-for-' + subItem.cmdName + '-' + subItem.className ) : '' ),
	                                        onclick:subItem.exec ? function () {
	                                                subItem.exec.call( me );
	                                        } : function () {
	                                            me.execCommand( subItem.cmdName, subItem.value );
	                                        }
	                                    } );
	                                }
	                            }
	                        })( cj );
	                    }
	                    if ( subMenu.length ) {
	                        function getLabel(){
	                            switch (item.icon){
	                                case "table":
	                                    return me.getLang( "contextMenu.table" );
	                                case "justifyjustify":
	                                    return me.getLang( "contextMenu.paragraph" );
	                                case "aligntd":
	                                    return me.getLang("contextMenu.aligntd");
	                                case "aligntable":
	                                    return me.getLang("contextMenu.aligntable");
	                                case "tablesort":
	                                    return lang.tablesort;
	                                case "borderBack":
	                                    return lang.borderbk;
	                                default :
	                                    return '';
	                            }
	                        }
	                        contextItems.push( {
	                            //todo 修正成自动获取方式
	                            'label':getLabel(),
	                            className:'edui-for-' + item.icon,
	                            'subMenu':{
	                                items:subMenu,
	                                editor:me
	                            }
	                        } );
	                    }

	                } else {
	                    //有可能commmand没有加载右键不能出来，或者没有command也想能展示出来添加query方法
	                    if ( (me.commands[item.cmdName] || UE.commands[item.cmdName] || item.query) &&
	                            (item.query ? item.query.call(me) : me.queryCommandState( item.cmdName )) > -1 ) {

	                        contextItems.push( {
	                            'label':item.label || me.getLang( "contextMenu." + item.cmdName ),
	                            className:'edui-for-' + (item.icon ? item.icon : item.cmdName + (item.value || '')),
	                            onclick:item.exec ? function () {
	                                item.exec.call( me );
	                            } : function () {
	                                me.execCommand( item.cmdName, item.value );
	                            }
	                        } );
	                    }

	                }

	            })( ti );
	        }
	        if ( contextItems[contextItems.length - 1] == '-' ) {
	            contextItems.pop();
	        }

	        menu = new UE.ui.Menu( {
	            items:contextItems,
	            className:"edui-contextmenu",
	            editor:me
	        } );
	        menu.render();
	        menu.showAt( offset );

	        me.fireEvent("aftershowcontextmenu",menu);

	        domUtils.preventDefault( evt );
	        if ( browser.ie ) {
	            var ieRange;
	            try {
	                ieRange = me.selection.getNative().createRange();
	            } catch ( e ) {
	                return;
	            }
	            if ( ieRange.item ) {
	                var range = new dom.Range( me.document );
	                range.selectNode( ieRange.item( 0 ) ).select( true, true );
	            }
	        }
	    });

	    // 添加复制的flash按钮
	    me.addListener('aftershowcontextmenu', function(type, menu) {
	        if (me.zeroclipboard) {
	            var items = menu.items;
	            for (var key in items) {
	                if (items[key].className == 'edui-for-copy') {
	                    me.zeroclipboard.clip(items[key].getDom());
	                }
	            }
	        }
	    });

	};


	// plugins/shortcutmenu.js
	///import core
	///commands       弹出菜单
	// commandsName  popupmenu
	///commandsTitle  弹出菜单
	/**
	 * 弹出菜单
	 * @function
	 * @name baidu.editor.plugins.popupmenu
	 * @author xuheng
	 */

	UE.plugins['shortcutmenu'] = function () {
	    var me = this,
	        menu,
	        items = me.options.shortcutMenu || [];

	    if (!items.length) {
	        return;
	    }

	    me.addListener ('contextmenu mouseup' , function (type , e) {
	        var me = this,
	            customEvt = {
	                type : type ,
	                target : e.target || e.srcElement ,
	                screenX : e.screenX ,
	                screenY : e.screenY ,
	                clientX : e.clientX ,
	                clientY : e.clientY
	            };

	        setTimeout (function () {
	            var rng = me.selection.getRange ();
	            if (rng.collapsed === false || type == "contextmenu") {

	                if (!menu) {
	                    menu = new baidu.editor.ui.ShortCutMenu ({
	                        editor : me ,
	                        items : items ,
	                        theme : me.options.theme ,
	                        className : 'edui-shortcutmenu'
	                    });

	                    menu.render ();
	                    me.fireEvent ("afterrendershortcutmenu" , menu);
	                }

	                menu.show (customEvt , !!UE.plugins['contextmenu']);
	            }
	        });

	        if (type == 'contextmenu') {
	            domUtils.preventDefault (e);
	            if (browser.ie9below) {
	                var ieRange;
	                try {
	                    ieRange = me.selection.getNative().createRange();
	                } catch (e) {
	                    return;
	                }
	                if (ieRange.item) {
	                    var range = new dom.Range (me.document);
	                    range.selectNode (ieRange.item (0)).select (true , true);

	                }
	            }
	        }
	    });

	    me.addListener ('keydown' , function (type) {
	        if (type == "keydown") {
	            menu && !menu.isHidden && menu.hide ();
	        }

	    });

	};




	// plugins/basestyle.js
	/**
	 * B、I、sub、super命令支持
	 * @file
	 * @since 1.2.6.1
	 */

	UE.plugins['basestyle'] = function(){

	    /**
	     * 字体加粗
	     * @command bold
	     * @param { String } cmd 命令字符串
	     * @remind 对已加粗的文本内容执行该命令， 将取消加粗
	     * @method execCommand
	     * @example
	     * ```javascript
	     * //editor是编辑器实例
	     * //对当前选中的文本内容执行加粗操作
	     * //第一次执行， 文本内容加粗
	     * editor.execCommand( 'bold' );
	     *
	     * //第二次执行， 文本内容取消加粗
	     * editor.execCommand( 'bold' );
	     * ```
	     */


	    /**
	     * 字体倾斜
	     * @command italic
	     * @method execCommand
	     * @param { String } cmd 命令字符串
	     * @remind 对已倾斜的文本内容执行该命令， 将取消倾斜
	     * @example
	     * ```javascript
	     * //editor是编辑器实例
	     * //对当前选中的文本内容执行斜体操作
	     * //第一次操作， 文本内容将变成斜体
	     * editor.execCommand( 'italic' );
	     *
	     * //再次对同一文本内容执行， 则文本内容将恢复正常
	     * editor.execCommand( 'italic' );
	     * ```
	     */

	    /**
	     * 下标文本，与“superscript”命令互斥
	     * @command subscript
	     * @method execCommand
	     * @remind  把选中的文本内容切换成下标文本， 如果当前选中的文本已经是下标， 则该操作会把文本内容还原成正常文本
	     * @param { String } cmd 命令字符串
	     * @example
	     * ```javascript
	     * //editor是编辑器实例
	     * //对当前选中的文本内容执行下标操作
	     * //第一次操作， 文本内容将变成下标文本
	     * editor.execCommand( 'subscript' );
	     *
	     * //再次对同一文本内容执行， 则文本内容将恢复正常
	     * editor.execCommand( 'subscript' );
	     * ```
	     */

	    /**
	     * 上标文本，与“subscript”命令互斥
	     * @command superscript
	     * @method execCommand
	     * @remind 把选中的文本内容切换成上标文本， 如果当前选中的文本已经是上标， 则该操作会把文本内容还原成正常文本
	     * @param { String } cmd 命令字符串
	     * @example
	     * ```javascript
	     * //editor是编辑器实例
	     * //对当前选中的文本内容执行上标操作
	     * //第一次操作， 文本内容将变成上标文本
	     * editor.execCommand( 'superscript' );
	     *
	     * //再次对同一文本内容执行， 则文本内容将恢复正常
	     * editor.execCommand( 'superscript' );
	     * ```
	     */
	    var basestyles = {
	            'bold':['strong','b'],
	            'italic':['em','i'],
	            'subscript':['sub'],
	            'superscript':['sup']
	        },
	        getObj = function(editor,tagNames){
	            return domUtils.filterNodeList(editor.selection.getStartElementPath(),tagNames);
	        },
	        me = this;
	    //添加快捷键
	    me.addshortcutkey({
	        "Bold" : "ctrl+66",//^B
	        "Italic" : "ctrl+73", //^I
	        "Underline" : "ctrl+85"//^U
	    });
	    me.addInputRule(function(root){
	        utils.each(root.getNodesByTagName('b i'),function(node){
	            switch (node.tagName){
	                case 'b':
	                    node.tagName = 'strong';
	                    break;
	                case 'i':
	                    node.tagName = 'em';
	            }
	        });
	    });
	    for ( var style in basestyles ) {
	        (function( cmd, tagNames ) {
	            me.commands[cmd] = {
	                execCommand : function( cmdName ) {
	                    var range = me.selection.getRange(),obj = getObj(this,tagNames);
	                    if ( range.collapsed ) {
	                        if ( obj ) {
	                            var tmpText =  me.document.createTextNode('');
	                            range.insertNode( tmpText ).removeInlineStyle( tagNames );
	                            range.setStartBefore(tmpText);
	                            domUtils.remove(tmpText);
	                        } else {
	                            var tmpNode = range.document.createElement( tagNames[0] );
	                            if(cmdName == 'superscript' || cmdName == 'subscript'){
	                                tmpText = me.document.createTextNode('');
	                                range.insertNode(tmpText)
	                                    .removeInlineStyle(['sub','sup'])
	                                    .setStartBefore(tmpText)
	                                    .collapse(true);
	                            }
	                            range.insertNode( tmpNode ).setStart( tmpNode, 0 );
	                        }
	                        range.collapse( true );
	                    } else {
	                        if(cmdName == 'superscript' || cmdName == 'subscript'){
	                            if(!obj || obj.tagName.toLowerCase() != cmdName){
	                                range.removeInlineStyle(['sub','sup']);
	                            }
	                        }
	                        obj ? range.removeInlineStyle( tagNames ) : range.applyInlineStyle( tagNames[0] );
	                    }
	                    range.select();
	                },
	                queryCommandState : function() {
	                   return getObj(this,tagNames) ? 1 : 0;
	                }
	            };
	        })( style, basestyles[style] );
	    }
	};



	// plugins/elementpath.js
	/**
	 * 选取路径命令
	 * @file
	 */
	UE.plugins['elementpath'] = function(){
	    var currentLevel,
	        tagNames,
	        me = this;
	    me.setOpt('elementPathEnabled',true);
	    if(!me.options.elementPathEnabled){
	        return;
	    }
	    me.commands['elementpath'] = {
	        execCommand : function( cmdName, level ) {
	            var start = tagNames[level],
	                range = me.selection.getRange();
	            currentLevel = level*1;
	            range.selectNode(start).select();
	        },
	        queryCommandValue : function() {
	            //产生一个副本，不能修改原来的startElementPath;
	            var parents = [].concat(this.selection.getStartElementPath()).reverse(),
	                names = [];
	            tagNames = parents;
	            for(var i=0,ci;ci=parents[i];i++){
	                if(ci.nodeType == 3) {
	                    continue;
	                }
	                var name = ci.tagName.toLowerCase();
	                if(name == 'img' && ci.getAttribute('anchorname')){
	                    name = 'anchor';
	                }
	                names[i] = name;
	                if(currentLevel == i){
	                   currentLevel = -1;
	                    break;
	                }
	            }
	            return names;
	        }
	    };
	};



	// plugins/formatmatch.js
	/**
	 * 格式刷，只格式inline的
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 格式刷
	 * @command formatmatch
	 * @method execCommand
	 * @remind 该操作不能复制段落格式
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * //editor是编辑器实例
	 * //获取格式刷
	 * editor.execCommand( 'formatmatch' );
	 * ```
	 */
	UE.plugins['formatmatch'] = function(){

	    var me = this,
	        list = [],img,
	        flag = 0;

	     me.addListener('reset',function(){
	         list = [];
	         flag = 0;
	     });

	    function addList(type,evt){
	        
	        if(browser.webkit){
	            var target = evt.target.tagName == 'IMG' ? evt.target : null;
	        }

	        function addFormat(range){

	            if(text){
	                range.selectNode(text);
	            }
	            return range.applyInlineStyle(list[list.length-1].tagName,null,list);

	        }

	        me.undoManger && me.undoManger.save();

	        var range = me.selection.getRange(),
	            imgT = target || range.getClosedNode();
	        if(img && imgT && imgT.tagName == 'IMG'){
	            //trace:964

	            imgT.style.cssText += ';float:' + (img.style.cssFloat || img.style.styleFloat ||'none') + ';display:' + (img.style.display||'inline');

	            img = null;
	        }else{
	            if(!img){
	                var collapsed = range.collapsed;
	                if(collapsed){
	                    var text = me.document.createTextNode('match');
	                    range.insertNode(text).select();


	                }
	                me.__hasEnterExecCommand = true;
	                //不能把block上的属性干掉
	                //trace:1553
	                var removeFormatAttributes = me.options.removeFormatAttributes;
	                me.options.removeFormatAttributes = '';
	                me.execCommand('removeformat');
	                me.options.removeFormatAttributes = removeFormatAttributes;
	                me.__hasEnterExecCommand = false;
	                //trace:969
	                range = me.selection.getRange();
	                if(list.length){
	                    addFormat(range);
	                }
	                if(text){
	                    range.setStartBefore(text).collapse(true);

	                }
	                range.select();
	                text && domUtils.remove(text);
	            }

	        }




	        me.undoManger && me.undoManger.save();
	        me.removeListener('mouseup',addList);
	        flag = 0;
	    }

	    me.commands['formatmatch'] = {
	        execCommand : function( cmdName ) {
	          
	            if(flag){
	                flag = 0;
	                list = [];
	                 me.removeListener('mouseup',addList);
	                return;
	            }


	              
	            var range = me.selection.getRange();
	            img = range.getClosedNode();
	            if(!img || img.tagName != 'IMG'){
	               range.collapse(true).shrinkBoundary();
	               var start = range.startContainer;
	               list = domUtils.findParents(start,true,function(node){
	                   return !domUtils.isBlockElm(node) && node.nodeType == 1;
	               });
	               //a不能加入格式刷, 并且克隆节点
	               for(var i=0,ci;ci=list[i];i++){
	                   if(ci.tagName == 'A'){
	                       list.splice(i,1);
	                       break;
	                   }
	               }

	            }

	            me.addListener('mouseup',addList);
	            flag = 1;


	        },
	        queryCommandState : function() {
	            return flag;
	        },
	        notNeedUndo : 1
	    };
	};



	// plugins/searchreplace.js
	///import core
	///commands 查找替换
	///commandsName  SearchReplace
	///commandsTitle  查询替换
	///commandsDialog  dialogs\searchreplace
	/**
	 * @description 查找替换
	 * @author zhanyi
	 */

	UE.plugin.register('searchreplace',function(){
	    var me = this;

	    var _blockElm = {'table':1,'tbody':1,'tr':1,'ol':1,'ul':1};

	    function findTextInString(textContent,opt,currentIndex){
	        var str = opt.searchStr;
	        if(opt.dir == -1){
	            textContent = textContent.split('').reverse().join('');
	            str = str.split('').reverse().join('');
	            currentIndex = textContent.length - currentIndex;

	        }
	        var reg = new RegExp(str,'g' + (opt.casesensitive ? '' : 'i')),match;

	        while(match = reg.exec(textContent)){
	            if(match.index >= currentIndex){
	                return opt.dir == -1 ? textContent.length - match.index - opt.searchStr.length : match.index;
	            }
	        }
	        return  -1
	    }
	    function findTextBlockElm(node,currentIndex,opt){
	        var textContent,index,methodName = opt.all || opt.dir == 1 ? 'getNextDomNode' : 'getPreDomNode';
	        if(domUtils.isBody(node)){
	            node = node.firstChild;
	        }
	        var first = 1;
	        while(node){
	            textContent = node.nodeType == 3 ? node.nodeValue : node[browser.ie ? 'innerText' : 'textContent'];
	            index = findTextInString(textContent,opt,currentIndex );
	            first = 0;
	            if(index!=-1){
	                return {
	                    'node':node,
	                    'index':index
	                }
	            }
	            node = domUtils[methodName](node);
	            while(node && _blockElm[node.nodeName.toLowerCase()]){
	                node = domUtils[methodName](node,true);
	            }
	            if(node){
	                currentIndex = opt.dir == -1 ? (node.nodeType == 3 ? node.nodeValue : node[browser.ie ? 'innerText' : 'textContent']).length : 0;
	            }

	        }
	    }
	    function findNTextInBlockElm(node,index,str){
	        var currentIndex = 0,
	            currentNode = node.firstChild,
	            currentNodeLength = 0,
	            result;
	        while(currentNode){
	            if(currentNode.nodeType == 3){
	                currentNodeLength = currentNode.nodeValue.replace(/(^[\t\r\n]+)|([\t\r\n]+$)/,'').length;
	                currentIndex += currentNodeLength;
	                if(currentIndex >= index){
	                    return {
	                        'node':currentNode,
	                        'index': currentNodeLength - (currentIndex - index)
	                    }
	                }
	            }else if(!dtd.$empty[currentNode.tagName]){
	                currentNodeLength = currentNode[browser.ie ? 'innerText' : 'textContent'].replace(/(^[\t\r\n]+)|([\t\r\n]+$)/,'').length
	                currentIndex += currentNodeLength;
	                if(currentIndex >= index){
	                    result = findNTextInBlockElm(currentNode,currentNodeLength - (currentIndex - index),str);
	                    if(result){
	                        return result;
	                    }
	                }
	            }
	            currentNode = domUtils.getNextDomNode(currentNode);

	        }
	    }

	    function searchReplace(me,opt){

	        var rng = me.selection.getRange(),
	            startBlockNode,
	            searchStr = opt.searchStr,
	            span = me.document.createElement('span');
	        span.innerHTML = '$$ueditor_searchreplace_key$$';

	        rng.shrinkBoundary(true);

	        //判断是不是第一次选中
	        if(!rng.collapsed){
	            rng.select();
	            var rngText = me.selection.getText();
	            if(new RegExp('^' + opt.searchStr + '$',(opt.casesensitive ? '' : 'i')).test(rngText)){
	                if(opt.replaceStr != undefined){
	                    replaceText(rng,opt.replaceStr);
	                    rng.select();
	                    return true;
	                }else{
	                    rng.collapse(opt.dir == -1)
	                }

	            }
	        }


	        rng.insertNode(span);
	        rng.enlargeToBlockElm(true);
	        startBlockNode = rng.startContainer;
	        var currentIndex = startBlockNode[browser.ie ? 'innerText' : 'textContent'].indexOf('$$ueditor_searchreplace_key$$');
	        rng.setStartBefore(span);
	        domUtils.remove(span);
	        var result = findTextBlockElm(startBlockNode,currentIndex,opt);
	        if(result){
	            var rngStart = findNTextInBlockElm(result.node,result.index,searchStr);
	            var rngEnd = findNTextInBlockElm(result.node,result.index + searchStr.length,searchStr);
	            rng.setStart(rngStart.node,rngStart.index).setEnd(rngEnd.node,rngEnd.index);

	            if(opt.replaceStr !== undefined){
	                replaceText(rng,opt.replaceStr)
	            }
	            rng.select();
	            return true;
	        }else{
	            rng.setCursor()
	        }

	    }
	    function replaceText(rng,str){

	        str = me.document.createTextNode(str);
	        rng.deleteContents().insertNode(str);

	    }
	    return {
	        commands:{
	            'searchreplace':{
	                execCommand:function(cmdName,opt){
	                    utils.extend(opt,{
	                        all : false,
	                        casesensitive : false,
	                        dir : 1
	                    },true);
	                    var num = 0;
	                    if(opt.all){

	                        var rng = me.selection.getRange(),
	                            first = me.body.firstChild;
	                        if(first && first.nodeType == 1){
	                            rng.setStart(first,0);
	                            rng.shrinkBoundary(true);
	                        }else if(first.nodeType == 3){
	                            rng.setStartBefore(first)
	                        }
	                        rng.collapse(true).select(true);
	                        if(opt.replaceStr !== undefined){
	                            me.fireEvent('saveScene');
	                        }
	                        while(searchReplace(this,opt)){
	                            num++;
	                        }
	                        if(num){
	                            me.fireEvent('saveScene');
	                        }
	                    }else{
	                        if(opt.replaceStr !== undefined){
	                            me.fireEvent('saveScene');
	                        }
	                        if(searchReplace(this,opt)){
	                            num++
	                        }
	                        if(num){
	                            me.fireEvent('saveScene');
	                        }

	                    }

	                    return num;
	                },
	                notNeedUndo:1
	            }
	        }
	    }
	});

	// plugins/customstyle.js
	/**
	 * 自定义样式
	 * @file
	 * @since 1.2.6.1
	 */

	/**
	 * 根据config配置文件里“customstyle”选项的值对匹配的标签执行样式替换。
	 * @command customstyle
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * editor.execCommand( 'customstyle' );
	 * ```
	 */
	UE.plugins['customstyle'] = function() {
	    var me = this;
	    me.setOpt({ 'customstyle':[
	        {tag:'h1',name:'tc', style:'font-size:32px;font-weight:bold;border-bottom:#ccc 2px solid;padding:0 4px 0 0;text-align:center;margin:0 0 20px 0;'},
	        {tag:'h1',name:'tl', style:'font-size:32px;font-weight:bold;border-bottom:#ccc 2px solid;padding:0 4px 0 0;text-align:left;margin:0 0 10px 0;'},
	        {tag:'span',name:'im', style:'font-size:16px;font-style:italic;font-weight:bold;line-height:18px;'},
	        {tag:'span',name:'hi', style:'font-size:16px;font-style:italic;font-weight:bold;color:rgb(51, 153, 204);line-height:18px;'}
	    ]});
	    me.commands['customstyle'] = {
	        execCommand : function(cmdName, obj) {
	            var me = this,
	                    tagName = obj.tag,
	                    node = domUtils.findParent(me.selection.getStart(), function(node) {
	                        return node.getAttribute('label');
	                    }, true),
	                    range,bk,tmpObj = {};
	            for (var p in obj) {
	               if(obj[p]!==undefined)
	                    tmpObj[p] = obj[p];
	            }
	            delete tmpObj.tag;
	            if (node && node.getAttribute('label') == obj.label) {
	                range = this.selection.getRange();
	                bk = range.createBookmark();
	                if (range.collapsed) {
	                    //trace:1732 删掉自定义标签，要有p来回填站位
	                    if(dtd.$block[node.tagName]){
	                        var fillNode = me.document.createElement('p');
	                        domUtils.moveChild(node, fillNode);
	                        node.parentNode.insertBefore(fillNode, node);
	                        domUtils.remove(node);
	                    }else{
	                        domUtils.remove(node,true);
	                    }

	                } else {

	                    var common = domUtils.getCommonAncestor(bk.start, bk.end),
	                            nodes = domUtils.getElementsByTagName(common, tagName);
	                    if(new RegExp(tagName,'i').test(common.tagName)){
	                        nodes.push(common);
	                    }
	                    for (var i = 0,ni; ni = nodes[i++];) {
	                        if (ni.getAttribute('label') == obj.label) {
	                            var ps = domUtils.getPosition(ni, bk.start),pe = domUtils.getPosition(ni, bk.end);
	                            if ((ps & domUtils.POSITION_FOLLOWING || ps & domUtils.POSITION_CONTAINS)
	                                    &&
	                                    (pe & domUtils.POSITION_PRECEDING || pe & domUtils.POSITION_CONTAINS)
	                                    )
	                                if (dtd.$block[tagName]) {
	                                    var fillNode = me.document.createElement('p');
	                                    domUtils.moveChild(ni, fillNode);
	                                    ni.parentNode.insertBefore(fillNode, ni);
	                                }
	                            domUtils.remove(ni, true);
	                        }
	                    }
	                    node = domUtils.findParent(common, function(node) {
	                        return node.getAttribute('label') == obj.label;
	                    }, true);
	                    if (node) {

	                        domUtils.remove(node, true);

	                    }

	                }
	                range.moveToBookmark(bk).select();
	            } else {
	                if (dtd.$block[tagName]) {
	                    this.execCommand('paragraph', tagName, tmpObj,'customstyle');
	                    range = me.selection.getRange();
	                    if (!range.collapsed) {
	                        range.collapse();
	                        node = domUtils.findParent(me.selection.getStart(), function(node) {
	                            return node.getAttribute('label') == obj.label;
	                        }, true);
	                        var pNode = me.document.createElement('p');
	                        domUtils.insertAfter(node, pNode);
	                        domUtils.fillNode(me.document, pNode);
	                        range.setStart(pNode, 0).setCursor();
	                    }
	                } else {

	                    range = me.selection.getRange();
	                    if (range.collapsed) {
	                        node = me.document.createElement(tagName);
	                        domUtils.setAttributes(node, tmpObj);
	                        range.insertNode(node).setStart(node, 0).setCursor();

	                        return;
	                    }

	                    bk = range.createBookmark();
	                    range.applyInlineStyle(tagName, tmpObj).moveToBookmark(bk).select();
	                }
	            }

	        },
	        queryCommandValue : function() {
	            var parent = domUtils.filterNodeList(
	                this.selection.getStartElementPath(),
	                function(node){return node.getAttribute('label')}
	            );
	            return  parent ? parent.getAttribute('label') : '';
	        }
	    };
	    //当去掉customstyle是，如果是块元素，用p代替
	    me.addListener('keyup', function(type, evt) {
	        var keyCode = evt.keyCode || evt.which;

	        if (keyCode == 32 || keyCode == 13) {
	            var range = me.selection.getRange();
	            if (range.collapsed) {
	                var node = domUtils.findParent(me.selection.getStart(), function(node) {
	                    return node.getAttribute('label');
	                }, true);
	                if (node && dtd.$block[node.tagName] && domUtils.isEmptyNode(node)) {
	                        var p = me.document.createElement('p');
	                        domUtils.insertAfter(node, p);
	                        domUtils.fillNode(me.document, p);
	                        domUtils.remove(node);
	                        range.setStart(p, 0).setCursor();


	                }
	            }
	        }
	    });
	};

	// plugins/catchremoteimage.js
	///import core
	///commands 远程图片抓取
	///commandsName  catchRemoteImage,catchremoteimageenable
	///commandsTitle  远程图片抓取
	/**
	 * 远程图片抓取,当开启本插件时所有不符合本地域名的图片都将被抓取成为本地服务器上的图片
	 */
	UE.plugins['catchremoteimage'] = function () {
	    var me = this,
	        ajax = UE.ajax;

	    /* 设置默认值 */
	    if (me.options.catchRemoteImageEnable === false) return;
	    me.setOpt({
	        catchRemoteImageEnable: false
	    });

	    me.addListener("afterpaste", function () {
	        me.fireEvent("catchRemoteImage");
	    });

	    me.addListener("catchRemoteImage", function () {

	        var catcherLocalDomain = me.getOpt('catcherLocalDomain'),
	            catcherActionUrl = me.getActionUrl(me.getOpt('catcherActionName')),
	            catcherUrlPrefix = me.getOpt('catcherUrlPrefix'),
	            catcherFieldName = me.getOpt('catcherFieldName');

	        var remoteImages = [],
	            imgs = domUtils.getElementsByTagName(me.document, "img"),
	            test = function (src, urls) {
	                if (src.indexOf(location.host) != -1 || /(^\.)|(^\/)/.test(src)) {
	                    return true;
	                }
	                if (urls) {
	                    for (var j = 0, url; url = urls[j++];) {
	                        if (src.indexOf(url) !== -1) {
	                            return true;
	                        }
	                    }
	                }
	                return false;
	            };

	        for (var i = 0, ci; ci = imgs[i++];) {
	            if (ci.getAttribute("word_img")) {
	                continue;
	            }
	            var src = ci.getAttribute("_src") || ci.src || "";
	            if (/^(https?|ftp):/i.test(src) && !test(src, catcherLocalDomain)) {
	                remoteImages.push(src);
	            }
	        }

	        if (remoteImages.length) {
	            catchremoteimage(remoteImages, {
	                //成功抓取
	                success: function (r) {
	                    try {
	                        var info = r.state !== undefined ? r:eval("(" + r.responseText + ")");
	                    } catch (e) {
	                        return;
	                    }

	                    /* 获取源路径和新路径 */
	                    var i, j, ci, cj, oldSrc, newSrc, list = info.list;

	                    for (i = 0; ci = imgs[i++];) {
	                        oldSrc = ci.getAttribute("_src") || ci.src || "";
	                        for (j = 0; cj = list[j++];) {
	                            if (oldSrc == cj.source && cj.state == "SUCCESS") {  //抓取失败时不做替换处理
	                                newSrc = catcherUrlPrefix + cj.url;
	                                domUtils.setAttributes(ci, {
	                                    "src": newSrc,
	                                    "_src": newSrc
	                                });
	                                break;
	                            }
	                        }
	                    }
	                    me.fireEvent('catchremotesuccess')
	                },
	                //回调失败，本次请求超时
	                error: function () {
	                    me.fireEvent("catchremoteerror");
	                }
	            });
	        }

	        function catchremoteimage(imgs, callbacks) {
	            var params = utils.serializeParam(me.queryCommandValue('serverparam')) || '',
	                url = utils.formatUrl(catcherActionUrl + (catcherActionUrl.indexOf('?') == -1 ? '?':'&') + params),
	                isJsonp = utils.isCrossDomainUrl(url),
	                opt = {
	                    'method': 'POST',
	                    'dataType': isJsonp ? 'jsonp':'',
	                    'timeout': 60000, //单位：毫秒，回调请求超时设置。目标用户如果网速不是很快的话此处建议设置一个较大的数值
	                    'onsuccess': callbacks["success"],
	                    'onerror': callbacks["error"]
	                };
	            opt[catcherFieldName] = imgs;
	            ajax.request(url, opt);
	        }

	    });
	};

	// plugins/snapscreen.js
	/**
	 * 截屏插件，为UEditor提供插入支持
	 * @file
	 * @since 1.4.2
	 */
	UE.plugin.register('snapscreen', function (){

	    var me = this;
	    var snapplugin;

	    function getLocation(url){
	        var search,
	            a = document.createElement('a'),
	            params = utils.serializeParam(me.queryCommandValue('serverparam')) || '';

	        a.href = url;
	        if (browser.ie) {
	            a.href = a.href;
	        }


	        search = a.search;
	        if (params) {
	            search = search + (search.indexOf('?') == -1 ? '?':'&')+ params;
	            search = search.replace(/[&]+/ig, '&');
	        }
	        return {
	            'port': a.port,
	            'hostname': a.hostname,
	            'path': a.pathname + search ||  + a.hash
	        }
	    }

	    return {
	        commands:{
	            /**
	             * 字体背景颜色
	             * @command snapscreen
	             * @method execCommand
	             * @param { String } cmd 命令字符串
	             * @example
	             * ```javascript
	             * editor.execCommand('snapscreen');
	             * ```
	             */
	            'snapscreen':{
	                execCommand:function (cmd) {
	                    var url, local, res;
	                    var lang = me.getLang("snapScreen_plugin");

	                    if(!snapplugin){
	                        var container = me.container;
	                        var doc = me.container.ownerDocument || me.container.document;
	                        snapplugin = doc.createElement("object");
	                        try{snapplugin.type = "application/x-pluginbaidusnap";}catch(e){
	                            return;
	                        }
	                        snapplugin.style.cssText = "position:absolute;left:-9999px;width:0;height:0;";
	                        snapplugin.setAttribute("width","0");
	                        snapplugin.setAttribute("height","0");
	                        container.appendChild(snapplugin);
	                    }

	                    function onSuccess(rs){
	                        try{
	                            rs = eval("("+ rs +")");
	                            if(rs.state == 'SUCCESS'){
	                                var opt = me.options;
	                                me.execCommand('insertimage', {
	                                    src: opt.snapscreenUrlPrefix + rs.url,
	                                    _src: opt.snapscreenUrlPrefix + rs.url,
	                                    alt: rs.title || '',
	                                    floatStyle: opt.snapscreenImgAlign
	                                });
	                            } else {
	                                alert(rs.state);
	                            }
	                        }catch(e){
	                            alert(lang.callBackErrorMsg);
	                        }
	                    }
	                    url = me.getActionUrl(me.getOpt('snapscreenActionName'));
	                    local = getLocation(url);
	                    setTimeout(function () {
	                        try{
	                            res =snapplugin.saveSnapshot(local.hostname, local.path, local.port);
	                        }catch(e){
	                            me.ui._dialogs['snapscreenDialog'].open();
	                            return;
	                        }

	                        onSuccess(res);
	                    }, 50);
	                },
	                queryCommandState: function(){
	                    return (navigator.userAgent.indexOf("Windows",0) != -1) ? 0:-1;
	                }
	            }
	        }
	    }
	}
	);


	// plugins/insertparagraph.js
	/**
	 * 插入段落
	 * @file
	 * @since 1.2.6.1
	 */


	/**
	 * 插入段落
	 * @command insertparagraph
	 * @method execCommand
	 * @param { String } cmd 命令字符串
	 * @example
	 * ```javascript
	 * //editor是编辑器实例
	 * editor.execCommand( 'insertparagraph' );
	 * ```
	 */

	UE.commands['insertparagraph'] = {
	    execCommand : function( cmdName,front) {
	        var me = this,
	            range = me.selection.getRange(),
	            start = range.startContainer,tmpNode;
	        while(start ){
	            if(domUtils.isBody(start)){
	                break;
	            }
	            tmpNode = start;
	            start = start.parentNode;
	        }
	        if(tmpNode){
	            var p = me.document.createElement('p');
	            if(front){
	                tmpNode.parentNode.insertBefore(p,tmpNode)
	            }else{
	                tmpNode.parentNode.insertBefore(p,tmpNode.nextSibling)
	            }
	            domUtils.fillNode(me.document,p);
	            range.setStart(p,0).setCursor(false,true);
	        }
	    }
	};



	// plugins/webapp.js
	/**
	 * 百度应用
	 * @file
	 * @since 1.2.6.1
	 */


	/**
	 * 插入百度应用
	 * @command webapp
	 * @method execCommand
	 * @remind 需要百度APPKey
	 * @remind 百度应用主页： <a href="http://app.baidu.com/" target="_blank">http://app.baidu.com/</a>
	 * @param { Object } appOptions 应用所需的参数项， 支持的key有： title=>应用标题， width=>应用容器宽度，
	 * height=>应用容器高度，logo=>应用logo，url=>应用地址
	 * @example
	 * ```javascript
	 * //editor是编辑器实例
	 * //在编辑器里插入一个“植物大战僵尸”的APP
	 * editor.execCommand( 'webapp' , {
	 *     title: '植物大战僵尸',
	 *     width: 560,
	 *     height: 465,
	 *     logo: '应用展示的图片',
	 *     url: '百度应用的地址'
	 * } );
	 * ```
	 */

	//UE.plugins['webapp'] = function () {
//	    var me = this;
//	    function createInsertStr( obj, toIframe, addParagraph ) {
//	        return !toIframe ?
//	                (addParagraph ? '<p>' : '') + '<img title="'+obj.title+'" width="' + obj.width + '" height="' + obj.height + '"' +
//	                        ' src="' + me.options.UEDITOR_HOME_URL + 'themes/default/images/spacer.gif" style="background:url(' + obj.logo+') no-repeat center center; border:1px solid gray;" class="edui-faked-webapp" _url="' + obj.url + '" />' +
//	                        (addParagraph ? '</p>' : '')
//	                :
//	                '<iframe class="edui-faked-webapp" title="'+obj.title+'" width="' + obj.width + '" height="' + obj.height + '"  scrolling="no" frameborder="0" src="' + obj.url + '" logo_url = '+obj.logo+'></iframe>';
//	    }
	//
//	    function switchImgAndIframe( img2frame ) {
//	        var tmpdiv,
//	                nodes = domUtils.getElementsByTagName( me.document, !img2frame ? "iframe" : "img" );
//	        for ( var i = 0, node; node = nodes[i++]; ) {
//	            if ( node.className != "edui-faked-webapp" ){
//	                continue;
//	            }
//	            tmpdiv = me.document.createElement( "div" );
//	            tmpdiv.innerHTML = createInsertStr( img2frame ? {url:node.getAttribute( "_url" ), width:node.width, height:node.height,title:node.title,logo:node.style.backgroundImage.replace("url(","").replace(")","")} : {url:node.getAttribute( "src", 2 ),title:node.title, width:node.width, height:node.height,logo:node.getAttribute("logo_url")}, img2frame ? true : false,false );
//	            node.parentNode.replaceChild( tmpdiv.firstChild, node );
//	        }
//	    }
	//
//	    me.addListener( "beforegetcontent", function () {
//	        switchImgAndIframe( true );
//	    } );
//	    me.addListener( 'aftersetcontent', function () {
//	        switchImgAndIframe( false );
//	    } );
//	    me.addListener( 'aftergetcontent', function ( cmdName ) {
//	        if ( cmdName == 'aftergetcontent' && me.queryCommandState( 'source' ) ){
//	            return;
//	        }
//	        switchImgAndIframe( false );
//	    } );
	//
//	    me.commands['webapp'] = {
//	        execCommand:function ( cmd, obj ) {
//	            me.execCommand( "inserthtml", createInsertStr( obj, false,true ) );
//	        }
//	    };
	//};

	UE.plugin.register('webapp', function (){
	    var me = this;
	    function createInsertStr(obj,toEmbed){
	        return  !toEmbed ?
	            '<img title="'+obj.title+'" width="' + obj.width + '" height="' + obj.height + '"' +
	                ' src="' + me.options.UEDITOR_HOME_URL + 'themes/default/images/spacer.gif" _logo_url="'+obj.logo+'" style="background:url(' + obj.logo
	                +') no-repeat center center; border:1px solid gray;" class="edui-faked-webapp" _url="' + obj.url + '" ' +
	                (obj.align && !obj.cssfloat? 'align="' + obj.align + '"' : '') +
	                (obj.cssfloat ? 'style="float:' + obj.cssfloat + '"' : '') +
	                '/>'
	            :
	            '<iframe class="edui-faked-webapp" title="'+obj.title+'" ' +
	                (obj.align && !obj.cssfloat? 'align="' + obj.align + '"' : '') +
	                (obj.cssfloat ? 'style="float:' + obj.cssfloat + '"' : '') +
	                'width="' + obj.width + '" height="' + obj.height + '"  scrolling="no" frameborder="0" src="' + obj.url + '" logo_url = "'+obj.logo+'"></iframe>'

	    }
	    return {
	        outputRule: function(root){
	            utils.each(root.getNodesByTagName('img'),function(node){
	                var html;
	                if(node.getAttr('class') == 'edui-faked-webapp'){
	                    html =  createInsertStr({
	                        title:node.getAttr('title'),
	                        'width':node.getAttr('width'),
	                        'height':node.getAttr('height'),
	                        'align':node.getAttr('align'),
	                        'cssfloat':node.getStyle('float'),
	                        'url':node.getAttr("_url"),
	                        'logo':node.getAttr('_logo_url')
	                    },true);
	                    var embed = UE.uNode.createElement(html);
	                    node.parentNode.replaceChild(embed,node);
	                }
	            })
	        },
	        inputRule:function(root){
	            utils.each(root.getNodesByTagName('iframe'),function(node){
	                if(node.getAttr('class') == 'edui-faked-webapp'){
	                    var img = UE.uNode.createElement(createInsertStr({
	                        title:node.getAttr('title'),
	                        'width':node.getAttr('width'),
	                        'height':node.getAttr('height'),
	                        'align':node.getAttr('align'),
	                        'cssfloat':node.getStyle('float'),
	                        'url':node.getAttr("src"),
	                        'logo':node.getAttr('logo_url')
	                    }));
	                    node.parentNode.replaceChild(img,node);
	                }
	            })

	        },
	        commands:{
	            /**
	             * 插入百度应用
	             * @command webapp
	             * @method execCommand
	             * @remind 需要百度APPKey
	             * @remind 百度应用主页： <a href="http://app.baidu.com/" target="_blank">http://app.baidu.com/</a>
	             * @param { Object } appOptions 应用所需的参数项， 支持的key有： title=>应用标题， width=>应用容器宽度，
	             * height=>应用容器高度，logo=>应用logo，url=>应用地址
	             * @example
	             * ```javascript
	             * //editor是编辑器实例
	             * //在编辑器里插入一个“植物大战僵尸”的APP
	             * editor.execCommand( 'webapp' , {
	             *     title: '植物大战僵尸',
	             *     width: 560,
	             *     height: 465,
	             *     logo: '应用展示的图片',
	             *     url: '百度应用的地址'
	             * } );
	             * ```
	             */
	            'webapp':{
	                execCommand:function (cmd, obj) {

	                    var me = this,
	                        str = createInsertStr(utils.extend(obj,{
	                            align:'none'
	                        }), false);
	                    me.execCommand("inserthtml",str);
	                },
	                queryCommandState:function () {
	                    var me = this,
	                        img = me.selection.getRange().getClosedNode(),
	                        flag = img && (img.className == "edui-faked-webapp");
	                    return flag ? 1 : 0;
	                }
	            }
	        }
	    }
	});

	// plugins/template.js
	///import core
	///import plugins\inserthtml.js
	///import plugins\cleardoc.js
	///commands 模板
	///commandsName  template
	///commandsTitle  模板
	///commandsDialog  dialogs\template
	UE.plugins['template'] = function () {
	    UE.commands['template'] = {
	        execCommand:function (cmd, obj) {
	            obj.html && this.execCommand("inserthtml", obj.html);
	        }
	    };
	    this.addListener("click", function (type, evt) {
	        var el = evt.target || evt.srcElement,
	            range = this.selection.getRange();
	        var tnode = domUtils.findParent(el, function (node) {
	            if (node.className && domUtils.hasClass(node, "ue_t")) {
	                return node;
	            }
	        }, true);
	        tnode && range.selectNode(tnode).shrinkBoundary().select();
	    });
	    this.addListener("keydown", function (type, evt) {
	        var range = this.selection.getRange();
	        if (!range.collapsed) {
	            if (!evt.ctrlKey && !evt.metaKey && !evt.shiftKey && !evt.altKey) {
	                var tnode = domUtils.findParent(range.startContainer, function (node) {
	                    if (node.className && domUtils.hasClass(node, "ue_t")) {
	                        return node;
	                    }
	                }, true);
	                if (tnode) {
	                    domUtils.removeClasses(tnode, ["ue_t"]);
	                }
	            }
	        }
	    });
	};


	// plugins/music.js
	/**
	 * 插入音乐命令
	 * @file
	 */
	UE.plugin.register('music', function (){
	    var me = this;
	    function creatInsertStr(url,width,height,align,cssfloat,toEmbed){
	        return  !toEmbed ?
	                '<img ' +
	                    (align && !cssfloat? 'align="' + align + '"' : '') +
	                    (cssfloat ? 'style="float:' + cssfloat + '"' : '') +
	                    ' width="'+ width +'" height="' + height + '" _url="'+url+'" class="edui-faked-music"' +
	                    ' src="'+me.options.langPath+me.options.lang+'/images/music.png" />'
	            :
	            '<embed type="application/x-shockwave-flash" class="edui-faked-music" pluginspage="http://www.macromedia.com/go/getflashplayer"' +
	                ' src="' + url + '" width="' + width  + '" height="' + height  + '" '+ (align && !cssfloat? 'align="' + align + '"' : '') +
	                (cssfloat ? 'style="float:' + cssfloat + '"' : '') +
	                ' wmode="transparent" play="true" loop="false" menu="false" allowscriptaccess="never" allowfullscreen="true" >';
	    }
	    return {
	        outputRule: function(root){
	            utils.each(root.getNodesByTagName('img'),function(node){
	                var html;
	                if(node.getAttr('class') == 'edui-faked-music'){
	                    var cssfloat = node.getStyle('float');
	                    var align = node.getAttr('align');
	                    html =  creatInsertStr(node.getAttr("_url"), node.getAttr('width'), node.getAttr('height'), align, cssfloat, true);
	                    var embed = UE.uNode.createElement(html);
	                    node.parentNode.replaceChild(embed,node);
	                }
	            })
	        },
	        inputRule:function(root){
	            utils.each(root.getNodesByTagName('embed'),function(node){
	                if(node.getAttr('class') == 'edui-faked-music'){
	                    var cssfloat = node.getStyle('float');
	                    var align = node.getAttr('align');
	                    html =  creatInsertStr(node.getAttr("src"), node.getAttr('width'), node.getAttr('height'), align, cssfloat,false);
	                    var img = UE.uNode.createElement(html);
	                    node.parentNode.replaceChild(img,node);
	                }
	            })

	        },
	        commands:{
	            /**
	             * 插入音乐
	             * @command music
	             * @method execCommand
	             * @param { Object } musicOptions 插入音乐的参数项， 支持的key有： url=>音乐地址；
	             * width=>音乐容器宽度；height=>音乐容器高度；align=>音乐文件的对齐方式， 可选值有: left, center, right, none
	             * @example
	             * ```javascript
	             * //editor是编辑器实例
	             * //在编辑器里插入一个“植物大战僵尸”的APP
	             * editor.execCommand( 'music' , {
	             *     width: 400,
	             *     height: 95,
	             *     align: "center",
	             *     url: "音乐地址"
	             * } );
	             * ```
	             */
	            'music':{
	                execCommand:function (cmd, musicObj) {
	                    var me = this,
	                        str = creatInsertStr(musicObj.url, musicObj.width || 400, musicObj.height || 95, "none", false);
	                    me.execCommand("inserthtml",str);
	                },
	                queryCommandState:function () {
	                    var me = this,
	                        img = me.selection.getRange().getClosedNode(),
	                        flag = img && (img.className == "edui-faked-music");
	                    return flag ? 1 : 0;
	                }
	            }
	        }
	    }
	});

	// plugins/autoupload.js
	/**
	 * @description
	 * 1.拖放文件到编辑区域，自动上传并插入到选区
	 * 2.插入粘贴板的图片，自动上传并插入到选区
	 * @author Jinqn
	 * @date 2013-10-14
	 */
	UE.plugin.register('autoupload', function (){

	    function sendAndInsertFile(file, editor) {
	        var me  = editor;
	        //模拟数据
	        var fieldName, urlPrefix, maxSize, allowFiles, actionUrl,
	            loadingHtml, errorHandler, successHandler,
	            filetype = /image\/\w+/i.test(file.type) ? 'image':'file',
	            loadingId = 'loading_' + (+new Date()).toString(36);

	        fieldName = me.getOpt(filetype + 'FieldName');
	        urlPrefix = me.getOpt(filetype + 'UrlPrefix');
	        maxSize = me.getOpt(filetype + 'MaxSize');
	        allowFiles = me.getOpt(filetype + 'AllowFiles');
	        actionUrl = me.getActionUrl(me.getOpt(filetype + 'ActionName'));
	        errorHandler = function(title) {
	            var loader = me.document.getElementById(loadingId);
	            loader && domUtils.remove(loader);
	            me.fireEvent('showmessage', {
	                'id': loadingId,
	                'content': title,
	                'type': 'error',
	                'timeout': 4000
	            });
	        };

	        if (filetype == 'image') {
	            loadingHtml = '<img class="loadingclass" id="' + loadingId + '" src="' +
	                me.options.themePath + me.options.theme +
	                '/images/spacer.gif" title="' + (me.getLang('autoupload.loading') || '') + '" >';
	            successHandler = function(data) {
	                var link = urlPrefix + data.url,
	                    loader = me.document.getElementById(loadingId);
	                if (loader) {
	                    loader.setAttribute('src', link);
	                    loader.setAttribute('_src', link);
	                    loader.setAttribute('title', data.title || '');
	                    loader.setAttribute('alt', data.original || '');
	                    loader.removeAttribute('id');
	                    domUtils.removeClasses(loader, 'loadingclass');
	                }
	            };
	        } else {
	            loadingHtml = '<p>' +
	                '<img class="loadingclass" id="' + loadingId + '" src="' +
	                me.options.themePath + me.options.theme +
	                '/images/spacer.gif" title="' + (me.getLang('autoupload.loading') || '') + '" >' +
	                '</p>';
	            successHandler = function(data) {
	                var link = urlPrefix + data.url,
	                    loader = me.document.getElementById(loadingId);

	                var rng = me.selection.getRange(),
	                    bk = rng.createBookmark();
	                rng.selectNode(loader).select();
	                me.execCommand('insertfile', {'url': link});
	                rng.moveToBookmark(bk).select();
	            };
	        }

	        /* 插入loading的占位符 */
	        me.execCommand('inserthtml', loadingHtml);

	        /* 判断后端配置是否没有加载成功 */
	        if (!me.getOpt(filetype + 'ActionName')) {
	            errorHandler(me.getLang('autoupload.errorLoadConfig'));
	            return;
	        }
	        /* 判断文件大小是否超出限制 */
	        if(file.size > maxSize) {
	            errorHandler(me.getLang('autoupload.exceedSizeError'));
	            return;
	        }
	        /* 判断文件格式是否超出允许 */
	        var fileext = file.name ? file.name.substr(file.name.lastIndexOf('.')):'';
	        if ((fileext && filetype != 'image') || (allowFiles && (allowFiles.join('') + '.').indexOf(fileext.toLowerCase() + '.') == -1)) {
	            errorHandler(me.getLang('autoupload.exceedTypeError'));
	            return;
	        }

	        /* 创建Ajax并提交 */
	        var xhr = new XMLHttpRequest(),
	            fd = new FormData(),
	            params = utils.serializeParam(me.queryCommandValue('serverparam')) || '',
	            url = utils.formatUrl(actionUrl + (actionUrl.indexOf('?') == -1 ? '?':'&') + params);

	        fd.append(fieldName, file, file.name || ('blob.' + file.type.substr('image/'.length)));
	        fd.append('type', 'ajax');
	        xhr.open("post", url, true);
	        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
	        xhr.addEventListener('load', function (e) {
	            try{
	                var json = (new Function("return " + utils.trim(e.target.response)))();
	                if (json.state == 'SUCCESS' && json.url) {
	                    successHandler(json);
	                } else {
	                    errorHandler(json.state);
	                }
	            }catch(er){
	                errorHandler(me.getLang('autoupload.loadError'));
	            }
	        });
	        xhr.send(fd);
	    }

	    function getPasteImage(e){
	        return e.clipboardData && e.clipboardData.items && e.clipboardData.items.length == 1 && /^image\//.test(e.clipboardData.items[0].type) ? e.clipboardData.items:null;
	    }
	    function getDropImage(e){
	        return  e.dataTransfer && e.dataTransfer.files ? e.dataTransfer.files:null;
	    }

	    return {
	        outputRule: function(root){
	            utils.each(root.getNodesByTagName('img'),function(n){
	                if (/\b(loaderrorclass)|(bloaderrorclass)\b/.test(n.getAttr('class'))) {
	                    n.parentNode.removeChild(n);
	                }
	            });
	            utils.each(root.getNodesByTagName('p'),function(n){
	                if (/\bloadpara\b/.test(n.getAttr('class'))) {
	                    n.parentNode.removeChild(n);
	                }
	            });
	        },
	        bindEvents:{
	            //插入粘贴板的图片，拖放插入图片
	            'ready':function(e){
	                var me = this;
	                if(window.FormData && window.FileReader) {
	                    domUtils.on(me.body, 'paste drop', function(e){
	                        var hasImg = false,
	                            items;
	                        //获取粘贴板文件列表或者拖放文件列表
	                        items = e.type == 'paste' ? getPasteImage(e):getDropImage(e);
	                        if(items){
	                            var len = items.length,
	                                file;
	                            while (len--){
	                                file = items[len];
	                                if(file.getAsFile) file = file.getAsFile();
	                                if(file && file.size > 0) {
	                                    sendAndInsertFile(file, me);
	                                    hasImg = true;
	                                }
	                            }
	                            hasImg && e.preventDefault();
	                        }

	                    });
	                    //取消拖放图片时出现的文字光标位置提示
	                    domUtils.on(me.body, 'dragover', function (e) {
	                        if(e.dataTransfer.types[0] == 'Files') {
	                            e.preventDefault();
	                        }
	                    });

	                    //设置loading的样式
	                    utils.cssRule('loading',
	                        '.loadingclass{display:inline-block;cursor:default;background: url(\''
	                            + this.options.themePath
	                            + this.options.theme +'/images/loading.gif\') no-repeat center center transparent;border:1px solid #cccccc;margin-left:1px;height: 22px;width: 22px;}\n' +
	                            '.loaderrorclass{display:inline-block;cursor:default;background: url(\''
	                            + this.options.themePath
	                            + this.options.theme +'/images/loaderror.png\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;' +
	                            '}',
	                        this.document);
	                }
	            }
	        }
	    }
	});

	// plugins/autosave.js
	UE.plugin.register('autosave', function (){

	    var me = this,
	        //无限循环保护
	        lastSaveTime = new Date(),
	        //最小保存间隔时间
	        MIN_TIME = 20,
	        //auto save key
	        saveKey = null;

	    function save ( editor ) {

	        var saveData;

	        if ( new Date() - lastSaveTime < MIN_TIME ) {
	            return;
	        }

	        if ( !editor.hasContents() ) {
	            //这里不能调用命令来删除， 会造成事件死循环
	            saveKey && me.removePreferences( saveKey );
	            return;
	        }

	        lastSaveTime = new Date();

	        editor._saveFlag = null;

	        saveData = me.body.innerHTML;

	        if ( editor.fireEvent( "beforeautosave", {
	            content: saveData
	        } ) === false ) {
	            return;
	        }

	        me.setPreferences( saveKey, saveData );

	        editor.fireEvent( "afterautosave", {
	            content: saveData
	        } );

	    }

	    return {
	        defaultOptions: {
	            //默认间隔时间
	            saveInterval: 500
	        },
	        bindEvents:{
	            'ready':function(){

	                var _suffix = "-drafts-data",
	                    key = null;

	                if ( me.key ) {
	                    key = me.key + _suffix;
	                } else {
	                    key = ( me.container.parentNode.id || 'ue-common' ) + _suffix;
	                }

	                //页面地址+编辑器ID 保持唯一
	                saveKey = ( location.protocol + location.host + location.pathname ).replace( /[.:\/]/g, '_' ) + key;

	            },

	            'contentchange': function () {
	            	if(!me.options.enableAutoSave){
	            		return
	            	}

	                if ( !saveKey ) {
	                    return;
	                }

	                if ( me._saveFlag ) {
	                    window.clearTimeout( me._saveFlag );
	                }

	                if ( me.options.saveInterval > 0 ) {

	                    me._saveFlag = window.setTimeout( function () {

	                        save( me );

	                    }, me.options.saveInterval );

	                } else {

	                    save(me);

	                }


	            }
	        },
	        commands:{
	            'clearlocaldata':{
	                execCommand:function (cmd, name) {
	                    if ( saveKey && me.getPreferences( saveKey ) ) {
	                        me.removePreferences( saveKey )
	                    }
	                },
	                notNeedUndo: true,
	                ignoreContentChange:true
	            },

	            'getlocaldata':{
	                execCommand:function (cmd, name) {
	                    return saveKey ? me.getPreferences( saveKey ) || '' : '';
	                },
	                notNeedUndo: true,
	                ignoreContentChange:true
	            },

	            'drafts':{
	                execCommand:function (cmd, name) {
	                    if ( saveKey ) {
	                        me.body.innerHTML = me.getPreferences( saveKey ) || '<p>'+domUtils.fillHtml+'</p>';
	                        me.focus(true);
	                    }
	                },
	                queryCommandState: function () {
	                    return saveKey ? ( me.getPreferences( saveKey ) === null ? -1 : 0 ) : -1;
	                },
	                notNeedUndo: true,
	                ignoreContentChange:true
	            }
	        }
	    }

	});

	// plugins/charts.js
	UE.plugin.register('charts', function (){

	    var me = this;

	    return {
	        bindEvents: {
	            'chartserror': function () {
	            }
	        },
	        commands:{
	            'charts': {
	                execCommand: function ( cmd, data ) {

	                    var tableNode = domUtils.findParentByTagName(this.selection.getRange().startContainer, 'table', true),
	                        flagText = [],
	                        config = {};

	                    if ( !tableNode ) {
	                        return false;
	                    }

	                    if ( !validData( tableNode ) ) {
	                        me.fireEvent( "chartserror" );
	                        return false;
	                    }

	                    config.title = data.title || '';
	                    config.subTitle = data.subTitle || '';
	                    config.xTitle = data.xTitle || '';
	                    config.yTitle = data.yTitle || '';
	                    config.suffix = data.suffix || '';
	                    config.tip = data.tip || '';
	                    //数据对齐方式
	                    config.dataFormat = data.tableDataFormat || '';
	                    //图表类型
	                    config.chartType = data.chartType || 0;

	                    for ( var key in config ) {

	                        if ( !config.hasOwnProperty( key ) ) {
	                            continue;
	                        }

	                        flagText.push( key+":"+config[ key ] );

	                    }

	                    tableNode.setAttribute( "data-chart", flagText.join( ";" ) );
	                    domUtils.addClass( tableNode, "edui-charts-table" );



	                },
	                queryCommandState: function ( cmd, name ) {

	                    var tableNode = domUtils.findParentByTagName(this.selection.getRange().startContainer, 'table', true);
	                    return tableNode && validData( tableNode ) ? 0 : -1;

	                }
	            }
	        },
	        inputRule:function(root){
	            utils.each(root.getNodesByTagName('table'),function( tableNode ){

	                if ( tableNode.getAttr("data-chart") !== undefined ) {
	                    tableNode.setAttr("style");
	                }

	            })

	        },
	        outputRule:function(root){
	            utils.each(root.getNodesByTagName('table'),function( tableNode ){

	                if ( tableNode.getAttr("data-chart") !== undefined ) {
	                    tableNode.setAttr("style", "display: none;");
	                }

	            })

	        }
	    }

	    function validData ( table ) {

	        var firstRows = null,
	            cellCount = 0;

	        //行数不够
	        if ( table.rows.length < 2 ) {
	            return false;
	        }

	        //列数不够
	        if ( table.rows[0].cells.length < 2 ) {
	            return false;
	        }

	        //第一行所有cell必须是th
	        firstRows = table.rows[ 0 ].cells;
	        cellCount = firstRows.length;

	        for ( var i = 0, cell; cell = firstRows[ i ]; i++ ) {

	            if ( cell.tagName.toLowerCase() !== 'th' ) {
	                return false;
	            }

	        }

	        for ( var i = 1, row; row = table.rows[ i ]; i++ ) {

	            //每行单元格数不匹配， 返回false
	            if ( row.cells.length != cellCount ) {
	                return false;
	            }

	            //第一列不是th也返回false
	            if ( row.cells[0].tagName.toLowerCase() !== 'th' ) {
	                return false;
	            }

	            for ( var j = 1, cell; cell = row.cells[ j ]; j++ ) {

	                var value = utils.trim( ( cell.innerText || cell.textContent || '' ) );

	                value = value.replace( new RegExp( UE.dom.domUtils.fillChar, 'g' ), '' ).replace( /^\s+|\s+$/g, '' );

	                //必须是数字
	                if ( !/^\d*\.?\d+$/.test( value ) ) {
	                    return false;
	                }

	            }

	        }

	        return true;

	    }

	});

	// plugins/section.js
	/**
	 * 目录大纲支持插件
	 * @file
	 * @since 1.3.0
	 */
	UE.plugin.register('section', function (){
	    /* 目录节点对象 */
	    function Section(option){
	        this.tag = '';
	        this.level = -1,
	            this.dom = null;
	        this.nextSection = null;
	        this.previousSection = null;
	        this.parentSection = null;
	        this.startAddress = [];
	        this.endAddress = [];
	        this.children = [];
	    }
	    function getSection(option) {
	        var section = new Section();
	        return utils.extend(section, option);
	    }
	    function getNodeFromAddress(startAddress, root) {
	        var current = root;
	        for(var i = 0;i < startAddress.length; i++) {
	            if(!current.childNodes) return null;
	            current = current.childNodes[startAddress[i]];
	        }
	        return current;
	    }

	    var me = this;

	    return {
	        bindMultiEvents:{
	            type: 'aftersetcontent afterscencerestore',
	            handler: function(){
	                me.fireEvent('updateSections');
	            }
	        },
	        bindEvents:{
	            /* 初始化、拖拽、粘贴、执行setcontent之后 */
	            'ready': function (){
	                me.fireEvent('updateSections');
	                domUtils.on(me.body, 'drop paste', function(){
	                    me.fireEvent('updateSections');
	                });
	            },
	            /* 执行paragraph命令之后 */
	            'afterexeccommand': function (type, cmd) {
	                if(cmd == 'paragraph') {
	                    me.fireEvent('updateSections');
	                }
	            },
	            /* 部分键盘操作，触发updateSections事件 */
	            'keyup': function (type, e) {
	                var me = this,
	                    range = me.selection.getRange();
	                if(range.collapsed != true) {
	                    me.fireEvent('updateSections');
	                } else {
	                    var keyCode = e.keyCode || e.which;
	                    if(keyCode == 13 || keyCode == 8 || keyCode == 46) {
	                        me.fireEvent('updateSections');
	                    }
	                }
	            }
	        },
	        commands:{
	            'getsections': {
	                execCommand: function (cmd, levels) {
	                    var levelFn = levels || ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];

	                    for (var i = 0; i < levelFn.length; i++) {
	                        if (typeof levelFn[i] == 'string') {
	                            levelFn[i] = function(fn){
	                                return function(node){
	                                    return node.tagName == fn.toUpperCase()
	                                };
	                            }(levelFn[i]);
	                        } else if (typeof levelFn[i] != 'function') {
	                            levelFn[i] = function (node) {
	                                return null;
	                            }
	                        }
	                    }
	                    function getSectionLevel(node) {
	                        for (var i = 0; i < levelFn.length; i++) {
	                            if (levelFn[i](node)) return i;
	                        }
	                        return -1;
	                    }

	                    var me = this,
	                        Directory = getSection({'level':-1, 'title':'root'}),
	                        previous = Directory;

	                    function traversal(node, Directory) {
	                        var level,
	                            tmpSection = null,
	                            parent,
	                            child,
	                            children = node.childNodes;
	                        for (var i = 0, len = children.length; i < len; i++) {
	                            child = children[i];
	                            level = getSectionLevel(child);
	                            if (level >= 0) {
	                                var address = me.selection.getRange().selectNode(child).createAddress(true).startAddress,
	                                    current = getSection({
	                                        'tag': child.tagName,
	                                        'title': child.innerText || child.textContent || '',
	                                        'level': level,
	                                        'dom': child,
	                                        'startAddress': utils.clone(address, []),
	                                        'endAddress': utils.clone(address, []),
	                                        'children': []
	                                    });
	                                previous.nextSection = current;
	                                current.previousSection = previous;
	                                parent = previous;
	                                while(level <= parent.level){
	                                    parent = parent.parentSection;
	                                }
	                                current.parentSection = parent;
	                                parent.children.push(current);
	                                tmpSection = previous = current;
	                            } else {
	                                child.nodeType === 1 && traversal(child, Directory);
	                                tmpSection && tmpSection.endAddress[tmpSection.endAddress.length - 1] ++;
	                            }
	                        }
	                    }
	                    traversal(me.body, Directory);
	                    return Directory;
	                },
	                notNeedUndo: true
	            },
	            'movesection': {
	                execCommand: function (cmd, sourceSection, targetSection, isAfter) {

	                    var me = this,
	                        targetAddress,
	                        target;

	                    if(!sourceSection || !targetSection || targetSection.level == -1) return;

	                    targetAddress = isAfter ? targetSection.endAddress:targetSection.startAddress;
	                    target = getNodeFromAddress(targetAddress, me.body);

	                    /* 判断目标地址是否被源章节包含 */
	                    if(!targetAddress || !target || isContainsAddress(sourceSection.startAddress, sourceSection.endAddress, targetAddress)) return;

	                    var startNode = getNodeFromAddress(sourceSection.startAddress, me.body),
	                        endNode = getNodeFromAddress(sourceSection.endAddress, me.body),
	                        current,
	                        nextNode;

	                    if(isAfter) {
	                        current = endNode;
	                        while ( current && !(domUtils.getPosition( startNode, current ) & domUtils.POSITION_FOLLOWING) ) {
	                            nextNode = current.previousSibling;
	                            domUtils.insertAfter(target, current);
	                            if(current == startNode) break;
	                            current = nextNode;
	                        }
	                    } else {
	                        current = startNode;
	                        while ( current && !(domUtils.getPosition( current, endNode ) & domUtils.POSITION_FOLLOWING) ) {
	                            nextNode = current.nextSibling;
	                            target.parentNode.insertBefore(current, target);
	                            if(current == endNode) break;
	                            current = nextNode;
	                        }
	                    }

	                    me.fireEvent('updateSections');

	                    /* 获取地址的包含关系 */
	                    function isContainsAddress(startAddress, endAddress, addressTarget){
	                        var isAfterStartAddress = false,
	                            isBeforeEndAddress = false;
	                        for(var i = 0; i< startAddress.length; i++){
	                            if(i >= addressTarget.length) break;
	                            if(addressTarget[i] > startAddress[i]) {
	                                isAfterStartAddress = true;
	                                break;
	                            } else if(addressTarget[i] < startAddress[i]) {
	                                break;
	                            }
	                        }
	                        for(var i = 0; i< endAddress.length; i++){
	                            if(i >= addressTarget.length) break;
	                            if(addressTarget[i] < startAddress[i]) {
	                                isBeforeEndAddress = true;
	                                break;
	                            } else if(addressTarget[i] > startAddress[i]) {
	                                break;
	                            }
	                        }
	                        return isAfterStartAddress && isBeforeEndAddress;
	                    }
	                }
	            },
	            'deletesection': {
	                execCommand: function (cmd, section, keepChildren) {
	                    var me = this;

	                    if(!section) return;

	                    function getNodeFromAddress(startAddress) {
	                        var current = me.body;
	                        for(var i = 0;i < startAddress.length; i++) {
	                            if(!current.childNodes) return null;
	                            current = current.childNodes[startAddress[i]];
	                        }
	                        return current;
	                    }

	                    var startNode = getNodeFromAddress(section.startAddress),
	                        endNode = getNodeFromAddress(section.endAddress),
	                        current = startNode,
	                        nextNode;

	                    if(!keepChildren) {
	                        while ( current && domUtils.inDoc(endNode, me.document) && !(domUtils.getPosition( current, endNode ) & domUtils.POSITION_FOLLOWING) ) {
	                            nextNode = current.nextSibling;
	                            domUtils.remove(current);
	                            current = nextNode;
	                        }
	                    } else {
	                        domUtils.remove(current);
	                    }

	                    me.fireEvent('updateSections');
	                }
	            },
	            'selectsection': {
	                execCommand: function (cmd, section) {
	                    if(!section && !section.dom) return false;
	                    var me = this,
	                        range = me.selection.getRange(),
	                        address = {
	                            'startAddress':utils.clone(section.startAddress, []),
	                            'endAddress':utils.clone(section.endAddress, [])
	                        };
	                    address.endAddress[address.endAddress.length - 1]++;
	                    range.moveToAddress(address).select().scrollToView();
	                    return true;
	                },
	                notNeedUndo: true
	            },
	            'scrolltosection': {
	                execCommand: function (cmd, section) {
	                    if(!section && !section.dom) return false;
	                    var me = this,
	                        range = me.selection.getRange(),
	                        address = {
	                            'startAddress':section.startAddress,
	                            'endAddress':section.endAddress
	                        };
	                    address.endAddress[address.endAddress.length - 1]++;
	                    range.moveToAddress(address).scrollToView();
	                    return true;
	                },
	                notNeedUndo: true
	            }
	        }
	    }
	});

	// plugins/simpleupload.js
	/**
	 * @description
	 * 简单上传:点击按钮,直接选择文件上传
	 * @author Jinqn
	 * @date 2014-03-31
	 */
	UE.plugin.register('simpleupload', function (){
	    var me = this,
	        isLoaded = false,
	        containerBtn;

	    function initUploadBtn(){
	        var w = containerBtn.offsetWidth || 20,
	            h = containerBtn.offsetHeight || 20,
	            btnIframe = document.createElement('iframe'),
	            btnStyle = 'display:block;width:' + w + 'px;height:' + h + 'px;overflow:hidden;border:0;margin:0;padding:0;position:absolute;top:0;left:0;filter:alpha(opacity=0);-moz-opacity:0;-khtml-opacity: 0;opacity: 0;cursor:pointer;';

	        domUtils.on(btnIframe, 'load', function(){

	            var timestrap = (+new Date()).toString(36),
	                wrapper,
	                btnIframeDoc,
	                btnIframeBody;

	            btnIframeDoc = (btnIframe.contentDocument || btnIframe.contentWindow.document);
	            btnIframeBody = btnIframeDoc.body;
	            wrapper = btnIframeDoc.createElement('div');

	            wrapper.innerHTML = '<form id="edui_form_' + timestrap + '" target="edui_iframe_' + timestrap + '" method="POST" enctype="multipart/form-data" action="' + me.getOpt('serverUrl') + '" ' +
	            'style="' + btnStyle + '">' +
	            '<input id="edui_input_' + timestrap + '" type="file" accept="image/*" name="' + me.options.imageFieldName + '" ' +
	            'style="' + btnStyle + '">' +
	            '</form>' +
	            '<iframe id="edui_iframe_' + timestrap + '" name="edui_iframe_' + timestrap + '" style="display:none;width:0;height:0;border:0;margin:0;padding:0;position:absolute;"></iframe>';

	            wrapper.className = 'edui-' + me.options.theme;
	            wrapper.id = me.ui.id + '_iframeupload';
	            btnIframeBody.style.cssText = btnStyle;
	            btnIframeBody.style.width = w + 'px';
	            btnIframeBody.style.height = h + 'px';
	            btnIframeBody.appendChild(wrapper);

	            if (btnIframeBody.parentNode) {
	                btnIframeBody.parentNode.style.width = w + 'px';
	                btnIframeBody.parentNode.style.height = w + 'px';
	            }

	            var form = btnIframeDoc.getElementById('edui_form_' + timestrap);
	            var input = btnIframeDoc.getElementById('edui_input_' + timestrap);
	            var iframe = btnIframeDoc.getElementById('edui_iframe_' + timestrap);

	            domUtils.on(input, 'change', function(){
	                if(!input.value) return;
	                var loadingId = 'loading_' + (+new Date()).toString(36);
	                var params = utils.serializeParam(me.queryCommandValue('serverparam')) || '';

	                var imageActionUrl = me.getActionUrl(me.getOpt('imageActionName'));
	                var allowFiles = me.getOpt('imageAllowFiles');

	                me.focus();
	                me.execCommand('inserthtml', '<img class="loadingclass" id="' + loadingId + '" src="' + me.options.themePath + me.options.theme +'/images/spacer.gif" title="' + (me.getLang('simpleupload.loading') || '') + '" >');

	                function callback(){
	                    try{
	                        var link, json, loader,
	                            body = (iframe.contentDocument || iframe.contentWindow.document).body,
	                            result = body.innerText || body.textContent || '';
	                        json = (new Function("return " + result))();
	                        link = me.options.imageUrlPrefix + json.url;
	                        if(json.state == 'SUCCESS' && json.url) {
	                            loader = me.document.getElementById(loadingId);
	                            loader.setAttribute('src', link);
	                            loader.setAttribute('_src', link);
	                            loader.setAttribute('title', json.title || '');
	                            loader.setAttribute('alt', json.original || '');
	                            loader.removeAttribute('id');
	                            domUtils.removeClasses(loader, 'loadingclass');
	                        } else {
	                            showErrorLoader && showErrorLoader(json.state);
	                        }
	                    }catch(er){
	                        showErrorLoader && showErrorLoader(me.getLang('simpleupload.loadError'));
	                    }
	                    form.reset();
	                    domUtils.un(iframe, 'load', callback);
	                }
	                function showErrorLoader(title){
	                    if(loadingId) {
	                        var loader = me.document.getElementById(loadingId);
	                        loader && domUtils.remove(loader);
	                        me.fireEvent('showmessage', {
	                            'id': loadingId,
	                            'content': title,
	                            'type': 'error',
	                            'timeout': 4000
	                        });
	                    }
	                }

	                /* 判断后端配置是否没有加载成功 */
	                if (!me.getOpt('imageActionName')) {
	                    errorHandler(me.getLang('autoupload.errorLoadConfig'));
	                    return;
	                }
	                // 判断文件格式是否错误
	                var filename = input.value,
	                    fileext = filename ? filename.substr(filename.lastIndexOf('.')):'';
	                if (!fileext || (allowFiles && (allowFiles.join('') + '.').indexOf(fileext.toLowerCase() + '.') == -1)) {
	                    showErrorLoader(me.getLang('simpleupload.exceedTypeError'));
	                    return;
	                }

	                domUtils.on(iframe, 'load', callback);
	                form.action = utils.formatUrl(imageActionUrl + (imageActionUrl.indexOf('?') == -1 ? '?':'&') + params);
	                form.submit();
	            });

	            var stateTimer;
	            me.addListener('selectionchange', function () {
	                clearTimeout(stateTimer);
	                stateTimer = setTimeout(function() {
	                    var state = me.queryCommandState('simpleupload');
	                    if (state == -1) {
	                        input.disabled = 'disabled';
	                    } else {
	                        input.disabled = false;
	                    }
	                }, 400);
	            });
	            isLoaded = true;
	        });

	        btnIframe.style.cssText = btnStyle;
	        containerBtn.appendChild(btnIframe);
	    }

	    return {
	        bindEvents:{
	            'ready': function() {
	                //设置loading的样式
	                utils.cssRule('loading',
	                    '.loadingclass{display:inline-block;cursor:default;background: url(\''
	                    + this.options.themePath
	                    + this.options.theme +'/images/loading.gif\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;}\n' +
	                    '.loaderrorclass{display:inline-block;cursor:default;background: url(\''
	                    + this.options.themePath
	                    + this.options.theme +'/images/loaderror.png\') no-repeat center center transparent;border:1px solid #cccccc;margin-right:1px;height: 22px;width: 22px;' +
	                    '}',
	                    this.document);
	            },
	            /* 初始化简单上传按钮 */
	            'simpleuploadbtnready': function(type, container) {
	                containerBtn = container;
	                me.afterConfigReady(initUploadBtn);
	            }
	        },
	        outputRule: function(root){
	            utils.each(root.getNodesByTagName('img'),function(n){
	                if (/\b(loaderrorclass)|(bloaderrorclass)\b/.test(n.getAttr('class'))) {
	                    n.parentNode.removeChild(n);
	                }
	            });
	        },
	        commands: {
	            'simpleupload': {
	                queryCommandState: function () {
	                    return isLoaded ? 0:-1;
	                }
	            }
	        }
	    }
	});

	// plugins/serverparam.js
	/**
	 * 服务器提交的额外参数列表设置插件
	 * @file
	 * @since 1.2.6.1
	 */
	UE.plugin.register('serverparam', function (){

	    var me = this,
	        serverParam = {};

	    return {
	        commands:{
	            /**
	             * 修改服务器提交的额外参数列表,清除所有项
	             * @command serverparam
	             * @method execCommand
	             * @param { String } cmd 命令字符串
	             * @example
	             * ```javascript
	             * editor.execCommand('serverparam');
	             * editor.queryCommandValue('serverparam'); //返回空
	             * ```
	             */
	            /**
	             * 修改服务器提交的额外参数列表,删除指定项
	             * @command serverparam
	             * @method execCommand
	             * @param { String } cmd 命令字符串
	             * @param { String } key 要清除的属性
	             * @example
	             * ```javascript
	             * editor.execCommand('serverparam', 'name'); //删除属性name
	             * ```
	             */
	            /**
	             * 修改服务器提交的额外参数列表,使用键值添加项
	             * @command serverparam
	             * @method execCommand
	             * @param { String } cmd 命令字符串
	             * @param { String } key 要添加的属性
	             * @param { String } value 要添加属性的值
	             * @example
	             * ```javascript
	             * editor.execCommand('serverparam', 'name', 'hello');
	             * editor.queryCommandValue('serverparam'); //返回对象 {'name': 'hello'}
	             * ```
	             */
	            /**
	             * 修改服务器提交的额外参数列表,传入键值对对象添加多项
	             * @command serverparam
	             * @method execCommand
	             * @param { String } cmd 命令字符串
	             * @param { Object } key 传入的键值对对象
	             * @example
	             * ```javascript
	             * editor.execCommand('serverparam', {'name': 'hello'});
	             * editor.queryCommandValue('serverparam'); //返回对象 {'name': 'hello'}
	             * ```
	             */
	            /**
	             * 修改服务器提交的额外参数列表,使用自定义函数添加多项
	             * @command serverparam
	             * @method execCommand
	             * @param { String } cmd 命令字符串
	             * @param { Function } key 自定义获取参数的函数
	             * @example
	             * ```javascript
	             * editor.execCommand('serverparam', function(editor){
	             *     return {'key': 'value'};
	             * });
	             * editor.queryCommandValue('serverparam'); //返回对象 {'key': 'value'}
	             * ```
	             */

	            /**
	             * 获取服务器提交的额外参数列表
	             * @command serverparam
	             * @method queryCommandValue
	             * @param { String } cmd 命令字符串
	             * @example
	             * ```javascript
	             * editor.queryCommandValue( 'serverparam' ); //返回对象 {'key': 'value'}
	             * ```
	             */
	            'serverparam':{
	                execCommand:function (cmd, key, value) {
	                    if (key === undefined || key === null) { //不传参数,清空列表
	                        serverParam = {};
	                    } else if (utils.isString(key)) { //传入键值
	                        if(value === undefined || value === null) {
	                            delete serverParam[key];
	                        } else {
	                            serverParam[key] = value;
	                        }
	                    } else if (utils.isObject(key)) { //传入对象,覆盖列表项
	                        utils.extend(serverParam, key, true);
	                    } else if (utils.isFunction(key)){ //传入函数,添加列表项
	                        utils.extend(serverParam, key(), true);
	                    }
	                },
	                queryCommandValue: function(){
	                    return serverParam || {};
	                }
	            }
	        }
	    }
	});


	// plugins/insertfile.js
	/**
	 * 插入附件
	 */
	UE.plugin.register('insertfile', function (){

	    var me = this;

	    function getFileIcon(url){
	        var ext = url.substr(url.lastIndexOf('.') + 1).toLowerCase(),
	            maps = {
	                "rar":"icon_rar.gif",
	                "zip":"icon_rar.gif",
	                "tar":"icon_rar.gif",
	                "gz":"icon_rar.gif",
	                "bz2":"icon_rar.gif",
	                "doc":"icon_doc.gif",
	                "docx":"icon_doc.gif",
	                "pdf":"icon_pdf.gif",
	                "mp3":"icon_mp3.gif",
	                "xls":"icon_xls.gif",
	                "chm":"icon_chm.gif",
	                "ppt":"icon_ppt.gif",
	                "pptx":"icon_ppt.gif",
	                "avi":"icon_mv.gif",
	                "rmvb":"icon_mv.gif",
	                "wmv":"icon_mv.gif",
	                "flv":"icon_mv.gif",
	                "swf":"icon_mv.gif",
	                "rm":"icon_mv.gif",
	                "exe":"icon_exe.gif",
	                "psd":"icon_psd.gif",
	                "txt":"icon_txt.gif",
	                "jpg":"icon_jpg.gif",
	                "png":"icon_jpg.gif",
	                "jpeg":"icon_jpg.gif",
	                "gif":"icon_jpg.gif",
	                "ico":"icon_jpg.gif",
	                "bmp":"icon_jpg.gif"
	            };
	        return maps[ext] ? maps[ext]:maps['txt'];
	    }

	    return {
	        commands:{
	            'insertfile': {
	                execCommand: function (command, filelist){
	                    filelist = utils.isArray(filelist) ? filelist : [filelist];

	                    var i, item, icon, title,
	                        html = '',
	                        URL = me.getOpt('UEDITOR_HOME_URL'),
	                        iconDir = URL + (URL.substr(URL.length - 1) == '/' ? '':'/') + 'dialogs/attachment/fileTypeImages/';
	                    for (i = 0; i < filelist.length; i++) {
	                        item = filelist[i];
	                        icon = iconDir + getFileIcon(item.url);
	                        title = item.title || item.url.substr(item.url.lastIndexOf('/') + 1);
	                        html += '<p style="line-height: 16px;">' +
	                            '<img style="vertical-align: middle; margin-right: 2px;" src="'+ icon + '" _src="' + icon + '" />' +
	                            '<a style="font-size:12px; color:#0066cc;" href="' + item.url +'" title="' + title + '">' + title + '</a>' +
	                            '</p>';
	                    }
	                    me.execCommand('insertHtml', html);
	                }
	            }
	        }
	    }
	});




	// plugins/xssFilter.js
	/**
	 * @file xssFilter.js
	 * @desc xss过滤器
	 * @author robbenmu
	 */

	UE.plugins.xssFilter = function() {

		var config = UEDITOR_CONFIG;
		var whitList = config.whitList;

		function filter(node) {

			var tagName = node.tagName;
			var attrs = node.attrs;

			if (!whitList.hasOwnProperty(tagName)) {
				node.parentNode.removeChild(node);
				return false;
			}

			UE.utils.each(attrs, function (val, key) {

				if (whitList[tagName].indexOf(key) === -1) {
					node.setAttr(key);
				}
			});
		}

		// 添加inserthtml\paste等操作用的过滤规则
		if (whitList && config.xssFilterRules) {
			this.options.filterRules = function () {

				var result = {};

				UE.utils.each(whitList, function(val, key) {
					result[key] = function (node) {
						return filter(node);
					};
				});

				return result;
			}();
		}

		var tagList = [];

		UE.utils.each(whitList, function (val, key) {
			tagList.push(key);
		});

		// 添加input过滤规则
		//
		if (whitList && config.inputXssFilter) {
			this.addInputRule(function (root) {

				root.traversal(function(node) {
					if (node.type !== 'element') {
						return false;
					}
					filter(node);
				});
			});
		}
		// 添加output过滤规则
		//
		if (whitList && config.outputXssFilter) {
			this.addOutputRule(function (root) {

				root.traversal(function(node) {
					if (node.type !== 'element') {
						return false;
					}
					filter(node);
				});
			});
		}

	};


	// ui/ui.js
	var baidu = baidu || {};
	baidu.editor = baidu.editor || {};
	UE.ui = baidu.editor.ui = {};

	// ui/uiutils.js
	(function (){
	    var browser = baidu.editor.browser,
	        domUtils = baidu.editor.dom.domUtils;

	    var magic = '$EDITORUI';
	    var root = window[magic] = {};
	    var uidMagic = 'ID' + magic;
	    var uidCount = 0;

	    var uiUtils = baidu.editor.ui.uiUtils = {
	        uid: function (obj){
	            return (obj ? obj[uidMagic] || (obj[uidMagic] = ++ uidCount) : ++ uidCount);
	        },
	        hook: function ( fn, callback ) {
	            var dg;
	            if (fn && fn._callbacks) {
	                dg = fn;
	            } else {
	                dg = function (){
	                    var q;
	                    if (fn) {
	                        q = fn.apply(this, arguments);
	                    }
	                    var callbacks = dg._callbacks;
	                    var k = callbacks.length;
	                    while (k --) {
	                        var r = callbacks[k].apply(this, arguments);
	                        if (q === undefined) {
	                            q = r;
	                        }
	                    }
	                    return q;
	                };
	                dg._callbacks = [];
	            }
	            dg._callbacks.push(callback);
	            return dg;
	        },
	        createElementByHtml: function (html){
	            var el = document.createElement('div');
	            el.innerHTML = html;
	            el = el.firstChild;
	            el.parentNode.removeChild(el);
	            return el;
	        },
	        getViewportElement: function (){
	            return (browser.ie && browser.quirks) ?
	                document.body : document.documentElement;
	        },
	        getClientRect: function (element){
	            var bcr;
	            //trace  IE6下在控制编辑器显隐时可能会报错，catch一下
	            try{
	                bcr = element.getBoundingClientRect();
	            }catch(e){
	                bcr={left:0,top:0,height:0,width:0}
	            }
	            var rect = {
	                left: Math.round(bcr.left),
	                top: Math.round(bcr.top),
	                height: Math.round(bcr.bottom - bcr.top),
	                width: Math.round(bcr.right - bcr.left)
	            };
	            var doc;
	            while ((doc = element.ownerDocument) !== document &&
	                (element = domUtils.getWindow(doc).frameElement)) {
	                bcr = element.getBoundingClientRect();
	                rect.left += bcr.left;
	                rect.top += bcr.top;
	            }
	            rect.bottom = rect.top + rect.height;
	            rect.right = rect.left + rect.width;
	            return rect;
	        },
	        getViewportRect: function (){
	            var viewportEl = uiUtils.getViewportElement();
	            var width = (window.innerWidth || viewportEl.clientWidth) | 0;
	            var height = (window.innerHeight ||viewportEl.clientHeight) | 0;
	            return {
	                left: 0,
	                top: 0,
	                height: height,
	                width: width,
	                bottom: height,
	                right: width
	            };
	        },
	        setViewportOffset: function (element, offset){
	            var rect;
	            var fixedLayer = uiUtils.getFixedLayer();
	            if (element.parentNode === fixedLayer) {
	                element.style.left = offset.left + 'px';
	                element.style.top = offset.top + 'px';
	            } else {
	                domUtils.setViewportOffset(element, offset);
	            }
	        },
	        getEventOffset: function (evt){
	            var el = evt.target || evt.srcElement;
	            var rect = uiUtils.getClientRect(el);
	            var offset = uiUtils.getViewportOffsetByEvent(evt);
	            return {
	                left: offset.left - rect.left,
	                top: offset.top - rect.top
	            };
	        },
	        getViewportOffsetByEvent: function (evt){
	            var el = evt.target || evt.srcElement;
	            var frameEl = domUtils.getWindow(el).frameElement;
	            var offset = {
	                left: evt.clientX,
	                top: evt.clientY
	            };
	            if (frameEl && el.ownerDocument !== document) {
	                var rect = uiUtils.getClientRect(frameEl);
	                offset.left += rect.left;
	                offset.top += rect.top;
	            }
	            return offset;
	        },
	        setGlobal: function (id, obj){
	            root[id] = obj;
	            return magic + '["' + id  + '"]';
	        },
	        unsetGlobal: function (id){
	            delete root[id];
	        },
	        copyAttributes: function (tgt, src){
	            var attributes = src.attributes;
	            var k = attributes.length;
	            while (k --) {
	                var attrNode = attributes[k];
	                if ( attrNode.nodeName != 'style' && attrNode.nodeName != 'class' && (!browser.ie || attrNode.specified) ) {
	                    tgt.setAttribute(attrNode.nodeName, attrNode.nodeValue);
	                }
	            }
	            if (src.className) {
	                domUtils.addClass(tgt,src.className);
	            }
	            if (src.style.cssText) {
	                tgt.style.cssText += ';' + src.style.cssText;
	            }
	        },
	        removeStyle: function (el, styleName){
	            if (el.style.removeProperty) {
	                el.style.removeProperty(styleName);
	            } else if (el.style.removeAttribute) {
	                el.style.removeAttribute(styleName);
	            } else throw '';
	        },
	        contains: function (elA, elB){
	            return elA && elB && (elA === elB ? false : (
	                elA.contains ? elA.contains(elB) :
	                    elA.compareDocumentPosition(elB) & 16
	                ));
	        },
	        startDrag: function (evt, callbacks,doc){
	            var doc = doc || document;
	            var startX = evt.clientX;
	            var startY = evt.clientY;
	            function handleMouseMove(evt){
	                var x = evt.clientX - startX;
	                var y = evt.clientY - startY;
	                callbacks.ondragmove(x, y,evt);
	                if (evt.stopPropagation) {
	                    evt.stopPropagation();
	                } else {
	                    evt.cancelBubble = true;
	                }
	            }
	            if (doc.addEventListener) {
	                function handleMouseUp(evt){
	                    doc.removeEventListener('mousemove', handleMouseMove, true);
	                    doc.removeEventListener('mouseup', handleMouseUp, true);
	                    window.removeEventListener('mouseup', handleMouseUp, true);
	                    callbacks.ondragstop();
	                }
	                doc.addEventListener('mousemove', handleMouseMove, true);
	                doc.addEventListener('mouseup', handleMouseUp, true);
	                window.addEventListener('mouseup', handleMouseUp, true);

	                evt.preventDefault();
	            } else {
	                var elm = evt.srcElement;
	                elm.setCapture();
	                function releaseCaptrue(){
	                    elm.releaseCapture();
	                    elm.detachEvent('onmousemove', handleMouseMove);
	                    elm.detachEvent('onmouseup', releaseCaptrue);
	                    elm.detachEvent('onlosecaptrue', releaseCaptrue);
	                    callbacks.ondragstop();
	                }
	                elm.attachEvent('onmousemove', handleMouseMove);
	                elm.attachEvent('onmouseup', releaseCaptrue);
	                elm.attachEvent('onlosecaptrue', releaseCaptrue);
	                evt.returnValue = false;
	            }
	            callbacks.ondragstart();
	        },
	        getFixedLayer: function (){
	            var layer = document.getElementById('edui_fixedlayer');
	            if (layer == null) {
	                layer = document.createElement('div');
	                layer.id = 'edui_fixedlayer';
	                document.body.appendChild(layer);
	                if (browser.ie && browser.version <= 8) {
	                    layer.style.position = 'absolute';
	                    bindFixedLayer();
	                    setTimeout(updateFixedOffset);
	                } else {
	                    layer.style.position = 'fixed';
	                }
	                layer.style.left = '0';
	                layer.style.top = '0';
	                layer.style.width = '0';
	                layer.style.height = '0';
	            }
	            return layer;
	        },
	        makeUnselectable: function (element){
	            if (browser.opera || (browser.ie && browser.version < 9)) {
	                element.unselectable = 'on';
	                if (element.hasChildNodes()) {
	                    for (var i=0; i<element.childNodes.length; i++) {
	                        if (element.childNodes[i].nodeType == 1) {
	                            uiUtils.makeUnselectable(element.childNodes[i]);
	                        }
	                    }
	                }
	            } else {
	                if (element.style.MozUserSelect !== undefined) {
	                    element.style.MozUserSelect = 'none';
	                } else if (element.style.WebkitUserSelect !== undefined) {
	                    element.style.WebkitUserSelect = 'none';
	                } else if (element.style.KhtmlUserSelect !== undefined) {
	                    element.style.KhtmlUserSelect = 'none';
	                }
	            }
	        }
	    };
	    function updateFixedOffset(){
	        var layer = document.getElementById('edui_fixedlayer');
	        uiUtils.setViewportOffset(layer, {
	            left: 0,
	            top: 0
	        });
//	        layer.style.display = 'none';
//	        layer.style.display = 'block';

	        //#trace: 1354
//	        setTimeout(updateFixedOffset);
	    }
	    function bindFixedLayer(adjOffset){
	        domUtils.on(window, 'scroll', updateFixedOffset);
	        domUtils.on(window, 'resize', baidu.editor.utils.defer(updateFixedOffset, 0, true));
	    }
	})();


	// ui/uibase.js
	(function () {
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        EventBase = baidu.editor.EventBase,
	        UIBase = baidu.editor.ui.UIBase = function () {
	        };

	    UIBase.prototype = {
	        className:'',
	        uiName:'',
	        initOptions:function (options) {
	            var me = this;
	            for (var k in options) {
	                me[k] = options[k];
	            }
	            this.id = this.id || 'edui' + uiUtils.uid();
	        },
	        initUIBase:function () {
	            this._globalKey = utils.unhtml(uiUtils.setGlobal(this.id, this));
	        },
	        render:function (holder) {
	            var html = this.renderHtml();
	            var el = uiUtils.createElementByHtml(html);

	            //by xuheng 给每个node添加class
	            var list = domUtils.getElementsByTagName(el, "*");
	            var theme = "edui-" + (this.theme || this.editor.options.theme);
	            var layer = document.getElementById('edui_fixedlayer');
	            for (var i = 0, node; node = list[i++];) {
	                domUtils.addClass(node, theme);
	            }
	            domUtils.addClass(el, theme);
	            if(layer){
	                layer.className="";
	                domUtils.addClass(layer,theme);
	            }

	            var seatEl = this.getDom();
	            if (seatEl != null) {
	                seatEl.parentNode.replaceChild(el, seatEl);
	                uiUtils.copyAttributes(el, seatEl);
	            } else {
	                if (typeof holder == 'string') {
	                    holder = document.getElementById(holder);
	                }
	                holder = holder || uiUtils.getFixedLayer();
	                domUtils.addClass(holder, theme);
	                holder.appendChild(el);
	            }
	            this.postRender();
	        },
	        getDom:function (name) {
	            if (!name) {
	                return document.getElementById(this.id);
	            } else {
	                return document.getElementById(this.id + '_' + name);
	            }
	        },
	        postRender:function () {
	            this.fireEvent('postrender');
	        },
	        getHtmlTpl:function () {
	            return '';
	        },
	        formatHtml:function (tpl) {
	            var prefix = 'edui-' + this.uiName;
	            return (tpl
	                .replace(/##/g, this.id)
	                .replace(/%%-/g, this.uiName ? prefix + '-' : '')
	                .replace(/%%/g, (this.uiName ? prefix : '') + ' ' + this.className)
	                .replace(/\$\$/g, this._globalKey));
	        },
	        renderHtml:function () {
	            return this.formatHtml(this.getHtmlTpl());
	        },
	        dispose:function () {
	            var box = this.getDom();
	            if (box) baidu.editor.dom.domUtils.remove(box);
	            uiUtils.unsetGlobal(this.id);
	        }
	    };
	    utils.inherits(UIBase, EventBase);
	})();


	// ui/separator.js
	(function (){
	    var utils = baidu.editor.utils,
	        UIBase = baidu.editor.ui.UIBase,
	        Separator = baidu.editor.ui.Separator = function (options){
	            this.initOptions(options);
	            this.initSeparator();
	        };
	    Separator.prototype = {
	        uiName: 'separator',
	        initSeparator: function (){
	            this.initUIBase();
	        },
	        getHtmlTpl: function (){
	            return '<div id="##" class="edui-box %%"></div>';
	        }
	    };
	    utils.inherits(Separator, UIBase);

	})();


	// ui/mask.js
	///import core
	///import uicore
	(function (){
	    var utils = baidu.editor.utils,
	        domUtils = baidu.editor.dom.domUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        uiUtils = baidu.editor.ui.uiUtils;
	    
	    var Mask = baidu.editor.ui.Mask = function (options){
	        this.initOptions(options);
	        this.initUIBase();
	    };
	    Mask.prototype = {
	        getHtmlTpl: function (){
	            return '<div id="##" class="edui-mask %%" onclick="return $$._onClick(event, this);" onmousedown="return $$._onMouseDown(event, this);"></div>';
	        },
	        postRender: function (){
	            var me = this;
	            domUtils.on(window, 'resize', function (){
	                setTimeout(function (){
	                    if (!me.isHidden()) {
	                        me._fill();
	                    }
	                });
	            });
	        },
	        show: function (zIndex){
	            this._fill();
	            this.getDom().style.display = '';
	            this.getDom().style.zIndex = zIndex;
	        },
	        hide: function (){
	            this.getDom().style.display = 'none';
	            this.getDom().style.zIndex = '';
	        },
	        isHidden: function (){
	            return this.getDom().style.display == 'none';
	        },
	        _onMouseDown: function (){
	            return false;
	        },
	        _onClick: function (e, target){
	            this.fireEvent('click', e, target);
	        },
	        _fill: function (){
	            var el = this.getDom();
	            var vpRect = uiUtils.getViewportRect();
	            el.style.width = vpRect.width + 'px';
	            el.style.height = vpRect.height + 'px';
	        }
	    };
	    utils.inherits(Mask, UIBase);
	})();


	// ui/popup.js
	///import core
	///import uicore
	(function () {
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        domUtils = baidu.editor.dom.domUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        Popup = baidu.editor.ui.Popup = function (options){
	            this.initOptions(options);
	            this.initPopup();
	        };

	    var allPopups = [];
	    function closeAllPopup( evt,el ){
	        for ( var i = 0; i < allPopups.length; i++ ) {
	            var pop = allPopups[i];
	            if (!pop.isHidden()) {
	                if (pop.queryAutoHide(el) !== false) {
	                    if(evt&&/scroll/ig.test(evt.type)&&pop.className=="edui-wordpastepop")   return;
	                    pop.hide();
	                }
	            }
	        }

	        if(allPopups.length)
	            pop.editor.fireEvent("afterhidepop");
	    }

	    Popup.postHide = closeAllPopup;

	    var ANCHOR_CLASSES = ['edui-anchor-topleft','edui-anchor-topright',
	        'edui-anchor-bottomleft','edui-anchor-bottomright'];
	    Popup.prototype = {
	        SHADOW_RADIUS: 5,
	        content: null,
	        _hidden: false,
	        autoRender: true,
	        canSideLeft: true,
	        canSideUp: true,
	        initPopup: function (){
	            this.initUIBase();
	            allPopups.push( this );
	        },
	        getHtmlTpl: function (){
	            return '<div id="##" class="edui-popup %%" onmousedown="return false;">' +
	                ' <div id="##_body" class="edui-popup-body">' +
	                ' <iframe style="position:absolute;z-index:-1;left:0;top:0;background-color: transparent;" frameborder="0" width="100%" height="100%" src="about:blank"></iframe>' +
	                ' <div class="edui-shadow"></div>' +
	                ' <div id="##_content" class="edui-popup-content">' +
	                this.getContentHtmlTpl() +
	                '  </div>' +
	                ' </div>' +
	                '</div>';
	        },
	        getContentHtmlTpl: function (){
	            if(this.content){
	                if (typeof this.content == 'string') {
	                    return this.content;
	                }
	                return this.content.renderHtml();
	            }else{
	                return ''
	            }

	        },
	        _UIBase_postRender: UIBase.prototype.postRender,
	        postRender: function (){


	            if (this.content instanceof UIBase) {
	                this.content.postRender();
	            }

	            //捕获鼠标滚轮
	            if( this.captureWheel && !this.captured ) {

	                this.captured = true;

	                var winHeight = ( document.documentElement.clientHeight || document.body.clientHeight )  - 80,
	                    _height = this.getDom().offsetHeight,
	                    _top = uiUtils.getClientRect( this.combox.getDom() ).top,
	                    content = this.getDom('content'),
	                    ifr = this.getDom('body').getElementsByTagName('iframe'),
	                    me = this;

	                ifr.length && ( ifr = ifr[0] );

	                while( _top + _height > winHeight ) {
	                    _height -= 30;
	                }
	                content.style.height = _height + 'px';
	                //同步更改iframe高度
	                ifr && ( ifr.style.height = _height + 'px' );

	                //阻止在combox上的鼠标滚轮事件, 防止用户的正常操作被误解
	                if( window.XMLHttpRequest ) {

	                    domUtils.on( content, ( 'onmousewheel' in document.body ) ? 'mousewheel' :'DOMMouseScroll' , function(e){

	                        if(e.preventDefault) {
	                            e.preventDefault();
	                        } else {
	                            e.returnValue = false;
	                        }

	                        if( e.wheelDelta ) {

	                            content.scrollTop -= ( e.wheelDelta / 120 )*60;

	                        } else {

	                            content.scrollTop -= ( e.detail / -3 )*60;

	                        }

	                    });

	                } else {

	                    //ie6
	                    domUtils.on( this.getDom(), 'mousewheel' , function(e){

	                        e.returnValue = false;

	                        me.getDom('content').scrollTop -= ( e.wheelDelta / 120 )*60;

	                    });

	                }

	            }
	            this.fireEvent('postRenderAfter');
	            this.hide(true);
	            this._UIBase_postRender();
	        },
	        _doAutoRender: function (){
	            if (!this.getDom() && this.autoRender) {
	                this.render();
	            }
	        },
	        mesureSize: function (){
	            var box = this.getDom('content');
	            return uiUtils.getClientRect(box);
	        },
	        fitSize: function (){
	            if( this.captureWheel && this.sized ) {
	                return this.__size;
	            }
	            this.sized = true;
	            var popBodyEl = this.getDom('body');
	            popBodyEl.style.width = '';
	            popBodyEl.style.height = '';
	            var size = this.mesureSize();
	            if( this.captureWheel ) {
	                popBodyEl.style.width =  -(-20 -size.width) + 'px';
	                var height = parseInt( this.getDom('content').style.height, 10 );
	                !window.isNaN( height ) && ( size.height = height );
	            } else {
	                popBodyEl.style.width =  size.width + 'px';
	            }
	            popBodyEl.style.height = size.height + 'px';
	            this.__size = size;
	            this.captureWheel && (this.getDom('content').style.overflow = 'auto');
	            return size;
	        },
	        showAnchor: function ( element, hoz ){
	            this.showAnchorRect( uiUtils.getClientRect( element ), hoz );
	        },
	        showAnchorRect: function ( rect, hoz, adj ){
	            this._doAutoRender();
	            var vpRect = uiUtils.getViewportRect();
	            this.getDom().style.visibility = 'hidden';
	            this._show();
	            var popSize = this.fitSize();

	            var sideLeft, sideUp, left, top;
	            if (hoz) {
	                sideLeft = this.canSideLeft && (rect.right + popSize.width > vpRect.right && rect.left > popSize.width);
	                sideUp = this.canSideUp && (rect.top + popSize.height > vpRect.bottom && rect.bottom > popSize.height);
	                left = (sideLeft ? rect.left - popSize.width : rect.right);
	                top = (sideUp ? rect.bottom - popSize.height : rect.top);
	            } else {
	                sideLeft = this.canSideLeft && (rect.right + popSize.width > vpRect.right && rect.left > popSize.width);
	                sideUp = this.canSideUp && (rect.top + popSize.height > vpRect.bottom && rect.bottom > popSize.height);
	                left = (sideLeft ? rect.right - popSize.width : rect.left);
	                top = (sideUp ? rect.top - popSize.height : rect.bottom);
	            }

	            var popEl = this.getDom();
	            uiUtils.setViewportOffset(popEl, {
	                left: left,
	                top: top
	            });
	            domUtils.removeClasses(popEl, ANCHOR_CLASSES);
	            popEl.className += ' ' + ANCHOR_CLASSES[(sideUp ? 1 : 0) * 2 + (sideLeft ? 1 : 0)];
	            if(this.editor){
	                popEl.style.zIndex = this.editor.container.style.zIndex * 1 + 10;
	                baidu.editor.ui.uiUtils.getFixedLayer().style.zIndex = popEl.style.zIndex - 1;
	            }
	            this.getDom().style.visibility = 'visible';

	        },
	        showAt: function (offset) {
	            var left = offset.left;
	            var top = offset.top;
	            var rect = {
	                left: left,
	                top: top,
	                right: left,
	                bottom: top,
	                height: 0,
	                width: 0
	            };
	            this.showAnchorRect(rect, false, true);
	        },
	        _show: function (){
	            if (this._hidden) {
	                var box = this.getDom();
	                box.style.display = '';
	                this._hidden = false;
//	                if (box.setActive) {
//	                    box.setActive();
//	                }
	                this.fireEvent('show');
	            }
	        },
	        isHidden: function (){
	            return this._hidden;
	        },
	        show: function (){
	            this._doAutoRender();
	            this._show();
	        },
	        hide: function (notNofity){
	            if (!this._hidden && this.getDom()) {
	                this.getDom().style.display = 'none';
	                this._hidden = true;
	                if (!notNofity) {
	                    this.fireEvent('hide');
	                }
	            }
	        },
	        queryAutoHide: function (el){
	            return !el || !uiUtils.contains(this.getDom(), el);
	        }
	    };
	    utils.inherits(Popup, UIBase);
	    
	    domUtils.on( document, 'mousedown', function ( evt ) {
	        var el = evt.target || evt.srcElement;
	        closeAllPopup( evt,el );
	    } );
	    domUtils.on( window, 'scroll', function (evt,el) {
	        closeAllPopup( evt,el );
	    } );

	})();


	// ui/colorpicker.js
	///import core
	///import uicore
	(function (){
	    var utils = baidu.editor.utils,
	        UIBase = baidu.editor.ui.UIBase,
	        ColorPicker = baidu.editor.ui.ColorPicker = function (options){
	            this.initOptions(options);
	            this.noColorText = this.noColorText || this.editor.getLang("clearColor");
	            this.initUIBase();
	        };

	    ColorPicker.prototype = {
	        getHtmlTpl: function (){
	            return genColorPicker(this.noColorText,this.editor);
	        },
	        _onTableClick: function (evt){
	            var tgt = evt.target || evt.srcElement;
	            var color = tgt.getAttribute('data-color');
	            if (color) {
	                this.fireEvent('pickcolor', color);
	            }
	        },
	        _onTableOver: function (evt){
	            var tgt = evt.target || evt.srcElement;
	            var color = tgt.getAttribute('data-color');
	            if (color) {
	                this.getDom('preview').style.backgroundColor = color;
	            }
	        },
	        _onTableOut: function (){
	            this.getDom('preview').style.backgroundColor = '';
	        },
	        _onPickNoColor: function (){
	            this.fireEvent('picknocolor');
	        }
	    };
	    utils.inherits(ColorPicker, UIBase);

	    var COLORS = (
	        'ffffff,000000,eeece1,1f497d,4f81bd,c0504d,9bbb59,8064a2,4bacc6,f79646,' +
	            'f2f2f2,7f7f7f,ddd9c3,c6d9f0,dbe5f1,f2dcdb,ebf1dd,e5e0ec,dbeef3,fdeada,' +
	            'd8d8d8,595959,c4bd97,8db3e2,b8cce4,e5b9b7,d7e3bc,ccc1d9,b7dde8,fbd5b5,' +
	            'bfbfbf,3f3f3f,938953,548dd4,95b3d7,d99694,c3d69b,b2a2c7,92cddc,fac08f,' +
	            'a5a5a5,262626,494429,17365d,366092,953734,76923c,5f497a,31859b,e36c09,' +
	            '7f7f7f,0c0c0c,1d1b10,0f243e,244061,632423,4f6128,3f3151,205867,974806,' +
	            'c00000,ff0000,ffc000,ffff00,92d050,00b050,00b0f0,0070c0,002060,7030a0,').split(',');

	    function genColorPicker(noColorText,editor){
	        var html = '<div id="##" class="edui-colorpicker %%">' +
	            '<div class="edui-colorpicker-topbar edui-clearfix">' +
	            '<div unselectable="on" id="##_preview" class="edui-colorpicker-preview"></div>' +
	            '<div unselectable="on" class="edui-colorpicker-nocolor" onclick="$$._onPickNoColor(event, this);">'+ noColorText +'</div>' +
	            '</div>' +
	            '<table  class="edui-box" style="border-collapse: collapse;" onmouseover="$$._onTableOver(event, this);" onmouseout="$$._onTableOut(event, this);" onclick="return $$._onTableClick(event, this);" cellspacing="0" cellpadding="0">' +
	            '<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#39C;padding-top: 2px"><td colspan="10">'+editor.getLang("themeColor")+'</td> </tr>'+
	            '<tr class="edui-colorpicker-tablefirstrow" >';
	        for (var i=0; i<COLORS.length; i++) {
	            if (i && i%10 === 0) {
	                html += '</tr>'+(i==60?'<tr style="border-bottom: 1px solid #ddd;font-size: 13px;line-height: 25px;color:#39C;"><td colspan="10">'+editor.getLang("standardColor")+'</td></tr>':'')+'<tr'+(i==60?' class="edui-colorpicker-tablefirstrow"':'')+'>';
	            }
	            html += i<70 ? '<td style="padding: 0 2px;"><a hidefocus title="'+COLORS[i]+'" onclick="return false;" href="javascript:" unselectable="on" class="edui-box edui-colorpicker-colorcell"' +
	                ' data-color="#'+ COLORS[i] +'"'+
	                ' style="background-color:#'+ COLORS[i] +';border:solid #ccc;'+
	                (i<10 || i>=60?'border-width:1px;':
	                    i>=10&&i<20?'border-width:1px 1px 0 1px;':

	                        'border-width:0 1px 0 1px;')+
	                '"' +
	                '></a></td>':'';
	        }
	        html += '</tr></table></div>';
	        return html;
	    }
	})();


	// ui/tablepicker.js
	///import core
	///import uicore
	(function (){
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        UIBase = baidu.editor.ui.UIBase;
	    
	    var TablePicker = baidu.editor.ui.TablePicker = function (options){
	        this.initOptions(options);
	        this.initTablePicker();
	    };
	    TablePicker.prototype = {
	        defaultNumRows: 10,
	        defaultNumCols: 10,
	        maxNumRows: 20,
	        maxNumCols: 20,
	        numRows: 10,
	        numCols: 10,
	        lengthOfCellSide: 22,
	        initTablePicker: function (){
	            this.initUIBase();
	        },
	        getHtmlTpl: function (){
	            var me = this;
	            return '<div id="##" class="edui-tablepicker %%">' +
	                 '<div class="edui-tablepicker-body">' +
	                  '<div class="edui-infoarea">' +
	                   '<span id="##_label" class="edui-label"></span>' +
	                  '</div>' +
	                  '<div class="edui-pickarea"' +
	                   ' onmousemove="$$._onMouseMove(event, this);"' +
	                   ' onmouseover="$$._onMouseOver(event, this);"' +
	                   ' onmouseout="$$._onMouseOut(event, this);"' +
	                   ' onclick="$$._onClick(event, this);"' +
	                  '>' +
	                    '<div id="##_overlay" class="edui-overlay"></div>' +
	                  '</div>' +
	                 '</div>' +
	                '</div>';
	        },
	        _UIBase_render: UIBase.prototype.render,
	        render: function (holder){
	            this._UIBase_render(holder);
	            this.getDom('label').innerHTML = '0'+this.editor.getLang("t_row")+' x 0'+this.editor.getLang("t_col");
	        },
	        _track: function (numCols, numRows){
	            var style = this.getDom('overlay').style;
	            var sideLen = this.lengthOfCellSide;
	            style.width = numCols * sideLen + 'px';
	            style.height = numRows * sideLen + 'px';
	            var label = this.getDom('label');
	            label.innerHTML = numCols +this.editor.getLang("t_col")+' x ' + numRows + this.editor.getLang("t_row");
	            this.numCols = numCols;
	            this.numRows = numRows;
	        },
	        _onMouseOver: function (evt, el){
	            var rel = evt.relatedTarget || evt.fromElement;
	            if (!uiUtils.contains(el, rel) && el !== rel) {
	                this.getDom('label').innerHTML = '0'+this.editor.getLang("t_col")+' x 0'+this.editor.getLang("t_row");
	                this.getDom('overlay').style.visibility = '';
	            }
	        },
	        _onMouseOut: function (evt, el){
	            var rel = evt.relatedTarget || evt.toElement;
	            if (!uiUtils.contains(el, rel) && el !== rel) {
	                this.getDom('label').innerHTML = '0'+this.editor.getLang("t_col")+' x 0'+this.editor.getLang("t_row");
	                this.getDom('overlay').style.visibility = 'hidden';
	            }
	        },
	        _onMouseMove: function (evt, el){
	            var style = this.getDom('overlay').style;
	            var offset = uiUtils.getEventOffset(evt);
	            var sideLen = this.lengthOfCellSide;
	            var numCols = Math.ceil(offset.left / sideLen);
	            var numRows = Math.ceil(offset.top / sideLen);
	            this._track(numCols, numRows);
	        },
	        _onClick: function (){
	            this.fireEvent('picktable', this.numCols, this.numRows);
	        }
	    };
	    utils.inherits(TablePicker, UIBase);
	})();


	// ui/stateful.js
	(function (){
	    var browser = baidu.editor.browser,
	        domUtils = baidu.editor.dom.domUtils,
	        uiUtils = baidu.editor.ui.uiUtils;
	    
	    var TPL_STATEFUL = 'onmousedown="$$.Stateful_onMouseDown(event, this);"' +
	        ' onmouseup="$$.Stateful_onMouseUp(event, this);"' +
	        ( browser.ie ? (
	        ' onmouseenter="$$.Stateful_onMouseEnter(event, this);"' +
	        ' onmouseleave="$$.Stateful_onMouseLeave(event, this);"' )
	        : (
	        ' onmouseover="$$.Stateful_onMouseOver(event, this);"' +
	        ' onmouseout="$$.Stateful_onMouseOut(event, this);"' ));
	    
	    baidu.editor.ui.Stateful = {
	        alwalysHoverable: false,
	        target:null,//目标元素和this指向dom不一样
	        Stateful_init: function (){
	            this._Stateful_dGetHtmlTpl = this.getHtmlTpl;
	            this.getHtmlTpl = this.Stateful_getHtmlTpl;
	        },
	        Stateful_getHtmlTpl: function (){
	            var tpl = this._Stateful_dGetHtmlTpl();
	            // 使用function避免$转义
	            return tpl.replace(/stateful/g, function (){ return TPL_STATEFUL; });
	        },
	        Stateful_onMouseEnter: function (evt, el){
	            this.target=el;
	            if (!this.isDisabled() || this.alwalysHoverable) {
	                this.addState('hover');
	                this.fireEvent('over');
	            }
	        },
	        Stateful_onMouseLeave: function (evt, el){
	            if (!this.isDisabled() || this.alwalysHoverable) {
	                this.removeState('hover');
	                this.removeState('active');
	                this.fireEvent('out');
	            }
	        },
	        Stateful_onMouseOver: function (evt, el){
	            var rel = evt.relatedTarget;
	            if (!uiUtils.contains(el, rel) && el !== rel) {
	                this.Stateful_onMouseEnter(evt, el);
	            }
	        },
	        Stateful_onMouseOut: function (evt, el){
	            var rel = evt.relatedTarget;
	            if (!uiUtils.contains(el, rel) && el !== rel) {
	                this.Stateful_onMouseLeave(evt, el);
	            }
	        },
	        Stateful_onMouseDown: function (evt, el){
	            if (!this.isDisabled()) {
	                this.addState('active');
	            }
	        },
	        Stateful_onMouseUp: function (evt, el){
	            if (!this.isDisabled()) {
	                this.removeState('active');
	            }
	        },
	        Stateful_postRender: function (){
	            if (this.disabled && !this.hasState('disabled')) {
	                this.addState('disabled');
	            }
	        },
	        hasState: function (state){
	            return domUtils.hasClass(this.getStateDom(), 'edui-state-' + state);
	        },
	        addState: function (state){
	            if (!this.hasState(state)) {
	                this.getStateDom().className += ' edui-state-' + state;
	            }
	        },
	        removeState: function (state){
	            if (this.hasState(state)) {
	                domUtils.removeClasses(this.getStateDom(), ['edui-state-' + state]);
	            }
	        },
	        getStateDom: function (){
	            return this.getDom('state');
	        },
	        isChecked: function (){
	            return this.hasState('checked');
	        },
	        setChecked: function (checked){
	            if (!this.isDisabled() && checked) {
	                this.addState('checked');
	            } else {
	                this.removeState('checked');
	            }
	        },
	        isDisabled: function (){
	            return this.hasState('disabled');
	        },
	        setDisabled: function (disabled){
	            if (disabled) {
	                this.removeState('hover');
	                this.removeState('checked');
	                this.removeState('active');
	                this.addState('disabled');
	            } else {
	                this.removeState('disabled');
	            }
	        }
	    };
	})();


	// ui/button.js
	///import core
	///import uicore
	///import ui/stateful.js
	(function (){
	    var utils = baidu.editor.utils,
	        UIBase = baidu.editor.ui.UIBase,
	        Stateful = baidu.editor.ui.Stateful,
	        Button = baidu.editor.ui.Button = function (options){
	            if(options.name){
	                var btnName = options.name;
	                var cssRules = options.cssRules;
	                if(!options.className){
	                    options.className =  'edui-for-' + btnName;
	                }
	                options.cssRules = '.edui-default  .edui-for-'+ btnName +' .edui-icon {'+ cssRules +'}'
	            }
	            this.initOptions(options);
	            this.initButton();
	        };
	    Button.prototype = {
	        uiName: 'button',
	        label: '',
	        title: '',
	        showIcon: true,
	        showText: true,
	        cssRules:'',
	        initButton: function (){
	            this.initUIBase();
	            this.Stateful_init();
	            if(this.cssRules){
	                utils.cssRule('edui-customize-'+this.name+'-style',this.cssRules);
	            }
	        },
	        getHtmlTpl: function (){
	            return '<div id="##" class="edui-box %%">' +
	                '<div id="##_state" stateful>' +
	                 '<div class="%%-wrap"><div id="##_body" unselectable="on" ' + (this.title ? 'title="' + this.title + '"' : '') +
	                 ' class="%%-body" onmousedown="return $$._onMouseDown(event, this);" onclick="return $$._onClick(event, this);">' +
	                  (this.showIcon ? '<div class="edui-box edui-icon"></div>' : '') +
	                  (this.showText ? '<div class="edui-box edui-label">' + this.label + '</div>' : '') +
	                 '</div>' +
	                '</div>' +
	                '</div></div>';
	        },
	        postRender: function (){
	            this.Stateful_postRender();
	            this.setDisabled(this.disabled)
	        },
	        _onMouseDown: function (e){
	            var target = e.target || e.srcElement,
	                tagName = target && target.tagName && target.tagName.toLowerCase();
	            if (tagName == 'input' || tagName == 'object' || tagName == 'object') {
	                return false;
	            }
	        },
	        _onClick: function (){
	            if (!this.isDisabled()) {
	                this.fireEvent('click');
	            }
	        },
	        setTitle: function(text){
	            var label = this.getDom('label');
	            label.innerHTML = text;
	        }
	    };
	    utils.inherits(Button, UIBase);
	    utils.extend(Button.prototype, Stateful);

	})();


	// ui/splitbutton.js
	///import core
	///import uicore
	///import ui/stateful.js
	(function (){
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        domUtils = baidu.editor.dom.domUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        Stateful = baidu.editor.ui.Stateful,
	        SplitButton = baidu.editor.ui.SplitButton = function (options){
	            this.initOptions(options);
	            this.initSplitButton();
	        };
	    SplitButton.prototype = {
	        popup: null,
	        uiName: 'splitbutton',
	        title: '',
	        initSplitButton: function (){
	            this.initUIBase();
	            this.Stateful_init();
	            var me = this;
	            if (this.popup != null) {
	                var popup = this.popup;
	                this.popup = null;
	                this.setPopup(popup);
	            }
	        },
	        _UIBase_postRender: UIBase.prototype.postRender,
	        postRender: function (){
	            this.Stateful_postRender();
	            this._UIBase_postRender();
	        },
	        setPopup: function (popup){
	            if (this.popup === popup) return;
	            if (this.popup != null) {
	                this.popup.dispose();
	            }
	            popup.addListener('show', utils.bind(this._onPopupShow, this));
	            popup.addListener('hide', utils.bind(this._onPopupHide, this));
	            popup.addListener('postrender', utils.bind(function (){
	                popup.getDom('body').appendChild(
	                    uiUtils.createElementByHtml('<div id="' +
	                        this.popup.id + '_bordereraser" class="edui-bordereraser edui-background" style="width:' +
	                        (uiUtils.getClientRect(this.getDom()).width + 20) + 'px"></div>')
	                    );
	                popup.getDom().className += ' ' + this.className;
	            }, this));
	            this.popup = popup;
	        },
	        _onPopupShow: function (){
	            this.addState('opened');
	        },
	        _onPopupHide: function (){
	            this.removeState('opened');
	        },
	        getHtmlTpl: function (){
	            return '<div id="##" class="edui-box %%">' +
	                '<div '+ (this.title ? 'title="' + this.title + '"' : '') +' id="##_state" stateful><div class="%%-body">' +
	                '<div id="##_button_body" class="edui-box edui-button-body" onclick="$$._onButtonClick(event, this);">' +
	                '<div class="edui-box edui-icon"></div>' +
	                '</div>' +
	                '<div class="edui-box edui-splitborder"></div>' +
	                '<div class="edui-box edui-arrow" onclick="$$._onArrowClick();"></div>' +
	                '</div></div></div>';
	        },
	        showPopup: function (){
	            // 当popup往上弹出的时候，做特殊处理
	            var rect = uiUtils.getClientRect(this.getDom());
	            rect.top -= this.popup.SHADOW_RADIUS;
	            rect.height += this.popup.SHADOW_RADIUS;
	            this.popup.showAnchorRect(rect);
	        },
	        _onArrowClick: function (event, el){
	            if (!this.isDisabled()) {
	                this.showPopup();
	            }
	        },
	        _onButtonClick: function (){
	            if (!this.isDisabled()) {
	                this.fireEvent('buttonclick');
	            }
	        }
	    };
	    utils.inherits(SplitButton, UIBase);
	    utils.extend(SplitButton.prototype, Stateful, true);

	})();


	// ui/colorbutton.js
	///import core
	///import uicore
	///import ui/colorpicker.js
	///import ui/popup.js
	///import ui/splitbutton.js
	(function (){
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        ColorPicker = baidu.editor.ui.ColorPicker,
	        Popup = baidu.editor.ui.Popup,
	        SplitButton = baidu.editor.ui.SplitButton,
	        ColorButton = baidu.editor.ui.ColorButton = function (options){
	            this.initOptions(options);
	            this.initColorButton();
	        };
	    ColorButton.prototype = {
	        initColorButton: function (){
	            var me = this;
	            this.popup = new Popup({
	                content: new ColorPicker({
	                    noColorText: me.editor.getLang("clearColor"),
	                    editor:me.editor,
	                    onpickcolor: function (t, color){
	                        me._onPickColor(color);
	                    },
	                    onpicknocolor: function (t, color){
	                        me._onPickNoColor(color);
	                    }
	                }),
	                editor:me.editor
	            });
	            this.initSplitButton();
	        },
	        _SplitButton_postRender: SplitButton.prototype.postRender,
	        postRender: function (){
	            this._SplitButton_postRender();
	            this.getDom('button_body').appendChild(
	                uiUtils.createElementByHtml('<div id="' + this.id + '_colorlump" class="edui-colorlump"></div>')
	            );
	            this.getDom().className += ' edui-colorbutton';
	        },
	        setColor: function (color){
	            this.getDom('colorlump').style.backgroundColor = color;
	            this.color = color;
	        },
	        _onPickColor: function (color){
	            if (this.fireEvent('pickcolor', color) !== false) {
	                this.setColor(color);
	                this.popup.hide();
	            }
	        },
	        _onPickNoColor: function (color){
	            if (this.fireEvent('picknocolor') !== false) {
	                this.popup.hide();
	            }
	        }
	    };
	    utils.inherits(ColorButton, SplitButton);

	})();


	// ui/tablebutton.js
	///import core
	///import uicore
	///import ui/popup.js
	///import ui/tablepicker.js
	///import ui/splitbutton.js
	(function (){
	    var utils = baidu.editor.utils,
	        Popup = baidu.editor.ui.Popup,
	        TablePicker = baidu.editor.ui.TablePicker,
	        SplitButton = baidu.editor.ui.SplitButton,
	        TableButton = baidu.editor.ui.TableButton = function (options){
	            this.initOptions(options);
	            this.initTableButton();
	        };
	    TableButton.prototype = {
	        initTableButton: function (){
	            var me = this;
	            this.popup = new Popup({
	                content: new TablePicker({
	                    editor:me.editor,
	                    onpicktable: function (t, numCols, numRows){
	                        me._onPickTable(numCols, numRows);
	                    }
	                }),
	                'editor':me.editor
	            });
	            this.initSplitButton();
	        },
	        _onPickTable: function (numCols, numRows){
	            if (this.fireEvent('picktable', numCols, numRows) !== false) {
	                this.popup.hide();
	            }
	        }
	    };
	    utils.inherits(TableButton, SplitButton);

	})();


	// ui/autotypesetpicker.js
	///import core
	///import uicore
	(function () {
	    var utils = baidu.editor.utils,
	        UIBase = baidu.editor.ui.UIBase;

	    var AutoTypeSetPicker = baidu.editor.ui.AutoTypeSetPicker = function (options) {
	        this.initOptions(options);
	        this.initAutoTypeSetPicker();
	    };
	    AutoTypeSetPicker.prototype = {
	        initAutoTypeSetPicker:function () {
	            this.initUIBase();
	        },
	        getHtmlTpl:function () {
	            var me = this.editor,
	                opt = me.options.autotypeset,
	                lang = me.getLang("autoTypeSet");

	            var textAlignInputName = 'textAlignValue' + me.uid,
	                imageBlockInputName = 'imageBlockLineValue' + me.uid,
	                symbolConverInputName = 'symbolConverValue' + me.uid;

	            return '<div id="##" class="edui-autotypesetpicker %%">' +
	                '<div class="edui-autotypesetpicker-body">' +
	                '<table >' +
	                '<tr><td nowrap><input type="checkbox" name="mergeEmptyline" ' + (opt["mergeEmptyline"] ? "checked" : "" ) + '>' + lang.mergeLine + '</td><td colspan="2"><input type="checkbox" name="removeEmptyline" ' + (opt["removeEmptyline"] ? "checked" : "" ) + '>' + lang.delLine + '</td></tr>' +
	                '<tr><td nowrap><input type="checkbox" name="removeClass" ' + (opt["removeClass"] ? "checked" : "" ) + '>' + lang.removeFormat + '</td><td colspan="2"><input type="checkbox" name="indent" ' + (opt["indent"] ? "checked" : "" ) + '>' + lang.indent + '</td></tr>' +
	                '<tr>' +
	                '<td nowrap><input type="checkbox" name="textAlign" ' + (opt["textAlign"] ? "checked" : "" ) + '>' + lang.alignment + '</td>' +
	                '<td colspan="2" id="' + textAlignInputName + '">' +
	                '<input type="radio" name="'+ textAlignInputName +'" value="left" ' + ((opt["textAlign"] && opt["textAlign"] == "left") ? "checked" : "") + '>' + me.getLang("justifyleft") +
	                '<input type="radio" name="'+ textAlignInputName +'" value="center" ' + ((opt["textAlign"] && opt["textAlign"] == "center") ? "checked" : "") + '>' + me.getLang("justifycenter") +
	                '<input type="radio" name="'+ textAlignInputName +'" value="right" ' + ((opt["textAlign"] && opt["textAlign"] == "right") ? "checked" : "") + '>' + me.getLang("justifyright") +
	                '</td>' +
	                '</tr>' +
	                '<tr>' +
	                '<td nowrap><input type="checkbox" name="imageBlockLine" ' + (opt["imageBlockLine"] ? "checked" : "" ) + '>' + lang.imageFloat + '</td>' +
	                '<td nowrap id="'+ imageBlockInputName +'">' +
	                '<input type="radio" name="'+ imageBlockInputName +'" value="none" ' + ((opt["imageBlockLine"] && opt["imageBlockLine"] == "none") ? "checked" : "") + '>' + me.getLang("default") +
	                '<input type="radio" name="'+ imageBlockInputName +'" value="left" ' + ((opt["imageBlockLine"] && opt["imageBlockLine"] == "left") ? "checked" : "") + '>' + me.getLang("justifyleft") +
	                '<input type="radio" name="'+ imageBlockInputName +'" value="center" ' + ((opt["imageBlockLine"] && opt["imageBlockLine"] == "center") ? "checked" : "") + '>' + me.getLang("justifycenter") +
	                '<input type="radio" name="'+ imageBlockInputName +'" value="right" ' + ((opt["imageBlockLine"] && opt["imageBlockLine"] == "right") ? "checked" : "") + '>' + me.getLang("justifyright") +
	                '</td>' +
	                '</tr>' +
	                '<tr><td nowrap><input type="checkbox" name="clearFontSize" ' + (opt["clearFontSize"] ? "checked" : "" ) + '>' + lang.removeFontsize + '</td><td colspan="2"><input type="checkbox" name="clearFontFamily" ' + (opt["clearFontFamily"] ? "checked" : "" ) + '>' + lang.removeFontFamily + '</td></tr>' +
	                '<tr><td nowrap colspan="3"><input type="checkbox" name="removeEmptyNode" ' + (opt["removeEmptyNode"] ? "checked" : "" ) + '>' + lang.removeHtml + '</td></tr>' +
	                '<tr><td nowrap colspan="3"><input type="checkbox" name="pasteFilter" ' + (opt["pasteFilter"] ? "checked" : "" ) + '>' + lang.pasteFilter + '</td></tr>' +
	                '<tr>' +
	                '<td nowrap><input type="checkbox" name="symbolConver" ' + (opt["bdc2sb"] || opt["tobdc"] ? "checked" : "" ) + '>' + lang.symbol + '</td>' +
	                '<td id="' + symbolConverInputName + '">' +
	                '<input type="radio" name="bdc" value="bdc2sb" ' + (opt["bdc2sb"] ? "checked" : "" ) + '>' + lang.bdc2sb +
	                '<input type="radio" name="bdc" value="tobdc" ' + (opt["tobdc"] ? "checked" : "" ) + '>' + lang.tobdc + '' +
	                '</td>' +
	                '<td nowrap align="right"><button >' + lang.run + '</button></td>' +
	                '</tr>' +
	                '</table>' +
	                '</div>' +
	                '</div>';


	        },
	        _UIBase_render:UIBase.prototype.render
	    };
	    utils.inherits(AutoTypeSetPicker, UIBase);
	})();


	// ui/autotypesetbutton.js
	///import core
	///import uicore
	///import ui/popup.js
	///import ui/autotypesetpicker.js
	///import ui/splitbutton.js
	(function (){
	    var utils = baidu.editor.utils,
	        Popup = baidu.editor.ui.Popup,
	        AutoTypeSetPicker = baidu.editor.ui.AutoTypeSetPicker,
	        SplitButton = baidu.editor.ui.SplitButton,
	        AutoTypeSetButton = baidu.editor.ui.AutoTypeSetButton = function (options){
	            this.initOptions(options);
	            this.initAutoTypeSetButton();
	        };
	    function getPara(me){

	        var opt = {},
	            cont = me.getDom(),
	            editorId = me.editor.uid,
	            inputType = null,
	            attrName = null,
	            ipts = domUtils.getElementsByTagName(cont,"input");
	        for(var i=ipts.length-1,ipt;ipt=ipts[i--];){
	            inputType = ipt.getAttribute("type");
	            if(inputType=="checkbox"){
	                attrName = ipt.getAttribute("name");
	                opt[attrName] && delete opt[attrName];
	                if(ipt.checked){
	                    var attrValue = document.getElementById( attrName + "Value" + editorId );
	                    if(attrValue){
	                        if(/input/ig.test(attrValue.tagName)){
	                            opt[attrName] = attrValue.value;
	                        } else {
	                            var iptChilds = attrValue.getElementsByTagName("input");
	                            for(var j=iptChilds.length-1,iptchild;iptchild=iptChilds[j--];){
	                                if(iptchild.checked){
	                                    opt[attrName] = iptchild.value;
	                                    break;
	                                }
	                            }
	                        }
	                    } else {
	                        opt[attrName] = true;
	                    }
	                } else {
	                    opt[attrName] = false;
	                }
	            } else {
	                opt[ipt.getAttribute("value")] = ipt.checked;
	            }

	        }

	        var selects = domUtils.getElementsByTagName(cont,"select");
	        for(var i=0,si;si=selects[i++];){
	            var attr = si.getAttribute('name');
	            opt[attr] = opt[attr] ? si.value : '';
	        }

	        utils.extend(me.editor.options.autotypeset,opt);

	        me.editor.setPreferences('autotypeset', opt);
	    }

	    AutoTypeSetButton.prototype = {
	        initAutoTypeSetButton: function (){

	            var me = this;
	            this.popup = new Popup({
	                //传入配置参数
	                content: new AutoTypeSetPicker({editor:me.editor}),
	                'editor':me.editor,
	                hide : function(){
	                    if (!this._hidden && this.getDom()) {
	                        getPara(this);
	                        this.getDom().style.display = 'none';
	                        this._hidden = true;
	                        this.fireEvent('hide');
	                    }
	                }
	            });
	            var flag = 0;
	            this.popup.addListener('postRenderAfter',function(){
	                var popupUI = this;
	                if(flag)return;
	                var cont = this.getDom(),
	                    btn = cont.getElementsByTagName('button')[0];

	                btn.onclick = function(){
	                    getPara(popupUI);
	                    me.editor.execCommand('autotypeset');
	                    popupUI.hide()
	                };

	                domUtils.on(cont, 'click', function(e) {
	                    var target = e.target || e.srcElement,
	                        editorId = me.editor.uid;
	                    if (target && target.tagName == 'INPUT') {

	                        // 点击图片浮动的checkbox,去除对应的radio
	                        if (target.name == 'imageBlockLine' || target.name == 'textAlign' || target.name == 'symbolConver') {
	                            var checked = target.checked,
	                                radioTd = document.getElementById( target.name + 'Value' + editorId),
	                                radios = radioTd.getElementsByTagName('input'),
	                                defalutSelect = {
	                                    'imageBlockLine': 'none',
	                                    'textAlign': 'left',
	                                    'symbolConver': 'tobdc'
	                                };

	                            for (var i = 0; i < radios.length; i++) {
	                                if (checked) {
	                                    if (radios[i].value == defalutSelect[target.name]) {
	                                        radios[i].checked = 'checked';
	                                    }
	                                } else {
	                                    radios[i].checked = false;
	                                }
	                            }
	                        }
	                        // 点击radio,选中对应的checkbox
	                        if (target.name == ('imageBlockLineValue' + editorId) || target.name == ('textAlignValue' + editorId) || target.name == 'bdc') {
	                            var checkboxs = target.parentNode.previousSibling.getElementsByTagName('input');
	                            checkboxs && (checkboxs[0].checked = true);
	                        }

	                        getPara(popupUI);
	                    }
	                });

	                flag = 1;
	            });
	            this.initSplitButton();
	        }
	    };
	    utils.inherits(AutoTypeSetButton, SplitButton);

	})();


	// ui/cellalignpicker.js
	///import core
	///import uicore
	(function () {
	    var utils = baidu.editor.utils,
	        Popup = baidu.editor.ui.Popup,
	        Stateful = baidu.editor.ui.Stateful,
	        UIBase = baidu.editor.ui.UIBase;

	    /**
	     * 该参数将新增一个参数： selected， 参数类型为一个Object， 形如{ 'align': 'center', 'valign': 'top' }， 表示单元格的初始
	     * 对齐状态为： 竖直居上，水平居中; 其中 align的取值为：'center', 'left', 'right'; valign的取值为: 'top', 'middle', 'bottom'
	     * @update 2013/4/2 hancong03@baidu.com
	     */
	    var CellAlignPicker = baidu.editor.ui.CellAlignPicker = function (options) {
	        this.initOptions(options);
	        this.initSelected();
	        this.initCellAlignPicker();
	    };
	    CellAlignPicker.prototype = {
	        //初始化选中状态， 该方法将根据传递进来的参数获取到应该选中的对齐方式图标的索引
	        initSelected: function(){

	            var status = {

	                valign: {
	                    top: 0,
	                    middle: 1,
	                    bottom: 2
	                },
	                align: {
	                    left: 0,
	                    center: 1,
	                    right: 2
	                },
	                count: 3

	                },
	                result = -1;

	            if( this.selected ) {
	                this.selectedIndex = status.valign[ this.selected.valign ] * status.count + status.align[ this.selected.align ];
	            }

	        },
	        initCellAlignPicker:function () {
	            this.initUIBase();
	            this.Stateful_init();
	        },
	        getHtmlTpl:function () {

	            var alignType = [ 'left', 'center', 'right' ],
	                COUNT = 9,
	                tempClassName = null,
	                tempIndex = -1,
	                tmpl = [];


	            for( var i= 0; i<COUNT; i++ ) {

	                tempClassName = this.selectedIndex === i ? ' class="edui-cellalign-selected" ' : '';
	                tempIndex = i % 3;

	                tempIndex === 0 && tmpl.push('<tr>');

	                tmpl.push( '<td index="'+ i +'" ' + tempClassName + ' stateful><div class="edui-icon edui-'+ alignType[ tempIndex ] +'"></div></td>' );

	                tempIndex === 2 && tmpl.push('</tr>');

	            }

	            return '<div id="##" class="edui-cellalignpicker %%">' +
	                '<div class="edui-cellalignpicker-body">' +
	                '<table onclick="$$._onClick(event);">' +
	                tmpl.join('') +
	                '</table>' +
	                '</div>' +
	                '</div>';
	        },
	        getStateDom: function (){
	            return this.target;
	        },
	        _onClick: function (evt){
	            var target= evt.target || evt.srcElement;
	            if(/icon/.test(target.className)){
	                this.items[target.parentNode.getAttribute("index")].onclick();
	                Popup.postHide(evt);
	            }
	        },
	        _UIBase_render:UIBase.prototype.render
	    };
	    utils.inherits(CellAlignPicker, UIBase);
	    utils.extend(CellAlignPicker.prototype, Stateful,true);
	})();





	// ui/pastepicker.js
	///import core
	///import uicore
	(function () {
	    var utils = baidu.editor.utils,
	        Stateful = baidu.editor.ui.Stateful,
	        uiUtils = baidu.editor.ui.uiUtils,
	        UIBase = baidu.editor.ui.UIBase;

	    var PastePicker = baidu.editor.ui.PastePicker = function (options) {
	        this.initOptions(options);
	        this.initPastePicker();
	    };
	    PastePicker.prototype = {
	        initPastePicker:function () {
	            this.initUIBase();
	            this.Stateful_init();
	        },
	        getHtmlTpl:function () {
	            return '<div class="edui-pasteicon" onclick="$$._onClick(this)"></div>' +
	                '<div class="edui-pastecontainer">' +
	                '<div class="edui-title">' + this.editor.getLang("pasteOpt") + '</div>' +
	                '<div class="edui-button">' +
	                '<div title="' + this.editor.getLang("pasteSourceFormat") + '" onclick="$$.format(false)" stateful>' +
	                '<div class="edui-richtxticon"></div></div>' +
	                '<div title="' + this.editor.getLang("tagFormat") + '" onclick="$$.format(2)" stateful>' +
	                '<div class="edui-tagicon"></div></div>' +
	                '<div title="' + this.editor.getLang("pasteTextFormat") + '" onclick="$$.format(true)" stateful>' +
	                '<div class="edui-plaintxticon"></div></div>' +
	                '</div>' +
	                '</div>' +
	                '</div>'
	        },
	        getStateDom:function () {
	            return this.target;
	        },
	        format:function (param) {
	            this.editor.ui._isTransfer = true;
	            this.editor.fireEvent('pasteTransfer', param);
	        },
	        _onClick:function (cur) {
	            var node = domUtils.getNextDomNode(cur),
	                screenHt = uiUtils.getViewportRect().height,
	                subPop = uiUtils.getClientRect(node);

	            if ((subPop.top + subPop.height) > screenHt)
	                node.style.top = (-subPop.height - cur.offsetHeight) + "px";
	            else
	                node.style.top = "";

	            if (/hidden/ig.test(domUtils.getComputedStyle(node, "visibility"))) {
	                node.style.visibility = "visible";
	                domUtils.addClass(cur, "edui-state-opened");
	            } else {
	                node.style.visibility = "hidden";
	                domUtils.removeClasses(cur, "edui-state-opened")
	            }
	        },
	        _UIBase_render:UIBase.prototype.render
	    };
	    utils.inherits(PastePicker, UIBase);
	    utils.extend(PastePicker.prototype, Stateful, true);
	})();






	// ui/toolbar.js
	(function (){
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        Toolbar = baidu.editor.ui.Toolbar = function (options){
	            this.initOptions(options);
	            this.initToolbar();
	        };
	    Toolbar.prototype = {
	        items: null,
	        initToolbar: function (){
	            this.items = this.items || [];
	            this.initUIBase();
	        },
	        add: function (item,index){
	            if(index === undefined){
	                this.items.push(item);
	            }else{
	                this.items.splice(index,0,item)
	            }

	        },
	        getHtmlTpl: function (){
	            var buff = [];
	            for (var i=0; i<this.items.length; i++) {
	                buff[i] = this.items[i].renderHtml();
	            }
	            return '<div id="##" class="edui-toolbar %%" onselectstart="return false;" onmousedown="return $$._onMouseDown(event, this);">' +
	                buff.join('') +
	                '</div>'
	        },
	        postRender: function (){
	            var box = this.getDom();
	            for (var i=0; i<this.items.length; i++) {
	                this.items[i].postRender();
	            }
	            uiUtils.makeUnselectable(box);
	        },
	        _onMouseDown: function (e){
	            var target = e.target || e.srcElement,
	                tagName = target && target.tagName && target.tagName.toLowerCase();
	            if (tagName == 'input' || tagName == 'object' || tagName == 'object') {
	                return false;
	            }
	        }
	    };
	    utils.inherits(Toolbar, UIBase);

	})();


	// ui/menu.js
	///import core
	///import uicore
	///import ui\popup.js
	///import ui\stateful.js
	(function () {
	    var utils = baidu.editor.utils,
	        domUtils = baidu.editor.dom.domUtils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        Popup = baidu.editor.ui.Popup,
	        Stateful = baidu.editor.ui.Stateful,
	        CellAlignPicker = baidu.editor.ui.CellAlignPicker,

	        Menu = baidu.editor.ui.Menu = function (options) {
	            this.initOptions(options);
	            this.initMenu();
	        };

	    var menuSeparator = {
	        renderHtml:function () {
	            return '<div class="edui-menuitem edui-menuseparator"><div class="edui-menuseparator-inner"></div></div>';
	        },
	        postRender:function () {
	        },
	        queryAutoHide:function () {
	            return true;
	        }
	    };
	    Menu.prototype = {
	        items:null,
	        uiName:'menu',
	        initMenu:function () {
	            this.items = this.items || [];
	            this.initPopup();
	            this.initItems();
	        },
	        initItems:function () {
	            for (var i = 0; i < this.items.length; i++) {
	                var item = this.items[i];
	                if (item == '-') {
	                    this.items[i] = this.getSeparator();
	                } else if (!(item instanceof MenuItem)) {
	                    item.editor = this.editor;
	                    item.theme = this.editor.options.theme;
	                    this.items[i] = this.createItem(item);
	                }
	            }
	        },
	        getSeparator:function () {
	            return menuSeparator;
	        },
	        createItem:function (item) {
	            //新增一个参数menu, 该参数存储了menuItem所对应的menu引用
	            item.menu = this;
	            return new MenuItem(item);
	        },
	        _Popup_getContentHtmlTpl:Popup.prototype.getContentHtmlTpl,
	        getContentHtmlTpl:function () {
	            if (this.items.length == 0) {
	                return this._Popup_getContentHtmlTpl();
	            }
	            var buff = [];
	            for (var i = 0; i < this.items.length; i++) {
	                var item = this.items[i];
	                buff[i] = item.renderHtml();
	            }
	            return ('<div class="%%-body">' + buff.join('') + '</div>');
	        },
	        _Popup_postRender:Popup.prototype.postRender,
	        postRender:function () {
	            var me = this;
	            for (var i = 0; i < this.items.length; i++) {
	                var item = this.items[i];
	                item.ownerMenu = this;
	                item.postRender();
	            }
	            domUtils.on(this.getDom(), 'mouseover', function (evt) {
	                evt = evt || event;
	                var rel = evt.relatedTarget || evt.fromElement;
	                var el = me.getDom();
	                if (!uiUtils.contains(el, rel) && el !== rel) {
	                    me.fireEvent('over');
	                }
	            });
	            this._Popup_postRender();
	        },
	        queryAutoHide:function (el) {
	            if (el) {
	                if (uiUtils.contains(this.getDom(), el)) {
	                    return false;
	                }
	                for (var i = 0; i < this.items.length; i++) {
	                    var item = this.items[i];
	                    if (item.queryAutoHide(el) === false) {
	                        return false;
	                    }
	                }
	            }
	        },
	        clearItems:function () {
	            for (var i = 0; i < this.items.length; i++) {
	                var item = this.items[i];
	                clearTimeout(item._showingTimer);
	                clearTimeout(item._closingTimer);
	                if (item.subMenu) {
	                    item.subMenu.destroy();
	                }
	            }
	            this.items = [];
	        },
	        destroy:function () {
	            if (this.getDom()) {
	                domUtils.remove(this.getDom());
	            }
	            this.clearItems();
	        },
	        dispose:function () {
	            this.destroy();
	        }
	    };
	    utils.inherits(Menu, Popup);

	    /**
	     * @update 2013/04/03 hancong03 新增一个参数menu, 该参数存储了menuItem所对应的menu引用
	     * @type {Function}
	     */
	    var MenuItem = baidu.editor.ui.MenuItem = function (options) {
	        this.initOptions(options);
	        this.initUIBase();
	        this.Stateful_init();
	        if (this.subMenu && !(this.subMenu instanceof Menu)) {
	            if (options.className && options.className.indexOf("aligntd") != -1) {
	                var me = this;

	                //获取单元格对齐初始状态
	                this.subMenu.selected = this.editor.queryCommandValue( 'cellalignment' );

	                this.subMenu = new Popup({
	                    content:new CellAlignPicker(this.subMenu),
	                    parentMenu:me,
	                    editor:me.editor,
	                    destroy:function () {
	                        if (this.getDom()) {
	                            domUtils.remove(this.getDom());
	                        }
	                    }
	                });
	                this.subMenu.addListener("postRenderAfter", function () {
	                    domUtils.on(this.getDom(), "mouseover", function () {
	                        me.addState('opened');
	                    });
	                });
	            } else {
	                this.subMenu = new Menu(this.subMenu);
	            }
	        }
	    };
	    MenuItem.prototype = {
	        label:'',
	        subMenu:null,
	        ownerMenu:null,
	        uiName:'menuitem',
	        alwalysHoverable:true,
	        getHtmlTpl:function () {
	            return '<div id="##" class="%%" stateful onclick="$$._onClick(event, this);">' +
	                '<div class="%%-body">' +
	                this.renderLabelHtml() +
	                '</div>' +
	                '</div>';
	        },
	        postRender:function () {
	            var me = this;
	            this.addListener('over', function () {
	                me.ownerMenu.fireEvent('submenuover', me);
	                if (me.subMenu) {
	                    me.delayShowSubMenu();
	                }
	            });
	            if (this.subMenu) {
	                this.getDom().className += ' edui-hassubmenu';
	                this.subMenu.render();
	                this.addListener('out', function () {
	                    me.delayHideSubMenu();
	                });
	                this.subMenu.addListener('over', function () {
	                    clearTimeout(me._closingTimer);
	                    me._closingTimer = null;
	                    me.addState('opened');
	                });
	                this.ownerMenu.addListener('hide', function () {
	                    me.hideSubMenu();
	                });
	                this.ownerMenu.addListener('submenuover', function (t, subMenu) {
	                    if (subMenu !== me) {
	                        me.delayHideSubMenu();
	                    }
	                });
	                this.subMenu._bakQueryAutoHide = this.subMenu.queryAutoHide;
	                this.subMenu.queryAutoHide = function (el) {
	                    if (el && uiUtils.contains(me.getDom(), el)) {
	                        return false;
	                    }
	                    return this._bakQueryAutoHide(el);
	                };
	            }
	            this.getDom().style.tabIndex = '-1';
	            uiUtils.makeUnselectable(this.getDom());
	            this.Stateful_postRender();
	        },
	        delayShowSubMenu:function () {
	            var me = this;
	            if (!me.isDisabled()) {
	                me.addState('opened');
	                clearTimeout(me._showingTimer);
	                clearTimeout(me._closingTimer);
	                me._closingTimer = null;
	                me._showingTimer = setTimeout(function () {
	                    me.showSubMenu();
	                }, 250);
	            }
	        },
	        delayHideSubMenu:function () {
	            var me = this;
	            if (!me.isDisabled()) {
	                me.removeState('opened');
	                clearTimeout(me._showingTimer);
	                if (!me._closingTimer) {
	                    me._closingTimer = setTimeout(function () {
	                        if (!me.hasState('opened')) {
	                            me.hideSubMenu();
	                        }
	                        me._closingTimer = null;
	                    }, 400);
	                }
	            }
	        },
	        renderLabelHtml:function () {
	            return '<div class="edui-arrow"></div>' +
	                '<div class="edui-box edui-icon"></div>' +
	                '<div class="edui-box edui-label %%-label">' + (this.label || '') + '</div>';
	        },
	        getStateDom:function () {
	            return this.getDom();
	        },
	        queryAutoHide:function (el) {
	            if (this.subMenu && this.hasState('opened')) {
	                return this.subMenu.queryAutoHide(el);
	            }
	        },
	        _onClick:function (event, this_) {
	            if (this.hasState('disabled')) return;
	            if (this.fireEvent('click', event, this_) !== false) {
	                if (this.subMenu) {
	                    this.showSubMenu();
	                } else {
	                    Popup.postHide(event);
	                }
	            }
	        },
	        showSubMenu:function () {
	            var rect = uiUtils.getClientRect(this.getDom());
	            rect.right -= 5;
	            rect.left += 2;
	            rect.width -= 7;
	            rect.top -= 4;
	            rect.bottom += 4;
	            rect.height += 8;
	            this.subMenu.showAnchorRect(rect, true, true);
	        },
	        hideSubMenu:function () {
	            this.subMenu.hide();
	        }
	    };
	    utils.inherits(MenuItem, UIBase);
	    utils.extend(MenuItem.prototype, Stateful, true);
	})();


	// ui/combox.js
	///import core
	///import uicore
	///import ui/menu.js
	///import ui/splitbutton.js
	(function (){
	    // todo: menu和item提成通用list
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        Menu = baidu.editor.ui.Menu,
	        SplitButton = baidu.editor.ui.SplitButton,
	        Combox = baidu.editor.ui.Combox = function (options){
	            this.initOptions(options);
	            this.initCombox();
	        };
	    Combox.prototype = {
	        uiName: 'combox',
	        onbuttonclick:function () {
	            this.showPopup();
	        },
	        initCombox: function (){
	            var me = this;
	            this.items = this.items || [];
	            for (var i=0; i<this.items.length; i++) {
	                var item = this.items[i];
	                item.uiName = 'listitem';
	                item.index = i;
	                item.onclick = function (){
	                    me.selectByIndex(this.index);
	                };
	            }
	            this.popup = new Menu({
	                items: this.items,
	                uiName: 'list',
	                editor:this.editor,
	                captureWheel: true,
	                combox: this
	            });

	            this.initSplitButton();
	        },
	        _SplitButton_postRender: SplitButton.prototype.postRender,
	        postRender: function (){
	            this._SplitButton_postRender();
	            this.setLabel(this.label || '');
	            this.setValue(this.initValue || '');
	        },
	        showPopup: function (){
	            var rect = uiUtils.getClientRect(this.getDom());
	            rect.top += 1;
	            rect.bottom -= 1;
	            rect.height -= 2;
	            this.popup.showAnchorRect(rect);
	        },
	        getValue: function (){
	            return this.value;
	        },
	        setValue: function (value){
	            var index = this.indexByValue(value);
	            if (index != -1) {
	                this.selectedIndex = index;
	                this.setLabel(this.items[index].label);
	                this.value = this.items[index].value;
	            } else {
	                this.selectedIndex = -1;
	                this.setLabel(this.getLabelForUnknowValue(value));
	                this.value = value;
	            }
	        },
	        setLabel: function (label){
	            this.getDom('button_body').innerHTML = label;
	            this.label = label;
	        },
	        getLabelForUnknowValue: function (value){
	            return value;
	        },
	        indexByValue: function (value){
	            for (var i=0; i<this.items.length; i++) {
	                if (value == this.items[i].value) {
	                    return i;
	                }
	            }
	            return -1;
	        },
	        getItem: function (index){
	            return this.items[index];
	        },
	        selectByIndex: function (index){
	            if (index < this.items.length && this.fireEvent('select', index) !== false) {
	                this.selectedIndex = index;
	                this.value = this.items[index].value;
	                this.setLabel(this.items[index].label);
	            }
	        }
	    };
	    utils.inherits(Combox, SplitButton);
	})();


	// ui/dialog.js
	///import core
	///import uicore
	///import ui/mask.js
	///import ui/button.js
	(function (){
	    var utils = baidu.editor.utils,
	        domUtils = baidu.editor.dom.domUtils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        Mask = baidu.editor.ui.Mask,
	        UIBase = baidu.editor.ui.UIBase,
	        Button = baidu.editor.ui.Button,
	        Dialog = baidu.editor.ui.Dialog = function (options){
	            if(options.name){
	                var name = options.name;
	                var cssRules = options.cssRules;
	                if(!options.className){
	                    options.className =  'edui-for-' + name;
	                }
	                if(cssRules){
	                    options.cssRules = '.edui-default .edui-for-'+ name +' .edui-dialog-content  {'+ cssRules +'}'
	                }
	            }
	            this.initOptions(utils.extend({
	                autoReset: true,
	                draggable: true,
	                onok: function (){},
	                oncancel: function (){},
	                onclose: function (t, ok){
	                    return ok ? this.onok() : this.oncancel();
	                },
	                //是否控制dialog中的scroll事件， 默认为不阻止
	                holdScroll: false
	            },options));
	            this.initDialog();
	        };
	    var modalMask;
	    var dragMask;
	    var activeDialog;
	    Dialog.prototype = {
	        draggable: false,
	        uiName: 'dialog',
	        initDialog: function (){
	            var me = this,
	                theme=this.editor.options.theme;
	            if(this.cssRules){
	                utils.cssRule('edui-customize-'+this.name+'-style',this.cssRules);
	            }
	            this.initUIBase();
	            this.modalMask = (modalMask || (modalMask = new Mask({
	                className: 'edui-dialog-modalmask',
	                theme:theme,
	                onclick: function (){
	                    activeDialog && activeDialog.close(false);
	                }
	            })));
	            this.dragMask = (dragMask || (dragMask = new Mask({
	                className: 'edui-dialog-dragmask',
	                theme:theme
	            })));
	            this.closeButton = new Button({
	                className: 'edui-dialog-closebutton',
	                title: me.closeDialog,
	                theme:theme,
	                onclick: function (){
	                    me.close(false);
	                }
	            });

	            this.fullscreen && this.initResizeEvent();

	            if (this.buttons) {
	                for (var i=0; i<this.buttons.length; i++) {
	                    if (!(this.buttons[i] instanceof Button)) {
	                        this.buttons[i] = new Button(utils.extend(this.buttons[i],{
	                            editor : this.editor
	                        },true));
	                    }
	                }
	            }
	        },
	        initResizeEvent: function () {

	            var me = this;

	            domUtils.on( window, "resize", function () {

	                if ( me._hidden || me._hidden === undefined ) {
	                    return;
	                }

	                if ( me.__resizeTimer ) {
	                    window.clearTimeout( me.__resizeTimer );
	                }

	                me.__resizeTimer = window.setTimeout( function () {

	                    me.__resizeTimer = null;

	                    var dialogWrapNode = me.getDom(),
	                        contentNode = me.getDom('content'),
	                        wrapRect = UE.ui.uiUtils.getClientRect( dialogWrapNode ),
	                        contentRect = UE.ui.uiUtils.getClientRect( contentNode ),
	                        vpRect = uiUtils.getViewportRect();

	                    contentNode.style.width = ( vpRect.width - wrapRect.width + contentRect.width ) + "px";
	                    contentNode.style.height = ( vpRect.height - wrapRect.height + contentRect.height ) + "px";

	                    dialogWrapNode.style.width = vpRect.width + "px";
	                    dialogWrapNode.style.height = vpRect.height + "px";

	                    me.fireEvent( "resize" );

	                }, 100 );

	            } );

	        },
	        fitSize: function (){
	            var popBodyEl = this.getDom('body');
//	            if (!(baidu.editor.browser.ie && baidu.editor.browser.version == 7)) {
//	                uiUtils.removeStyle(popBodyEl, 'width');
//	                uiUtils.removeStyle(popBodyEl, 'height');
//	            }
	            var size = this.mesureSize();
	            popBodyEl.style.width = size.width + 'px';
	            popBodyEl.style.height = size.height + 'px';
	            return size;
	        },
	        safeSetOffset: function (offset){
	            var me = this;
	            var el = me.getDom();
	            var vpRect = uiUtils.getViewportRect();
	            var rect = uiUtils.getClientRect(el);
	            var left = offset.left;
	            if (left + rect.width > vpRect.right) {
	                left = vpRect.right - rect.width;
	            }
	            var top = offset.top;
	            if (top + rect.height > vpRect.bottom) {
	                top = vpRect.bottom - rect.height;
	            }
	            el.style.left = Math.max(left, 0) + 'px';
	            el.style.top = Math.max(top, 0) + 'px';
	        },
	        showAtCenter: function (){

	            var vpRect = uiUtils.getViewportRect();

	            if ( !this.fullscreen ) {
	                this.getDom().style.display = '';
	                var popSize = this.fitSize();
	                var titleHeight = this.getDom('titlebar').offsetHeight | 0;
	                var left = vpRect.width / 2 - popSize.width / 2;
	                var top = vpRect.height / 2 - (popSize.height - titleHeight) / 2 - titleHeight;
	                var popEl = this.getDom();
	                this.safeSetOffset({
	                    left: Math.max(left | 0, 0),
	                    top: Math.max(top | 0, 0)
	                });
	                if (!domUtils.hasClass(popEl, 'edui-state-centered')) {
	                    popEl.className += ' edui-state-centered';
	                }
	            } else {
	                var dialogWrapNode = this.getDom(),
	                    contentNode = this.getDom('content');

	                dialogWrapNode.style.display = "block";

	                var wrapRect = UE.ui.uiUtils.getClientRect( dialogWrapNode ),
	                    contentRect = UE.ui.uiUtils.getClientRect( contentNode );
	                dialogWrapNode.style.left = "-100000px";

	                contentNode.style.width = ( vpRect.width - wrapRect.width + contentRect.width ) + "px";
	                contentNode.style.height = ( vpRect.height - wrapRect.height + contentRect.height ) + "px";

	                dialogWrapNode.style.width = vpRect.width + "px";
	                dialogWrapNode.style.height = vpRect.height + "px";
	                dialogWrapNode.style.left = 0;

	                //保存环境的overflow值
	                this._originalContext = {
	                    html: {
	                        overflowX: document.documentElement.style.overflowX,
	                        overflowY: document.documentElement.style.overflowY
	                    },
	                    body: {
	                        overflowX: document.body.style.overflowX,
	                        overflowY: document.body.style.overflowY
	                    }
	                };

	                document.documentElement.style.overflowX = 'hidden';
	                document.documentElement.style.overflowY = 'hidden';
	                document.body.style.overflowX = 'hidden';
	                document.body.style.overflowY = 'hidden';

	            }

	            this._show();
	        },
	        getContentHtml: function (){
	            var contentHtml = '';
	            if (typeof this.content == 'string') {
	                contentHtml = this.content;
	            } else if (this.iframeUrl) {
	                contentHtml = '<span id="'+ this.id +'_contmask" class="dialogcontmask"></span><iframe id="'+ this.id +
	                    '_iframe" class="%%-iframe" height="100%" width="100%" frameborder="0" src="'+ this.iframeUrl +'"></iframe>';
	            }
	            return contentHtml;
	        },
	        getHtmlTpl: function (){
	            var footHtml = '';

	            if (this.buttons) {
	                var buff = [];
	                for (var i=0; i<this.buttons.length; i++) {
	                    buff[i] = this.buttons[i].renderHtml();
	                }
	                footHtml = '<div class="%%-foot">' +
	                     '<div id="##_buttons" class="%%-buttons">' + buff.join('') + '</div>' +
	                    '</div>';
	            }

	            return '<div id="##" class="%%"><div '+ ( !this.fullscreen ? 'class="%%"' : 'class="%%-wrap edui-dialog-fullscreen-flag"' ) +'><div id="##_body" class="%%-body">' +
	                '<div class="%%-shadow"></div>' +
	                '<div id="##_titlebar" class="%%-titlebar">' +
	                '<div class="%%-draghandle" onmousedown="$$._onTitlebarMouseDown(event, this);">' +
	                 '<span class="%%-caption">' + (this.title || '') + '</span>' +
	                '</div>' +
	                this.closeButton.renderHtml() +
	                '</div>' +
	                '<div id="##_content" class="%%-content">'+ ( this.autoReset ? '' : this.getContentHtml()) +'</div>' +
	                footHtml +
	                '</div></div></div>';
	        },
	        postRender: function (){
	            // todo: 保持居中/记住上次关闭位置选项
	            if (!this.modalMask.getDom()) {
	                this.modalMask.render();
	                this.modalMask.hide();
	            }
	            if (!this.dragMask.getDom()) {
	                this.dragMask.render();
	                this.dragMask.hide();
	            }
	            var me = this;
	            this.addListener('show', function (){
	                me.modalMask.show(this.getDom().style.zIndex - 2);
	            });
	            this.addListener('hide', function (){
	                me.modalMask.hide();
	            });
	            if (this.buttons) {
	                for (var i=0; i<this.buttons.length; i++) {
	                    this.buttons[i].postRender();
	                }
	            }
	            domUtils.on(window, 'resize', function (){
	                setTimeout(function (){
	                    if (!me.isHidden()) {
	                        me.safeSetOffset(uiUtils.getClientRect(me.getDom()));
	                    }
	                });
	            });

	            //hold住scroll事件，防止dialog的滚动影响页面
//	            if( this.holdScroll ) {
	//
//	                if( !me.iframeUrl ) {
//	                    domUtils.on( document.getElementById( me.id + "_iframe"), !browser.gecko ? "mousewheel" : "DOMMouseScroll", function(e){
//	                        domUtils.preventDefault(e);
//	                    } );
//	                } else {
//	                    me.addListener('dialogafterreset', function(){
//	                        window.setTimeout(function(){
//	                            var iframeWindow = document.getElementById( me.id + "_iframe").contentWindow;
	//
//	                            if( browser.ie ) {
	//
//	                                var timer = window.setInterval(function(){
	//
//	                                    if( iframeWindow.document && iframeWindow.document.body ) {
//	                                        window.clearInterval( timer );
//	                                        timer = null;
//	                                        domUtils.on( iframeWindow.document.body, !browser.gecko ? "mousewheel" : "DOMMouseScroll", function(e){
//	                                            domUtils.preventDefault(e);
//	                                        } );
//	                                    }
	//
//	                                }, 100);
	//
//	                            } else {
//	                                domUtils.on( iframeWindow, !browser.gecko ? "mousewheel" : "DOMMouseScroll", function(e){
//	                                    domUtils.preventDefault(e);
//	                                } );
//	                            }
	//
//	                        }, 1);
//	                    });
//	                }
	//
//	            }
	            this._hide();
	        },
	        mesureSize: function (){
	            var body = this.getDom('body');
	            var width = uiUtils.getClientRect(this.getDom('content')).width;
	            var dialogBodyStyle = body.style;
	            dialogBodyStyle.width = width;
	            return uiUtils.getClientRect(body);
	        },
	        _onTitlebarMouseDown: function (evt, el){
	            if (this.draggable) {
	                var rect;
	                var vpRect = uiUtils.getViewportRect();
	                var me = this;
	                uiUtils.startDrag(evt, {
	                    ondragstart: function (){
	                        rect = uiUtils.getClientRect(me.getDom());
	                        me.getDom('contmask').style.visibility = 'visible';
	                        me.dragMask.show(me.getDom().style.zIndex - 1);
	                    },
	                    ondragmove: function (x, y){
	                        var left = rect.left + x;
	                        var top = rect.top + y;
	                        me.safeSetOffset({
	                            left: left,
	                            top: top
	                        });
	                    },
	                    ondragstop: function (){
	                        me.getDom('contmask').style.visibility = 'hidden';
	                        domUtils.removeClasses(me.getDom(), ['edui-state-centered']);
	                        me.dragMask.hide();
	                    }
	                });
	            }
	        },
	        reset: function (){
	            this.getDom('content').innerHTML = this.getContentHtml();
	            this.fireEvent('dialogafterreset');
	        },
	        _show: function (){
	            if (this._hidden) {
	                this.getDom().style.display = '';

	                //要高过编辑器的zindxe
	                this.editor.container.style.zIndex && (this.getDom().style.zIndex = this.editor.container.style.zIndex * 1 + 10);
	                this._hidden = false;
	                this.fireEvent('show');
	                baidu.editor.ui.uiUtils.getFixedLayer().style.zIndex = this.getDom().style.zIndex - 4;
	            }
	        },
	        isHidden: function (){
	            return this._hidden;
	        },
	        _hide: function (){
	            if (!this._hidden) {
	                var wrapNode = this.getDom();
	                wrapNode.style.display = 'none';
	                wrapNode.style.zIndex = '';
	                wrapNode.style.width = '';
	                wrapNode.style.height = '';
	                this._hidden = true;
	                this.fireEvent('hide');
	            }
	        },
	        open: function (){
	            if (this.autoReset) {
	                //有可能还没有渲染
	                try{
	                    this.reset();
	                }catch(e){
	                    this.render();
	                    this.open()
	                }
	            }
	            this.showAtCenter();
	            if (this.iframeUrl) {
	                try {
	                    this.getDom('iframe').focus();
	                } catch(ex){}
	            }
	            activeDialog = this;
	        },
	        _onCloseButtonClick: function (evt, el){
	            this.close(false);
	        },
	        close: function (ok){
	            if (this.fireEvent('close', ok) !== false) {
	                //还原环境
	                if ( this.fullscreen ) {

	                    document.documentElement.style.overflowX = this._originalContext.html.overflowX;
	                    document.documentElement.style.overflowY = this._originalContext.html.overflowY;
	                    document.body.style.overflowX = this._originalContext.body.overflowX;
	                    document.body.style.overflowY = this._originalContext.body.overflowY;
	                    delete this._originalContext;

	                }
	                this._hide();

	                //销毁content
	                var content = this.getDom('content');
	                var iframe = this.getDom('iframe');
	                if (content && iframe) {
	                    var doc = iframe.contentDocument || iframe.contentWindow.document;
	                    doc && (doc.body.innerHTML = '');
	                    domUtils.remove(content);
	                }
	            }
	        }
	    };
	    utils.inherits(Dialog, UIBase);
	})();


	// ui/menubutton.js
	///import core
	///import uicore
	///import ui/menu.js
	///import ui/splitbutton.js
	(function (){
	    var utils = baidu.editor.utils,
	        Menu = baidu.editor.ui.Menu,
	        SplitButton = baidu.editor.ui.SplitButton,
	        MenuButton = baidu.editor.ui.MenuButton = function (options){
	            this.initOptions(options);
	            this.initMenuButton();
	        };
	    MenuButton.prototype = {
	        initMenuButton: function (){
	            var me = this;
	            this.uiName = "menubutton";
	            this.popup = new Menu({
	                items: me.items,
	                className: me.className,
	                editor:me.editor
	            });
	            this.popup.addListener('show', function (){
	                var list = this;
	                for (var i=0; i<list.items.length; i++) {
	                    list.items[i].removeState('checked');
	                    if (list.items[i].value == me._value) {
	                        list.items[i].addState('checked');
	                        this.value = me._value;
	                    }
	                }
	            });
	            this.initSplitButton();
	        },
	        setValue : function(value){
	            this._value = value;
	        }
	        
	    };
	    utils.inherits(MenuButton, SplitButton);
	})();

	// ui/multiMenu.js
	///import core
	///import uicore
	 ///commands 表情
	(function(){
	    var utils = baidu.editor.utils,
	        Popup = baidu.editor.ui.Popup,
	        SplitButton = baidu.editor.ui.SplitButton,
	        MultiMenuPop = baidu.editor.ui.MultiMenuPop = function(options){
	            this.initOptions(options);
	            this.initMultiMenu();
	        };

	    MultiMenuPop.prototype = {
	        initMultiMenu: function (){
	            var me = this;
	            this.popup = new Popup({
	                content: '',
	                editor : me.editor,
	                iframe_rendered: false,
	                onshow: function (){
	                    if (!this.iframe_rendered) {
	                        this.iframe_rendered = true;
	                        this.getDom('content').innerHTML = '<iframe id="'+me.id+'_iframe" src="'+ me.iframeUrl +'" frameborder="0"></iframe>';
	                        me.editor.container.style.zIndex && (this.getDom().style.zIndex = me.editor.container.style.zIndex * 1 + 1);
	                    }
	                }
	               // canSideUp:false,
	               // canSideLeft:false
	            });
	            this.onbuttonclick = function(){
	                this.showPopup();
	            };
	            this.initSplitButton();
	        }

	    };

	    utils.inherits(MultiMenuPop, SplitButton);
	})();


	// ui/shortcutmenu.js
	(function () {
	    var UI = baidu.editor.ui,
	        UIBase = UI.UIBase,
	        uiUtils = UI.uiUtils,
	        utils = baidu.editor.utils,
	        domUtils = baidu.editor.dom.domUtils;

	    var allMenus = [],//存储所有快捷菜单
	        timeID,
	        isSubMenuShow = false;//是否有子pop显示

	    var ShortCutMenu = UI.ShortCutMenu = function (options) {
	        this.initOptions (options);
	        this.initShortCutMenu ();
	    };

	    ShortCutMenu.postHide = hideAllMenu;

	    ShortCutMenu.prototype = {
	        isHidden : true ,
	        SPACE : 5 ,
	        initShortCutMenu : function () {
	            this.items = this.items || [];
	            this.initUIBase ();
	            this.initItems ();
	            this.initEvent ();
	            allMenus.push (this);
	        } ,
	        initEvent : function () {
	            var me = this,
	                doc = me.editor.document;

	            domUtils.on (doc , "mousemove" , function (e) {
	                if (me.isHidden === false) {
	                    //有pop显示就不隐藏快捷菜单
	                    if (me.getSubMenuMark () || me.eventType == "contextmenu")   return;


	                    var flag = true,
	                        el = me.getDom (),
	                        wt = el.offsetWidth,
	                        ht = el.offsetHeight,
	                        distanceX = wt / 2 + me.SPACE,//距离中心X标准
	                        distanceY = ht / 2,//距离中心Y标准
	                        x = Math.abs (e.screenX - me.left),//离中心距离横坐标
	                        y = Math.abs (e.screenY - me.top);//离中心距离纵坐标

	                    clearTimeout (timeID);
	                    timeID = setTimeout (function () {
	                        if (y > 0 && y < distanceY) {
	                            me.setOpacity (el , "1");
	                        } else if (y > distanceY && y < distanceY + 70) {
	                            me.setOpacity (el , "0.5");
	                            flag = false;
	                        } else if (y > distanceY + 70 && y < distanceY + 140) {
	                            me.hide ();
	                        }

	                        if (flag && x > 0 && x < distanceX) {
	                            me.setOpacity (el , "1")
	                        } else if (x > distanceX && x < distanceX + 70) {
	                            me.setOpacity (el , "0.5")
	                        } else if (x > distanceX + 70 && x < distanceX + 140) {
	                            me.hide ();
	                        }
	                    });
	                }
	            });

	            //ie\ff下 mouseout不准
	            if (browser.chrome) {
	                domUtils.on (doc , "mouseout" , function (e) {
	                    var relatedTgt = e.relatedTarget || e.toElement;

	                    if (relatedTgt == null || relatedTgt.tagName == "HTML") {
	                        me.hide ();
	                    }
	                });
	            }

	            me.editor.addListener ("afterhidepop" , function () {
	                if (!me.isHidden) {
	                    isSubMenuShow = true;
	                }
	            });

	        } ,
	        initItems : function () {
	            if (utils.isArray (this.items)) {
	                for (var i = 0, len = this.items.length ; i < len ; i++) {
	                    var item = this.items[i].toLowerCase ();

	                    if (UI[item]) {
	                        this.items[i] = new UI[item] (this.editor);
	                        this.items[i].className += " edui-shortcutsubmenu ";
	                    }
	                }
	            }
	        } ,
	        setOpacity : function (el , value) {
	            if (browser.ie && browser.version < 9) {
	                el.style.filter = "alpha(opacity = " + parseFloat (value) * 100 + ");"
	            } else {
	                el.style.opacity = value;
	            }
	        } ,
	        getSubMenuMark : function () {
	            isSubMenuShow = false;
	            var layerEle = uiUtils.getFixedLayer ();
	            var list = domUtils.getElementsByTagName (layerEle , "div" , function (node) {
	                return domUtils.hasClass (node , "edui-shortcutsubmenu edui-popup")
	            });

	            for (var i = 0, node ; node = list[i++] ;) {
	                if (node.style.display != "none") {
	                    isSubMenuShow = true;
	                }
	            }
	            return isSubMenuShow;
	        } ,
	        show : function (e , hasContextmenu) {
	            var me = this,
	                offset = {},
	                el = this.getDom (),
	                fixedlayer = uiUtils.getFixedLayer ();

	            function setPos (offset) {
	                if (offset.left < 0) {
	                    offset.left = 0;
	                }
	                if (offset.top < 0) {
	                    offset.top = 0;
	                }
	                el.style.cssText = "position:absolute;left:" + offset.left + "px;top:" + offset.top + "px;";
	            }

	            function setPosByCxtMenu (menu) {
	                if (!menu.tagName) {
	                    menu = menu.getDom ();
	                }
	                offset.left = parseInt (menu.style.left);
	                offset.top = parseInt (menu.style.top);
	                offset.top -= el.offsetHeight + 15;
	                setPos (offset);
	            }


	            me.eventType = e.type;
	            el.style.cssText = "display:block;left:-9999px";

	            if (e.type == "contextmenu" && hasContextmenu) {
	                var menu = domUtils.getElementsByTagName (fixedlayer , "div" , "edui-contextmenu")[0];
	                if (menu) {
	                    setPosByCxtMenu (menu)
	                } else {
	                    me.editor.addListener ("aftershowcontextmenu" , function (type , menu) {
	                        setPosByCxtMenu (menu);
	                    });
	                }
	            } else {
	                offset = uiUtils.getViewportOffsetByEvent (e);
	                offset.top -= el.offsetHeight + me.SPACE;
	                offset.left += me.SPACE + 20;
	                setPos (offset);
	                me.setOpacity (el , 0.2);
	            }


	            me.isHidden = false;
	            me.left = e.screenX + el.offsetWidth / 2 - me.SPACE;
	            me.top = e.screenY - (el.offsetHeight / 2) - me.SPACE;

	            if (me.editor) {
	                el.style.zIndex = me.editor.container.style.zIndex * 1 + 10;
	                fixedlayer.style.zIndex = el.style.zIndex - 1;
	            }
	        } ,
	        hide : function () {
	            if (this.getDom ()) {
	                this.getDom ().style.display = "none";
	            }
	            this.isHidden = true;
	        } ,
	        postRender : function () {
	            if (utils.isArray (this.items)) {
	                for (var i = 0, item ; item = this.items[i++] ;) {
	                    item.postRender ();
	                }
	            }
	        } ,
	        getHtmlTpl : function () {
	            var buff;
	            if (utils.isArray (this.items)) {
	                buff = [];
	                for (var i = 0 ; i < this.items.length ; i++) {
	                    buff[i] = this.items[i].renderHtml ();
	                }
	                buff = buff.join ("");
	            } else {
	                buff = this.items;
	            }

	            return '<div id="##" class="%% edui-toolbar" data-src="shortcutmenu" onmousedown="return false;" onselectstart="return false;" >' +
	                buff +
	                '</div>';
	        }
	    };

	    utils.inherits (ShortCutMenu , UIBase);

	    function hideAllMenu (e) {
	        var tgt = e.target || e.srcElement,
	            cur = domUtils.findParent (tgt , function (node) {
	                return domUtils.hasClass (node , "edui-shortcutmenu") || domUtils.hasClass (node , "edui-popup");
	            } , true);

	        if (!cur) {
	            for (var i = 0, menu ; menu = allMenus[i++] ;) {
	                menu.hide ()
	            }
	        }
	    }

	    domUtils.on (document , 'mousedown' , function (e) {
	        hideAllMenu (e);
	    });

	    domUtils.on (window , 'scroll' , function (e) {
	        hideAllMenu (e);
	    });

	}) ();


	// ui/breakline.js
	(function (){
	    var utils = baidu.editor.utils,
	        UIBase = baidu.editor.ui.UIBase,
	        Breakline = baidu.editor.ui.Breakline = function (options){
	            this.initOptions(options);
	            this.initSeparator();
	        };
	    Breakline.prototype = {
	        uiName: 'Breakline',
	        initSeparator: function (){
	            this.initUIBase();
	        },
	        getHtmlTpl: function (){
	            return '<br/>';
	        }
	    };
	    utils.inherits(Breakline, UIBase);

	})();


	// ui/message.js
	///import core
	///import uicore
	(function () {
	    var utils = baidu.editor.utils,
	        domUtils = baidu.editor.dom.domUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        Message = baidu.editor.ui.Message = function (options){
	            this.initOptions(options);
	            this.initMessage();
	        };

	    Message.prototype = {
	        initMessage: function (){
	            this.initUIBase();
	        },
	        getHtmlTpl: function (){
	            return '<div id="##" class="edui-message %%">' +
	            ' <div id="##_closer" class="edui-message-closer">×</div>' +
	            ' <div id="##_body" class="edui-message-body edui-message-type-info">' +
	            ' <iframe style="position:absolute;z-index:-1;left:0;top:0;background-color: transparent;" frameborder="0" width="100%" height="100%" src="about:blank"></iframe>' +
	            ' <div class="edui-shadow"></div>' +
	            ' <div id="##_content" class="edui-message-content">' +
	            '  </div>' +
	            ' </div>' +
	            '</div>';
	        },
	        reset: function(opt){
	            var me = this;
	            if (!opt.keepshow) {
	                clearTimeout(this.timer);
	                me.timer = setTimeout(function(){
	                    me.hide();
	                }, opt.timeout || 4000);
	            }

	            opt.content !== undefined && me.setContent(opt.content);
	            opt.type !== undefined && me.setType(opt.type);

	            me.show();
	        },
	        postRender: function(){
	            var me = this,
	                closer = this.getDom('closer');
	            closer && domUtils.on(closer, 'click', function(){
	                me.hide();
	            });
	        },
	        setContent: function(content){
	            this.getDom('content').innerHTML = content;
	        },
	        setType: function(type){
	            type = type || 'info';
	            var body = this.getDom('body');
	            body.className = body.className.replace(/edui-message-type-[\w-]+/, 'edui-message-type-' + type);
	        },
	        getContent: function(){
	            return this.getDom('content').innerHTML;
	        },
	        getType: function(){
	            var arr = this.getDom('body').match(/edui-message-type-([\w-]+)/);
	            return arr ? arr[1]:'';
	        },
	        show: function (){
	            this.getDom().style.display = 'block';
	        },
	        hide: function (){
	            var dom = this.getDom();
	            if (dom) {
	                dom.style.display = 'none';
	                dom.parentNode && dom.parentNode.removeChild(dom);
	            }
	        }
	    };

	    utils.inherits(Message, UIBase);

	})();


	// adapter/editorui.js
	//ui跟编辑器的适配層
	//那个按钮弹出是dialog，是下拉筐等都是在这个js中配置
	//自己写的ui也要在这里配置，放到baidu.editor.ui下边，当编辑器实例化的时候会根据ueditor.config中的toolbars找到相应的进行实例化
	(function () {
	    var utils = baidu.editor.utils;
	    var editorui = baidu.editor.ui;
	    var _Dialog = editorui.Dialog;
	    editorui.buttons = {};

	    editorui.Dialog = function (options) {
	        var dialog = new _Dialog(options);
	        dialog.addListener('hide', function () {

	            if (dialog.editor) {
	                var editor = dialog.editor;
	                try {
	                    if (browser.gecko) {
	                        var y = editor.window.scrollY,
	                            x = editor.window.scrollX;
	                        editor.body.focus();
	                        editor.window.scrollTo(x, y);
	                    } else {
	                        editor.focus();
	                    }


	                } catch (ex) {
	                }
	            }
	        });
	        return dialog;
	    };

	    var iframeUrlMap = {
	        'anchor':'~/dialogs/anchor/anchor.html',
	        'insertimage':'~/dialogs/image/image.html',
	        'link':'~/dialogs/link/link.html',
	        'spechars':'~/dialogs/spechars/spechars.html',
	        'searchreplace':'~/dialogs/searchreplace/searchreplace.html',
	        'map':'~/dialogs/map/map.html',
	        'gmap':'~/dialogs/gmap/gmap.html',
	        'insertvideo':'~/dialogs/video/video.html',
	        'help':'~/dialogs/help/help.html',
	        'preview':'~/dialogs/preview/preview.html',
	        'emotion':'~/dialogs/emotion/emotion.html',
	        'wordimage':'~/dialogs/wordimage/wordimage.html',
	        'attachment':'~/dialogs/attachment/attachment.html',
	        'insertframe':'~/dialogs/insertframe/insertframe.html',
	        'edittip':'~/dialogs/table/edittip.html',
	        'edittable':'~/dialogs/table/edittable.html',
	        'edittd':'~/dialogs/table/edittd.html',
	        'webapp':'~/dialogs/webapp/webapp.html',
	        'snapscreen':'~/dialogs/snapscreen/snapscreen.html',
	        'scrawl':'~/dialogs/scrawl/scrawl.html',
	        'music':'~/dialogs/music/music.html',
	        'template':'~/dialogs/template/template.html',
	        'background':'~/dialogs/background/background.html',
	        'charts': '~/dialogs/charts/charts.html'
	    };
	    //为工具栏添加按钮，以下都是统一的按钮触发命令，所以写在一起
	    var btnCmds = ['undo', 'redo', 'formatmatch',
	        'bold', 'italic', 'underline', 'fontborder', 'touppercase', 'tolowercase',
	        'strikethrough', 'subscript', 'superscript', 'source', 'indent', 'outdent',
	        'blockquote', 'pasteplain', 'pagebreak',
	        'selectall', 'print','horizontal', 'removeformat', 'time', 'date', 'unlink',
	        'insertparagraphbeforetable', 'insertrow', 'insertcol', 'mergeright', 'mergedown', 'deleterow',
	        'deletecol', 'splittorows', 'splittocols', 'splittocells', 'mergecells', 'deletetable', 'drafts'];

	    for (var i = 0, ci; ci = btnCmds[i++];) {
	        ci = ci.toLowerCase();
	        editorui[ci] = function (cmd) {
	            return function (editor) {
	                var ui = new editorui.Button({
	                    className:'edui-for-' + cmd,
	                    title:editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '',
	                    onclick:function () {
	                        editor.execCommand(cmd);
	                    },
	                    theme:editor.options.theme,
	                    showText:false
	                });
	                editorui.buttons[cmd] = ui;
	                editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	                    var state = editor.queryCommandState(cmd);
	                    if (state == -1) {
	                        ui.setDisabled(true);
	                        ui.setChecked(false);
	                    } else {
	                        if (!uiReady) {
	                            ui.setDisabled(false);
	                            ui.setChecked(state);
	                        }
	                    }
	                });
	                return ui;
	            };
	        }(ci);
	    }

	    //清除文档
	    editorui.cleardoc = function (editor) {
	        var ui = new editorui.Button({
	            className:'edui-for-cleardoc',
	            title:editor.options.labelMap.cleardoc || editor.getLang("labelMap.cleardoc") || '',
	            theme:editor.options.theme,
	            onclick:function () {
	                if (confirm(editor.getLang("confirmClear"))) {
	                    editor.execCommand('cleardoc');
	                }
	            }
	        });
	        editorui.buttons["cleardoc"] = ui;
	        editor.addListener('selectionchange', function () {
	            ui.setDisabled(editor.queryCommandState('cleardoc') == -1);
	        });
	        return ui;
	    };

	    //排版，图片排版，文字方向
	    var typeset = {
	        'justify':['left', 'right', 'center', 'justify'],
	        'imagefloat':['none', 'left', 'center', 'right'],
	        'directionality':['ltr', 'rtl']
	    };

	    for (var p in typeset) {

	        (function (cmd, val) {
	            for (var i = 0, ci; ci = val[i++];) {
	                (function (cmd2) {
	                    editorui[cmd.replace('float', '') + cmd2] = function (editor) {
	                        var ui = new editorui.Button({
	                            className:'edui-for-' + cmd.replace('float', '') + cmd2,
	                            title:editor.options.labelMap[cmd.replace('float', '') + cmd2] || editor.getLang("labelMap." + cmd.replace('float', '') + cmd2) || '',
	                            theme:editor.options.theme,
	                            onclick:function () {
	                                editor.execCommand(cmd, cmd2);
	                            }
	                        });
	                        editorui.buttons[cmd] = ui;
	                        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	                            ui.setDisabled(editor.queryCommandState(cmd) == -1);
	                            ui.setChecked(editor.queryCommandValue(cmd) == cmd2 && !uiReady);
	                        });
	                        return ui;
	                    };
	                })(ci)
	            }
	        })(p, typeset[p])
	    }

	    //字体颜色和背景颜色
	    for (var i = 0, ci; ci = ['backcolor', 'forecolor'][i++];) {
	        editorui[ci] = function (cmd) {
	            return function (editor) {
	                var ui = new editorui.ColorButton({
	                    className:'edui-for-' + cmd,
	                    color:'default',
	                    title:editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '',
	                    editor:editor,
	                    onpickcolor:function (t, color) {
	                        editor.execCommand(cmd, color);
	                    },
	                    onpicknocolor:function () {
	                        editor.execCommand(cmd, 'default');
	                        this.setColor('transparent');
	                        this.color = 'default';
	                    },
	                    onbuttonclick:function () {
	                        editor.execCommand(cmd, this.color);
	                    }
	                });
	                editorui.buttons[cmd] = ui;
	                editor.addListener('selectionchange', function () {
	                    ui.setDisabled(editor.queryCommandState(cmd) == -1);
	                });
	                return ui;
	            };
	        }(ci);
	    }


	    var dialogBtns = {
	        noOk:['searchreplace', 'help', 'spechars', 'webapp','preview'],
	        ok:['attachment', 'anchor', 'link', 'insertimage', 'map', 'gmap', 'insertframe', 'wordimage',
	            'insertvideo', 'insertframe', 'edittip', 'edittable', 'edittd', 'scrawl', 'template', 'music', 'background', 'charts']
	    };

	    for (var p in dialogBtns) {
	        (function (type, vals) {
	            for (var i = 0, ci; ci = vals[i++];) {
	                //todo opera下存在问题
	                if (browser.opera && ci === "searchreplace") {
	                    continue;
	                }
	                (function (cmd) {
	                    editorui[cmd] = function (editor, iframeUrl, title) {
	                        iframeUrl = iframeUrl || (editor.options.iframeUrlMap || {})[cmd] || iframeUrlMap[cmd];
	                        title = editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd) || '';

	                        var dialog;
	                        //没有iframeUrl不创建dialog
	                        if (iframeUrl) {
	                            dialog = new editorui.Dialog(utils.extend({
	                                iframeUrl:editor.ui.mapUrl(iframeUrl),
	                                editor:editor,
	                                className:'edui-for-' + cmd,
	                                title:title,
	                                holdScroll: cmd === 'insertimage',
	                                fullscreen: /charts|preview/.test(cmd),
	                                closeDialog:editor.getLang("closeDialog")
	                            }, type == 'ok' ? {
	                                buttons:[
	                                    {
	                                        className:'edui-okbutton',
	                                        label:editor.getLang("ok"),
	                                        editor:editor,
	                                        onclick:function () {
	                                            dialog.close(true);
	                                        }
	                                    },
	                                    {
	                                        className:'edui-cancelbutton',
	                                        label:editor.getLang("cancel"),
	                                        editor:editor,
	                                        onclick:function () {
	                                            dialog.close(false);
	                                        }
	                                    }
	                                ]
	                            } : {}));

	                            editor.ui._dialogs[cmd + "Dialog"] = dialog;
	                        }

	                        var ui = new editorui.Button({
	                            className:'edui-for-' + cmd,
	                            title:title,
	                            onclick:function () {
	                                if (dialog) {
	                                    switch (cmd) {
	                                        case "wordimage":
	                                            var images = editor.execCommand("wordimage");
	                                            if (images && images.length) {
	                                                dialog.render();
	                                                dialog.open();
	                                            }
	                                            break;
	                                        case "scrawl":
	                                            if (editor.queryCommandState("scrawl") != -1) {
	                                                dialog.render();
	                                                dialog.open();
	                                            }

	                                            break;
	                                        default:
	                                            dialog.render();
	                                            dialog.open();
	                                    }
	                                }
	                            },
	                            theme:editor.options.theme,
	                            disabled:(cmd == 'scrawl' && editor.queryCommandState("scrawl") == -1) || ( cmd == 'charts' )
	                        });
	                        editorui.buttons[cmd] = ui;
	                        editor.addListener('selectionchange', function () {
	                            //只存在于右键菜单而无工具栏按钮的ui不需要检测状态
	                            var unNeedCheckState = {'edittable':1};
	                            if (cmd in unNeedCheckState)return;

	                            var state = editor.queryCommandState(cmd);
	                            if (ui.getDom()) {
	                                ui.setDisabled(state == -1);
	                                ui.setChecked(state);
	                            }

	                        });

	                        return ui;
	                    };
	                })(ci.toLowerCase())
	            }
	        })(p, dialogBtns[p]);
	    }

	    editorui.snapscreen = function (editor, iframeUrl, title) {
	        title = editor.options.labelMap['snapscreen'] || editor.getLang("labelMap.snapscreen") || '';
	        var ui = new editorui.Button({
	            className:'edui-for-snapscreen',
	            title:title,
	            onclick:function () {
	                editor.execCommand("snapscreen");
	            },
	            theme:editor.options.theme

	        });
	        editorui.buttons['snapscreen'] = ui;
	        iframeUrl = iframeUrl || (editor.options.iframeUrlMap || {})["snapscreen"] || iframeUrlMap["snapscreen"];
	        if (iframeUrl) {
	            var dialog = new editorui.Dialog({
	                iframeUrl:editor.ui.mapUrl(iframeUrl),
	                editor:editor,
	                className:'edui-for-snapscreen',
	                title:title,
	                buttons:[
	                    {
	                        className:'edui-okbutton',
	                        label:editor.getLang("ok"),
	                        editor:editor,
	                        onclick:function () {
	                            dialog.close(true);
	                        }
	                    },
	                    {
	                        className:'edui-cancelbutton',
	                        label:editor.getLang("cancel"),
	                        editor:editor,
	                        onclick:function () {
	                            dialog.close(false);
	                        }
	                    }
	                ]

	            });
	            dialog.render();
	            editor.ui._dialogs["snapscreenDialog"] = dialog;
	        }
	        editor.addListener('selectionchange', function () {
	            ui.setDisabled(editor.queryCommandState('snapscreen') == -1);
	        });
	        return ui;
	    };

	    editorui.insertcode = function (editor, list, title) {
	        list = editor.options['insertcode'] || [];
	        title = editor.options.labelMap['insertcode'] || editor.getLang("labelMap.insertcode") || '';
	       // if (!list.length) return;
	        var items = [];
	        utils.each(list,function(key,val){
	            items.push({
	                label:key,
	                value:val,
	                theme:editor.options.theme,
	                renderLabelHtml:function () {
	                    return '<div class="edui-label %%-label" >' + (this.label || '') + '</div>';
	                }
	            });
	        });

	        var ui = new editorui.Combox({
	            editor:editor,
	            items:items,
	            onselect:function (t, index) {
	                editor.execCommand('insertcode', this.items[index].value);
	            },
	            onbuttonclick:function () {
	                this.showPopup();
	            },
	            title:title,
	            initValue:title,
	            className:'edui-for-insertcode',
	            indexByValue:function (value) {
	                if (value) {
	                    for (var i = 0, ci; ci = this.items[i]; i++) {
	                        if (ci.value.indexOf(value) != -1)
	                            return i;
	                    }
	                }

	                return -1;
	            }
	        });
	        editorui.buttons['insertcode'] = ui;
	        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	            if (!uiReady) {
	                var state = editor.queryCommandState('insertcode');
	                if (state == -1) {
	                    ui.setDisabled(true);
	                } else {
	                    ui.setDisabled(false);
	                    var value = editor.queryCommandValue('insertcode');
	                    if(!value){
	                        ui.setValue(title);
	                        return;
	                    }
	                    //trace:1871 ie下从源码模式切换回来时，字体会带单引号，而且会有逗号
	                    value && (value = value.replace(/['"]/g, '').split(',')[0]);
	                    ui.setValue(value);

	                }
	            }

	        });
	        return ui;
	    };
	    editorui.fontfamily = function (editor, list, title) {

	        list = editor.options['fontfamily'] || [];
	        title = editor.options.labelMap['fontfamily'] || editor.getLang("labelMap.fontfamily") || '';
	        if (!list.length) return;
	        for (var i = 0, ci, items = []; ci = list[i]; i++) {
	            var langLabel = editor.getLang('fontfamily')[ci.name] || "";
	            (function (key, val) {
	                items.push({
	                    label:key,
	                    value:val,
	                    theme:editor.options.theme,
	                    renderLabelHtml:function () {
	                        return '<div class="edui-label %%-label" style="font-family:' +
	                            utils.unhtml(this.value) + '">' + (this.label || '') + '</div>';
	                    }
	                });
	            })(ci.label || langLabel, ci.val)
	        }
	        var ui = new editorui.Combox({
	            editor:editor,
	            items:items,
	            onselect:function (t, index) {
	                editor.execCommand('FontFamily', this.items[index].value);
	            },
	            onbuttonclick:function () {
	                this.showPopup();
	            },
	            title:title,
	            initValue:title,
	            className:'edui-for-fontfamily',
	            indexByValue:function (value) {
	                if (value) {
	                    for (var i = 0, ci; ci = this.items[i]; i++) {
	                        if (ci.value.indexOf(value) != -1)
	                            return i;
	                    }
	                }

	                return -1;
	            }
	        });
	        editorui.buttons['fontfamily'] = ui;
	        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	            if (!uiReady) {
	                var state = editor.queryCommandState('FontFamily');
	                if (state == -1) {
	                    ui.setDisabled(true);
	                } else {
	                    ui.setDisabled(false);
	                    var value = editor.queryCommandValue('FontFamily');
	                    //trace:1871 ie下从源码模式切换回来时，字体会带单引号，而且会有逗号
	                    value && (value = value.replace(/['"]/g, '').split(',')[0]);
	                    ui.setValue(value);

	                }
	            }

	        });
	        return ui;
	    };

	    editorui.fontsize = function (editor, list, title) {
	        title = editor.options.labelMap['fontsize'] || editor.getLang("labelMap.fontsize") || '';
	        list = list || editor.options['fontsize'] || [];
	        if (!list.length) return;
	        var items = [];
	        for (var i = 0; i < list.length; i++) {
	            var size = list[i] + 'px';
	            items.push({
	                label:size,
	                value:size,
	                theme:editor.options.theme,
	                renderLabelHtml:function () {
	                    return '<div class="edui-label %%-label" style="line-height:1;font-size:' +
	                        this.value + '">' + (this.label || '') + '</div>';
	                }
	            });
	        }
	        var ui = new editorui.Combox({
	            editor:editor,
	            items:items,
	            title:title,
	            initValue:title,
	            onselect:function (t, index) {
	                editor.execCommand('FontSize', this.items[index].value);
	            },
	            onbuttonclick:function () {
	                this.showPopup();
	            },
	            className:'edui-for-fontsize'
	        });
	        editorui.buttons['fontsize'] = ui;
	        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	            if (!uiReady) {
	                var state = editor.queryCommandState('FontSize');
	                if (state == -1) {
	                    ui.setDisabled(true);
	                } else {
	                    ui.setDisabled(false);
	                    ui.setValue(editor.queryCommandValue('FontSize'));
	                }
	            }

	        });
	        return ui;
	    };

	    editorui.paragraph = function (editor, list, title) {
	        title = editor.options.labelMap['paragraph'] || editor.getLang("labelMap.paragraph") || '';
	        list = editor.options['paragraph'] || [];
	        if (utils.isEmptyObject(list)) return;
	        var items = [];
	        for (var i in list) {
	            items.push({
	                value:i,
	                label:list[i] || editor.getLang("paragraph")[i],
	                theme:editor.options.theme,
	                renderLabelHtml:function () {
	                    return '<div class="edui-label %%-label"><span class="edui-for-' + this.value + '">' + (this.label || '') + '</span></div>';
	                }
	            })
	        }
	        var ui = new editorui.Combox({
	            editor:editor,
	            items:items,
	            title:title,
	            initValue:title,
	            className:'edui-for-paragraph',
	            onselect:function (t, index) {
	                editor.execCommand('Paragraph', this.items[index].value);
	            },
	            onbuttonclick:function () {
	                this.showPopup();
	            }
	        });
	        editorui.buttons['paragraph'] = ui;
	        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	            if (!uiReady) {
	                var state = editor.queryCommandState('Paragraph');
	                if (state == -1) {
	                    ui.setDisabled(true);
	                } else {
	                    ui.setDisabled(false);
	                    var value = editor.queryCommandValue('Paragraph');
	                    var index = ui.indexByValue(value);
	                    if (index != -1) {
	                        ui.setValue(value);
	                    } else {
	                        ui.setValue(ui.initValue);
	                    }
	                }
	            }

	        });
	        return ui;
	    };


	    //自定义标题
	    editorui.customstyle = function (editor) {
	        var list = editor.options['customstyle'] || [],
	            title = editor.options.labelMap['customstyle'] || editor.getLang("labelMap.customstyle") || '';
	        if (!list.length)return;
	        var langCs = editor.getLang('customstyle');
	        for (var i = 0, items = [], t; t = list[i++];) {
	            (function (t) {
	                var ck = {};
	                ck.label = t.label ? t.label : langCs[t.name];
	                ck.style = t.style;
	                ck.className = t.className;
	                ck.tag = t.tag;
	                items.push({
	                    label:ck.label,
	                    value:ck,
	                    theme:editor.options.theme,
	                    renderLabelHtml:function () {
	                        return '<div class="edui-label %%-label">' + '<' + ck.tag + ' ' + (ck.className ? ' class="' + ck.className + '"' : "")
	                            + (ck.style ? ' style="' + ck.style + '"' : "") + '>' + ck.label + "<\/" + ck.tag + ">"
	                            + '</div>';
	                    }
	                });
	            })(t);
	        }

	        var ui = new editorui.Combox({
	            editor:editor,
	            items:items,
	            title:title,
	            initValue:title,
	            className:'edui-for-customstyle',
	            onselect:function (t, index) {
	                editor.execCommand('customstyle', this.items[index].value);
	            },
	            onbuttonclick:function () {
	                this.showPopup();
	            },
	            indexByValue:function (value) {
	                for (var i = 0, ti; ti = this.items[i++];) {
	                    if (ti.label == value) {
	                        return i - 1
	                    }
	                }
	                return -1;
	            }
	        });
	        editorui.buttons['customstyle'] = ui;
	        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	            if (!uiReady) {
	                var state = editor.queryCommandState('customstyle');
	                if (state == -1) {
	                    ui.setDisabled(true);
	                } else {
	                    ui.setDisabled(false);
	                    var value = editor.queryCommandValue('customstyle');
	                    var index = ui.indexByValue(value);
	                    if (index != -1) {
	                        ui.setValue(value);
	                    } else {
	                        ui.setValue(ui.initValue);
	                    }
	                }
	            }

	        });
	        return ui;
	    };
	    editorui.inserttable = function (editor, iframeUrl, title) {
	        title = editor.options.labelMap['inserttable'] || editor.getLang("labelMap.inserttable") || '';
	        var ui = new editorui.TableButton({
	            editor:editor,
	            title:title,
	            className:'edui-for-inserttable',
	            onpicktable:function (t, numCols, numRows) {
	                editor.execCommand('InsertTable', {numRows:numRows, numCols:numCols, border:1});
	            },
	            onbuttonclick:function () {
	                this.showPopup();
	            }
	        });
	        editorui.buttons['inserttable'] = ui;
	        editor.addListener('selectionchange', function () {
	            ui.setDisabled(editor.queryCommandState('inserttable') == -1);
	        });
	        return ui;
	    };

	    editorui.lineheight = function (editor) {
	        var val = editor.options.lineheight || [];
	        if (!val.length)return;
	        for (var i = 0, ci, items = []; ci = val[i++];) {
	            items.push({
	                //todo:写死了
	                label:ci,
	                value:ci,
	                theme:editor.options.theme,
	                onclick:function () {
	                    editor.execCommand("lineheight", this.value);
	                }
	            })
	        }
	        var ui = new editorui.MenuButton({
	            editor:editor,
	            className:'edui-for-lineheight',
	            title:editor.options.labelMap['lineheight'] || editor.getLang("labelMap.lineheight") || '',
	            items:items,
	            onbuttonclick:function () {
	                var value = editor.queryCommandValue('LineHeight') || this.value;
	                editor.execCommand("LineHeight", value);
	            }
	        });
	        editorui.buttons['lineheight'] = ui;
	        editor.addListener('selectionchange', function () {
	            var state = editor.queryCommandState('LineHeight');
	            if (state == -1) {
	                ui.setDisabled(true);
	            } else {
	                ui.setDisabled(false);
	                var value = editor.queryCommandValue('LineHeight');
	                value && ui.setValue((value + '').replace(/cm/, ''));
	                ui.setChecked(state)
	            }
	        });
	        return ui;
	    };

	    var rowspacings = ['top', 'bottom'];
	    for (var r = 0, ri; ri = rowspacings[r++];) {
	        (function (cmd) {
	            editorui['rowspacing' + cmd] = function (editor) {
	                var val = editor.options['rowspacing' + cmd] || [];
	                if (!val.length) return null;
	                for (var i = 0, ci, items = []; ci = val[i++];) {
	                    items.push({
	                        label:ci,
	                        value:ci,
	                        theme:editor.options.theme,
	                        onclick:function () {
	                            editor.execCommand("rowspacing", this.value, cmd);
	                        }
	                    })
	                }
	                var ui = new editorui.MenuButton({
	                    editor:editor,
	                    className:'edui-for-rowspacing' + cmd,
	                    title:editor.options.labelMap['rowspacing' + cmd] || editor.getLang("labelMap.rowspacing" + cmd) || '',
	                    items:items,
	                    onbuttonclick:function () {
	                        var value = editor.queryCommandValue('rowspacing', cmd) || this.value;
	                        editor.execCommand("rowspacing", value, cmd);
	                    }
	                });
	                editorui.buttons[cmd] = ui;
	                editor.addListener('selectionchange', function () {
	                    var state = editor.queryCommandState('rowspacing', cmd);
	                    if (state == -1) {
	                        ui.setDisabled(true);
	                    } else {
	                        ui.setDisabled(false);
	                        var value = editor.queryCommandValue('rowspacing', cmd);
	                        value && ui.setValue((value + '').replace(/%/, ''));
	                        ui.setChecked(state)
	                    }
	                });
	                return ui;
	            }
	        })(ri)
	    }
	    //有序，无序列表
	    var lists = ['insertorderedlist', 'insertunorderedlist'];
	    for (var l = 0, cl; cl = lists[l++];) {
	        (function (cmd) {
	            editorui[cmd] = function (editor) {
	                var vals = editor.options[cmd],
	                    _onMenuClick = function () {
	                        editor.execCommand(cmd, this.value);
	                    }, items = [];
	                for (var i in vals) {
	                    items.push({
	                        label:vals[i] || editor.getLang()[cmd][i] || "",
	                        value:i,
	                        theme:editor.options.theme,
	                        onclick:_onMenuClick
	                    })
	                }
	                var ui = new editorui.MenuButton({
	                    editor:editor,
	                    className:'edui-for-' + cmd,
	                    title:editor.getLang("labelMap." + cmd) || '',
	                    'items':items,
	                    onbuttonclick:function () {
	                        var value = editor.queryCommandValue(cmd) || this.value;
	                        editor.execCommand(cmd, value);
	                    }
	                });
	                editorui.buttons[cmd] = ui;
	                editor.addListener('selectionchange', function () {
	                    var state = editor.queryCommandState(cmd);
	                    if (state == -1) {
	                        ui.setDisabled(true);
	                    } else {
	                        ui.setDisabled(false);
	                        var value = editor.queryCommandValue(cmd);
	                        ui.setValue(value);
	                        ui.setChecked(state)
	                    }
	                });
	                return ui;
	            };
	        })(cl)
	    }

	    editorui.fullscreen = function (editor, title) {
	        title = editor.options.labelMap['fullscreen'] || editor.getLang("labelMap.fullscreen") || '';
	        var ui = new editorui.Button({
	            className:'edui-for-fullscreen',
	            title:title,
	            theme:editor.options.theme,
	            onclick:function () {
	                if (editor.ui) {
	                    editor.ui.setFullScreen(!editor.ui.isFullScreen());
	                }
	                this.setChecked(editor.ui.isFullScreen());
	            }
	        });
	        editorui.buttons['fullscreen'] = ui;
	        editor.addListener('selectionchange', function () {
	            var state = editor.queryCommandState('fullscreen');
	            ui.setDisabled(state == -1);
	            ui.setChecked(editor.ui.isFullScreen());
	        });
	        return ui;
	    };

	    // 表情
	    editorui["emotion"] = function (editor, iframeUrl) {
	        var cmd = "emotion";
	        var ui = new editorui.MultiMenuPop({
	            title:editor.options.labelMap[cmd] || editor.getLang("labelMap." + cmd + "") || '',
	            editor:editor,
	            className:'edui-for-' + cmd,
	            iframeUrl:editor.ui.mapUrl(iframeUrl || (editor.options.iframeUrlMap || {})[cmd] || iframeUrlMap[cmd])
	        });
	        editorui.buttons[cmd] = ui;

	        editor.addListener('selectionchange', function () {
	            ui.setDisabled(editor.queryCommandState(cmd) == -1)
	        });
	        return ui;
	    };

	    editorui.autotypeset = function (editor) {
	        var ui = new editorui.AutoTypeSetButton({
	            editor:editor,
	            title:editor.options.labelMap['autotypeset'] || editor.getLang("labelMap.autotypeset") || '',
	            className:'edui-for-autotypeset',
	            onbuttonclick:function () {
	                editor.execCommand('autotypeset')
	            }
	        });
	        editorui.buttons['autotypeset'] = ui;
	        editor.addListener('selectionchange', function () {
	            ui.setDisabled(editor.queryCommandState('autotypeset') == -1);
	        });
	        return ui;
	    };

	    /* 简单上传插件 */
	    editorui["simpleupload"] = function (editor) {
	        var name = 'simpleupload',
	            ui = new editorui.Button({
	                className:'edui-for-' + name,
	                title:editor.options.labelMap[name] || editor.getLang("labelMap." + name) || '',
	                onclick:function () {},
	                theme:editor.options.theme,
	                showText:false
	            });
	        editorui.buttons[name] = ui;
	        editor.addListener('ready', function() {
	            var b = ui.getDom('body'),
	                iconSpan = b.children[0];
	            editor.fireEvent('simpleuploadbtnready', iconSpan);
	        });
	        editor.addListener('selectionchange', function (type, causeByUi, uiReady) {
	            var state = editor.queryCommandState(name);
	            if (state == -1) {
	                ui.setDisabled(true);
	                ui.setChecked(false);
	            } else {
	                if (!uiReady) {
	                    ui.setDisabled(false);
	                    ui.setChecked(state);
	                }
	            }
	        });
	        return ui;
	    };

	})();


	// adapter/editor.js
	///import core
	///commands 全屏
	///commandsName FullScreen
	///commandsTitle  全屏
	(function () {
	    var utils = baidu.editor.utils,
	        uiUtils = baidu.editor.ui.uiUtils,
	        UIBase = baidu.editor.ui.UIBase,
	        domUtils = baidu.editor.dom.domUtils;
	    var nodeStack = [];

	    function EditorUI(options) {
	        this.initOptions(options);
	        this.initEditorUI();
	    }

	    EditorUI.prototype = {
	        uiName:'editor',
	        initEditorUI:function () {
	            this.editor.ui = this;
	            this._dialogs = {};
	            this.initUIBase();
	            this._initToolbars();
	            var editor = this.editor,
	                me = this;

	            editor.addListener('ready', function () {
	                //提供getDialog方法
	                editor.getDialog = function (name) {
	                    return editor.ui._dialogs[name + "Dialog"];
	                };
	                domUtils.on(editor.window, 'scroll', function (evt) {
	                    baidu.editor.ui.Popup.postHide(evt);
	                });
	                //提供编辑器实时宽高(全屏时宽高不变化)
	                editor.ui._actualFrameWidth = editor.options.initialFrameWidth;

	                UE.browser.ie && UE.browser.version === 6 && editor.container.ownerDocument.execCommand("BackgroundImageCache", false, true);

	                //display bottom-bar label based on config
	                if (editor.options.elementPathEnabled) {
	                    editor.ui.getDom('elementpath').innerHTML = '<div class="edui-editor-breadcrumb">' + editor.getLang("elementPathTip") + ':</div>';
	                }
	                if (editor.options.wordCount) {
	                    function countFn() {
	                        setCount(editor,me);
	                        domUtils.un(editor.document, "click", arguments.callee);
	                    }
	                    domUtils.on(editor.document, "click", countFn);
	                    editor.ui.getDom('wordcount').innerHTML = editor.getLang("wordCountTip");
	                }
	                editor.ui._scale();
	                if (editor.options.scaleEnabled) {
	                    if (editor.autoHeightEnabled) {
	                        editor.disableAutoHeight();
	                    }
	                    me.enableScale();
	                } else {
	                    me.disableScale();
	                }
	                if (!editor.options.elementPathEnabled && !editor.options.wordCount && !editor.options.scaleEnabled) {
	                    editor.ui.getDom('elementpath').style.display = "none";
	                    editor.ui.getDom('wordcount').style.display = "none";
	                    editor.ui.getDom('scale').style.display = "none";
	                }

	                if (!editor.selection.isFocus())return;
	                editor.fireEvent('selectionchange', false, true);


	            });

	            editor.addListener('mousedown', function (t, evt) {
	                var el = evt.target || evt.srcElement;
	                baidu.editor.ui.Popup.postHide(evt, el);
	                baidu.editor.ui.ShortCutMenu.postHide(evt);

	            });
	            editor.addListener("delcells", function () {
	                if (UE.ui['edittip']) {
	                    new UE.ui['edittip'](editor);
	                }
	                editor.getDialog('edittip').open();
	            });

	            var pastePop, isPaste = false, timer;
	            editor.addListener("afterpaste", function () {
	                if(editor.queryCommandState('pasteplain'))
	                    return;
	                if(baidu.editor.ui.PastePicker){
	                    pastePop = new baidu.editor.ui.Popup({
	                        content:new baidu.editor.ui.PastePicker({editor:editor}),
	                        editor:editor,
	                        className:'edui-wordpastepop'
	                    });
	                    pastePop.render();
	                }
	                isPaste = true;
	            });

	            editor.addListener("afterinserthtml", function () {
	                clearTimeout(timer);
	                timer = setTimeout(function () {
	                    if (pastePop && (isPaste || editor.ui._isTransfer)) {
	                        if(pastePop.isHidden()){
	                            var span = domUtils.createElement(editor.document, 'span', {
	                                    'style':"line-height:0px;",
	                                    'innerHTML':'\ufeff'
	                                }),
	                                range = editor.selection.getRange();
	                            range.insertNode(span);
	                            var tmp= getDomNode(span, 'firstChild', 'previousSibling');
	                            tmp && pastePop.showAnchor(tmp.nodeType == 3 ? tmp.parentNode : tmp);
	                            domUtils.remove(span);
	                        }else{
	                            pastePop.show();
	                        }
	                        delete editor.ui._isTransfer;
	                        isPaste = false;
	                    }
	                }, 200)
	            });
	            editor.addListener('contextmenu', function (t, evt) {
	                baidu.editor.ui.Popup.postHide(evt);
	            });
	            editor.addListener('keydown', function (t, evt) {
	                if (pastePop)    pastePop.dispose(evt);
	                var keyCode = evt.keyCode || evt.which;
	                if(evt.altKey&&keyCode==90){
	                    UE.ui.buttons['fullscreen'].onclick();
	                }
	            });
	            editor.addListener('wordcount', function (type) {
	                setCount(this,me);
	            });
	            function setCount(editor,ui) {
	                editor.setOpt({
	                    wordCount:true,
	                    maximumWords:10000,
	                    wordCountMsg:editor.options.wordCountMsg || editor.getLang("wordCountMsg"),
	                    wordOverFlowMsg:editor.options.wordOverFlowMsg || editor.getLang("wordOverFlowMsg")
	                });
	                var opt = editor.options,
	                    max = opt.maximumWords,
	                    msg = opt.wordCountMsg ,
	                    errMsg = opt.wordOverFlowMsg,
	                    countDom = ui.getDom('wordcount');
	                if (!opt.wordCount) {
	                    return;
	                }
	                var count = editor.getContentLength(true);
	                if (count > max) {
	                    countDom.innerHTML = errMsg;
	                    editor.fireEvent("wordcountoverflow");
	                } else {
	                    countDom.innerHTML = msg.replace("{#leave}", max - count).replace("{#count}", count);
	                }
	            }

	            editor.addListener('selectionchange', function () {
	                if (editor.options.elementPathEnabled) {
	                    me[(editor.queryCommandState('elementpath') == -1 ? 'dis' : 'en') + 'ableElementPath']()
	                }
	                if (editor.options.scaleEnabled) {
	                    me[(editor.queryCommandState('scale') == -1 ? 'dis' : 'en') + 'ableScale']();

	                }
	            });
	            var popup = new baidu.editor.ui.Popup({
	                editor:editor,
	                content:'',
	                className:'edui-bubble',
	                _onEditButtonClick:function () {
	                    this.hide();
	                    editor.ui._dialogs.linkDialog.open();
	                },
	                _onImgEditButtonClick:function (name) {
	                    this.hide();
	                    editor.ui._dialogs[name] && editor.ui._dialogs[name].open();

	                },
	                _onImgSetFloat:function (value) {
	                    this.hide();
	                    editor.execCommand("imagefloat", value);

	                },
	                _setIframeAlign:function (value) {
	                    var frame = popup.anchorEl;
	                    var newFrame = frame.cloneNode(true);
	                    switch (value) {
	                        case -2:
	                            newFrame.setAttribute("align", "");
	                            break;
	                        case -1:
	                            newFrame.setAttribute("align", "left");
	                            break;
	                        case 1:
	                            newFrame.setAttribute("align", "right");
	                            break;
	                    }
	                    frame.parentNode.insertBefore(newFrame, frame);
	                    domUtils.remove(frame);
	                    popup.anchorEl = newFrame;
	                    popup.showAnchor(popup.anchorEl);
	                },
	                _updateIframe:function () {
	                    var frame = editor._iframe = popup.anchorEl;
	                    if(domUtils.hasClass(frame, 'ueditor_baidumap')) {
	                        editor.selection.getRange().selectNode(frame).select();
	                        editor.ui._dialogs.mapDialog.open();
	                        popup.hide();
	                    } else {
	                        editor.ui._dialogs.insertframeDialog.open();
	                        popup.hide();
	                    }
	                },
	                _onRemoveButtonClick:function (cmdName) {
	                    editor.execCommand(cmdName);
	                    this.hide();
	                },
	                queryAutoHide:function (el) {
	                    if (el && el.ownerDocument == editor.document) {
	                        if (el.tagName.toLowerCase() == 'img' || domUtils.findParentByTagName(el, 'a', true)) {
	                            return el !== popup.anchorEl;
	                        }
	                    }
	                    return baidu.editor.ui.Popup.prototype.queryAutoHide.call(this, el);
	                }
	            });
	            popup.render();
	            if (editor.options.imagePopup) {
	                editor.addListener('mouseover', function (t, evt) {
	                    evt = evt || window.event;
	                    var el = evt.target || evt.srcElement;
	                    if (editor.ui._dialogs.insertframeDialog && /iframe/ig.test(el.tagName)) {
	                        var html = popup.formatHtml(
	                            '<nobr>' + editor.getLang("property") + ': <span onclick=$$._setIframeAlign(-2) class="edui-clickable">' + editor.getLang("default") + '</span>&nbsp;&nbsp;<span onclick=$$._setIframeAlign(-1) class="edui-clickable">' + editor.getLang("justifyleft") + '</span>&nbsp;&nbsp;<span onclick=$$._setIframeAlign(1) class="edui-clickable">' + editor.getLang("justifyright") + '</span>&nbsp;&nbsp;' +
	                                ' <span onclick="$$._updateIframe( this);" class="edui-clickable">' + editor.getLang("modify") + '</span></nobr>');
	                        if (html) {
	                            popup.getDom('content').innerHTML = html;
	                            popup.anchorEl = el;
	                            popup.showAnchor(popup.anchorEl);
	                        } else {
	                            popup.hide();
	                        }
	                    }
	                });
	                editor.addListener('selectionchange', function (t, causeByUi) {
	                    if (!causeByUi) return;
	                    var html = '', str = "",
	                        img = editor.selection.getRange().getClosedNode(),
	                        dialogs = editor.ui._dialogs;
	                    if (img && img.tagName == 'IMG') {
	                        var dialogName = 'insertimageDialog';
	                        if (img.className.indexOf("edui-faked-video") != -1 || img.className.indexOf("edui-upload-video") != -1) {
	                            dialogName = "insertvideoDialog"
	                        }
	                        if (img.className.indexOf("edui-faked-webapp") != -1) {
	                            dialogName = "webappDialog"
	                        }
	                        if (img.src.indexOf("http://api.map.baidu.com") != -1) {
	                            dialogName = "mapDialog"
	                        }
	                        if (img.className.indexOf("edui-faked-music") != -1) {
	                            dialogName = "musicDialog"
	                        }
	                        if (img.src.indexOf("http://maps.google.com/maps/api/staticmap") != -1) {
	                            dialogName = "gmapDialog"
	                        }
	                        if (img.getAttribute("anchorname")) {
	                            dialogName = "anchorDialog";
	                            html = popup.formatHtml(
	                                '<nobr>' + editor.getLang("property") + ': <span onclick=$$._onImgEditButtonClick("anchorDialog") class="edui-clickable">' + editor.getLang("modify") + '</span>&nbsp;&nbsp;' +
	                                    '<span onclick=$$._onRemoveButtonClick(\'anchor\') class="edui-clickable">' + editor.getLang("delete") + '</span></nobr>');
	                        }
	                        if (img.getAttribute("word_img")) {
	                            //todo 放到dialog去做查询
	                            editor.word_img = [img.getAttribute("word_img")];
	                            dialogName = "wordimageDialog"
	                        }
	                        if(domUtils.hasClass(img, 'loadingclass') || domUtils.hasClass(img, 'loaderrorclass')) {
	                            dialogName = "";
	                        }
	                        if (!dialogs[dialogName]) {
	                            return;
	                        }
	                        str = '<nobr>' + editor.getLang("property") + ': '+
	                            '<span onclick=$$._onImgSetFloat("none") class="edui-clickable">' + editor.getLang("default") + '</span>&nbsp;&nbsp;' +
	                            '<span onclick=$$._onImgSetFloat("left") class="edui-clickable">' + editor.getLang("justifyleft") + '</span>&nbsp;&nbsp;' +
	                            '<span onclick=$$._onImgSetFloat("right") class="edui-clickable">' + editor.getLang("justifyright") + '</span>&nbsp;&nbsp;' +
	                            '<span onclick=$$._onImgSetFloat("center") class="edui-clickable">' + editor.getLang("justifycenter") + '</span>&nbsp;&nbsp;'+
	                            '<span onclick="$$._onImgEditButtonClick(\'' + dialogName + '\');" class="edui-clickable">' + editor.getLang("modify") + '</span></nobr>';

	                        !html && (html = popup.formatHtml(str))

	                    }
	                    if (editor.ui._dialogs.linkDialog) {
	                        var link = editor.queryCommandValue('link');
	                        var url;
	                        if (link && (url = (link.getAttribute('_href') || link.getAttribute('href', 2)))) {
	                            var txt = url;
	                            if (url.length > 30) {
	                                txt = url.substring(0, 20) + "...";
	                            }
	                            if (html) {
	                                html += '<div style="height:5px;"></div>'
	                            }
	                            html += popup.formatHtml(
	                                '<nobr>' + editor.getLang("anthorMsg") + ': <a target="_blank" href="' + url + '" title="' + url + '" >' + txt + '</a>' +
	                                    ' <span class="edui-clickable" onclick="$$._onEditButtonClick();">' + editor.getLang("modify") + '</span>' +
	                                    ' <span class="edui-clickable" onclick="$$._onRemoveButtonClick(\'unlink\');"> ' + editor.getLang("clear") + '</span></nobr>');
	                            popup.showAnchor(link);
	                        }
	                    }

	                    if (html) {
	                        popup.getDom('content').innerHTML = html;
	                        popup.anchorEl = img || link;
	                        popup.showAnchor(popup.anchorEl);
	                    } else {
	                        popup.hide();
	                    }
	                });
	            }

	        },
	        _initToolbars:function () {
	            var editor = this.editor;
	            var toolbars = this.toolbars || [];
	            var toolbarUis = [];
	            for (var i = 0; i < toolbars.length; i++) {
	                var toolbar = toolbars[i];
	                var toolbarUi = new baidu.editor.ui.Toolbar({theme:editor.options.theme});
	                for (var j = 0; j < toolbar.length; j++) {
	                    var toolbarItem = toolbar[j];
	                    var toolbarItemUi = null;
	                    if (typeof toolbarItem == 'string') {
	                        toolbarItem = toolbarItem.toLowerCase();
	                        if (toolbarItem == '|') {
	                            toolbarItem = 'Separator';
	                        }
	                        if(toolbarItem == '||'){
	                            toolbarItem = 'Breakline';
	                        }
	                        if (baidu.editor.ui[toolbarItem]) {
	                            toolbarItemUi = new baidu.editor.ui[toolbarItem](editor);
	                        }

	                        //fullscreen这里单独处理一下，放到首行去
	                        if (toolbarItem == 'fullscreen') {
	                            if (toolbarUis && toolbarUis[0]) {
	                                toolbarUis[0].items.splice(0, 0, toolbarItemUi);
	                            } else {
	                                toolbarItemUi && toolbarUi.items.splice(0, 0, toolbarItemUi);
	                            }

	                            continue;


	                        }
	                    } else {
	                        toolbarItemUi = toolbarItem;
	                    }
	                    if (toolbarItemUi && toolbarItemUi.id) {

	                        toolbarUi.add(toolbarItemUi);
	                    }
	                }
	                toolbarUis[i] = toolbarUi;
	            }

	            //接受外部定制的UI

	            utils.each(UE._customizeUI,function(obj,key){
	                var itemUI,index;
	                if(obj.id && obj.id != editor.key){
	                   return false;
	                }
	                itemUI = obj.execFn.call(editor,editor,key);
	                if(itemUI){
	                    index = obj.index;
	                    if(index === undefined){
	                        index = toolbarUi.items.length;
	                    }
	                    toolbarUi.add(itemUI,index)
	                }
	            });

	            this.toolbars = toolbarUis;
	        },
	        getHtmlTpl:function () {
	            return '<div id="##" class="%%">' +
	                '<div id="##_toolbarbox" class="%%-toolbarbox">' +
	                (this.toolbars.length ?
	                    '<div id="##_toolbarboxouter" class="%%-toolbarboxouter"><div class="%%-toolbarboxinner">' +
	                        this.renderToolbarBoxHtml() +
	                        '</div></div>' : '') +
	                '<div id="##_toolbarmsg" class="%%-toolbarmsg" style="display:none;">' +
	                '<div id = "##_upload_dialog" class="%%-toolbarmsg-upload" onclick="$$.showWordImageDialog();">' + this.editor.getLang("clickToUpload") + '</div>' +
	                '<div class="%%-toolbarmsg-close" onclick="$$.hideToolbarMsg();">x</div>' +
	                '<div id="##_toolbarmsg_label" class="%%-toolbarmsg-label"></div>' +
	                '<div style="height:0;overflow:hidden;clear:both;"></div>' +
	                '</div>' +
	                '<div id="##_message_holder" class="%%-messageholder"></div>' +
	                '</div>' +
	                '<div id="##_iframeholder" class="%%-iframeholder">' +
	                '</div>' +
	                //modify wdcount by matao
	                '<div id="##_bottombar" class="%%-bottomContainer"><table><tr>' +
	                '<td id="##_elementpath" class="%%-bottombar"></td>' +
	                '<td id="##_wordcount" class="%%-wordcount"></td>' +
	                '<td id="##_scale" class="%%-scale"><div class="%%-icon"></div></td>' +
	                '</tr></table></div>' +
	                '<div id="##_scalelayer"></div>' +
	                '</div>';
	        },
	        showWordImageDialog:function () {
	            this._dialogs['wordimageDialog'].open();
	        },
	        renderToolbarBoxHtml:function () {
	            var buff = [];
	            for (var i = 0; i < this.toolbars.length; i++) {
	                buff.push(this.toolbars[i].renderHtml());
	            }
	            return buff.join('');
	        },
	        setFullScreen:function (fullscreen) {

	            var editor = this.editor,
	                container = editor.container.parentNode.parentNode;
	            if (this._fullscreen != fullscreen) {
	                this._fullscreen = fullscreen;
	                this.editor.fireEvent('beforefullscreenchange', fullscreen);
	                if (baidu.editor.browser.gecko) {
	                    var bk = editor.selection.getRange().createBookmark();
	                }
	                if (fullscreen) {
	                    while (container.tagName != "BODY") {
	                        var position = baidu.editor.dom.domUtils.getComputedStyle(container, "position");
	                        nodeStack.push(position);
	                        container.style.position = "static";
	                        container = container.parentNode;
	                    }
	                    this._bakHtmlOverflow = document.documentElement.style.overflow;
	                    this._bakBodyOverflow = document.body.style.overflow;
	                    this._bakAutoHeight = this.editor.autoHeightEnabled;
	                    this._bakScrollTop = Math.max(document.documentElement.scrollTop, document.body.scrollTop);

	                    this._bakEditorContaninerWidth = editor.iframe.parentNode.offsetWidth;
	                    if (this._bakAutoHeight) {
	                        //当全屏时不能执行自动长高
	                        editor.autoHeightEnabled = false;
	                        this.editor.disableAutoHeight();
	                    }

	                    document.documentElement.style.overflow = 'hidden';
	                    //修复，滚动条不收起的问题

	                    window.scrollTo(0,window.scrollY);
	                    this._bakCssText = this.getDom().style.cssText;
	                    this._bakCssText1 = this.getDom('iframeholder').style.cssText;
	                    editor.iframe.parentNode.style.width = '';
	                    this._updateFullScreen();
	                } else {
	                    while (container.tagName != "BODY") {
	                        container.style.position = nodeStack.shift();
	                        container = container.parentNode;
	                    }
	                    this.getDom().style.cssText = this._bakCssText;
	                    this.getDom('iframeholder').style.cssText = this._bakCssText1;
	                    if (this._bakAutoHeight) {
	                        editor.autoHeightEnabled = true;
	                        this.editor.enableAutoHeight();
	                    }

	                    document.documentElement.style.overflow = this._bakHtmlOverflow;
	                    document.body.style.overflow = this._bakBodyOverflow;
	                    editor.iframe.parentNode.style.width = this._bakEditorContaninerWidth + 'px';
	                    window.scrollTo(0, this._bakScrollTop);
	                }
	                if (browser.gecko && editor.body.contentEditable === 'true') {
	                    var input = document.createElement('input');
	                    document.body.appendChild(input);
	                    editor.body.contentEditable = false;
	                    setTimeout(function () {
	                        input.focus();
	                        setTimeout(function () {
	                            editor.body.contentEditable = true;
	                            editor.fireEvent('fullscreenchanged', fullscreen);
	                            editor.selection.getRange().moveToBookmark(bk).select(true);
	                            baidu.editor.dom.domUtils.remove(input);
	                            fullscreen && window.scroll(0, 0);
	                        }, 0)
	                    }, 0)
	                }

	                if(editor.body.contentEditable === 'true'){
	                    this.editor.fireEvent('fullscreenchanged', fullscreen);
	                    this.triggerLayout();
	                }

	            }
	        },
	        _updateFullScreen:function () {
	            if (this._fullscreen) {
	                var vpRect = uiUtils.getViewportRect();
	                this.getDom().style.cssText = 'border:0;position:absolute;left:0;top:' + (this.editor.options.topOffset || 0) + 'px;width:' + vpRect.width + 'px;height:' + vpRect.height + 'px;z-index:' + (this.getDom().style.zIndex * 1 + 100);
	                uiUtils.setViewportOffset(this.getDom(), { left:0, top:this.editor.options.topOffset || 0 });
	                this.editor.setHeight(vpRect.height - this.getDom('toolbarbox').offsetHeight - this.getDom('bottombar').offsetHeight - (this.editor.options.topOffset || 0),true);
	                //不手动调一下，会导致全屏失效
	                if(browser.gecko){
	                    try{
	                        window.onresize();
	                    }catch(e){

	                    }

	                }
	            }
	        },
	        _updateElementPath:function () {
	            var bottom = this.getDom('elementpath'), list;
	            if (this.elementPathEnabled && (list = this.editor.queryCommandValue('elementpath'))) {

	                var buff = [];
	                for (var i = 0, ci; ci = list[i]; i++) {
	                    buff[i] = this.formatHtml('<span unselectable="on" onclick="$$.editor.execCommand(&quot;elementpath&quot;, &quot;' + i + '&quot;);">' + ci + '</span>');
	                }
	                bottom.innerHTML = '<div class="edui-editor-breadcrumb" onmousedown="return false;">' + this.editor.getLang("elementPathTip") + ': ' + buff.join(' &gt; ') + '</div>';

	            } else {
	                bottom.style.display = 'none'
	            }
	        },
	        disableElementPath:function () {
	            var bottom = this.getDom('elementpath');
	            bottom.innerHTML = '';
	            bottom.style.display = 'none';
	            this.elementPathEnabled = false;

	        },
	        enableElementPath:function () {
	            var bottom = this.getDom('elementpath');
	            bottom.style.display = '';
	            this.elementPathEnabled = true;
	            this._updateElementPath();
	        },
	        _scale:function () {
	            var doc = document,
	                editor = this.editor,
	                editorHolder = editor.container,
	                editorDocument = editor.document,
	                toolbarBox = this.getDom("toolbarbox"),
	                bottombar = this.getDom("bottombar"),
	                scale = this.getDom("scale"),
	                scalelayer = this.getDom("scalelayer");

	            var isMouseMove = false,
	                position = null,
	                minEditorHeight = 0,
	                minEditorWidth = editor.options.minFrameWidth,
	                pageX = 0,
	                pageY = 0,
	                scaleWidth = 0,
	                scaleHeight = 0;

	            function down() {
	                position = domUtils.getXY(editorHolder);

	                if (!minEditorHeight) {
	                    minEditorHeight = editor.options.minFrameHeight + toolbarBox.offsetHeight + bottombar.offsetHeight;
	                }

	                scalelayer.style.cssText = "position:absolute;left:0;display:;top:0;background-color:#41ABFF;opacity:0.4;filter: Alpha(opacity=40);width:" + editorHolder.offsetWidth + "px;height:"
	                    + editorHolder.offsetHeight + "px;z-index:" + (editor.options.zIndex + 1);

	                domUtils.on(doc, "mousemove", move);
	                domUtils.on(editorDocument, "mouseup", up);
	                domUtils.on(doc, "mouseup", up);
	            }

	            var me = this;
	            //by xuheng 全屏时关掉缩放
	            this.editor.addListener('fullscreenchanged', function (e, fullScreen) {
	                if (fullScreen) {
	                    me.disableScale();

	                } else {
	                    if (me.editor.options.scaleEnabled) {
	                        me.enableScale();
	                        var tmpNode = me.editor.document.createElement('span');
	                        me.editor.body.appendChild(tmpNode);
	                        me.editor.body.style.height = Math.max(domUtils.getXY(tmpNode).y, me.editor.iframe.offsetHeight - 20) + 'px';
	                        domUtils.remove(tmpNode)
	                    }
	                }
	            });
	            function move(event) {
	                clearSelection();
	                var e = event || window.event;
	                pageX = e.pageX || (doc.documentElement.scrollLeft + e.clientX);
	                pageY = e.pageY || (doc.documentElement.scrollTop + e.clientY);
	                scaleWidth = pageX - position.x;
	                scaleHeight = pageY - position.y;

	                if (scaleWidth >= minEditorWidth) {
	                    isMouseMove = true;
	                    scalelayer.style.width = scaleWidth + 'px';
	                }
	                if (scaleHeight >= minEditorHeight) {
	                    isMouseMove = true;
	                    scalelayer.style.height = scaleHeight + "px";
	                }
	            }

	            function up() {
	                if (isMouseMove) {
	                    isMouseMove = false;
	                    editor.ui._actualFrameWidth = scalelayer.offsetWidth - 2;
	                    editorHolder.style.width = editor.ui._actualFrameWidth + 'px';

	                    editor.setHeight(scalelayer.offsetHeight - bottombar.offsetHeight - toolbarBox.offsetHeight - 2,true);
	                }
	                if (scalelayer) {
	                    scalelayer.style.display = "none";
	                }
	                clearSelection();
	                domUtils.un(doc, "mousemove", move);
	                domUtils.un(editorDocument, "mouseup", up);
	                domUtils.un(doc, "mouseup", up);
	            }

	            function clearSelection() {
	                if (browser.ie)
	                    doc.selection.clear();
	                else
	                    window.getSelection().removeAllRanges();
	            }

	            this.enableScale = function () {
	                //trace:2868
	                if (editor.queryCommandState("source") == 1)    return;
	                scale.style.display = "";
	                this.scaleEnabled = true;
	                domUtils.on(scale, "mousedown", down);
	            };
	            this.disableScale = function () {
	                scale.style.display = "none";
	                this.scaleEnabled = false;
	                domUtils.un(scale, "mousedown", down);
	            };
	        },
	        isFullScreen:function () {
	            return this._fullscreen;
	        },
	        postRender:function () {
	            UIBase.prototype.postRender.call(this);
	            for (var i = 0; i < this.toolbars.length; i++) {
	                this.toolbars[i].postRender();
	            }
	            var me = this;
	            var timerId,
	                domUtils = baidu.editor.dom.domUtils,
	                updateFullScreenTime = function () {
	                    clearTimeout(timerId);
	                    timerId = setTimeout(function () {
	                        me._updateFullScreen();
	                    });
	                };
	            domUtils.on(window, 'resize', updateFullScreenTime);

	            me.addListener('destroy', function () {
	                domUtils.un(window, 'resize', updateFullScreenTime);
	                clearTimeout(timerId);
	            })
	        },
	        showToolbarMsg:function (msg, flag) {
	            this.getDom('toolbarmsg_label').innerHTML = msg;
	            this.getDom('toolbarmsg').style.display = '';
	            //
	            if (!flag) {
	                var w = this.getDom('upload_dialog');
	                w.style.display = 'none';
	            }
	        },
	        hideToolbarMsg:function () {
	            this.getDom('toolbarmsg').style.display = 'none';
	        },
	        mapUrl:function (url) {
	            return url ? url.replace('~/', this.editor.options.UEDITOR_HOME_URL || '') : ''
	        },
	        triggerLayout:function () {
	            var dom = this.getDom();
	            if (dom.style.zoom == '1') {
	                dom.style.zoom = '100%';
	            } else {
	                dom.style.zoom = '1';
	            }
	        }
	    };
	    utils.inherits(EditorUI, baidu.editor.ui.UIBase);


	    var instances = {};


	    UE.ui.Editor = function (options) {
	        var editor = new UE.Editor(options);
	        editor.options.editor = editor;
	        utils.loadFile(document, {
	            href:editor.options.themePath + editor.options.theme + "/css/ueditor.css",
	            tag:"link",
	            type:"text/css",
	            rel:"stylesheet"
	        });

	        var oldRender = editor.render;
	        editor.render = function (holder) {
	            if (holder.constructor === String) {
	                editor.key = holder;
	                instances[holder] = editor;
	            }
	            utils.domReady(function () {
	                editor.langIsReady ? renderUI() : editor.addListener("langReady", renderUI);
	                function renderUI() {
	                    editor.setOpt({
	                        labelMap:editor.options.labelMap || editor.getLang('labelMap')
	                    });
	                    new EditorUI(editor.options);
	                    if (holder) {
	                        if (holder.constructor === String) {
	                            holder = document.getElementById(holder);
	                        }
	                        holder && holder.getAttribute('name') && ( editor.options.textarea = holder.getAttribute('name'));
	                        if (holder && /script|textarea/ig.test(holder.tagName)) {
	                            var newDiv = document.createElement('div');
	                            holder.parentNode.insertBefore(newDiv, holder);
	                            var cont = holder.value || holder.innerHTML;
	                            editor.options.initialContent = /^[\t\r\n ]*$/.test(cont) ? editor.options.initialContent :
	                                cont.replace(/>[\n\r\t]+([ ]{4})+/g, '>')
	                                    .replace(/[\n\r\t]+([ ]{4})+</g, '<')
	                                    .replace(/>[\n\r\t]+</g, '><');
	                            holder.className && (newDiv.className = holder.className);
	                            holder.style.cssText && (newDiv.style.cssText = holder.style.cssText);
	                            if (/textarea/i.test(holder.tagName)) {
	                                editor.textarea = holder;
	                                editor.textarea.style.display = 'none';


	                            } else {
	                                holder.parentNode.removeChild(holder);


	                            }
	                            if(holder.id){
	                                newDiv.id = holder.id;
	                                domUtils.removeAttributes(holder,'id');
	                            }
	                            holder = newDiv;
	                            holder.innerHTML = '';
	                        }

	                    }
	                    domUtils.addClass(holder, "edui-" + editor.options.theme);
	                    editor.ui.render(holder);
	                    var opt = editor.options;
	                    //给实例添加一个编辑器的容器引用
	                    editor.container = editor.ui.getDom();
	                    var parents = domUtils.findParents(holder,true);
	                    var displays = [];
	                    for(var i = 0 ,ci;ci=parents[i];i++){
	                        displays[i] = ci.style.display;
	                        ci.style.display = 'block'
	                    }
	                    if (opt.initialFrameWidth) {
	                        opt.minFrameWidth = opt.initialFrameWidth;
	                    } else {
	                        opt.minFrameWidth = opt.initialFrameWidth = holder.offsetWidth;
	                        var styleWidth = holder.style.width;
	                        if(/%$/.test(styleWidth)) {
	                            opt.initialFrameWidth = styleWidth;
	                        }
	                    }
	                    if (opt.initialFrameHeight) {
	                        opt.minFrameHeight = opt.initialFrameHeight;
	                    } else {
	                        opt.initialFrameHeight = opt.minFrameHeight = holder.offsetHeight;
	                    }
	                    for(var i = 0 ,ci;ci=parents[i];i++){
	                        ci.style.display =  displays[i]
	                    }
	                    //编辑器最外容器设置了高度，会导致，编辑器不占位
	                    //todo 先去掉，没有找到原因
	                    if(holder.style.height){
	                        holder.style.height = ''
	                    }
	                    editor.container.style.width = opt.initialFrameWidth + (/%$/.test(opt.initialFrameWidth) ? '' : 'px');
	                    editor.container.style.zIndex = opt.zIndex;
	                    oldRender.call(editor, editor.ui.getDom('iframeholder'));
	                    editor.fireEvent("afteruiready");
	                }
	            })
	        };
	        return editor;
	    };


	    /**
	     * @file
	     * @name UE
	     * @short UE
	     * @desc UEditor的顶部命名空间
	     */
	    /**
	     * @name getEditor
	     * @since 1.2.4+
	     * @grammar UE.getEditor(id,[opt])  =>  Editor实例
	     * @desc 提供一个全局的方法得到编辑器实例
	     *
	     * * ''id''  放置编辑器的容器id, 如果容器下的编辑器已经存在，就直接返回
	     * * ''opt'' 编辑器的可选参数
	     * @example
	     *  UE.getEditor('containerId',{onready:function(){//创建一个编辑器实例
	     *      this.setContent('hello')
	     *  }});
	     *  UE.getEditor('containerId'); //返回刚创建的实例
	     *
	     */
	  /*  UE.getEditor = function (id, opt) {
	        var editor = instances[id];
	        if (!editor) {
	            editor = instances[id] = new UE.ui.Editor(opt);
	            editor.render(id);
	        }
	        return editor;
	    };*/
	    UE.getEditor = function (id, opt) {

	    	UE.delEditor(id);
	    	var editor = new UE.ui.Editor(opt);
	    	editor.render(id);
	    	return editor;
	    	};

	    UE.delEditor = function (id) {
	        var editor;
	        if (editor = instances[id]) {
	            editor.key && editor.destroy();
	            delete instances[id]
	        }
	    };

	    UE.registerUI = function(uiName,fn,index,editorId){
	        utils.each(uiName.split(/\s+/), function (name) {
	            UE._customizeUI[name] = {
	                id : editorId,
	                execFn:fn,
	                index:index
	            };
	        })

	    }

	})();

	// adapter/message.js
	UE.registerUI('message', function(editor) {

	    var editorui = baidu.editor.ui;
	    var Message = editorui.Message;
	    var holder;
	    var _messageItems = [];
	    var me = editor;

	    me.addListener('ready', function(){
	        holder = document.getElementById(me.ui.id + '_message_holder');
	        updateHolderPos();
	        setTimeout(function(){
	            updateHolderPos();
	        }, 500);
	    });

	    me.addListener('showmessage', function(type, opt){
	        opt = utils.isString(opt) ? {
	            'content': opt
	        } : opt;
	        var message = new Message({
	                'timeout': opt.timeout,
	                'type': opt.type,
	                'content': opt.content,
	                'keepshow': opt.keepshow,
	                'editor': me
	            }),
	            mid = opt.id || ('msg_' + (+new Date()).toString(36));
	        message.render(holder);
	        _messageItems[mid] = message;
	        message.reset(opt);
	        updateHolderPos();
	        return mid;
	    });

	    me.addListener('updatemessage',function(type, id, opt){
	        opt = utils.isString(opt) ? {
	            'content': opt
	        } : opt;
	        var message = _messageItems[id];
	        message.render(holder);
	        message && message.reset(opt);
	    });

	    me.addListener('hidemessage',function(type, id){
	        var message = _messageItems[id];
	        message && message.hide();
	    });

	    function updateHolderPos(){
	        var toolbarbox = me.ui.getDom('toolbarbox');
	        if (toolbarbox) {
	            holder.style.top = toolbarbox.offsetHeight + 3 + 'px';
	        }
	        holder.style.zIndex = Math.max(me.options.zIndex, me.iframe.style.zIndex) + 1;
	    }

	});


	// adapter/autosave.js
	UE.registerUI('autosave', function(editor) {
	    var timer = null,uid = null;
	    editor.on('afterautosave',function(){
	        clearTimeout(timer);

	        timer = setTimeout(function(){
	            if(uid){
	                editor.trigger('hidemessage',uid);
	            }
	            uid = editor.trigger('showmessage',{
	                content : editor.getLang('autosave.success'),
	                timeout : 2000
	            });

	        },2000)
	    })

	});



	})();

	
	
return UE;
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJwbHVnaW5zL3VlZGl0b3IvdWVteS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoZnVuY3Rpb24ocmVxdWlyZSl7XHJcblx0LyohXHJcblx0ICogVUVkaXRvclxyXG5cdCAqIHZlcnNpb246IHVlZGl0b3JcclxuXHQgKiBidWlsZDogV2VkIEF1ZyAxMCAyMDE2IDExOjA2OjE2IEdNVCswODAwIChDU1QpXHJcblx0ICovXHJcblxyXG5cdChmdW5jdGlvbigpe1xyXG5cclxuXHQvLyBlZGl0b3IuanNcclxuXHRVRURJVE9SX0NPTkZJRyA9IHdpbmRvdy5VRURJVE9SX0NPTkZJRyB8fCB7fTtcclxuXHJcblx0dmFyIGJhaWR1ID0gd2luZG93LmJhaWR1IHx8IHt9O1xyXG5cclxuXHR3aW5kb3cuYmFpZHUgPSBiYWlkdTtcclxuXHJcblx0d2luZG93LlVFID0gYmFpZHUuZWRpdG9yID0gIHdpbmRvdy5VRSB8fCB7fTtcclxuXHJcblx0VUUucGx1Z2lucyA9IHt9O1xyXG5cclxuXHRVRS5jb21tYW5kcyA9IHt9O1xyXG5cclxuXHRVRS5pbnN0YW50cyA9IHt9O1xyXG5cclxuXHRVRS5JMThOID0ge307XHJcblxyXG5cdFVFLl9jdXN0b21pemVVSSA9IHt9O1xyXG5cclxuXHRVRS52ZXJzaW9uID0gXCIxLjQuM1wiO1xyXG5cclxuXHR2YXIgZG9tID0gVUUuZG9tID0ge307XHJcblxyXG5cdC8vIGNvcmUvYnJvd3Nlci5qc1xyXG5cdC8qKlxyXG5cdCAqIOa1j+iniOWZqOWIpOaWreaooeWdl1xyXG5cdCAqIEBmaWxlXHJcblx0ICogQG1vZHVsZSBVRS5icm93c2VyXHJcblx0ICogQHNpbmNlIDEuMi42LjFcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog5o+Q5L6b5rWP6KeI5Zmo5qOA5rWL55qE5qih5Z2XXHJcblx0ICogQHVuZmlsZVxyXG5cdCAqIEBtb2R1bGUgVUUuYnJvd3NlclxyXG5cdCAqL1xyXG5cdHZhciBicm93c2VyID0gVUUuYnJvd3NlciA9IGZ1bmN0aW9uKCl7XHJcblx0ICAgIHZhciBhZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSxcclxuXHQgICAgICAgIG9wZXJhID0gd2luZG93Lm9wZXJhLFxyXG5cdCAgICAgICAgYnJvd3NlciA9IHtcclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtib29sZWFufSBpZSDmo4DmtYvlvZPliY3mtY/op4jlmajmmK/lkKbkuLpJRVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGlmICggVUUuYnJvd3Nlci5pZSApIHtcclxuXHQgICAgICAgICAqICAgICBjb25zb2xlLmxvZyggJ+W9k+WJjea1j+iniOWZqOaYr0lFJyApO1xyXG5cdCAgICAgICAgICogfVxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGllXHRcdDogIC8obXNpZVxcc3x0cmlkZW50LipydjopKFtcXHcuXSspLy50ZXN0KGFnZW50KSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gb3BlcmEg5qOA5rWL5b2T5YmN5rWP6KeI5Zmo5piv5ZCm5Li6T3BlcmFcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBpZiAoIFVFLmJyb3dzZXIub3BlcmEgKSB7XHJcblx0ICAgICAgICAgKiAgICAgY29uc29sZS5sb2coICflvZPliY3mtY/op4jlmajmmK9PcGVyYScgKTtcclxuXHQgICAgICAgICAqIH1cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBvcGVyYVx0OiAoICEhb3BlcmEgJiYgb3BlcmEudmVyc2lvbiApLFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtib29sZWFufSB3ZWJraXQg5qOA5rWL5b2T5YmN5rWP6KeI5Zmo5piv5ZCm5pivd2Via2l05YaF5qC455qE5rWP6KeI5ZmoXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogaWYgKCBVRS5icm93c2VyLndlYmtpdCApIHtcclxuXHQgICAgICAgICAqICAgICBjb25zb2xlLmxvZyggJ+W9k+WJjea1j+iniOWZqOaYr3dlYmtpdOWGheaguOa1j+iniOWZqCcgKTtcclxuXHQgICAgICAgICAqIH1cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICB3ZWJraXRcdDogKCBhZ2VudC5pbmRleE9mKCAnIGFwcGxld2Via2l0LycgKSA+IC0xICksXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IG1hYyDmo4DmtYvlvZPliY3mtY/op4jlmajmmK/lkKbmmK/ov5DooYzlnKhtYWPlubPlj7DkuItcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBpZiAoIFVFLmJyb3dzZXIubWFjICkge1xyXG5cdCAgICAgICAgICogICAgIGNvbnNvbGUubG9nKCAn5b2T5YmN5rWP6KeI5Zmo6L+Q6KGM5ZyobWFj5bmz5Y+w5LiLJyApO1xyXG5cdCAgICAgICAgICogfVxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIG1hY1x0OiAoIGFnZW50LmluZGV4T2YoICdtYWNpbnRvc2gnICkgPiAtMSApLFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICogQHByb3BlcnR5IHtib29sZWFufSBxdWlya3Mg5qOA5rWL5b2T5YmN5rWP6KeI5Zmo5piv5ZCm5aSE5LqO4oCc5oCq5byC5qih5byP4oCd5LiLXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogaWYgKCBVRS5icm93c2VyLnF1aXJrcyApIHtcclxuXHQgICAgICAgICAqICAgICBjb25zb2xlLmxvZyggJ+W9k+WJjea1j+iniOWZqOi/kOihjOWkhOS6juKAnOaAquW8guaooeW8j+KAnScgKTtcclxuXHQgICAgICAgICAqIH1cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBxdWlya3MgOiAoIGRvY3VtZW50LmNvbXBhdE1vZGUgPT0gJ0JhY2tDb21wYXQnIClcclxuXHQgICAgfTtcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZ2Vja28g5qOA5rWL5b2T5YmN5rWP6KeI5Zmo5YaF5qC45piv5ZCm5pivZ2Vja2/lhoXmoLhcclxuXHQgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgKiBpZiAoIFVFLmJyb3dzZXIuZ2Vja28gKSB7XHJcblx0ICAgICogICAgIGNvbnNvbGUubG9nKCAn5b2T5YmN5rWP6KeI5Zmo5YaF5qC45pivZ2Vja2/lhoXmoLgnICk7XHJcblx0ICAgICogfVxyXG5cdCAgICAqIGBgYFxyXG5cdCAgICAqL1xyXG5cdCAgICBicm93c2VyLmdlY2tvID0oIG5hdmlnYXRvci5wcm9kdWN0ID09ICdHZWNrbycgJiYgIWJyb3dzZXIud2Via2l0ICYmICFicm93c2VyLm9wZXJhICYmICFicm93c2VyLmllKTtcclxuXHJcblx0ICAgIHZhciB2ZXJzaW9uID0gMDtcclxuXHJcblx0ICAgIC8vIEludGVybmV0IEV4cGxvcmVyIDYuMCtcclxuXHQgICAgaWYgKCBicm93c2VyLmllICl7XHJcblxyXG5cdCAgICAgICAgdmFyIHYxID0gIGFnZW50Lm1hdGNoKC8oPzptc2llXFxzKFtcXHcuXSspKS8pO1xyXG5cdCAgICAgICAgdmFyIHYyID0gYWdlbnQubWF0Y2goLyg/OnRyaWRlbnQuKnJ2OihbXFx3Ll0rKSkvKTtcclxuXHQgICAgICAgIGlmKHYxICYmIHYyICYmIHYxWzFdICYmIHYyWzFdKXtcclxuXHQgICAgICAgICAgICB2ZXJzaW9uID0gTWF0aC5tYXgodjFbMV0qMSx2MlsxXSoxKTtcclxuXHQgICAgICAgIH1lbHNlIGlmKHYxICYmIHYxWzFdKXtcclxuXHQgICAgICAgICAgICB2ZXJzaW9uID0gdjFbMV0qMTtcclxuXHQgICAgICAgIH1lbHNlIGlmKHYyICYmIHYyWzFdKXtcclxuXHQgICAgICAgICAgICB2ZXJzaW9uID0gdjJbMV0qMTtcclxuXHQgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgIHZlcnNpb24gPSAwO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIGJyb3dzZXIuaWUxMUNvbXBhdCA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSA9PSAxMTtcclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICogQHByb3BlcnR5IHsgYm9vbGVhbiB9IGllOUNvbXBhdCDmo4DmtYvmtY/op4jlmajmqKHlvI/mmK/lkKbkuLogSUU5IOWFvOWuueaooeW8j1xyXG5cdCAgICAgICAgICogQHdhcm5pbmcg5aaC5p6c5rWP6KeI5Zmo5LiN5pivSUXvvIwg5YiZ6K+l5YC85Li6dW5kZWZpbmVkXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogaWYgKCBVRS5icm93c2VyLmllOUNvbXBhdCApIHtcclxuXHQgICAgICAgICAqICAgICBjb25zb2xlLmxvZyggJ+W9k+WJjea1j+iniOWZqOi/kOihjOWcqElFOeWFvOWuueaooeW8j+S4iycgKTtcclxuXHQgICAgICAgICAqIH1cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBicm93c2VyLmllOUNvbXBhdCA9IGRvY3VtZW50LmRvY3VtZW50TW9kZSA9PSA5O1xyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICogQHByb3BlcnR5IHsgYm9vbGVhbiB9IGllOCDmo4DmtYvmtY/op4jlmajmmK/lkKbmmK9JRTjmtY/op4jlmahcclxuXHQgICAgICAgICAqIEB3YXJuaW5nIOWmguaenOa1j+iniOWZqOS4jeaYr0lF77yMIOWImeivpeWAvOS4unVuZGVmaW5lZFxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGlmICggVUUuYnJvd3Nlci5pZTggKSB7XHJcblx0ICAgICAgICAgKiAgICAgY29uc29sZS5sb2coICflvZPliY3mtY/op4jlmajmmK9JRTjmtY/op4jlmagnICk7XHJcblx0ICAgICAgICAgKiB9XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgYnJvd3Nlci5pZTggPSAhIWRvY3VtZW50LmRvY3VtZW50TW9kZTtcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7IGJvb2xlYW4gfSBpZThDb21wYXQg5qOA5rWL5rWP6KeI5Zmo5qih5byP5piv5ZCm5Li6IElFOCDlhbzlrrnmqKHlvI9cclxuXHQgICAgICAgICAqIEB3YXJuaW5nIOWmguaenOa1j+iniOWZqOS4jeaYr0lF77yMIOWImeivpeWAvOS4unVuZGVmaW5lZFxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGlmICggVUUuYnJvd3Nlci5pZThDb21wYXQgKSB7XHJcblx0ICAgICAgICAgKiAgICAgY29uc29sZS5sb2coICflvZPliY3mtY/op4jlmajov5DooYzlnKhJRTjlhbzlrrnmqKHlvI/kuIsnICk7XHJcblx0ICAgICAgICAgKiB9XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgYnJvd3Nlci5pZThDb21wYXQgPSBkb2N1bWVudC5kb2N1bWVudE1vZGUgPT0gODtcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIEBwcm9wZXJ0eSB7IGJvb2xlYW4gfSBpZTdDb21wYXQg5qOA5rWL5rWP6KeI5Zmo5qih5byP5piv5ZCm5Li6IElFNyDlhbzlrrnmqKHlvI9cclxuXHQgICAgICAgICAqIEB3YXJuaW5nIOWmguaenOa1j+iniOWZqOS4jeaYr0lF77yMIOWImeivpeWAvOS4unVuZGVmaW5lZFxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGlmICggVUUuYnJvd3Nlci5pZTdDb21wYXQgKSB7XHJcblx0ICAgICAgICAgKiAgICAgY29uc29sZS5sb2coICflvZPliY3mtY/op4jlmajov5DooYzlnKhJRTflhbzlrrnmqKHlvI/kuIsnICk7XHJcblx0ICAgICAgICAgKiB9XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgYnJvd3Nlci5pZTdDb21wYXQgPSAoICggdmVyc2lvbiA9PSA3ICYmICFkb2N1bWVudC5kb2N1bWVudE1vZGUgKVxyXG5cdCAgICAgICAgICAgICAgICB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPT0gNyApO1xyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICogQHByb3BlcnR5IHsgYm9vbGVhbiB9IGllNkNvbXBhdCDmo4DmtYvmtY/op4jlmajmqKHlvI/mmK/lkKbkuLogSUU2IOaooeW8jyDmiJbogIXmgKrlvILmqKHlvI9cclxuXHQgICAgICAgICAqIEB3YXJuaW5nIOWmguaenOa1j+iniOWZqOS4jeaYr0lF77yMIOWImeivpeWAvOS4unVuZGVmaW5lZFxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGlmICggVUUuYnJvd3Nlci5pZTZDb21wYXQgKSB7XHJcblx0ICAgICAgICAgKiAgICAgY29uc29sZS5sb2coICflvZPliY3mtY/op4jlmajov5DooYzlnKhJRTbmqKHlvI/miJbogIXmgKrlvILmqKHlvI/kuIsnICk7XHJcblx0ICAgICAgICAgKiB9XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgYnJvd3Nlci5pZTZDb21wYXQgPSAoIHZlcnNpb24gPCA3IHx8IGJyb3dzZXIucXVpcmtzICk7XHJcblxyXG5cdCAgICAgICAgYnJvd3Nlci5pZTlhYm92ZSA9IHZlcnNpb24gPiA4O1xyXG5cclxuXHQgICAgICAgIGJyb3dzZXIuaWU5YmVsb3cgPSB2ZXJzaW9uIDwgOTtcclxuXHJcblx0ICAgICAgICBicm93c2VyLmllMTFhYm92ZSA9IHZlcnNpb24gPiAxMDtcclxuXHJcblx0ICAgICAgICBicm93c2VyLmllMTFiZWxvdyA9IHZlcnNpb24gPCAxMTtcclxuXHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8vIEdlY2tvLlxyXG5cdCAgICBpZiAoIGJyb3dzZXIuZ2Vja28gKXtcclxuXHQgICAgICAgIHZhciBnZWNrb1JlbGVhc2UgPSBhZ2VudC5tYXRjaCggL3J2OihbXFxkXFwuXSspLyApO1xyXG5cdCAgICAgICAgaWYgKCBnZWNrb1JlbGVhc2UgKVxyXG5cdCAgICAgICAge1xyXG5cdCAgICAgICAgICAgIGdlY2tvUmVsZWFzZSA9IGdlY2tvUmVsZWFzZVsxXS5zcGxpdCggJy4nICk7XHJcblx0ICAgICAgICAgICAgdmVyc2lvbiA9IGdlY2tvUmVsZWFzZVswXSAqIDEwMDAwICsgKCBnZWNrb1JlbGVhc2VbMV0gfHwgMCApICogMTAwICsgKCBnZWNrb1JlbGVhc2VbMl0gfHwgMCApICogMTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIEBwcm9wZXJ0eSB7IE51bWJlciB9IGNocm9tZSDmo4DmtYvlvZPliY3mtY/op4jlmajmmK/lkKbkuLpDaHJvbWUsIOWmguaenOaYr++8jOWImei/lOWbnkNocm9tZeeahOWkp+eJiOacrOWPt1xyXG5cdCAgICAgKiBAd2FybmluZyDlpoLmnpzmtY/op4jlmajkuI3mmK9jaHJvbWXvvIwg5YiZ6K+l5YC85Li6dW5kZWZpbmVkXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogaWYgKCBVRS5icm93c2VyLmNocm9tZSApIHtcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCAn5b2T5YmN5rWP6KeI5Zmo5pivQ2hyb21lJyApO1xyXG5cdCAgICAgKiB9XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgaWYgKC9jaHJvbWVcXC8oXFxkK1xcLlxcZCkvaS50ZXN0KGFnZW50KSkge1xyXG5cdCAgICAgICAgYnJvd3Nlci5jaHJvbWUgPSArIFJlZ0V4cFsnXFx4MjQxJ107XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBAcHJvcGVydHkgeyBOdW1iZXIgfSBzYWZhcmkg5qOA5rWL5b2T5YmN5rWP6KeI5Zmo5piv5ZCm5Li6U2FmYXJpLCDlpoLmnpzmmK/vvIzliJnov5Tlm55TYWZhcmnnmoTlpKfniYjmnKzlj7dcclxuXHQgICAgICogQHdhcm5pbmcg5aaC5p6c5rWP6KeI5Zmo5LiN5pivc2FmYXJp77yMIOWImeivpeWAvOS4unVuZGVmaW5lZFxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIGlmICggVUUuYnJvd3Nlci5zYWZhcmkgKSB7XHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggJ+W9k+WJjea1j+iniOWZqOaYr1NhZmFyaScgKTtcclxuXHQgICAgICogfVxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGlmKC8oXFxkK1xcLlxcZCk/KD86XFwuXFxkKT9cXHMrc2FmYXJpXFwvPyhcXGQrXFwuXFxkKyk/L2kudGVzdChhZ2VudCkgJiYgIS9jaHJvbWUvaS50ZXN0KGFnZW50KSl7XHJcblx0ICAgIFx0YnJvd3Nlci5zYWZhcmkgPSArIChSZWdFeHBbJ1xceDI0MSddIHx8IFJlZ0V4cFsnXFx4MjQyJ10pO1xyXG5cdCAgICB9XHJcblxyXG5cclxuXHQgICAgLy8gT3BlcmEgOS41MCtcclxuXHQgICAgaWYgKCBicm93c2VyLm9wZXJhIClcclxuXHQgICAgICAgIHZlcnNpb24gPSBwYXJzZUZsb2F0KCBvcGVyYS52ZXJzaW9uKCkgKTtcclxuXHJcblx0ICAgIC8vIFdlYktpdCA1MjIrIChTYWZhcmkgMyspXHJcblx0ICAgIGlmICggYnJvd3Nlci53ZWJraXQgKVxyXG5cdCAgICAgICAgdmVyc2lvbiA9IHBhcnNlRmxvYXQoIGFnZW50Lm1hdGNoKCAvIGFwcGxld2Via2l0XFwvKFxcZCspLyApWzFdICk7XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICogQHByb3BlcnR5IHsgTnVtYmVyIH0gdmVyc2lvbiDmo4DmtYvlvZPliY3mtY/op4jlmajniYjmnKzlj7dcclxuXHQgICAgICogQHJlbWluZFxyXG5cdCAgICAgKiA8dWw+XHJcblx0ICAgICAqICAgICA8bGk+SUXns7vliJfov5Tlm57lgLzkuLo1LDYsNyw4LDksMTDnrYk8L2xpPlxyXG5cdCAgICAgKiAgICAgPGxpPmdlY2tv57O75YiX5Lya6L+U5ZueMTA5MDDvvIwxNTg5MDDnrYk8L2xpPlxyXG5cdCAgICAgKiAgICAgPGxpPndlYmtpdOezu+WIl+S8mui/lOWbnuWFtmJ1aWxk5Y+3ICjlpoIgNTIy562JKTwvbGk+XHJcblx0ICAgICAqIDwvdWw+XHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogY29uc29sZS5sb2coICflvZPliY3mtY/op4jlmajniYjmnKzlj7fmmK/vvJogJyArIFVFLmJyb3dzZXIudmVyc2lvbiApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICogQHByb3BlcnR5IHsgYm9vbGVhbiB9IGlzQ29tcGF0aWJsZSDmo4DmtYvlvZPliY3mtY/op4jlmajmmK/lkKbog73lpJ/kuI5VRWRpdG9y6Imv5aW95YW85a65XHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogaWYgKCBVRS5icm93c2VyLmlzQ29tcGF0aWJsZSApIHtcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCAn5rWP6KeI5Zmo5LiOVUVkaXRvcuiDveWkn+iJr+WlveWFvOWuuScgKTtcclxuXHQgICAgICogfVxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGJyb3dzZXIuaXNDb21wYXRpYmxlID1cclxuXHQgICAgICAgICFicm93c2VyLm1vYmlsZSAmJiAoXHJcblx0ICAgICAgICAoIGJyb3dzZXIuaWUgJiYgdmVyc2lvbiA+PSA2ICkgfHxcclxuXHQgICAgICAgICggYnJvd3Nlci5nZWNrbyAmJiB2ZXJzaW9uID49IDEwODAxICkgfHxcclxuXHQgICAgICAgICggYnJvd3Nlci5vcGVyYSAmJiB2ZXJzaW9uID49IDkuNSApIHx8XHJcblx0ICAgICAgICAoIGJyb3dzZXIuYWlyICYmIHZlcnNpb24gPj0gMSApIHx8XHJcblx0ICAgICAgICAoIGJyb3dzZXIud2Via2l0ICYmIHZlcnNpb24gPj0gNTIyICkgfHxcclxuXHQgICAgICAgIGZhbHNlICk7XHJcblx0ICAgIHJldHVybiBicm93c2VyO1xyXG5cdH0oKTtcclxuXHQvL+W/q+aNt+aWueW8j1xyXG5cdHZhciBpZSA9IGJyb3dzZXIuaWUsXHJcblx0ICAgIHdlYmtpdCA9IGJyb3dzZXIud2Via2l0LFxyXG5cdCAgICBnZWNrbyA9IGJyb3dzZXIuZ2Vja28sXHJcblx0ICAgIG9wZXJhID0gYnJvd3Nlci5vcGVyYTtcclxuXHJcblx0Ly8gY29yZS91dGlscy5qc1xyXG5cdC8qKlxyXG5cdCAqIOW3peWFt+WHveaVsOWMhVxyXG5cdCAqIEBmaWxlXHJcblx0ICogQG1vZHVsZSBVRS51dGlsc1xyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIFVFZGl0b3LlsIHoo4Xkvb/nlKjnmoTpnZnmgIHlt6Xlhbflh73mlbBcclxuXHQgKiBAbW9kdWxlIFVFLnV0aWxzXHJcblx0ICogQHVuZmlsZVxyXG5cdCAqL1xyXG5cclxuXHR2YXIgdXRpbHMgPSBVRS51dGlscyA9IHtcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDnlKjnu5nlrprnmoTov63ku6PlmajpgY3ljoblr7nosaFcclxuXHQgICAgICogQG1ldGhvZCBlYWNoXHJcblx0ICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IG9iaiDpnIDopoHpgY3ljobnmoTlr7nosaFcclxuXHQgICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBpdGVyYXRvciDov63ku6PlmajvvIwg6K+l5pa55rOV5o6l5Y+X5Lik5Liq5Y+C5pWw77yMIOesrOS4gOS4quWPguaVsOaYr+W9k+WJjeaJgOWkhOeQhueahHZhbHVl77yMIOesrOS6jOS4quWPguaVsOaYr+W9k+WJjemBjeWOhuWvueixoeeahGtleVxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIHZhciBkZW1vT2JqID0ge1xyXG5cdCAgICAgKiAgICAga2V5MTogMSxcclxuXHQgICAgICogICAgIGtleTI6IDJcclxuXHQgICAgICogfTtcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IGtleTE6IDEsIGtleTI6IDJcclxuXHQgICAgICogVUUudXRpbHMuZWFjaCggZGVtb09iaiwgZnVuY2l0b24gKCB2YWx1ZSwga2V5ICkge1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIGtleSArIFwiOlwiICsgdmFsdWUgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogfSApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog55So57uZ5a6a55qE6L+t5Luj5Zmo6YGN5Y6G5pWw57uE5oiW57G75pWw57uE5a+56LGhXHJcblx0ICAgICAqIEBtZXRob2QgZWFjaFxyXG5cdCAgICAgKiBAcGFyYW0geyBBcnJheSB9IGFycmF5IOmcgOimgemBjeWOhueahOaVsOe7hOaIluiAheexu+aVsOe7hFxyXG5cdCAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGl0ZXJhdG9yIOi/reS7o+WZqO+8jCDor6Xmlrnms5XmjqXlj5fkuKTkuKrlj4LmlbDvvIwg56ys5LiA5Liq5Y+C5pWw5piv5b2T5YmN5omA5aSE55CG55qEdmFsdWXvvIwg56ys5LqM5Liq5Y+C5pWw5piv5b2T5YmN6YGN5Y6G5a+56LGh55qEa2V5XHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogdmFyIGRpdnMgPSBkb2N1bWVudC5nZXRFbG1lbnRCeVRhZ05hbWVzKCBcImRpdlwiICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vb3V0cHV0OiAwOiBESVYsIDE6IERJViAuLi5cclxuXHQgICAgICogVUUudXRpbHMuZWFjaCggZGl2cywgZnVuY2l0b24gKCB2YWx1ZSwga2V5ICkge1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIGtleSArIFwiOlwiICsgdmFsdWUudGFnTmFtZSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiB9ICk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgZWFjaCA6IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcclxuXHQgICAgICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuO1xyXG5cdCAgICAgICAgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2ldLCBpLCBvYmopID09PSBmYWxzZSlcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtrZXldLCBrZXksIG9iaikgPT09IGZhbHNlKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDku6Xnu5nlrprlr7nosaHkvZzkuLrljp/lnovliJvlu7rkuIDkuKrmlrDlr7nosaFcclxuXHQgICAgICogQG1ldGhvZCBtYWtlSW5zdGFuY2VcclxuXHQgICAgICogQHBhcmFtIHsgT2JqZWN0IH0gcHJvdG9PYmplY3Qg6K+l5a+56LGh5bCG5L2c5Li65paw5Yib5bu65a+56LGh55qE5Y6f5Z6LXHJcblx0ICAgICAqIEByZXR1cm4geyBPYmplY3QgfSDmlrDnmoTlr7nosaHvvIwg6K+l5a+56LGh55qE5Y6f5Z6L5piv57uZ5a6a55qEcHJvdG9PYmplY3Tlr7nosaFcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiB2YXIgcHJvdG9PYmplY3QgPSB7IHNheUhlbGxvOiBmdW5jdGlvbiAoKSB7IGNvbnNvbGUubG9nKCdIZWxsbyBVRWRpdG9yIScpOyB9IH07XHJcblx0ICAgICAqXHJcblx0ICAgICAqIHZhciBuZXdPYmplY3QgPSBVRS51dGlscy5tYWtlSW5zdGFuY2UoIHByb3RvT2JqZWN0ICk7XHJcblx0ICAgICAqIC8vb3V0cHV0OiBIZWxsbyBVRWRpdG9yIVxyXG5cdCAgICAgKiBuZXdPYmplY3Quc2F5SGVsbG8oKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBtYWtlSW5zdGFuY2U6ZnVuY3Rpb24gKG9iaikge1xyXG5cdCAgICAgICAgdmFyIG5vb3AgPSBuZXcgRnVuY3Rpb24oKTtcclxuXHQgICAgICAgIG5vb3AucHJvdG90eXBlID0gb2JqO1xyXG5cdCAgICAgICAgb2JqID0gbmV3IG5vb3A7XHJcblx0ICAgICAgICBub29wLnByb3RvdHlwZSA9IG51bGw7XHJcblx0ICAgICAgICByZXR1cm4gb2JqO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWwhnNvdXJjZeWvueixoeS4reeahOWxnuaAp+aJqeWxleWIsHRhcmdldOWvueixoeS4ilxyXG5cdCAgICAgKiBAbWV0aG9kIGV4dGVuZFxyXG5cdCAgICAgKiBAcmVtaW5kIOivpeaWueazleWwhuW8uuWItuaKinNvdXJjZeWvueixoeS4iueahOWxnuaAp+WkjeWItuWIsHRhcmdldOWvueixoeS4ilxyXG5cdCAgICAgKiBAc2VlIFVFLnV0aWxzLmV4dGVuZChPYmplY3QsT2JqZWN0LEJvb2xlYW4pXHJcblx0ICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IHRhcmdldCDnm67moIflr7nosaHvvIwg5paw55qE5bGe5oCn5bCG6ZmE5Yqg5Yiw6K+l5a+56LGh5LiKXHJcblx0ICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IHNvdXJjZSDmupDlr7nosaHvvIwg6K+l5a+56LGh55qE5bGe5oCn5Lya6KKr6ZmE5Yqg5YiwdGFyZ2V05a+56LGh5LiKXHJcblx0ICAgICAqIEByZXR1cm4geyBPYmplY3QgfSDov5Tlm550YXJnZXTlr7nosaFcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiB2YXIgdGFyZ2V0ID0geyBuYW1lOiAndGFyZ2V0Jywgc2V4OiAxIH0sXHJcblx0ICAgICAqICAgICAgc291cmNlID0geyBuYW1lOiAnc291cmNlJywgYWdlOiAxNyB9O1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBVRS51dGlscy5leHRlbmQoIHRhcmdldCwgc291cmNlICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vb3V0cHV0OiB7IG5hbWU6ICdzb3VyY2UnLCBzZXg6IDEsIGFnZTogMTcgfVxyXG5cdCAgICAgKiBjb25zb2xlLmxvZyggdGFyZ2V0ICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDlsIZzb3VyY2Xlr7nosaHkuK3nmoTlsZ7mgKfmianlsZXliLB0YXJnZXTlr7nosaHkuIrvvIwg5qC55o2u5oyH5a6a55qEaXNLZWVwVGFyZ2V05YC85Yaz5a6a5piv5ZCm5L+d55WZ55uu5qCH5a+56LGh5Lit5LiOXHJcblx0ICAgICAqIOa6kOWvueixoeWxnuaAp+WQjeebuOWQjOeahOWxnuaAp+WAvOOAglxyXG5cdCAgICAgKiBAbWV0aG9kIGV4dGVuZFxyXG5cdCAgICAgKiBAcGFyYW0geyBPYmplY3QgfSB0YXJnZXQg55uu5qCH5a+56LGh77yMIOaWsOeahOWxnuaAp+WwhumZhOWKoOWIsOivpeWvueixoeS4ilxyXG5cdCAgICAgKiBAcGFyYW0geyBPYmplY3QgfSBzb3VyY2Ug5rqQ5a+56LGh77yMIOivpeWvueixoeeahOWxnuaAp+S8muiiq+mZhOWKoOWIsHRhcmdldOWvueixoeS4ilxyXG5cdCAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gaXNLZWVwVGFyZ2V0IOaYr+WQpuS/neeVmeebruagh+WvueixoeS4reS4jua6kOWvueixoeS4reWxnuaAp+WQjeebuOWQjOeahOWxnuaAp1xyXG5cdCAgICAgKiBAcmV0dXJuIHsgT2JqZWN0IH0g6L+U5ZuedGFyZ2V05a+56LGhXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogdmFyIHRhcmdldCA9IHsgbmFtZTogJ3RhcmdldCcsIHNleDogMSB9LFxyXG5cdCAgICAgKiAgICAgIHNvdXJjZSA9IHsgbmFtZTogJ3NvdXJjZScsIGFnZTogMTcgfTtcclxuXHQgICAgICpcclxuXHQgICAgICogVUUudXRpbHMuZXh0ZW5kKCB0YXJnZXQsIHNvdXJjZSwgdHJ1ZSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL291dHB1dDogeyBuYW1lOiAndGFyZ2V0Jywgc2V4OiAxLCBhZ2U6IDE3IH1cclxuXHQgICAgICogY29uc29sZS5sb2coIHRhcmdldCApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGV4dGVuZDpmdW5jdGlvbiAodCwgcywgYikge1xyXG5cdCAgICAgICAgaWYgKHMpIHtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBrIGluIHMpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCFiIHx8ICF0Lmhhc093blByb3BlcnR5KGspKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0W2tdID0gc1trXTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0O1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWwhue7meWumueahOWkmuS4quWvueixoeeahOWxnuaAp+WkjeWItuWIsOebruagh+WvueixoXRhcmdldOS4ilxyXG5cdCAgICAgKiBAbWV0aG9kIGV4dGVuZDJcclxuXHQgICAgICogQHJlbWluZCDor6Xmlrnms5XlsIblvLrliLbmiormupDlr7nosaHkuIrnmoTlsZ7mgKflpI3liLbliLB0YXJnZXTlr7nosaHkuIpcclxuXHQgICAgICogQHJlbWluZCDor6Xmlrnms5XmlK/mjIHkuKTkuKrlj4rku6XkuIrnmoTlj4LmlbDvvIwg5LuO56ys5LqM5Liq5Y+C5pWw5byA5aeL77yMIOWFtuWxnuaAp+mDveS8muiiq+WkjeWItuWIsOesrOS4gOS4quWPguaVsOS4iuOAgiDlpoLmnpzpgYfliLDlkIzlkI3nmoTlsZ7mgKfvvIxcclxuXHQgICAgICogICAgICAgICAg5bCG5Lya6KaG55uW5o6J5LmL5YmN55qE5YC844CCXHJcblx0ICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IHRhcmdldCDnm67moIflr7nosaHvvIwg5paw55qE5bGe5oCn5bCG6ZmE5Yqg5Yiw6K+l5a+56LGh5LiKXHJcblx0ICAgICAqIEBwYXJhbSB7IE9iamVjdC4uLiB9IHNvdXJjZSDmupDlr7nosaHvvIwg5pSv5oyB5aSa5Liq5a+56LGh77yMIOivpeWvueixoeeahOWxnuaAp+S8muiiq+mZhOWKoOWIsHRhcmdldOWvueixoeS4ilxyXG5cdCAgICAgKiBAcmV0dXJuIHsgT2JqZWN0IH0g6L+U5ZuedGFyZ2V05a+56LGhXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogdmFyIHRhcmdldCA9IHt9LFxyXG5cdCAgICAgKiAgICAgc291cmNlMSA9IHsgbmFtZTogJ3NvdXJjZScsIGFnZTogMTcgfSxcclxuXHQgICAgICogICAgIHNvdXJjZTIgPSB7IHRpdGxlOiAnZGV2JyB9O1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBVRS51dGlscy5leHRlbmQyKCB0YXJnZXQsIHNvdXJjZTEsIHNvdXJjZTIgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IHsgbmFtZTogJ3NvdXJjZScsIGFnZTogMTcsIHRpdGxlOiAnZGV2JyB9XHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCB0YXJnZXQgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBleHRlbmQyOmZ1bmN0aW9uICh0KSB7XHJcblx0ICAgICAgICB2YXIgYSA9IGFyZ3VtZW50cztcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYS5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgIHZhciB4ID0gYVtpXTtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBrIGluIHgpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCF0Lmhhc093blByb3BlcnR5KGspKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0W2tdID0geFtrXTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0O1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOaooeaLn+e7p+aJv+acuuWItu+8jCDkvb/lvpdzdWJDbGFzc+e7p+aJv+iHqnN1cGVyQ2xhc3NcclxuXHQgICAgICogQG1ldGhvZCBpbmhlcml0c1xyXG5cdCAgICAgKiBAcGFyYW0geyBPYmplY3QgfSBzdWJDbGFzcyDlrZDnsbvlr7nosaFcclxuXHQgICAgICogQHBhcmFtIHsgT2JqZWN0IH0gc3VwZXJDbGFzcyDotoXnsbvlr7nosaFcclxuXHQgICAgICogQHdhcm5pbmcg6K+l5pa55rOV5Y+q6IO96K6pc3ViQ2xhc3Pnu6fmib/otoXnsbvnmoTljp/lnovvvIwgc3ViQ2xhc3Plr7nosaHoh6rouqvnmoTlsZ7mgKflkozmlrnms5XkuI3kvJrooqvnu6fmib9cclxuXHQgICAgICogQHJldHVybiB7IE9iamVjdCB9IOe7p+aJv3N1cGVyQ2xhc3PlkI7nmoTlrZDnsbvlr7nosaFcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBmdW5jdGlvbiBTdXBlckNsYXNzKCl7XHJcblx0ICAgICAqICAgICB0aGlzLm5hbWUgPSBcIuWwj+adjlwiO1xyXG5cdCAgICAgKiB9XHJcblx0ICAgICAqXHJcblx0ICAgICAqIFN1cGVyQ2xhc3MucHJvdG90eXBlID0ge1xyXG5cdCAgICAgKiAgICAgaGVsbG86ZnVuY3Rpb24oc3RyKXtcclxuXHQgICAgICogICAgICAgICBjb25zb2xlLmxvZyh0aGlzLm5hbWUgKyBzdHIpO1xyXG5cdCAgICAgKiAgICAgfVxyXG5cdCAgICAgKiB9XHJcblx0ICAgICAqXHJcblx0ICAgICAqIGZ1bmN0aW9uIFN1YkNsYXNzKCl7XHJcblx0ICAgICAqICAgICB0aGlzLm5hbWUgPSBcIuWwj+W8oFwiO1xyXG5cdCAgICAgKiB9XHJcblx0ICAgICAqXHJcblx0ICAgICAqIFVFLnV0aWxzLmluaGVyaXRzKFN1YkNsYXNzLFN1cGVyQ2xhc3MpO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiB2YXIgc3ViID0gbmV3IFN1YkNsYXNzKCk7XHJcblx0ICAgICAqIC8vb3V0cHV0OiAn5bCP5byg5pep5LiK5aW9IVxyXG5cdCAgICAgKiBzdWIuaGVsbG8oXCLml6nkuIrlpb0hXCIpO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGluaGVyaXRzOmZ1bmN0aW9uIChzdWJDbGFzcywgc3VwZXJDbGFzcykge1xyXG5cdCAgICAgICAgdmFyIG9sZFAgPSBzdWJDbGFzcy5wcm90b3R5cGUsXHJcblx0ICAgICAgICAgICAgbmV3UCA9IHV0aWxzLm1ha2VJbnN0YW5jZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XHJcblx0ICAgICAgICB1dGlscy5leHRlbmQobmV3UCwgb2xkUCwgdHJ1ZSk7XHJcblx0ICAgICAgICBzdWJDbGFzcy5wcm90b3R5cGUgPSBuZXdQO1xyXG5cdCAgICAgICAgcmV0dXJuIChuZXdQLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3MpO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOeUqOaMh+WumueahGNvbnRleHTlr7nosaHkvZzkuLrlh73mlbBmbueahOS4iuS4i+aWh1xyXG5cdCAgICAgKiBAbWV0aG9kIGJpbmRcclxuXHQgICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBmbiDpnIDopoHnu5HlrprkuIrkuIvmlofnmoTlh73mlbDlr7nosaFcclxuXHQgICAgICogQHBhcmFtIHsgT2JqZWN0IH0gY29udGVudCDlh73mlbBmbuaWsOeahOS4iuS4i+aWh+WvueixoVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgRnVuY3Rpb24gfSDkuIDkuKrmlrDnmoTlh73mlbDvvIwg6K+l5Ye95pWw5L2c5Li65Y6f5aeL5Ye95pWwZm7nmoTku6PnkIbvvIwg5bCG5a6M5oiQZm7nmoTkuIrkuIvmlofosIPmjaLlt6XkvZzjgIJcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiB2YXIgbmFtZSA9ICd3aW5kb3cnLFxyXG5cdCAgICAgKiAgICAgbmV3VGVzdCA9IG51bGw7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIGZ1bmN0aW9uIHRlc3QgKCkge1xyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIHRoaXMubmFtZSApO1xyXG5cdCAgICAgKiB9XHJcblx0ICAgICAqXHJcblx0ICAgICAqIG5ld1Rlc3QgPSBVRS51dGlscy5iaW5kKCB0ZXN0LCB7IG5hbWU6ICdvYmplY3QnIH0gKTtcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IG9iamVjdFxyXG5cdCAgICAgKiBuZXdUZXN0KCk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vb3V0cHV0OiB3aW5kb3dcclxuXHQgICAgICogdGVzdCgpO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGJpbmQ6ZnVuY3Rpb24gKGZuLCBjb250ZXh0KSB7XHJcblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBmbi5hcHBseShjb250ZXh0LCBhcmd1bWVudHMpO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDliJvlu7rlu7bov5/mjIflrprml7bpl7TlkI7miafooYznmoTlh73mlbBmblxyXG5cdCAgICAgKiBAbWV0aG9kIGRlZmVyXHJcblx0ICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZm4g6ZyA6KaB5bu26L+f5omn6KGM55qE5Ye95pWw5a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7IGludCB9IGRlbGF5IOW7tui/n+eahOaXtumXtO+8jCDljZXkvY3mmK/mr6vnp5JcclxuXHQgICAgICogQHdhcm5pbmcg6K+l5pa55rOV55qE5pe26Ze05o6n5Yi25piv5LiN57K+56Gu55qE77yM5LuF5LuF5Y+q6IO95L+d6K+B5Ye95pWw55qE5omn6KGM5piv5Zyo57uZ5a6a55qE5pe26Ze05LmL5ZCO77yMXHJcblx0ICAgICAqICAgICAgICAgICDogIzkuI3og73kv53or4HliJrlpb3liLDovr7lu7bov5/ml7bpl7Tml7bmiafooYzjgIJcclxuXHQgICAgICogQHJldHVybiB7IEZ1bmN0aW9uIH0g55uu5qCH5Ye95pWwZm7nmoTku6PnkIblh73mlbDvvIwg5Y+q5pyJ5omn6KGM6K+l5Ye95pWw5omN6IO96LW35Yiw5bu25pe25pWI5p6cXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogdmFyIHN0YXJ0ID0gMDtcclxuXHQgICAgICpcclxuXHQgICAgICogZnVuY3Rpb24gdGVzdCgpe1xyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIG5ldyBEYXRlKCkgLSBzdGFydCApO1xyXG5cdCAgICAgKiB9XHJcblx0ICAgICAqXHJcblx0ICAgICAqIHZhciB0ZXN0RGVmZXIgPSBVRS51dGlscy5kZWZlciggdGVzdCwgMTAwMCApO1xyXG5cdCAgICAgKiAvL1xyXG5cdCAgICAgKiBzdGFydCA9IG5ldyBEYXRlKCk7XHJcblx0ICAgICAqIC8vb3V0cHV0OiAo5aSn57qm5ZyoMTAwMOavq+enkuS5i+WQjui+k+WHuikgMTAwMFxyXG5cdCAgICAgKiB0ZXN0RGVmZXIoKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWIm+W7uuW7tui/n+aMh+WumuaXtumXtOWQjuaJp+ihjOeahOWHveaVsGZuLCDlpoLmnpzlnKjlu7bov5/ml7bpl7TlhoXlho3mrKHmiafooYzor6Xmlrnms5XvvIwg5bCG5Lya5qC55o2u5oyH5a6a55qEZXhjbHVzaW9u55qE5YC877yMXHJcblx0ICAgICAqIOWGs+WumuaYr+WQpuWPlua2iOWJjeS4gOasoeWHveaVsOeahOaJp+ihjO+8jCDlpoLmnpxleGNsdXNpb27nmoTlgLzkuLp0cnVl77yMIOWImeWPlua2iOaJp+ihjO+8jOWPjeS5i++8jOWwhue7p+e7reaJp+ihjOWJjeS4gOS4quaWueazleOAglxyXG5cdCAgICAgKiBAbWV0aG9kIGRlZmVyXHJcblx0ICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZm4g6ZyA6KaB5bu26L+f5omn6KGM55qE5Ye95pWw5a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7IGludCB9IGRlbGF5IOW7tui/n+eahOaXtumXtO+8jCDljZXkvY3mmK/mr6vnp5JcclxuXHQgICAgICogQHBhcmFtIHsgQm9vbGVhbiB9IGV4Y2x1c2lvbiDlpoLmnpzlnKjlu7bov5/ml7bpl7TlhoXlho3mrKHmiafooYzor6Xlh73mlbDvvIzor6XlgLzlsIblhrPlrprmmK/lkKblj5bmtojmiafooYzliY3kuIDmrKHlh73mlbDnmoTmiafooYzvvIxcclxuXHQgICAgICogICAgICAgICAgICAgICAgICAgICDlgLzkuLp0cnVl6KGo56S65Y+W5raI5omn6KGM77yMIOWPjeS5i+WImeWwhuWcqOaJp+ihjOWJjeS4gOasoeWHveaVsOS5i+WQjuaJjeaJp+ihjOacrOasoeWHveaVsOiwg+eUqOOAglxyXG5cdCAgICAgKiBAd2FybmluZyDor6Xmlrnms5XnmoTml7bpl7TmjqfliLbmmK/kuI3nsr7noa7nmoTvvIzku4Xku4Xlj6rog73kv53or4Hlh73mlbDnmoTmiafooYzmmK/lnKjnu5nlrprnmoTml7bpl7TkuYvlkI7vvIxcclxuXHQgICAgICogICAgICAgICAgIOiAjOS4jeiDveS/neivgeWImuWlveWIsOi+vuW7tui/n+aXtumXtOaXtuaJp+ihjOOAglxyXG5cdCAgICAgKiBAcmV0dXJuIHsgRnVuY3Rpb24gfSDnm67moIflh73mlbBmbueahOS7o+eQhuWHveaVsO+8jCDlj6rmnInmiafooYzor6Xlh73mlbDmiY3og73otbfliLDlu7bml7bmlYjmnpxcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBmdW5jdGlvbiB0ZXN0KCl7XHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZygxKTtcclxuXHQgICAgICogfVxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiB2YXIgdGVzdERlZmVyID0gVUUudXRpbHMuZGVmZXIoIHRlc3QsIDEwMDAsIHRydWUgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6ICjkuKTmrKHosIPnlKjku4XmnInkuIDmrKHovpPlh7opIDFcclxuXHQgICAgICogdGVzdERlZmVyKCk7XHJcblx0ICAgICAqIHRlc3REZWZlcigpO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGRlZmVyOmZ1bmN0aW9uIChmbiwgZGVsYXksIGV4Y2x1c2lvbikge1xyXG5cdCAgICAgICAgdmFyIHRpbWVySUQ7XHJcblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGlmIChleGNsdXNpb24pIHtcclxuXHQgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySUQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0aW1lcklEID0gc2V0VGltZW91dChmbiwgZGVsYXkpO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDojrflj5blhYPntKBpdGVt5Zyo5pWw57uEYXJyYXnkuK3pppbmrKHlh7rnjrDnmoTkvY3nva4sIOWmguaenOacquaJvuWIsGl0ZW3vvIwg5YiZ6L+U5ZueLTFcclxuXHQgICAgICogQG1ldGhvZCBpbmRleE9mXHJcblx0ICAgICAqIEByZW1pbmQg6K+l5pa55rOV55qE5Yy56YWN6L+H56iL5L2/55So55qE5piv5oGS562J4oCcPT094oCdXHJcblx0ICAgICAqIEBwYXJhbSB7IEFycmF5IH0gYXJyYXkg6ZyA6KaB5p+l5om+55qE5pWw57uE5a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7ICogfSBpdGVtIOmcgOimgeWcqOebruagh+aVsOe7hOS4reafpeaJvueahOWAvFxyXG5cdCAgICAgKiBAcmV0dXJuIHsgaW50IH0g6L+U5ZueaXRlbeWcqOebruagh+aVsOe7hGFycmF55Lit6aaW5qyh5Ye6546w55qE5L2N572u77yMIOWmguaenOWcqOaVsOe7hOS4reacquaJvuWIsGl0ZW3vvIwg5YiZ6L+U5ZueLTFcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiB2YXIgaXRlbSA9IDEsXHJcblx0ICAgICAqICAgICBhcnIgPSBbIDMsIDQsIDYsIDgsIDEsIDEsIDIgXTtcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IDRcclxuXHQgICAgICogY29uc29sZS5sb2coIFVFLnV0aWxzLmluZGV4T2YoIGFyciwgaXRlbSApICk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDojrflj5blhYPntKBpdGVt5pWw57uEYXJyYXnkuK3pppbmrKHlh7rnjrDnmoTkvY3nva4sIOWmguaenOacquaJvuWIsGl0ZW3vvIwg5YiZ6L+U5ZueLTHjgILpgJrov4dzdGFydOeahOWAvOWPr+S7peaMh+WumuaQnOe0oueahOi1t+Wni+S9jee9ruOAglxyXG5cdCAgICAgKiBAbWV0aG9kIGluZGV4T2ZcclxuXHQgICAgICogQHJlbWluZCDor6Xmlrnms5XnmoTljLnphY3ov4fnqIvkvb/nlKjnmoTmmK/mgZLnrYnigJw9PT3igJ1cclxuXHQgICAgICogQHBhcmFtIHsgQXJyYXkgfSBhcnJheSDpnIDopoHmn6Xmib7nmoTmlbDnu4Tlr7nosaFcclxuXHQgICAgICogQHBhcmFtIHsgKiB9IGl0ZW0g6ZyA6KaB5Zyo55uu5qCH5pWw57uE5Lit5p+l5om+55qE5YC8XHJcblx0ICAgICAqIEBwYXJhbSB7IGludCB9IHN0YXJ0IOaQnOe0oueahOi1t+Wni+S9jee9rlxyXG5cdCAgICAgKiBAcmV0dXJuIHsgaW50IH0g6L+U5ZueaXRlbeWcqOebruagh+aVsOe7hGFycmF55Lit55qEc3RhcnTkvY3nva7kuYvlkI7pppbmrKHlh7rnjrDnmoTkvY3nva7vvIwg5aaC5p6c5Zyo5pWw57uE5Lit5pyq5om+5YiwaXRlbe+8jCDliJnov5Tlm54tMVxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIHZhciBpdGVtID0gMSxcclxuXHQgICAgICogICAgIGFyciA9IFsgMywgNCwgNiwgOCwgMSwgMiwgOCwgMywgMiwgMSwgMSwgNCBdO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL291dHB1dDogOVxyXG5cdCAgICAgKiBjb25zb2xlLmxvZyggVUUudXRpbHMuaW5kZXhPZiggYXJyLCBpdGVtLCA1ICkgKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBpbmRleE9mOmZ1bmN0aW9uIChhcnJheSwgaXRlbSwgc3RhcnQpIHtcclxuXHQgICAgICAgIHZhciBpbmRleCA9IC0xO1xyXG5cdCAgICAgICAgc3RhcnQgPSB0aGlzLmlzTnVtYmVyKHN0YXJ0KSA/IHN0YXJ0IDogMDtcclxuXHQgICAgICAgIHRoaXMuZWFjaChhcnJheSwgZnVuY3Rpb24gKHYsIGkpIHtcclxuXHQgICAgICAgICAgICBpZiAoaSA+PSBzdGFydCAmJiB2ID09PSBpdGVtKSB7XHJcblx0ICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgcmV0dXJuIGluZGV4O1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOenu+mZpOaVsOe7hGFycmF55Lit5omA5pyJ55qE5YWD57SgaXRlbVxyXG5cdCAgICAgKiBAbWV0aG9kIHJlbW92ZUl0ZW1cclxuXHQgICAgICogQHBhcmFtIHsgQXJyYXkgfSBhcnJheSDopoHnp7vpmaTlhYPntKDnmoTnm67moIfmlbDnu4RcclxuXHQgICAgICogQHBhcmFtIHsgKiB9IGl0ZW0g5bCG6KaB6KKr56e76Zmk55qE5YWD57SgXHJcblx0ICAgICAqIEByZW1pbmQg6K+l5pa55rOV55qE5Yy56YWN6L+H56iL5L2/55So55qE5piv5oGS562J4oCcPT094oCdXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogdmFyIGFyciA9IFsgNCwgNSwgNywgMSwgMywgNCwgNiBdO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBVRS51dGlscy5yZW1vdmVJdGVtKCBhcnIsIDQgKTtcclxuXHQgICAgICogLy9vdXRwdXQ6IFsgNSwgNywgMSwgMywgNiBdXHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBhcnIgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICByZW1vdmVJdGVtOmZ1bmN0aW9uIChhcnJheSwgaXRlbSkge1xyXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcnJheS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuXHQgICAgICAgICAgICBpZiAoYXJyYXlbaV0gPT09IGl0ZW0pIHtcclxuXHQgICAgICAgICAgICAgICAgYXJyYXkuc3BsaWNlKGksIDEpO1xyXG5cdCAgICAgICAgICAgICAgICBpLS07XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWIoOmZpOWtl+espuS4snN0cueahOmmluWwvuepuuagvFxyXG5cdCAgICAgKiBAbWV0aG9kIHRyaW1cclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gc3RyIOmcgOimgeWIoOmZpOmmluWwvuepuuagvOeahOWtl+espuS4slxyXG5cdCAgICAgKiBAcmV0dXJuIHsgU3RyaW5nIH0g5Yig6Zmk5LqG6aaW5bC+55qE56m65qC85ZCO55qE5a2X56ym5LiyXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogdmFyIHN0ciA9IFwiIFVFZHRpb3IgXCI7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vb3V0cHV0OiA5XHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBzdHIubGVuZ3RoICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vb3V0cHV0OiA3XHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBVRS51dGlscy50cmltKCBcIiBVRWR0aW9yIFwiICkubGVuZ3RoICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vb3V0cHV0OiA5XHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBzdHIubGVuZ3RoICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIHRyaW06ZnVuY3Rpb24gKHN0cikge1xyXG5cdCAgICAgICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oXlsgXFx0XFxuXFxyXSspfChbIFxcdFxcblxccl0rJCkvZywgJycpO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWwhuWtl+espuS4snN0cuS7pScsJ+WIhumalOaIkOaVsOe7hOWQju+8jOWwhuivpeaVsOe7hOi9rOaNouaIkOWTiOW4jOWvueixoe+8jCDlhbbnlJ/miJDnmoRoYXNo5a+56LGh55qEa2V55Li65pWw57uE5Lit55qE5YWD57Sg77yMIHZhbHVl5Li6MVxyXG5cdCAgICAgKiBAbWV0aG9kIGxpc3RUb01hcFxyXG5cdCAgICAgKiBAd2FybmluZyDor6Xmlrnms5XlnKjnlJ/miJDnmoRoYXNo5a+56LGh5Lit77yM5Lya5Li65q+P5LiA5Liqa2V55ZCM5pe255Sf5oiQ5LiA5Liq5Y+m5LiA5Liq5YWo5aSn5YaZ55qEa2V544CCXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IHN0ciDor6XlrZfnrKbkuLLlsIbooqvku6UnLCfliIblibLkuLrmlbDnu4TvvIwg54S25ZCO6L+b6KGM6L2s5YyWXHJcblx0ICAgICAqIEByZXR1cm4geyBPYmplY3QgfSDovazljJbkuYvlkI7nmoRoYXNo5a+56LGhXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IE9iamVjdCB7VUVkdGlvcjogMSwgVUVEVElPUjogMSwgSGVsbG86IDEsIEhFTExPOiAxfVxyXG5cdCAgICAgKiBjb25zb2xlLmxvZyggVUUudXRpbHMubGlzdFRvTWFwKCAnVUVkdGlvcixIZWxsbycgKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5bCG5a2X56ym5Liy5pWw57uE6L2s5o2i5oiQ5ZOI5biM5a+56LGh77yMIOWFtueUn+aIkOeahGhhc2jlr7nosaHnmoRrZXnkuLrmlbDnu4TkuK3nmoTlhYPntKDvvIwgdmFsdWXkuLoxXHJcblx0ICAgICAqIEBtZXRob2QgbGlzdFRvTWFwXHJcblx0ICAgICAqIEB3YXJuaW5nIOivpeaWueazleWcqOeUn+aIkOeahGhhc2jlr7nosaHkuK3vvIzkvJrkuLrmr4/kuIDkuKprZXnlkIzml7bnlJ/miJDkuIDkuKrlj6bkuIDkuKrlhajlpKflhpnnmoRrZXnjgIJcclxuXHQgICAgICogQHBhcmFtIHsgQXJyYXkgfSBhcnIg5a2X56ym5Liy5pWw57uEXHJcblx0ICAgICAqIEByZXR1cm4geyBPYmplY3QgfSDovazljJbkuYvlkI7nmoRoYXNo5a+56LGhXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IE9iamVjdCB7VUVkdGlvcjogMSwgVUVEVElPUjogMSwgSGVsbG86IDEsIEhFTExPOiAxfVxyXG5cdCAgICAgKiBjb25zb2xlLmxvZyggVUUudXRpbHMubGlzdFRvTWFwKCBbICdVRWR0aW9yJywgJ0hlbGxvJyBdICkgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBsaXN0VG9NYXA6ZnVuY3Rpb24gKGxpc3QpIHtcclxuXHQgICAgICAgIGlmICghbGlzdClyZXR1cm4ge307XHJcblx0ICAgICAgICBsaXN0ID0gdXRpbHMuaXNBcnJheShsaXN0KSA/IGxpc3QgOiBsaXN0LnNwbGl0KCcsJyk7XHJcblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgY2ksIG9iaiA9IHt9OyBjaSA9IGxpc3RbaSsrXTspIHtcclxuXHQgICAgICAgICAgICBvYmpbY2kudG9VcHBlckNhc2UoKV0gPSBvYmpbY2ldID0gMTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBvYmo7XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5bCGc3Ry5Lit55qEaHRtbOespuWPt+i9rOS5iSzlsIbovazkuYnigJwn77yMJu+8jDzvvIxcIu+8jD7igJ3kupTkuKrlrZfnrKZcclxuXHQgICAgICogQG1ldGhvZCB1bmh0bWxcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gc3RyIOmcgOimgei9rOS5ieeahOWtl+espuS4slxyXG5cdCAgICAgKiBAcmV0dXJuIHsgU3RyaW5nIH0g6L2s5LmJ5ZCO55qE5a2X56ym5LiyXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogdmFyIGh0bWwgPSAnPGJvZHk+JjwvYm9keT4nO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL291dHB1dDogJmx0O2JvZHkmZ3Q7JmFtcDsmbHQ7L2JvZHkmZ3Q7XHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBVRS51dGlscy51bmh0bWwoIGh0bWwgKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIHVuaHRtbDpmdW5jdGlvbiAoc3RyLCByZWcpIHtcclxuXHQgICAgICAgIHJldHVybiBzdHIgPyBzdHIucmVwbGFjZShyZWcgfHwgL1smPFwiPiddKD86KGFtcHxsdHxxdW90fGd0fCMzOXxuYnNwfCNcXGQrKTspPy9nLCBmdW5jdGlvbiAoYSwgYikge1xyXG5cdCAgICAgICAgICAgIGlmIChiKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBhO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAnPCc6JyZsdDsnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgJyYnOicmYW1wOycsXHJcblx0ICAgICAgICAgICAgICAgICAgICAnXCInOicmcXVvdDsnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgJz4nOicmZ3Q7JyxcclxuXHQgICAgICAgICAgICAgICAgICAgIFwiJ1wiOicmIzM5OydcclxuXHQgICAgICAgICAgICAgICAgfVthXVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9KSA6ICcnO1xyXG5cdCAgICB9LFxyXG5cdCAgICAvKipcclxuXHQgICAgICog5bCGdXJs5Lit55qEaHRtbOWtl+espui9rOS5ie+8jCDku4XovazkuYkgICcsIFwiLCA8LCA+IOWbm+S4quWtl+esplxyXG5cdCAgICAgKiBAcGFyYW0gIHsgU3RyaW5nIH0gc3RyIOmcgOimgei9rOS5ieeahOWtl+espuS4slxyXG5cdCAgICAgKiBAcGFyYW0gIHsgUmVnRXhwIH0gcmVnIOiHquWumuS5ieeahOato+WImVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgU3RyaW5nIH0gICAgIOi9rOS5ieWQjueahOWtl+espuS4slxyXG5cdCAgICAgKi9cclxuXHQgICAgdW5odG1sRm9yVXJsOmZ1bmN0aW9uIChzdHIsIHJlZykge1xyXG5cdCAgICAgICAgcmV0dXJuIHN0ciA/IHN0ci5yZXBsYWNlKHJlZyB8fCAvWzxcIj4nXS9nLCBmdW5jdGlvbiAoYSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgICc8JzonJmx0OycsXHJcblx0ICAgICAgICAgICAgICAgICcmJzonJmFtcDsnLFxyXG5cdCAgICAgICAgICAgICAgICAnXCInOicmcXVvdDsnLFxyXG5cdCAgICAgICAgICAgICAgICAnPic6JyZndDsnLFxyXG5cdCAgICAgICAgICAgICAgICBcIidcIjonJiMzOTsnXHJcblx0ICAgICAgICAgICAgfVthXVxyXG5cclxuXHQgICAgICAgIH0pIDogJyc7XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5bCGc3Ry5Lit55qE6L2s5LmJ5a2X56ym6L+Y5Y6f5oiQaHRtbOWtl+esplxyXG5cdCAgICAgKiBAc2VlIFVFLnV0aWxzLnVuaHRtbChTdHJpbmcpO1xyXG5cdCAgICAgKiBAbWV0aG9kIGh0bWxcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gc3RyIOmcgOimgemAhui9rOS5ieeahOWtl+espuS4slxyXG5cdCAgICAgKiBAcmV0dXJuIHsgU3RyaW5nIH0g6YCG6L2s5LmJ5ZCO55qE5a2X56ym5LiyXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogdmFyIHN0ciA9ICcmbHQ7Ym9keSZndDsmYW1wOyZsdDsvYm9keSZndDsnO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL291dHB1dDogPGJvZHk+JjwvYm9keT5cclxuXHQgICAgICogY29uc29sZS5sb2coIFVFLnV0aWxzLmh0bWwoIHN0ciApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgaHRtbDpmdW5jdGlvbiAoc3RyKSB7XHJcblx0ICAgICAgICByZXR1cm4gc3RyID8gc3RyLnJlcGxhY2UoLyYoKGd8bHxxdW8pdHxhbXB8IzM5fG5ic3ApOy9nLCBmdW5jdGlvbiAobSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgICcmbHQ7JzonPCcsXHJcblx0ICAgICAgICAgICAgICAgICcmYW1wOyc6JyYnLFxyXG5cdCAgICAgICAgICAgICAgICAnJnF1b3Q7JzonXCInLFxyXG5cdCAgICAgICAgICAgICAgICAnJmd0Oyc6Jz4nLFxyXG5cdCAgICAgICAgICAgICAgICAnJiMzOTsnOlwiJ1wiLFxyXG5cdCAgICAgICAgICAgICAgICAnJm5ic3A7JzonICdcclxuXHQgICAgICAgICAgICB9W21dXHJcblx0ICAgICAgICB9KSA6ICcnO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWwhmNzc+agt+W8j+i9rOaNouS4uumpvOWzsOeahOW9ouW8j1xyXG5cdCAgICAgKiBAbWV0aG9kIGNzc1N0eWxlVG9Eb21TdHlsZVxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjc3NOYW1lIOmcgOimgei9rOaNoueahGNzc+agt+W8j+WQjVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgU3RyaW5nIH0g6L2s5o2i5oiQ6am85bOw5b2i5byP5ZCO55qEY3Nz5qC35byP5ZCNXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogdmFyIHN0ciA9ICdib3JkZXItdG9wJztcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IGJvcmRlclRvcFxyXG5cdCAgICAgKiBjb25zb2xlLmxvZyggVUUudXRpbHMuY3NzU3R5bGVUb0RvbVN0eWxlKCBzdHIgKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGNzc1N0eWxlVG9Eb21TdHlsZTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgdGVzdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlLFxyXG5cdCAgICAgICAgICAgIGNhY2hlID0ge1xyXG5cdCAgICAgICAgICAgICAgICAnZmxvYXQnOnRlc3QuY3NzRmxvYXQgIT0gdW5kZWZpbmVkID8gJ2Nzc0Zsb2F0JyA6IHRlc3Quc3R5bGVGbG9hdCAhPSB1bmRlZmluZWQgPyAnc3R5bGVGbG9hdCcgOiAnZmxvYXQnXHJcblx0ICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNzc05hbWUpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gY2FjaGVbY3NzTmFtZV0gfHwgKGNhY2hlW2Nzc05hbWVdID0gY3NzTmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0uL2csIGZ1bmN0aW9uIChtYXRjaCkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2guY2hhckF0KDEpLnRvVXBwZXJDYXNlKCk7XHJcblx0ICAgICAgICAgICAgfSkpO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgfSgpLFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWKqOaAgeWKoOi9veaWh+S7tuWIsGRvY+S4rVxyXG5cdCAgICAgKiBAbWV0aG9kIGxvYWRGaWxlXHJcblx0ICAgICAqIEBwYXJhbSB7IERvbURvY3VtZW50IH0gZG9jdW1lbnQg6ZyA6KaB5Yqg6L296LWE5rqQ5paH5Lu255qE5paH5qGj5a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IG9wdGlvbnMg5Yqg6L296LWE5rqQ5paH5Lu255qE5bGe5oCn6ZuG5ZCI77yMIOWPluWAvOivt+WPguiAg+S7o+eggeekuuS+i1xyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqXHJcblx0ICAgICAqIFVFLnV0aWxzLmxvYWRGaWxlKCBkb2N1bWVudCwge1xyXG5cdCAgICAgKiAgICAgc3JjOlwidGVzdC5qc1wiLFxyXG5cdCAgICAgKiAgICAgdGFnOlwic2NyaXB0XCIsXHJcblx0ICAgICAqICAgICB0eXBlOlwidGV4dC9qYXZhc2NyaXB0XCIsXHJcblx0ICAgICAqICAgICBkZWZlcjpcImRlZmVyXCJcclxuXHQgICAgICogfSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Yqo5oCB5Yqg6L295paH5Lu25YiwZG9j5Lit77yM5Yqg6L295oiQ5Yqf5ZCO5omn6KGM55qE5Zue6LCD5Ye95pWwZm5cclxuXHQgICAgICogQG1ldGhvZCBsb2FkRmlsZVxyXG5cdCAgICAgKiBAcGFyYW0geyBEb21Eb2N1bWVudCB9IGRvY3VtZW50IOmcgOimgeWKoOi9vei1hOa6kOaWh+S7tueahOaWh+aho+WvueixoVxyXG5cdCAgICAgKiBAcGFyYW0geyBPYmplY3QgfSBvcHRpb25zIOWKoOi9vei1hOa6kOaWh+S7tueahOWxnuaAp+mbhuWQiO+8jCDor6Xpm4blkIjmlK/mjIHnmoTlgLzmmK9zY3JpcHTmoIfnrb7lkoxzdHlsZeagh+etvuaUr+aMgeeahOaJgOacieWxnuaAp+OAglxyXG5cdCAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZuIOi1hOa6kOaWh+S7tuWKoOi9veaIkOWKn+S5i+WQjuaJp+ihjOeahOWbnuiwg1xyXG5cdCAgICAgKiBAd2FybmluZyDlr7nkuo7lnKjlkIzkuIDkuKrmlofmoaPkuK3lpJrmrKHliqDovb3lkIzkuIBVUkznmoTmlofku7bvvIwg6K+l5pa55rOV5Lya5Zyo56ys5LiA5qyh5Yqg6L295LmL5ZCO57yT5a2Y6K+l6K+35rGC77yMXHJcblx0ICAgICAqICAgICAgICAgICDlnKjmraTkuYvlkI7nmoTmiYDmnInlkIzkuIBVUkznmoTor7fmsYLvvIwg5bCG5Lya55u05o6l6Kem5Y+R5Zue6LCD44CCXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogVUUudXRpbHMubG9hZEZpbGUoIGRvY3VtZW50LCB7XHJcblx0ICAgICAqICAgICBzcmM6XCJ0ZXN0LmpzXCIsXHJcblx0ICAgICAqICAgICB0YWc6XCJzY3JpcHRcIixcclxuXHQgICAgICogICAgIHR5cGU6XCJ0ZXh0L2phdmFzY3JpcHRcIixcclxuXHQgICAgICogICAgIGRlZmVyOlwiZGVmZXJcIlxyXG5cdCAgICAgKiB9LCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZygn5Yqg6L295oiQ5YqfJyk7XHJcblx0ICAgICAqIH0gKTtcclxuXHQgICAgICpcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBsb2FkRmlsZTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgdG1wTGlzdCA9IFtdO1xyXG5cclxuXHQgICAgICAgIGZ1bmN0aW9uIGdldEl0ZW0oZG9jLCBvYmopIHtcclxuXHQgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gdG1wTGlzdFtpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNpLmRvYyA9PT0gZG9jICYmIGNpLnVybCA9PSAob2JqLnNyYyB8fCBvYmouaHJlZikpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2k7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkb2MsIG9iaiwgZm4pIHtcclxuXHQgICAgICAgICAgICB2YXIgaXRlbSA9IGdldEl0ZW0oZG9jLCBvYmopO1xyXG5cdCAgICAgICAgICAgIGlmIChpdGVtKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChpdGVtLnJlYWR5KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmbiAmJiBmbigpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5mdW5zLnB1c2goZm4pXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0bXBMaXN0LnB1c2goe1xyXG5cdCAgICAgICAgICAgICAgICBkb2M6ZG9jLFxyXG5cdCAgICAgICAgICAgICAgICB1cmw6b2JqLnNyYyB8fCBvYmouaHJlZixcclxuXHQgICAgICAgICAgICAgICAgZnVuczpbZm5dXHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgaWYgKCFkb2MuYm9keSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIG9iaikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHAgPT0gJ3RhZycpY29udGludWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBodG1sLnB1c2gocCArICc9XCInICsgb2JqW3BdICsgJ1wiJylcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBkb2Mud3JpdGUoJzwnICsgb2JqLnRhZyArICcgJyArIGh0bWwuam9pbignICcpICsgJyA+PC8nICsgb2JqLnRhZyArICc+Jyk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKG9iai5pZCAmJiBkb2MuZ2V0RWxlbWVudEJ5SWQob2JqLmlkKSkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciBlbGVtZW50ID0gZG9jLmNyZWF0ZUVsZW1lbnQob2JqLnRhZyk7XHJcblx0ICAgICAgICAgICAgZGVsZXRlIG9iai50YWc7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBvYmopIHtcclxuXHQgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUocCwgb2JqW3BdKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxlbWVudC5vbmxvYWQgPSBlbGVtZW50Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJlYWR5U3RhdGUgfHwgL2xvYWRlZHxjb21wbGV0ZS8udGVzdCh0aGlzLnJlYWR5U3RhdGUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpdGVtID0gZ2V0SXRlbShkb2MsIG9iaik7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5mdW5zLmxlbmd0aCA+IDApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnJlYWR5ID0gMTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmaTsgZmkgPSBpdGVtLmZ1bnMucG9wKCk7KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbmxvYWQgPSBlbGVtZW50Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgIGVsZW1lbnQub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1RoZSBsb2FkICcgKyAob2JqLmhyZWYgfHwgb2JqLnNyYykgKyAnIGZhaWxzLGNoZWNrIHRoZSB1cmwgc2V0dGluZ3Mgb2YgZmlsZSB1ZWRpdG9yLmNvbmZpZy5qcyAnKVxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXS5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfSgpLFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWIpOaWrW9iauWvueixoeaYr+WQpuS4uuepulxyXG5cdCAgICAgKiBAbWV0aG9kIGlzRW1wdHlPYmplY3RcclxuXHQgICAgICogQHBhcmFtIHsgKiB9IG9iaiDpnIDopoHliKTmlq3nmoTlr7nosaFcclxuXHQgICAgICogQHJlbWluZCDlpoLmnpzliKTmlq3nmoTlr7nosaHmmK9OVUxM77yMIOWwhuebtOaOpei/lOWbnnRydWXvvIwg5aaC5p6c5piv5pWw57uE5LiU5Li656m677yMIOi/lOWbnnRydWXvvIwg5aaC5p6c5piv5a2X56ym5Liy77yMIOS4lOWtl+espuS4suS4uuepuu+8jFxyXG5cdCAgICAgKiAgICAgICAgICDov5Tlm550cnVl77yMIOWmguaenOaYr+aZrumAmuWvueixoe+8jCDkuJTor6Xlr7nosaHmsqHmnInku7vkvZXlrp7kvovlsZ7mgKfvvIwg6L+U5ZuedHJ1ZVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9IOWvueixoeaYr+WQpuS4uuepulxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vb3V0cHV0OiB0cnVlXHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBVRS51dGlscy5pc0VtcHR5T2JqZWN0KCB7fSApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vb3V0cHV0OiB0cnVlXHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBVRS51dGlscy5pc0VtcHR5T2JqZWN0KCBbXSApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vb3V0cHV0OiB0cnVlXHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBVRS51dGlscy5pc0VtcHR5T2JqZWN0KCBcIlwiICkgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IGZhbHNlXHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBVRS51dGlscy5pc0VtcHR5T2JqZWN0KCB7IGtleTogMSB9ICkgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IGZhbHNlXHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBVRS51dGlscy5pc0VtcHR5T2JqZWN0KCBbMV0gKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL291dHB1dDogZmFsc2VcclxuXHQgICAgICogY29uc29sZS5sb2coIFVFLnV0aWxzLmlzRW1wdHlPYmplY3QoIFwiMVwiICkgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBpc0VtcHR5T2JqZWN0OmZ1bmN0aW9uIChvYmopIHtcclxuXHQgICAgICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIHRydWU7XHJcblx0ICAgICAgICBpZiAodGhpcy5pc0FycmF5KG9iaikgfHwgdGhpcy5pc1N0cmluZyhvYmopKSByZXR1cm4gb2JqLmxlbmd0aCA9PT0gMDtcclxuXHQgICAgICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChvYmouaGFzT3duUHJvcGVydHkoa2V5KSkgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5oqKcmdi5qC85byP55qE6aKc6Imy5YC86L2s5o2i5oiQMTbov5vliLbmoLzlvI9cclxuXHQgICAgICogQG1ldGhvZCBmaXhDb2xvclxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSByZ2LmoLzlvI/nmoTpopzoibLlgLxcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH1cclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogcmdiKDI1NSwyNTUsMjU1KSAgPT4gXCIjZmZmZmZmXCJcclxuXHQgICAgICovXHJcblx0ICAgIGZpeENvbG9yOmZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xyXG5cdCAgICAgICAgaWYgKC9jb2xvci9pLnRlc3QobmFtZSkgJiYgL3JnYmE/Ly50ZXN0KHZhbHVlKSkge1xyXG5cdCAgICAgICAgICAgIHZhciBhcnJheSA9IHZhbHVlLnNwbGl0KFwiLFwiKTtcclxuXHQgICAgICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID4gMylcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcblx0ICAgICAgICAgICAgdmFsdWUgPSBcIiNcIjtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY29sb3I7IGNvbG9yID0gYXJyYXlbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgY29sb3IgPSBwYXJzZUludChjb2xvci5yZXBsYWNlKC9bXlxcZF0vZ2ksICcnKSwgMTApLnRvU3RyaW5nKDE2KTtcclxuXHQgICAgICAgICAgICAgICAgdmFsdWUgKz0gY29sb3IubGVuZ3RoID09IDEgPyBcIjBcIiArIGNvbG9yIDogY29sb3I7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9VcHBlckNhc2UoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiAgdmFsdWU7XHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDlj6rpkojlr7lib3JkZXIscGFkZGluZyxtYXJnaW7lgZrkuoblpITnkIbvvIzlm6DkuLrmgKfog73pl67pophcclxuXHQgICAgICogQHB1YmxpY1xyXG5cdCAgICAgKiBAZnVuY3Rpb25cclxuXHQgICAgICogQHBhcmFtIHtTdHJpbmd9ICAgIHZhbCBzdHlsZeWtl+espuS4slxyXG5cdCAgICAgKi9cclxuXHQgICAgb3B0Q3NzOmZ1bmN0aW9uICh2YWwpIHtcclxuXHQgICAgICAgIHZhciBwYWRkaW5nLCBtYXJnaW4sIGJvcmRlcjtcclxuXHQgICAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKC8ocGFkZGluZ3xtYXJnaW58Ym9yZGVyKVxcLShbXjpdKyk6KFteO10rKTs/L2dpLCBmdW5jdGlvbiAoc3RyLCBrZXksIG5hbWUsIHZhbCkge1xyXG5cdCAgICAgICAgICAgIGlmICh2YWwuc3BsaXQoJyAnKS5sZW5ndGggPT0gMSkge1xyXG5cdCAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAncGFkZGluZyc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgIXBhZGRpbmcgJiYgKHBhZGRpbmcgPSB7fSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1tuYW1lXSA9IHZhbDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdtYXJnaW4nOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICFtYXJnaW4gJiYgKG1hcmdpbiA9IHt9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW5bbmFtZV0gPSB2YWw7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnYm9yZGVyJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsID09ICdpbml0aWFsJyA/ICcnIDogc3RyO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiBzdHI7XHJcblx0ICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICBmdW5jdGlvbiBvcHQob2JqLCBuYW1lKSB7XHJcblx0ICAgICAgICAgICAgaWYgKCFvYmopIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgdCA9IG9iai50b3AgLCBiID0gb2JqLmJvdHRvbSwgbCA9IG9iai5sZWZ0LCByID0gb2JqLnJpZ2h0LCB2YWwgPSAnJztcclxuXHQgICAgICAgICAgICBpZiAoIXQgfHwgIWwgfHwgIWIgfHwgIXIpIHtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBvYmopIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhbCArPSAnOycgKyBuYW1lICsgJy0nICsgcCArICc6JyArIG9ialtwXSArICc7JztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhbCArPSAnOycgKyBuYW1lICsgJzonICtcclxuXHQgICAgICAgICAgICAgICAgICAgICh0ID09IGIgJiYgYiA9PSBsICYmIGwgPT0gciA/IHQgOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHQgPT0gYiAmJiBsID09IHIgPyAodCArICcgJyArIGwpIDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbCA9PSByID8gKHQgKyAnICcgKyBsICsgJyAnICsgYikgOiAodCArICcgJyArIHIgKyAnICcgKyBiICsgJyAnICsgbCkpICsgJzsnXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiB2YWw7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgdmFsICs9IG9wdChwYWRkaW5nLCAncGFkZGluZycpICsgb3B0KG1hcmdpbiwgJ21hcmdpbicpO1xyXG5cdCAgICAgICAgcmV0dXJuIHZhbC5yZXBsYWNlKC9eWyBcXG5cXHJcXHQ7XSp8WyBcXG5cXHJcXHRdKiQvLCAnJykucmVwbGFjZSgvOyhbIFxcblxcclxcdF0rKXxcXDE7L2csICc7JylcclxuXHQgICAgICAgICAgICAucmVwbGFjZSgvKCYoKGx8Zyl0fHF1b3R8IzM5KSk/O3syLH0vZywgZnVuY3Rpb24gKGEsIGIpIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGIgPyBiICsgXCI7O1wiIDogJzsnXHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5YWL6ZqG5a+56LGhXHJcblx0ICAgICAqIEBtZXRob2QgY2xvbmVcclxuXHQgICAgICogQHBhcmFtIHsgT2JqZWN0IH0gc291cmNlIOa6kOWvueixoVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgT2JqZWN0IH0gc291cmNl55qE5LiA5Liq5Ymv5pysXHJcblx0ICAgICAqL1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOa3seW6puWFi+mahuWvueixoe+8jOWwhnNvdXJjZeeahOWxnuaAp+WFi+mahuWIsHRhcmdldOWvueixoe+8jCDkvJropobnm5Z0YXJnZXTph43lkI3nmoTlsZ7mgKfjgIJcclxuXHQgICAgICogQG1ldGhvZCBjbG9uZVxyXG5cdCAgICAgKiBAcGFyYW0geyBPYmplY3QgfSBzb3VyY2Ug5rqQ5a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IHRhcmdldCDnm67moIflr7nosaFcclxuXHQgICAgICogQHJldHVybiB7IE9iamVjdCB9IOmZhOWKoOS6hnNvdXJjZeWvueixoeaJgOacieWxnuaAp+eahHRhcmdldOWvueixoVxyXG5cdCAgICAgKi9cclxuXHQgICAgY2xvbmU6ZnVuY3Rpb24gKHNvdXJjZSwgdGFyZ2V0KSB7XHJcblx0ICAgICAgICB2YXIgdG1wO1xyXG5cdCAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xyXG5cdCAgICAgICAgZm9yICh2YXIgaSBpbiBzb3VyY2UpIHtcclxuXHQgICAgICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KGkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRtcCA9IHNvdXJjZVtpXTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0bXAgPT0gJ29iamVjdCcpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IHV0aWxzLmlzQXJyYXkodG1wKSA/IFtdIDoge307XHJcblx0ICAgICAgICAgICAgICAgICAgICB1dGlscy5jbG9uZShzb3VyY2VbaV0sIHRhcmdldFtpXSlcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IHRtcDtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5oqKY23vvI9wdOS4uuWNleS9jeeahOWAvOi9rOaNouS4unB45Li65Y2V5L2N55qE5YC8XHJcblx0ICAgICAqIEBtZXRob2QgdHJhbnNVbml0VG9QeFxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSDlvoXovazmjaLnmoTluKbljZXkvY3nmoTlrZfnrKbkuLJcclxuXHQgICAgICogQHJldHVybiB7IFN0cmluZyB9IOi9rOaNouS4unB45Li66K6h6YeP5Y2V5L2N55qE5YC855qE5a2X56ym5LiyXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IDUwMHB4XHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBVRS51dGlscy50cmFuc1VuaXRUb1B4KCAnMjBjbScgKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL291dHB1dDogMjdweFxyXG5cdCAgICAgKiBjb25zb2xlLmxvZyggVUUudXRpbHMudHJhbnNVbml0VG9QeCggJzIwcHQnICkgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICB0cmFuc1VuaXRUb1B4OmZ1bmN0aW9uICh2YWwpIHtcclxuXHQgICAgICAgIGlmICghLyhwdHxjbSkvLnRlc3QodmFsKSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB2YWxcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciB1bml0O1xyXG5cdCAgICAgICAgdmFsLnJlcGxhY2UoLyhbXFxkLl0rKShcXHcrKS8sIGZ1bmN0aW9uIChzdHIsIHYsIHUpIHtcclxuXHQgICAgICAgICAgICB2YWwgPSB2O1xyXG5cdCAgICAgICAgICAgIHVuaXQgPSB1O1xyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICBzd2l0Y2ggKHVuaXQpIHtcclxuXHQgICAgICAgICAgICBjYXNlICdjbSc6XHJcblx0ICAgICAgICAgICAgICAgIHZhbCA9IHBhcnNlRmxvYXQodmFsKSAqIDI1O1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBjYXNlICdwdCc6XHJcblx0ICAgICAgICAgICAgICAgIHZhbCA9IE1hdGgucm91bmQocGFyc2VGbG9hdCh2YWwpICogOTYgLyA3Mik7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gdmFsICsgKHZhbCA/ICdweCcgOiAnJyk7XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5ZyoZG9t5qCRcmVhZHnkuYvlkI7miafooYznu5nlrprnmoTlm57osIPlh73mlbBcclxuXHQgICAgICogQG1ldGhvZCBkb21SZWFkeVxyXG5cdCAgICAgKiBAcmVtaW5kIOWmguaenOWcqOaJp+ihjOivpeaWueazleeahOaXtuWAme+8jCBkb23moJHlt7Lnu49yZWFkee+8jCDpgqPkuYjlm57osIPlh73mlbDlsIbnq4vliLvmiafooYxcclxuXHQgICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBmbiBkb23moJFyZWFkeeS5i+WQjueahOWbnuiwg+WHveaVsFxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqXHJcblx0ICAgICAqIFVFLnV0aWxzLmRvbVJlYWR5KCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZygnMTIzJyk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIH0gKTtcclxuXHQgICAgICpcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBkb21SZWFkeTpmdW5jdGlvbiAoKSB7XHJcblxyXG5cdCAgICAgICAgdmFyIGZuQXJyID0gW107XHJcblxyXG5cdCAgICAgICAgZnVuY3Rpb24gZG9SZWFkeShkb2MpIHtcclxuXHQgICAgICAgICAgICAvL+ehruS/nW9ucmVhZHnlj6rmiafooYzkuIDmrKFcclxuXHQgICAgICAgICAgICBkb2MuaXNSZWFkeSA9IHRydWU7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgY2k7IGNpID0gZm5BcnIucG9wKCk7IGNpKCkpIHtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChvbnJlYWR5LCB3aW4pIHtcclxuXHQgICAgICAgICAgICB3aW4gPSB3aW4gfHwgd2luZG93O1xyXG5cdCAgICAgICAgICAgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7XHJcblx0ICAgICAgICAgICAgb25yZWFkeSAmJiBmbkFyci5wdXNoKG9ucmVhZHkpO1xyXG5cdCAgICAgICAgICAgIGlmIChkb2MucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XHJcblx0ICAgICAgICAgICAgICAgIGRvUmVhZHkoZG9jKTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBkb2MuaXNSZWFkeSAmJiBkb1JlYWR5KGRvYyk7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChicm93c2VyLmllICYmIGJyb3dzZXIudmVyc2lvbiAhPSAxMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9jLmlzUmVhZHkpIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb2MuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsKFwibGVmdFwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGFyZ3VtZW50cy5jYWxsZWUsIDApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvUmVhZHkoZG9jKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0pKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aW4uYXR0YWNoRXZlbnQoJ29ubG9hZCcsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb1JlYWR5KGRvYylcclxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgYXJndW1lbnRzLmNhbGxlZSwgZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvUmVhZHkoZG9jKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0sIGZhbHNlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHdpbi5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvUmVhZHkoZG9jKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSwgZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH1cclxuXHQgICAgfSgpLFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWKqOaAgea3u+WKoGNzc+agt+W8j1xyXG5cdCAgICAgKiBAbWV0aG9kIGNzc1J1bGVcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0g6IqC54K55ZCN56ewXHJcblx0ICAgICAqIEBncmFtbWFyIFVFLnV0aWxzLmNzc1J1bGUoJ+a3u+WKoOeahOagt+W8j+eahOiKgueCueWQjeensCcsWyfmoLflvI8n77yMJ+aUvuWIsOWTquS4qmRvY3VtZW505LiKJ10pXHJcblx0ICAgICAqIEBncmFtbWFyIFVFLnV0aWxzLmNzc1J1bGUoJ2JvZHknLCdib2R5e2JhY2tncm91bmQ6I2NjY30nKSA9PiBudWxsICAvL+e7mWJvZHnmt7vliqDog4zmma/popzoibJcclxuXHQgICAgICogQGdyYW1tYXIgVUUudXRpbHMuY3NzUnVsZSgnYm9keScpID0+5qC35byP55qE5a2X56ym5LiyICAvL+WPluW+l2tleeWAvOS4umJvZHnnmoTmoLflvI/nmoTlhoXlrrks5aaC5p6c5rKh5pyJ5om+5Yiwa2V55YC85YWI5YWz55qE5qC35byP5bCG6L+U5Zue56m677yM5L6L5aaC5Yia5omN6YKj5Liq6IOM5pmv6aKc6Imy77yM5bCG6L+U5ZueIGJvZHl7YmFja2dyb3VuZDojY2NjfVxyXG5cdCAgICAgKiBAZ3JhbW1hciBVRS51dGlscy5jc3NSdWxlKCdib2R5Jyxkb2N1bWVudCkgPT4g6L+U5Zue5oyH5a6aa2V555qE5qC35byP77yM5bm25LiU5oyH5a6a5piv5ZOq5LiqZG9jdW1lbnRcclxuXHQgICAgICogQGdyYW1tYXIgVUUudXRpbHMuY3NzUnVsZSgnYm9keScsJycpID0+bnVsbCAvL+a4heepuue7meWumueahGtleeWAvOeahOiDjOaZr+minOiJslxyXG5cdCAgICAgKi9cclxuXHQgICAgY3NzUnVsZTpicm93c2VyLmllICYmIGJyb3dzZXIudmVyc2lvbiAhPSAxMSA/IGZ1bmN0aW9uIChrZXksIHN0eWxlLCBkb2MpIHtcclxuXHQgICAgICAgIHZhciBpbmRleExpc3QsIGluZGV4O1xyXG5cdCAgICAgICAgaWYoc3R5bGUgPT09IHVuZGVmaW5lZCB8fCBzdHlsZSAmJiBzdHlsZS5ub2RlVHlwZSAmJiBzdHlsZS5ub2RlVHlwZSA9PSA5KXtcclxuXHQgICAgICAgICAgICAvL+iOt+WPluagt+W8j1xyXG5cdCAgICAgICAgICAgIGRvYyA9IHN0eWxlICYmIHN0eWxlLm5vZGVUeXBlICYmIHN0eWxlLm5vZGVUeXBlID09IDkgPyBzdHlsZSA6IChkb2MgfHwgZG9jdW1lbnQpO1xyXG5cdCAgICAgICAgICAgIGluZGV4TGlzdCA9IGRvYy5pbmRleExpc3QgfHwgKGRvYy5pbmRleExpc3QgPSB7fSk7XHJcblx0ICAgICAgICAgICAgaW5kZXggPSBpbmRleExpc3Rba2V5XTtcclxuXHQgICAgICAgICAgICBpZihpbmRleCAhPT0gIHVuZGVmaW5lZCl7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBkb2Muc3R5bGVTaGVldHNbaW5kZXhdLmNzc1RleHRcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcclxuXHQgICAgICAgIGluZGV4TGlzdCA9IGRvYy5pbmRleExpc3QgfHwgKGRvYy5pbmRleExpc3QgPSB7fSk7XHJcblx0ICAgICAgICBpbmRleCA9IGluZGV4TGlzdFtrZXldO1xyXG5cdCAgICAgICAgLy/muIXpmaTmoLflvI9cclxuXHQgICAgICAgIGlmKHN0eWxlID09PSAnJyl7XHJcblx0ICAgICAgICAgICAgaWYoaW5kZXghPT0gdW5kZWZpbmVkKXtcclxuXHQgICAgICAgICAgICAgICAgZG9jLnN0eWxlU2hlZXRzW2luZGV4XS5jc3NUZXh0ID0gJyc7XHJcblx0ICAgICAgICAgICAgICAgIGRlbGV0ZSBpbmRleExpc3Rba2V5XTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIC8v5re75Yqg5qC35byPXHJcblx0ICAgICAgICBpZihpbmRleCE9PSB1bmRlZmluZWQpe1xyXG5cdCAgICAgICAgICAgIHNoZWV0U3R5bGUgPSAgZG9jLnN0eWxlU2hlZXRzW2luZGV4XTtcclxuXHQgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgIHNoZWV0U3R5bGUgPSBkb2MuY3JlYXRlU3R5bGVTaGVldCgnJywgaW5kZXggPSBkb2Muc3R5bGVTaGVldHMubGVuZ3RoKTtcclxuXHQgICAgICAgICAgICBpbmRleExpc3Rba2V5XSA9IGluZGV4O1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgc2hlZXRTdHlsZS5jc3NUZXh0ID0gc3R5bGU7XHJcblx0ICAgIH06IGZ1bmN0aW9uIChrZXksIHN0eWxlLCBkb2MpIHtcclxuXHQgICAgICAgIHZhciBoZWFkLCBub2RlO1xyXG5cdCAgICAgICAgaWYoc3R5bGUgPT09IHVuZGVmaW5lZCB8fCBzdHlsZSAmJiBzdHlsZS5ub2RlVHlwZSAmJiBzdHlsZS5ub2RlVHlwZSA9PSA5KXtcclxuXHQgICAgICAgICAgICAvL+iOt+WPluagt+W8j1xyXG5cdCAgICAgICAgICAgIGRvYyA9IHN0eWxlICYmIHN0eWxlLm5vZGVUeXBlICYmIHN0eWxlLm5vZGVUeXBlID09IDkgPyBzdHlsZSA6IChkb2MgfHwgZG9jdW1lbnQpO1xyXG5cdCAgICAgICAgICAgIG5vZGUgPSBkb2MuZ2V0RWxlbWVudEJ5SWQoa2V5KTtcclxuXHQgICAgICAgICAgICByZXR1cm4gbm9kZSA/IG5vZGUuaW5uZXJIVE1MIDogdW5kZWZpbmVkO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZG9jID0gZG9jIHx8IGRvY3VtZW50O1xyXG5cdCAgICAgICAgbm9kZSA9IGRvYy5nZXRFbGVtZW50QnlJZChrZXkpO1xyXG5cclxuXHQgICAgICAgIC8v5riF6Zmk5qC35byPXHJcblx0ICAgICAgICBpZihzdHlsZSA9PT0gJycpe1xyXG5cdCAgICAgICAgICAgIGlmKG5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAvL+a3u+WKoOagt+W8j1xyXG5cdCAgICAgICAgaWYobm9kZSl7XHJcblx0ICAgICAgICAgICAgbm9kZS5pbm5lckhUTUwgPSBzdHlsZTtcclxuXHQgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgIG5vZGUgPSBkb2MuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcclxuXHQgICAgICAgICAgICBub2RlLmlkID0ga2V5O1xyXG5cdCAgICAgICAgICAgIG5vZGUuaW5uZXJIVE1MID0gc3R5bGU7XHJcblx0ICAgICAgICAgICAgZG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQobm9kZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0sXHJcblx0ICAgIHNvcnQ6ZnVuY3Rpb24oYXJyYXksY29tcGFyZUZuKXtcclxuXHQgICAgICAgIGNvbXBhcmVGbiA9IGNvbXBhcmVGbiB8fCBmdW5jdGlvbihpdGVtMSwgaXRlbTIpeyByZXR1cm4gaXRlbTEubG9jYWxlQ29tcGFyZShpdGVtMik7fTtcclxuXHQgICAgICAgIGZvcih2YXIgaT0gMCxsZW4gPSBhcnJheS5sZW5ndGg7IGk8bGVuOyBpKyspe1xyXG5cdCAgICAgICAgICAgIGZvcih2YXIgaiA9IGksbGVuZ3RoID0gYXJyYXkubGVuZ3RoOyBqPGxlbmd0aDsgaisrKXtcclxuXHQgICAgICAgICAgICAgICAgaWYoY29tcGFyZUZuKGFycmF5W2ldLCBhcnJheVtqXSkgPiAwKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gYXJyYXlbaV07XHJcblx0ICAgICAgICAgICAgICAgICAgICBhcnJheVtpXSA9IGFycmF5W2pdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYXJyYXlbal0gPSB0O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGFycmF5O1xyXG5cdCAgICB9LFxyXG5cdCAgICBzZXJpYWxpemVQYXJhbTpmdW5jdGlvbiAoanNvbikge1xyXG5cdCAgICAgICAgdmFyIHN0ckFyciA9IFtdO1xyXG5cdCAgICAgICAgZm9yICh2YXIgaSBpbiBqc29uKSB7XHJcblx0ICAgICAgICAgICAgLy/lv73nlaXpu5jorqTnmoTlh6DkuKrlj4LmlbBcclxuXHQgICAgICAgICAgICBpZihpPT1cIm1ldGhvZFwiIHx8IGk9PVwidGltZW91dFwiIHx8IGk9PVwiYXN5bmNcIikgY29udGludWU7XHJcblx0ICAgICAgICAgICAgLy/kvKDpgJLov4fmnaXnmoTlr7nosaHlkozlh73mlbDkuI3lnKjmj5DkuqTkuYvliJdcclxuXHQgICAgICAgICAgICBpZiAoISgodHlwZW9mIGpzb25baV0pLnRvTG93ZXJDYXNlKCkgPT0gXCJmdW5jdGlvblwiIHx8ICh0eXBlb2YganNvbltpXSkudG9Mb3dlckNhc2UoKSA9PSBcIm9iamVjdFwiKSkge1xyXG5cdCAgICAgICAgICAgICAgICBzdHJBcnIucHVzaCggZW5jb2RlVVJJQ29tcG9uZW50KGkpICsgXCI9XCIrZW5jb2RlVVJJQ29tcG9uZW50KGpzb25baV0pICk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc0FycmF5KGpzb25baV0pKSB7XHJcblx0ICAgICAgICAgICAgICAgIC8v5pSv5oyB5Lyg5pWw57uE5YaF5a65XHJcblx0ICAgICAgICAgICAgICAgIGZvcih2YXIgaiA9IDA7IGogPCBqc29uW2ldLmxlbmd0aDsgaisrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdHJBcnIucHVzaCggZW5jb2RlVVJJQ29tcG9uZW50KGkpICsgXCJbXT1cIitlbmNvZGVVUklDb21wb25lbnQoanNvbltpXVtqXSkgKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBzdHJBcnIuam9pbihcIiZcIik7XHJcblx0ICAgIH0sXHJcblx0ICAgIGZvcm1hdFVybDpmdW5jdGlvbiAodXJsKSB7XHJcblx0ICAgICAgICB2YXIgdSA9IHVybC5yZXBsYWNlKC8mJi9nLCAnJicpO1xyXG5cdCAgICAgICAgdSA9IHUucmVwbGFjZSgvXFw/Ji9nLCAnPycpO1xyXG5cdCAgICAgICAgdSA9IHUucmVwbGFjZSgvJiQvZywgJycpO1xyXG5cdCAgICAgICAgdSA9IHUucmVwbGFjZSgvJiMvZywgJyMnKTtcclxuXHQgICAgICAgIHUgPSB1LnJlcGxhY2UoLyYrL2csICcmJyk7XHJcblx0ICAgICAgICByZXR1cm4gdTtcclxuXHQgICAgfSxcclxuXHQgICAgaXNDcm9zc0RvbWFpblVybDpmdW5jdGlvbiAodXJsKSB7XHJcblx0ICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuXHQgICAgICAgIGEuaHJlZiA9IHVybDtcclxuXHQgICAgICAgIGlmIChicm93c2VyLmllKSB7XHJcblx0ICAgICAgICAgICAgYS5ocmVmID0gYS5ocmVmO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuICEoYS5wcm90b2NvbCA9PSBsb2NhdGlvbi5wcm90b2NvbCAmJiBhLmhvc3RuYW1lID09IGxvY2F0aW9uLmhvc3RuYW1lICYmXHJcblx0ICAgICAgICAoYS5wb3J0ID09IGxvY2F0aW9uLnBvcnQgfHwgKGEucG9ydCA9PSAnODAnICYmIGxvY2F0aW9uLnBvcnQgPT0gJycpIHx8IChhLnBvcnQgPT0gJycgJiYgbG9jYXRpb24ucG9ydCA9PSAnODAnKSkpO1xyXG5cdCAgICB9LFxyXG5cdCAgICBjbGVhckVtcHR5QXR0cnMgOiBmdW5jdGlvbihvYmope1xyXG5cdCAgICAgICAgZm9yKHZhciBwIGluIG9iail7XHJcblx0ICAgICAgICAgICAgaWYob2JqW3BdID09PSAnJyl7XHJcblx0ICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmpbcF1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gb2JqO1xyXG5cdCAgICB9LFxyXG5cdCAgICBzdHIyanNvbiA6IGZ1bmN0aW9uKHMpe1xyXG5cclxuXHQgICAgICAgIGlmICghdXRpbHMuaXNTdHJpbmcocykpIHJldHVybiBudWxsO1xyXG5cdCAgICAgICAgaWYgKHdpbmRvdy5KU09OKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uocyk7XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHJldHVybiAobmV3IEZ1bmN0aW9uKFwicmV0dXJuIFwiICsgdXRpbHMudHJpbShzIHx8ICcnKSkpKCk7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9LFxyXG5cdCAgICBqc29uMnN0ciA6IChmdW5jdGlvbigpe1xyXG5cclxuXHQgICAgICAgIGlmICh3aW5kb3cuSlNPTikge1xyXG5cclxuXHQgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnk7XHJcblxyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHJcblx0ICAgICAgICAgICAgdmFyIGVzY2FwZU1hcCA9IHtcclxuXHQgICAgICAgICAgICAgICAgXCJcXGJcIjogJ1xcXFxiJyxcclxuXHQgICAgICAgICAgICAgICAgXCJcXHRcIjogJ1xcXFx0JyxcclxuXHQgICAgICAgICAgICAgICAgXCJcXG5cIjogJ1xcXFxuJyxcclxuXHQgICAgICAgICAgICAgICAgXCJcXGZcIjogJ1xcXFxmJyxcclxuXHQgICAgICAgICAgICAgICAgXCJcXHJcIjogJ1xcXFxyJyxcclxuXHQgICAgICAgICAgICAgICAgJ1wiJyA6ICdcXFxcXCInLFxyXG5cdCAgICAgICAgICAgICAgICBcIlxcXFxcIjogJ1xcXFxcXFxcJ1xyXG5cdCAgICAgICAgICAgIH07XHJcblxyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGVuY29kZVN0cmluZyhzb3VyY2UpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKC9bXCJcXFxcXFx4MDAtXFx4MWZdLy50ZXN0KHNvdXJjZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZS5yZXBsYWNlKFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC9bXCJcXFxcXFx4MDAtXFx4MWZdL2csXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKG1hdGNoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjID0gZXNjYXBlTWFwW21hdGNoXTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMgPSBtYXRjaC5jaGFyQ29kZUF0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlxcXFx1MDBcIlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICArIE1hdGguZmxvb3IoYyAvIDE2KS50b1N0cmluZygxNilcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoYyAlIDE2KS50b1N0cmluZygxNik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuICdcIicgKyBzb3VyY2UgKyAnXCInO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gZW5jb2RlQXJyYXkoc291cmNlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXCJbXCJdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgbCA9IHNvdXJjZS5sZW5ndGgsXHJcblx0ICAgICAgICAgICAgICAgICAgICBwcmVDb21tYSwgaSwgaXRlbTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBzb3VyY2VbaV07XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgaXRlbSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiZnVuY3Rpb25cIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwidW5rbm93blwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihwcmVDb21tYSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goJywnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh1dGlscy5qc29uMnN0cihpdGVtKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZUNvbW1hID0gMTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByZXN1bHQucHVzaChcIl1cIik7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuam9pbihcIlwiKTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIHBhZChzb3VyY2UpIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZSA8IDEwID8gJzAnICsgc291cmNlIDogc291cmNlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gZW5jb2RlRGF0ZShzb3VyY2Upe1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gJ1wiJyArIHNvdXJjZS5nZXRGdWxsWWVhcigpICsgXCItXCJcclxuXHQgICAgICAgICAgICAgICAgKyBwYWQoc291cmNlLmdldE1vbnRoKCkgKyAxKSArIFwiLVwiXHJcblx0ICAgICAgICAgICAgICAgICsgcGFkKHNvdXJjZS5nZXREYXRlKCkpICsgXCJUXCJcclxuXHQgICAgICAgICAgICAgICAgKyBwYWQoc291cmNlLmdldEhvdXJzKCkpICsgXCI6XCJcclxuXHQgICAgICAgICAgICAgICAgKyBwYWQoc291cmNlLmdldE1pbnV0ZXMoKSkgKyBcIjpcIlxyXG5cdCAgICAgICAgICAgICAgICArIHBhZChzb3VyY2UuZ2V0U2Vjb25kcygpKSArICdcIic7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndW5kZWZpbmVkJztcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdudW1iZXInOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc0Zpbml0ZSh2YWx1ZSkgPyBTdHJpbmcodmFsdWUpIDogXCJudWxsXCI7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlU3RyaW5nKHZhbHVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdib29sZWFuJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ251bGwnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheSh2YWx1ZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZUFycmF5KHZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzRGF0ZSh2YWx1ZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZURhdGUodmFsdWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBbJ3snXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuY29kZSA9IHV0aWxzLmpzb24yc3RyLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlQ29tbWEsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSA9IHZhbHVlW2tleV07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YgaXRlbSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmRlZmluZWQnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd1bmtub3duJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZnVuY3Rpb24nOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJlQ29tbWEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnLCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlQ29tbWEgPSAxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZW5jb2RlKGtleSkgKyAnOicgKyBlbmNvZGUoaXRlbSkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgnfScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9KSgpXHJcblxyXG5cdH07XHJcblx0LyoqXHJcblx0ICog5Yik5pat57uZ5a6a55qE5a+56LGh5piv5ZCm5piv5a2X56ym5LiyXHJcblx0ICogQG1ldGhvZCBpc1N0cmluZ1xyXG5cdCAqIEBwYXJhbSB7ICogfSBvYmplY3Qg6ZyA6KaB5Yik5pat55qE5a+56LGhXHJcblx0ICogQHJldHVybiB7IEJvb2xlYW4gfSDnu5nlrprnmoTlr7nosaHmmK/lkKbmmK/lrZfnrKbkuLJcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog5Yik5pat57uZ5a6a55qE5a+56LGh5piv5ZCm5piv5pWw57uEXHJcblx0ICogQG1ldGhvZCBpc0FycmF5XHJcblx0ICogQHBhcmFtIHsgKiB9IG9iamVjdCDpnIDopoHliKTmlq3nmoTlr7nosaFcclxuXHQgKiBAcmV0dXJuIHsgQm9vbGVhbiB9IOe7meWumueahOWvueixoeaYr+WQpuaYr+aVsOe7hFxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDliKTmlq3nu5nlrprnmoTlr7nosaHmmK/lkKbmmK/kuIDkuKpGdW5jdGlvblxyXG5cdCAqIEBtZXRob2QgaXNGdW5jdGlvblxyXG5cdCAqIEBwYXJhbSB7ICogfSBvYmplY3Qg6ZyA6KaB5Yik5pat55qE5a+56LGhXHJcblx0ICogQHJldHVybiB7IEJvb2xlYW4gfSDnu5nlrprnmoTlr7nosaHmmK/lkKbmmK9GdW5jdGlvblxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDliKTmlq3nu5nlrprnmoTlr7nosaHmmK/lkKbmmK9OdW1iZXJcclxuXHQgKiBAbWV0aG9kIGlzTnVtYmVyXHJcblx0ICogQHBhcmFtIHsgKiB9IG9iamVjdCDpnIDopoHliKTmlq3nmoTlr7nosaFcclxuXHQgKiBAcmV0dXJuIHsgQm9vbGVhbiB9IOe7meWumueahOWvueixoeaYr+WQpuaYr051bWJlclxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDliKTmlq3nu5nlrprnmoTlr7nosaHmmK/lkKbmmK/kuIDkuKrmraPliJnooajovr7lvI9cclxuXHQgKiBAbWV0aG9kIGlzUmVnRXhwXHJcblx0ICogQHBhcmFtIHsgKiB9IG9iamVjdCDpnIDopoHliKTmlq3nmoTlr7nosaFcclxuXHQgKiBAcmV0dXJuIHsgQm9vbGVhbiB9IOe7meWumueahOWvueixoeaYr+WQpuaYr+ato+WImeihqOi+vuW8j1xyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDliKTmlq3nu5nlrprnmoTlr7nosaHmmK/lkKbmmK/kuIDkuKrmma7pgJrlr7nosaFcclxuXHQgKiBAbWV0aG9kIGlzT2JqZWN0XHJcblx0ICogQHBhcmFtIHsgKiB9IG9iamVjdCDpnIDopoHliKTmlq3nmoTlr7nosaFcclxuXHQgKiBAcmV0dXJuIHsgQm9vbGVhbiB9IOe7meWumueahOWvueixoeaYr+WQpuaYr+aZrumAmuWvueixoVxyXG5cdCAqL1xyXG5cdHV0aWxzLmVhY2goWydTdHJpbmcnLCAnRnVuY3Rpb24nLCAnQXJyYXknLCAnTnVtYmVyJywgJ1JlZ0V4cCcsICdPYmplY3QnLCAnRGF0ZSddLCBmdW5jdGlvbiAodikge1xyXG5cdCAgICBVRS51dGlsc1snaXMnICsgdl0gPSBmdW5jdGlvbiAob2JqKSB7XHJcblx0ICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseShvYmopID09ICdbb2JqZWN0ICcgKyB2ICsgJ10nO1xyXG5cdCAgICB9XHJcblx0fSk7XHJcblxyXG5cclxuXHQvLyBjb3JlL0V2ZW50QmFzZS5qc1xyXG5cdC8qKlxyXG5cdCAqIFVF6YeH55So55qE5LqL5Lu25Z+657G7XHJcblx0ICogQGZpbGVcclxuXHQgKiBAbW9kdWxlIFVFXHJcblx0ICogQGNsYXNzIEV2ZW50QmFzZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIFVFZGl0b3LlhaznlKjnqbrpl7TvvIxVRWRpdG9y5omA5pyJ55qE5Yqf6IO96YO95oyC6L295Zyo6K+l56m66Ze05LiLXHJcblx0ICogQHVuZmlsZVxyXG5cdCAqIEBtb2R1bGUgVUVcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICogVUXph4fnlKjnmoTkuovku7bln7rnsbvvvIznu6fmib/mraTnsbvnmoTlr7nlupTnsbvlsIbojrflj5ZhZGRMaXN0ZW5lcixyZW1vdmVMaXN0ZW5lcixmaXJlRXZlbnTmlrnms5XjgIJcclxuXHQgKiDlnKhVReS4re+8jEVkaXRvcuS7peWPiuaJgOaciXVp5a6e5L6L6YO957un5om/5LqG6K+l57G777yM5pWF5Y+v5Lul5Zyo5a+55bqU55qEdWnlr7nosaHku6Xlj4plZGl0b3Llr7nosaHkuIrkvb/nlKjkuIrov7Dmlrnms5XjgIJcclxuXHQgKiBAdW5maWxlXHJcblx0ICogQG1vZHVsZSBVRVxyXG5cdCAqIEBjbGFzcyBFdmVudEJhc2VcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog6YCa6L+H5q2k5p6E6YCg5Zmo77yM5a2Q57G75Y+v5Lul57un5om/RXZlbnRCYXNl6I635Y+W5LqL5Lu255uR5ZCs55qE5pa55rOVXHJcblx0ICogQGNvbnN0cnVjdG9yXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogVUUuRXZlbnRCYXNlLmNhbGwoZWRpdG9yKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHR2YXIgRXZlbnRCYXNlID0gVUUuRXZlbnRCYXNlID0gZnVuY3Rpb24gKCkge307XHJcblxyXG5cdEV2ZW50QmFzZS5wcm90b3R5cGUgPSB7XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5rOo5YaM5LqL5Lu255uR5ZCs5ZmoXHJcblx0ICAgICAqIEBtZXRob2QgYWRkTGlzdGVuZXJcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gdHlwZXMg55uR5ZCs55qE5LqL5Lu25ZCN56ew77yM5ZCM5pe255uR5ZCs5aSa5Liq5LqL5Lu25L2/55So56m65qC85YiG6ZqUXHJcblx0ICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZm4g55uR5ZCs55qE5LqL5Lu26KKr6Kem5Y+R5pe277yM5Lya5omn6KGM6K+l5Zue6LCD5Ye95pWwXHJcblx0ICAgICAqIEB3YWluaW5nIOS6i+S7tuiiq+inpuWPkeaXtu+8jOebkeWQrOeahOWHveaVsOWBh+Wmgui/lOWbnueahOWAvOaBkuetieS6jnRydWXvvIzlm57osIPlh73mlbDnmoTpmJ/liJfkuK3lkI7pnaLnmoTlh73mlbDlsIbkuI3miafooYxcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBlZGl0b3IuYWRkTGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsZnVuY3Rpb24oKXtcclxuXHQgICAgICogICAgICBjb25zb2xlLmxvZyhcIumAieWMuuW3sue7j+WPmOWMlu+8gVwiKTtcclxuXHQgICAgICogfSlcclxuXHQgICAgICogZWRpdG9yLmFkZExpc3RlbmVyKCdiZWZvcmVnZXRjb250ZW50IGFmdGVyZ2V0Y29udGVudCcsZnVuY3Rpb24odHlwZSl7XHJcblx0ICAgICAqICAgICAgICAgaWYodHlwZSA9PSAnYmVmb3JlZ2V0Y29udGVudCcpe1xyXG5cdCAgICAgKiAgICAgICAgICAgICAvL2RvIHNvbWV0aGluZ1xyXG5cdCAgICAgKiAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgKiAgICAgICAgICAgICAvL2RvIHNvbWV0aGluZ1xyXG5cdCAgICAgKiAgICAgICAgIH1cclxuXHQgICAgICogICAgICAgICBjb25zb2xlLmxvZyh0aGlzLmdldENvbnRlbnQpIC8vIHRoaXPmmK/ms6jlhoznmoTkuovku7bnmoTnvJbovpHlmajlrp7kvotcclxuXHQgICAgICogfSlcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqIEBzZWUgVUUuRXZlbnRCYXNlOmZpcmVFdmVudChTdHJpbmcpXHJcblx0ICAgICAqL1xyXG5cdCAgICBhZGRMaXN0ZW5lcjpmdW5jdGlvbiAodHlwZXMsIGxpc3RlbmVyKSB7XHJcblx0ICAgICAgICB0eXBlcyA9IHV0aWxzLnRyaW0odHlwZXMpLnNwbGl0KC9cXHMrLyk7XHJcblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgdGk7IHRpID0gdHlwZXNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICBnZXRMaXN0ZW5lcih0aGlzLCB0aSwgdHJ1ZSkucHVzaChsaXN0ZW5lcik7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICBvbiA6IGZ1bmN0aW9uKHR5cGVzLCBsaXN0ZW5lcil7XHJcblx0ICAgICAgcmV0dXJuIHRoaXMuYWRkTGlzdGVuZXIodHlwZXMsbGlzdGVuZXIpO1xyXG5cdCAgICB9LFxyXG5cdCAgICBvZmYgOiBmdW5jdGlvbih0eXBlcywgbGlzdGVuZXIpe1xyXG5cdCAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZXMsIGxpc3RlbmVyKVxyXG5cdCAgICB9LFxyXG5cdCAgICB0cmlnZ2VyOmZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5maXJlRXZlbnQuYXBwbHkodGhpcyxhcmd1bWVudHMpO1xyXG5cdCAgICB9LFxyXG5cdCAgICAvKipcclxuXHQgICAgICog56e76Zmk5LqL5Lu255uR5ZCs5ZmoXHJcblx0ICAgICAqIEBtZXRob2QgcmVtb3ZlTGlzdGVuZXJcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gdHlwZXMg56e76Zmk55qE5LqL5Lu25ZCN56ew77yM5ZCM5pe256e76Zmk5aSa5Liq5LqL5Lu25L2/55So56m65qC85YiG6ZqUXHJcblx0ICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZm4g56e76Zmk55uR5ZCs5LqL5Lu255qE5Ye95pWw5byV55SoXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogLy9jaGFuZ2VDYWxsYmFja+S4uuaWueazleS9k1xyXG5cdCAgICAgKiBlZGl0b3IucmVtb3ZlTGlzdGVuZXIoXCJzZWxlY3Rpb25jaGFuZ2VcIixjaGFuZ2VDYWxsYmFjayk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgcmVtb3ZlTGlzdGVuZXI6ZnVuY3Rpb24gKHR5cGVzLCBsaXN0ZW5lcikge1xyXG5cdCAgICAgICAgdHlwZXMgPSB1dGlscy50cmltKHR5cGVzKS5zcGxpdCgvXFxzKy8pO1xyXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRpOyB0aSA9IHR5cGVzW2krK107KSB7XHJcblx0ICAgICAgICAgICAgdXRpbHMucmVtb3ZlSXRlbShnZXRMaXN0ZW5lcih0aGlzLCB0aSkgfHwgW10sIGxpc3RlbmVyKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDop6blj5Hkuovku7ZcclxuXHQgICAgICogQG1ldGhvZCBmaXJlRXZlbnRcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gdHlwZXMg6Kem5Y+R55qE5LqL5Lu25ZCN56ew77yM5ZCM5pe26Kem5Y+R5aSa5Liq5LqL5Lu25L2/55So56m65qC85YiG6ZqUXHJcblx0ICAgICAqIEByZW1pbmQg6K+l5pa55rOV5Lya6Kem5Y+RYWRkTGlzdGVuZXJcclxuXHQgICAgICogQHJldHVybiB7ICogfSDov5Tlm57op6blj5Hkuovku7bnmoTpmJ/liJfkuK3vvIzmnIDlkI7miafooYznmoTlm57osIPlh73mlbDnmoTov5Tlm57lgLxcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBlZGl0b3IuZmlyZUV2ZW50KFwic2VsZWN0aW9uY2hhbmdlXCIpO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog6Kem5Y+R5LqL5Lu2XHJcblx0ICAgICAqIEBtZXRob2QgZmlyZUV2ZW50XHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IHR5cGVzIOinpuWPkeeahOS6i+S7tuWQjeensO+8jOWQjOaXtuinpuWPkeWkmuS4quS6i+S7tuS9v+eUqOepuuagvOWIhumalFxyXG5cdCAgICAgKiBAcGFyYW0geyAqLi4uIH0gb3B0aW9ucyDlj6/pgInlj4LmlbDvvIzlj6/ku6XkvKDlhaXkuIDkuKrmiJblpJrkuKrlj4LmlbDvvIzkvJrkvKDnu5nkuovku7bop6blj5HnmoTlm57osIPlh73mlbBcclxuXHQgICAgICogQHJldHVybiB7ICogfSDov5Tlm57op6blj5Hkuovku7bnmoTpmJ/liJfkuK3vvIzmnIDlkI7miafooYznmoTlm57osIPlh73mlbDnmoTov5Tlm57lgLxcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBlZGl0b3IuYWRkTGlzdGVuZXIoIFwic2VsZWN0aW9uY2hhbmdlXCIsIGZ1bmN0aW9uICggdHlwZSwgYXJnMSwgYXJnMiApIHtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBhcmcxICsgXCIgXCIgKyBhcmcyICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIH0gKTtcclxuXHQgICAgICpcclxuXHQgICAgICogLy/op6blj5FzZWxlY3Rpb25jaGFuZ2Xkuovku7bvvIwg5Lya5omn6KGM5LiK6Z2i55qE5LqL5Lu255uR5ZCs5ZmoXHJcblx0ICAgICAqIC8vb3V0cHV0OiBIZWxsbyBXb3JsZFxyXG5cdCAgICAgKiBlZGl0b3IuZmlyZUV2ZW50KFwic2VsZWN0aW9uY2hhbmdlXCIsIFwiSGVsbG9cIiwgXCJXb3JsZFwiKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBmaXJlRXZlbnQ6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHR5cGVzID0gYXJndW1lbnRzWzBdO1xyXG5cdCAgICAgICAgdHlwZXMgPSB1dGlscy50cmltKHR5cGVzKS5zcGxpdCgnICcpO1xyXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRpOyB0aSA9IHR5cGVzW2krK107KSB7XHJcblx0ICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IGdldExpc3RlbmVyKHRoaXMsIHRpKSxcclxuXHQgICAgICAgICAgICAgICAgciwgdCwgaztcclxuXHQgICAgICAgICAgICBpZiAobGlzdGVuZXJzKSB7XHJcblx0ICAgICAgICAgICAgICAgIGsgPSBsaXN0ZW5lcnMubGVuZ3RoO1xyXG5cdCAgICAgICAgICAgICAgICB3aGlsZSAoay0tKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZighbGlzdGVuZXJzW2tdKWNvbnRpbnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdCA9IGxpc3RlbmVyc1trXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYodCA9PT0gdHJ1ZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodCAhPT0gdW5kZWZpbmVkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgciA9IHQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKHQgPSB0aGlzWydvbicgKyB0aS50b0xvd2VyQ2FzZSgpXSkge1xyXG5cdCAgICAgICAgICAgICAgICByID0gdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiByO1xyXG5cdCAgICB9XHJcblx0fTtcclxuXHQvKipcclxuXHQgKiDojrflvpflr7nosaHmiYDmi6XmnInnm5HlkKznsbvlnovnmoTmiYDmnInnm5HlkKzlmahcclxuXHQgKiBAdW5maWxlXHJcblx0ICogQG1vZHVsZSBVRVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICogQG1ldGhvZCBnZXRMaXN0ZW5lclxyXG5cdCAqIEBwdWJsaWNcclxuXHQgKiBAcGFyYW0geyBPYmplY3QgfSBvYmogIOafpeivouebkeWQrOWZqOeahOWvueixoVxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IHR5cGUg5LqL5Lu257G75Z6LXHJcblx0ICogQHBhcmFtIHsgQm9vbGVhbiB9IGZvcmNlICDkuLp0cnVl5LiU5b2T5YmN5omA5pyJdHlwZeexu+Wei+eahOS+puWQrOWZqOS4jeWtmOWcqOaXtu+8jOWIm+W7uuS4gOS4quepuuebkeWQrOWZqOaVsOe7hFxyXG5cdCAqIEByZXR1cm4geyBBcnJheSB9IOebkeWQrOWZqOaVsOe7hFxyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIGdldExpc3RlbmVyKG9iaiwgdHlwZSwgZm9yY2UpIHtcclxuXHQgICAgdmFyIGFsbExpc3RlbmVycztcclxuXHQgICAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcclxuXHQgICAgcmV0dXJuICggKCBhbGxMaXN0ZW5lcnMgPSAoIG9iai5fX2FsbExpc3RlbmVycyB8fCBmb3JjZSAmJiAoIG9iai5fX2FsbExpc3RlbmVycyA9IHt9ICkgKSApXHJcblx0ICAgICAgICAmJiAoIGFsbExpc3RlbmVyc1t0eXBlXSB8fCBmb3JjZSAmJiAoIGFsbExpc3RlbmVyc1t0eXBlXSA9IFtdICkgKSApO1xyXG5cdH1cclxuXHJcblxyXG5cclxuXHQvLyBjb3JlL2R0ZC5qc1xyXG5cdC8vL2ltcG9ydCBlZGl0b3IuanNcclxuXHQvLy9pbXBvcnQgY29yZS9kb20vZG9tLmpzXHJcblx0Ly8vaW1wb3J0IGNvcmUvdXRpbHMuanNcclxuXHQvKipcclxuXHQgKiBkdGQgaHRtbOivreS5ieWMlueahOS9k+eOsOexu1xyXG5cdCAqIEBjb25zdHJ1Y3RvclxyXG5cdCAqIEBuYW1lc3BhY2UgZHRkXHJcblx0ICovXHJcblx0dmFyIGR0ZCA9IGRvbS5kdGQgPSAoZnVuY3Rpb24oKSB7XHJcblx0ICAgIGZ1bmN0aW9uIF8oIHMgKSB7XHJcblx0ICAgICAgICBmb3IgKHZhciBrIGluIHMpIHtcclxuXHQgICAgICAgICAgICBzW2sudG9VcHBlckNhc2UoKV0gPSBzW2tdO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHM7XHJcblx0ICAgIH1cclxuXHQgICAgdmFyIFggPSB1dGlscy5leHRlbmQyO1xyXG5cdCAgICB2YXIgQSA9IF8oe2lzaW5kZXg6MSxmaWVsZHNldDoxfSksXHJcblx0ICAgICAgICBCID0gXyh7aW5wdXQ6MSxidXR0b246MSxzZWxlY3Q6MSx0ZXh0YXJlYToxLGxhYmVsOjF9KSxcclxuXHQgICAgICAgIEMgPSBYKCBfKHthOjF9KSwgQiApLFxyXG5cdCAgICAgICAgRCA9IFgoIHtpZnJhbWU6MX0sIEMgKSxcclxuXHQgICAgICAgIEUgPSBfKHtocjoxLHVsOjEsbWVudToxLGRpdjoxLGJsb2NrcXVvdGU6MSxub3NjcmlwdDoxLHRhYmxlOjEsY2VudGVyOjEsYWRkcmVzczoxLGRpcjoxLHByZToxLGg1OjEsZGw6MSxoNDoxLG5vZnJhbWVzOjEsaDY6MSxvbDoxLGgxOjEsaDM6MSxoMjoxfSksXHJcblx0ICAgICAgICBGID0gXyh7aW5zOjEsZGVsOjEsc2NyaXB0OjEsc3R5bGU6MX0pLFxyXG5cdCAgICAgICAgRyA9IFgoIF8oe2I6MSxhY3JvbnltOjEsYmRvOjEsJ3Zhcic6MSwnIyc6MSxhYmJyOjEsY29kZToxLGJyOjEsaToxLGNpdGU6MSxrYmQ6MSx1OjEsc3RyaWtlOjEsczoxLHR0OjEsc3Ryb25nOjEscToxLHNhbXA6MSxlbToxLGRmbjoxLHNwYW46MX0pLCBGICksXHJcblx0ICAgICAgICBIID0gWCggXyh7c3ViOjEsaW1nOjEsZW1iZWQ6MSxvYmplY3Q6MSxzdXA6MSxiYXNlZm9udDoxLG1hcDoxLGFwcGxldDoxLGZvbnQ6MSxiaWc6MSxzbWFsbDoxfSksIEcgKSxcclxuXHQgICAgICAgIEkgPSBYKCBfKHtwOjF9KSwgSCApLFxyXG5cdCAgICAgICAgSiA9IFgoIF8oe2lmcmFtZToxfSksIEgsIEIgKSxcclxuXHQgICAgICAgIEsgPSBfKHtpbWc6MSxlbWJlZDoxLG5vc2NyaXB0OjEsYnI6MSxrYmQ6MSxjZW50ZXI6MSxidXR0b246MSxiYXNlZm9udDoxLGg1OjEsaDQ6MSxzYW1wOjEsaDY6MSxvbDoxLGgxOjEsaDM6MSxoMjoxLGZvcm06MSxmb250OjEsJyMnOjEsc2VsZWN0OjEsbWVudToxLGluczoxLGFiYnI6MSxsYWJlbDoxLGNvZGU6MSx0YWJsZToxLHNjcmlwdDoxLGNpdGU6MSxpbnB1dDoxLGlmcmFtZToxLHN0cm9uZzoxLHRleHRhcmVhOjEsbm9mcmFtZXM6MSxiaWc6MSxzbWFsbDoxLHNwYW46MSxocjoxLHN1YjoxLGJkbzoxLCd2YXInOjEsZGl2OjEsb2JqZWN0OjEsc3VwOjEsc3RyaWtlOjEsZGlyOjEsbWFwOjEsZGw6MSxhcHBsZXQ6MSxkZWw6MSxpc2luZGV4OjEsZmllbGRzZXQ6MSx1bDoxLGI6MSxhY3JvbnltOjEsYToxLGJsb2NrcXVvdGU6MSxpOjEsdToxLHM6MSx0dDoxLGFkZHJlc3M6MSxxOjEscHJlOjEscDoxLGVtOjEsZGZuOjF9KSxcclxuXHJcblx0ICAgICAgICBMID0gWCggXyh7YTowfSksIEogKSwvL2HkuI3og73ooqvliIflvIDvvIzmiYDku6Xmiorku5ZcclxuXHQgICAgICAgIE0gPSBfKHt0cjoxfSksXHJcblx0ICAgICAgICBOID0gXyh7JyMnOjF9KSxcclxuXHQgICAgICAgIE8gPSBYKCBfKHtwYXJhbToxfSksIEsgKSxcclxuXHQgICAgICAgIFAgPSBYKCBfKHtmb3JtOjF9KSwgQSwgRCwgRSwgSSApLFxyXG5cdCAgICAgICAgUSA9IF8oe2xpOjEsb2w6MSx1bDoxfSksXHJcblx0ICAgICAgICBSID0gXyh7c3R5bGU6MSxzY3JpcHQ6MX0pLFxyXG5cdCAgICAgICAgUyA9IF8oe2Jhc2U6MSxsaW5rOjEsbWV0YToxLHRpdGxlOjF9KSxcclxuXHQgICAgICAgIFQgPSBYKCBTLCBSICksXHJcblx0ICAgICAgICBVID0gXyh7aGVhZDoxLGJvZHk6MX0pLFxyXG5cdCAgICAgICAgViA9IF8oe2h0bWw6MX0pO1xyXG5cclxuXHQgICAgdmFyIGJsb2NrID0gXyh7YWRkcmVzczoxLGJsb2NrcXVvdGU6MSxjZW50ZXI6MSxkaXI6MSxkaXY6MSxkbDoxLGZpZWxkc2V0OjEsZm9ybToxLGgxOjEsaDI6MSxoMzoxLGg0OjEsaDU6MSxoNjoxLGhyOjEsaXNpbmRleDoxLG1lbnU6MSxub2ZyYW1lczoxLG9sOjEscDoxLHByZToxLHRhYmxlOjEsdWw6MX0pLFxyXG5cclxuXHQgICAgICAgIGVtcHR5ID0gIF8oe2FyZWE6MSxiYXNlOjEsYmFzZWZvbnQ6MSxicjoxLGNvbDoxLGNvbW1hbmQ6MSxkaWFsb2c6MSxlbWJlZDoxLGhyOjEsaW1nOjEsaW5wdXQ6MSxpc2luZGV4OjEsa2V5Z2VuOjEsbGluazoxLG1ldGE6MSxwYXJhbToxLHNvdXJjZToxLHRyYWNrOjEsd2JyOjF9KTtcclxuXHJcblx0ICAgIHJldHVybiAgXyh7XHJcblxyXG5cdCAgICAgICAgLy8gJCDooajnpLroh6rlrprnmoTlsZ7mgKdcclxuXHJcblx0ICAgICAgICAvLyBib2R55aSW55qE5YWD57Sg5YiX6KGoLlxyXG5cdCAgICAgICAgJG5vbkJvZHlDb250ZW50OiBYKCBWLCBVLCBTICksXHJcblxyXG5cdCAgICAgICAgLy/lnZfnu5PmnoTlhYPntKDliJfooahcclxuXHQgICAgICAgICRibG9jayA6IGJsb2NrLFxyXG5cclxuXHQgICAgICAgIC8v5YaF6IGU5YWD57Sg5YiX6KGoXHJcblx0ICAgICAgICAkaW5saW5lIDogTCxcclxuXHJcblx0ICAgICAgICAkaW5saW5lV2l0aEEgOiBYKF8oe2E6MX0pLEwpLFxyXG5cclxuXHQgICAgICAgICRib2R5IDogWCggXyh7c2NyaXB0OjEsc3R5bGU6MX0pLCBibG9jayApLFxyXG5cclxuXHQgICAgICAgICRjZGF0YSA6IF8oe3NjcmlwdDoxLHN0eWxlOjF9KSxcclxuXHJcblx0ICAgICAgICAvL+iHqumXreWSjOWFg+e0oFxyXG5cdCAgICAgICAgJGVtcHR5IDogZW1wdHksXHJcblxyXG5cdCAgICAgICAgLy/kuI3mmK/oh6rpl63lkIjvvIzkvYbkuI3og73orqlyYW5nZemAieS4remHjOi+uVxyXG5cdCAgICAgICAgJG5vbkNoaWxkIDogXyh7aWZyYW1lOjEsdGV4dGFyZWE6MX0pLFxyXG5cdCAgICAgICAgLy/liJfooajlhYPntKDliJfooahcclxuXHQgICAgICAgICRsaXN0SXRlbSA6IF8oe2RkOjEsZHQ6MSxsaToxfSksXHJcblxyXG5cdCAgICAgICAgLy/liJfooajmoLnlhYPntKDliJfooahcclxuXHQgICAgICAgICRsaXN0OiBfKHt1bDoxLG9sOjEsZGw6MX0pLFxyXG5cclxuXHQgICAgICAgIC8v5LiN6IO96K6k5Li65piv56m655qE5YWD57SgXHJcblx0ICAgICAgICAkaXNOb3RFbXB0eSA6IF8oe3RhYmxlOjEsdWw6MSxvbDoxLGRsOjEsaWZyYW1lOjEsYXJlYToxLGJhc2U6MSxjb2w6MSxocjoxLGltZzoxLGVtYmVkOjEsaW5wdXQ6MSxsaW5rOjEsbWV0YToxLHBhcmFtOjEsaDE6MSxoMjoxLGgzOjEsaDQ6MSxoNToxLGg2OjF9KSxcclxuXHJcblx0ICAgICAgICAvL+WmguaenOayoeacieWtkOiKgueCueWwseWPr+S7peWIoOmZpOeahOWFg+e0oOWIl+ihqO+8jOWDj3NwYW4sYVxyXG5cdCAgICAgICAgJHJlbW92ZUVtcHR5IDogXyh7YToxLGFiYnI6MSxhY3JvbnltOjEsYWRkcmVzczoxLGI6MSxiZG86MSxiaWc6MSxjaXRlOjEsY29kZToxLGRlbDoxLGRmbjoxLGVtOjEsZm9udDoxLGk6MSxpbnM6MSxsYWJlbDoxLGtiZDoxLHE6MSxzOjEsc2FtcDoxLHNtYWxsOjEsc3BhbjoxLHN0cmlrZToxLHN0cm9uZzoxLHN1YjoxLHN1cDoxLHR0OjEsdToxLCd2YXInOjF9KSxcclxuXHJcblx0ICAgICAgICAkcmVtb3ZlRW1wdHlCbG9jayA6IF8oeydwJzoxLCdkaXYnOjF9KSxcclxuXHJcblx0ICAgICAgICAvL+WcqHRhYmxl5YWD57Sg6YeM55qE5YWD57Sg5YiX6KGoXHJcblx0ICAgICAgICAkdGFibGVDb250ZW50IDogXyh7Y2FwdGlvbjoxLGNvbDoxLGNvbGdyb3VwOjEsdGJvZHk6MSx0ZDoxLHRmb290OjEsdGg6MSx0aGVhZDoxLHRyOjEsdGFibGU6MX0pLFxyXG5cdCAgICAgICAgLy/kuI3ovazmjaLnmoTmoIfnrb5cclxuXHQgICAgICAgICRub3RUcmFuc0NvbnRlbnQgOiBfKHtwcmU6MSxzY3JpcHQ6MSxzdHlsZToxLHRleHRhcmVhOjF9KSxcclxuXHQgICAgICAgIGh0bWw6IFUsXHJcblx0ICAgICAgICBoZWFkOiBULFxyXG5cdCAgICAgICAgc3R5bGU6IE4sXHJcblx0ICAgICAgICBzY3JpcHQ6IE4sXHJcblx0ICAgICAgICBib2R5OiBQLFxyXG5cdCAgICAgICAgYmFzZToge30sXHJcblx0ICAgICAgICBsaW5rOiB7fSxcclxuXHQgICAgICAgIG1ldGE6IHt9LFxyXG5cdCAgICAgICAgdGl0bGU6IE4sXHJcblx0ICAgICAgICBjb2wgOiB7fSxcclxuXHQgICAgICAgIHRyIDogXyh7dGQ6MSx0aDoxfSksXHJcblx0ICAgICAgICBpbWcgOiB7fSxcclxuXHQgICAgICAgIGVtYmVkOiB7fSxcclxuXHQgICAgICAgIGNvbGdyb3VwIDogXyh7dGhlYWQ6MSxjb2w6MSx0Ym9keToxLHRyOjEsdGZvb3Q6MX0pLFxyXG5cdCAgICAgICAgbm9zY3JpcHQgOiBQLFxyXG5cdCAgICAgICAgdGQgOiBQLFxyXG5cdCAgICAgICAgYnIgOiB7fSxcclxuXHQgICAgICAgIHRoIDogUCxcclxuXHQgICAgICAgIGNlbnRlciA6IFAsXHJcblx0ICAgICAgICBrYmQgOiBMLFxyXG5cdCAgICAgICAgYnV0dG9uIDogWCggSSwgRSApLFxyXG5cdCAgICAgICAgYmFzZWZvbnQgOiB7fSxcclxuXHQgICAgICAgIGg1IDogTCxcclxuXHQgICAgICAgIGg0IDogTCxcclxuXHQgICAgICAgIHNhbXAgOiBMLFxyXG5cdCAgICAgICAgaDYgOiBMLFxyXG5cdCAgICAgICAgb2wgOiBRLFxyXG5cdCAgICAgICAgaDEgOiBMLFxyXG5cdCAgICAgICAgaDMgOiBMLFxyXG5cdCAgICAgICAgb3B0aW9uIDogTixcclxuXHQgICAgICAgIGgyIDogTCxcclxuXHQgICAgICAgIGZvcm0gOiBYKCBBLCBELCBFLCBJICksXHJcblx0ICAgICAgICBzZWxlY3QgOiBfKHtvcHRncm91cDoxLG9wdGlvbjoxfSksXHJcblx0ICAgICAgICBmb250IDogTCxcclxuXHQgICAgICAgIGlucyA6IEwsXHJcblx0ICAgICAgICBtZW51IDogUSxcclxuXHQgICAgICAgIGFiYnIgOiBMLFxyXG5cdCAgICAgICAgbGFiZWwgOiBMLFxyXG5cdCAgICAgICAgdGFibGUgOiBfKHt0aGVhZDoxLGNvbDoxLHRib2R5OjEsdHI6MSxjb2xncm91cDoxLGNhcHRpb246MSx0Zm9vdDoxfSksXHJcblx0ICAgICAgICBjb2RlIDogTCxcclxuXHQgICAgICAgIHRmb290IDogTSxcclxuXHQgICAgICAgIGNpdGUgOiBMLFxyXG5cdCAgICAgICAgbGkgOiBQLFxyXG5cdCAgICAgICAgaW5wdXQgOiB7fSxcclxuXHQgICAgICAgIGlmcmFtZSA6IFAsXHJcblx0ICAgICAgICBzdHJvbmcgOiBMLFxyXG5cdCAgICAgICAgdGV4dGFyZWEgOiBOLFxyXG5cdCAgICAgICAgbm9mcmFtZXMgOiBQLFxyXG5cdCAgICAgICAgYmlnIDogTCxcclxuXHQgICAgICAgIHNtYWxsIDogTCxcclxuXHQgICAgICAgIC8vdHJhY2U6XHJcblx0ICAgICAgICBzcGFuIDpfKHsnIyc6MSxicjoxLGI6MSxzdHJvbmc6MSx1OjEsaToxLGVtOjEsc3ViOjEsc3VwOjEsc3RyaWtlOjEsc3BhbjoxfSksXHJcblx0ICAgICAgICBociA6IEwsXHJcblx0ICAgICAgICBkdCA6IEwsXHJcblx0ICAgICAgICBzdWIgOiBMLFxyXG5cdCAgICAgICAgb3B0Z3JvdXAgOiBfKHtvcHRpb246MX0pLFxyXG5cdCAgICAgICAgcGFyYW0gOiB7fSxcclxuXHQgICAgICAgIGJkbyA6IEwsXHJcblx0ICAgICAgICAndmFyJyA6IEwsXHJcblx0ICAgICAgICBkaXYgOiBQLFxyXG5cdCAgICAgICAgb2JqZWN0IDogTyxcclxuXHQgICAgICAgIHN1cCA6IEwsXHJcblx0ICAgICAgICBkZCA6IFAsXHJcblx0ICAgICAgICBzdHJpa2UgOiBMLFxyXG5cdCAgICAgICAgYXJlYSA6IHt9LFxyXG5cdCAgICAgICAgZGlyIDogUSxcclxuXHQgICAgICAgIG1hcCA6IFgoIF8oe2FyZWE6MSxmb3JtOjEscDoxfSksIEEsIEYsIEUgKSxcclxuXHQgICAgICAgIGFwcGxldCA6IE8sXHJcblx0ICAgICAgICBkbCA6IF8oe2R0OjEsZGQ6MX0pLFxyXG5cdCAgICAgICAgZGVsIDogTCxcclxuXHQgICAgICAgIGlzaW5kZXggOiB7fSxcclxuXHQgICAgICAgIGZpZWxkc2V0IDogWCggXyh7bGVnZW5kOjF9KSwgSyApLFxyXG5cdCAgICAgICAgdGhlYWQgOiBNLFxyXG5cdCAgICAgICAgdWwgOiBRLFxyXG5cdCAgICAgICAgYWNyb255bSA6IEwsXHJcblx0ICAgICAgICBiIDogTCxcclxuXHQgICAgICAgIGEgOiBYKCBfKHthOjF9KSwgSiApLFxyXG5cdCAgICAgICAgYmxvY2txdW90ZSA6WChfKHt0ZDoxLHRyOjEsdGJvZHk6MSxsaToxfSksUCksXHJcblx0ICAgICAgICBjYXB0aW9uIDogTCxcclxuXHQgICAgICAgIGkgOiBMLFxyXG5cdCAgICAgICAgdSA6IEwsXHJcblx0ICAgICAgICB0Ym9keSA6IE0sXHJcblx0ICAgICAgICBzIDogTCxcclxuXHQgICAgICAgIGFkZHJlc3MgOiBYKCBELCBJICksXHJcblx0ICAgICAgICB0dCA6IEwsXHJcblx0ICAgICAgICBsZWdlbmQgOiBMLFxyXG5cdCAgICAgICAgcSA6IEwsXHJcblx0ICAgICAgICBwcmUgOiBYKCBHLCBDICksXHJcblx0ICAgICAgICBwIDogWChfKHsnYSc6MX0pLEwpLFxyXG5cdCAgICAgICAgZW0gOkwsXHJcblx0ICAgICAgICBkZm4gOiBMXHJcblx0ICAgIH0pO1xyXG5cdH0pKCk7XHJcblxyXG5cclxuXHQvLyBjb3JlL2RvbVV0aWxzLmpzXHJcblx0LyoqXHJcblx0ICogRG9t5pON5L2c5bel5YW35YyFXHJcblx0ICogQGZpbGVcclxuXHQgKiBAbW9kdWxlIFVFLmRvbS5kb21VdGlsc1xyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIERvbeaTjeS9nOW3peWFt+WMhVxyXG5cdCAqIEB1bmZpbGVcclxuXHQgKiBAbW9kdWxlIFVFLmRvbS5kb21VdGlsc1xyXG5cdCAqL1xyXG5cdGZ1bmN0aW9uIGdldERvbU5vZGUobm9kZSwgc3RhcnQsIGx0ciwgc3RhcnRGcm9tQ2hpbGQsIGZuLCBndWFyZCkge1xyXG5cdCAgICB2YXIgdG1wTm9kZSA9IHN0YXJ0RnJvbUNoaWxkICYmIG5vZGVbc3RhcnRdLFxyXG5cdCAgICAgICAgcGFyZW50O1xyXG5cdCAgICAhdG1wTm9kZSAmJiAodG1wTm9kZSA9IG5vZGVbbHRyXSk7XHJcblx0ICAgIHdoaWxlICghdG1wTm9kZSAmJiAocGFyZW50ID0gKHBhcmVudCB8fCBub2RlKS5wYXJlbnROb2RlKSkge1xyXG5cdCAgICAgICAgaWYgKHBhcmVudC50YWdOYW1lID09ICdCT0RZJyB8fCBndWFyZCAmJiAhZ3VhcmQocGFyZW50KSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdG1wTm9kZSA9IHBhcmVudFtsdHJdO1xyXG5cdCAgICB9XHJcblx0ICAgIGlmICh0bXBOb2RlICYmIGZuICYmICFmbih0bXBOb2RlKSkge1xyXG5cdCAgICAgICAgcmV0dXJuICBnZXREb21Ob2RlKHRtcE5vZGUsIHN0YXJ0LCBsdHIsIGZhbHNlLCBmbik7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIHRtcE5vZGU7XHJcblx0fVxyXG5cdHZhciBhdHRyRml4ID0gaWUgJiYgYnJvd3Nlci52ZXJzaW9uIDwgOSA/IHtcclxuXHQgICAgICAgIHRhYmluZGV4OlwidGFiSW5kZXhcIixcclxuXHQgICAgICAgIHJlYWRvbmx5OlwicmVhZE9ubHlcIixcclxuXHQgICAgICAgIFwiZm9yXCI6XCJodG1sRm9yXCIsXHJcblx0ICAgICAgICBcImNsYXNzXCI6XCJjbGFzc05hbWVcIixcclxuXHQgICAgICAgIG1heGxlbmd0aDpcIm1heExlbmd0aFwiLFxyXG5cdCAgICAgICAgY2VsbHNwYWNpbmc6XCJjZWxsU3BhY2luZ1wiLFxyXG5cdCAgICAgICAgY2VsbHBhZGRpbmc6XCJjZWxsUGFkZGluZ1wiLFxyXG5cdCAgICAgICAgcm93c3BhbjpcInJvd1NwYW5cIixcclxuXHQgICAgICAgIGNvbHNwYW46XCJjb2xTcGFuXCIsXHJcblx0ICAgICAgICB1c2VtYXA6XCJ1c2VNYXBcIixcclxuXHQgICAgICAgIGZyYW1lYm9yZGVyOlwiZnJhbWVCb3JkZXJcIlxyXG5cdCAgICB9IDoge1xyXG5cdCAgICAgICAgdGFiaW5kZXg6XCJ0YWJJbmRleFwiLFxyXG5cdCAgICAgICAgcmVhZG9ubHk6XCJyZWFkT25seVwiXHJcblx0ICAgIH0sXHJcblx0ICAgIHN0eWxlQmxvY2sgPSB1dGlscy5saXN0VG9NYXAoW1xyXG5cdCAgICAgICAgJy13ZWJraXQtYm94JywgJy1tb3otYm94JywgJ2Jsb2NrJyAsXHJcblx0ICAgICAgICAnbGlzdC1pdGVtJyAsICd0YWJsZScgLCAndGFibGUtcm93LWdyb3VwJyAsXHJcblx0ICAgICAgICAndGFibGUtaGVhZGVyLWdyb3VwJywgJ3RhYmxlLWZvb3Rlci1ncm91cCcgLFxyXG5cdCAgICAgICAgJ3RhYmxlLXJvdycgLCAndGFibGUtY29sdW1uLWdyb3VwJyAsICd0YWJsZS1jb2x1bW4nICxcclxuXHQgICAgICAgICd0YWJsZS1jZWxsJyAsICd0YWJsZS1jYXB0aW9uJ1xyXG5cdCAgICBdKTtcclxuXHR2YXIgZG9tVXRpbHMgPSBkb20uZG9tVXRpbHMgPSB7XHJcblx0ICAgIC8v6IqC54K55bi46YePXHJcblx0ICAgIE5PREVfRUxFTUVOVDoxLFxyXG5cdCAgICBOT0RFX0RPQ1VNRU5UOjksXHJcblx0ICAgIE5PREVfVEVYVDozLFxyXG5cdCAgICBOT0RFX0NPTU1FTlQ6OCxcclxuXHQgICAgTk9ERV9ET0NVTUVOVF9GUkFHTUVOVDoxMSxcclxuXHJcblx0ICAgIC8v5L2N572u5YWz57O7XHJcblx0ICAgIFBPU0lUSU9OX0lERU5USUNBTDowLFxyXG5cdCAgICBQT1NJVElPTl9ESVNDT05ORUNURUQ6MSxcclxuXHQgICAgUE9TSVRJT05fRk9MTE9XSU5HOjIsXHJcblx0ICAgIFBPU0lUSU9OX1BSRUNFRElORzo0LFxyXG5cdCAgICBQT1NJVElPTl9JU19DT05UQUlORUQ6OCxcclxuXHQgICAgUE9TSVRJT05fQ09OVEFJTlM6MTYsXHJcblx0ICAgIC8vaWU25L2/55So5YW25LuW55qE5Lya5pyJ5LiA5q6156m655m95Ye6546wXHJcblx0ICAgIGZpbGxDaGFyOmllICYmIGJyb3dzZXIudmVyc2lvbiA9PSAnNicgPyAnXFx1ZmVmZicgOiAnXFx1MjAwQicsXHJcblx0ICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLU5vZGXpg6jliIYtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdCAgICBrZXlzOntcclxuXHQgICAgICAgIC8qQmFja3NwYWNlKi8gODoxLCAvKkRlbGV0ZSovIDQ2OjEsXHJcblx0ICAgICAgICAvKlNoaWZ0Ki8gMTY6MSwgLypDdHJsKi8gMTc6MSwgLypBbHQqLyAxODoxLFxyXG5cdCAgICAgICAgMzc6MSwgMzg6MSwgMzk6MSwgNDA6MSxcclxuXHQgICAgICAgIDEzOjEgLyplbnRlciovXHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDojrflj5boioLngrlB55u45a+55LqO6IqC54K5QueahOS9jee9ruWFs+ezu1xyXG5cdCAgICAgKiBAbWV0aG9kIGdldFBvc2l0aW9uXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlQSDpnIDopoHmn6Xor6LkvY3nva7lhbPns7vnmoToioLngrlBXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlQiDpnIDopoHmn6Xor6LkvY3nva7lhbPns7vnmoToioLngrlCXHJcblx0ICAgICAqIEByZXR1cm4geyBOdW1iZXIgfSDoioLngrlB5LiO6IqC54K5QueahOWFs+ezu1xyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIC8vb3V0cHV0OiAyMFxyXG5cdCAgICAgKiB2YXIgcG9zaXRpb24gPSBVRS5kb20uZG9tVXRpbHMuZ2V0UG9zaXRpb24oIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgZG9jdW1lbnQuYm9keSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBzd2l0Y2ggKCBwb3NpdGlvbiApIHtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgICAvLzBcclxuXHQgICAgICogICAgICBjYXNlIFVFLmRvbS5kb21VdGlscy5QT1NJVElPTl9JREVOVElDQUw6XHJcblx0ICAgICAqICAgICAgICAgIGNvbnNvbGUubG9nKCflhYPntKDnm7jlkIwnKTtcclxuXHQgICAgICogICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAqICAgICAgLy8xXHJcblx0ICAgICAqICAgICAgY2FzZSBVRS5kb20uZG9tVXRpbHMuUE9TSVRJT05fRElTQ09OTkVDVEVEOlxyXG5cdCAgICAgKiAgICAgICAgICBjb25zb2xlLmxvZygn5Lik5Liq6IqC54K55Zyo5LiN5ZCM55qE5paH5qGj5LitJyk7XHJcblx0ICAgICAqICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgKiAgICAgIC8vMlxyXG5cdCAgICAgKiAgICAgIGNhc2UgVUUuZG9tLmRvbVV0aWxzLlBPU0lUSU9OX0ZPTExPV0lORzpcclxuXHQgICAgICogICAgICAgICAgY29uc29sZS5sb2coJ+iKgueCuUHlnKjoioLngrlC5LmL5ZCOJyk7XHJcblx0ICAgICAqICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgKiAgICAgIC8vNFxyXG5cdCAgICAgKiAgICAgIGNhc2UgVUUuZG9tLmRvbVV0aWxzLlBPU0lUSU9OX1BSRUNFRElORztcclxuXHQgICAgICogICAgICAgICAgY29uc29sZS5sb2coJ+iKgueCuUHlnKjoioLngrlC5LmL5YmNJyk7XHJcblx0ICAgICAqICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgKiAgICAgIC8vOFxyXG5cdCAgICAgKiAgICAgIGNhc2UgVUUuZG9tLmRvbVV0aWxzLlBPU0lUSU9OX0lTX0NPTlRBSU5FRDpcclxuXHQgICAgICogICAgICAgICAgY29uc29sZS5sb2coJ+iKgueCuUHooqvoioLngrlC5YyF5ZCrJyk7XHJcblx0ICAgICAqICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgKiAgICAgIGNhc2UgMTA6XHJcblx0ICAgICAqICAgICAgICAgIGNvbnNvbGUubG9nKCfoioLngrlB6KKr6IqC54K5QuWMheWQq+S4lOiKgueCuUHlnKjoioLngrlC5LmL5ZCOJyk7XHJcblx0ICAgICAqICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgKiAgICAgIC8vMTZcclxuXHQgICAgICogICAgICBjYXNlIFVFLmRvbS5kb21VdGlscy5QT1NJVElPTl9DT05UQUlOUzpcclxuXHQgICAgICogICAgICAgICAgY29uc29sZS5sb2coJ+iKgueCuUHljIXlkKvoioLngrlCJyk7XHJcblx0ICAgICAqICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgKiAgICAgIGNhc2UgMjA6XHJcblx0ICAgICAqICAgICAgICAgIGNvbnNvbGUubG9nKCfoioLngrlB5YyF5ZCr6IqC54K5QuS4lOiKgueCuUHlnKjoioLngrlC5LmL5YmNJyk7XHJcblx0ICAgICAqICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiB9XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgZ2V0UG9zaXRpb246ZnVuY3Rpb24gKG5vZGVBLCBub2RlQikge1xyXG5cdCAgICAgICAgLy8g5aaC5p6c5Lik5Liq6IqC54K55piv5ZCM5LiA5Liq6IqC54K5XHJcblx0ICAgICAgICBpZiAobm9kZUEgPT09IG5vZGVCKSB7XHJcblx0ICAgICAgICAgICAgLy8gZG9tVXRpbHMuUE9TSVRJT05fSURFTlRJQ0FMXHJcblx0ICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgbm9kZSxcclxuXHQgICAgICAgICAgICBwYXJlbnRzQSA9IFtub2RlQV0sXHJcblx0ICAgICAgICAgICAgcGFyZW50c0IgPSBbbm9kZUJdO1xyXG5cdCAgICAgICAgbm9kZSA9IG5vZGVBO1xyXG5cdCAgICAgICAgd2hpbGUgKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpIHtcclxuXHQgICAgICAgICAgICAvLyDlpoLmnpxub2RlQuaYr25vZGVB55qE56WW5YWI6IqC54K5XHJcblx0ICAgICAgICAgICAgaWYgKG5vZGUgPT09IG5vZGVCKSB7XHJcblx0ICAgICAgICAgICAgICAgIC8vIGRvbVV0aWxzLlBPU0lUSU9OX0lTX0NPTlRBSU5FRCArIGRvbVV0aWxzLlBPU0lUSU9OX0ZPTExPV0lOR1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gMTA7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHBhcmVudHNBLnB1c2gobm9kZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBub2RlID0gbm9kZUI7XHJcblx0ICAgICAgICB3aGlsZSAobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkge1xyXG5cdCAgICAgICAgICAgIC8vIOWmguaenG5vZGVB5pivbm9kZULnmoTnpZblhYjoioLngrlcclxuXHQgICAgICAgICAgICBpZiAobm9kZSA9PT0gbm9kZUEpIHtcclxuXHQgICAgICAgICAgICAgICAgLy8gZG9tVXRpbHMuUE9TSVRJT05fQ09OVEFJTlMgKyBkb21VdGlscy5QT1NJVElPTl9QUkVDRURJTkdcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIDIwO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBwYXJlbnRzQi5wdXNoKG5vZGUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcGFyZW50c0EucmV2ZXJzZSgpO1xyXG5cdCAgICAgICAgcGFyZW50c0IucmV2ZXJzZSgpO1xyXG5cdCAgICAgICAgaWYgKHBhcmVudHNBWzBdICE9PSBwYXJlbnRzQlswXSkge1xyXG5cdCAgICAgICAgICAgIC8vIGRvbVV0aWxzLlBPU0lUSU9OX0RJU0NPTk5FQ1RFRFxyXG5cdCAgICAgICAgICAgIHJldHVybiAxO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIGkgPSAtMTtcclxuXHQgICAgICAgIHdoaWxlIChpKyssIHBhcmVudHNBW2ldID09PSBwYXJlbnRzQltpXSkge1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgbm9kZUEgPSBwYXJlbnRzQVtpXTtcclxuXHQgICAgICAgIG5vZGVCID0gcGFyZW50c0JbaV07XHJcblx0ICAgICAgICB3aGlsZSAobm9kZUEgPSBub2RlQS5uZXh0U2libGluZykge1xyXG5cdCAgICAgICAgICAgIGlmIChub2RlQSA9PT0gbm9kZUIpIHtcclxuXHQgICAgICAgICAgICAgICAgLy8gZG9tVXRpbHMuUE9TSVRJT05fUFJFQ0VESU5HXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiA0XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLy8gZG9tVXRpbHMuUE9TSVRJT05fRk9MTE9XSU5HXHJcblx0ICAgICAgICByZXR1cm4gIDI7XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5qOA5rWL6IqC54K5bm9kZeWcqOeItuiKgueCueS4reeahOe0ouW8leS9jee9rlxyXG5cdCAgICAgKiBAbWV0aG9kIGdldE5vZGVJbmRleFxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDpnIDopoHmo4DmtYvnmoToioLngrnlr7nosaFcclxuXHQgICAgICogQHJldHVybiB7IE51bWJlciB9IOivpeiKgueCueWcqOeItuiKgueCueS4reeahOS9jee9rlxyXG5cdCAgICAgKiBAc2VlIFVFLmRvbS5kb21VdGlscy5nZXROb2RlSW5kZXgoTm9kZSxCb29sZWFuKVxyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmo4DmtYvoioLngrlub2Rl5Zyo54i26IqC54K55Lit55qE57Si5byV5L2N572u77yMIOagueaNrue7meWumueahG1lcmdlVGV4dE5vZGXlj4LmlbDlhrPlrprmmK/lkKbopoHlkIjlubblpJrkuKrov57nu63nmoTmlofmnKzoioLngrnkuLrkuIDkuKroioLngrlcclxuXHQgICAgICogQG1ldGhvZCBnZXROb2RlSW5kZXhcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg6ZyA6KaB5qOA5rWL55qE6IqC54K55a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7IEJvb2xlYW4gfSBtZXJnZVRleHROb2RlIOaYr+WQpuWQiOW5tuWkmuS4qui/nue7reeahOaWh+acrOiKgueCueS4uuS4gOS4quiKgueCuVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgTnVtYmVyIH0g6K+l6IqC54K55Zyo54i26IqC54K55Lit55qE5L2N572uXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAgbm9kZS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIFwiaGVsbG9cIiApICk7XHJcblx0ICAgICAqICAgICAgbm9kZS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoIFwid29ybGRcIiApICk7XHJcblx0ICAgICAqICAgICAgbm9kZS5hcHBlbmRDaGlsZCggbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgIC8vb3V0cHV0OiAyXHJcblx0ICAgICAqICAgICAgY29uc29sZS5sb2coIFVFLmRvbS5kb21VdGlscy5nZXROb2RlSW5kZXgoIG5vZGUgKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgIC8vb3V0cHV0OiAxXHJcblx0ICAgICAqICAgICAgY29uc29sZS5sb2coIFVFLmRvbS5kb21VdGlscy5nZXROb2RlSW5kZXgoIG5vZGUsIHRydWUgKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGdldE5vZGVJbmRleDpmdW5jdGlvbiAobm9kZSwgaWdub3JlVGV4dE5vZGUpIHtcclxuXHQgICAgICAgIHZhciBwcmVOb2RlID0gbm9kZSxcclxuXHQgICAgICAgICAgICBpID0gMDtcclxuXHQgICAgICAgIHdoaWxlIChwcmVOb2RlID0gcHJlTm9kZS5wcmV2aW91c1NpYmxpbmcpIHtcclxuXHQgICAgICAgICAgICBpZiAoaWdub3JlVGV4dE5vZGUgJiYgcHJlTm9kZS5ub2RlVHlwZSA9PSAzKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmKHByZU5vZGUubm9kZVR5cGUgIT0gcHJlTm9kZS5uZXh0U2libGluZy5ub2RlVHlwZSApe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpKys7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gaTtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmo4DmtYvoioLngrlub2Rl5piv5ZCm5Zyo57uZ5a6a55qEZG9jdW1lbnTlr7nosaHkuIpcclxuXHQgICAgICogQG1ldGhvZCBpbkRvY1xyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDpnIDopoHmo4DmtYvnmoToioLngrnlr7nosaFcclxuXHQgICAgICogQHBhcmFtIHsgRG9tRG9jdW1lbnQgfSBkb2Mg6ZyA6KaB5qOA5rWL55qEZG9jdW1lbnTlr7nosaFcclxuXHQgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDor6XoioLngrlub2Rl5piv5ZCm5Zyo57uZ5a6a55qEZG9jdW1lbnTnmoRkb23moJHkuIpcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vb3V0cHV0OiBmYWxzZVxyXG5cdCAgICAgKiBjb25zb2xlLmxvZyggVUUuZG8uZG9tVXRpbHMuaW5Eb2MoIG5vZGUsIGRvY3VtZW50ICkgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCggbm9kZSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL291dHB1dDogdHJ1ZVxyXG5cdCAgICAgKiBjb25zb2xlLmxvZyggVUUuZG8uZG9tVXRpbHMuaW5Eb2MoIG5vZGUsIGRvY3VtZW50ICkgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBpbkRvYzpmdW5jdGlvbiAobm9kZSwgZG9jKSB7XHJcblx0ICAgICAgICByZXR1cm4gZG9tVXRpbHMuZ2V0UG9zaXRpb24obm9kZSwgZG9jKSA9PSAxMDtcclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOagueaNrue7meWumueahOi/h+a7pOinhOWImWZpbHRlckZu77yMIOafpeaJvuespuWQiOivpei/h+a7pOinhOWImeeahG5vZGXoioLngrnnmoTnrKzkuIDkuKrnpZblhYjoioLngrnvvIxcclxuXHQgICAgICog5p+l5om+55qE6LW354K55piv57uZ5a6abm9kZeiKgueCueeahOeItuiKgueCueOAglxyXG5cdCAgICAgKiBAbWV0aG9kIGZpbmRQYXJlbnRcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg6ZyA6KaB5p+l5om+55qE6IqC54K5XHJcblx0ICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZmlsdGVyRm4g6Ieq5a6a5LmJ55qE6L+H5ruk5pa55rOV44CCXHJcblx0ICAgICAqIEB3YXJuaW5nIOafpeaJvueahOe7iOeCueaYr+WIsGJvZHnoioLngrnkuLrmraJcclxuXHQgICAgICogQHJlbWluZCDoh6rlrprkuYnnmoTov4fmu6Tmlrnms5VmaWx0ZXJGbuaOpeWPl+S4gOS4qk5vZGXlr7nosaHkvZzkuLrlj4LmlbDvvIwg6K+l5a+56LGh5Luj6KGo5b2T5YmN5omn6KGM5qOA5rWL55qE56WW5YWI6IqC54K544CCIOWmguaenOivpVxyXG5cdCAgICAgKiAgICAgICAgICDoioLngrnmu6HotrPov4fmu6TmnaHku7bvvIwg5YiZ6KaB5rGC6L+U5ZuedHJ1Ze+8jCDov5nml7blsIbnm7TmjqXov5Tlm57or6XoioLngrnkvZzkuLpmaW5kUGFyZW50KCnnmoTnu5PmnpzvvIwg5ZCm5YiZ77yMIOivt+i/lOWbnmZhbHNl44CCXHJcblx0ICAgICAqIEByZXR1cm4geyBOb2RlIHwgTnVsbCB9IOWmguaenOaJvuWIsOespuWQiOi/h+a7pOadoeS7tueahOiKgueCue+8jCDlsLHov5Tlm57or6XoioLngrnvvIwg5ZCm5YiZ6L+U5ZueTlVMTFxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIHZhciBmaWx0ZXJOb2RlID0gVUUuZG9tLmRvbVV0aWxzLmZpbmRQYXJlbnQoIGRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZCwgZnVuY3Rpb24gKCBub2RlICkge1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy/nlLHkuo7mn6Xmib7nmoTnu4jngrnmmK9ib2R56IqC54K577yMIOaJgOS7peawuOi/nOS5n+S4jeS8muWMuemFjeW9k+WJjei/h+a7pOWZqOeahOadoeS7tu+8jCDljbPov5nph4zmsLjov5zkvJrov5Tlm55mYWxzZVxyXG5cdCAgICAgKiAgICAgcmV0dXJuIG5vZGUudGFnTmFtZSA9PT0gXCJIVE1MXCI7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIH0gKTtcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IHRydWVcclxuXHQgICAgICogY29uc29sZS5sb2coIGZpbHRlck5vZGUgPT09IG51bGwgKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOagueaNrue7meWumueahOi/h+a7pOinhOWImWZpbHRlckZu77yMIOafpeaJvuespuWQiOivpei/h+a7pOinhOWImeeahG5vZGXoioLngrnnmoTnrKzkuIDkuKrnpZblhYjoioLngrnvvIxcclxuXHQgICAgICog5aaC5p6caW5jbHVkZVNlbGbnmoTlgLzkuLp0cnVl77yM5YiZ5p+l5om+55qE6LW354K55piv57uZ5a6a55qE6IqC54K5bm9kZe+8jCDlkKbliJnvvIwg6LW354K55pivbm9kZeeahOeItuiKgueCuVxyXG5cdCAgICAgKiBAbWV0aG9kIGZpbmRQYXJlbnRcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg6ZyA6KaB5p+l5om+55qE6IqC54K5XHJcblx0ICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZmlsdGVyRm4g6Ieq5a6a5LmJ55qE6L+H5ruk5pa55rOV44CCXHJcblx0ICAgICAqIEBwYXJhbSB7IEJvb2xlYW4gfSBpbmNsdWRlU2VsZiDmn6Xmib7ov4fnqIvmmK/lkKbljIXlkKvoh6rouqtcclxuXHQgICAgICogQHdhcm5pbmcg5p+l5om+55qE57uI54K55piv5YiwYm9keeiKgueCueS4uuatolxyXG5cdCAgICAgKiBAcmVtaW5kIOiHquWumuS5ieeahOi/h+a7pOaWueazlWZpbHRlckZu5o6l5Y+X5LiA5LiqTm9kZeWvueixoeS9nOS4uuWPguaVsO+8jCDor6Xlr7nosaHku6PooajlvZPliY3miafooYzmo4DmtYvnmoTnpZblhYjoioLngrnjgIIg5aaC5p6c6K+lXHJcblx0ICAgICAqICAgICAgICAgIOiKgueCuea7oei2s+i/h+a7pOadoeS7tu+8jCDliJnopoHmsYLov5Tlm550cnVl77yMIOi/meaXtuWwhuebtOaOpei/lOWbnuivpeiKgueCueS9nOS4umZpbmRQYXJlbnQoKeeahOe7k+aenO+8jCDlkKbliJnvvIwg6K+36L+U5ZueZmFsc2XjgIJcclxuXHQgICAgICogQHJlbWluZCDlpoLmnpxpbmNsdWRlU2VsZuS4unRydWXvvIwg5YiZ6L+H5ruk5Zmo56ys5LiA5qyh5omn6KGM5pe255qE5Y+C5pWw5Lya5piv6IqC54K55pys6Lqr44CCXHJcblx0ICAgICAqICAgICAgICAgIOWPjeS5i++8jCDov4fmu6TlmajnrKzkuIDmrKHmiafooYzml7bnmoTlj4LmlbDlsIbmmK/or6XoioLngrnnmoTniLboioLngrnjgIJcclxuXHQgICAgICogQHJldHVybiB7IE5vZGUgfCBOdWxsIH0g5aaC5p6c5om+5Yiw56ym5ZCI6L+H5ruk5p2h5Lu255qE6IqC54K577yMIOWwsei/lOWbnuivpeiKgueCue+8jCDlkKbliJnov5Tlm55OVUxMXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogPGJvZHk+XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAgPGRpdiBpZD1cInRlc3RcIj5cclxuXHQgICAgICogICAgICA8L2Rpdj5cclxuXHQgICAgICpcclxuXHQgICAgICogICAgICA8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIj5cclxuXHQgICAgICpcclxuXHQgICAgICogICAgICAgICAgLy9vdXRwdXQ6IERJViwgQk9EWVxyXG5cdCAgICAgKiAgICAgICAgICB2YXIgZmlsdGVyTm9kZSA9IFVFLmRvbS5kb21VdGlscy5maW5kUGFyZW50KCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggXCJ0ZXN0XCIgKSwgZnVuY3Rpb24gKCBub2RlICkge1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgICAgICAgICAgY29uc29sZS5sb2coIG5vZGUudGFnTmFtZSApO1xyXG5cdCAgICAgKiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgICAgICB9LCB0cnVlICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAgPC9zY3JpcHQ+XHJcblx0ICAgICAqIDwvYm9keT5cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBmaW5kUGFyZW50OmZ1bmN0aW9uIChub2RlLCBmaWx0ZXJGbiwgaW5jbHVkZVNlbGYpIHtcclxuXHQgICAgICAgIGlmIChub2RlICYmICFkb21VdGlscy5pc0JvZHkobm9kZSkpIHtcclxuXHQgICAgICAgICAgICBub2RlID0gaW5jbHVkZVNlbGYgPyBub2RlIDogbm9kZS5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgIHdoaWxlIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghZmlsdGVyRm4gfHwgZmlsdGVyRm4obm9kZSkgfHwgZG9tVXRpbHMuaXNCb2R5KG5vZGUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyRm4gJiYgIWZpbHRlckZuKG5vZGUpICYmIGRvbVV0aWxzLmlzQm9keShub2RlKSA/IG51bGwgOiBub2RlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIG51bGw7XHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmn6Xmib5ub2Rl55qE6IqC54K55ZCN5Li6dGFnTmFtZeeahOesrOS4gOS4quelluWFiOiKgueCue+8jCDmn6Xmib7nmoTotbfngrnmmK9ub2Rl6IqC54K555qE54i26IqC54K544CCXHJcblx0ICAgICAqIEBtZXRob2QgZmluZFBhcmVudEJ5VGFnTmFtZVxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDpnIDopoHmn6Xmib7nmoToioLngrnlr7nosaFcclxuXHQgICAgICogQHBhcmFtIHsgQXJyYXkgfSB0YWdOYW1lcyDpnIDopoHmn6Xmib7nmoTniLboioLngrnnmoTlkI3np7DmlbDnu4RcclxuXHQgICAgICogQHdhcm5pbmcg5p+l5om+55qE57uI54K55piv5YiwYm9keeiKgueCueS4uuatolxyXG5cdCAgICAgKiBAcmV0dXJuIHsgTm9kZSB8IE5VTEwgfSDlpoLmnpzmib7liLDnrKblkIjmnaHku7bnmoToioLngrnvvIwg5YiZ6L+U5Zue6K+l6IqC54K577yMIOWQpuWImei/lOWbnk5VTExcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiB2YXIgbm9kZSA9IFVFLmRvbS5kb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKVswXSwgWyBcIkJPRFlcIiBdICk7XHJcblx0ICAgICAqIC8vb3V0cHV0OiBCT0RZXHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBub2RlLnRhZ05hbWUgKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOafpeaJvm5vZGXnmoToioLngrnlkI3kuLp0YWdOYW1l55qE56WW5YWI6IqC54K577yMIOWmguaenGluY2x1ZGVTZWxm55qE5YC85Li6dHJ1Ze+8jOWImeafpeaJvueahOi1t+eCueaYr+e7meWumueahOiKgueCuW5vZGXvvIxcclxuXHQgICAgICog5ZCm5YiZ77yMIOi1t+eCueaYr25vZGXnmoTniLboioLngrnjgIJcclxuXHQgICAgICogQG1ldGhvZCBmaW5kUGFyZW50QnlUYWdOYW1lXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlIOmcgOimgeafpeaJvueahOiKgueCueWvueixoVxyXG5cdCAgICAgKiBAcGFyYW0geyBBcnJheSB9IHRhZ05hbWVzIOmcgOimgeafpeaJvueahOeItuiKgueCueeahOWQjeensOaVsOe7hFxyXG5cdCAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gaW5jbHVkZVNlbGYg5p+l5om+6L+H56iL5piv5ZCm5YyF5ZCrbm9kZeiKgueCueiHqui6q1xyXG5cdCAgICAgKiBAd2FybmluZyDmn6Xmib7nmoTnu4jngrnmmK/liLBib2R56IqC54K55Li65q2iXHJcblx0ICAgICAqIEByZXR1cm4geyBOb2RlIHwgTlVMTCB9IOWmguaenOaJvuWIsOespuWQiOadoeS7tueahOiKgueCue+8jCDliJnov5Tlm57or6XoioLngrnvvIwg5ZCm5YiZ6L+U5ZueTlVMTFxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIHZhciBxdWVyeVRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpWzBdO1xyXG5cdCAgICAgKiB2YXIgbm9kZSA9IFVFLmRvbS5kb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKCBxdWVyeVRhcmdldCwgWyBcIkRJVlwiIF0sIHRydWUgKTtcclxuXHQgICAgICogLy9vdXRwdXQ6IHRydWVcclxuXHQgICAgICogY29uc29sZS5sb2coIHF1ZXJ5VGFyZ2V0ID09PSBub2RlICk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgZmluZFBhcmVudEJ5VGFnTmFtZTpmdW5jdGlvbiAobm9kZSwgdGFnTmFtZXMsIGluY2x1ZGVTZWxmLCBleGNsdWRlRm4pIHtcclxuXHQgICAgICAgIHRhZ05hbWVzID0gdXRpbHMubGlzdFRvTWFwKHV0aWxzLmlzQXJyYXkodGFnTmFtZXMpID8gdGFnTmFtZXMgOiBbdGFnTmFtZXNdKTtcclxuXHQgICAgICAgIHJldHVybiBkb21VdGlscy5maW5kUGFyZW50KG5vZGUsIGZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRhZ05hbWVzW25vZGUudGFnTmFtZV0gJiYgIShleGNsdWRlRm4gJiYgZXhjbHVkZUZuKG5vZGUpKTtcclxuXHQgICAgICAgIH0sIGluY2x1ZGVTZWxmKTtcclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOafpeaJvuiKgueCuW5vZGXnmoTnpZblhYjoioLngrnpm4blkIjvvIwg5p+l5om+55qE6LW354K55piv57uZ5a6a6IqC54K555qE54i26IqC54K577yM57uT5p6c6ZuG5Lit5LiN5YyF5ZCr57uZ5a6a55qE6IqC54K544CCXHJcblx0ICAgICAqIEBtZXRob2QgZmluZFBhcmVudHNcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg6ZyA6KaB5p+l5om+55qE6IqC54K55a+56LGhXHJcblx0ICAgICAqIEByZXR1cm4geyBBcnJheSB9IOe7meWumuiKgueCueeahOelluWFiOiKgueCueaVsOe7hFxyXG5cdCAgICAgKiBAZ3JhbW1hciBVRS5kb20uZG9tVXRpbHMuZmluZFBhcmVudHMobm9kZSkgID0+IEFycmF5ICAvL+i/lOWbnuS4gOS4quelluWFiOiKgueCueaVsOe7hOmbhuWQiO+8jOS4jeWMheWQq+iHqui6q1xyXG5cdCAgICAgKiBAZ3JhbW1hciBVRS5kb20uZG9tVXRpbHMuZmluZFBhcmVudHMobm9kZSxpbmNsdWRlU2VsZikgID0+IEFycmF5ICAvL+i/lOWbnuS4gOS4quelluWFiOiKgueCueaVsOe7hOmbhuWQiO+8jGluY2x1ZGVTZWxm5oyH5a6a5piv5ZCm5YyF5ZCr6Ieq6LqrXHJcblx0ICAgICAqIEBncmFtbWFyIFVFLmRvbS5kb21VdGlscy5maW5kUGFyZW50cyhub2RlLGluY2x1ZGVTZWxmLGZpbHRlckZuKSAgPT4gQXJyYXkgIC8v6L+U5Zue5LiA5Liq56WW5YWI6IqC54K55pWw57uE6ZuG5ZCI77yMZmlsdGVyRm7mjIflrprov4fmu6TmnaHku7bvvIzov5Tlm550cnVl55qEbm9kZeWwhuiiq+mAieWPllxyXG5cdCAgICAgKiBAZ3JhbW1hciBVRS5kb20uZG9tVXRpbHMuZmluZFBhcmVudHMobm9kZSxpbmNsdWRlU2VsZixmaWx0ZXJGbixjbG9zZXJGaXJzdCkgID0+IEFycmF5ICAvL+i/lOWbnuS4gOS4quelluWFiOiKgueCueaVsOe7hOmbhuWQiO+8jGNsb3NlckZpcnN05Li6dHJ1ZeeahOivne+8jG5vZGXnmoTnm7TmjqXniLbkurLoioLngrnmmK/mlbDnu4TnmoTnrKww5LiqXHJcblx0ICAgICAqL1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOafpeaJvuiKgueCuW5vZGXnmoTnpZblhYjoioLngrnpm4blkIjvvIwg5aaC5p6caW5jbHVkZVNlbGbnmoTlgLzkuLp0cnVl77yMXHJcblx0ICAgICAqIOWImei/lOWbnueahOe7k+aenOmbhuS4reWFgeiuuOWHuueOsOW9k+WJjee7meWumueahOiKgueCue+8jCDlkKbliJnvvIwg6K+l6IqC54K55LiN5Lya5Ye6546w5Zyo5YW257uT5p6c6ZuG5Lit44CCXHJcblx0ICAgICAqIEBtZXRob2QgZmluZFBhcmVudHNcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg6ZyA6KaB5p+l5om+55qE6IqC54K55a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7IEJvb2xlYW4gfSBpbmNsdWRlU2VsZiDmn6Xmib7nmoTnu5PmnpzkuK3mmK/lkKblhYHorrjljIXlkKvlvZPliY3mn6Xmib7nmoToioLngrnlr7nosaFcclxuXHQgICAgICogQHJldHVybiB7IEFycmF5IH0g57uZ5a6a6IqC54K555qE56WW5YWI6IqC54K55pWw57uEXHJcblx0ICAgICAqL1xyXG5cdCAgICBmaW5kUGFyZW50czpmdW5jdGlvbiAobm9kZSwgaW5jbHVkZVNlbGYsIGZpbHRlckZuLCBjbG9zZXJGaXJzdCkge1xyXG5cdCAgICAgICAgdmFyIHBhcmVudHMgPSBpbmNsdWRlU2VsZiAmJiAoIGZpbHRlckZuICYmIGZpbHRlckZuKG5vZGUpIHx8ICFmaWx0ZXJGbiApID8gW25vZGVdIDogW107XHJcblx0ICAgICAgICB3aGlsZSAobm9kZSA9IGRvbVV0aWxzLmZpbmRQYXJlbnQobm9kZSwgZmlsdGVyRm4pKSB7XHJcblx0ICAgICAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGNsb3NlckZpcnN0ID8gcGFyZW50cyA6IHBhcmVudHMucmV2ZXJzZSgpO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWcqOiKgueCuW5vZGXlkI7pnaLmj5LlhaXmlrDoioLngrluZXdOb2RlXHJcblx0ICAgICAqIEBtZXRob2QgaW5zZXJ0QWZ0ZXJcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg55uu5qCH6IqC54K5XHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBuZXdOb2RlIOaWsOaPkuWFpeeahOiKgueCue+8jCDor6XoioLngrnlsIbnva7kuo7nm67moIfoioLngrnkuYvlkI5cclxuXHQgICAgICogQHJldHVybiB7IE5vZGUgfSDmlrDmj5LlhaXnmoToioLngrlcclxuXHQgICAgICovXHJcblx0ICAgIGluc2VydEFmdGVyOmZ1bmN0aW9uIChub2RlLCBuZXdOb2RlKSB7XHJcblx0ICAgICAgICByZXR1cm4gbm9kZS5uZXh0U2libGluZyA/IG5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgbm9kZS5uZXh0U2libGluZyk6XHJcblx0ICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKG5ld05vZGUpO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWIoOmZpOiKgueCuW5vZGXlj4rlhbbkuIvlsZ7nmoTmiYDmnInoioLngrlcclxuXHQgICAgICogQG1ldGhvZCByZW1vdmVcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg6ZyA6KaB5Yig6Zmk55qE6IqC54K55a+56LGhXHJcblx0ICAgICAqIEByZXR1cm4geyBOb2RlIH0g6L+U5Zue5Yia5Yig6Zmk55qE6IqC54K55a+56LGhXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogPGRpdiBpZD1cInRlc3RcIj5cclxuXHQgICAgICogICAgIDxkaXYgaWQ9XCJjaGlsZFwiPuS9oOWlvTwvZGl2PlxyXG5cdCAgICAgKiA8L2Rpdj5cclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICogICAgIFVFLmRvbS5kb21VdGlscy5yZW1vdmUoIGRvY3VtZW50LmJvZHksIGZhbHNlICk7XHJcblx0ICAgICAqICAgICAvL291dHB1dDogZmFsc2VcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggXCJjaGlsZFwiICkgIT09IG51bGwgKTtcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDliKDpmaToioLngrlub2Rl77yM5bm25qC55o2ua2VlcENoaWxkcmVu55qE5YC85Yaz5a6a5piv5ZCm5L+d55WZ5a2Q6IqC54K5XHJcblx0ICAgICAqIEBtZXRob2QgcmVtb3ZlXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlIOmcgOimgeWIoOmZpOeahOiKgueCueWvueixoVxyXG5cdCAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0ga2VlcENoaWxkcmVuIOaYr+WQpumcgOimgeS/neeVmeWtkOiKgueCuVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgTm9kZSB9IOi/lOWbnuWImuWIoOmZpOeahOiKgueCueWvueixoVxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBodG1sXHJcblx0ICAgICAqIDxkaXYgaWQ9XCJ0ZXN0XCI+XHJcblx0ICAgICAqICAgICA8ZGl2IGlkPVwiY2hpbGRcIj7kvaDlpb08L2Rpdj5cclxuXHQgICAgICogPC9kaXY+XHJcblx0ICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAqICAgICBVRS5kb20uZG9tVXRpbHMucmVtb3ZlKCBkb2N1bWVudC5ib2R5LCB0cnVlICk7XHJcblx0ICAgICAqICAgICAvL291dHB1dDogdHJ1ZVxyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBcImNoaWxkXCIgKSAhPT0gbnVsbCApO1xyXG5cdCAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICByZW1vdmU6ZnVuY3Rpb24gKG5vZGUsIGtlZXBDaGlsZHJlbikge1xyXG5cdCAgICAgICAgdmFyIHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZSxcclxuXHQgICAgICAgICAgICBjaGlsZDtcclxuXHQgICAgICAgIGlmIChwYXJlbnQpIHtcclxuXHQgICAgICAgICAgICBpZiAoa2VlcENoaWxkcmVuICYmIG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlIChjaGlsZCA9IG5vZGUuZmlyc3RDaGlsZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKG5vZGUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIG5vZGU7XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Y+W5b6Xbm9kZeiKgueCueeahOS4i+S4gOS4quWFhOW8n+iKgueCue+8jCDlpoLmnpzor6XoioLngrnlhbblkI7msqHmnInlhYTlvJ/oioLngrnvvIwg5YiZ6YCS5b2S5p+l5om+5YW254i26IqC54K55LmL5ZCO55qE56ys5LiA5Liq5YWE5byf6IqC54K577yMXHJcblx0ICAgICAqIOebtOWIsOaJvuWIsOa7oei2s+adoeS7tueahOiKgueCueaIluiAhemAkuW9kuWIsEJPRFnoioLngrnkuYvlkI7miY3kvJrnu5PmnZ/jgIJcclxuXHQgICAgICogQG1ldGhvZCBnZXROZXh0RG9tTm9kZVxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDpnIDopoHojrflj5blhbblkI7nmoTlhYTlvJ/oioLngrnnmoToioLngrnlr7nosaFcclxuXHQgICAgICogQHJldHVybiB7IE5vZGUgfCBOVUxMIH0g5aaC5p6c5om+5ruh6Laz5p2h5Lu255qE6IqC54K577yMIOWImei/lOWbnuivpeiKgueCue+8jCDlkKbliJnov5Tlm55OVUxMXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogICAgIDxib2R5PlxyXG5cdCAgICAgKiAgICAgIDxkaXYgaWQ9XCJ0ZXN0XCI+XHJcblx0ICAgICAqICAgICAgICAgIDxzcGFuPjwvc3Bhbj5cclxuXHQgICAgICogICAgICA8L2Rpdj5cclxuXHQgICAgICogICAgICA8aT54eHg8L2k+XHJcblx0ICAgICAqIDwvYm9keT5cclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICpcclxuXHQgICAgICogICAgIC8vb3V0cHV0OiBp6IqC54K5XHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmdldE5leHREb21Ob2RlKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggXCJ0ZXN0XCIgKSApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8Ym9keT5cclxuXHQgICAgICogICAgICA8ZGl2PlxyXG5cdCAgICAgKiAgICAgICAgICA8c3Bhbj48L3NwYW4+XHJcblx0ICAgICAqICAgICAgICAgIDxpIGlkPVwidGVzdFwiPnh4eDwvaT5cclxuXHQgICAgICogICAgICA8L2Rpdj5cclxuXHQgICAgICogICAgICA8Yj54eHg8L2I+XHJcblx0ICAgICAqIDwvYm9keT5cclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICpcclxuXHQgICAgICogICAgIC8v55Sx5LqOaWTkuLp0ZXN055qEaeiKgueCueS5i+WQjuayoeacieWFhOW8n+iKgueCue+8jCDliJnmn6Xmib7lhbbniLboioLngrnvvIhkaXbvvInlkI7pnaLnmoTlhYTlvJ/oioLngrlcclxuXHQgICAgICogICAgIC8vb3V0cHV0OiBi6IqC54K5XHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmdldE5leHREb21Ob2RlKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggXCJ0ZXN0XCIgKSApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Y+W5b6Xbm9kZeiKgueCueeahOS4i+S4gOS4quWFhOW8n+iKgueCue+8jCDlpoLmnpxzdGFydEZyb21DaGlsZOeahOWAvOS4unR1cmXvvIzliJnlhYjojrflj5blhbblrZDoioLngrnvvIxcclxuXHQgICAgICog5aaC5p6c5pyJ5a2Q6IqC54K55YiZ55u05o6l6L+U5Zue56ys5LiA5Liq5a2Q6IqC54K577yb5aaC5p6c5rKh5pyJ5a2Q6IqC54K55oiW6ICFc3RhcnRGcm9tQ2hpbGTnmoTlgLzkuLpmYWxzZe+8jFxyXG5cdCAgICAgKiDliJnmiafooYw8YSBocmVmPVwiI1VFLmRvbS5kb21VdGlscy5nZXROZXh0RG9tTm9kZShOb2RlKVwiPmdldE5leHREb21Ob2RlKE5vZGUgbm9kZSk8L2E+55qE5p+l5om+6L+H56iL44CCXHJcblx0ICAgICAqIEBtZXRob2QgZ2V0TmV4dERvbU5vZGVcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg6ZyA6KaB6I635Y+W5YW25ZCO55qE5YWE5byf6IqC54K555qE6IqC54K55a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7IEJvb2xlYW4gfSBzdGFydEZyb21DaGlsZCDmn6Xmib7ov4fnqIvmmK/lkKbku47lhbblrZDoioLngrnlvIDlp4tcclxuXHQgICAgICogQHJldHVybiB7IE5vZGUgfCBOVUxMIH0g5aaC5p6c5om+5ruh6Laz5p2h5Lu255qE6IqC54K577yMIOWImei/lOWbnuivpeiKgueCue+8jCDlkKbliJnov5Tlm55OVUxMXHJcblx0ICAgICAqIEBzZWUgVUUuZG9tLmRvbVV0aWxzLmdldE5leHREb21Ob2RlKE5vZGUpXHJcblx0ICAgICAqL1xyXG5cdCAgICBnZXROZXh0RG9tTm9kZTpmdW5jdGlvbiAobm9kZSwgc3RhcnRGcm9tQ2hpbGQsIGZpbHRlckZuLCBndWFyZCkge1xyXG5cdCAgICAgICAgcmV0dXJuIGdldERvbU5vZGUobm9kZSwgJ2ZpcnN0Q2hpbGQnLCAnbmV4dFNpYmxpbmcnLCBzdGFydEZyb21DaGlsZCwgZmlsdGVyRm4sIGd1YXJkKTtcclxuXHQgICAgfSxcclxuXHQgICAgZ2V0UHJlRG9tTm9kZTpmdW5jdGlvbiAobm9kZSwgc3RhcnRGcm9tQ2hpbGQsIGZpbHRlckZuLCBndWFyZCkge1xyXG5cdCAgICAgICAgcmV0dXJuIGdldERvbU5vZGUobm9kZSwgJ2xhc3RDaGlsZCcsICdwcmV2aW91c1NpYmxpbmcnLCBzdGFydEZyb21DaGlsZCwgZmlsdGVyRm4sIGd1YXJkKTtcclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOajgOa1i+iKgueCuW5vZGXmmK/lkKblsZ7mmK9VRWRpdG9y5a6a5LmJ55qEYm9va21hcmvoioLngrlcclxuXHQgICAgICogQG1ldGhvZCBpc0Jvb2ttYXJrTm9kZVxyXG5cdCAgICAgKiBAcHJpdmF0ZVxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDpnIDopoHmo4DmtYvnmoToioLngrnlr7nosaFcclxuXHQgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDmmK/lkKbmmK9ib29rbWFya+iKgueCuVxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBodG1sXHJcblx0ICAgICAqIDxzcGFuIGlkPVwiX2JhaWR1X2Jvb2ttYXJrXzFcIj48L3NwYW4+XHJcblx0ICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAqICAgICAgdmFyIGJvb2ttYXJrTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiX2JhaWR1X2Jvb2ttYXJrXzFcIik7XHJcblx0ICAgICAqICAgICAgLy9vdXRwdXQ6IHRydWVcclxuXHQgICAgICogICAgICBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmlzQm9va21hcmtOb2RlKCBib29rbWFya05vZGUgKSApO1xyXG5cdCAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBpc0Jvb2ttYXJrTm9kZTpmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT0gMSAmJiBub2RlLmlkICYmIC9eX2JhaWR1X2Jvb2ttYXJrXy9pLnRlc3Qobm9kZS5pZCk7XHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDojrflj5boioLngrlub2Rl5omA5bGe55qEd2luZG935a+56LGhXHJcblx0ICAgICAqIEBtZXRob2QgIGdldFdpbmRvd1xyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDoioLngrnlr7nosaFcclxuXHQgICAgICogQHJldHVybiB7IFdpbmRvdyB9IOW9k+WJjeiKgueCueaJgOWxnueahHdpbmRvd+WvueixoVxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIC8vb3V0cHV0OiB0cnVlXHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBVRS5kb20uZG9tVXRpbHMuZ2V0V2luZG93KCBkb2N1bWVudC5ib2R5ICkgPT09IHdpbmRvdyApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGdldFdpbmRvdzpmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgdmFyIGRvYyA9IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlO1xyXG5cdCAgICAgICAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93O1xyXG5cdCAgICB9LFxyXG5cdCAgICAvKipcclxuXHQgICAgICog6I635Y+W56a7bm9kZUHkuI5ub2RlQuacgOi/keeahOWFrOWFseeahOelluWFiOiKgueCuVxyXG5cdCAgICAgKiBAbWV0aG9kICBnZXRDb21tb25BbmNlc3RvclxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZUEg56ys5LiA5Liq6IqC54K5XHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlQiDnrKzkuozkuKroioLngrlcclxuXHQgICAgICogQHJlbWluZCDlpoLmnpznu5nlrprnmoTkuKTkuKroioLngrnmmK/lkIzkuIDkuKroioLngrnvvIwg5bCG55u05o6l6L+U5Zue6K+l6IqC54K544CCXHJcblx0ICAgICAqIEByZXR1cm4geyBOb2RlIHwgTlVMTCB9IOWmguaenOacquaJvuWIsOWFrOWFseiKgueCue+8jCDov5Tlm55OVUxM77yMIOWQpuWImei/lOWbnuacgOi/keeahOWFrOWFseelluWFiOiKgueCueOAglxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIHZhciBjb21tb25BbmNlc3RvciA9IFVFLmRvbS5kb21VdGlscy5nZXRDb21tb25BbmNlc3RvciggZG9jdW1lbnQuYm9keSwgZG9jdW1lbnQuYm9keS5maXJzdENoaWxkICk7XHJcblx0ICAgICAqIC8vb3V0cHV0OiB0cnVlXHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBjb21tb25BbmNlc3Rvci50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdib2R5JyApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGdldENvbW1vbkFuY2VzdG9yOmZ1bmN0aW9uIChub2RlQSwgbm9kZUIpIHtcclxuXHQgICAgICAgIGlmIChub2RlQSA9PT0gbm9kZUIpXHJcblx0ICAgICAgICAgICAgcmV0dXJuIG5vZGVBO1xyXG5cdCAgICAgICAgdmFyIHBhcmVudHNBID0gW25vZGVBXSAsIHBhcmVudHNCID0gW25vZGVCXSwgcGFyZW50ID0gbm9kZUEsIGkgPSAtMTtcclxuXHQgICAgICAgIHdoaWxlIChwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZSkge1xyXG5cdCAgICAgICAgICAgIGlmIChwYXJlbnQgPT09IG5vZGVCKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQ7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHBhcmVudHNBLnB1c2gocGFyZW50KTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHBhcmVudCA9IG5vZGVCO1xyXG5cdCAgICAgICAgd2hpbGUgKHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHBhcmVudCA9PT0gbm9kZUEpXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnQ7XHJcblx0ICAgICAgICAgICAgcGFyZW50c0IucHVzaChwYXJlbnQpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcGFyZW50c0EucmV2ZXJzZSgpO1xyXG5cdCAgICAgICAgcGFyZW50c0IucmV2ZXJzZSgpO1xyXG5cdCAgICAgICAgd2hpbGUgKGkrKywgcGFyZW50c0FbaV0gPT09IHBhcmVudHNCW2ldKSB7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gaSA9PSAwID8gbnVsbCA6IHBhcmVudHNBW2kgLSAxXTtcclxuXHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmuIXpmaRub2Rl6IqC54K55bem5Y+z6L+e57ut5Li656m655qE5YWE5byfaW5saW5l6IqC54K5XHJcblx0ICAgICAqIEBtZXRob2QgY2xlYXJFbXB0eVNpYmxpbmdcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg5omn6KGM55qE6IqC54K55a+56LGh77yMIOWmguaenOivpeiKgueCueeahOW3puWPs+i/nue7reeahOWFhOW8n+iKgueCueaYr+epuueahGlubGluZeiKgueCue+8jFxyXG5cdCAgICAgKiDliJnov5nkupvlhYTlvJ/oioLngrnlsIbooqvliKDpmaRcclxuXHQgICAgICogQGdyYW1tYXIgVUUuZG9tLmRvbVV0aWxzLmNsZWFyRW1wdHlTaWJsaW5nKG5vZGUsaWdub3JlTmV4dCkgIC8vaWdub3JlTmV4dOaMh+WumuaYr+WQpuW/veeVpeWPs+i+ueepuuiKgueCuVxyXG5cdCAgICAgKiBAZ3JhbW1hciBVRS5kb20uZG9tVXRpbHMuY2xlYXJFbXB0eVNpYmxpbmcobm9kZSxpZ25vcmVOZXh0LGlnbm9yZVByZSkgIC8vaWdub3JlUHJl5oyH5a6a5piv5ZCm5b+955Wl5bem6L6556m66IqC54K5XHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogPGJvZHk+XHJcblx0ICAgICAqICAgICA8ZGl2PjwvZGl2PlxyXG5cdCAgICAgKiAgICAgPHNwYW4gaWQ9XCJ0ZXN0XCI+PC9zcGFuPlxyXG5cdCAgICAgKiAgICAgPGk+PC9pPlxyXG5cdCAgICAgKiAgICAgPGI+PC9iPlxyXG5cdCAgICAgKiAgICAgPGVtPnh4eDwvZW0+XHJcblx0ICAgICAqICAgICA8c3Bhbj48L3NwYW4+XHJcblx0ICAgICAqIDwvYm9keT5cclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICpcclxuXHQgICAgICogICAgICBVRS5kb20uZG9tVXRpbHMuY2xlYXJFbXB0eVNpYmxpbmcoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBcInRlc3RcIiApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAgLy9vdXRwdXQ6IDxkaXY+PC9kaXY+PHNwYW4gaWQ9XCJ0ZXN0XCI+PC9zcGFuPjxlbT54eHg8L2VtPjxzcGFuPjwvc3Bhbj5cclxuXHQgICAgICogICAgICBjb25zb2xlLmxvZyggZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmuIXpmaRub2Rl6IqC54K55bem5Y+z6L+e57ut5Li656m655qE5YWE5byfaW5saW5l6IqC54K577yMIOWmguaenGlnbm9yZU5leHTnmoTlgLzkuLp0cnVl77yMXHJcblx0ICAgICAqIOWImeW/veeVpeWvueWPs+i+ueWFhOW8n+iKgueCueeahOaTjeS9nOOAglxyXG5cdCAgICAgKiBAbWV0aG9kIGNsZWFyRW1wdHlTaWJsaW5nXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlIOaJp+ihjOeahOiKgueCueWvueixoe+8jCDlpoLmnpzor6XoioLngrnnmoTlt6blj7Pov57nu63nmoTlhYTlvJ/oioLngrnmmK/nqbrnmoRpbmxpbmXoioLngrnvvIxcclxuXHQgICAgICogQHBhcmFtIHsgQm9vbGVhbiB9IGlnbm9yZU5leHQg5piv5ZCm5b+955Wl5b+955Wl5a+55Y+z6L6555qE5YWE5byf6IqC54K555qE5pON5L2cXHJcblx0ICAgICAqIOWImei/meS6m+WFhOW8n+iKgueCueWwhuiiq+WIoOmZpFxyXG5cdCAgICAgKiBAc2VlIFVFLmRvbS5kb21VdGlscy5jbGVhckVtcHR5U2libGluZyhOb2RlKVxyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmuIXpmaRub2Rl6IqC54K55bem5Y+z6L+e57ut5Li656m655qE5YWE5byfaW5saW5l6IqC54K577yMIOWmguaenGlnbm9yZU5leHTnmoTlgLzkuLp0cnVl77yMXHJcblx0ICAgICAqIOWImeW/veeVpeWvueWPs+i+ueWFhOW8n+iKgueCueeahOaTjeS9nO+8jCDlpoLmnpxpZ25vcmVQcmXnmoTlgLzkuLp0cnVl77yM5YiZ5b+955Wl5a+55bem6L655YWE5byf6IqC54K555qE5pON5L2c44CCXHJcblx0ICAgICAqIEBtZXRob2QgY2xlYXJFbXB0eVNpYmxpbmdcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg5omn6KGM55qE6IqC54K55a+56LGh77yMIOWmguaenOivpeiKgueCueeahOW3puWPs+i/nue7reeahOWFhOW8n+iKgueCueaYr+epuueahGlubGluZeiKgueCue+8jFxyXG5cdCAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gaWdub3JlTmV4dCDmmK/lkKblv73nlaXlv73nlaXlr7nlj7PovrnnmoTlhYTlvJ/oioLngrnnmoTmk43kvZxcclxuXHQgICAgICogQHBhcmFtIHsgQm9vbGVhbiB9IGlnbm9yZVByZSDmmK/lkKblv73nlaXlv73nlaXlr7nlt6bovrnnmoTlhYTlvJ/oioLngrnnmoTmk43kvZxcclxuXHQgICAgICog5YiZ6L+Z5Lqb5YWE5byf6IqC54K55bCG6KKr5Yig6ZmkXHJcblx0ICAgICAqIEBzZWUgVUUuZG9tLmRvbVV0aWxzLmNsZWFyRW1wdHlTaWJsaW5nKE5vZGUpXHJcblx0ICAgICAqL1xyXG5cdCAgICBjbGVhckVtcHR5U2libGluZzpmdW5jdGlvbiAobm9kZSwgaWdub3JlTmV4dCwgaWdub3JlUHJlKSB7XHJcblx0ICAgICAgICBmdW5jdGlvbiBjbGVhcihuZXh0LCBkaXIpIHtcclxuXHQgICAgICAgICAgICB2YXIgdG1wTm9kZTtcclxuXHQgICAgICAgICAgICB3aGlsZSAobmV4dCAmJiAhZG9tVXRpbHMuaXNCb29rbWFya05vZGUobmV4dCkgJiYgKGRvbVV0aWxzLmlzRW1wdHlJbmxpbmVFbGVtZW50KG5leHQpXHJcblx0ICAgICAgICAgICAgICAgIC8v6L+Z6YeM5LiN6IO95oqK56m65qC8566X6L+b5p2l5Lya5ZCn56m65qC85bmy5o6J77yM5Ye6546w5paH5a2X6Ze055qE56m65qC85Lii5o6J5LqGXHJcblx0ICAgICAgICAgICAgICAgIHx8ICFuZXcgUmVnRXhwKCdbXlxcdFxcblxccicgKyBkb21VdGlscy5maWxsQ2hhciArICddJykudGVzdChuZXh0Lm5vZGVWYWx1ZSkgKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0bXBOb2RlID0gbmV4dFtkaXJdO1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobmV4dCk7XHJcblx0ICAgICAgICAgICAgICAgIG5leHQgPSB0bXBOb2RlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgICFpZ25vcmVOZXh0ICYmIGNsZWFyKG5vZGUubmV4dFNpYmxpbmcsICduZXh0U2libGluZycpO1xyXG5cdCAgICAgICAgIWlnbm9yZVByZSAmJiBjbGVhcihub2RlLnByZXZpb3VzU2libGluZywgJ3ByZXZpb3VzU2libGluZycpO1xyXG5cdCAgICB9LFxyXG5cdCAgICAvKipcclxuXHQgICAgICog5bCG5LiA5Liq5paH5pys6IqC54K5dGV4dE5vZGXmi4bliIbmiJDkuKTkuKrmlofmnKzoioLngrnvvIxvZmZzZXTmjIflrprmi4bliIbkvY3nva5cclxuXHQgICAgICogQG1ldGhvZCBzcGxpdFxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gdGV4dE5vZGUg6ZyA6KaB5ouG5YiG55qE5paH5pys6IqC54K55a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7IGludCB9IG9mZnNldCDpnIDopoHmi4bliIbnmoTkvY3nva7vvIwg5L2N572u6K6h566X5LuOMOW8gOWni1xyXG5cdCAgICAgKiBAcmV0dXJuIHsgTm9kZSB9IOaLhuWIhuWQjuW9ouaIkOeahOaWsOiKgueCuVxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBodG1sXHJcblx0ICAgICAqIDxkaXYgaWQ9XCJ0ZXN0XCI+YWJjZGVmPC9kaXY+XHJcblx0ICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAqICAgICAgdmFyIG5ld05vZGUgPSBVRS5kb20uZG9tVXRpbHMuc3BsaXQoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBcInRlc3RcIiApLmZpcnN0Q2hpbGQsIDMgKTtcclxuXHQgICAgICogICAgICAvL291dHB1dDogZGVmXHJcblx0ICAgICAqICAgICAgY29uc29sZS5sb2coIG5ld05vZGUubm9kZVZhbHVlICk7XHJcblx0ICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIHNwbGl0OmZ1bmN0aW9uIChub2RlLCBvZmZzZXQpIHtcclxuXHQgICAgICAgIHZhciBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQ7XHJcblx0ICAgICAgICBpZiAoYnJvd3Nlci5pZSAmJiBvZmZzZXQgPT0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG5leHQgPSBkb2MuY3JlYXRlVGV4dE5vZGUoJycpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiBkb21VdGlscy5pbnNlcnRBZnRlcihub2RlLCBuZXh0KTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciByZXR2YWwgPSBub2RlLnNwbGl0VGV4dChvZmZzZXQpO1xyXG5cdCAgICAgICAgLy9pZTjkuItzcGxpdFRleHTkuI3kvJrot5/mlrBjaGlsZE5vZGVzLOaIkeS7rOaJi+WKqOinpuWPkeS7lueahOabtOaWsFxyXG5cdCAgICAgICAgaWYgKGJyb3dzZXIuaWU4KSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRtcE5vZGUgPSBkb2MuY3JlYXRlVGV4dE5vZGUoJycpO1xyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLmluc2VydEFmdGVyKHJldHZhbCwgdG1wTm9kZSk7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHRtcE5vZGUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHJldHZhbDtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmo4DmtYvmlofmnKzoioLngrl0ZXh0Tm9kZeaYr+WQpuS4uuepuuiKgueCue+8iOWMheaLrOepuuagvOOAgeaNouihjOOAgeWNoOS9jeespuetieWtl+espu+8iVxyXG5cdCAgICAgKiBAbWV0aG9kICBpc1doaXRlc3BhY2VcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg6ZyA6KaB5qOA5rWL55qE6IqC54K55a+56LGhXHJcblx0ICAgICAqIEByZXR1cm4geyBCb29sZWFuIH0g5qOA5rWL55qE6IqC54K55piv5ZCm5Li656m6XHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogPGRpdiBpZD1cInRlc3RcIj5cclxuXHQgICAgICpcclxuXHQgICAgICogPC9kaXY+XHJcblx0ICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAqICAgICAgLy9vdXRwdXQ6IHRydWVcclxuXHQgICAgICogICAgICBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmlzV2hpdGVzcGFjZSggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXN0XCIpLmZpcnN0Q2hpbGQgKSApO1xyXG5cdCAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBpc1doaXRlc3BhY2U6ZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgIHJldHVybiAhbmV3IFJlZ0V4cCgnW14gXFx0XFxuXFxyJyArIGRvbVV0aWxzLmZpbGxDaGFyICsgJ10nKS50ZXN0KG5vZGUubm9kZVZhbHVlKTtcclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOiOt+WPluWFg+e0oGVsZW1lbnTnm7jlr7nkuo52aWV3cG9ydOeahOS9jee9ruWdkOagh1xyXG5cdCAgICAgKiBAbWV0aG9kIGdldFhZXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBlbGVtZW50IOmcgOimgeiuoeeul+S9jee9rueahOiKgueCueWvueixoVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgT2JqZWN0IH0g6L+U5Zue5b2i5aaCe3g6bGVmdCx5OnRvcH3nmoTkuIDkuKprZXktdmFsdWXmmKDlsITlr7nosaHvvIwg5YW25Lit6ZSueOS7o+ihqOawtOW5s+WBj+enu+i3neemu++8jFxyXG5cdCAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgeeS7o+ihqOWeguebtOWBj+enu+i3neemu+OAglxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIHZhciBsb2NhdGlvbiA9IFVFLmRvbS5kb21VdGlscy5nZXRYWSggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXN0XCIpICk7XHJcblx0ICAgICAqIC8vb3V0cHV0OiB0ZXN055qE5Z2Q5qCH5Li6OiAxMiwgMjRcclxuXHQgICAgICogY29uc29sZS5sb2coICd0ZXN055qE5Z2Q5qCH5Li677yaICcsIGxvY2F0aW9uLngsICcsJywgbG9jYXRpb24ueSApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGdldFhZOmZ1bmN0aW9uIChlbGVtZW50KSB7XHJcblx0ICAgICAgICB2YXIgeCA9IDAsIHkgPSAwO1xyXG5cdCAgICAgICAgd2hpbGUgKGVsZW1lbnQub2Zmc2V0UGFyZW50KSB7XHJcblx0ICAgICAgICAgICAgeSArPSBlbGVtZW50Lm9mZnNldFRvcDtcclxuXHQgICAgICAgICAgICB4ICs9IGVsZW1lbnQub2Zmc2V0TGVmdDtcclxuXHQgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5vZmZzZXRQYXJlbnQ7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4geyAneCc6eCwgJ3knOnl9O1xyXG5cdCAgICB9LFxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Li65YWD57SgZWxlbWVudOe7keWumuWOn+eUn0RPTeS6i+S7tu+8jHR5cGXkuLrkuovku7bnsbvlnovvvIxoYW5kbGVy5Li65aSE55CG5Ye95pWwXHJcblx0ICAgICAqIEBtZXRob2Qgb25cclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IGVsZW1lbnQg6ZyA6KaB57uR5a6a5LqL5Lu255qE6IqC54K55a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IHR5cGUg57uR5a6a55qE5LqL5Lu257G75Z6LXHJcblx0ICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gaGFuZGxlciDkuovku7blpITnkIblmahcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBVRS5kb20uZG9tVXRpbHMub24oZG9jdW1lbnQuYm9keSxcImNsaWNrXCIsZnVuY3Rpb24oZSl7XHJcblx0ICAgICAqICAgICAvL2XkuLrkuovku7blr7nosaHvvIx0aGlz5Li66KKr54K55Ye75YWD57Sg5a+55oiP6YKj5LiqXHJcblx0ICAgICAqIH0pO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Li65YWD57SgZWxlbWVudOe7keWumuWOn+eUn0RPTeS6i+S7tu+8jHR5cGXkuLrkuovku7bnsbvlnovvvIxoYW5kbGVy5Li65aSE55CG5Ye95pWwXHJcblx0ICAgICAqIEBtZXRob2Qgb25cclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IGVsZW1lbnQg6ZyA6KaB57uR5a6a5LqL5Lu255qE6IqC54K55a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7IEFycmF5IH0gdHlwZSDnu5HlrprnmoTkuovku7bnsbvlnovmlbDnu4RcclxuXHQgICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBoYW5kbGVyIOS6i+S7tuWkhOeQhuWZqFxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIFVFLmRvbS5kb21VdGlscy5vbihkb2N1bWVudC5ib2R5LFtcImNsaWNrXCIsXCJtb3VzZWRvd25cIl0sZnVuY3Rpb24oZXZ0KXtcclxuXHQgICAgICogICAgIC8vZXZ05Li65LqL5Lu25a+56LGh77yMdGhpc+S4uuiiq+eCueWHu+WFg+e0oOWvueixoVxyXG5cdCAgICAgKiB9KTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBvbjpmdW5jdGlvbiAoZWxlbWVudCwgdHlwZSwgaGFuZGxlcikge1xyXG5cclxuXHQgICAgICAgIHZhciB0eXBlcyA9IHV0aWxzLmlzQXJyYXkodHlwZSkgPyB0eXBlIDogdXRpbHMudHJpbSh0eXBlKS5zcGxpdCgvXFxzKy8pLFxyXG5cdCAgICAgICAgICAgIGsgPSB0eXBlcy5sZW5ndGg7XHJcblx0ICAgICAgICBpZiAoaykgd2hpbGUgKGstLSkge1xyXG5cdCAgICAgICAgICAgIHR5cGUgPSB0eXBlc1trXTtcclxuXHQgICAgICAgICAgICBpZiAoZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKSB7XHJcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCFoYW5kbGVyLl9kKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLl9kID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVscyA6IFtdXHJcblx0ICAgICAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0eXBlICsgaGFuZGxlci50b1N0cmluZygpLGluZGV4ID0gdXRpbHMuaW5kZXhPZihoYW5kbGVyLl9kLmVscyxlbGVtZW50KTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCFoYW5kbGVyLl9kW2tleV0gfHwgaW5kZXggPT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGluZGV4ID09IC0xKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLl9kLmVscy5wdXNoKGVsZW1lbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoIWhhbmRsZXIuX2Rba2V5XSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5fZFtrZXldID0gZnVuY3Rpb24gKGV2dCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlci5jYWxsKGV2dC5zcmNFbGVtZW50LCBldnQgfHwgd2luZG93LmV2ZW50KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmF0dGFjaEV2ZW50KCdvbicgKyB0eXBlLCBoYW5kbGVyLl9kW2tleV0pO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxlbWVudCA9IG51bGw7XHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDop6PpmaRET03kuovku7bnu5HlrppcclxuXHQgICAgICogQG1ldGhvZCB1blxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gZWxlbWVudCDpnIDopoHop6PpmaTkuovku7bnu5HlrprnmoToioLngrnlr7nosaFcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gdHlwZSDpnIDopoHmjqXop6bnu5HlrprnmoTkuovku7bnsbvlnotcclxuXHQgICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBoYW5kbGVyIOWvueW6lOeahOS6i+S7tuWkhOeQhuWZqFxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIFVFLmRvbS5kb21VdGlscy51bihkb2N1bWVudC5ib2R5LFwiY2xpY2tcIixmdW5jdGlvbihldnQpe1xyXG5cdCAgICAgKiAgICAgLy9ldnTkuLrkuovku7blr7nosaHvvIx0aGlz5Li66KKr54K55Ye75YWD57Sg5a+56LGhXHJcblx0ICAgICAqIH0pO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog6Kej6ZmkRE9N5LqL5Lu257uR5a6aXHJcblx0ICAgICAqIEBtZXRob2QgdW5cclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IGVsZW1lbnQg6ZyA6KaB6Kej6Zmk5LqL5Lu257uR5a6a55qE6IqC54K55a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7IEFycmF5IH0gdHlwZSDpnIDopoHmjqXop6bnu5HlrprnmoTkuovku7bnsbvlnovmlbDnu4RcclxuXHQgICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBoYW5kbGVyIOWvueW6lOeahOS6i+S7tuWkhOeQhuWZqFxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIFVFLmRvbS5kb21VdGlscy51bihkb2N1bWVudC5ib2R5LCBbXCJjbGlja1wiLFwibW91c2Vkb3duXCJdLGZ1bmN0aW9uKGV2dCl7XHJcblx0ICAgICAqICAgICAvL2V2dOS4uuS6i+S7tuWvueixoe+8jHRoaXPkuLrooqvngrnlh7vlhYPntKDlr7nosaFcclxuXHQgICAgICogfSk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgdW46ZnVuY3Rpb24gKGVsZW1lbnQsIHR5cGUsIGhhbmRsZXIpIHtcclxuXHQgICAgICAgIHZhciB0eXBlcyA9IHV0aWxzLmlzQXJyYXkodHlwZSkgPyB0eXBlIDogdXRpbHMudHJpbSh0eXBlKS5zcGxpdCgvXFxzKy8pLFxyXG5cdCAgICAgICAgICAgIGsgPSB0eXBlcy5sZW5ndGg7XHJcblx0ICAgICAgICBpZiAoaykgd2hpbGUgKGstLSkge1xyXG5cdCAgICAgICAgICAgIHR5cGUgPSB0eXBlc1trXTtcclxuXHQgICAgICAgICAgICBpZiAoZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKSB7XHJcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGtleSA9IHR5cGUgKyBoYW5kbGVyLnRvU3RyaW5nKCk7XHJcblx0ICAgICAgICAgICAgICAgIHRyeXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZGV0YWNoRXZlbnQoJ29uJyArIHR5cGUsIGhhbmRsZXIuX2QgPyBoYW5kbGVyLl9kW2tleV0gOiBoYW5kbGVyKTtcclxuXHQgICAgICAgICAgICAgICAgfWNhdGNoKGUpe31cclxuXHQgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIuX2QgJiYgaGFuZGxlci5fZFtrZXldKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB1dGlscy5pbmRleE9mKGhhbmRsZXIuX2QuZWxzLGVsZW1lbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoaW5kZXghPS0xKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLl9kLmVscy5zcGxpY2UoaW5kZXgsMSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLl9kLmVscy5sZW5ndGggPT0gMCAmJiBkZWxldGUgaGFuZGxlci5fZFtrZXldO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOavlOi+g+iKgueCuW5vZGVB5LiO6IqC54K5bm9kZULmmK/lkKblhbfmnInnm7jlkIznmoTmoIfnrb7lkI3jgIHlsZ7mgKflkI3ku6Xlj4rlsZ7mgKflgLxcclxuXHQgICAgICogQG1ldGhvZCAgaXNTYW1lRWxlbWVudFxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZUEg6ZyA6KaB5q+U6L6D55qE6IqC54K5XHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlQiDpnIDopoHmr5TovoPnmoToioLngrlcclxuXHQgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDkuKTkuKroioLngrnmmK/lkKblhbfmnInnm7jlkIznmoTmoIfnrb7lkI3jgIHlsZ7mgKflkI3ku6Xlj4rlsZ7mgKflgLxcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZToxMnB4XCI+c3Nzczwvc3Bhbj5cclxuXHQgICAgICogPHNwYW4gc3R5bGU9XCJmb250LXNpemU6MTJweFwiPmJiYmJiPC9zcGFuPlxyXG5cdCAgICAgKiA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZToxM3B4XCI+c3Nzczwvc3Bhbj5cclxuXHQgICAgICogPHNwYW4gc3R5bGU9XCJmb250LXNpemU6MTRweFwiPmJiYmJiPC9zcGFuPlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgdmFyIG5vZGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwic3BhblwiICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAvL291dHB1dDogdHJ1ZVxyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIFVFLmRvbS5kb21VdGlscy5pc1NhbWVFbGVtZW50KCBub2Rlc1swXSwgbm9kZXNbMV0gKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IGZhbHNlXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmlzU2FtZUVsZW1lbnQoIG5vZGVzWzJdLCBub2Rlc1szXSApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGlzU2FtZUVsZW1lbnQ6ZnVuY3Rpb24gKG5vZGVBLCBub2RlQikge1xyXG5cdCAgICAgICAgaWYgKG5vZGVBLnRhZ05hbWUgIT0gbm9kZUIudGFnTmFtZSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciB0aGlzQXR0cnMgPSBub2RlQS5hdHRyaWJ1dGVzLFxyXG5cdCAgICAgICAgICAgIG90aGVyQXR0cnMgPSBub2RlQi5hdHRyaWJ1dGVzO1xyXG5cdCAgICAgICAgaWYgKCFpZSAmJiB0aGlzQXR0cnMubGVuZ3RoICE9IG90aGVyQXR0cnMubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIGF0dHJBLCBhdHRyQiwgYWwgPSAwLCBibCA9IDA7XHJcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgYXR0ckEgPSB0aGlzQXR0cnNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICBpZiAoYXR0ckEubm9kZU5hbWUgPT0gJ3N0eWxlJykge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoYXR0ckEuc3BlY2lmaWVkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBhbCsrO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5pc1NhbWVTdHlsZShub2RlQSwgbm9kZUIpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoaWUpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGF0dHJBLnNwZWNpZmllZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYWwrKztcclxuXHQgICAgICAgICAgICAgICAgICAgIGF0dHJCID0gb3RoZXJBdHRycy5nZXROYW1lZEl0ZW0oYXR0ckEubm9kZU5hbWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBhdHRyQiA9IG5vZGVCLmF0dHJpYnV0ZXNbYXR0ckEubm9kZU5hbWVdO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoIWF0dHJCLnNwZWNpZmllZCB8fCBhdHRyQS5ub2RlVmFsdWUgIT0gYXR0ckIubm9kZVZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvLyDmnInlj6/og71hdHRyQueahOWxnuaAp+WMheWQq+S6hmF0dHJB55qE5bGe5oCn5LmL5aSW6L+Y5pyJ6Ieq5bex55qE5bGe5oCnXHJcblx0ICAgICAgICBpZiAoaWUpIHtcclxuXHQgICAgICAgICAgICBmb3IgKGkgPSAwOyBhdHRyQiA9IG90aGVyQXR0cnNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGF0dHJCLnNwZWNpZmllZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYmwrKztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoYWwgIT0gYmwpIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWIpOaWreiKgueCuW5vZGVB5LiO6IqC54K5bm9kZULnmoTlhYPntKDnmoRzdHlsZeWxnuaAp+aYr+WQpuS4gOiHtFxyXG5cdCAgICAgKiBAbWV0aG9kIGlzU2FtZVN0eWxlXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlQSDpnIDopoHmr5TovoPnmoToioLngrlcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGVCIOmcgOimgeavlOi+g+eahOiKgueCuVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9IOS4pOS4quiKgueCueaYr+WQpuWFt+acieebuOWQjOeahHN0eWxl5bGe5oCn5YC8XHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogPHNwYW4gc3R5bGU9XCJmb250LXNpemU6MTJweFwiPnNzc3M8L3NwYW4+XHJcblx0ICAgICAqIDxzcGFuIHN0eWxlPVwiZm9udC1zaXplOjEycHhcIj5iYmJiYjwvc3Bhbj5cclxuXHQgICAgICogPHNwYW4gc3R5bGU9XCJmb250LXNpemU6MTNweFwiPnNzc3M8L3NwYW4+XHJcblx0ICAgICAqIDxzcGFuIHN0eWxlPVwiZm9udC1zaXplOjE0cHhcIj5iYmJiYjwvc3Bhbj5cclxuXHQgICAgICpcclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICpcclxuXHQgICAgICogICAgIHZhciBub2RlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcInNwYW5cIiApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IHRydWVcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBVRS5kb20uZG9tVXRpbHMuaXNTYW1lU3R5bGUoIG5vZGVzWzBdLCBub2Rlc1sxXSApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAvL291dHB1dDogZmFsc2VcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBVRS5kb20uZG9tVXRpbHMuaXNTYW1lU3R5bGUoIG5vZGVzWzJdLCBub2Rlc1szXSApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGlzU2FtZVN0eWxlOmZ1bmN0aW9uIChub2RlQSwgbm9kZUIpIHtcclxuXHQgICAgICAgIHZhciBzdHlsZUEgPSBub2RlQS5zdHlsZS5jc3NUZXh0LnJlcGxhY2UoLyggPzsgPykvZywgJzsnKS5yZXBsYWNlKC8oID86ID8pL2csICc6JyksXHJcblx0ICAgICAgICAgICAgc3R5bGVCID0gbm9kZUIuc3R5bGUuY3NzVGV4dC5yZXBsYWNlKC8oID87ID8pL2csICc7JykucmVwbGFjZSgvKCA/OiA/KS9nLCAnOicpO1xyXG5cdCAgICAgICAgaWYgKGJyb3dzZXIub3BlcmEpIHtcclxuXHQgICAgICAgICAgICBzdHlsZUEgPSBub2RlQS5zdHlsZTtcclxuXHQgICAgICAgICAgICBzdHlsZUIgPSBub2RlQi5zdHlsZTtcclxuXHQgICAgICAgICAgICBpZiAoc3R5bGVBLmxlbmd0aCAhPSBzdHlsZUIubGVuZ3RoKVxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzdHlsZUEpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKC9eKFxcZCt8Y3NzdGV4dCkkL2kudGVzdChwKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKHN0eWxlQVtwXSAhPSBzdHlsZUJbcF0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmICghc3R5bGVBIHx8ICFzdHlsZUIpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gc3R5bGVBID09IHN0eWxlQjtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHN0eWxlQSA9IHN0eWxlQS5zcGxpdCgnOycpO1xyXG5cdCAgICAgICAgc3R5bGVCID0gc3R5bGVCLnNwbGl0KCc7Jyk7XHJcblx0ICAgICAgICBpZiAoc3R5bGVBLmxlbmd0aCAhPSBzdHlsZUIubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHN0eWxlQVtpKytdOykge1xyXG5cdCAgICAgICAgICAgIGlmICh1dGlscy5pbmRleE9mKHN0eWxlQiwgY2kpID09IC0xKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOajgOafpeiKgueCuW5vZGXmmK/lkKbkuLpibG9ja+WFg+e0oFxyXG5cdCAgICAgKiBAbWV0aG9kIGlzQmxvY2tFbG1cclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg6ZyA6KaB5qOA5rWL55qE6IqC54K55a+56LGhXHJcblx0ICAgICAqIEByZXR1cm4geyBCb29sZWFuIH0g5piv5ZCm5pivYmxvY2vlhYPntKDoioLngrlcclxuXHQgICAgICogQHdhcm5pbmcg6K+l5pa55rOV55qE5Yik5pat6KeE5YiZ5aaC5LiL77yaIOWmguaenOivpeWFg+e0oOWOn+acrOaYr2Jsb2Nr5YWD57Sg77yMIOWImeS4jeiuuuivpeWFg+e0oOW9k+WJjeeahGNzc+agt+W8j+aYr+S7gOS5iOmDveS8mui/lOWbnnRydWXvvJtcclxuXHQgICAgICogICAgICAgICAg5ZCm5YiZ77yM5qOA5rWL6K+l5YWD57Sg55qEY3Nz5qC35byP77yMIOWmguaenOivpeWFg+e0oOW9k+WJjeaYr2Jsb2Nr5YWD57Sg77yMIOWImei/lOWbnnRydWXjgIIg5YW25L2Z5oOF5Ya15LiL6YO96L+U5ZueZmFsc2XjgIJcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8c3BhbiBpZD1cInRlc3QxXCIgc3R5bGU9XCJkaXNwbGF5OiBibG9ja1wiPjwvc3Bhbj5cclxuXHQgICAgICogPHNwYW4gaWQ9XCJ0ZXN0MlwiPjwvc3Bhbj5cclxuXHQgICAgICogPGRpdiBpZD1cInRlc3QzXCIgc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmVcIj48L2Rpdj5cclxuXHQgICAgICpcclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICpcclxuXHQgICAgICogICAgIC8vb3V0cHV0OiB0cnVlXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmlzQmxvY2tFbG0oIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGVzdDFcIikgKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IGZhbHNlXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmlzQmxvY2tFbG0oIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGVzdDJcIikgKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IHRydWVcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBVRS5kb20uZG9tVXRpbHMuaXNCbG9ja0VsbSggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXN0M1wiKSApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGlzQmxvY2tFbG06ZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09IDEgJiYgKGR0ZC4kYmxvY2tbbm9kZS50YWdOYW1lXSB8fCBzdHlsZUJsb2NrW2RvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUobm9kZSwgJ2Rpc3BsYXknKV0pICYmICFkdGQuJG5vbkNoaWxkW25vZGUudGFnTmFtZV07XHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmo4DmtYtub2Rl6IqC54K55piv5ZCm5Li6Ym9keeiKgueCuVxyXG5cdCAgICAgKiBAbWV0aG9kIGlzQm9keVxyXG5cdCAgICAgKiBAcGFyYW0geyBFbGVtZW50IH0gbm9kZSDpnIDopoHmo4DmtYvnmoRkb23lhYPntKBcclxuXHQgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDnu5nlrprnmoTlhYPntKDmmK/lkKbmmK9ib2R55YWD57SgXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogLy9vdXRwdXQ6IHRydWVcclxuXHQgICAgICogY29uc29sZS5sb2coIFVFLmRvbS5kb21VdGlscy5pc0JvZHkoIGRvY3VtZW50LmJvZHkgKSApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGlzQm9keTpmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgcmV0dXJuICBub2RlICYmIG5vZGUubm9kZVR5cGUgPT0gMSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSAnYm9keSc7XHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDku6Vub2Rl6IqC54K55Li65YiG55WM77yM5bCG6K+l6IqC54K555qE5oyH5a6a56WW5YWI6IqC54K5cGFyZW505ouG5YiG5oiQ5Lik5Liq54us56uL55qE6IqC54K577yMXHJcblx0ICAgICAqIOaLhuWIhuW9ouaIkOeahOS4pOS4quiKgueCueS5i+mXtOaYr25vZGXoioLngrlcclxuXHQgICAgICogQG1ldGhvZCBicmVha1BhcmVudFxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDkvZzkuLrliIbnlYznmoToioLngrnlr7nosaFcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IHBhcmVudCDor6XoioLngrnlv4XpobvmmK9ub2Rl6IqC54K555qE56WW5YWI6IqC54K577yMIOS4lOaYr2Jsb2Nr6IqC54K544CCXHJcblx0ICAgICAqIEByZXR1cm4geyBOb2RlIH0g57uZ5a6a55qEbm9kZeWIhueVjOiKgueCuVxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSxcclxuXHQgICAgICogICAgICAgICAgd3JhcE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXHJcblx0ICAgICAqICAgICAgICAgIHBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgIHBhcmVudC5hcHBlbmRDaGlsZCggbm9kZSApO1xyXG5cdCAgICAgKiAgICAgIHdyYXBOb2RlLmFwcGVuZENoaWxkKCBwYXJlbnQgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgICAvL+aLhuWIhuWJjVxyXG5cdCAgICAgKiAgICAgIC8vb3V0cHV0OiA8cD48c3Bhbj48L3NwYW4+PC9wPlxyXG5cdCAgICAgKiAgICAgIGNvbnNvbGUubG9nKCB3cmFwTm9kZS5pbm5lckhUTUwgKTtcclxuXHQgICAgICpcclxuXHQgICAgICpcclxuXHQgICAgICogICAgICBVRS5kb20uZG9tVXRpbHMuYnJlYWtQYXJlbnQoIG5vZGUsIHBhcmVudCApO1xyXG5cdCAgICAgKiAgICAgIC8v5ouG5YiG5ZCOXHJcblx0ICAgICAqICAgICAgLy9vdXRwdXQ6IDxwPjwvcD48c3Bhbj48L3NwYW4+PHA+PC9wPlxyXG5cdCAgICAgKiAgICAgIGNvbnNvbGUubG9nKCB3cmFwTm9kZS5pbm5lckhUTUwgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBicmVha1BhcmVudDpmdW5jdGlvbiAobm9kZSwgcGFyZW50KSB7XHJcblx0ICAgICAgICB2YXIgdG1wTm9kZSxcclxuXHQgICAgICAgICAgICBwYXJlbnRDbG9uZSA9IG5vZGUsXHJcblx0ICAgICAgICAgICAgY2xvbmUgPSBub2RlLFxyXG5cdCAgICAgICAgICAgIGxlZnROb2RlcyxcclxuXHQgICAgICAgICAgICByaWdodE5vZGVzO1xyXG5cdCAgICAgICAgZG8ge1xyXG5cdCAgICAgICAgICAgIHBhcmVudENsb25lID0gcGFyZW50Q2xvbmUucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICBpZiAobGVmdE5vZGVzKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRtcE5vZGUgPSBwYXJlbnRDbG9uZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICB0bXBOb2RlLmFwcGVuZENoaWxkKGxlZnROb2Rlcyk7XHJcblx0ICAgICAgICAgICAgICAgIGxlZnROb2RlcyA9IHRtcE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgIHRtcE5vZGUgPSBwYXJlbnRDbG9uZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICB0bXBOb2RlLmFwcGVuZENoaWxkKHJpZ2h0Tm9kZXMpO1xyXG5cdCAgICAgICAgICAgICAgICByaWdodE5vZGVzID0gdG1wTm9kZTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBsZWZ0Tm9kZXMgPSBwYXJlbnRDbG9uZS5jbG9uZU5vZGUoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICByaWdodE5vZGVzID0gbGVmdE5vZGVzLmNsb25lTm9kZShmYWxzZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHdoaWxlICh0bXBOb2RlID0gY2xvbmUucHJldmlvdXNTaWJsaW5nKSB7XHJcblx0ICAgICAgICAgICAgICAgIGxlZnROb2Rlcy5pbnNlcnRCZWZvcmUodG1wTm9kZSwgbGVmdE5vZGVzLmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB3aGlsZSAodG1wTm9kZSA9IGNsb25lLm5leHRTaWJsaW5nKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJpZ2h0Tm9kZXMuYXBwZW5kQ2hpbGQodG1wTm9kZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGNsb25lID0gcGFyZW50Q2xvbmU7XHJcblx0ICAgICAgICB9IHdoaWxlIChwYXJlbnQgIT09IHBhcmVudENsb25lKTtcclxuXHQgICAgICAgIHRtcE5vZGUgPSBwYXJlbnQucGFyZW50Tm9kZTtcclxuXHQgICAgICAgIHRtcE5vZGUuaW5zZXJ0QmVmb3JlKGxlZnROb2RlcywgcGFyZW50KTtcclxuXHQgICAgICAgIHRtcE5vZGUuaW5zZXJ0QmVmb3JlKHJpZ2h0Tm9kZXMsIHBhcmVudCk7XHJcblx0ICAgICAgICB0bXBOb2RlLmluc2VydEJlZm9yZShub2RlLCByaWdodE5vZGVzKTtcclxuXHQgICAgICAgIGRvbVV0aWxzLnJlbW92ZShwYXJlbnQpO1xyXG5cdCAgICAgICAgcmV0dXJuIG5vZGU7XHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmo4Dmn6XoioLngrlub2Rl5piv5ZCm5piv56m6aW5saW5l6IqC54K5XHJcblx0ICAgICAqIEBtZXRob2QgIGlzRW1wdHlJbmxpbmVFbGVtZW50XHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlIOmcgOimgeajgOa1i+eahOiKgueCueWvueixoVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgTnVtYmVyIH0gIOWmguaenOe7meWumueahOiKgueCueaYr+epuueahGlubGluZeiKgueCue+8jCDliJnov5Tlm54xLCDlkKbliJnov5Tlm54w44CCXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogPGI+PGk+PC9pPjwvYj4gPT4gMVxyXG5cdCAgICAgKiA8Yj48aT48L2k+PHU+PC91PjwvYj4gPT4gMVxyXG5cdCAgICAgKiA8Yj48L2I+ID0+IDFcclxuXHQgICAgICogPGI+eHg8aT48L2k+PC9iPiA9PiAwXHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgaXNFbXB0eUlubGluZUVsZW1lbnQ6ZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgIGlmIChub2RlLm5vZGVUeXBlICE9IDEgfHwgIWR0ZC4kcmVtb3ZlRW1wdHlbIG5vZGUudGFnTmFtZSBdKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBub2RlID0gbm9kZS5maXJzdENoaWxkO1xyXG5cdCAgICAgICAgd2hpbGUgKG5vZGUpIHtcclxuXHQgICAgICAgICAgICAvL+WmguaenOaYr+WIm+W7uueahGJvb2ttYXJr5bCx6Lez6L+HXHJcblx0ICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzQm9va21hcmtOb2RlKG5vZGUpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxICYmICFkb21VdGlscy5pc0VtcHR5SW5saW5lRWxlbWVudChub2RlKSB8fFxyXG5cdCAgICAgICAgICAgICAgICBub2RlLm5vZGVUeXBlID09IDMgJiYgIWRvbVV0aWxzLmlzV2hpdGVzcGFjZShub2RlKVxyXG5cdCAgICAgICAgICAgICAgICApIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIG5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIDE7XHJcblxyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWIoOmZpG5vZGXoioLngrnkuIvpppblsL7kuKTnq6/nmoTnqbrnmb3mlofmnKzlrZDoioLngrlcclxuXHQgICAgICogQG1ldGhvZCB0cmltV2hpdGVUZXh0Tm9kZVxyXG5cdCAgICAgKiBAcGFyYW0geyBFbGVtZW50IH0gbm9kZSDpnIDopoHmiafooYzliKDpmaTmk43kvZznmoTlhYPntKDlr7nosaFcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiAgICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgICBub2RlLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSggXCJcIiApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAgbm9kZS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCBcIlwiICkgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgICAvLzNcclxuXHQgICAgICogICAgICBjb25zb2xlLmxvZyggbm9kZS5jaGlsZE5vZGVzLmxlbmd0aCApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgIFVFLmRvbS5kb21VdGlscy50cmltV2hpdGVUZXh0Tm9kZSggbm9kZSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgIC8vMVxyXG5cdCAgICAgKiAgICAgIGNvbnNvbGUubG9nKCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoICk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgdHJpbVdoaXRlVGV4dE5vZGU6ZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgIGZ1bmN0aW9uIHJlbW92ZShkaXIpIHtcclxuXHQgICAgICAgICAgICB2YXIgY2hpbGQ7XHJcblx0ICAgICAgICAgICAgd2hpbGUgKChjaGlsZCA9IG5vZGVbZGlyXSkgJiYgY2hpbGQubm9kZVR5cGUgPT0gMyAmJiBkb21VdGlscy5pc1doaXRlc3BhY2UoY2hpbGQpKSB7XHJcblx0ICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJlbW92ZSgnZmlyc3RDaGlsZCcpO1xyXG5cdCAgICAgICAgcmVtb3ZlKCdsYXN0Q2hpbGQnKTtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDlkIjlubZub2Rl6IqC54K55LiL55u45ZCM55qE5a2Q6IqC54K5XHJcblx0ICAgICAqIEBuYW1lIG1lcmdlQ2hpbGRcclxuXHQgICAgICogQGRlc2NcclxuXHQgICAgICogVUUuZG9tLmRvbVV0aWxzLm1lcmdlQ2hpbGQobm9kZSx0YWdOYW1lKSAvL3RhZ05hbWXopoHlkIjlubbnmoTlrZDoioLngrnnmoTmoIfnrb5cclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogPHA+PHNwYW4gc3R5bGU9XCJmb250LXNpemU6MTJweDtcIj54eDxzcGFuIHN0eWxlPVwiZm9udC1zaXplOjEycHg7XCI+YWE8L3NwYW4+eHg8L3NwYW4+PC9wPlxyXG5cdCAgICAgKiA9PT4gVUUuZG9tLmRvbVV0aWxzLm1lcmdlQ2hpbGQobm9kZSwnc3BhbicpXHJcblx0ICAgICAqIDxwPjxzcGFuIHN0eWxlPVwiZm9udC1zaXplOjEycHg7XCI+eHhhYXh4PC9zcGFuPjwvcD5cclxuXHQgICAgICovXHJcblx0ICAgIG1lcmdlQ2hpbGQ6ZnVuY3Rpb24gKG5vZGUsIHRhZ05hbWUsIGF0dHJzKSB7XHJcblx0ICAgICAgICB2YXIgbGlzdCA9IGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKG5vZGUsIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKTtcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSBsaXN0W2krK107KSB7XHJcblx0ICAgICAgICAgICAgaWYgKCFjaS5wYXJlbnROb2RlIHx8IGRvbVV0aWxzLmlzQm9va21hcmtOb2RlKGNpKSkge1xyXG5cdCAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgLy9zcGFu5Y2V54us5aSE55CGXHJcblx0ICAgICAgICAgICAgaWYgKGNpLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSAnc3BhbicpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG5vZGUgPT09IGNpLnBhcmVudE5vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnRyaW1XaGl0ZVRleHROb2RlKG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPT0gMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUuY3NzVGV4dCA9IGNpLnN0eWxlLmNzc1RleHQgKyBcIjtcIiArIG5vZGUuc3R5bGUuY3NzVGV4dDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY2ksIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGNpLnN0eWxlLmNzc1RleHQgPSBub2RlLnN0eWxlLmNzc1RleHQgKyAnOycgKyBjaS5zdHlsZS5jc3NUZXh0O1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoYXR0cnMpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IGF0dHJzLnN0eWxlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHN0eWxlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSBzdHlsZS5zcGxpdCgnOycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBzOyBzID0gc3R5bGVbaisrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2kuc3R5bGVbdXRpbHMuY3NzU3R5bGVUb0RvbVN0eWxlKHMuc3BsaXQoJzonKVswXSldID0gcy5zcGxpdCgnOicpWzFdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoZG9tVXRpbHMuaXNTYW1lU3R5bGUoY2ksIG5vZGUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY2ksIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoZG9tVXRpbHMuaXNTYW1lRWxlbWVudChub2RlLCBjaSkpIHtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGNpLCB0cnVlKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Y6f55Sf5pa55rOVZ2V0RWxlbWVudHNCeVRhZ05hbWXnmoTlsIHoo4VcclxuXHQgICAgICogQG1ldGhvZCBnZXRFbGVtZW50c0J5VGFnTmFtZVxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDnm67moIfoioLngrnlr7nosaFcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gdGFnTmFtZSDpnIDopoHmn6Xmib7nmoToioLngrnnmoR0YWdOYW1l77yMIOWkmuS4qnRhZ05hbWXku6XnqbrmoLzliIblibJcclxuXHQgICAgICogQHJldHVybiB7IEFycmF5IH0g56ym5ZCI5p2h5Lu255qE6IqC54K56ZuG5ZCIXHJcblx0ICAgICAqL1xyXG5cdCAgICBnZXRFbGVtZW50c0J5VGFnTmFtZTpmdW5jdGlvbiAobm9kZSwgbmFtZSxmaWx0ZXIpIHtcclxuXHQgICAgICAgIGlmKGZpbHRlciAmJiB1dGlscy5pc1N0cmluZyhmaWx0ZXIpKXtcclxuXHQgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBmaWx0ZXI7XHJcblx0ICAgICAgICAgICBmaWx0ZXIgPSAgZnVuY3Rpb24obm9kZSl7cmV0dXJuIGRvbVV0aWxzLmhhc0NsYXNzKG5vZGUsY2xhc3NOYW1lKX1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIG5hbWUgPSB1dGlscy50cmltKG5hbWUpLnJlcGxhY2UoL1sgXXsyLH0vZywnICcpLnNwbGl0KCcgJyk7XHJcblx0ICAgICAgICB2YXIgYXJyID0gW107XHJcblx0ICAgICAgICBmb3IodmFyIG4gPSAwLG5pO25pPW5hbWVbbisrXTspe1xyXG5cdCAgICAgICAgICAgIHZhciBsaXN0ID0gbm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZShuaSk7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IGxpc3RbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgaWYoIWZpbHRlciB8fCBmaWx0ZXIoY2kpKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goY2kpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICByZXR1cm4gYXJyO1xyXG5cdCAgICB9LFxyXG5cdCAgICAvKipcclxuXHQgICAgICog5bCG6IqC54K5bm9kZeaPkOWPluWIsOeItuiKgueCueS4ilxyXG5cdCAgICAgKiBAbWV0aG9kIG1lcmdlVG9QYXJlbnRcclxuXHQgICAgICogQHBhcmFtIHsgRWxlbWVudCB9IG5vZGUg6ZyA6KaB5o+Q5Y+W55qE5YWD57Sg5a+56LGhXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogPGRpdiBpZD1cInBhcmVudFwiPlxyXG5cdCAgICAgKiAgICAgPGRpdiBpZD1cInN1YlwiPlxyXG5cdCAgICAgKiAgICAgICAgIDxzcGFuIGlkPVwiY2hpbGRcIj48L3NwYW4+XHJcblx0ICAgICAqICAgICA8L2Rpdj5cclxuXHQgICAgICogPC9kaXY+XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICB2YXIgY2hpbGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggXCJjaGlsZFwiICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAvL291dHB1dDogc3ViXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggY2hpbGQucGFyZW50Tm9kZS5pZCApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgVUUuZG9tLmRvbVV0aWxzLm1lcmdlVG9QYXJlbnQoIGNoaWxkICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAvL291dHB1dDogcGFyZW50XHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggY2hpbGQucGFyZW50Tm9kZS5pZCApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBtZXJnZVRvUGFyZW50OmZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgd2hpbGUgKHBhcmVudCAmJiBkdGQuJHJlbW92ZUVtcHR5W3BhcmVudC50YWdOYW1lXSkge1xyXG5cdCAgICAgICAgICAgIGlmIChwYXJlbnQudGFnTmFtZSA9PSBub2RlLnRhZ05hbWUgfHwgcGFyZW50LnRhZ05hbWUgPT0gJ0EnKSB7Ly/pkojlr7lh5qCH562+5Y2V54us5aSE55CGXHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnRyaW1XaGl0ZVRleHROb2RlKHBhcmVudCk7XHJcblx0ICAgICAgICAgICAgICAgIC8vc3BhbumcgOimgeeJueauiuWkhOeQhiAg5LiN5aSE55CG6L+Z5qC355qE5oOF5Ya1IDxzcGFuIHN0bHllPVwiY29sb3I6I2ZmZlwiPnh4eDxzcGFuIHN0eWxlPVwiY29sb3I6I2NjY1wiPnh4eDwvc3Bhbj54eHg8L3NwYW4+XHJcblx0ICAgICAgICAgICAgICAgIGlmIChwYXJlbnQudGFnTmFtZSA9PSAnU1BBTicgJiYgIWRvbVV0aWxzLmlzU2FtZVN0eWxlKHBhcmVudCwgbm9kZSlcclxuXHQgICAgICAgICAgICAgICAgICAgIHx8IChwYXJlbnQudGFnTmFtZSA9PSAnQScgJiYgbm9kZS50YWdOYW1lID09ICdTUEFOJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQuY2hpbGROb2Rlcy5sZW5ndGggPiAxIHx8IHBhcmVudCAhPT0gbm9kZS5wYXJlbnROb2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5jc3NUZXh0ID0gcGFyZW50LnN0eWxlLmNzc1RleHQgKyBcIjtcIiArIG5vZGUuc3R5bGUuY3NzVGV4dDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnN0eWxlLmNzc1RleHQgKz0gXCI7XCIgKyBub2RlLnN0eWxlLmNzc1RleHQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy90cmFjZTo5NTIgYeagh+etvuimgeS/neaMgeS4i+WIkue6v1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnQudGFnTmFtZSA9PSAnQScpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnN0eWxlLnRleHREZWNvcmF0aW9uID0gJ3VuZGVybGluZSc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChwYXJlbnQudGFnTmFtZSAhPSAnQScpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9PT0gbm9kZS5wYXJlbnROb2RlICYmIGRvbVV0aWxzLnJlbW92ZShub2RlLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9LFxyXG5cdCAgICAvKipcclxuXHQgICAgICog5ZCI5bm26IqC54K5bm9kZeeahOW3puWPs+WFhOW8n+iKgueCuVxyXG5cdCAgICAgKiBAbWV0aG9kIG1lcmdlU2libGluZ1xyXG5cdCAgICAgKiBAcGFyYW0geyBFbGVtZW50IH0gbm9kZSDpnIDopoHlkIjlubbnmoTnm67moIfoioLngrlcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8Yj54eHh4PC9iPjxiIGlkPVwidGVzdFwiPm9vbzwvYj48Yj54eHh4PC9iPlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKiAgICAgdmFyIGRlbW9Ob2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXN0XCIpO1xyXG5cdCAgICAgKiAgICAgVUUuZG9tLmRvbVV0aWxzLm1lcmdlU2libGluZyggZGVtb05vZGUgKTtcclxuXHQgICAgICogICAgIC8vb3V0cHV0OiB4eHh4b29veHh4eFxyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIGRlbW9Ob2RlLmlubmVySFRNTCApO1xyXG5cdCAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWQiOW5tuiKgueCuW5vZGXnmoTlt6blj7PlhYTlvJ/oioLngrnvvIwg5Y+v5Lul5qC55o2u57uZ5a6a55qE5p2h5Lu26YCJ5oup5piv5ZCm5b+955Wl5ZCI5bm25bem6IqC54K544CCXHJcblx0ICAgICAqIEBtZXRob2QgbWVyZ2VTaWJsaW5nXHJcblx0ICAgICAqIEBwYXJhbSB7IEVsZW1lbnQgfSBub2RlIOmcgOimgeWQiOW5tueahOebruagh+iKgueCuVxyXG5cdCAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gaWdub3JlUHJlIOaYr+WQpuW/veeVpeWQiOW5tuW3puiKgueCuVxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBodG1sXHJcblx0ICAgICAqIDxiPnh4eHg8L2I+PGIgaWQ9XCJ0ZXN0XCI+b29vPC9iPjxiPnh4eHg8L2I+XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAqICAgICB2YXIgZGVtb05vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRlc3RcIik7XHJcblx0ICAgICAqICAgICBVRS5kb20uZG9tVXRpbHMubWVyZ2VTaWJsaW5nKCBkZW1vTm9kZSwgdHJ1ZSApO1xyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IG9vb3h4eHhcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBkZW1vTm9kZS5pbm5lckhUTUwgKTtcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDlkIjlubboioLngrlub2Rl55qE5bem5Y+z5YWE5byf6IqC54K577yM5Y+v5Lul5qC55o2u57uZ5a6a55qE5p2h5Lu26YCJ5oup5piv5ZCm5b+955Wl5ZCI5bm25bem5Y+z6IqC54K544CCXHJcblx0ICAgICAqIEBtZXRob2QgbWVyZ2VTaWJsaW5nXHJcblx0ICAgICAqIEBwYXJhbSB7IEVsZW1lbnQgfSBub2RlIOmcgOimgeWQiOW5tueahOebruagh+iKgueCuVxyXG5cdCAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gaWdub3JlUHJlIOaYr+WQpuW/veeVpeWQiOW5tuW3puiKgueCuVxyXG5cdCAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gaWdub3JlTmV4dCDmmK/lkKblv73nlaXlkIjlubblj7PoioLngrlcclxuXHQgICAgICogQHJlbWluZCDlpoLmnpzlkIzml7blv73nlaXlt6blj7PoioLngrnvvIwg5YiZ6K+l5pON5L2c5LuA5LmI5Lmf5LiN5Lya5YGaXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogPGI+eHh4eDwvYj48YiBpZD1cInRlc3RcIj5vb288L2I+PGI+eHh4eDwvYj5cclxuXHQgICAgICpcclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICogICAgIHZhciBkZW1vTm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGVzdFwiKTtcclxuXHQgICAgICogICAgIFVFLmRvbS5kb21VdGlscy5tZXJnZVNpYmxpbmcoIGRlbW9Ob2RlLCBmYWxzZSwgdHJ1ZSApO1xyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IHh4eHhvb29cclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBkZW1vTm9kZS5pbm5lckhUTUwgKTtcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgbWVyZ2VTaWJsaW5nOmZ1bmN0aW9uIChub2RlLCBpZ25vcmVQcmUsIGlnbm9yZU5leHQpIHtcclxuXHQgICAgICAgIGZ1bmN0aW9uIG1lcmdlKHJ0bCwgc3RhcnQsIG5vZGUpIHtcclxuXHQgICAgICAgICAgICB2YXIgbmV4dDtcclxuXHQgICAgICAgICAgICBpZiAoKG5leHQgPSBub2RlW3J0bF0pICYmICFkb21VdGlscy5pc0Jvb2ttYXJrTm9kZShuZXh0KSAmJiBuZXh0Lm5vZGVUeXBlID09IDEgJiYgZG9tVXRpbHMuaXNTYW1lRWxlbWVudChub2RlLCBuZXh0KSkge1xyXG5cdCAgICAgICAgICAgICAgICB3aGlsZSAobmV4dC5maXJzdENoaWxkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnQgPT0gJ2ZpcnN0Q2hpbGQnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5pbnNlcnRCZWZvcmUobmV4dC5sYXN0Q2hpbGQsIG5vZGUuZmlyc3RDaGlsZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQobmV4dC5maXJzdENoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobmV4dCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgIWlnbm9yZVByZSAmJiBtZXJnZSgncHJldmlvdXNTaWJsaW5nJywgJ2ZpcnN0Q2hpbGQnLCBub2RlKTtcclxuXHQgICAgICAgICFpZ25vcmVOZXh0ICYmIG1lcmdlKCduZXh0U2libGluZycsICdsYXN0Q2hpbGQnLCBub2RlKTtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDorr7nva7oioLngrlub2Rl5Y+K5YW25a2Q6IqC54K55LiN5Lya6KKr6YCJ5LitXHJcblx0ICAgICAqIEBtZXRob2QgdW5TZWxlY3RhYmxlXHJcblx0ICAgICAqIEBwYXJhbSB7IEVsZW1lbnQgfSBub2RlIOmcgOimgeaJp+ihjOaTjeS9nOeahGRvbeWFg+e0oFxyXG5cdCAgICAgKiBAcmVtaW5kIOaJp+ihjOivpeaTjeS9nOWQjueahOiKgueCue+8jCDlsIbkuI3og73ooqvpvKDmoIfpgInkuK1cclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBVRS5kb20uZG9tVXRpbHMudW5TZWxlY3RhYmxlKCBkb2N1bWVudC5ib2R5ICk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgdW5TZWxlY3RhYmxlOmllICYmIGJyb3dzZXIuaWU5YmVsb3cgfHwgYnJvd3Nlci5vcGVyYSA/IGZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAvL2ZvciBpZTlcclxuXHQgICAgICAgIG5vZGUub25zZWxlY3RzdGFydCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICB9O1xyXG5cdCAgICAgICAgbm9kZS5vbmNsaWNrID0gbm9kZS5vbmtleXVwID0gbm9kZS5vbmtleWRvd24gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIG5vZGUudW5zZWxlY3RhYmxlID0gJ29uJztcclxuXHQgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwidW5zZWxlY3RhYmxlXCIsIFwib25cIik7XHJcblx0ICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gbm9kZS5hbGxbaSsrXTspIHtcclxuXHQgICAgICAgICAgICBzd2l0Y2ggKGNpLnRhZ05hbWUudG9Mb3dlckNhc2UoKSkge1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlICdpZnJhbWUnIDpcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAndGV4dGFyZWEnIDpcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnaW5wdXQnIDpcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnc2VsZWN0JyA6XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgZGVmYXVsdCA6XHJcblx0ICAgICAgICAgICAgICAgICAgICBjaS51bnNlbGVjdGFibGUgPSAnb24nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJ1bnNlbGVjdGFibGVcIiwgXCJvblwiKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0gOiBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgbm9kZS5zdHlsZS5Nb3pVc2VyU2VsZWN0ID1cclxuXHQgICAgICAgICAgICBub2RlLnN0eWxlLndlYmtpdFVzZXJTZWxlY3QgPVxyXG5cdCAgICAgICAgICAgICAgICBub2RlLnN0eWxlLm1zVXNlclNlbGVjdCA9XHJcblx0ICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLktodG1sVXNlclNlbGVjdCA9ICdub25lJztcclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWIoOmZpOiKgueCuW5vZGXkuIrnmoTmjIflrprlsZ7mgKflkI3np7DnmoTlsZ7mgKdcclxuXHQgICAgICogQG1ldGhvZCAgcmVtb3ZlQXR0cmlidXRlc1xyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDpnIDopoHliKDpmaTlsZ7mgKfnmoToioLngrnlr7nosaFcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gYXR0ck5hbWVzIOWPr+S7peaYr+epuuagvOmalOW8gOeahOWkmuS4quWxnuaAp+WQjeensO+8jOivpeaTjeS9nOWwhuS8muS+neasoeWIoOmZpOebuOW6lOeahOWxnuaAp1xyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBodG1sXHJcblx0ICAgICAqIDxkaXYgaWQ9XCJ3cmFwXCI+XHJcblx0ICAgICAqICAgICAgPHNwYW4gc3R5bGU9XCJmb250LXNpemU6MTRweDtcIiBpZD1cInRlc3RcIiBuYW1lPVwiZm9sbG93TWVcIj54eHh4eDwvc3Bhbj5cclxuXHQgICAgICogPC9kaXY+XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICBVRS5kb20uZG9tVXRpbHMucmVtb3ZlQXR0cmlidXRlcyggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIFwidGVzdFwiICksIFwiaWQgbmFtZVwiICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAvL291dHB1dDogPHNwYW4gc3R5bGU9XCJmb250LXNpemU6MTRweDtcIj54eHh4eDwvc3Bhbj5cclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndyYXBcIikuaW5uZXJIVE1MICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Yig6Zmk6IqC54K5bm9kZeS4iueahOaMh+WumuWxnuaAp+WQjeensOeahOWxnuaAp1xyXG5cdCAgICAgKiBAbWV0aG9kICByZW1vdmVBdHRyaWJ1dGVzXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlIOmcgOimgeWIoOmZpOWxnuaAp+eahOiKgueCueWvueixoVxyXG5cdCAgICAgKiBAcGFyYW0geyBBcnJheSB9IGF0dHJOYW1lcyDpnIDopoHliKDpmaTnmoTlsZ7mgKflkI3mlbDnu4RcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8ZGl2IGlkPVwid3JhcFwiPlxyXG5cdCAgICAgKiAgICAgIDxzcGFuIHN0eWxlPVwiZm9udC1zaXplOjE0cHg7XCIgaWQ9XCJ0ZXN0XCIgbmFtZT1cImZvbGxvd01lXCI+eHh4eHg8L3NwYW4+XHJcblx0ICAgICAqIDwvZGl2PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgVUUuZG9tLmRvbVV0aWxzLnJlbW92ZUF0dHJpYnV0ZXMoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBcInRlc3RcIiApLCBbXCJpZFwiLCBcIm5hbWVcIl0gKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgIC8vb3V0cHV0OiA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZToxNHB4O1wiPnh4eHh4PC9zcGFuPlxyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwid3JhcFwiKS5pbm5lckhUTUwgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgcmVtb3ZlQXR0cmlidXRlczpmdW5jdGlvbiAobm9kZSwgYXR0ck5hbWVzKSB7XHJcblx0ICAgICAgICBhdHRyTmFtZXMgPSB1dGlscy5pc0FycmF5KGF0dHJOYW1lcykgPyBhdHRyTmFtZXMgOiB1dGlscy50cmltKGF0dHJOYW1lcykucmVwbGFjZSgvWyBdezIsfS9nLCcgJykuc3BsaXQoJyAnKTtcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSBhdHRyTmFtZXNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICBjaSA9IGF0dHJGaXhbY2ldIHx8IGNpO1xyXG5cdCAgICAgICAgICAgIHN3aXRjaCAoY2kpIHtcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnY2xhc3NOYW1lJzpcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGVbY2ldID0gJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnc3R5bGUnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5jc3NUZXh0ID0gJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gbm9kZS5nZXRBdHRyaWJ1dGVOb2RlKCdzdHlsZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgIWJyb3dzZXIuaWUgJiYgdmFsICYmIG5vZGUucmVtb3ZlQXR0cmlidXRlTm9kZSh2YWwpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShjaSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDlnKhkb2PkuIvliJvlu7rkuIDkuKrmoIfnrb7lkI3kuLp0YWfvvIzlsZ7mgKfkuLphdHRyc+eahOWFg+e0oFxyXG5cdCAgICAgKiBAbWV0aG9kIGNyZWF0ZUVsZW1lbnRcclxuXHQgICAgICogQHBhcmFtIHsgRG9tRG9jdW1lbnQgfSBkb2Mg5paw5Yib5bu655qE5YWD57Sg5bGe5LqO6K+lZG9jdW1lbnToioLngrnliJvlu7pcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gdGFnTmFtZSDpnIDopoHliJvlu7rnmoTlhYPntKDnmoTmoIfnrb7lkI1cclxuXHQgICAgICogQHBhcmFtIHsgT2JqZWN0IH0gYXR0cnMg5paw5Yib5bu655qE5YWD57Sg55qE5bGe5oCna2V5LXZhbHVl6ZuG5ZCIXHJcblx0ICAgICAqIEByZXR1cm4geyBFbGVtZW50IH0g5paw5Yib5bu655qE5YWD57Sg5a+56LGhXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogdmFyIGVsZSA9IFVFLmRvbS5kb21VdGlscy5jcmVhdGVFbGVtZW50KCBkb2N1bWVudCwgJ2RpdicsIHtcclxuXHQgICAgICogICAgIGlkOiAndGVzdCdcclxuXHQgICAgICogfSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL291dHB1dDogRElWXHJcblx0ICAgICAqIGNvbnNvbGUubG9nKCBlbGUudGFnTmFtZSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL291dHB1dDogdGVzdFxyXG5cdCAgICAgKiBjb25zb2xlLmxvZyggZWxlLmlkICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgY3JlYXRlRWxlbWVudDpmdW5jdGlvbiAoZG9jLCB0YWcsIGF0dHJzKSB7XHJcblx0ICAgICAgICByZXR1cm4gZG9tVXRpbHMuc2V0QXR0cmlidXRlcyhkb2MuY3JlYXRlRWxlbWVudCh0YWcpLCBhdHRycylcclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOS4uuiKgueCuW5vZGXmt7vliqDlsZ7mgKdhdHRyc++8jGF0dHJz5Li65bGe5oCn6ZSu5YC85a+5XHJcblx0ICAgICAqIEBtZXRob2Qgc2V0QXR0cmlidXRlc1xyXG5cdCAgICAgKiBAcGFyYW0geyBFbGVtZW50IH0gbm9kZSDpnIDopoHorr7nva7lsZ7mgKfnmoTlhYPntKDlr7nosaFcclxuXHQgICAgICogQHBhcmFtIHsgT2JqZWN0IH0gYXR0cnMg6ZyA6KaB6K6+572u55qE5bGe5oCn5ZCNLeWAvOWvuVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgRWxlbWVudCB9IOiuvue9ruWxnuaAp+eahOWFg+e0oOWvueixoVxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBodG1sXHJcblx0ICAgICAqIDxzcGFuIGlkPVwidGVzdFwiPjwvc3Bhbj5cclxuXHQgICAgICpcclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICpcclxuXHQgICAgICogICAgIHZhciB0ZXN0Tm9kZSA9IFVFLmRvbS5kb21VdGlscy5zZXRBdHRyaWJ1dGVzKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggXCJ0ZXN0XCIgKSwge1xyXG5cdCAgICAgKiAgICAgICAgIGlkOiAnZGVtbydcclxuXHQgICAgICogICAgIH0gKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgIC8vb3V0cHV0OiBkZW1vXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggdGVzdE5vZGUuaWQgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqXHJcblx0ICAgICAqL1xyXG5cdCAgICBzZXRBdHRyaWJ1dGVzOmZ1bmN0aW9uIChub2RlLCBhdHRycykge1xyXG5cdCAgICAgICAgZm9yICh2YXIgYXR0ciBpbiBhdHRycykge1xyXG5cdCAgICAgICAgICAgIGlmKGF0dHJzLmhhc093blByb3BlcnR5KGF0dHIpKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gYXR0cnNbYXR0cl07XHJcblx0ICAgICAgICAgICAgICAgIHN3aXRjaCAoYXR0cikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2xhc3MnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vaWXkuIvopoHov5nmoLfotYvlgLzvvIxzZXRBdHRyaWJ1dGXkuI3otbfkvZznlKhcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9IHZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3R5bGUnIDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmNzc1RleHQgPSBub2RlLnN0eWxlLmNzc1RleHQgKyBcIjtcIiArIHZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW5uZXJIVE1MJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlW2F0dHJdID0gdmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICd2YWx1ZSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS52YWx1ZSA9IHZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyRml4W2F0dHJdIHx8IGF0dHIsIHZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBub2RlO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOiOt+WPluWFg+e0oGVsZW1lbnTnu4/ov4forqHnrpflkI7nmoTmoLflvI/lgLxcclxuXHQgICAgICogQG1ldGhvZCBnZXRDb21wdXRlZFN0eWxlXHJcblx0ICAgICAqIEBwYXJhbSB7IEVsZW1lbnQgfSBlbGVtZW50IOmcgOimgeiOt+WPluagt+W8j+eahOWFg+e0oOWvueixoVxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBzdHlsZU5hbWUg6ZyA6KaB6I635Y+W55qE5qC35byP5ZCNXHJcblx0ICAgICAqIEByZXR1cm4geyBTdHJpbmcgfSDojrflj5bliLDnmoTmoLflvI/lgLxcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+XHJcblx0ICAgICAqICAgICAgI3Rlc3Qge1xyXG5cdCAgICAgKiAgICAgICAgICBmb250LXNpemU6IDE1cHg7XHJcblx0ICAgICAqICAgICAgfVxyXG5cdCAgICAgKiA8L3N0eWxlPlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c3BhbiBpZD1cInRlc3RcIj48L3NwYW4+XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAqICAgICAvL291dHB1dDogMTVweFxyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIFVFLmRvbS5kb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggXCJ0ZXN0XCIgKSwgJ2ZvbnQtc2l6ZScgKSApO1xyXG5cdCAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBnZXRDb21wdXRlZFN0eWxlOmZ1bmN0aW9uIChlbGVtZW50LCBzdHlsZU5hbWUpIHtcclxuXHQgICAgICAgIC8v5LiA5LiL55qE5bGe5oCn5Y2V54us5aSE55CGXHJcblx0ICAgICAgICB2YXIgcHJvcyA9ICd3aWR0aCBoZWlnaHQgdG9wIGxlZnQnO1xyXG5cclxuXHQgICAgICAgIGlmKHByb3MuaW5kZXhPZihzdHlsZU5hbWUpID4gLTEpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiBlbGVtZW50WydvZmZzZXQnICsgc3R5bGVOYW1lLnJlcGxhY2UoL15cXHcvLGZ1bmN0aW9uKHMpe3JldHVybiBzLnRvVXBwZXJDYXNlKCl9KV0gKyAncHgnO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLy/lv73nlaXmlofmnKzoioLngrlcclxuXHQgICAgICAgIGlmIChlbGVtZW50Lm5vZGVUeXBlID09IDMpIHtcclxuXHQgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLy9pZeS4i2ZvbnQtc2l6ZeiLpWJvZHnkuIvlrprkuYnkuoZmb250LXNpemXvvIzliJnku45jdXJyZW50U3R5bGXph4zkvJrlj5bliLDov5nkuKpmb250LXNpemUuIOWPluS4jeWIsOWunumZheWAvO+8jOaVheatpOS/ruaUuS5cclxuXHQgICAgICAgIGlmIChicm93c2VyLmllICYmIGJyb3dzZXIudmVyc2lvbiA8IDkgJiYgc3R5bGVOYW1lID09ICdmb250LXNpemUnICYmICFlbGVtZW50LnN0eWxlLmZvbnRTaXplICYmXHJcblx0ICAgICAgICAgICAgIWR0ZC4kZW1wdHlbZWxlbWVudC50YWdOYW1lXSAmJiAhZHRkLiRub25DaGlsZFtlbGVtZW50LnRhZ05hbWVdKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHNwYW4gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG5cdCAgICAgICAgICAgIHNwYW4uc3R5bGUuY3NzVGV4dCA9ICdwYWRkaW5nOjA7Ym9yZGVyOjA7Zm9udC1mYW1pbHk6c2ltc3VuOyc7XHJcblx0ICAgICAgICAgICAgc3Bhbi5pbm5lckhUTUwgPSAnLic7XHJcblx0ICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRDaGlsZChzcGFuKTtcclxuXHQgICAgICAgICAgICB2YXIgcmVzdWx0ID0gc3Bhbi5vZmZzZXRIZWlnaHQ7XHJcblx0ICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChzcGFuKTtcclxuXHQgICAgICAgICAgICBzcGFuID0gbnVsbDtcclxuXHQgICAgICAgICAgICByZXR1cm4gcmVzdWx0ICsgJ3B4JztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgdmFyIHZhbHVlID0gZG9tVXRpbHMuZ2V0U3R5bGUoZWxlbWVudCwgc3R5bGVOYW1lKSB8fFxyXG5cdCAgICAgICAgICAgICAgICAod2luZG93LmdldENvbXB1dGVkU3R5bGUgPyBkb21VdGlscy5nZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50LCAnJykuZ2V0UHJvcGVydHlWYWx1ZShzdHlsZU5hbWUpIDpcclxuXHQgICAgICAgICAgICAgICAgICAgICggZWxlbWVudC5jdXJyZW50U3R5bGUgfHwgZWxlbWVudC5zdHlsZSApW3V0aWxzLmNzc1N0eWxlVG9Eb21TdHlsZShzdHlsZU5hbWUpXSk7XHJcblxyXG5cdCAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHV0aWxzLnRyYW5zVW5pdFRvUHgodXRpbHMuZml4Q29sb3Ioc3R5bGVOYW1lLCB2YWx1ZSkpO1xyXG5cdCAgICB9LFxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Yig6Zmk5YWD57SgZWxlbWVudOaMh+WumueahGNsYXNzTmFtZVxyXG5cdCAgICAgKiBAbWV0aG9kIHJlbW92ZUNsYXNzZXNcclxuXHQgICAgICogQHBhcmFtIHsgRWxlbWVudCB9IGVsZSDpnIDopoHliKDpmaRjbGFzc+eahOWFg+e0oOiKgueCuVxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbGFzc05hbWVzIOmcgOimgeWIoOmZpOeahGNsYXNzTmFtZe+8jCDlpJrkuKpjbGFzc05hbWXkuYvpl7Tku6XnqbrmoLzliIblvIBcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8c3BhbiBpZD1cInRlc3RcIiBjbGFzcz1cInRlc3QxIHRlc3QyIHRlc3QzXCI+eHh4PC9zcGFuPlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgdmFyIHRlc3ROb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIFwidGVzdFwiICk7XHJcblx0ICAgICAqICAgICBVRS5kb20uZG9tVXRpbHMucmVtb3ZlQ2xhc3NlcyggdGVzdE5vZGUsIFwidGVzdDEgdGVzdDJcIiApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IHRlc3QzXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggdGVzdE5vZGUuY2xhc3NOYW1lICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Yig6Zmk5YWD57SgZWxlbWVudOaMh+WumueahGNsYXNzTmFtZVxyXG5cdCAgICAgKiBAbWV0aG9kIHJlbW92ZUNsYXNzZXNcclxuXHQgICAgICogQHBhcmFtIHsgRWxlbWVudCB9IGVsZSDpnIDopoHliKDpmaRjbGFzc+eahOWFg+e0oOiKgueCuVxyXG5cdCAgICAgKiBAcGFyYW0geyBBcnJheSB9IGNsYXNzTmFtZXMg6ZyA6KaB5Yig6Zmk55qEY2xhc3NOYW1l5pWw57uEXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogPHNwYW4gaWQ9XCJ0ZXN0XCIgY2xhc3M9XCJ0ZXN0MSB0ZXN0MiB0ZXN0M1wiPnh4eDwvc3Bhbj5cclxuXHQgICAgICpcclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICpcclxuXHQgICAgICogICAgIHZhciB0ZXN0Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBcInRlc3RcIiApO1xyXG5cdCAgICAgKiAgICAgVUUuZG9tLmRvbVV0aWxzLnJlbW92ZUNsYXNzZXMoIHRlc3ROb2RlLCBbXCJ0ZXN0MVwiLCBcInRlc3QyXCJdICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAvL291dHB1dDogdGVzdDNcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCB0ZXN0Tm9kZS5jbGFzc05hbWUgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgcmVtb3ZlQ2xhc3NlczpmdW5jdGlvbiAoZWxtLCBjbGFzc05hbWVzKSB7XHJcblx0ICAgICAgICBjbGFzc05hbWVzID0gdXRpbHMuaXNBcnJheShjbGFzc05hbWVzKSA/IGNsYXNzTmFtZXMgOlxyXG5cdCAgICAgICAgICAgIHV0aWxzLnRyaW0oY2xhc3NOYW1lcykucmVwbGFjZSgvWyBdezIsfS9nLCcgJykuc3BsaXQoJyAnKTtcclxuXHQgICAgICAgIGZvcih2YXIgaSA9IDAsY2ksY2xzID0gZWxtLmNsYXNzTmFtZTtjaT1jbGFzc05hbWVzW2krK107KXtcclxuXHQgICAgICAgICAgICBjbHMgPSBjbHMucmVwbGFjZShuZXcgUmVnRXhwKCdcXFxcYicgKyBjaSArICdcXFxcYicpLCcnKVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgY2xzID0gdXRpbHMudHJpbShjbHMpLnJlcGxhY2UoL1sgXXsyLH0vZywnICcpO1xyXG5cdCAgICAgICAgaWYoY2xzKXtcclxuXHQgICAgICAgICAgICBlbG0uY2xhc3NOYW1lID0gY2xzO1xyXG5cdCAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlQXR0cmlidXRlcyhlbG0sWydjbGFzcyddKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOe7meWFg+e0oGVsZW1lbnTmt7vliqBjbGFzc05hbWVcclxuXHQgICAgICogQG1ldGhvZCBhZGRDbGFzc1xyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gZWxlIOmcgOimgeWinuWKoGNsYXNzTmFtZeeahOWFg+e0oFxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbGFzc05hbWVzIOmcgOimgea3u+WKoOeahGNsYXNzTmFtZe+8jCDlpJrkuKpjbGFzc05hbWXkuYvpl7Tku6XnqbrmoLzliIblibJcclxuXHQgICAgICogQHJlbWluZCDnm7jlkIznmoTnsbvlkI3kuI3kvJrooqvph43lpI3mt7vliqBcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8c3BhbiBpZD1cInRlc3RcIiBjbGFzcz1cImNsczEgY2xzMlwiPjwvc3Bhbj5cclxuXHQgICAgICpcclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICogICAgIHZhciB0ZXN0Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGVzdFwiKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgIFVFLmRvbS5kb21VdGlscy5hZGRDbGFzcyggdGVzdE5vZGUsIFwiY2xzMiBjbHMzIGNsczRcIiApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IGNsMSBjbHMyIGNsczMgY2xzNFxyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIHRlc3ROb2RlLmNsYXNzTmFtZSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog57uZ5YWD57SgZWxlbWVudOa3u+WKoGNsYXNzTmFtZVxyXG5cdCAgICAgKiBAbWV0aG9kIGFkZENsYXNzXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBlbGUg6ZyA6KaB5aKe5YqgY2xhc3NOYW1l55qE5YWD57SgXHJcblx0ICAgICAqIEBwYXJhbSB7IEFycmF5IH0gY2xhc3NOYW1lcyDpnIDopoHmt7vliqDnmoRjbGFzc05hbWXnmoTmlbDnu4RcclxuXHQgICAgICogQHJlbWluZCDnm7jlkIznmoTnsbvlkI3kuI3kvJrooqvph43lpI3mt7vliqBcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8c3BhbiBpZD1cInRlc3RcIiBjbGFzcz1cImNsczEgY2xzMlwiPjwvc3Bhbj5cclxuXHQgICAgICpcclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICogICAgIHZhciB0ZXN0Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGVzdFwiKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgIFVFLmRvbS5kb21VdGlscy5hZGRDbGFzcyggdGVzdE5vZGUsIFtcImNsczJcIiwgXCJjbHMzXCIsIFwiY2xzNFwiXSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IGNsMSBjbHMyIGNsczMgY2xzNFxyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIHRlc3ROb2RlLmNsYXNzTmFtZSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGFkZENsYXNzOmZ1bmN0aW9uIChlbG0sIGNsYXNzTmFtZXMpIHtcclxuXHQgICAgICAgIGlmKCFlbG0pcmV0dXJuO1xyXG5cdCAgICAgICAgY2xhc3NOYW1lcyA9IHV0aWxzLnRyaW0oY2xhc3NOYW1lcykucmVwbGFjZSgvWyBdezIsfS9nLCcgJykuc3BsaXQoJyAnKTtcclxuXHQgICAgICAgIGZvcih2YXIgaSA9IDAsY2ksY2xzID0gZWxtLmNsYXNzTmFtZTtjaT1jbGFzc05hbWVzW2krK107KXtcclxuXHQgICAgICAgICAgICBpZighbmV3IFJlZ0V4cCgnXFxcXGInICsgY2kgKyAnXFxcXGInKS50ZXN0KGNscykpe1xyXG5cdCAgICAgICAgICAgICAgICBjbHMgKz0gJyAnICsgY2k7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZWxtLmNsYXNzTmFtZSA9IHV0aWxzLnRyaW0oY2xzKTtcclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWIpOaWreWFg+e0oGVsZW1lbnTmmK/lkKbljIXlkKvnu5nlrprnmoTmoLflvI/nsbvlkI1jbGFzc05hbWVcclxuXHQgICAgICogQG1ldGhvZCBoYXNDbGFzc1xyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gZWxlIOmcgOimgeajgOa1i+eahOWFg+e0oFxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbGFzc05hbWVzIOmcgOimgeajgOa1i+eahGNsYXNzTmFtZe+8jCDlpJrkuKpjbGFzc05hbWXkuYvpl7TnlKjnqbrmoLzliIblibJcclxuXHQgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDlhYPntKDmmK/lkKbljIXlkKvmiYDmnInnu5nlrprnmoRjbGFzc05hbWVcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8c3BhbiBpZD1cInRlc3QxXCIgY2xhc3M9XCJjbHMxIGNsczJcIj48L3NwYW4+XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAqICAgICB2YXIgdGVzdDEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRlc3QxXCIpO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IGZhbHNlXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmhhc0NsYXNzKCB0ZXN0MSwgXCJjbHMyIGNsczEgY2xzM1wiICkgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgIC8vb3V0cHV0OiB0cnVlXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmhhc0NsYXNzKCB0ZXN0MSwgXCJjbHMyIGNsczFcIiApICk7XHJcblx0ICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Yik5pat5YWD57SgZWxlbWVudOaYr+WQpuWMheWQq+e7meWumueahOagt+W8j+exu+WQjWNsYXNzTmFtZVxyXG5cdCAgICAgKiBAbWV0aG9kIGhhc0NsYXNzXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBlbGUg6ZyA6KaB5qOA5rWL55qE5YWD57SgXHJcblx0ICAgICAqIEBwYXJhbSB7IEFycmF5IH0gY2xhc3NOYW1lcyDpnIDopoHmo4DmtYvnmoRjbGFzc05hbWXmlbDnu4RcclxuXHQgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDlhYPntKDmmK/lkKbljIXlkKvmiYDmnInnu5nlrprnmoRjbGFzc05hbWVcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8c3BhbiBpZD1cInRlc3QxXCIgY2xhc3M9XCJjbHMxIGNsczJcIj48L3NwYW4+XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAqICAgICB2YXIgdGVzdDEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRlc3QxXCIpO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IGZhbHNlXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmhhc0NsYXNzKCB0ZXN0MSwgWyBcImNsczJcIiwgXCJjbHMxXCIsIFwiY2xzM1wiIF0gKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IHRydWVcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBVRS5kb20uZG9tVXRpbHMuaGFzQ2xhc3MoIHRlc3QxLCBbIFwiY2xzMlwiLCBcImNsczFcIiBdKSApO1xyXG5cdCAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBoYXNDbGFzczpmdW5jdGlvbiAoZWxlbWVudCwgY2xhc3NOYW1lKSB7XHJcblx0ICAgICAgICBpZih1dGlscy5pc1JlZ0V4cChjbGFzc05hbWUpKXtcclxuXHQgICAgICAgICAgICByZXR1cm4gY2xhc3NOYW1lLnRlc3QoZWxlbWVudC5jbGFzc05hbWUpXHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBjbGFzc05hbWUgPSB1dGlscy50cmltKGNsYXNzTmFtZSkucmVwbGFjZSgvWyBdezIsfS9nLCcgJykuc3BsaXQoJyAnKTtcclxuXHQgICAgICAgIGZvcih2YXIgaSA9IDAsY2ksY2xzID0gZWxlbWVudC5jbGFzc05hbWU7Y2k9Y2xhc3NOYW1lW2krK107KXtcclxuXHQgICAgICAgICAgICBpZighbmV3IFJlZ0V4cCgnXFxcXGInICsgY2kgKyAnXFxcXGInLCdpJykudGVzdChjbHMpKXtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBpIC0gMSA9PSBjbGFzc05hbWUubGVuZ3RoO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOmYu+atouS6i+S7tum7mOiupOihjOS4ulxyXG5cdCAgICAgKiBAbWV0aG9kIHByZXZlbnREZWZhdWx0XHJcblx0ICAgICAqIEBwYXJhbSB7IEV2ZW50IH0gZXZ0IOmcgOimgemYu+atoum7mOiupOihjOS4uueahOS6i+S7tuWvueixoVxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIFVFLmRvbS5kb21VdGlscy5wcmV2ZW50RGVmYXVsdCggZXZ0ICk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgcHJldmVudERlZmF1bHQ6ZnVuY3Rpb24gKGV2dCkge1xyXG5cdCAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0ID8gZXZ0LnByZXZlbnREZWZhdWx0KCkgOiAoZXZ0LnJldHVyblZhbHVlID0gZmFsc2UpO1xyXG5cdCAgICB9LFxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Yig6Zmk5YWD57SgZWxlbWVudOaMh+WumueahOagt+W8j1xyXG5cdCAgICAgKiBAbWV0aG9kIHJlbW92ZVN0eWxlXHJcblx0ICAgICAqIEBwYXJhbSB7IEVsZW1lbnQgfSBlbGVtZW50IOmcgOimgeWIoOmZpOagt+W8j+eahOWFg+e0oFxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBzdHlsZU5hbWUg6ZyA6KaB5Yig6Zmk55qE5qC35byP5ZCNXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogPHNwYW4gaWQ9XCJ0ZXN0XCIgc3R5bGU9XCJjb2xvcjogcmVkOyBiYWNrZ3JvdW5kOiBibHVlO1wiPjwvc3Bhbj5cclxuXHQgICAgICpcclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICpcclxuXHQgICAgICogICAgIHZhciB0ZXN0Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGVzdFwiKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgIFVFLmRvbS5kb21VdGlscy5yZW1vdmVTdHlsZSggdGVzdE5vZGUsICdjb2xvcicgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgIC8vb3V0cHV0OiBiYWNrZ3JvdW5kOiBibHVlO1xyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIHRlc3ROb2RlLnN0eWxlLmNzc1RleHQgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgcmVtb3ZlU3R5bGU6ZnVuY3Rpb24gKGVsZW1lbnQsIG5hbWUpIHtcclxuXHQgICAgICAgIGlmKGJyb3dzZXIuaWUgKXtcclxuXHQgICAgICAgICAgICAvL+mSiOWvuWNvbG9y5YWI5Y2V54us5aSE55CG5LiA5LiLXHJcblx0ICAgICAgICAgICAgaWYobmFtZSA9PSAnY29sb3InKXtcclxuXHQgICAgICAgICAgICAgICAgbmFtZSA9ICcoXnw7KScgKyBuYW1lO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmNzc1RleHQgPSBlbGVtZW50LnN0eWxlLmNzc1RleHQucmVwbGFjZShuZXcgUmVnRXhwKG5hbWUgKyAnW146XSo6W147XSs7PycsJ2lnJyksJycpXHJcblx0ICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICBpZiAoZWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSkge1xyXG5cdCAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnJlbW92ZVByb3BlcnR5IChuYW1lKTtcclxuXHQgICAgICAgICAgICB9ZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucmVtb3ZlQXR0cmlidXRlICh1dGlscy5jc3NTdHlsZVRvRG9tU3R5bGUobmFtZSkpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgaWYgKCFlbGVtZW50LnN0eWxlLmNzc1RleHQpIHtcclxuXHQgICAgICAgICAgICBkb21VdGlscy5yZW1vdmVBdHRyaWJ1dGVzKGVsZW1lbnQsIFsnc3R5bGUnXSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDojrflj5blhYPntKBlbGVtZW5055qEc3R5bGXlsZ7mgKfnmoTmjIflrprlgLxcclxuXHQgICAgICogQG1ldGhvZCBnZXRTdHlsZVxyXG5cdCAgICAgKiBAcGFyYW0geyBFbGVtZW50IH0gZWxlbWVudCDpnIDopoHojrflj5blsZ7mgKflgLznmoTlhYPntKBcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gc3R5bGVOYW1lIOmcgOimgeiOt+WPlueahHN0eWxl55qE5ZCN56ewXHJcblx0ICAgICAqIEB3YXJuaW5nIOivpeaWueazleS7heiOt+WPluWFg+e0oHN0eWxl5bGe5oCn5Lit5omA5qCH5piO55qE5YC8XHJcblx0ICAgICAqIEByZXR1cm4geyBTdHJpbmcgfSDor6XlhYPntKDljIXlkKvmjIflrprnmoRzdHlsZeWxnuaAp+WAvFxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBodG1sXHJcblx0ICAgICAqIDxkaXYgaWQ9XCJ0ZXN0XCIgc3R5bGU9XCJjb2xvcjogcmVkO1wiPjwvZGl2PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgIHZhciB0ZXN0Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBcInRlc3RcIiApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgIC8vb3V0cHV0OiByZWRcclxuXHQgICAgICogICAgICBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmdldFN0eWxlKCB0ZXN0Tm9kZSwgXCJjb2xvclwiICkgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgICAvL291dHB1dDogXCJcIlxyXG5cdCAgICAgKiAgICAgIGNvbnNvbGUubG9nKCBVRS5kb20uZG9tVXRpbHMuZ2V0U3R5bGUoIHRlc3ROb2RlLCBcImJhY2tncm91bmRcIiApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGdldFN0eWxlOmZ1bmN0aW9uIChlbGVtZW50LCBuYW1lKSB7XHJcblx0ICAgICAgICB2YXIgdmFsdWUgPSBlbGVtZW50LnN0eWxlWyB1dGlscy5jc3NTdHlsZVRvRG9tU3R5bGUobmFtZSkgXTtcclxuXHQgICAgICAgIHJldHVybiB1dGlscy5maXhDb2xvcihuYW1lLCB2YWx1ZSk7XHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDkuLrlhYPntKBlbGVtZW506K6+572u5qC35byP5bGe5oCn5YC8XHJcblx0ICAgICAqIEBtZXRob2Qgc2V0U3R5bGVcclxuXHQgICAgICogQHBhcmFtIHsgRWxlbWVudCB9IGVsZW1lbnQg6ZyA6KaB6K6+572u5qC35byP55qE5YWD57SgXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IHN0eWxlTmFtZSDmoLflvI/lkI1cclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gc3R5bGVWYWx1ZSDmoLflvI/lgLxcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8ZGl2IGlkPVwidGVzdFwiPjwvZGl2PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgIHZhciB0ZXN0Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBcInRlc3RcIiApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgIC8vb3V0cHV0OiBcIlwiXHJcblx0ICAgICAqICAgICAgY29uc29sZS5sb2coIHRlc3ROb2RlLnN0eWxlLmNvbG9yICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAgVUUuZG9tLmRvbVV0aWxzLnNldFN0eWxlKCB0ZXN0Tm9kZSwgJ2NvbG9yJywgJ3JlZCcgKTtcclxuXHQgICAgICogICAgICAvL291dHB1dDogXCJyZWRcIlxyXG5cdCAgICAgKiAgICAgIGNvbnNvbGUubG9nKCB0ZXN0Tm9kZS5zdHlsZS5jb2xvciApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBzZXRTdHlsZTpmdW5jdGlvbiAoZWxlbWVudCwgbmFtZSwgdmFsdWUpIHtcclxuXHQgICAgICAgIGVsZW1lbnQuc3R5bGVbdXRpbHMuY3NzU3R5bGVUb0RvbVN0eWxlKG5hbWUpXSA9IHZhbHVlO1xyXG5cdCAgICAgICAgaWYoIXV0aWxzLnRyaW0oZWxlbWVudC5zdHlsZS5jc3NUZXh0KSl7XHJcblx0ICAgICAgICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGVzKGVsZW1lbnQsJ3N0eWxlJylcclxuXHQgICAgICAgIH1cclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOS4uuWFg+e0oGVsZW1lbnTorr7nva7lpJrkuKrmoLflvI/lsZ7mgKflgLxcclxuXHQgICAgICogQG1ldGhvZCBzZXRTdHlsZXNcclxuXHQgICAgICogQHBhcmFtIHsgRWxlbWVudCB9IGVsZW1lbnQg6ZyA6KaB6K6+572u5qC35byP55qE5YWD57SgXHJcblx0ICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IHN0eWxlcyDmoLflvI/lkI3lgLzlr7lcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8ZGl2IGlkPVwidGVzdFwiPjwvZGl2PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgIHZhciB0ZXN0Tm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBcInRlc3RcIiApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgIC8vb3V0cHV0OiBcIlwiXHJcblx0ICAgICAqICAgICAgY29uc29sZS5sb2coIHRlc3ROb2RlLnN0eWxlLmNvbG9yICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAgVUUuZG9tLmRvbVV0aWxzLnNldFN0eWxlcyggdGVzdE5vZGUsIHtcclxuXHQgICAgICogICAgICAgICAgJ2NvbG9yJzogJ3JlZCdcclxuXHQgICAgICogICAgICB9ICk7XHJcblx0ICAgICAqICAgICAgLy9vdXRwdXQ6IFwicmVkXCJcclxuXHQgICAgICogICAgICBjb25zb2xlLmxvZyggdGVzdE5vZGUuc3R5bGUuY29sb3IgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgc2V0U3R5bGVzOmZ1bmN0aW9uIChlbGVtZW50LCBzdHlsZXMpIHtcclxuXHQgICAgICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHN0eWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5zZXRTdHlsZShlbGVtZW50LCBuYW1lLCBzdHlsZXNbbmFtZV0pO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWIoOmZpF9tb3pfZGlydHnlsZ7mgKdcclxuXHQgICAgICogQHByaXZhdGVcclxuXHQgICAgICogQG1ldGhvZCByZW1vdmVEaXJ0eUF0dHJcclxuXHQgICAgICovXHJcblx0ICAgIHJlbW92ZURpcnR5QXR0cjpmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpLCBub2RlcyA9IG5vZGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKTsgY2kgPSBub2Rlc1tpKytdOykge1xyXG5cdCAgICAgICAgICAgIGNpLnJlbW92ZUF0dHJpYnV0ZSgnX21vel9kaXJ0eScpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ19tb3pfZGlydHknKTtcclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOiOt+WPluWtkOiKgueCueeahOaVsOmHj1xyXG5cdCAgICAgKiBAbWV0aG9kIGdldENoaWxkQ291bnRcclxuXHQgICAgICogQHBhcmFtIHsgRWxlbWVudCB9IG5vZGUg6ZyA6KaB5qOA5rWL55qE5YWD57SgXHJcblx0ICAgICAqIEByZXR1cm4geyBOdW1iZXIgfSDnu5nlrprnmoRub2Rl5YWD57Sg55qE5a2Q6IqC54K55pWw6YePXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogPGRpdiBpZD1cInRlc3RcIj5cclxuXHQgICAgICogICAgICA8c3Bhbj48L3NwYW4+XHJcblx0ICAgICAqIDwvZGl2PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IDNcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBVRS5kb20uZG9tVXRpbHMuZ2V0Q2hpbGRDb3VudCggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXN0XCIpICkgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmoLnmja7nu5nlrprnmoTov4fmu6Top4TliJnvvIwg6I635Y+W56ym5ZCI5p2h5Lu255qE5a2Q6IqC54K555qE5pWw6YePXHJcblx0ICAgICAqIEBtZXRob2QgZ2V0Q2hpbGRDb3VudFxyXG5cdCAgICAgKiBAcGFyYW0geyBFbGVtZW50IH0gbm9kZSDpnIDopoHmo4DmtYvnmoTlhYPntKBcclxuXHQgICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBmbiDov4fmu6TlmajvvIwg6KaB5rGC5a+556ym5ZCI5p2h5Lu255qE5a2Q6IqC54K56L+U5ZuedHJ1Ze+8jCDlj43kuYvliJnopoHmsYLov5Tlm55mYWxzZVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgTnVtYmVyIH0g56ym5ZCI6L+H5ruk5p2h5Lu255qEbm9kZeWFg+e0oOeahOWtkOiKgueCueaVsOmHj1xyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBodG1sXHJcblx0ICAgICAqIDxkaXYgaWQ9XCJ0ZXN0XCI+XHJcblx0ICAgICAqICAgICAgPHNwYW4+PC9zcGFuPlxyXG5cdCAgICAgKiA8L2Rpdj5cclxuXHQgICAgICpcclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICpcclxuXHQgICAgICogICAgIC8vb3V0cHV0OiAxXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmdldENoaWxkQ291bnQoIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGVzdFwiKSwgZnVuY3Rpb24gKCBub2RlICkge1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAxO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgfSApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGdldENoaWxkQ291bnQ6ZnVuY3Rpb24gKG5vZGUsIGZuKSB7XHJcblx0ICAgICAgICB2YXIgY291bnQgPSAwLCBmaXJzdCA9IG5vZGUuZmlyc3RDaGlsZDtcclxuXHQgICAgICAgIGZuID0gZm4gfHwgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiAxO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIHdoaWxlIChmaXJzdCkge1xyXG5cdCAgICAgICAgICAgIGlmIChmbihmaXJzdCkpIHtcclxuXHQgICAgICAgICAgICAgICAgY291bnQrKztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZmlyc3QgPSBmaXJzdC5uZXh0U2libGluZztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBjb3VudDtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDliKTmlq3nu5nlrproioLngrnmmK/lkKbkuLrnqbroioLngrlcclxuXHQgICAgICogQG1ldGhvZCBpc0VtcHR5Tm9kZVxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDpnIDopoHmo4DmtYvnmoToioLngrnlr7nosaFcclxuXHQgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDoioLngrnmmK/lkKbkuLrnqbpcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBVRS5kb20uZG9tVXRpbHMuaXNFbXB0eU5vZGUoIGRvY3VtZW50LmJvZHkgKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBpc0VtcHR5Tm9kZTpmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgcmV0dXJuICFub2RlLmZpcnN0Q2hpbGQgfHwgZG9tVXRpbHMuZ2V0Q2hpbGRDb3VudChub2RlLCBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiAgIWRvbVV0aWxzLmlzQnIobm9kZSkgJiYgIWRvbVV0aWxzLmlzQm9va21hcmtOb2RlKG5vZGUpICYmICFkb21VdGlscy5pc1doaXRlc3BhY2Uobm9kZSlcclxuXHQgICAgICAgIH0pID09IDBcclxuXHQgICAgfSxcclxuXHQgICAgY2xlYXJTZWxlY3RlZEFycjpmdW5jdGlvbiAobm9kZXMpIHtcclxuXHQgICAgICAgIHZhciBub2RlO1xyXG5cdCAgICAgICAgd2hpbGUgKG5vZGUgPSBub2Rlcy5wb3AoKSkge1xyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZUF0dHJpYnV0ZXMobm9kZSwgWydjbGFzcyddKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfSxcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWwhuaYvuekuuWMuuWfn+a7muWKqOWIsOaMh+WumuiKgueCueeahOS9jee9rlxyXG5cdCAgICAgKiBAbWV0aG9kIHNjcm9sbFRvVmlld1xyXG5cdCAgICAgKiBAcGFyYW0gICAge05vZGV9ICAgbm9kZSAgICDoioLngrlcclxuXHQgICAgICogQHBhcmFtICAgIHt3aW5kb3d9ICAgd2luICAgICAgd2luZG935a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSAgICB7TnVtYmVyfSAgICBvZmZzZXRUb3AgICAg6Led56a75LiK5pa555qE5YGP56e76YePXHJcblx0ICAgICAqL1xyXG5cdCAgICBzY3JvbGxUb1ZpZXc6ZnVuY3Rpb24gKG5vZGUsIHdpbiwgb2Zmc2V0VG9wKSB7XHJcblx0ICAgICAgICB2YXIgZ2V0Vmlld1BhbmVTaXplID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgZG9jID0gd2luLmRvY3VtZW50LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgbW9kZSA9IGRvYy5jb21wYXRNb2RlID09ICdDU1MxQ29tcGF0JztcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHdpZHRoOiggbW9kZSA/IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggOiBkb2MuYm9keS5jbGllbnRXaWR0aCApIHx8IDAsXHJcblx0ICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6KCBtb2RlID8gZG9jLmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgOiBkb2MuYm9keS5jbGllbnRIZWlnaHQgKSB8fCAwXHJcblx0ICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBnZXRTY3JvbGxQb3NpdGlvbiA9IGZ1bmN0aW9uICh3aW4pIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCdwYWdlWE9mZnNldCcgaW4gd2luKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHg6d2luLnBhZ2VYT2Zmc2V0IHx8IDAsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgeTp3aW4ucGFnZVlPZmZzZXQgfHwgMFxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBkb2MgPSB3aW4uZG9jdW1lbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHg6ZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IHx8IGRvYy5ib2R5LnNjcm9sbExlZnQgfHwgMCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB5OmRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvYy5ib2R5LnNjcm9sbFRvcCB8fCAwXHJcblx0ICAgICAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgIHZhciB3aW5IZWlnaHQgPSBnZXRWaWV3UGFuZVNpemUoKS5oZWlnaHQsIG9mZnNldCA9IHdpbkhlaWdodCAqIC0xICsgb2Zmc2V0VG9wO1xyXG5cdCAgICAgICAgb2Zmc2V0ICs9IChub2RlLm9mZnNldEhlaWdodCB8fCAwKTtcclxuXHQgICAgICAgIHZhciBlbGVtZW50UG9zaXRpb24gPSBkb21VdGlscy5nZXRYWShub2RlKTtcclxuXHQgICAgICAgIG9mZnNldCArPSBlbGVtZW50UG9zaXRpb24ueTtcclxuXHQgICAgICAgIHZhciBjdXJyZW50U2Nyb2xsID0gZ2V0U2Nyb2xsUG9zaXRpb24od2luKS55O1xyXG5cdCAgICAgICAgLy8gb2Zmc2V0ICs9IDUwO1xyXG5cdCAgICAgICAgaWYgKG9mZnNldCA+IGN1cnJlbnRTY3JvbGwgfHwgb2Zmc2V0IDwgY3VycmVudFNjcm9sbCAtIHdpbkhlaWdodCkge1xyXG5cdCAgICAgICAgICAgIHdpbi5zY3JvbGxUbygwLCBvZmZzZXQgKyAob2Zmc2V0IDwgMCA/IC0yMCA6IDIwKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDliKTmlq3nu5nlrproioLngrnmmK/lkKbkuLpiclxyXG5cdCAgICAgKiBAbWV0aG9kIGlzQnJcclxuXHQgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg6ZyA6KaB5Yik5pat55qE6IqC54K55a+56LGhXHJcblx0ICAgICAqIEByZXR1cm4geyBCb29sZWFuIH0g57uZ5a6a55qE6IqC54K55piv5ZCm5pivYnLoioLngrlcclxuXHQgICAgICovXHJcblx0ICAgIGlzQnI6ZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09IDEgJiYgbm9kZS50YWdOYW1lID09ICdCUic7XHJcblx0ICAgIH0sXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDliKTmlq3nu5nlrprnmoToioLngrnmmK/lkKbmmK/kuIDkuKrigJzloavlhYXigJ3oioLngrlcclxuXHQgICAgICogQHByaXZhdGVcclxuXHQgICAgICogQG1ldGhvZCBpc0ZpbGxDaGFyXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlIOmcgOimgeWIpOaWreeahOiKgueCuVxyXG5cdCAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gaXNJblN0YXJ0IOaYr+WQpuS7juiKgueCueWGheWuueeahOW8gOWni+S9jee9ruWMuemFjVxyXG5cdCAgICAgKiBAcmV0dXJucyB7IEJvb2xlYW4gfSDoioLngrnmmK/lkKbmmK/loavlhYXoioLngrlcclxuXHQgICAgICovXHJcblx0ICAgIGlzRmlsbENoYXI6ZnVuY3Rpb24gKG5vZGUsaXNJblN0YXJ0KSB7XHJcblx0ICAgICAgICBpZihub2RlLm5vZGVUeXBlICE9IDMpXHJcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgdmFyIHRleHQgPSBub2RlLm5vZGVWYWx1ZTtcclxuXHQgICAgICAgIGlmKGlzSW5TdGFydCl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgZG9tVXRpbHMuZmlsbENoYXIpLnRlc3QodGV4dClcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiAhdGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAoZG9tVXRpbHMuZmlsbENoYXIsJ2cnKSwgJycpLmxlbmd0aFxyXG5cdCAgICB9LFxyXG5cdCAgICBpc1N0YXJ0SW5ibG9jazpmdW5jdGlvbiAocmFuZ2UpIHtcclxuXHQgICAgICAgIHZhciB0bXBSYW5nZSA9IHJhbmdlLmNsb25lUmFuZ2UoKSxcclxuXHQgICAgICAgICAgICBmbGFnID0gMCxcclxuXHQgICAgICAgICAgICBzdGFydCA9IHRtcFJhbmdlLnN0YXJ0Q29udGFpbmVyLFxyXG5cdCAgICAgICAgICAgIHRtcDtcclxuXHQgICAgICAgIGlmKHN0YXJ0Lm5vZGVUeXBlID09IDEgJiYgc3RhcnQuY2hpbGROb2Rlc1t0bXBSYW5nZS5zdGFydE9mZnNldF0pe1xyXG5cdCAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQuY2hpbGROb2Rlc1t0bXBSYW5nZS5zdGFydE9mZnNldF07XHJcblx0ICAgICAgICAgICAgdmFyIHByZSA9IHN0YXJ0LnByZXZpb3VzU2libGluZztcclxuXHQgICAgICAgICAgICB3aGlsZShwcmUgJiYgZG9tVXRpbHMuaXNGaWxsQ2hhcihwcmUpKXtcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQgPSBwcmU7XHJcblx0ICAgICAgICAgICAgICAgIHByZSA9IHByZS5wcmV2aW91c1NpYmxpbmc7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYodGhpcy5pc0ZpbGxDaGFyKHN0YXJ0LHRydWUpICYmIHRtcFJhbmdlLnN0YXJ0T2Zmc2V0ID09IDEpe1xyXG5cdCAgICAgICAgICAgIHRtcFJhbmdlLnNldFN0YXJ0QmVmb3JlKHN0YXJ0KTtcclxuXHQgICAgICAgICAgICBzdGFydCA9IHRtcFJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIHdoaWxlIChzdGFydCAmJiBkb21VdGlscy5pc0ZpbGxDaGFyKHN0YXJ0KSkge1xyXG5cdCAgICAgICAgICAgIHRtcCA9IHN0YXJ0O1xyXG5cdCAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQucHJldmlvdXNTaWJsaW5nXHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAodG1wKSB7XHJcblx0ICAgICAgICAgICAgdG1wUmFuZ2Uuc2V0U3RhcnRCZWZvcmUodG1wKTtcclxuXHQgICAgICAgICAgICBzdGFydCA9IHRtcFJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKHN0YXJ0Lm5vZGVUeXBlID09IDEgJiYgZG9tVXRpbHMuaXNFbXB0eU5vZGUoc3RhcnQpICYmIHRtcFJhbmdlLnN0YXJ0T2Zmc2V0ID09IDEpIHtcclxuXHQgICAgICAgICAgICB0bXBSYW5nZS5zZXRTdGFydChzdGFydCwgMCkuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB3aGlsZSAoIXRtcFJhbmdlLnN0YXJ0T2Zmc2V0KSB7XHJcblx0ICAgICAgICAgICAgc3RhcnQgPSB0bXBSYW5nZS5zdGFydENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICBpZiAoZG9tVXRpbHMuaXNCbG9ja0VsbShzdGFydCkgfHwgZG9tVXRpbHMuaXNCb2R5KHN0YXJ0KSkge1xyXG5cdCAgICAgICAgICAgICAgICBmbGFnID0gMTtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciBwcmUgPSB0bXBSYW5nZS5zdGFydENvbnRhaW5lci5wcmV2aW91c1NpYmxpbmcsXHJcblx0ICAgICAgICAgICAgICAgIHRtcE5vZGU7XHJcblx0ICAgICAgICAgICAgaWYgKCFwcmUpIHtcclxuXHQgICAgICAgICAgICAgICAgdG1wUmFuZ2Uuc2V0U3RhcnRCZWZvcmUodG1wUmFuZ2Uuc3RhcnRDb250YWluZXIpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlIChwcmUgJiYgZG9tVXRpbHMuaXNGaWxsQ2hhcihwcmUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gcHJlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcHJlID0gcHJlLnByZXZpb3VzU2libGluZztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAodG1wTm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wUmFuZ2Uuc2V0U3RhcnRCZWZvcmUodG1wTm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0bXBSYW5nZS5zZXRTdGFydEJlZm9yZSh0bXBSYW5nZS5zdGFydENvbnRhaW5lcik7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gZmxhZyAmJiAhZG9tVXRpbHMuaXNCb2R5KHRtcFJhbmdlLnN0YXJ0Q29udGFpbmVyKSA/IDEgOiAwO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWIpOaWree7meWumueahOWFg+e0oOaYr+WQpuaYr+S4gOS4quepuuWFg+e0oFxyXG5cdCAgICAgKiBAbWV0aG9kIGlzRW1wdHlCbG9ja1xyXG5cdCAgICAgKiBAcGFyYW0geyBFbGVtZW50IH0gbm9kZSDpnIDopoHliKTmlq3nmoTlhYPntKBcclxuXHQgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDmmK/lkKbmmK/nqbrlhYPntKBcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8ZGl2IGlkPVwidGVzdFwiPjwvZGl2PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IHRydWVcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBVRS5kb20uZG9tVXRpbHMuaXNFbXB0eUJsb2NrKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRlc3RcIikgKSApO1xyXG5cdCAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOagueaNruaMh+WumueahOWIpOaWreinhOWImeWIpOaWree7meWumueahOWFg+e0oOaYr+WQpuaYr+S4gOS4quepuuWFg+e0oFxyXG5cdCAgICAgKiBAbWV0aG9kIGlzRW1wdHlCbG9ja1xyXG5cdCAgICAgKiBAcGFyYW0geyBFbGVtZW50IH0gbm9kZSDpnIDopoHliKTmlq3nmoTlhYPntKBcclxuXHQgICAgICogQHBhcmFtIHsgUmVnRXhwIH0gcmVnIOWvueWGheWuueaJp+ihjOWIpOaWreeahOato+WImeihqOi+vuW8j+WvueixoVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9IOaYr+WQpuaYr+epuuWFg+e0oFxyXG5cdCAgICAgKi9cclxuXHQgICAgaXNFbXB0eUJsb2NrOmZ1bmN0aW9uIChub2RlLHJlZykge1xyXG5cdCAgICAgICAgaWYobm9kZS5ub2RlVHlwZSAhPSAxKVxyXG5cdCAgICAgICAgICAgIHJldHVybiAwO1xyXG5cdCAgICAgICAgcmVnID0gcmVnIHx8IG5ldyBSZWdFeHAoJ1sgXFx4YTBcXHRcXHJcXG4nICsgZG9tVXRpbHMuZmlsbENoYXIgKyAnXScsICdnJyk7XHJcblxyXG5cdCAgICAgICAgaWYgKG5vZGVbYnJvd3Nlci5pZSA/ICdpbm5lclRleHQnIDogJ3RleHRDb250ZW50J10ucmVwbGFjZShyZWcsICcnKS5sZW5ndGggPiAwKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBmb3IgKHZhciBuIGluIGR0ZC4kaXNOb3RFbXB0eSkge1xyXG5cdCAgICAgICAgICAgIGlmIChub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKG4pLmxlbmd0aCkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gMTtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDnp7vliqjlhYPntKDkvb/lvpfor6XlhYPntKDnmoTkvY3nva7np7vliqjmjIflrprnmoTlgY/np7vph4/nmoTot53nprtcclxuXHQgICAgICogQG1ldGhvZCBzZXRWaWV3cG9ydE9mZnNldFxyXG5cdCAgICAgKiBAcGFyYW0geyBFbGVtZW50IH0gZWxlbWVudCDpnIDopoHorr7nva7lgY/np7vph4/nmoTlhYPntKBcclxuXHQgICAgICogQHBhcmFtIHsgT2JqZWN0IH0gb2Zmc2V0IOWBj+enu+mHj++8jCDlvaLlpoJ7IGxlZnQ6IDEwMCwgdG9wOiA1MCB955qE5LiA5Liq6ZSu5YC85a+577yMIOihqOekuuivpeWFg+e0oOWwhuWcqFxyXG5cdCAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDnjrDmnInnmoTkvY3nva7kuIrlkJHmsLTlubPmlrnlkJHlgY/np7tvZmZzZXQubGVmdOeahOi3neemu++8jCDlnKjnq5bnm7TmlrnlkJHkuIrlgY/np7tcclxuXHQgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LnRvcOeahOi3neemu1xyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBodG1sXHJcblx0ICAgICAqIDxkaXYgaWQ9XCJ0ZXN0XCIgc3R5bGU9XCJ0b3A6IDEwMHB4OyBsZWZ0OiA1MHB4OyBwb3NpdGlvbjogYWJzb2x1dGU7XCI+PC9kaXY+XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICB2YXIgdGVzdE5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRlc3RcIik7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICBVRS5kb20uZG9tVXRpbHMuc2V0Vmlld3BvcnRPZmZzZXQoIHRlc3ROb2RlLCB7XHJcblx0ICAgICAqICAgICAgICAgbGVmdDogMjAwLFxyXG5cdCAgICAgKiAgICAgICAgIHRvcDogNTBcclxuXHQgICAgICogICAgIH0gKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgIC8vb3V0cHV0OiB0b3A6IDMwMHB4OyBsZWZ0OiAxMDBweDsgcG9zaXRpb246IGFic29sdXRlO1xyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIHRlc3ROb2RlLnN0eWxlLmNzc1RleHQgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgc2V0Vmlld3BvcnRPZmZzZXQ6ZnVuY3Rpb24gKGVsZW1lbnQsIG9mZnNldCkge1xyXG5cdCAgICAgICAgdmFyIGxlZnQgPSBwYXJzZUludChlbGVtZW50LnN0eWxlLmxlZnQpIHwgMDtcclxuXHQgICAgICAgIHZhciB0b3AgPSBwYXJzZUludChlbGVtZW50LnN0eWxlLnRvcCkgfCAwO1xyXG5cdCAgICAgICAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cdCAgICAgICAgdmFyIG9mZnNldExlZnQgPSBvZmZzZXQubGVmdCAtIHJlY3QubGVmdDtcclxuXHQgICAgICAgIHZhciBvZmZzZXRUb3AgPSBvZmZzZXQudG9wIC0gcmVjdC50b3A7XHJcblx0ICAgICAgICBpZiAob2Zmc2V0TGVmdCkge1xyXG5cdCAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IGxlZnQgKyBvZmZzZXRMZWZ0ICsgJ3B4JztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmIChvZmZzZXRUb3ApIHtcclxuXHQgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRvcCA9IHRvcCArIG9mZnNldFRvcCArICdweCc7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog55So4oCc5aGr5YWF5a2X56ym4oCd5aGr5YWF6IqC54K5XHJcblx0ICAgICAqIEBtZXRob2QgZmlsbE5vZGVcclxuXHQgICAgICogQHByaXZhdGVcclxuXHQgICAgICogQHBhcmFtIHsgRG9tRG9jdW1lbnQgfSBkb2Mg5aGr5YWF55qE6IqC54K55omA5Zyo55qEZG9jbWVudOWvueixoVxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDpnIDopoHloavlhYXnmoToioLngrnlr7nosaFcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8ZGl2IGlkPVwidGVzdFwiPjwvZGl2PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKiAgICAgdmFyIHRlc3ROb2RlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXN0XCIpO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IDBcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCB0ZXN0Tm9kZS5jaGlsZE5vZGVzLmxlbmd0aCApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgVUUuZG9tLmRvbVV0aWxzLmZpbGxOb2RlKCBkb2N1bWVudCwgdGVzdE5vZGUgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgIC8vb3V0cHV0OiAxXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggdGVzdE5vZGUuY2hpbGROb2Rlcy5sZW5ndGggKTtcclxuXHQgICAgICpcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgZmlsbE5vZGU6ZnVuY3Rpb24gKGRvYywgbm9kZSkge1xyXG5cdCAgICAgICAgdmFyIHRtcE5vZGUgPSBicm93c2VyLmllID8gZG9jLmNyZWF0ZVRleHROb2RlKGRvbVV0aWxzLmZpbGxDaGFyKSA6IGRvYy5jcmVhdGVFbGVtZW50KCdicicpO1xyXG5cdCAgICAgICAgbm9kZS5pbm5lckhUTUwgPSAnJztcclxuXHQgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQodG1wTm9kZSk7XHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5oqK6IqC54K5c3Jj55qE5omA5pyJ5a2Q6IqC54K56L+95Yqg5Yiw5Y+m5LiA5Liq6IqC54K5dGFn5LiK5Y67XHJcblx0ICAgICAqIEBtZXRob2QgbW92ZUNoaWxkXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBzcmMg5rqQ6IqC54K577yMIOivpeiKgueCueS4i+eahOaJgOacieWtkOiKgueCueWwhuiiq+enu+mZpFxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gdGFnIOebruagh+iKgueCue+8jCDku47mupDoioLngrnnp7vpmaTnmoTlrZDoioLngrnlsIbooqvov73liqDliLDor6XoioLngrnkuItcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8ZGl2IGlkPVwidGVzdDFcIj5cclxuXHQgICAgICogICAgICA8c3Bhbj48L3NwYW4+XHJcblx0ICAgICAqIDwvZGl2PlxyXG5cdCAgICAgKiA8ZGl2IGlkPVwidGVzdDJcIj5cclxuXHQgICAgICogICAgIDxkaXY+PC9kaXY+XHJcblx0ICAgICAqIDwvZGl2PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgdmFyIHRlc3QxID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0ZXN0MVwiKSxcclxuXHQgICAgICogICAgICAgICB0ZXN0MiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGVzdDJcIik7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICBVRS5kb20uZG9tVXRpbHMubW92ZUNoaWxkKCB0ZXN0MSwgdGVzdDIgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogICAgIC8vb3V0cHV0OiBcIlwi77yI56m65a2X56ym5Liy77yJXHJcblx0ICAgICAqICAgICBjb25zb2xlLmxvZyggdGVzdDEuaW5uZXJIVE1MICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAvL291dHB1dDogXCI8ZGl2PjwvZGl2PjxzcGFuPjwvc3Bhbj5cIlxyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIHRlc3QyLmlubmVySFRNTCApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOaKiuiKgueCuXNyY+eahOaJgOacieWtkOiKgueCueenu+WKqOWIsOWPpuS4gOS4quiKgueCuXRhZ+S4iuWOuywg5Y+v5Lul6YCa6L+HZGly5Y+C5pWw5o6n5Yi26ZmE5Yqg55qE6KGM5Li65piv4oCc6L+95Yqg4oCd6L+Y5piv4oCc5o+S5YWl6aG26YOo4oCdXHJcblx0ICAgICAqIEBtZXRob2QgbW92ZUNoaWxkXHJcblx0ICAgICAqIEBwYXJhbSB7IE5vZGUgfSBzcmMg5rqQ6IqC54K577yMIOivpeiKgueCueS4i+eahOaJgOacieWtkOiKgueCueWwhuiiq+enu+mZpFxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gdGFnIOebruagh+iKgueCue+8jCDku47mupDoioLngrnnp7vpmaTnmoTlrZDoioLngrnlsIbooqvpmYTliqDliLDor6XoioLngrnkuItcclxuXHQgICAgICogQHBhcmFtIHsgQm9vbGVhbiB9IGRpciDpmYTliqDmlrnlvI/vvIwg5aaC5p6c5Li6dHJ1Ze+8jCDliJnpmYTliqDov5vljrvnmoToioLngrnlsIbooqvmlL7liLDnm67moIfoioLngrnnmoTpobbpg6jvvIwg5Y+N5LmL77yM5YiZ5pS+5Yiw5pyr5bC+XHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGh0bWxcclxuXHQgICAgICogPGRpdiBpZD1cInRlc3QxXCI+XHJcblx0ICAgICAqICAgICAgPHNwYW4+PC9zcGFuPlxyXG5cdCAgICAgKiA8L2Rpdj5cclxuXHQgICAgICogPGRpdiBpZD1cInRlc3QyXCI+XHJcblx0ICAgICAqICAgICA8ZGl2PjwvZGl2PlxyXG5cdCAgICAgKiA8L2Rpdj5cclxuXHQgICAgICpcclxuXHQgICAgICogPHNjcmlwdD5cclxuXHQgICAgICpcclxuXHQgICAgICogICAgIHZhciB0ZXN0MSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGVzdDFcIiksXHJcblx0ICAgICAqICAgICAgICAgdGVzdDIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRlc3QyXCIpO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgVUUuZG9tLmRvbVV0aWxzLm1vdmVDaGlsZCggdGVzdDEsIHRlc3QyLCB0cnVlICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAvL291dHB1dDogXCJcIu+8iOepuuWtl+espuS4su+8iVxyXG5cdCAgICAgKiAgICAgY29uc29sZS5sb2coIHRlc3QxLmlubmVySFRNTCApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IFwiPHNwYW4+PC9zcGFuPjxkaXY+PC9kaXY+XCJcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCB0ZXN0Mi5pbm5lckhUTUwgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgbW92ZUNoaWxkOmZ1bmN0aW9uIChzcmMsIHRhZywgZGlyKSB7XHJcblx0ICAgICAgICB3aGlsZSAoc3JjLmZpcnN0Q2hpbGQpIHtcclxuXHQgICAgICAgICAgICBpZiAoZGlyICYmIHRhZy5maXJzdENoaWxkKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRhZy5pbnNlcnRCZWZvcmUoc3JjLmxhc3RDaGlsZCwgdGFnLmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHRhZy5hcHBlbmRDaGlsZChzcmMuZmlyc3RDaGlsZCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWIpOaWreiKgueCueeahOagh+etvuS4iuaYr+WQpuS4jeWtmOWcqOS7u+S9leWxnuaAp1xyXG5cdCAgICAgKiBAbWV0aG9kIGhhc05vQXR0cmlidXRlc1xyXG5cdCAgICAgKiBAcHJpdmF0ZVxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDpnIDopoHmo4DmtYvnmoToioLngrnlr7nosaFcclxuXHQgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDoioLngrnmmK/lkKbkuI3ljIXlkKvku7vkvZXlsZ7mgKdcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8ZGl2IGlkPVwidGVzdFwiPjxzcGFuPnh4eHg8L3NwYW4+PC9kaXY+XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAqXHJcblx0ICAgICAqICAgICAvL291dHB1dDogZmFsc2VcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBVRS5kb20uZG9tVXRpbHMuaGFzTm9BdHRyaWJ1dGVzKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRlc3RcIikgKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IHRydWVcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBVRS5kb20uZG9tVXRpbHMuaGFzTm9BdHRyaWJ1dGVzKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRlc3RcIikuZmlyc3RDaGlsZCApICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIGhhc05vQXR0cmlidXRlczpmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgcmV0dXJuIGJyb3dzZXIuaWUgPyAvXjxcXHcrXFxzKj8+Ly50ZXN0KG5vZGUub3V0ZXJIVE1MKSA6IG5vZGUuYXR0cmlidXRlcy5sZW5ndGggPT0gMDtcclxuXHQgICAgfSxcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmo4DmtYvoioLngrnmmK/lkKbmmK9VRWRpdG9y5omA5L2/55So55qE6L6F5Yqp6IqC54K5XHJcblx0ICAgICAqIEBtZXRob2QgaXNDdXN0b21lTm9kZVxyXG5cdCAgICAgKiBAcHJpdmF0ZVxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDpnIDopoHmo4DmtYvnmoToioLngrlcclxuXHQgICAgICogQHJlbWluZCDovoXliqnoioLngrnmmK/mjIfnvJbovpHlmajopoHlrozmiJDlt6XkvZzkuLTml7bmt7vliqDnmoToioLngrnvvIwg5Zyo6L6T5Ye655qE5pe25YCZ5bCG5Lya5LuO57yW6L6R5Zmo5YaF56e76Zmk77yMIOS4jeS8muW9seWTjeacgOe7iOeahOe7k+aenOOAglxyXG5cdCAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9IOe7meWumueahOiKgueCueaYr+WQpuaYr+S4gOS4qui+heWKqeiKgueCuVxyXG5cdCAgICAgKi9cclxuXHQgICAgaXNDdXN0b21lTm9kZTpmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT0gMSAmJiBub2RlLmdldEF0dHJpYnV0ZSgnX3VlX2N1c3RvbV9ub2RlXycpO1xyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOajgOa1i+iKgueCueeahOagh+etvuaYr+WQpuaYr+e7meWumueahOagh+etvlxyXG5cdCAgICAgKiBAbWV0aG9kIGlzVGFnTm9kZVxyXG5cdCAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDpnIDopoHmo4DmtYvnmoToioLngrnlr7nosaFcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gdGFnTmFtZSDmoIfnrb5cclxuXHQgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDoioLngrnnmoTmoIfnrb7mmK/lkKbmmK/nu5nlrprnmoTmoIfnrb5cclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgaHRtbFxyXG5cdCAgICAgKiA8ZGl2IGlkPVwidGVzdFwiPjwvZGl2PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAgICAgLy9vdXRwdXQ6IHRydWVcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCBVRS5kb20uZG9tVXRpbHMuaXNUYWdOb2RlKCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRlc3RcIiksIFwiZGl2XCIgKSApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBpc1RhZ05vZGU6ZnVuY3Rpb24gKG5vZGUsIHRhZ05hbWVzKSB7XHJcblx0ICAgICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PSAxICYmIG5ldyBSZWdFeHAoJ1xcXFxiJyArIG5vZGUudGFnTmFtZSArICdcXFxcYicsJ2knKS50ZXN0KHRhZ05hbWVzKVxyXG5cdCAgICB9LFxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOe7meWumuS4gOS4quiKgueCueaVsOe7hO+8jOWcqOmAmui/h+aMh+WumueahOi/h+a7pOWZqOi/h+a7pOWQju+8jCDojrflj5blhbbkuK3mu6HotrPov4fmu6TmnaHku7bnmoTnrKzkuIDkuKroioLngrlcclxuXHQgICAgICogQG1ldGhvZCBmaWx0ZXJOb2RlTGlzdFxyXG5cdCAgICAgKiBAcGFyYW0geyBBcnJheSB9IG5vZGVMaXN0IOmcgOimgei/h+a7pOeahOiKgueCueaVsOe7hFxyXG5cdCAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZuIOi/h+a7pOWZqO+8jCDlr7nnrKblkIjmnaHku7bnmoToioLngrnvvIwg5omn6KGM57uT5p6c6L+U5ZuedHJ1Ze+8jCDlj43kuYvliJnov5Tlm55mYWxzZVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgTm9kZSB8IE5VTEwgfSDlpoLmnpzmib7liLDnrKblkIjov4fmu6TmnaHku7bnmoToioLngrnvvIwg5YiZ6L+U5Zue6K+l6IqC54K577yMIOWQpuWImei/lOWbnk5VTExcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiB2YXIgZGl2Tm9kZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImRpdlwiKTtcclxuXHQgICAgICogZGl2Tm9kZXMgPSBbXS5zbGljZS5jYWxsKCBkaXZOb2RlcywgMCApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL291dHB1dDogbnVsbFxyXG5cdCAgICAgKiBjb25zb2xlLmxvZyggVUUuZG9tLmRvbVV0aWxzLmZpbHRlck5vZGVMaXN0KCBkaXZOb2RlcywgZnVuY3Rpb24gKCBub2RlICkge1xyXG5cdCAgICAgKiAgICAgcmV0dXJuIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnZGl2JztcclxuXHQgICAgICogfSApICk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDnu5nlrprkuIDkuKroioLngrnmlbDnu4Rub2RlTGlzdOWSjOS4gOe7hOagh+etvuWQjXRhZ05hbWVz77yMIOiOt+WPluWFtuS4reiDveWkn+WMuemFjeagh+etvuWQjeeahOiKgueCuembhuWQiOS4reeahOesrOS4gOS4quiKgueCuVxyXG5cdCAgICAgKiBAbWV0aG9kIGZpbHRlck5vZGVMaXN0XHJcblx0ICAgICAqIEBwYXJhbSB7IEFycmF5IH0gbm9kZUxpc3Qg6ZyA6KaB6L+H5ruk55qE6IqC54K55pWw57uEXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IHRhZ05hbWVzIOmcgOimgeWMuemFjeeahOagh+etvuWQje+8jCDlpJrkuKrmoIfnrb7lkI3kuYvpl7TnlKjnqbrmoLzliIblibJcclxuXHQgICAgICogQHJldHVybiB7IE5vZGUgfCBOVUxMIH0g5aaC5p6c5om+5Yiw5qCH562+5ZCN5Yy56YWN55qE6IqC54K577yMIOWImei/lOWbnuivpeiKgueCue+8jCDlkKbliJnov5Tlm55OVUxMXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogdmFyIGRpdk5vZGVzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJkaXZcIik7XHJcblx0ICAgICAqIGRpdk5vZGVzID0gW10uc2xpY2UuY2FsbCggZGl2Tm9kZXMsIDAgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IG51bGxcclxuXHQgICAgICogY29uc29sZS5sb2coIFVFLmRvbS5kb21VdGlscy5maWx0ZXJOb2RlTGlzdCggZGl2Tm9kZXMsICdhIHNwYW4nICkgKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOe7meWumuS4gOS4quiKgueCueaVsOe7hO+8jOWcqOmAmui/h+aMh+WumueahOi/h+a7pOWZqOi/h+a7pOWQju+8jCDlpoLmnpzlj4LmlbBmb3JBbGzkuLp0cnVl77yMIOWImeS8mui/lOWbnuaJgOaciea7oei2s+i/h+a7pFxyXG5cdCAgICAgKiDmnaHku7bnmoToioLngrnpm4blkIjvvIwg5ZCm5YiZ77yMIOi/lOWbnua7oei2s+adoeS7tueahOiKgueCuembhuWQiOS4reeahOesrOS4gOS4quiKgueCuVxyXG5cdCAgICAgKiBAbWV0aG9kIGZpbHRlck5vZGVMaXN0XHJcblx0ICAgICAqIEBwYXJhbSB7IEFycmF5IH0gbm9kZUxpc3Qg6ZyA6KaB6L+H5ruk55qE6IqC54K55pWw57uEXHJcblx0ICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZm4g6L+H5ruk5Zmo77yMIOWvueespuWQiOadoeS7tueahOiKgueCue+8jCDmiafooYznu5Pmnpzov5Tlm550cnVl77yMIOWPjeS5i+WImei/lOWbnmZhbHNlXHJcblx0ICAgICAqIEBwYXJhbSB7IEJvb2xlYW4gfSBmb3JBbGwg5piv5ZCm6L+U5Zue5pW05Liq6IqC54K55pWw57uELCDlpoLmnpzor6Xlj4LmlbDkuLpmYWxzZe+8jCDliJnov5Tlm57oioLngrnpm4blkIjkuK3nmoTnrKzkuIDkuKroioLngrlcclxuXHQgICAgICogQHJldHVybiB7IEFycmF5IHwgTm9kZSB8IE5VTEwgfSDlpoLmnpzmib7liLDnrKblkIjov4fmu6TmnaHku7bnmoToioLngrnvvIwg5YiZ5qC55o2u5Y+C5pWwZm9yQWxs55qE5YC85Yaz5a6a6L+U5Zue5ruh6LazXHJcblx0ICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDov4fmu6TmnaHku7bnmoToioLngrnmlbDnu4TmiJbnrKzkuIDkuKroioLngrnvvIwg5ZCm5YiZ6L+U5ZueTlVMTFxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIHZhciBkaXZOb2RlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpO1xyXG5cdCAgICAgKiBkaXZOb2RlcyA9IFtdLnNsaWNlLmNhbGwoIGRpdk5vZGVzLCAwICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vb3V0cHV0OiAz77yI5YGH5a6a5pyJM+S4qmRpdu+8iVxyXG5cdCAgICAgKiBjb25zb2xlLmxvZyggZGl2Tm9kZXMubGVuZ3RoICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIHZhciBub2RlcyA9IFVFLmRvbS5kb21VdGlscy5maWx0ZXJOb2RlTGlzdCggZGl2Tm9kZXMsIGZ1bmN0aW9uICggbm9kZSApIHtcclxuXHQgICAgICogICAgIHJldHVybiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2Rpdic7XHJcblx0ICAgICAqIH0sIHRydWUgKTtcclxuXHQgICAgICpcclxuXHQgICAgICogLy9vdXRwdXQ6IDNcclxuXHQgICAgICogY29uc29sZS5sb2coIG5vZGVzLmxlbmd0aCApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiB2YXIgbm9kZSA9IFVFLmRvbS5kb21VdGlscy5maWx0ZXJOb2RlTGlzdCggZGl2Tm9kZXMsIGZ1bmN0aW9uICggbm9kZSApIHtcclxuXHQgICAgICogICAgIHJldHVybiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2Rpdic7XHJcblx0ICAgICAqIH0sIGZhbHNlICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vb3V0cHV0OiBkaXZcclxuXHQgICAgICogY29uc29sZS5sb2coIG5vZGUubm9kZU5hbWUgKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICBmaWx0ZXJOb2RlTGlzdCA6IGZ1bmN0aW9uKG5vZGVsaXN0LGZpbHRlcixmb3JBbGwpe1xyXG5cdCAgICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcclxuXHQgICAgICAgIGlmKCF1dGlscyAuaXNGdW5jdGlvbihmaWx0ZXIpKXtcclxuXHQgICAgICAgICAgICB2YXIgc3RyID0gZmlsdGVyO1xyXG5cdCAgICAgICAgICAgIGZpbHRlciA9IGZ1bmN0aW9uKG4pe1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdXRpbHMuaW5kZXhPZih1dGlscy5pc0FycmF5KHN0cikgPyBzdHI6c3RyLnNwbGl0KCcgJyksIG4udGFnTmFtZS50b0xvd2VyQ2FzZSgpKSAhPSAtMVxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB1dGlscy5lYWNoKG5vZGVsaXN0LGZ1bmN0aW9uKG4pe1xyXG5cdCAgICAgICAgICAgIGZpbHRlcihuKSAmJiByZXN1bHRzLnB1c2gobilcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgcmV0dXJuIHJlc3VsdHMubGVuZ3RoICA9PSAwID8gbnVsbCA6IHJlc3VsdHMubGVuZ3RoID09IDEgfHwgIWZvckFsbCA/IHJlc3VsdHNbMF0gOiByZXN1bHRzXHJcblx0ICAgIH0sXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5p+l6K+i57uZ5a6a55qEcmFuZ2XpgInljLrmmK/lkKblnKjnu5nlrprnmoRub2Rl6IqC54K55YaF77yM5LiU5Zyo6K+l6IqC54K555qE5pyA5pyr5bC+XHJcblx0ICAgICAqIEBtZXRob2QgaXNJbk5vZGVFbmRCb3VuZGFyeVxyXG5cdCAgICAgKiBAcGFyYW0geyBVRS5kb20uUmFuZ2UgfSBybmcg6ZyA6KaB5Yik5pat55qEcmFuZ2Xlr7nosaHvvIwg6K+l5a+56LGh55qEc3RhcnRDb250YWluZXLkuI3og73kuLpOVUxMXHJcblx0ICAgICAqIEBwYXJhbSBub2RlIOmcgOimgeajgOa1i+eahOiKgueCueWvueixoVxyXG5cdCAgICAgKiBAcmV0dXJuIHsgTnVtYmVyIH0g5aaC5p6c57uZ5a6a55qE6YCJ5Y+WcmFuZ2Xlr7nosaHmmK/lnKhub2Rl5YaF6YOo55qE5pyA5pyr56uv77yMIOWImei/lOWbnjEsIOWQpuWImei/lOWbnjBcclxuXHQgICAgICovXHJcblx0ICAgIGlzSW5Ob2RlRW5kQm91bmRhcnkgOiBmdW5jdGlvbiAocm5nLG5vZGUpe1xyXG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gcm5nLnN0YXJ0Q29udGFpbmVyO1xyXG5cdCAgICAgICAgaWYoc3RhcnQubm9kZVR5cGUgPT0gMyAmJiBybmcuc3RhcnRPZmZzZXQgIT0gc3RhcnQubm9kZVZhbHVlLmxlbmd0aCl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZihzdGFydC5ub2RlVHlwZSA9PSAxICYmIHJuZy5zdGFydE9mZnNldCAhPSBzdGFydC5jaGlsZE5vZGVzLmxlbmd0aCl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB3aGlsZShzdGFydCAhPT0gbm9kZSl7XHJcblx0ICAgICAgICAgICAgaWYoc3RhcnQubmV4dFNpYmxpbmcpe1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gMFxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgc3RhcnQgPSBzdGFydC5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIDE7XHJcblx0ICAgIH0sXHJcblx0ICAgIGlzQm91bmRhcnlOb2RlIDogZnVuY3Rpb24gKG5vZGUsZGlyKXtcclxuXHQgICAgICAgIHZhciB0bXA7XHJcblx0ICAgICAgICB3aGlsZSghZG9tVXRpbHMuaXNCb2R5KG5vZGUpKXtcclxuXHQgICAgICAgICAgICB0bXAgPSBub2RlO1xyXG5cdCAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgaWYodG1wICE9PSBub2RlW2Rpcl0pe1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgIH0sXHJcblx0ICAgIGZpbGxIdG1sIDogIGJyb3dzZXIuaWUxMWJlbG93ID8gJyZuYnNwOycgOiAnPGJyLz4nXHJcblx0fTtcclxuXHR2YXIgZmlsbENoYXJSZWcgPSBuZXcgUmVnRXhwKGRvbVV0aWxzLmZpbGxDaGFyLCAnZycpO1xyXG5cclxuXHQvLyBjb3JlL1JhbmdlLmpzXHJcblx0LyoqXHJcblx0ICogUmFuZ2XlsIHoo4VcclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBtb2R1bGUgVUUuZG9tXHJcblx0ICogQGNsYXNzIFJhbmdlXHJcblx0ICogQHNpbmNlIDEuMi42LjFcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICogZG9t5pON5L2c5bCB6KOFXHJcblx0ICogQHVuZmlsZVxyXG5cdCAqIEBtb2R1bGUgVUUuZG9tXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIFJhbmdl5a6e546w57G777yM5pys57G75pivVUVkaXRvcuW6leWxguaguOW/g+exu++8jOWwgeijheS4jeWQjOa1j+iniOWZqOS5i+mXtOeahFJhbmdl5pON5L2c44CCXHJcblx0ICogQHVuZmlsZVxyXG5cdCAqIEBtb2R1bGUgVUUuZG9tXHJcblx0ICogQGNsYXNzIFJhbmdlXHJcblx0ICovXHJcblxyXG5cclxuXHQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICB2YXIgZ3VpZCA9IDAsXHJcblx0ICAgICAgICBmaWxsQ2hhciA9IGRvbVV0aWxzLmZpbGxDaGFyLFxyXG5cdCAgICAgICAgZmlsbERhdGE7XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5pu05pawcmFuZ2XnmoRjb2xsYXBzZeeKtuaAgVxyXG5cdCAgICAgKiBAcGFyYW0gIHtSYW5nZX0gICByYW5nZSAgICByYW5nZeWvueixoVxyXG5cdCAgICAgKi9cclxuXHQgICAgZnVuY3Rpb24gdXBkYXRlQ29sbGFwc2UocmFuZ2UpIHtcclxuXHQgICAgICAgIHJhbmdlLmNvbGxhcHNlZCA9XHJcblx0ICAgICAgICAgICAgcmFuZ2Uuc3RhcnRDb250YWluZXIgJiYgcmFuZ2UuZW5kQ29udGFpbmVyICYmXHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLnN0YXJ0Q29udGFpbmVyID09PSByYW5nZS5lbmRDb250YWluZXIgJiZcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRPZmZzZXQgPT0gcmFuZ2UuZW5kT2Zmc2V0O1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBzZWxlY3RPbmVOb2RlKHJuZyl7XHJcblx0ICAgICAgICByZXR1cm4gIXJuZy5jb2xsYXBzZWQgJiYgcm5nLnN0YXJ0Q29udGFpbmVyLm5vZGVUeXBlID09IDEgJiYgcm5nLnN0YXJ0Q29udGFpbmVyID09PSBybmcuZW5kQ29udGFpbmVyICYmIHJuZy5lbmRPZmZzZXQgLSBybmcuc3RhcnRPZmZzZXQgPT0gMVxyXG5cdCAgICB9XHJcblx0ICAgIGZ1bmN0aW9uIHNldEVuZFBvaW50KHRvU3RhcnQsIG5vZGUsIG9mZnNldCwgcmFuZ2UpIHtcclxuXHQgICAgICAgIC8v5aaC5p6cbm9kZeaYr+iHqumXreWQiOagh+etvuimgeWkhOeQhlxyXG5cdCAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSAmJiAoZHRkLiRlbXB0eVtub2RlLnRhZ05hbWVdIHx8IGR0ZC4kbm9uQ2hpbGRbbm9kZS50YWdOYW1lXSkpIHtcclxuXHQgICAgICAgICAgICBvZmZzZXQgPSBkb21VdGlscy5nZXROb2RlSW5kZXgobm9kZSkgKyAodG9TdGFydCA/IDAgOiAxKTtcclxuXHQgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKHRvU3RhcnQpIHtcclxuXHQgICAgICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lciA9IG5vZGU7XHJcblx0ICAgICAgICAgICAgcmFuZ2Uuc3RhcnRPZmZzZXQgPSBvZmZzZXQ7XHJcblx0ICAgICAgICAgICAgaWYgKCFyYW5nZS5lbmRDb250YWluZXIpIHtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICByYW5nZS5lbmRDb250YWluZXIgPSBub2RlO1xyXG5cdCAgICAgICAgICAgIHJhbmdlLmVuZE9mZnNldCA9IG9mZnNldDtcclxuXHQgICAgICAgICAgICBpZiAoIXJhbmdlLnN0YXJ0Q29udGFpbmVyKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKGZhbHNlKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB1cGRhdGVDb2xsYXBzZShyYW5nZSk7XHJcblx0ICAgICAgICByZXR1cm4gcmFuZ2U7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIGV4ZWNDb250ZW50c0FjdGlvbihyYW5nZSwgYWN0aW9uKSB7XHJcblx0ICAgICAgICAvL+iwg+aVtOi+ueeVjFxyXG5cdCAgICAgICAgLy9yYW5nZS5pbmNsdWRlQm9va21hcmsoKTtcclxuXHQgICAgICAgIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyLFxyXG5cdCAgICAgICAgICAgIGVuZCA9IHJhbmdlLmVuZENvbnRhaW5lcixcclxuXHQgICAgICAgICAgICBzdGFydE9mZnNldCA9IHJhbmdlLnN0YXJ0T2Zmc2V0LFxyXG5cdCAgICAgICAgICAgIGVuZE9mZnNldCA9IHJhbmdlLmVuZE9mZnNldCxcclxuXHQgICAgICAgICAgICBkb2MgPSByYW5nZS5kb2N1bWVudCxcclxuXHQgICAgICAgICAgICBmcmFnID0gZG9jLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcclxuXHQgICAgICAgICAgICB0bXBTdGFydCwgdG1wRW5kO1xyXG5cdCAgICAgICAgaWYgKHN0YXJ0Lm5vZGVUeXBlID09IDEpIHtcclxuXHQgICAgICAgICAgICBzdGFydCA9IHN0YXJ0LmNoaWxkTm9kZXNbc3RhcnRPZmZzZXRdIHx8ICh0bXBTdGFydCA9IHN0YXJ0LmFwcGVuZENoaWxkKGRvYy5jcmVhdGVUZXh0Tm9kZSgnJykpKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmIChlbmQubm9kZVR5cGUgPT0gMSkge1xyXG5cdCAgICAgICAgICAgIGVuZCA9IGVuZC5jaGlsZE5vZGVzW2VuZE9mZnNldF0gfHwgKHRtcEVuZCA9IGVuZC5hcHBlbmRDaGlsZChkb2MuY3JlYXRlVGV4dE5vZGUoJycpKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoc3RhcnQgPT09IGVuZCAmJiBzdGFydC5ub2RlVHlwZSA9PSAzKSB7XHJcblx0ICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChkb2MuY3JlYXRlVGV4dE5vZGUoc3RhcnQuc3Vic3RyaW5nRGF0YShzdGFydE9mZnNldCwgZW5kT2Zmc2V0IC0gc3RhcnRPZmZzZXQpKSk7XHJcblx0ICAgICAgICAgICAgLy9pcyBub3QgY2xvbmVcclxuXHQgICAgICAgICAgICBpZiAoYWN0aW9uKSB7XHJcblx0ICAgICAgICAgICAgICAgIHN0YXJ0LmRlbGV0ZURhdGEoc3RhcnRPZmZzZXQsIGVuZE9mZnNldCAtIHN0YXJ0T2Zmc2V0KTtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiBmcmFnO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIGN1cnJlbnQsIGN1cnJlbnRMZXZlbCwgY2xvbmUgPSBmcmFnLFxyXG5cdCAgICAgICAgICAgIHN0YXJ0UGFyZW50cyA9IGRvbVV0aWxzLmZpbmRQYXJlbnRzKHN0YXJ0LCB0cnVlKSwgZW5kUGFyZW50cyA9IGRvbVV0aWxzLmZpbmRQYXJlbnRzKGVuZCwgdHJ1ZSk7XHJcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgc3RhcnRQYXJlbnRzW2ldID09IGVuZFBhcmVudHNbaV07KSB7XHJcblx0ICAgICAgICAgICAgaSsrO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZm9yICh2YXIgaiA9IGksIHNpOyBzaSA9IHN0YXJ0UGFyZW50c1tqXTsgaisrKSB7XHJcblx0ICAgICAgICAgICAgY3VycmVudCA9IHNpLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgIGlmIChzaSA9PSBzdGFydCkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXRtcFN0YXJ0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnRDb250YWluZXIubm9kZVR5cGUgPT0gMykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lLmFwcGVuZENoaWxkKGRvYy5jcmVhdGVUZXh0Tm9kZShzdGFydC5ub2RlVmFsdWUuc2xpY2Uoc3RhcnRPZmZzZXQpKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy9pcyBub3QgY2xvbmVcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0LmRlbGV0ZURhdGEoc3RhcnRPZmZzZXQsIHN0YXJ0Lm5vZGVWYWx1ZS5sZW5ndGggLSBzdGFydE9mZnNldCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZS5hcHBlbmRDaGlsZCghYWN0aW9uID8gc3RhcnQuY2xvbmVOb2RlKHRydWUpIDogc3RhcnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgY3VycmVudExldmVsID0gc2kuY2xvbmVOb2RlKGZhbHNlKTtcclxuXHQgICAgICAgICAgICAgICAgY2xvbmUuYXBwZW5kQ2hpbGQoY3VycmVudExldmVsKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT09IGVuZCB8fCBjdXJyZW50ID09PSBlbmRQYXJlbnRzW2pdKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBzaSA9IGN1cnJlbnQubmV4dFNpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgIGNsb25lLmFwcGVuZENoaWxkKCFhY3Rpb24gPyBjdXJyZW50LmNsb25lTm9kZSh0cnVlKSA6IGN1cnJlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICBjdXJyZW50ID0gc2k7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGNsb25lID0gY3VycmVudExldmVsO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgY2xvbmUgPSBmcmFnO1xyXG5cdCAgICAgICAgaWYgKCFzdGFydFBhcmVudHNbaV0pIHtcclxuXHQgICAgICAgICAgICBjbG9uZS5hcHBlbmRDaGlsZChzdGFydFBhcmVudHNbaSAtIDFdLmNsb25lTm9kZShmYWxzZSkpO1xyXG5cdCAgICAgICAgICAgIGNsb25lID0gY2xvbmUuZmlyc3RDaGlsZDtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGZvciAodmFyIGogPSBpLCBlaTsgZWkgPSBlbmRQYXJlbnRzW2pdOyBqKyspIHtcclxuXHQgICAgICAgICAgICBjdXJyZW50ID0gZWkucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgIGlmIChlaSA9PSBlbmQpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCF0bXBFbmQgJiYgcmFuZ2UuZW5kQ29udGFpbmVyLm5vZGVUeXBlID09IDMpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNsb25lLmFwcGVuZENoaWxkKGRvYy5jcmVhdGVUZXh0Tm9kZShlbmQuc3Vic3RyaW5nRGF0YSgwLCBlbmRPZmZzZXQpKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL2lzIG5vdCBjbG9uZVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuZC5kZWxldGVEYXRhKDAsIGVuZE9mZnNldCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWwgPSBlaS5jbG9uZU5vZGUoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICBjbG9uZS5hcHBlbmRDaGlsZChjdXJyZW50TGV2ZWwpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAvL+WmguaenOS4pOerr+WQjOe6p++8jOWPs+i+ueesrOS4gOasoeW3sue7j+iiq+W8gOWni+WBmuS6hlxyXG5cdCAgICAgICAgICAgIGlmIChqICE9IGkgfHwgIXN0YXJ0UGFyZW50c1tpXSkge1xyXG5cdCAgICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT09IHN0YXJ0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBlaSA9IGN1cnJlbnQucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2xvbmUuaW5zZXJ0QmVmb3JlKCFhY3Rpb24gPyBjdXJyZW50LmNsb25lTm9kZSh0cnVlKSA6IGN1cnJlbnQsIGNsb25lLmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGVpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGNsb25lID0gY3VycmVudExldmVsO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKGFjdGlvbikge1xyXG5cdCAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QmVmb3JlKCFlbmRQYXJlbnRzW2ldID8gZW5kUGFyZW50c1tpIC0gMV0gOiAhc3RhcnRQYXJlbnRzW2ldID8gc3RhcnRQYXJlbnRzW2kgLSAxXSA6IGVuZFBhcmVudHNbaV0pLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdG1wU3RhcnQgJiYgZG9tVXRpbHMucmVtb3ZlKHRtcFN0YXJ0KTtcclxuXHQgICAgICAgIHRtcEVuZCAmJiBkb21VdGlscy5yZW1vdmUodG1wRW5kKTtcclxuXHQgICAgICAgIHJldHVybiBmcmFnO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Yib5bu65LiA5Liq6LefZG9jdW1lbnTnu5HlrprnmoTnqbrnmoRSYW5nZeWunuS+i1xyXG5cdCAgICAgKiBAY29uc3RydWN0b3JcclxuXHQgICAgICogQHBhcmFtIHsgRG9jdW1lbnQgfSBkb2N1bWVudCDmlrDlu7rnmoTpgInljLrmiYDlsZ7nmoTmlofmoaPlr7nosaFcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICogQHByb3BlcnR5IHsgTm9kZSB9IHN0YXJ0Q29udGFpbmVyIOW9k+WJjVJhbmdl55qE5byA5aeL6L6555WM55qE5a655Zmo6IqC54K5LCDlj6/ku6XmmK/kuIDkuKrlhYPntKDoioLngrnmiJbogIXmmK/mlofmnKzoioLngrlcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICogQHByb3BlcnR5IHsgTm9kZSB9IHN0YXJ0T2Zmc2V0IOW9k+WJjVJhbmdl55qE5byA5aeL6L6555WM5a655Zmo6IqC54K555qE5YGP56e76YePLCDlpoLmnpzmmK/lhYPntKDoioLngrnvvIxcclxuXHQgICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICDor6XlgLzlsLHmmK9jaGlsZE5vZGVz5Lit55qE56ys5Yeg5Liq6IqC54K577yMIOWmguaenOaYr+aWh+acrOiKgueCueWwseaYr+aWh+acrOWGheWuueeahOesrOWHoOS4quWtl+esplxyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBAcHJvcGVydHkgeyBOb2RlIH0gZW5kQ29udGFpbmVyIOW9k+WJjVJhbmdl55qE57uT5p2f6L6555WM55qE5a655Zmo6IqC54K5LCDlj6/ku6XmmK/kuIDkuKrlhYPntKDoioLngrnmiJbogIXmmK/mlofmnKzoioLngrlcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICogQHByb3BlcnR5IHsgTm9kZSB9IGVuZE9mZnNldCDlvZPliY1SYW5nZeeahOe7k+adn+i+ueeVjOWuueWZqOiKgueCueeahOWBj+enu+mHjywg5aaC5p6c5piv5YWD57Sg6IqC54K577yMXHJcblx0ICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg6K+l5YC85bCx5pivY2hpbGROb2Rlc+S4reeahOesrOWHoOS4quiKgueCue+8jCDlpoLmnpzmmK/mlofmnKzoioLngrnlsLHmmK/mlofmnKzlhoXlrrnnmoTnrKzlh6DkuKrlrZfnrKZcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICogQHByb3BlcnR5IHsgQm9vbGVhbiB9IGNvbGxhcHNlZCDlvZPliY1SYW5nZeaYr+WQpumXreWQiFxyXG5cdCAgICAgKiBAZGVmYXVsdCB0cnVlXHJcblx0ICAgICAqIEByZW1pbmQgUmFuZ2XmmK/pl63lkIjnmoTml7blgJnvvIwgc3RhcnRDb250YWluZXIgPT09IGVuZENvbnRhaW5lciAmJiBzdGFydE9mZnNldCA9PT0gZW5kT2Zmc2V0XHJcblx0ICAgICAqL1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIEBwcm9wZXJ0eSB7IERvY3VtZW50IH0gZG9jdW1lbnQg5b2T5YmNUmFuZ2XmiYDlsZ7nmoREb2N1bWVudOWvueixoVxyXG5cdCAgICAgKiBAcmVtaW5kIOS4jeWQjHJhbmdl55qE55qEZG9jdW1lbnTlsZ7mgKflj6/ku6XmmK/kuI3lkIznmoRcclxuXHQgICAgICovXHJcblx0ICAgIHZhciBSYW5nZSA9IGRvbS5SYW5nZSA9IGZ1bmN0aW9uIChkb2N1bWVudCkge1xyXG5cdCAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgIG1lLnN0YXJ0Q29udGFpbmVyID1cclxuXHQgICAgICAgICAgICBtZS5zdGFydE9mZnNldCA9XHJcblx0ICAgICAgICAgICAgICAgIG1lLmVuZENvbnRhaW5lciA9XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5lbmRPZmZzZXQgPSBudWxsO1xyXG5cdCAgICAgICAgbWUuZG9jdW1lbnQgPSBkb2N1bWVudDtcclxuXHQgICAgICAgIG1lLmNvbGxhcHNlZCA9IHRydWU7XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5Yig6ZmkZmlsbERhdGFcclxuXHQgICAgICogQHBhcmFtIGRvY1xyXG5cdCAgICAgKiBAcGFyYW0gZXhjbHVkZU5vZGVcclxuXHQgICAgICovXHJcblx0ICAgIGZ1bmN0aW9uIHJlbW92ZUZpbGxEYXRhKGRvYywgZXhjbHVkZU5vZGUpIHtcclxuXHQgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgaWYgKGZpbGxEYXRhICYmIGRvbVV0aWxzLmluRG9jKGZpbGxEYXRhLCBkb2MpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghZmlsbERhdGEubm9kZVZhbHVlLnJlcGxhY2UoZmlsbENoYXJSZWcsICcnKS5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0bXBOb2RlID0gZmlsbERhdGEucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShmaWxsRGF0YSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZSAodG1wTm9kZSAmJiBkb21VdGlscy5pc0VtcHR5SW5saW5lRWxlbWVudCh0bXBOb2RlKSAmJlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vc2FmYXJp55qEY29udGFpbnPmnIlidWdcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAoYnJvd3Nlci5zYWZhcmkgPyAhKGRvbVV0aWxzLmdldFBvc2l0aW9uKHRtcE5vZGUsZXhjbHVkZU5vZGUpICYgZG9tVXRpbHMuUE9TSVRJT05fQ09OVEFJTlMpIDogIXRtcE5vZGUuY29udGFpbnMoZXhjbHVkZU5vZGUpKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZpbGxEYXRhID0gdG1wTm9kZS5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSh0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gZmlsbERhdGE7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmaWxsRGF0YS5ub2RlVmFsdWUgPSBmaWxsRGF0YS5ub2RlVmFsdWUucmVwbGFjZShmaWxsQ2hhclJlZywgJycpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICogQHBhcmFtIG5vZGVcclxuXHQgICAgICogQHBhcmFtIGRpclxyXG5cdCAgICAgKi9cclxuXHQgICAgZnVuY3Rpb24gbWVyZ2VTaWJsaW5nKG5vZGUsIGRpcikge1xyXG5cdCAgICAgICAgdmFyIHRtcE5vZGU7XHJcblx0ICAgICAgICBub2RlID0gbm9kZVtkaXJdO1xyXG5cdCAgICAgICAgd2hpbGUgKG5vZGUgJiYgZG9tVXRpbHMuaXNGaWxsQ2hhcihub2RlKSkge1xyXG5cdCAgICAgICAgICAgIHRtcE5vZGUgPSBub2RlW2Rpcl07XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKG5vZGUpO1xyXG5cdCAgICAgICAgICAgIG5vZGUgPSB0bXBOb2RlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBSYW5nZS5wcm90b3R5cGUgPSB7XHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlhYvpmobpgInljLrnmoTlhoXlrrnliLDkuIDkuKpEb2N1bWVudEZyYWdtZW506YeMXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGNsb25lQ29udGVudHNcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBEb2N1bWVudEZyYWdtZW50IHwgTlVMTCB9IOWmguaenOmAieWMuuaYr+mXreWQiOeahOWwhui/lOWbnm51bGzvvIwg5ZCm5YiZ77yMIOi/lOWbnuWMheWQq+aJgGNsb25l5YaF5a6555qERG9jdW1lbnRGcmFnbWVudOWFg+e0oFxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGh0bWxcclxuXHQgICAgICAgICAqIDxib2R5PlxyXG5cdCAgICAgICAgICogICAgICA8IS0tIOS4reaLrOWPt+ihqOekuumAieWMuiAtLT5cclxuXHQgICAgICAgICAqICAgICAgPGI+eDxpPnhbeDwvaT54eF14PC9iPlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAgPHNjcmlwdD5cclxuXHQgICAgICAgICAqICAgICAgICAgIC8vcmFuZ2XmmK/lt7LpgInkuK3nmoTpgInljLpcclxuXHQgICAgICAgICAqICAgICAgICAgIHZhciBmcmFnbWVudCA9IHJhbmdlLmNsb25lQ29udGVudHMoKSxcclxuXHQgICAgICAgICAqICAgICAgICAgICAgICBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKCBmcmFnbWVudCApO1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAgICAgIC8vb3V0cHV0OiA8aT54PC9pPnh4XHJcblx0ICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmxvZyggbm9kZS5pbm5lckhUTUwgKTtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgIDwvc2NyaXB0PlxyXG5cdCAgICAgICAgICogPC9ib2R5PlxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGNsb25lQ29udGVudHM6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbGxhcHNlZCA/IG51bGwgOiBleGVjQ29udGVudHNBY3Rpb24odGhpcywgMCk7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5Yig6Zmk5b2T5YmN6YCJ5Yy66IyD5Zu05Lit55qE5omA5pyJ5YaF5a65XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGRlbGV0ZUNvbnRlbnRzXHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOaJp+ihjOWujOivpeaTjeS9nOWQju+8jCDlvZPliY1SYW5nZeWvueixoeWPmOaIkOS6humXreWQiOeKtuaAgVxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFVFLmRvbS5SYW5nZSB9IOW9k+WJjeaTjeS9nOeahFJhbmdl5a+56LGhXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgaHRtbFxyXG5cdCAgICAgICAgICogPGJvZHk+XHJcblx0ICAgICAgICAgKiAgICAgIDwhLS0g5Lit5ous5Y+36KGo56S66YCJ5Yy6IC0tPlxyXG5cdCAgICAgICAgICogICAgICA8Yj54PGk+eFt4PC9pPnh4XXg8L2I+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgICA8c2NyaXB0PlxyXG5cdCAgICAgICAgICogICAgICAgICAgLy9yYW5nZeaYr+W3sumAieS4reeahOmAieWMulxyXG5cdCAgICAgICAgICogICAgICAgICAgcmFuZ2UuZGVsZXRlQ29udGVudHMoKTtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgICAgICAvL+erlue6v+ihqOekuumXreWQiOWQjueahOmAieWMuuS9jee9rlxyXG5cdCAgICAgICAgICogICAgICAgICAgLy9vdXRwdXQ6IDxiPng8aT54PC9pPnx4PC9iPlxyXG5cdCAgICAgICAgICogICAgICAgICAgY29uc29sZS5sb2coIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MICk7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgICAgICAgLy/mraTml7bvvIwgcmFuZ2XnmoTlkITpobnlsZ7mgKfkuLpcclxuXHQgICAgICAgICAqICAgICAgICAgIC8vb3V0cHV0OiBCXHJcblx0ICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmxvZyggcmFuZ2Uuc3RhcnRDb250YWluZXIudGFnTmFtZSApO1xyXG5cdCAgICAgICAgICogICAgICAgICAgLy9vdXRwdXQ6IDJcclxuXHQgICAgICAgICAqICAgICAgICAgIGNvbnNvbGUubG9nKCByYW5nZS5zdGFydE9mZnNldCApO1xyXG5cdCAgICAgICAgICogICAgICAgICAgLy9vdXRwdXQ6IEJcclxuXHQgICAgICAgICAqICAgICAgICAgIGNvbnNvbGUubG9nKCByYW5nZS5lbmRDb250YWluZXIudGFnTmFtZSApO1xyXG5cdCAgICAgICAgICogICAgICAgICAgLy9vdXRwdXQ6IDJcclxuXHQgICAgICAgICAqICAgICAgICAgIGNvbnNvbGUubG9nKCByYW5nZS5lbmRPZmZzZXQgKTtcclxuXHQgICAgICAgICAqICAgICAgICAgIC8vb3V0cHV0OiB0cnVlXHJcblx0ICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmxvZyggcmFuZ2UuY29sbGFwc2VkICk7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgICA8L3NjcmlwdD5cclxuXHQgICAgICAgICAqIDwvYm9keT5cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBkZWxldGVDb250ZW50czpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHR4dDtcclxuXHQgICAgICAgICAgICBpZiAoIXRoaXMuY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgICAgIGV4ZWNDb250ZW50c0FjdGlvbih0aGlzLCAxKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKGJyb3dzZXIud2Via2l0KSB7XHJcblx0ICAgICAgICAgICAgICAgIHR4dCA9IHRoaXMuc3RhcnRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0eHQubm9kZVR5cGUgPT0gMyAmJiAhdHh0Lm5vZGVWYWx1ZS5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnRCZWZvcmUodHh0KS5jb2xsYXBzZSh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSh0eHQpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOWwhuW9k+WJjemAieWMuueahOWGheWuueaPkOWPluWIsOS4gOS4qkRvY3VtZW50RnJhZ21lbnTph4xcclxuXHQgICAgICAgICAqIEBtZXRob2QgZXh0cmFjdENvbnRlbnRzXHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOaJp+ihjOivpeaTjeS9nOWQju+8jCDpgInljLrlsIblj5jmiJDpl63lkIjnirbmgIFcclxuXHQgICAgICAgICAqIEB3YXJuaW5nIOaJp+ihjOivpeaTjeS9nOWQju+8jCDljp/mnaXpgInljLrmiYDpgInkuK3nmoTlhoXlrrnlsIbku45kb23moJHkuIrliaXnprvlh7rmnaVcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBEb2N1bWVudEZyYWdtZW50IH0g6L+U5Zue5YyF5ZCr5omA5o+Q5Y+W5YaF5a6555qERG9jdW1lbnRGcmFnbWVudOWvueixoVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGh0bWxcclxuXHQgICAgICAgICAqIDxib2R5PlxyXG5cdCAgICAgICAgICogICAgICA8IS0tIOS4reaLrOWPt+ihqOekuumAieWMuiAtLT5cclxuXHQgICAgICAgICAqICAgICAgPGI+eDxpPnhbeDwvaT54eF14PC9iPlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAgPHNjcmlwdD5cclxuXHQgICAgICAgICAqICAgICAgICAgIC8vcmFuZ2XmmK/lt7LpgInkuK3nmoTpgInljLpcclxuXHQgICAgICAgICAqICAgICAgICAgIHZhciBmcmFnbWVudCA9IHJhbmdlLmV4dHJhY3RDb250ZW50cygpLFxyXG5cdCAgICAgICAgICogICAgICAgICAgICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZCggZnJhZ21lbnQgKTtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgICAgICAvL+erlue6v+ihqOekuumXreWQiOWQjueahOmAieWMuuS9jee9rlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAgICAgIC8vb3V0cHV0OiA8Yj54PGk+eDwvaT58eDwvYj5cclxuXHQgICAgICAgICAqICAgICAgICAgIGNvbnNvbGUubG9nKCBkb2N1bWVudC5ib2R5LmlubmVySFRNTCApO1xyXG5cdCAgICAgICAgICogICAgICAgICAgLy9vdXRwdXQ6IDxpPng8L2k+eHhcclxuXHQgICAgICAgICAqICAgICAgICAgIGNvbnNvbGUubG9nKCBub2RlLmlubmVySFRNTCApO1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAgICAgIC8v5q2k5pe277yMIHJhbmdl55qE5ZCE6aG55bGe5oCn5Li6XHJcblx0ICAgICAgICAgKiAgICAgICAgICAvL291dHB1dDogQlxyXG5cdCAgICAgICAgICogICAgICAgICAgY29uc29sZS5sb2coIHJhbmdlLnN0YXJ0Q29udGFpbmVyLnRhZ05hbWUgKTtcclxuXHQgICAgICAgICAqICAgICAgICAgIC8vb3V0cHV0OiAyXHJcblx0ICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmxvZyggcmFuZ2Uuc3RhcnRPZmZzZXQgKTtcclxuXHQgICAgICAgICAqICAgICAgICAgIC8vb3V0cHV0OiBCXHJcblx0ICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmxvZyggcmFuZ2UuZW5kQ29udGFpbmVyLnRhZ05hbWUgKTtcclxuXHQgICAgICAgICAqICAgICAgICAgIC8vb3V0cHV0OiAyXHJcblx0ICAgICAgICAgKiAgICAgICAgICBjb25zb2xlLmxvZyggcmFuZ2UuZW5kT2Zmc2V0ICk7XHJcblx0ICAgICAgICAgKiAgICAgICAgICAvL291dHB1dDogdHJ1ZVxyXG5cdCAgICAgICAgICogICAgICAgICAgY29uc29sZS5sb2coIHJhbmdlLmNvbGxhcHNlZCApO1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAgPC9zY3JpcHQ+XHJcblx0ICAgICAgICAgKiA8L2JvZHk+XHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGV4dHJhY3RDb250ZW50czpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sbGFwc2VkID8gbnVsbCA6IGV4ZWNDb250ZW50c0FjdGlvbih0aGlzLCAyKTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDorr7nva5SYW5nZeeahOW8gOWni+WuueWZqOiKgueCueWSjOWBj+enu+mHj1xyXG5cdCAgICAgICAgICogQG1ldGhvZCAgc2V0U3RhcnRcclxuXHQgICAgICAgICAqIEByZW1pbmQg5aaC5p6c57uZ5a6a55qE6IqC54K55piv5YWD57Sg6IqC54K577yM6YKj5LmIb2Zmc2V05oyH55qE5piv5YW25a2Q5YWD57Sg5Lit57Si5byV5Li6b2Zmc2V055qE5YWD57Sg77yMXHJcblx0ICAgICAgICAgKiAgICAgICAgICDlpoLmnpzmmK/mlofmnKzoioLngrnvvIzpgqPkuYhvZmZzZXTmjIfnmoTmmK/lhbbmlofmnKzlhoXlrrnnmoTnrKxvZmZzZXTkuKrlrZfnrKZcclxuXHQgICAgICAgICAqIEByZW1pbmQg5aaC5p6c5o+Q5L6b55qE5a655Zmo6IqC54K55piv5LiA5Liq5LiN6IO95YyF5ZCr5a2Q5YWD57Sg55qE6IqC54K577yMIOWImeivpemAieWMuueahOW8gOWni+WuueWZqOWwhuiiq+iuvue9rlxyXG5cdCAgICAgICAgICogICAgICAgICAg5Li66K+l6IqC54K555qE54i26IqC54K577yMIOatpOaXtu+8jCDlhbbot53nprvlvIDlp4vlrrnlmajnmoTlgY/np7vph4/kuZ/lj5jmiJDkuobor6XoioLngrnlnKjlhbbniLboioLngrlcclxuXHQgICAgICAgICAqICAgICAgICAgIOS4reeahOe0ouW8lVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg5bCG6KKr6K6+5Li65b2T5YmN6YCJ5Yy65byA5aeL6L6555WM5a655Zmo55qE6IqC54K55a+56LGhXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBpbnQgfSBvZmZzZXQg6YCJ5Yy655qE5byA5aeL5L2N572u5YGP56e76YePXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBodG1sXHJcblx0ICAgICAgICAgKiA8IS0tIOmAieWMuiAtLT5cclxuXHQgICAgICAgICAqIDxiPnh4eDxpPng8c3Bhbj54eDwvc3Bhbj54eDxlbT54eDwvZW0+eHh4PC9pPlt4eHhdPC9iPlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIC8v5omn6KGM5pON5L2cXHJcblx0ICAgICAgICAgKiAgICAgcmFuZ2Uuc2V0U3RhcnQoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaVwiKVswXSwgMSApO1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAvL+atpOaXtu+8jCDpgInljLrlj5jmiJDkuoZcclxuXHQgICAgICAgICAqICAgICAvLzxiPnh4eDxpPnhbPHNwYW4+eHg8L3NwYW4+eHg8ZW0+eHg8L2VtPnh4eDwvaT54eHhdPC9iPlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgaHRtbFxyXG5cdCAgICAgICAgICogPCEtLSDpgInljLogLS0+XHJcblx0ICAgICAgICAgKiA8Yj54eHg8aW1nPlt4eF14PC9iPlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIC8v5omn6KGM5pON5L2cXHJcblx0ICAgICAgICAgKiAgICAgcmFuZ2Uuc2V0U3RhcnQoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW1nXCIpWzBdLCAzICk7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIC8v5q2k5pe277yMIOmAieWMuuWPmOaIkOS6hlxyXG5cdCAgICAgICAgICogICAgIC8vPGI+eHh4WzxpbWc+eHhdeDwvYj5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBzZXRTdGFydDpmdW5jdGlvbiAobm9kZSwgb2Zmc2V0KSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHNldEVuZFBvaW50KHRydWUsIG5vZGUsIG9mZnNldCwgdGhpcyk7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6K6+572uUmFuZ2XnmoTnu5PmnZ/lrrnlmajlkozlgY/np7vph49cclxuXHQgICAgICAgICAqIEBtZXRob2QgIHNldEVuZFxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg5L2c5Li65b2T5YmN6YCJ5Yy657uT5p2f6L6555WM5a655Zmo55qE6IqC54K55a+56LGhXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBpbnQgfSBvZmZzZXQg57uT5p2f6L6555WM55qE5YGP56e76YePXHJcblx0ICAgICAgICAgKiBAc2VlIFVFLmRvbS5SYW5nZTpzZXRTdGFydChOb2RlLGludClcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY1yYW5nZeWvueixoVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBzZXRFbmQ6ZnVuY3Rpb24gKG5vZGUsIG9mZnNldCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBzZXRFbmRQb2ludChmYWxzZSwgbm9kZSwgb2Zmc2V0LCB0aGlzKTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlsIZSYW5nZeW8gOWni+S9jee9ruiuvue9ruWIsG5vZGXoioLngrnkuYvlkI5cclxuXHQgICAgICAgICAqIEBtZXRob2QgIHNldFN0YXJ0QWZ0ZXJcclxuXHQgICAgICAgICAqIEByZW1pbmQg6K+l5pON5L2c5bCG5Lya5oqK57uZ5a6a6IqC54K555qE54i26IqC54K55L2c5Li6cmFuZ2XnmoTlvIDlp4vlrrnlmajvvIwg5LiU5YGP56e76YeP5piv6K+l6IqC54K55Zyo5YW254i26IqC54K55Lit55qE5L2N572u57Si5byVKzFcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlIOmAieWMuueahOW8gOWni+i+ueeVjOWwhue0p+aOpeedgOivpeiKgueCueS5i+WQjlxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFVFLmRvbS5SYW5nZSB9IOW9k+WJjXJhbmdl5a+56LGhXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgaHRtbFxyXG5cdCAgICAgICAgICogPCEtLSDpgInljLrnpLrkvosgLS0+XHJcblx0ICAgICAgICAgKiA8Yj54eDxpPnh4eDwvaT48c3Bhbj54eFt4PC9zcGFuPnh4eF08L2I+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogPHNjcmlwdD5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgLy/miafooYzmk43kvZxcclxuXHQgICAgICAgICAqICAgICByYW5nZS5zZXRTdGFydEFmdGVyKCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlcIilbMF0gKTtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgLy/nu5PmnpzpgInljLpcclxuXHQgICAgICAgICAqICAgICAvLzxiPnh4PGk+eHh4PC9pPls8c3Bhbj54eHg8L3NwYW4+eHh4XTwvYj5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBzZXRTdGFydEFmdGVyOmZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhcnQobm9kZS5wYXJlbnROb2RlLCBkb21VdGlscy5nZXROb2RlSW5kZXgobm9kZSkgKyAxKTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlsIZSYW5nZeW8gOWni+S9jee9ruiuvue9ruWIsG5vZGXoioLngrnkuYvliY1cclxuXHQgICAgICAgICAqIEBtZXRob2QgIHNldFN0YXJ0QmVmb3JlXHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOivpeaTjeS9nOWwhuS8muaKiue7meWumuiKgueCueeahOeItuiKgueCueS9nOS4unJhbmdl55qE5byA5aeL5a655Zmo77yMIOS4lOWBj+enu+mHj+aYr+ivpeiKgueCueWcqOWFtueItuiKgueCueS4reeahOS9jee9rue0ouW8lVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg5paw55qE6YCJ5Yy65byA5aeL5L2N572u5Zyo6K+l6IqC54K55LmL5YmNXHJcblx0ICAgICAgICAgKiBAc2VlIFVFLmRvbS5SYW5nZTpzZXRTdGFydEFmdGVyKE5vZGUpXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgc2V0U3RhcnRCZWZvcmU6ZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRTdGFydChub2RlLnBhcmVudE5vZGUsIGRvbVV0aWxzLmdldE5vZGVJbmRleChub2RlKSk7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5bCGUmFuZ2Xnu5PmnZ/kvY3nva7orr7nva7liLBub2Rl6IqC54K55LmL5ZCOXHJcblx0ICAgICAgICAgKiBAbWV0aG9kICBzZXRFbmRBZnRlclxyXG5cdCAgICAgICAgICogQHJlbWluZCDor6Xmk43kvZzlsIbkvJrmiornu5nlrproioLngrnnmoTniLboioLngrnkvZzkuLpyYW5nZeeahOe7k+adn+WuueWZqO+8jCDkuJTlgY/np7vph4/mmK/or6XoioLngrnlnKjlhbbniLboioLngrnkuK3nmoTkvY3nva7ntKLlvJUrMVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg55uu5qCH6IqC54K5XHJcblx0ICAgICAgICAgKiBAc2VlIFVFLmRvbS5SYW5nZTpzZXRTdGFydEFmdGVyKE5vZGUpXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBodG1sXHJcblx0ICAgICAgICAgKiA8IS0tIOmAieWMuuekuuS+iyAtLT5cclxuXHQgICAgICAgICAqIDxiPlt4eDxpPnh4eDwvaT48c3Bhbj54eF14PC9zcGFuPnh4eDwvYj5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAvL+aJp+ihjOaTjeS9nFxyXG5cdCAgICAgICAgICogICAgIHJhbmdlLnNldFN0YXJ0QWZ0ZXIoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3BhblwiKVswXSApO1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAvL+e7k+aenOmAieWMulxyXG5cdCAgICAgICAgICogICAgIC8vPGI+W3h4PGk+eHh4PC9pPjxzcGFuPnh4eDwvc3Bhbj5deHh4PC9iPlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHNldEVuZEFmdGVyOmZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0RW5kKG5vZGUucGFyZW50Tm9kZSwgZG9tVXRpbHMuZ2V0Tm9kZUluZGV4KG5vZGUpICsgMSk7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5bCGUmFuZ2Xnu5PmnZ/kvY3nva7orr7nva7liLBub2Rl6IqC54K55LmL5YmNXHJcblx0ICAgICAgICAgKiBAbWV0aG9kICBzZXRFbmRCZWZvcmVcclxuXHQgICAgICAgICAqIEByZW1pbmQg6K+l5pON5L2c5bCG5Lya5oqK57uZ5a6a6IqC54K555qE54i26IqC54K55L2c5Li6cmFuZ2XnmoTnu5PmnZ/lrrnlmajvvIwg5LiU5YGP56e76YeP5piv6K+l6IqC54K55Zyo5YW254i26IqC54K55Lit55qE5L2N572u57Si5byVXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDnm67moIfoioLngrlcclxuXHQgICAgICAgICAqIEBzZWUgVUUuZG9tLlJhbmdlOnNldEVuZEFmdGVyKE5vZGUpXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgc2V0RW5kQmVmb3JlOmZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0RW5kKG5vZGUucGFyZW50Tm9kZSwgZG9tVXRpbHMuZ2V0Tm9kZUluZGV4KG5vZGUpKTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDorr7nva5SYW5nZeeahOW8gOWni+S9jee9ruWIsG5vZGXoioLngrnlhoXnmoTnrKzkuIDkuKrlrZDoioLngrnkuYvliY1cclxuXHQgICAgICAgICAqIEBtZXRob2QgIHNldFN0YXJ0QXRGaXJzdFxyXG5cdCAgICAgICAgICogQHJlbWluZCDpgInljLrnmoTlvIDlp4vlrrnlmajlsIblj5jmiJDnu5nlrprnmoToioLngrnvvIwg5LiU5YGP56e76YeP5Li6MFxyXG5cdCAgICAgICAgICogQHJlbWluZCDlpoLmnpznu5nlrprnmoToioLngrnmmK/lhYPntKDoioLngrnvvIwg5YiZ6K+l6IqC54K55b+F6aG75piv5YWB6K645YyF5ZCr5a2Q6IqC54K555qE5YWD57Sg44CCXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDnm67moIfoioLngrlcclxuXHQgICAgICAgICAqIEBzZWUgVUUuZG9tLlJhbmdlOnNldFN0YXJ0QmVmb3JlKE5vZGUpXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBodG1sXHJcblx0ICAgICAgICAgKiA8IS0tIOmAieWMuuekuuS+iyAtLT5cclxuXHQgICAgICAgICAqIDxiPnh4PGk+eHh4PC9pPjxzcGFuPlt4eF14PC9zcGFuPnh4eDwvYj5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAvL+aJp+ihjOaTjeS9nFxyXG5cdCAgICAgICAgICogICAgIHJhbmdlLnNldFN0YXJ0QXRGaXJzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpXCIpWzBdICk7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIC8v57uT5p6c6YCJ5Yy6XHJcblx0ICAgICAgICAgKiAgICAgLy88Yj54eDxpPlt4eHg8L2k+PHNwYW4+eHhdeDwvc3Bhbj54eHg8L2I+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgc2V0U3RhcnRBdEZpcnN0OmZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhcnQobm9kZSwgMCk7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6K6+572uUmFuZ2XnmoTlvIDlp4vkvY3nva7liLBub2Rl6IqC54K55YaF55qE5pyA5ZCO5LiA5Liq6IqC54K55LmL5ZCOXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHNldFN0YXJ0QXRMYXN0XHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOmAieWMuueahOW8gOWni+WuueWZqOWwhuWPmOaIkOe7meWumueahOiKgueCue+8jCDkuJTlgY/np7vph4/kuLror6XoioLngrnnmoTlrZDoioLngrnmlbBcclxuXHQgICAgICAgICAqIEByZW1pbmQg5aaC5p6c57uZ5a6a55qE6IqC54K55piv5YWD57Sg6IqC54K577yMIOWImeivpeiKgueCueW/hemhu+aYr+WFgeiuuOWMheWQq+WtkOiKgueCueeahOWFg+e0oOOAglxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg55uu5qCH6IqC54K5XHJcblx0ICAgICAgICAgKiBAc2VlIFVFLmRvbS5SYW5nZTpzZXRTdGFydEF0Rmlyc3QoTm9kZSlcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY1yYW5nZeWvueixoVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBzZXRTdGFydEF0TGFzdDpmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFN0YXJ0KG5vZGUsIG5vZGUubm9kZVR5cGUgPT0gMyA/IG5vZGUubm9kZVZhbHVlLmxlbmd0aCA6IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiuvue9rlJhbmdl55qE57uT5p2f5L2N572u5Yiwbm9kZeiKgueCueWGheeahOesrOS4gOS4quiKgueCueS5i+WJjVxyXG5cdCAgICAgICAgICogQG1ldGhvZCAgc2V0RW5kQXRGaXJzdFxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg55uu5qCH6IqC54K5XHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOmAieWMuueahOe7k+adn+WuueWZqOWwhuWPmOaIkOe7meWumueahOiKgueCue+8jCDkuJTlgY/np7vph4/kuLowXHJcblx0ICAgICAgICAgKiBAcmVtaW5kIG5vZGXlv4XpobvmmK/kuIDkuKrlhYPntKDoioLngrnvvIwg5LiU5b+F6aG75piv5YWB6K645YyF5ZCr5a2Q6IqC54K555qE5YWD57Sg44CCXHJcblx0ICAgICAgICAgKiBAc2VlIFVFLmRvbS5SYW5nZTpzZXRTdGFydEF0Rmlyc3QoTm9kZSlcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY1yYW5nZeWvueixoVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBzZXRFbmRBdEZpcnN0OmZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0RW5kKG5vZGUsIDApO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiuvue9rlJhbmdl55qE57uT5p2f5L2N572u5Yiwbm9kZeiKgueCueWGheeahOacgOWQjuS4gOS4quiKgueCueS5i+WQjlxyXG5cdCAgICAgICAgICogQG1ldGhvZCAgc2V0RW5kQXRMYXN0XHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDnm67moIfoioLngrlcclxuXHQgICAgICAgICAqIEByZW1pbmQg6YCJ5Yy655qE57uT5p2f5a655Zmo5bCG5Y+Y5oiQ57uZ5a6a55qE6IqC54K577yMIOS4lOWBj+enu+mHj+S4uuivpeiKgueCueeahOWtkOiKgueCueaVsOmHj1xyXG5cdCAgICAgICAgICogQHJlbWluZCBub2Rl5b+F6aG75piv5LiA5Liq5YWD57Sg6IqC54K577yMIOS4lOW/hemhu+aYr+WFgeiuuOWMheWQq+WtkOiKgueCueeahOWFg+e0oOOAglxyXG5cdCAgICAgICAgICogQHNlZSBVRS5kb20uUmFuZ2U6c2V0U3RhcnRBdEZpcnN0KE5vZGUpXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgc2V0RW5kQXRMYXN0OmZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0RW5kKG5vZGUsIG5vZGUubm9kZVR5cGUgPT0gMyA/IG5vZGUubm9kZVZhbHVlLmxlbmd0aCA6IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOmAieS4ree7meWumuiKgueCuVxyXG5cdCAgICAgICAgICogQG1ldGhvZCAgc2VsZWN0Tm9kZVxyXG5cdCAgICAgICAgICogQHJlbWluZCDmraTml7bvvIwg6YCJ5Yy655qE5byA5aeL5a655Zmo5ZKM57uT5p2f5a655Zmo6YO95piv6K+l6IqC54K555qE54i26IqC54K577yMIOWFtnN0YXJ0T2Zmc2V05piv6K+l6IqC54K55Zyo54i26IqC54K55Lit55qE5L2N572u57Si5byV77yMXHJcblx0ICAgICAgICAgKiAgICAgICAgICDogIxlbmRPZmZzZXTkuLpzdGFydE9mZnNldCsxXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBOb2RlIH0gbm9kZSDpnIDopoHpgInkuK3nmoToioLngrlcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY1yYW5nZeWvueixoe+8jOatpOaXtueahHJhbmdl5LuF5YyF5ZCr5b2T5YmN57uZ5a6a55qE6IqC54K55a+56LGhXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgaHRtbFxyXG5cdCAgICAgICAgICogPCEtLSDpgInljLrnpLrkvosgLS0+XHJcblx0ICAgICAgICAgKiA8Yj54eDxpPnh4eDwvaT48c3Bhbj5beHhdeDwvc3Bhbj54eHg8L2I+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogPHNjcmlwdD5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgLy/miafooYzmk43kvZxcclxuXHQgICAgICAgICAqICAgICByYW5nZS5zZWxlY3ROb2RlKCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlcIilbMF0gKTtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgLy/nu5PmnpzpgInljLpcclxuXHQgICAgICAgICAqICAgICAvLzxiPnh4WzxpPnh4eDwvaT5dPHNwYW4+eHh4PC9zcGFuPnh4eDwvYj5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBzZWxlY3ROb2RlOmZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U3RhcnRCZWZvcmUobm9kZSkuc2V0RW5kQWZ0ZXIobm9kZSk7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6YCJ5Lit57uZ5a6a6IqC54K55YaF6YOo55qE5omA5pyJ6IqC54K5XHJcblx0ICAgICAgICAgKiBAbWV0aG9kICBzZWxlY3ROb2RlQ29udGVudHNcclxuXHQgICAgICAgICAqIEByZW1pbmQg5q2k5pe277yMIOmAieWMuueahOW8gOWni+WuueWZqOWSjOe7k+adn+WuueWZqOmDveaYr+ivpeiKgueCue+8jCDlhbZzdGFydE9mZnNldOS4ujDvvIxcclxuXHQgICAgICAgICAqICAgICAgICAgIOiAjGVuZE9mZnNldOaYr+ivpeiKgueCueeahOWtkOiKgueCueaVsOOAglxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgTm9kZSB9IG5vZGUg55uu5qCH6IqC54K577yMIOW9k+WJjXJhbmdl5bCG5YyF5ZCr6K+l6IqC54K55YaF55qE5omA5pyJ6IqC54K5XHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaHvvIwg5q2k5pe2cmFuZ2Xku4XljIXlkKvnu5nlrproioLngrnnmoTmiYDmnInlrZDoioLngrlcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBodG1sXHJcblx0ICAgICAgICAgKiA8IS0tIOmAieWMuuekuuS+iyAtLT5cclxuXHQgICAgICAgICAqIDxiPnh4PGk+eHh4PC9pPjxzcGFuPlt4eF14PC9zcGFuPnh4eDwvYj5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAvL+aJp+ihjOaTjeS9nFxyXG5cdCAgICAgICAgICogICAgIHJhbmdlLnNlbGVjdE5vZGUoIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYlwiKVswXSApO1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAvL+e7k+aenOmAieWMulxyXG5cdCAgICAgICAgICogICAgIC8vPGI+W3h4PGk+eHh4PC9pPjxzcGFuPnh4eDwvc3Bhbj54eHhdPC9iPlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHNlbGVjdE5vZGVDb250ZW50czpmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNldFN0YXJ0KG5vZGUsIDApLnNldEVuZEF0TGFzdChub2RlKTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiBjbG9uZeW9k+WJjVJhbmdl5a+56LGhXHJcblx0ICAgICAgICAgKiBAbWV0aG9kICBjbG9uZVJhbmdlXHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOi/lOWbnueahHJhbmdl5piv5LiA5Liq5YWo5paw55qEcmFuZ2Xlr7nosaHvvIwg5YW25YaF6YOo5omA5pyJ5bGe5oCn5LiO5b2T5YmN6KKrY2xvbmXnmoRyYW5nZeebuOWQjOOAglxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFVFLmRvbS5SYW5nZSB9IOW9k+WJjXJhbmdl5a+56LGh55qE5LiA5Liq5Ymv5pysXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGNsb25lUmFuZ2U6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShtZS5kb2N1bWVudCkuc2V0U3RhcnQobWUuc3RhcnRDb250YWluZXIsIG1lLnN0YXJ0T2Zmc2V0KS5zZXRFbmQobWUuZW5kQ29udGFpbmVyLCBtZS5lbmRPZmZzZXQpO1xyXG5cclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlkJHlvZPliY3pgInljLrnmoTnu5PmnZ/lpITpl63lkIjpgInljLpcclxuXHQgICAgICAgICAqIEBtZXRob2QgIGNvbGxhcHNlXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBodG1sXHJcblx0ICAgICAgICAgKiA8IS0tIOmAieWMuuekuuS+iyAtLT5cclxuXHQgICAgICAgICAqIDxiPnh4PGk+eHh4PC9pPjxzcGFuPlt4eF14PC9zcGFuPnh4eDwvYj5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAvL+aJp+ihjOaTjeS9nFxyXG5cdCAgICAgICAgICogICAgIHJhbmdlLmNvbGxhcHNlKCk7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIC8v57uT5p6c6YCJ5Yy6XHJcblx0ICAgICAgICAgKiAgICAgLy/igJx84oCd6KGo56S66YCJ5Yy65bey6Zet5ZCIXHJcblx0ICAgICAgICAgKiAgICAgLy88Yj54eDxpPnh4eDwvaT48c3Bhbj54eHx4PC9zcGFuPnh4eDwvYj5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDpl63lkIjlvZPliY3pgInljLrvvIzmoLnmja7nu5nlrprnmoR0b1N0YXJ05Y+C5pWw6aG55Yaz5a6a5piv5ZCR5b2T5YmN6YCJ5Yy65byA5aeL5aSE6Zet5ZCI6L+Y5piv5ZCR57uT5p2f5aSE6Zet5ZCI77yMXHJcblx0ICAgICAgICAgKiDlpoLmnpx0b1N0YXJ055qE5YC85Li6dHJ1Ze+8jOWImeWQkeW8gOWni+S9jee9rumXreWQiO+8jCDlj43kuYvvvIzlkJHnu5PmnZ/kvY3nva7pl63lkIjjgIJcclxuXHQgICAgICAgICAqIEBtZXRob2QgIGNvbGxhcHNlXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gdG9TdGFydCDmmK/lkKblkJHpgInljLrlvIDlp4vlpITpl63lkIhcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY1yYW5nZeWvueixoe+8jOatpOaXtnJhbmdl5a+56LGh5aSE5LqO6Zet5ZCI54q25oCBXHJcblx0ICAgICAgICAgKiBAc2VlIFVFLmRvbS5SYW5nZTpjb2xsYXBzZSgpXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgaHRtbFxyXG5cdCAgICAgICAgICogPCEtLSDpgInljLrnpLrkvosgLS0+XHJcblx0ICAgICAgICAgKiA8Yj54eDxpPnh4eDwvaT48c3Bhbj5beHhdeDwvc3Bhbj54eHg8L2I+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogPHNjcmlwdD5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgLy/miafooYzmk43kvZxcclxuXHQgICAgICAgICAqICAgICByYW5nZS5jb2xsYXBzZSggdHJ1ZSApO1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAvL+e7k+aenOmAieWMulxyXG5cdCAgICAgICAgICogICAgIC8v4oCcfOKAneihqOekuumAieWMuuW3sumXreWQiFxyXG5cdCAgICAgICAgICogICAgIC8vPGI+eHg8aT54eHg8L2k+PHNwYW4+fHh4eDwvc3Bhbj54eHg8L2I+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgY29sbGFwc2U6ZnVuY3Rpb24gKHRvU3RhcnQpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgIGlmICh0b1N0YXJ0KSB7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmVuZENvbnRhaW5lciA9IG1lLnN0YXJ0Q29udGFpbmVyO1xyXG5cdCAgICAgICAgICAgICAgICBtZS5lbmRPZmZzZXQgPSBtZS5zdGFydE9mZnNldDtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBtZS5zdGFydENvbnRhaW5lciA9IG1lLmVuZENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICAgICAgbWUuc3RhcnRPZmZzZXQgPSBtZS5lbmRPZmZzZXQ7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIG1lLmNvbGxhcHNlZCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG1lO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiwg+aVtHJhbmdl55qE5byA5aeL5L2N572u5ZKM57uT5p2f5L2N572u77yM5L2/5YW2XCLmlLbnvKlcIuWIsOacgOWwj+eahOS9jee9rlxyXG5cdCAgICAgICAgICogQG1ldGhvZCAgc2hyaW5rQm91bmRhcnlcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY1yYW5nZeWvueixoVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGh0bWxcclxuXHQgICAgICAgICAqIDxzcGFuPnh4PGI+eHhbPC9iPnh4eHh4XTwvc3Bhbj4gPT4gPHNwYW4+eHg8Yj54eDwvYj5beHh4eHhdPC9zcGFuPlxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGh0bWxcclxuXHQgICAgICAgICAqIDwhLS0g6YCJ5Yy656S65L6LIC0tPlxyXG5cdCAgICAgICAgICogPGI+eFt4eDwvYj48aT5deHh4PC9pPlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqIDxzY3JpcHQ+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIC8v5omn6KGM5pS257ypXHJcblx0ICAgICAgICAgKiAgICAgcmFuZ2Uuc2hyaW5rQm91bmRhcnkoKTtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgLy/nu5PmnpzpgInljLpcclxuXHQgICAgICAgICAqICAgICAvLzxiPnhbeHhdPC9iPjxpPnh4eDwvaT5cclxuXHQgICAgICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGh0bWxcclxuXHQgICAgICAgICAqIFs8Yj48aT54eHh4PC9pPnh4eHh4eHg8L2I+XSA9PiA8Yj48aT5beHh4eDwvaT54eHh4eHh4XTwvYj5cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDosIPmlbRyYW5nZeeahOW8gOWni+S9jee9ruWSjOe7k+adn+S9jee9ru+8jOS9v+WFtlwi5pS257ypXCLliLDmnIDlsI/nmoTkvY3nva7vvIxcclxuXHQgICAgICAgICAqIOWmguaenGlnbm9yZUVuZOeahOWAvOS4unRydWXvvIzliJnlv73nlaXlr7nnu5PmnZ/kvY3nva7nmoTosIPmlbRcclxuXHQgICAgICAgICAqIEBtZXRob2QgIHNocmlua0JvdW5kYXJ5XHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gaWdub3JlRW5kIOaYr+WQpuW/veeVpeWvuee7k+adn+S9jee9rueahOiwg+aVtFxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFVFLmRvbS5SYW5nZSB9IOW9k+WJjXJhbmdl5a+56LGhXHJcblx0ICAgICAgICAgKiBAc2VlIFVFLmRvbS5kb21VdGlscy5SYW5nZTpzaHJpbmtCb3VuZGFyeSgpXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHNocmlua0JvdW5kYXJ5OmZ1bmN0aW9uIChpZ25vcmVFbmQpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLCBjaGlsZCxcclxuXHQgICAgICAgICAgICAgICAgY29sbGFwc2VkID0gbWUuY29sbGFwc2VkO1xyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrKG5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PSAxICYmICFkb21VdGlscy5pc0Jvb2ttYXJrTm9kZShub2RlKSAmJiAhZHRkLiRlbXB0eVtub2RlLnRhZ05hbWVdICYmICFkdGQuJG5vbkNoaWxkW25vZGUudGFnTmFtZV1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgd2hpbGUgKG1lLnN0YXJ0Q29udGFpbmVyLm5vZGVUeXBlID09IDEgLy/mmK9lbGVtZW50XHJcblx0ICAgICAgICAgICAgICAgICYmIChjaGlsZCA9IG1lLnN0YXJ0Q29udGFpbmVyLmNoaWxkTm9kZXNbbWUuc3RhcnRPZmZzZXRdKSAvL+WtkOiKgueCueS5n+aYr2VsZW1lbnRcclxuXHQgICAgICAgICAgICAgICAgJiYgY2hlY2soY2hpbGQpKSB7XHJcblx0ICAgICAgICAgICAgICAgIG1lLnNldFN0YXJ0KGNoaWxkLCAwKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKGNvbGxhcHNlZCkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbWUuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmICghaWdub3JlRW5kKSB7XHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlIChtZS5lbmRDb250YWluZXIubm9kZVR5cGUgPT0gMS8v5pivZWxlbWVudFxyXG5cdCAgICAgICAgICAgICAgICAgICAgJiYgbWUuZW5kT2Zmc2V0ID4gMCAvL+WmguaenOaYr+epuuWFg+e0oOWwsemAgOWHuiBlbmRPZmZzZXQ9MOmCo+S5iGVuZE9mZnN0LTHkuLrotJ/lgLzvvIxjaGlsZE5vZGVzW2VuZE9mZnNldF3miqXplJlcclxuXHQgICAgICAgICAgICAgICAgICAgICYmIChjaGlsZCA9IG1lLmVuZENvbnRhaW5lci5jaGlsZE5vZGVzW21lLmVuZE9mZnNldCAtIDFdKSAvL+WtkOiKgueCueS5n+aYr2VsZW1lbnRcclxuXHQgICAgICAgICAgICAgICAgICAgICYmIGNoZWNrKGNoaWxkKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuc2V0RW5kKGNoaWxkLCBjaGlsZC5jaGlsZE5vZGVzLmxlbmd0aCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG1lO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPluemu+W9k+WJjemAieWMuuWGheWMheWQq+eahOaJgOacieiKgueCueacgOi/keeahOWFrOWFseelluWFiOiKgueCue+8jFxyXG5cdCAgICAgICAgICogQG1ldGhvZCAgZ2V0Q29tbW9uQW5jZXN0b3JcclxuXHQgICAgICAgICAqIEByZW1pbmQg6L+U5Zue55qE5YWs5YWx56WW5YWI6IqC54K55LiA5a6a5LiN5pivcmFuZ2Xoh6rouqvnmoTlrrnlmajoioLngrnvvIwg5L2G5pyJ5Y+v6IO95piv5LiA5Liq5paH5pys6IqC54K5XHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgTm9kZSB9IOW9k+WJjXJhbmdl5a+56LGh5YaF5omA5pyJ6IqC54K555qE5YWs5YWx56WW5YWI6IqC54K5XHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgaHRtbFxyXG5cdCAgICAgICAgICogLy/pgInljLrnpLrkvotcclxuXHQgICAgICAgICAqIDxzcGFuPnh4eDxiPnhbeDxlbT54eF14PC9lbT54eHg8L2I+eHg8L3NwYW4+XHJcblx0ICAgICAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICB2YXIgbm9kZSA9IHJhbmdlLmdldENvbW1vbkFuY2VzdG9yKCk7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIC8v5YWs5YWx56WW5YWI6IqC54K55piv77yaIGLoioLngrlcclxuXHQgICAgICAgICAqICAgICAvL+i+k+WHuu+8miBCXHJcblx0ICAgICAgICAgKiAgICAgY29uc29sZS5sb2cobm9kZS50YWdOYW1lKTtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDojrflj5blvZPliY3pgInljLrmiYDljIXlkKvnmoTmiYDmnInoioLngrnnmoTlhazlhbHnpZblhYjoioLngrnvvIwg5Y+v5Lul5qC55o2u57uZ5a6a55qE5Y+C5pWwIGluY2x1ZGVTZWxmIOWGs+WumuiOt+WPluWIsFxyXG5cdCAgICAgICAgICog55qE5YWs5YWx56WW5YWI6IqC54K55piv5ZCm5Y+v5Lul5piv5b2T5YmN6YCJ5Yy655qEc3RhcnRDb250YWluZXLmiJZlbmRDb250YWluZXLoioLngrnvvIwg5aaC5p6cIGluY2x1ZGVTZWxmXHJcblx0ICAgICAgICAgKiDnmoTlj5blgLzkuLp0cnVl77yMIOWImei/lOWbnueahOiKgueCueWPr+S7peaYr+iHqui6q+eahOWuueWZqOiKgueCue+8jCDlkKbliJnvvIwg5YiZ5LiN6IO95piv5a655Zmo6IqC54K5XHJcblx0ICAgICAgICAgKiBAbWV0aG9kICBnZXRDb21tb25BbmNlc3RvclxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgQm9vbGVhbiB9IGluY2x1ZGVTZWxmIOaYr+WQpuWFgeiuuOiOt+WPluWIsOeahOWFrOWFseelluWFiOiKgueCueaYr+W9k+WJjXJhbmdl5a+56LGh55qE5a655Zmo6IqC54K5XHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgTm9kZSB9IOW9k+WJjXJhbmdl5a+56LGh5YaF5omA5pyJ6IqC54K555qE5YWs5YWx56WW5YWI6IqC54K5XHJcblx0ICAgICAgICAgKiBAc2VlIFVFLmRvbS5SYW5nZTpnZXRDb21tb25BbmNlc3RvcigpXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgaHRtbFxyXG5cdCAgICAgICAgICogPGJvZHk+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIDwhLS0g6YCJ5Yy656S65L6LIC0tPlxyXG5cdCAgICAgICAgICogICAgIDxiPnh4eDxpPnh4eHg8c3Bhbj54eFt4PC9zcGFuPnh4XXg8L2k+eHh4eHh4eDwvYj5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgPHNjcmlwdD5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgICAgIHZhciBub2RlID0gcmFuZ2UuZ2V0Q29tbW9uQW5jZXN0b3IoIGZhbHNlICk7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgICAgICAvL+i/memHjOeahOWFrOWFseelluWFiOiKgueCueaYr0LogIzkuI3mmK9J77yMIOaYr+WboOS4uuWPguaVsOmZkOWItuS6huiOt+WPluWIsOeahOiKgueCueS4jeiDveaYr+WuueWZqOiKgueCuVxyXG5cdCAgICAgICAgICogICAgICAgICAvL291dHB1dDogQlxyXG5cdCAgICAgICAgICogICAgICAgICBjb25zb2xlLmxvZyggbm9kZS50YWdOYW1lICk7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIDwvc2NyaXB0PlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqIDwvYm9keT5cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDojrflj5blvZPliY3pgInljLrmiYDljIXlkKvnmoTmiYDmnInoioLngrnnmoTlhazlhbHnpZblhYjoioLngrnvvIwg5Y+v5Lul5qC55o2u57uZ5a6a55qE5Y+C5pWwIGluY2x1ZGVTZWxmIOWGs+WumuiOt+WPluWIsFxyXG5cdCAgICAgICAgICog55qE5YWs5YWx56WW5YWI6IqC54K55piv5ZCm5Y+v5Lul5piv5b2T5YmN6YCJ5Yy655qEc3RhcnRDb250YWluZXLmiJZlbmRDb250YWluZXLoioLngrnvvIwg5aaC5p6cIGluY2x1ZGVTZWxmXHJcblx0ICAgICAgICAgKiDnmoTlj5blgLzkuLp0cnVl77yMIOWImei/lOWbnueahOiKgueCueWPr+S7peaYr+iHqui6q+eahOWuueWZqOiKgueCue+8jCDlkKbliJnvvIwg5YiZ5LiN6IO95piv5a655Zmo6IqC54K577ybIOWQjOaXtuWPr+S7peagueaNrlxyXG5cdCAgICAgICAgICogaWdub3JlVGV4dE5vZGUg5Y+C5pWw55qE5Y+W5YC85Yaz5a6a5piv5ZCm5b+955Wl57G75Z6L5Li65paH5pys6IqC54K555qE56WW5YWI6IqC54K544CCXHJcblx0ICAgICAgICAgKiBAbWV0aG9kICBnZXRDb21tb25BbmNlc3RvclxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgQm9vbGVhbiB9IGluY2x1ZGVTZWxmIOaYr+WQpuWFgeiuuOiOt+WPluWIsOeahOWFrOWFseelluWFiOiKgueCueaYr+W9k+WJjXJhbmdl5a+56LGh55qE5a655Zmo6IqC54K5XHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gaWdub3JlVGV4dE5vZGUg6I635Y+W56WW5YWI6IqC54K555qE6L+H56iL5Lit5piv5ZCm5b+955Wl57G75Z6L5Li65paH5pys6IqC54K555qE56WW5YWI6IqC54K5XHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgTm9kZSB9IOW9k+WJjXJhbmdl5a+56LGh5YaF5omA5pyJ6IqC54K555qE5YWs5YWx56WW5YWI6IqC54K5XHJcblx0ICAgICAgICAgKiBAc2VlIFVFLmRvbS5SYW5nZTpnZXRDb21tb25BbmNlc3RvcigpXHJcblx0ICAgICAgICAgKiBAc2VlIFVFLmRvbS5SYW5nZTpnZXRDb21tb25BbmNlc3RvcihCb29sZWFuKVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGh0bWxcclxuXHQgICAgICAgICAqIDxib2R5PlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICA8IS0tIOmAieWMuuekuuS+iyAtLT5cclxuXHQgICAgICAgICAqICAgICA8Yj54eHg8aT54eHh4PHNwYW4+eFt4XXg8L3NwYW4+eHh4PC9pPnh4eHh4eHg8L2I+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIDxzY3JpcHQ+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgICAgICB2YXIgbm9kZSA9IHJhbmdlLmdldENvbW1vbkFuY2VzdG9yKCB0cnVlLCBmYWxzZSApO1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAgICAgLy9vdXRwdXQ6IFNQQU5cclxuXHQgICAgICAgICAqICAgICAgICAgY29uc29sZS5sb2coIG5vZGUudGFnTmFtZSApO1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICA8L3NjcmlwdD5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8L2JvZHk+XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0Q29tbW9uQW5jZXN0b3I6ZnVuY3Rpb24gKGluY2x1ZGVTZWxmLCBpZ25vcmVUZXh0Tm9kZSkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgIHN0YXJ0ID0gbWUuc3RhcnRDb250YWluZXIsXHJcblx0ICAgICAgICAgICAgICAgIGVuZCA9IG1lLmVuZENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICBpZiAoc3RhcnQgPT09IGVuZCkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoaW5jbHVkZVNlbGYgJiYgc2VsZWN0T25lTm9kZSh0aGlzKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBzdGFydC5jaGlsZE5vZGVzW21lLnN0YXJ0T2Zmc2V0XTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKHN0YXJ0Lm5vZGVUeXBlID09IDEpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXJ0O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIC8v5Y+q5pyJ5Zyo5LiK5p2l5bCx55u4562J55qE5oOF5Ya15LiL5omN5Lya5Ye6546w5piv5paH5pys55qE5oOF5Ya1XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBpZ25vcmVUZXh0Tm9kZSAmJiBzdGFydC5ub2RlVHlwZSA9PSAzID8gc3RhcnQucGFyZW50Tm9kZSA6IHN0YXJ0O1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gZG9tVXRpbHMuZ2V0Q29tbW9uQW5jZXN0b3Ioc3RhcnQsIGVuZCk7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6LCD5pW05b2T5YmNUmFuZ2XnmoTlvIDlp4vlkoznu5PmnZ/ovrnnlYzlrrnlmajvvIzlpoLmnpzmmK/lrrnlmajoioLngrnmmK/mlofmnKzoioLngrks5bCx6LCD5pW05Yiw5YyF5ZCr6K+l5paH5pys6IqC54K555qE54i26IqC54K55LiKXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHRyaW1Cb3VuZGFyeVxyXG5cdCAgICAgICAgICogQHJlbWluZCDor6Xmk43kvZzmnInlj6/og73kvJrlvJXotbfmlofmnKzoioLngrnooqvliIflvIBcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY1yYW5nZeWvueixoVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGh0bWxcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAvL+mAieWMuuekuuS+i1xyXG5cdCAgICAgICAgICogPGI+eHh4PGk+W3h4eHh4XTwvaT54eHg8L2I+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogPHNjcmlwdD5cclxuXHQgICAgICAgICAqICAgICAvL+acquiwg+aVtOWJje+8jCDpgInljLrnmoTlvIDlp4vlrrnlmajlkoznu5PmnZ/pg73mmK/mlofmnKzoioLngrlcclxuXHQgICAgICAgICAqICAgICAvL+aJp+ihjOiwg+aVtFxyXG5cdCAgICAgICAgICogICAgIHJhbmdlLnRyaW1Cb3VuZGFyeSgpO1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAvL+iwg+aVtOS5i+WQju+8jCDlrrnlmajoioLngrnlj5jmiJDkuoZp6IqC54K5XHJcblx0ICAgICAgICAgKiAgICAgLy88Yj54eHhbPGk+eHh4eHg8L2k+XXh4eDwvYj5cclxuXHQgICAgICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiwg+aVtOW9k+WJjVJhbmdl55qE5byA5aeL5ZKM57uT5p2f6L6555WM5a655Zmo77yM5aaC5p6c5piv5a655Zmo6IqC54K55piv5paH5pys6IqC54K5LOWwseiwg+aVtOWIsOWMheWQq+ivpeaWh+acrOiKgueCueeahOeItuiKgueCueS4iu+8jFxyXG5cdCAgICAgICAgICog5Y+v5Lul5qC55o2uIGlnbm9yZUVuZCDlj4LmlbDnmoTlgLzlhrPlrprmmK/lkKbosIPmlbTlr7nnu5PmnZ/ovrnnlYznmoTosIPmlbRcclxuXHQgICAgICAgICAqIEBtZXRob2QgdHJpbUJvdW5kYXJ5XHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gaWdub3JlRW5kIOaYr+WQpuW/veeVpeWvuee7k+adn+i+ueeVjOeahOiwg+aVtFxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFVFLmRvbS5SYW5nZSB9IOW9k+WJjXJhbmdl5a+56LGhXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgaHRtbFxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqIC8v6YCJ5Yy656S65L6LXHJcblx0ICAgICAgICAgKiA8Yj54eHg8aT5beHh4eHhdPC9pPnh4eDwvYj5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgICAgICogICAgIC8v5pyq6LCD5pW05YmN77yMIOmAieWMuueahOW8gOWni+WuueWZqOWSjOe7k+adn+mDveaYr+aWh+acrOiKgueCuVxyXG5cdCAgICAgICAgICogICAgIC8v5omn6KGM6LCD5pW0XHJcblx0ICAgICAgICAgKiAgICAgcmFuZ2UudHJpbUJvdW5kYXJ5KCB0cnVlICk7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIC8v6LCD5pW05LmL5ZCO77yMIOW8gOWni+WuueWZqOiKgueCueWPmOaIkOS6hmnoioLngrlcclxuXHQgICAgICAgICAqICAgICAvL+S9huaYr++8jCDnu5PmnZ/lrrnlmajmsqHmnInlj5HnlJ/lj5jljJZcclxuXHQgICAgICAgICAqICAgICAvLzxiPnh4eFs8aT54eHh4eF08L2k+eHh4PC9iPlxyXG5cdCAgICAgICAgICogPC9zY3JpcHQ+XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgdHJpbUJvdW5kYXJ5OmZ1bmN0aW9uIChpZ25vcmVFbmQpIHtcclxuXHQgICAgICAgICAgICB0aGlzLnR4dFRvRWxtQm91bmRhcnkoKTtcclxuXHQgICAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLnN0YXJ0Q29udGFpbmVyLFxyXG5cdCAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLnN0YXJ0T2Zmc2V0LFxyXG5cdCAgICAgICAgICAgICAgICBjb2xsYXBzZWQgPSB0aGlzLmNvbGxhcHNlZCxcclxuXHQgICAgICAgICAgICAgICAgZW5kID0gdGhpcy5lbmRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgaWYgKHN0YXJ0Lm5vZGVUeXBlID09IDMpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG9mZnNldCA9PSAwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QmVmb3JlKHN0YXJ0KTtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPj0gc3RhcnQubm9kZVZhbHVlLmxlbmd0aCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnRBZnRlcihzdGFydCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0Tm9kZSA9IGRvbVV0aWxzLnNwbGl0KHN0YXJ0LCBvZmZzZXQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8v6Lef5paw57uT5p2f6L6555WMXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSBlbmQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRFbmQodGV4dE5vZGUsIHRoaXMuZW5kT2Zmc2V0IC0gb2Zmc2V0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXJ0LnBhcmVudE5vZGUgPT09IGVuZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZE9mZnNldCArPSAxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QmVmb3JlKHRleHROb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xsYXBzZSh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoIWlnbm9yZUVuZCkge1xyXG5cdCAgICAgICAgICAgICAgICBvZmZzZXQgPSB0aGlzLmVuZE9mZnNldDtcclxuXHQgICAgICAgICAgICAgICAgZW5kID0gdGhpcy5lbmRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChlbmQubm9kZVR5cGUgPT0gMykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG9mZnNldCA9PSAwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRFbmRCZWZvcmUoZW5kKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0IDwgZW5kLm5vZGVWYWx1ZS5sZW5ndGggJiYgZG9tVXRpbHMuc3BsaXQoZW5kLCBvZmZzZXQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RW5kQWZ0ZXIoZW5kKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlpoLmnpzpgInljLrlnKjmlofmnKznmoTovrnnlYzkuIrvvIzlsLHmianlsZXpgInljLrliLDmlofmnKznmoTniLboioLngrnkuIosIOWmguaenOW9k+WJjemAieWMuuaYr+mXreWQiOeahO+8jCDliJnku4DkuYjkuZ/kuI3lgZpcclxuXHQgICAgICAgICAqIEBtZXRob2QgdHh0VG9FbG1Cb3VuZGFyeVxyXG5cdCAgICAgICAgICogQHJlbWluZCDor6Xmk43kvZzkuI3kvJrkv67mlLlkb23oioLngrlcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY1yYW5nZeWvueixoVxyXG5cdCAgICAgICAgICovXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlpoLmnpzpgInljLrlnKjmlofmnKznmoTovrnnlYzkuIrvvIzlsLHmianlsZXpgInljLrliLDmlofmnKznmoTniLboioLngrnkuIosIOWmguaenOW9k+WJjemAieWMuuaYr+mXreWQiOeahO+8jCDliJnmoLnmja7lj4LmlbDpoblcclxuXHQgICAgICAgICAqIGlnbm9yZUNvbGxhcHNlZCDnmoTlgLzlhrPlrprmmK/lkKbmiafooYzor6XosIPmlbRcclxuXHQgICAgICAgICAqIEBtZXRob2QgdHh0VG9FbG1Cb3VuZGFyeVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgQm9vbGVhbiB9IGlnbm9yZUNvbGxhcHNlZCDmmK/lkKblv73nlaXpgInljLrnmoTpl63lkIjnirbmgIHvvIwg5aaC5p6c6K+l5Y+C5pWw5Y+W5YC85Li6dHJ1Ze+8jCDliJlcclxuXHQgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgIOS4jeiuuumAieWMuuaYr+WQpumXreWQiO+8jCDpg73kvJrmiafooYzor6Xmk43kvZzvvIwg5Y+N5LmL77yMIOWImeS4jeS8muWvuemXreWQiOeahOmAieWMuuaJp+ihjOivpeaTjeS9nFxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFVFLmRvbS5SYW5nZSB9IOW9k+WJjXJhbmdl5a+56LGhXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHR4dFRvRWxtQm91bmRhcnk6ZnVuY3Rpb24gKGlnbm9yZUNvbGxhcHNlZCkge1xyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGFkanVzdChyLCBjKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSByW2MgKyAnQ29udGFpbmVyJ10sXHJcblx0ICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSByW2MgKyAnT2Zmc2V0J107XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjb250YWluZXIubm9kZVR5cGUgPT0gMykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFvZmZzZXQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByWydzZXQnICsgYy5yZXBsYWNlKC8oXFx3KS8sIGZ1bmN0aW9uIChhKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLnRvVXBwZXJDYXNlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSkgKyAnQmVmb3JlJ10oY29udGFpbmVyKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAob2Zmc2V0ID49IGNvbnRhaW5lci5ub2RlVmFsdWUubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgclsnc2V0JyArIGMucmVwbGFjZSgvKFxcdykvLCBmdW5jdGlvbiAoYSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS50b1VwcGVyQ2FzZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pICsgJ0FmdGVyJyBdKGNvbnRhaW5lcik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIGlmIChpZ25vcmVDb2xsYXBzZWQgfHwgIXRoaXMuY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgICAgIGFkanVzdCh0aGlzLCAnc3RhcnQnKTtcclxuXHQgICAgICAgICAgICAgICAgYWRqdXN0KHRoaXMsICdlbmQnKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5Zyo5b2T5YmN6YCJ5Yy655qE5byA5aeL5L2N572u5YmN5o+S5YWl6IqC54K577yM5paw5o+S5YWl55qE6IqC54K55Lya6KKr6K+lcmFuZ2XljIXlkKtcclxuXHQgICAgICAgICAqIEBtZXRob2QgIGluc2VydE5vZGVcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IE5vZGUgfSBub2RlIOmcgOimgeaPkuWFpeeahOiKgueCuVxyXG5cdCAgICAgICAgICogQHJlbWluZCDmj5LlhaXnmoToioLngrnlj6/ku6XmmK/kuIDkuKpEb2N1bWVudEZyYWdtZW505L6d5qyh5o+S5YWl5aSa5Liq6IqC54K5XHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgaW5zZXJ0Tm9kZTpmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgIHZhciBmaXJzdCA9IG5vZGUsIGxlbmd0aCA9IDE7XHJcblx0ICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMTEpIHtcclxuXHQgICAgICAgICAgICAgICAgZmlyc3QgPSBub2RlLmZpcnN0Q2hpbGQ7XHJcblx0ICAgICAgICAgICAgICAgIGxlbmd0aCA9IG5vZGUuY2hpbGROb2Rlcy5sZW5ndGg7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMudHJpbUJvdW5kYXJ5KHRydWUpO1xyXG5cdCAgICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc3RhcnRDb250YWluZXIsXHJcblx0ICAgICAgICAgICAgICAgIG9mZnNldCA9IHRoaXMuc3RhcnRPZmZzZXQ7XHJcblx0ICAgICAgICAgICAgdmFyIG5leHROb2RlID0gc3RhcnQuY2hpbGROb2Rlc1sgb2Zmc2V0IF07XHJcblx0ICAgICAgICAgICAgaWYgKG5leHROb2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHN0YXJ0Lmluc2VydEJlZm9yZShub2RlLCBuZXh0Tm9kZSk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQuYXBwZW5kQ2hpbGQobm9kZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmIChmaXJzdC5wYXJlbnROb2RlID09PSB0aGlzLmVuZENvbnRhaW5lcikge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmVuZE9mZnNldCA9IHRoaXMuZW5kT2Zmc2V0ICsgbGVuZ3RoO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRTdGFydEJlZm9yZShmaXJzdCk7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6Zet5ZCI6YCJ5Yy65Yiw5b2T5YmN6YCJ5Yy655qE5byA5aeL5L2N572u77yMIOW5tuS4lOWumuS9jeWFieagh+WIsOmXreWQiOWQjueahOS9jee9rlxyXG5cdCAgICAgICAgICogQG1ldGhvZCAgc2V0Q3Vyc29yXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqIEBzZWUgVUUuZG9tLlJhbmdlOmNvbGxhcHNlKClcclxuXHQgICAgICAgICAqL1xyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6Zet5ZCI6YCJ5Yy677yM5Y+v5Lul5qC55o2u5Y+C5pWwdG9FbmTnmoTlgLzmjqfliLbpgInljLrmmK/lkJHliY3pl63lkIjov5jmmK/lkJHlkI7pl63lkIjvvIwg5bm25LiU5a6a5L2N5YWJ5qCH5Yiw6Zet5ZCI5ZCO55qE5L2N572u44CCXHJcblx0ICAgICAgICAgKiBAbWV0aG9kICBzZXRDdXJzb3JcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IEJvb2xlYW4gfSB0b0VuZCDmmK/lkKblkJHlkI7pl63lkIjvvIwg5aaC5p6c5Li6dHJ1Ze+8jCDliJnpl63lkIjpgInljLrml7bvvIwg5bCG5ZCR57uT5p2f5a655Zmo5pa55ZCR6Zet5ZCI77yMXHJcblx0ICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICDlj43kuYvvvIzliJnlkJHlvIDlp4vlrrnlmajmlrnlkJHpl63lkIhcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY1yYW5nZeWvueixoVxyXG5cdCAgICAgICAgICogQHNlZSBVRS5kb20uUmFuZ2U6Y29sbGFwc2UoQm9vbGVhbilcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgc2V0Q3Vyc29yOmZ1bmN0aW9uICh0b0VuZCwgbm9GaWxsRGF0YSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbGxhcHNlKCF0b0VuZCkuc2VsZWN0KG5vRmlsbERhdGEpO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOWIm+W7uuW9k+WJjXJhbmdl55qE5LiA5Liq5Lmm562+77yM6K6w5b2V5LiL5b2T5YmNcmFuZ2XnmoTkvY3nva7vvIzmlrnkvr/lvZNkb23moJHmlLnlj5jml7bvvIzov5jog73mib7lm57ljp/mnaXnmoTpgInljLrkvY3nva5cclxuXHQgICAgICAgICAqIEBtZXRob2QgY3JlYXRlQm9va21hcmtcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IEJvb2xlYW4gfSBzZXJpYWxpemUg5o6n5Yi26L+U5Zue55qE5qCH6K6w5L2N572u5piv5a+55b2T5YmN5L2N572u55qE5byV55So6L+Y5pivSUTvvIzlpoLmnpzor6XlgLzkuLp0cnVl77yM5YiZXHJcblx0ICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOi/lOWbnuagh+iusOS9jee9rueahElE77yMIOWPjeS5i+WImei/lOWbnuagh+iusOS9jee9ruiKgueCueeahOW8leeUqFxyXG5cdCAgICAgICAgICogQHJldHVybiB7IE9iamVjdCB9IOi/lOWbnuS4gOS4quS5puetvuiusOW9lemUruWAvOWvue+8jCDlhbbljIXlkKvnmoRrZXnmnInvvJogc3RhcnQgPT4g5byA5aeL5qCH6K6w55qESUTmiJbogIXlvJXnlKjvvIxcclxuXHQgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPT4g57uT5p2f5qCH6K6w55qESUTmiJblvJXnlKjvvIwgaWQgPT4g5b2T5YmN5qCH6K6w55qE57G75Z6L77yMIOWmguaenOS4unRydWXvvIzliJnooajnpLpcclxuXHQgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICDov5Tlm57nmoTorrDlvZXnmoTnsbvlnovkuLpJRO+8jCDlj43kuYvliJnkuLrlvJXnlKhcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgY3JlYXRlQm9va21hcms6ZnVuY3Rpb24gKHNlcmlhbGl6ZSwgc2FtZSkge1xyXG5cdCAgICAgICAgICAgIHZhciBlbmROb2RlLFxyXG5cdCAgICAgICAgICAgICAgICBzdGFydE5vZGUgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuXHQgICAgICAgICAgICBzdGFydE5vZGUuc3R5bGUuY3NzVGV4dCA9ICdkaXNwbGF5Om5vbmU7bGluZS1oZWlnaHQ6MHB4Oyc7XHJcblx0ICAgICAgICAgICAgc3RhcnROb2RlLmFwcGVuZENoaWxkKHRoaXMuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ1xcdTIwMEQnKSk7XHJcblx0ICAgICAgICAgICAgc3RhcnROb2RlLmlkID0gJ19iYWlkdV9ib29rbWFya19zdGFydF8nICsgKHNhbWUgPyAnJyA6IGd1aWQrKyk7XHJcblxyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5jb2xsYXBzZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgZW5kTm9kZSA9IHN0YXJ0Tm9kZS5jbG9uZU5vZGUodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGVuZE5vZGUuaWQgPSAnX2JhaWR1X2Jvb2ttYXJrX2VuZF8nICsgKHNhbWUgPyAnJyA6IGd1aWQrKyk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMuaW5zZXJ0Tm9kZShzdGFydE5vZGUpO1xyXG5cdCAgICAgICAgICAgIGlmIChlbmROb2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2UoKS5pbnNlcnROb2RlKGVuZE5vZGUpLnNldEVuZEJlZm9yZShlbmROb2RlKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy5zZXRTdGFydEFmdGVyKHN0YXJ0Tm9kZSk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQ6c2VyaWFsaXplID8gc3RhcnROb2RlLmlkIDogc3RhcnROb2RlLFxyXG5cdCAgICAgICAgICAgICAgICBlbmQ6ZW5kTm9kZSA/IHNlcmlhbGl6ZSA/IGVuZE5vZGUuaWQgOiBlbmROb2RlIDogbnVsbCxcclxuXHQgICAgICAgICAgICAgICAgaWQ6c2VyaWFsaXplXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqICDosIPmlbTlvZPliY1yYW5nZeeahOi+ueeVjOWIsOS5puetvuS9jee9ru+8jOW5tuWIoOmZpOivpeS5puetvuWvueixoeaJgOagh+iusOeahOS9jee9ruWGheeahOiKgueCuVxyXG5cdCAgICAgICAgICogIEBtZXRob2QgIG1vdmVUb0Jvb2ttYXJrXHJcblx0ICAgICAgICAgKiAgQHBhcmFtIHsgQm9va01hcmsgfSBib29rbWFyayBjcmVhdGVCb29rbWFya+aJgOWIm+W7uueahOagh+etvuWvueixoVxyXG5cdCAgICAgICAgICogIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY1yYW5nZeWvueixoVxyXG5cdCAgICAgICAgICogIEBzZWUgVUUuZG9tLlJhbmdlOmNyZWF0ZUJvb2ttYXJrKEJvb2xlYW4pXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIG1vdmVUb0Jvb2ttYXJrOmZ1bmN0aW9uIChib29rbWFyaykge1xyXG5cdCAgICAgICAgICAgIHZhciBzdGFydCA9IGJvb2ttYXJrLmlkID8gdGhpcy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChib29rbWFyay5zdGFydCkgOiBib29rbWFyay5zdGFydCxcclxuXHQgICAgICAgICAgICAgICAgZW5kID0gYm9va21hcmsuZW5kICYmIGJvb2ttYXJrLmlkID8gdGhpcy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChib29rbWFyay5lbmQpIDogYm9va21hcmsuZW5kO1xyXG5cdCAgICAgICAgICAgIHRoaXMuc2V0U3RhcnRCZWZvcmUoc3RhcnQpO1xyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShzdGFydCk7XHJcblx0ICAgICAgICAgICAgaWYgKGVuZCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnNldEVuZEJlZm9yZShlbmQpO1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoZW5kKTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDosIPmlbRyYW5nZeeahOi+ueeVjO+8jOS9v+WFtlwi5pS+5aSnXCLliLDmnIDov5HnmoTniLboioLngrlcclxuXHQgICAgICAgICAqIEBtZXRob2QgIGVubGFyZ2VcclxuXHQgICAgICAgICAqIEByZW1pbmQg5Lya5byV6LW36YCJ5Yy655qE5Y+Y5YyWXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqL1xyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6LCD5pW0cmFuZ2XnmoTovrnnlYzvvIzkvb/lhbZcIuaUvuWkp1wi5Yiw5pyA6L+R55qE54i26IqC54K577yM5qC55o2u5Y+C5pWwIHRvQmxvY2sg55qE5Y+W5YC877yMIOWPr+S7pVxyXG5cdCAgICAgICAgICog6KaB5rGC5omp5aSn5LmL5ZCO55qE54i26IqC54K55pivYmxvY2voioLngrlcclxuXHQgICAgICAgICAqIEBtZXRob2QgIGVubGFyZ2VcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IEJvb2xlYW4gfSB0b0Jsb2NrIOaYr+WQpuimgeaxguaJqeWkp+S5i+WQjueahOeItuiKgueCueW/hemhu+aYr2Jsb2Nr6IqC54K5XHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZW5sYXJnZTpmdW5jdGlvbiAodG9CbG9jaywgc3RvcEZuKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGlzQm9keSA9IGRvbVV0aWxzLmlzQm9keSxcclxuXHQgICAgICAgICAgICAgICAgcHJlLCBub2RlLCB0bXAgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcclxuXHQgICAgICAgICAgICBpZiAodG9CbG9jaykge1xyXG5cdCAgICAgICAgICAgICAgICBub2RlID0gdGhpcy5zdGFydENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGROb2Rlc1t0aGlzLnN0YXJ0T2Zmc2V0XSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHByZSA9IG5vZGUgPSBub2RlLmNoaWxkTm9kZXNbdGhpcy5zdGFydE9mZnNldF1cclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZCh0bXApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHByZSA9IG5vZGUgPSB0bXA7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBwcmUgPSBub2RlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlICgxKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZG9tVXRpbHMuaXNCbG9ja0VsbShub2RlKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBwcmU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChwcmUgPSBub2RlLnByZXZpb3VzU2libGluZykgJiYgIWRvbVV0aWxzLmlzQmxvY2tFbG0ocHJlKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gcHJlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QmVmb3JlKG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcHJlID0gbm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgbm9kZSA9IHRoaXMuZW5kQ29udGFpbmVyO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocHJlID0gbm9kZS5jaGlsZE5vZGVzW3RoaXMuZW5kT2Zmc2V0XSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuaW5zZXJ0QmVmb3JlKHRtcCwgcHJlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZCh0bXApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcHJlID0gbm9kZSA9IHRtcDtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHByZSA9IG5vZGU7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgd2hpbGUgKDEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5pc0Jsb2NrRWxtKG5vZGUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHByZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKHByZSA9IG5vZGUubmV4dFNpYmxpbmcpICYmICFkb21VdGlscy5pc0Jsb2NrRWxtKHByZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHByZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRFbmRBZnRlcihub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHByZSA9IG5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0bXAucGFyZW50Tm9kZSA9PT0gdGhpcy5lbmRDb250YWluZXIpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kT2Zmc2V0LS07XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHRtcCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAvLyDmianlsZXovrnnlYzliLDmnIDlpKdcclxuXHQgICAgICAgICAgICBpZiAoIXRoaXMuY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLnN0YXJ0T2Zmc2V0ID09IDApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzdG9wRm4gJiYgc3RvcEZuKHRoaXMuc3RhcnRDb250YWluZXIpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaXNCb2R5KHRoaXMuc3RhcnRDb250YWluZXIpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QmVmb3JlKHRoaXMuc3RhcnRDb250YWluZXIpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLmVuZE9mZnNldCA9PSAodGhpcy5lbmRDb250YWluZXIubm9kZVR5cGUgPT0gMSA/IHRoaXMuZW5kQ29udGFpbmVyLmNoaWxkTm9kZXMubGVuZ3RoIDogdGhpcy5lbmRDb250YWluZXIubm9kZVZhbHVlLmxlbmd0aCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzdG9wRm4gJiYgc3RvcEZuKHRoaXMuZW5kQ29udGFpbmVyKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGlzQm9keSh0aGlzLmVuZENvbnRhaW5lcikpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RW5kQWZ0ZXIodGhpcy5lbmRDb250YWluZXIpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGVubGFyZ2VUb0Jsb2NrRWxtOmZ1bmN0aW9uKGlnbm9yZUVuZCl7XHJcblx0ICAgICAgICAgICAgd2hpbGUoIWRvbVV0aWxzLmlzQmxvY2tFbG0odGhpcy5zdGFydENvbnRhaW5lcikpe1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QmVmb3JlKHRoaXMuc3RhcnRDb250YWluZXIpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZighaWdub3JlRW5kKXtcclxuXHQgICAgICAgICAgICAgICAgd2hpbGUoIWRvbVV0aWxzLmlzQmxvY2tFbG0odGhpcy5lbmRDb250YWluZXIpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RW5kQWZ0ZXIodGhpcy5lbmRDb250YWluZXIpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6LCD5pW0UmFuZ2XnmoTovrnnlYzvvIzkvb/lhbZcIue8qeWwj1wi5Yiw5pyA5ZCI6YCC55qE5L2N572uXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGFkanVzdG1lbnRCb3VuZGFyeVxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFVFLmRvbS5SYW5nZSB9IOW9k+WJjXJhbmdl5a+56LGhXHJcblx0ICAgICAgICAgKiBAc2VlIFVFLmRvbS5SYW5nZTpzaHJpbmtCb3VuZGFyeSgpXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGFkanVzdG1lbnRCb3VuZGFyeTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLmNvbGxhcHNlZCkge1xyXG5cdCAgICAgICAgICAgICAgICB3aGlsZSAoIWRvbVV0aWxzLmlzQm9keSh0aGlzLnN0YXJ0Q29udGFpbmVyKSAmJlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydE9mZnNldCA9PSB0aGlzLnN0YXJ0Q29udGFpbmVyW3RoaXMuc3RhcnRDb250YWluZXIubm9kZVR5cGUgPT0gMyA/ICdub2RlVmFsdWUnIDogJ2NoaWxkTm9kZXMnXS5sZW5ndGggJiZcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhcnRDb250YWluZXJbdGhpcy5zdGFydENvbnRhaW5lci5ub2RlVHlwZSA9PSAzID8gJ25vZGVWYWx1ZScgOiAnY2hpbGROb2RlcyddLmxlbmd0aFxyXG5cdCAgICAgICAgICAgICAgICAgICAgKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGFydEFmdGVyKHRoaXMuc3RhcnRDb250YWluZXIpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlICghZG9tVXRpbHMuaXNCb2R5KHRoaXMuZW5kQ29udGFpbmVyKSAmJiAhdGhpcy5lbmRPZmZzZXQgJiZcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5kQ29udGFpbmVyW3RoaXMuZW5kQ29udGFpbmVyLm5vZGVUeXBlID09IDMgPyAnbm9kZVZhbHVlJyA6ICdjaGlsZE5vZGVzJ10ubGVuZ3RoXHJcblx0ICAgICAgICAgICAgICAgICAgICApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RW5kQmVmb3JlKHRoaXMuZW5kQ29udGFpbmVyKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDnu5lyYW5nZemAieWMuuS4reeahOWGheWuuea3u+WKoOe7meWumueahGlubGluZeagh+etvlxyXG5cdCAgICAgICAgICogQG1ldGhvZCBhcHBseUlubGluZVN0eWxlXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSB0YWdOYW1lIOmcgOimgea3u+WKoOeahOagh+etvuWQjVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGh0bWxcclxuXHQgICAgICAgICAqIDxwPnh4eHhbeHh4eF14PC9wPiAgPT0+ICByYW5nZS5hcHBseUlubGluZVN0eWxlKFwic3Ryb25nXCIpICA9PT4gIDxwPnh4eHhbPHN0cm9uZz54eHh4PC9zdHJvbmc+XXg8L3A+XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog57uZcmFuZ2XpgInljLrkuK3nmoTlhoXlrrnmt7vliqDnu5nlrprnmoRpbmxpbmXmoIfnrb7vvIwg5bm25LiU5Li65qCH562+6ZmE5Yqg5LiK5LiA5Lqb5Yid5aeL5YyW5bGe5oCn44CCXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGFwcGx5SW5saW5lU3R5bGVcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IHRhZ05hbWUg6ZyA6KaB5re75Yqg55qE5qCH562+5ZCNXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBPYmplY3QgfSBhdHRycyDot5/pmo/mlrDmt7vliqDnmoTmoIfnrb7nmoTlsZ7mgKdcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY3pgInljLpcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBodG1sXHJcblx0ICAgICAgICAgKiA8cD54eHh4W3h4eHhdeDwvcD5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA9PT5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8IS0tIOaJp+ihjOaTjeS9nCAtLT5cclxuXHQgICAgICAgICAqIHJhbmdlLmFwcGx5SW5saW5lU3R5bGUoXCJzdHJvbmdcIix7XCJzdHlsZVwiOlwiZm9udC1zaXplOjEycHhcIn0pXHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogPT0+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogPHA+eHh4eFs8c3Ryb25nIHN0eWxlPVwiZm9udC1zaXplOjEycHhcIj54eHh4PC9zdHJvbmc+XXg8L3A+XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgYXBwbHlJbmxpbmVTdHlsZTpmdW5jdGlvbiAodGFnTmFtZSwgYXR0cnMsIGxpc3QpIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5jb2xsYXBzZWQpcmV0dXJuIHRoaXM7XHJcblx0ICAgICAgICAgICAgdGhpcy50cmltQm91bmRhcnkoKS5lbmxhcmdlKGZhbHNlLFxyXG5cdCAgICAgICAgICAgICAgICBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT0gMSAmJiBkb21VdGlscy5pc0Jsb2NrRWxtKG5vZGUpXHJcblx0ICAgICAgICAgICAgICAgIH0pLmFkanVzdG1lbnRCb3VuZGFyeSgpO1xyXG5cdCAgICAgICAgICAgIHZhciBib29rbWFyayA9IHRoaXMuY3JlYXRlQm9va21hcmsoKSxcclxuXHQgICAgICAgICAgICAgICAgZW5kID0gYm9va21hcmsuZW5kLFxyXG5cdCAgICAgICAgICAgICAgICBmaWx0ZXJGbiA9IGZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PSAxID8gbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT0gJ2JyJyA6ICFkb21VdGlscy5pc1doaXRlc3BhY2Uobm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZShib29rbWFyay5zdGFydCwgZmFsc2UsIGZpbHRlckZuKSxcclxuXHQgICAgICAgICAgICAgICAgbm9kZSxcclxuXHQgICAgICAgICAgICAgICAgcHJlLFxyXG5cdCAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuY2xvbmVSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICYmIChkb21VdGlscy5nZXRQb3NpdGlvbihjdXJyZW50LCBlbmQpICYgZG9tVXRpbHMuUE9TSVRJT05fUFJFQ0VESU5HKSkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5ub2RlVHlwZSA9PSAzIHx8IGR0ZFt0YWdOYW1lXVtjdXJyZW50LnRhZ05hbWVdKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZShjdXJyZW50KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBjdXJyZW50O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5vZGUgJiYgKG5vZGUubm9kZVR5cGUgPT0gMyB8fCBkdGRbdGFnTmFtZV1bbm9kZS50YWdOYW1lXSkgJiYgbm9kZSAhPT0gZW5kKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcHJlID0gbm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gZG9tVXRpbHMuZ2V0TmV4dERvbU5vZGUobm9kZSwgbm9kZS5ub2RlVHlwZSA9PSAxLCBudWxsLCBmdW5jdGlvbiAocGFyZW50KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkdGRbdGFnTmFtZV1bcGFyZW50LnRhZ05hbWVdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGZyYWcgPSByYW5nZS5zZXRFbmRBZnRlcihwcmUpLmV4dHJhY3RDb250ZW50cygpLCBlbG07XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobGlzdCAmJiBsaXN0Lmxlbmd0aCA+IDApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGV2ZWwsIHRvcDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0b3AgPSBsZXZlbCA9IGxpc3RbMF0uY2xvbmVOb2RlKGZhbHNlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMSwgY2k7IGNpID0gbGlzdFtpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbC5hcHBlbmRDaGlsZChjaS5jbG9uZU5vZGUoZmFsc2UpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWwgPSBsZXZlbC5maXJzdENoaWxkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbG0gPSBsZXZlbDtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxtID0gcmFuZ2UuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChhdHRycykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnNldEF0dHJpYnV0ZXMoZWxtLCBhdHRycyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbG0uYXBwZW5kQ2hpbGQoZnJhZyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKGxpc3QgPyB0b3AgOiBlbG0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/lpITnkIbkuIvmu5Hnur/lnKhh5LiK55qE5oOF5Ya1XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgYU5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGFnTmFtZSA9PSAnc3BhbicgJiYgYXR0cnMuc3R5bGUgJiYgL3RleHRcXC1kZWNvcmF0aW9uLy50ZXN0KGF0dHJzLnN0eWxlKSAmJiAoYU5vZGUgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKGVsbSwgJ2EnLCB0cnVlKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5zZXRBdHRyaWJ1dGVzKGFOb2RlLCBhdHRycyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGVsbSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWxtID0gYU5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLm1lcmdlU2libGluZyhlbG0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmNsZWFyRW1wdHlTaWJsaW5nKGVsbSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+WOu+mZpOWtkOiKgueCueebuOWQjOeahFxyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMubWVyZ2VDaGlsZChlbG0sIGF0dHJzKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZShlbG0sIGZhbHNlLCBmaWx0ZXJGbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5tZXJnZVRvUGFyZW50KGVsbSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gZW5kKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gZG9tVXRpbHMuZ2V0TmV4dERvbU5vZGUoY3VycmVudCwgdHJ1ZSwgZmlsdGVyRm4pO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLm1vdmVUb0Jvb2ttYXJrKGJvb2ttYXJrKTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDnp7vpmaTlvZPliY3pgInljLrlhoXmjIflrprnmoRpbmxpbmXmoIfnrb7vvIzkvYbkv53nlZnlhbbkuK3nmoTlhoXlrrlcclxuXHQgICAgICAgICAqIEBtZXRob2QgcmVtb3ZlSW5saW5lU3R5bGVcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IHRhZ05hbWUg6ZyA6KaB56e76Zmk55qE5qCH562+5ZCNXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmN55qEcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBodG1sXHJcblx0ICAgICAgICAgKiB4eFt4PHNwYW4+eHh4PGVtPnl5eTwvZW0+enpdejwvc3Bhbj4gID0+IHJhbmdlLnJlbW92ZUlubGluZVN0eWxlKFtcImVtXCJdKSAgPT4geHhbeDxzcGFuPnh4eHl5eXp6XXo8L3NwYW4+XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog56e76Zmk5b2T5YmN6YCJ5Yy65YaF5oyH5a6a55qE5LiA57uEaW5saW5l5qCH562+77yM5L2G5L+d55WZ5YW25Lit55qE5YaF5a65XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHJlbW92ZUlubGluZVN0eWxlXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBBcnJheSB9IHRhZ05hbWVBcnIg6ZyA6KaB56e76Zmk55qE5qCH562+5ZCN55qE5pWw57uEXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmN55qEcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqIEBzZWUgVUUuZG9tLlJhbmdlOnJlbW92ZUlubGluZVN0eWxlKFN0cmluZylcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgcmVtb3ZlSW5saW5lU3R5bGU6ZnVuY3Rpb24gKHRhZ05hbWVzKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuY29sbGFwc2VkKXJldHVybiB0aGlzO1xyXG5cdCAgICAgICAgICAgIHRhZ05hbWVzID0gdXRpbHMuaXNBcnJheSh0YWdOYW1lcykgPyB0YWdOYW1lcyA6IFt0YWdOYW1lc107XHJcblx0ICAgICAgICAgICAgdGhpcy5zaHJpbmtCb3VuZGFyeSgpLmFkanVzdG1lbnRCb3VuZGFyeSgpO1xyXG5cdCAgICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc3RhcnRDb250YWluZXIsIGVuZCA9IHRoaXMuZW5kQ29udGFpbmVyO1xyXG5cdCAgICAgICAgICAgIHdoaWxlICgxKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChzdGFydC5ub2RlVHlwZSA9PSAxKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodXRpbHMuaW5kZXhPZih0YWdOYW1lcywgc3RhcnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSA+IC0xKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09ICdib2R5Jykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gbnVsbDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBzdGFydCA9IHN0YXJ0LnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHdoaWxlICgxKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChlbmQubm9kZVR5cGUgPT0gMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWxzLmluZGV4T2YodGFnTmFtZXMsIGVuZC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpID4gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChlbmQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09ICdib2R5Jykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZW5kID0gZW5kLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciBib29rbWFyayA9IHRoaXMuY3JlYXRlQm9va21hcmsoKSxcclxuXHQgICAgICAgICAgICAgICAgZnJhZyxcclxuXHQgICAgICAgICAgICAgICAgdG1wUmFuZ2U7XHJcblx0ICAgICAgICAgICAgaWYgKHN0YXJ0KSB7XHJcblx0ICAgICAgICAgICAgICAgIHRtcFJhbmdlID0gdGhpcy5jbG9uZVJhbmdlKCkuc2V0RW5kQmVmb3JlKGJvb2ttYXJrLnN0YXJ0KS5zZXRTdGFydEJlZm9yZShzdGFydCk7XHJcblx0ICAgICAgICAgICAgICAgIGZyYWcgPSB0bXBSYW5nZS5leHRyYWN0Q29udGVudHMoKTtcclxuXHQgICAgICAgICAgICAgICAgdG1wUmFuZ2UuaW5zZXJ0Tm9kZShmcmFnKTtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMuY2xlYXJFbXB0eVNpYmxpbmcoc3RhcnQsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICBzdGFydC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShib29rbWFyay5zdGFydCwgc3RhcnQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoZW5kKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRtcFJhbmdlID0gdGhpcy5jbG9uZVJhbmdlKCkuc2V0U3RhcnRBZnRlcihib29rbWFyay5lbmQpLnNldEVuZEFmdGVyKGVuZCk7XHJcblx0ICAgICAgICAgICAgICAgIGZyYWcgPSB0bXBSYW5nZS5leHRyYWN0Q29udGVudHMoKTtcclxuXHQgICAgICAgICAgICAgICAgdG1wUmFuZ2UuaW5zZXJ0Tm9kZShmcmFnKTtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMuY2xlYXJFbXB0eVNpYmxpbmcoZW5kLCBmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGVuZC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShib29rbWFyay5lbmQsIGVuZC5uZXh0U2libGluZyk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciBjdXJyZW50ID0gZG9tVXRpbHMuZ2V0TmV4dERvbU5vZGUoYm9va21hcmsuc3RhcnQsIGZhbHNlLCBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PSAxO1xyXG5cdCAgICAgICAgICAgIH0pLCBuZXh0O1xyXG5cdCAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQgIT09IGJvb2ttYXJrLmVuZCkge1xyXG5cdCAgICAgICAgICAgICAgICBuZXh0ID0gZG9tVXRpbHMuZ2V0TmV4dERvbU5vZGUoY3VycmVudCwgdHJ1ZSwgZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09IDE7XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodXRpbHMuaW5kZXhPZih0YWdOYW1lcywgY3VycmVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCkpID4gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShjdXJyZW50LCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBjdXJyZW50ID0gbmV4dDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMubW92ZVRvQm9va21hcmsoYm9va21hcmspO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPluW9k+WJjemAieS4reeahOiHqumXreWQiOeahOiKgueCuVxyXG5cdCAgICAgICAgICogQG1ldGhvZCAgZ2V0Q2xvc2VkTm9kZVxyXG5cdCAgICAgICAgICogQHJldHVybiB7IE5vZGUgfCBOVUxMIH0g5aaC5p6c5b2T5YmN6YCJ5Lit55qE5piv6Ieq6Zet5ZCI6IqC54K577yMIOWImei/lOWbnuivpeiKgueCue+8jCDlkKbliJnov5Tlm55OVUxMXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGdldENsb3NlZE5vZGU6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBub2RlO1xyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5jb2xsYXBzZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5jbG9uZVJhbmdlKCkuYWRqdXN0bWVudEJvdW5kYXJ5KCkuc2hyaW5rQm91bmRhcnkoKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHNlbGVjdE9uZU5vZGUocmFuZ2UpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSByYW5nZS5zdGFydENvbnRhaW5lci5jaGlsZE5vZGVzW3JhbmdlLnN0YXJ0T2Zmc2V0XTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZCAmJiBjaGlsZC5ub2RlVHlwZSA9PSAxICYmIChkdGQuJGVtcHR5W2NoaWxkLnRhZ05hbWVdIHx8IGR0ZC4kbm9uQ2hpbGRbY2hpbGQudGFnTmFtZV0pKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGNoaWxkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOWcqOmhtemdouS4iumrmOS6rnJhbmdl5omA6KGo56S655qE6YCJ5Yy6XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHNlbGVjdFxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFVFLmRvbS5SYW5nZSB9IOi/lOWbnuW9k+WJjVJhbmdl5a+56LGhXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgICAgICAvL+i/memHjOS4jeWMuuWIhmllOeS7peS4iu+8jHRyYWNlOjM4MjRcclxuXHQgICAgICAgIHNlbGVjdDpicm93c2VyLmllID8gZnVuY3Rpb24gKG5vRmlsbERhdGEsIHRleHRSYW5nZSkge1xyXG5cdCAgICAgICAgICAgIHZhciBuYXRpdmVSYW5nZTtcclxuXHQgICAgICAgICAgICBpZiAoIXRoaXMuY29sbGFwc2VkKVxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnNocmlua0JvdW5kYXJ5KCk7XHJcblx0ICAgICAgICAgICAgdmFyIG5vZGUgPSB0aGlzLmdldENsb3NlZE5vZGUoKTtcclxuXHQgICAgICAgICAgICBpZiAobm9kZSAmJiAhdGV4dFJhbmdlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBuYXRpdmVSYW5nZSA9IHRoaXMuZG9jdW1lbnQuYm9keS5jcmVhdGVDb250cm9sUmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5hdGl2ZVJhbmdlLmFkZEVsZW1lbnQobm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBuYXRpdmVSYW5nZS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciBib29rbWFyayA9IHRoaXMuY3JlYXRlQm9va21hcmsoKSxcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQgPSBib29rbWFyay5zdGFydCxcclxuXHQgICAgICAgICAgICAgICAgZW5kO1xyXG5cdCAgICAgICAgICAgIG5hdGl2ZVJhbmdlID0gdGhpcy5kb2N1bWVudC5ib2R5LmNyZWF0ZVRleHRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgIG5hdGl2ZVJhbmdlLm1vdmVUb0VsZW1lbnRUZXh0KHN0YXJ0KTtcclxuXHQgICAgICAgICAgICBuYXRpdmVSYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIDEpO1xyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5jb2xsYXBzZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG5hdGl2ZVJhbmdlRW5kID0gdGhpcy5kb2N1bWVudC5ib2R5LmNyZWF0ZVRleHRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgICAgICBlbmQgPSBib29rbWFyay5lbmQ7XHJcblx0ICAgICAgICAgICAgICAgIG5hdGl2ZVJhbmdlRW5kLm1vdmVUb0VsZW1lbnRUZXh0KGVuZCk7XHJcblx0ICAgICAgICAgICAgICAgIG5hdGl2ZVJhbmdlLnNldEVuZFBvaW50KCdFbmRUb0VuZCcsIG5hdGl2ZVJhbmdlRW5kKTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIW5vRmlsbERhdGEgJiYgdGhpcy5zdGFydENvbnRhaW5lci5ub2RlVHlwZSAhPSAzKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+S9v+eUqDxzcGFuPnx4PHNwYW4+5Zu65a6a5L2P5YWJ5qCHXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdG1wVGV4dCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZmlsbENoYXIpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wLmFwcGVuZENoaWxkKHRoaXMuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZmlsbENoYXIpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXJ0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRtcCwgc3RhcnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhcnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodG1wVGV4dCwgc3RhcnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/lvZPngrliLGksdeaXtu+8jOS4jeiDvea4hemZpGnkuIrovrnnmoRiXHJcblx0ICAgICAgICAgICAgICAgICAgICByZW1vdmVGaWxsRGF0YSh0aGlzLmRvY3VtZW50LCB0bXBUZXh0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZpbGxEYXRhID0gdG1wVGV4dDtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lcmdlU2libGluZyh0bXAsICdwcmV2aW91c1NpYmxpbmcnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lcmdlU2libGluZyhzdGFydCwgJ25leHRTaWJsaW5nJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBuYXRpdmVSYW5nZS5tb3ZlU3RhcnQoJ2NoYXJhY3RlcicsIC0xKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5hdGl2ZVJhbmdlLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMubW92ZVRvQm9va21hcmsoYm9va21hcmspO1xyXG5cdCAgICAgICAgICAgIHRtcCAmJiBkb21VdGlscy5yZW1vdmUodG1wKTtcclxuXHQgICAgICAgICAgICAvL0lF5Zyo6ZqQ6JeP54q25oCB5LiL5LiN5pSv5oyBcmFuZ2Xmk43kvZzvvIxjYXRjaOS4gOS4i1xyXG5cdCAgICAgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgICAgIG5hdGl2ZVJhbmdlLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcblx0ICAgICAgICB9IDogZnVuY3Rpb24gKG5vdEluc2VydEZpbGxEYXRhKSB7XHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tPZmZzZXQocm5nKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrKG5vZGUsb2Zmc2V0LGRpcil7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihub2RlLm5vZGVUeXBlID09IDMgJiYgbm9kZS5ub2RlVmFsdWUubGVuZ3RoIDwgb2Zmc2V0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBybmdbZGlyICsgJ09mZnNldCddID0gbm9kZS5ub2RlVmFsdWUubGVuZ3RoXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgY2hlY2socm5nLnN0YXJ0Q29udGFpbmVyLHJuZy5zdGFydE9mZnNldCwnc3RhcnQnKTtcclxuXHQgICAgICAgICAgICAgICAgY2hlY2socm5nLmVuZENvbnRhaW5lcixybmcuZW5kT2Zmc2V0LCdlbmQnKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdmFyIHdpbiA9IGRvbVV0aWxzLmdldFdpbmRvdyh0aGlzLmRvY3VtZW50KSxcclxuXHQgICAgICAgICAgICAgICAgc2VsID0gd2luLmdldFNlbGVjdGlvbigpLFxyXG5cdCAgICAgICAgICAgICAgICB0eHROb2RlO1xyXG5cdCAgICAgICAgICAgIC8vRkbkuIvlhbPpl63oh6rliqjplb/pq5jml7bmu5rliqjmnaHlnKjlhbPpl61kaWFsb2fml7bkvJrot7NcclxuXHQgICAgICAgICAgICAvL2Zm5LiL5aaC5p6c5LiNYm9keS5mb2N1c+WwhuS4jeiDveWumuS9jemXreWQiOWFieagh+WIsOe8lui+keWZqOWGhVxyXG5cdCAgICAgICAgICAgIGJyb3dzZXIuZ2Vja28gPyB0aGlzLmRvY3VtZW50LmJvZHkuZm9jdXMoKSA6IHdpbi5mb2N1cygpO1xyXG5cdCAgICAgICAgICAgIGlmIChzZWwpIHtcclxuXHQgICAgICAgICAgICAgICAgc2VsLnJlbW92ZUFsbFJhbmdlcygpO1xyXG5cdCAgICAgICAgICAgICAgICAvLyB0cmFjZTo4NzAgY2hyb21lL3NhZmFyaeWQjui+ueaYr2Jy5a+55LqO6Zet5ZCI5b6XcmFuZ2XkuI3og73lrprkvY0g5omA5Lul5Y675o6J5LqG5Yik5patXHJcblx0ICAgICAgICAgICAgICAgIC8vIHRoaXMuc3RhcnRDb250YWluZXIubm9kZVR5cGUgIT0gMyAmJiEgKChjaGlsZCA9IHRoaXMuc3RhcnRDb250YWluZXIuY2hpbGROb2Rlc1t0aGlzLnN0YXJ0T2Zmc2V0XSkgJiYgY2hpbGQubm9kZVR5cGUgPT0gMSAmJiBjaGlsZC50YWdOYW1lID09ICdCUidcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sbGFwc2VkICYmICFub3RJbnNlcnRGaWxsRGF0YSkge1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAvL29wZWFy5aaC5p6c5rKh5pyJ6IqC54K55o6l552A77yM5Y6f55Sf55qE5LiN6IO95aSf5a6a5L2NLOS4jeiDveWcqGJvZHnnmoTnrKzkuIDnuqfmj5LlhaXnqbrnmb3oioLngrlcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5vdEluc2VydEZpbGxEYXRhICYmIGJyb3dzZXIub3BlcmEgJiYgIWRvbVV0aWxzLmlzQm9keSh0aGlzLnN0YXJ0Q29udGFpbmVyKSAmJiB0aGlzLnN0YXJ0Q29udGFpbmVyLm5vZGVUeXBlID09IDEpIHtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0Tm9kZSh0bXApLnNldFN0YXJ0KHRtcCwgMCkuY29sbGFwc2UodHJ1ZSk7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQvL1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/lpITnkIblhYnmoIfokL3lnKjmlofmnKzoioLngrnnmoTmg4XlhrVcclxuXHQgICAgICAgICAgICAgICAgICAgIC8v5aSE55CG5Lul5LiL55qE5oOF5Ya1XHJcblx0ICAgICAgICAgICAgICAgICAgICAvLzxiPnx4eHh4PC9iPlxyXG5cdCAgICAgICAgICAgICAgICAgICAgLy88Yj54eHh4PC9iPnx4eHh4XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL3h4eHg8Yj58PC9iPlxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zdGFydENvbnRhaW5lcixjaGlsZCA9IHN0YXJ0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoc3RhcnQubm9kZVR5cGUgPT0gMSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBzdGFydC5jaGlsZE5vZGVzW3RoaXMuc3RhcnRPZmZzZXRdO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKCAhKHN0YXJ0Lm5vZGVUeXBlID09IDMgJiYgdGhpcy5zdGFydE9mZnNldCkgICYmXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKGNoaWxkID9cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCFjaGlsZC5wcmV2aW91c1NpYmxpbmcgfHwgY2hpbGQucHJldmlvdXNTaWJsaW5nLm5vZGVUeXBlICE9IDMpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKCFzdGFydC5sYXN0Q2hpbGQgfHwgc3RhcnQubGFzdENoaWxkLm5vZGVUeXBlICE9IDMpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0eHROb2RlID0gdGhpcy5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShmaWxsQ2hhcik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy/ot5/nnYDliY3ovrnotbBcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydE5vZGUodHh0Tm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlRmlsbERhdGEodGhpcy5kb2N1bWVudCwgdHh0Tm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VTaWJsaW5nKHR4dE5vZGUsICdwcmV2aW91c1NpYmxpbmcnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZVNpYmxpbmcodHh0Tm9kZSwgJ25leHRTaWJsaW5nJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZmlsbERhdGEgPSB0eHROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhcnQodHh0Tm9kZSwgYnJvd3Nlci53ZWJraXQgPyAxIDogMCkuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdmFyIG5hdGl2ZVJhbmdlID0gdGhpcy5kb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgICAgICBpZih0aGlzLmNvbGxhcHNlZCAmJiBicm93c2VyLm9wZXJhICYmIHRoaXMuc3RhcnRDb250YWluZXIubm9kZVR5cGUgPT0gMSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLnN0YXJ0Q29udGFpbmVyLmNoaWxkTm9kZXNbdGhpcy5zdGFydE9mZnNldF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZighY2hpbGQpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8v5b6A5YmN6Z2g5ouiXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSB0aGlzLnN0YXJ0Q29udGFpbmVyLmxhc3RDaGlsZDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiggY2hpbGQgJiYgZG9tVXRpbHMuaXNCcihjaGlsZCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXJ0QmVmb3JlKGNoaWxkKS5jb2xsYXBzZSh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL+WQkeWQjumdoOaLolxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGNoaWxkICYmIGRvbVV0aWxzLmlzQmxvY2tFbG0oY2hpbGQpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2hpbGQubm9kZVR5cGUgPT0gMSAmJiBjaGlsZC5jaGlsZE5vZGVzWzBdKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkID0gY2hpbGQuY2hpbGROb2Rlc1swXVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkICYmIHRoaXMuc2V0U3RhcnRCZWZvcmUoY2hpbGQpLmNvbGxhcHNlKHRydWUpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIC8v5pivY3JlYXRlQWRkcmVzc+acgOWQjuS4gOS9jeeul+eahOS4jeWHhu+8jOeOsOWcqOi/memHjOi/m+ihjOW+ruiwg1xyXG5cdCAgICAgICAgICAgICAgICBjaGVja09mZnNldCh0aGlzKTtcclxuXHQgICAgICAgICAgICAgICAgbmF0aXZlUmFuZ2Uuc2V0U3RhcnQodGhpcy5zdGFydENvbnRhaW5lciwgdGhpcy5zdGFydE9mZnNldCk7XHJcblx0ICAgICAgICAgICAgICAgIG5hdGl2ZVJhbmdlLnNldEVuZCh0aGlzLmVuZENvbnRhaW5lciwgdGhpcy5lbmRPZmZzZXQpO1xyXG5cdCAgICAgICAgICAgICAgICBzZWwuYWRkUmFuZ2UobmF0aXZlUmFuZ2UpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmu5rliqjliLDlvZPliY1yYW5nZeW8gOWni+eahOS9jee9rlxyXG5cdCAgICAgICAgICogQG1ldGhvZCBzY3JvbGxUb1ZpZXdcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFdpbmRvdyB9IHdpbiDlvZPliY1yYW5nZeWvueixoeaJgOWxnueahHdpbmRvd+WvueixoVxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFVFLmRvbS5SYW5nZSB9IOW9k+WJjVJhbmdl5a+56LGhXHJcblx0ICAgICAgICAgKi9cclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOa7muWKqOWIsOi3neemu+W9k+WJjXJhbmdl5byA5aeL5L2N572uIG9mZnNldCDnmoTkvY3nva7lpIRcclxuXHQgICAgICAgICAqIEBtZXRob2Qgc2Nyb2xsVG9WaWV3XHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBXaW5kb3cgfSB3aW4g5b2T5YmNcmFuZ2Xlr7nosaHmiYDlsZ7nmoR3aW5kb3flr7nosaFcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IE51bWJlciB9IG9mZnNldCDot53nprtyYW5nZeW8gOWni+S9jee9ruWkhOeahOWBj+enu+mHj++8jCDlpoLmnpzkuLrmraPmlbDvvIwg5YiZ5ZCR5LiL5YGP56e777yMIOWPjeS5i++8jCDliJnlkJHkuIrlgY/np7tcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY1SYW5nZeWvueixoVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBzY3JvbGxUb1ZpZXc6ZnVuY3Rpb24gKHdpbiwgb2Zmc2V0KSB7XHJcblx0ICAgICAgICAgICAgd2luID0gd2luID8gd2luZG93IDogZG9tVXRpbHMuZ2V0V2luZG93KHRoaXMuZG9jdW1lbnQpO1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgIHNwYW4gPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcblx0ICAgICAgICAgICAgLy90cmFjZTo3MTdcclxuXHQgICAgICAgICAgICBzcGFuLmlubmVySFRNTCA9ICcmbmJzcDsnO1xyXG5cdCAgICAgICAgICAgIG1lLmNsb25lUmFuZ2UoKS5pbnNlcnROb2RlKHNwYW4pO1xyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLnNjcm9sbFRvVmlldyhzcGFuLCB3aW4sIG9mZnNldCk7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHNwYW4pO1xyXG5cdCAgICAgICAgICAgIHJldHVybiBtZTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDliKTmlq3lvZPliY3pgInljLrlhoXlrrnmmK/lkKbljaDkvY3nrKZcclxuXHQgICAgICAgICAqIEBwcml2YXRlXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGluRmlsbENoYXJcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBCb29sZWFuIH0g5aaC5p6c5piv5Y2g5L2N56ym6L+U5ZuedHJ1Ze+8jOWQpuWImei/lOWbnmZhbHNlXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGluRmlsbENoYXIgOiBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuc3RhcnRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgaWYodGhpcy5jb2xsYXBzZWQgJiYgc3RhcnQubm9kZVR5cGUgPT0gM1xyXG5cdCAgICAgICAgICAgICAgICAmJiBzdGFydC5ub2RlVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKCdeJyArIGRvbVV0aWxzLmZpbGxDaGFyKSwnJykubGVuZ3RoICsgMSA9PSBzdGFydC5ub2RlVmFsdWUubGVuZ3RoXHJcblx0ICAgICAgICAgICAgICAgICl7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5L+d5a2YXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGNyZWF0ZUFkZHJlc3NcclxuXHQgICAgICAgICAqIEBwcml2YXRlXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgQm9vbGVhbiB9IOi/lOWbnuW8gOWni+WSjOe7k+adn+eahOS9jee9rlxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGh0bWxcclxuXHQgICAgICAgICAqIDxib2R5PlxyXG5cdCAgICAgICAgICogICAgIDxwPlxyXG5cdCAgICAgICAgICogICAgICAgICBhYWFhXHJcblx0ICAgICAgICAgKiAgICAgICAgIDxlbT5cclxuXHQgICAgICAgICAqICAgICAgICAgICAgIDwhLS0g6YCJ5Yy65byA5aeLIC0tPlxyXG5cdCAgICAgICAgICogICAgICAgICAgICAgYmJiYlxyXG5cdCAgICAgICAgICogICAgICAgICAgICAgPCEtLSDpgInljLrnu5PmnZ8gLS0+XHJcblx0ICAgICAgICAgKiAgICAgICAgIDwvZW0+XHJcblx0ICAgICAgICAgKiAgICAgPC9wPlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICA8c2NyaXB0PlxyXG5cdCAgICAgICAgICogICAgICAgICAvL291dHB1dDoge3N0YXJ0QWRkcmVzczpbMCwxLDAsMF0sZW5kQWRkcmVzczpbMCwxLDAsNF19XHJcblx0ICAgICAgICAgKiAgICAgICAgIGNvbnNvbGUubG9nKCByYW5nZS5jcmVhdGVBZGRyZXNzKCkgKTtcclxuXHQgICAgICAgICAqICAgICA8L3NjcmlwdD5cclxuXHQgICAgICAgICAqIDwvYm9keT5cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBjcmVhdGVBZGRyZXNzIDogZnVuY3Rpb24oaWdub3JlRW5kLGlnbm9yZVR4dCl7XHJcblx0ICAgICAgICAgICAgdmFyIGFkZHIgPSB7fSxtZSA9IHRoaXM7XHJcblxyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGdldEFkZHJlc3MoaXNTdGFydCl7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBub2RlID0gaXNTdGFydCA/IG1lLnN0YXJ0Q29udGFpbmVyIDogbWUuZW5kQ29udGFpbmVyO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcGFyZW50cyA9IGRvbVV0aWxzLmZpbmRQYXJlbnRzKG5vZGUsdHJ1ZSxmdW5jdGlvbihub2RlKXtyZXR1cm4gIWRvbVV0aWxzLmlzQm9keShub2RlKX0pLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgYWRkcnMgPSBbXTtcclxuXHQgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCxjaTtjaSA9IHBhcmVudHNbaSsrXTspe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYWRkcnMucHVzaChkb21VdGlscy5nZXROb2RlSW5kZXgoY2ksaWdub3JlVHh0KSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdmFyIGZpcnN0SW5kZXggPSAwO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYoaWdub3JlVHh0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKG5vZGUubm9kZVR5cGUgPT0gMyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcE5vZGUgPSBub2RlLnByZXZpb3VzU2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSh0bXBOb2RlICYmIHRtcE5vZGUubm9kZVR5cGUgPT0gMyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0SW5kZXggKz0gdG1wTm9kZS5ub2RlVmFsdWUucmVwbGFjZShmaWxsQ2hhclJlZywnJykubGVuZ3RoO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gdG1wTm9kZS5wcmV2aW91c1NpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0SW5kZXggKz0gIChpc1N0YXJ0ID8gbWUuc3RhcnRPZmZzZXQgOiBtZS5lbmRPZmZzZXQpLy8gLSAoZmlsbENoYXJSZWcudGVzdChub2RlLm5vZGVWYWx1ZSkgPyAxIDogMCApXHJcblx0ICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gIG5vZGUuY2hpbGROb2Rlc1sgaXNTdGFydCA/IG1lLnN0YXJ0T2Zmc2V0IDogbWUuZW5kT2Zmc2V0XTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihub2RlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RJbmRleCA9IGRvbVV0aWxzLmdldE5vZGVJbmRleChub2RlLGlnbm9yZVR4dCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBpc1N0YXJ0ID8gbWUuc3RhcnRDb250YWluZXIgOiBtZS5lbmRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdCA9IG5vZGUuZmlyc3RDaGlsZDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoZmlyc3Qpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZG9tVXRpbHMuaXNGaWxsQ2hhcihmaXJzdCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmlyc3QubmV4dFNpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdEluZGV4Kys7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihmaXJzdC5ub2RlVHlwZSA9PSAzKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSggZmlyc3QgJiYgZmlyc3Qubm9kZVR5cGUgPT0gMyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmlyc3QubmV4dFNpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBmaXJzdC5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZmlyc3RJbmRleCA9IGlzU3RhcnQgPyBkb21VdGlscy5pc0ZpbGxDaGFyKG5vZGUpID8gMCA6IG1lLnN0YXJ0T2Zmc2V0ICA6IG1lLmVuZE9mZnNldFxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmKGZpcnN0SW5kZXggPCAwKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZpcnN0SW5kZXggPSAwO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGFkZHJzLnB1c2goZmlyc3RJbmRleCk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBhZGRycztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgYWRkci5zdGFydEFkZHJlc3MgPSBnZXRBZGRyZXNzKHRydWUpO1xyXG5cdCAgICAgICAgICAgIGlmKCFpZ25vcmVFbmQpe1xyXG5cdCAgICAgICAgICAgICAgICBhZGRyLmVuZEFkZHJlc3MgPSBtZS5jb2xsYXBzZWQgPyBbXS5jb25jYXQoYWRkci5zdGFydEFkZHJlc3MpIDogZ2V0QWRkcmVzcygpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gYWRkcjtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDkv53lrZhcclxuXHQgICAgICAgICAqIEBtZXRob2QgY3JlYXRlQWRkcmVzc1xyXG5cdCAgICAgICAgICogQHByaXZhdGVcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBCb29sZWFuIH0g6L+U5Zue5byA5aeL5ZKM57uT5p2f55qE5L2N572uXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgaHRtbFxyXG5cdCAgICAgICAgICogPGJvZHk+XHJcblx0ICAgICAgICAgKiAgICAgPHA+XHJcblx0ICAgICAgICAgKiAgICAgICAgIGFhYWFcclxuXHQgICAgICAgICAqICAgICAgICAgPGVtPlxyXG5cdCAgICAgICAgICogICAgICAgICAgICAgPCEtLSDpgInljLrlvIDlp4sgLS0+XHJcblx0ICAgICAgICAgKiAgICAgICAgICAgICBiYmJiXHJcblx0ICAgICAgICAgKiAgICAgICAgICAgICA8IS0tIOmAieWMuue7k+adnyAtLT5cclxuXHQgICAgICAgICAqICAgICAgICAgPC9lbT5cclxuXHQgICAgICAgICAqICAgICA8L3A+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIDxzY3JpcHQ+XHJcblx0ICAgICAgICAgKiAgICAgICAgIHZhciByYW5nZSA9IGVkaXRvci5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAqICAgICAgICAgcmFuZ2UubW92ZVRvQWRkcmVzcyh7c3RhcnRBZGRyZXNzOlswLDEsMCwwXSxlbmRBZGRyZXNzOlswLDEsMCw0XX0pO1xyXG5cdCAgICAgICAgICogICAgICAgICByYW5nZS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAqICAgICAgICAgLy9vdXRwdXQ6ICdiYmJiJ1xyXG5cdCAgICAgICAgICogICAgICAgICBjb25zb2xlLmxvZyhlZGl0b3Iuc2VsZWN0aW9uLmdldFRleHQoKSk7XHJcblx0ICAgICAgICAgKiAgICAgPC9zY3JpcHQ+XHJcblx0ICAgICAgICAgKiA8L2JvZHk+XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgbW92ZVRvQWRkcmVzcyA6IGZ1bmN0aW9uKGFkZHIsaWdub3JlRW5kKXtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5vZGUoYWRkcmVzcyxpc1N0YXJ0KXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRtcE5vZGUgPSBtZS5kb2N1bWVudC5ib2R5LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSxvZmZzZXQ7XHJcblx0ICAgICAgICAgICAgICAgIGZvcih2YXIgaT0gMCxjaSxsPWFkZHJlc3MubGVuZ3RoO2k8bDtpKyspe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2kgPSBhZGRyZXNzW2ldO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcGFyZW50Tm9kZSA9IHRtcE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gdG1wTm9kZS5jaGlsZE5vZGVzW2NpXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKCF0bXBOb2RlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSBjaTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZihpc1N0YXJ0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKHRtcE5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLnNldFN0YXJ0QmVmb3JlKHRtcE5vZGUpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5zZXRTdGFydChwYXJlbnROb2RlLG9mZnNldClcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZih0bXBOb2RlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5zZXRFbmRCZWZvcmUodG1wTm9kZSlcclxuXHQgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLnNldEVuZChwYXJlbnROb2RlLG9mZnNldClcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBnZXROb2RlKGFkZHIuc3RhcnRBZGRyZXNzLHRydWUpO1xyXG5cdCAgICAgICAgICAgICFpZ25vcmVFbmQgJiYgYWRkci5lbmRBZGRyZXNzICYmICBnZXROb2RlKGFkZHIuZW5kQWRkcmVzcyk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG1lO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOWIpOaWree7meWumueahFJhbmdl5a+56LGh5piv5ZCm5ZKM5b2T5YmNUmFuZ2Xlr7nosaHooajnpLrnmoTmmK/lkIzkuIDkuKrpgInljLpcclxuXHQgICAgICAgICAqIEBtZXRob2QgZXF1YWxzXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBVRS5kb20uUmFuZ2UgfSDpnIDopoHliKTmlq3nmoRSYW5nZeWvueixoVxyXG5cdCAgICAgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDlpoLmnpznu5nlrprnmoRSYW5nZeWvueixoeS4juW9k+WJjVJhbmdl5a+56LGh6KGo56S655qE5piv5ZCM5LiA5Liq6YCJ5Yy677yMIOWImei/lOWbnnRydWXvvIwg5ZCm5YiZ6L+U5ZueZmFsc2VcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZXF1YWxzIDogZnVuY3Rpb24ocm5nKXtcclxuXHQgICAgICAgICAgICBmb3IodmFyIHAgaW4gdGhpcyl7XHJcblx0ICAgICAgICAgICAgICAgIGlmKHRoaXMuaGFzT3duUHJvcGVydHkocCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYodGhpc1twXSAhPT0gcm5nW3BdKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDpgY3ljoZyYW5nZeWGheeahOiKgueCueOAguavj+W9k+mBjeWOhuS4gOS4quiKgueCueaXtu+8jCDpg73kvJrmiafooYzlj4LmlbDpobkgZG9GbiDmjIflrprnmoTlh73mlbDvvIwg6K+l5Ye95pWw55qE5o6l5Y+X5b2T5YmN6YGN5Y6G55qE6IqC54K5XHJcblx0ICAgICAgICAgKiDkvZzkuLrlhbblj4LmlbDjgIJcclxuXHQgICAgICAgICAqIEBtZXRob2QgdHJhdmVyc2FsXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9ICBkb0ZuIOWvueavj+S4qumBjeWOhueahOiKgueCueimgeaJp+ihjOeahOaWueazle+8jCDor6Xmlrnms5XmjqXlj5flvZPliY3pgY3ljobnmoToioLngrnkvZzkuLrlhbblj4LmlbBcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS5kb20uUmFuZ2UgfSDlvZPliY1yYW5nZeWvueixoVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGh0bWxcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8Ym9keT5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgPCEtLSDpgInljLrlvIDlp4sgLS0+XHJcblx0ICAgICAgICAgKiAgICAgPHNwYW4+PC9zcGFuPlxyXG5cdCAgICAgICAgICogICAgIDxhPjwvYT5cclxuXHQgICAgICAgICAqICAgICA8IS0tIOmAieWMuue7k+adnyAtLT5cclxuXHQgICAgICAgICAqIDwvYm9keT5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8c2NyaXB0PlxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAvL291dHB1dDogPHNwYW4+PC9zcGFuPjxhPjwvYT5cclxuXHQgICAgICAgICAqICAgICBjb25zb2xlLmxvZyggcmFuZ2UuY2xvbmVDb250ZW50cygpICk7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIHJhbmdlLnRyYXZlcnNhbCggZnVuY3Rpb24gKCBub2RlICkge1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAgICAgaWYgKCBub2RlLm5vZGVUeXBlID09PSAxICkge1xyXG5cdCAgICAgICAgICogICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBcInRlc3RcIjtcclxuXHQgICAgICAgICAqICAgICAgICAgfVxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICB9ICk7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIC8vb3V0cHV0OiA8c3BhbiBjbGFzcz1cInRlc3RcIj48L3NwYW4+PGEgY2xhc3M9XCJ0ZXN0XCI+PC9hPlxyXG5cdCAgICAgICAgICogICAgIGNvbnNvbGUubG9nKCByYW5nZS5jbG9uZUNvbnRlbnRzKCkgKTtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiA8L3NjcmlwdD5cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDpgY3ljoZyYW5nZeWGheeahOiKgueCueOAglxyXG5cdCAgICAgICAgICog5q+P5b2T6YGN5Y6G5LiA5Liq6IqC54K55pe277yMIOmDveS8muaJp+ihjOWPguaVsOmhuSBkb0ZuIOaMh+WumueahOWHveaVsO+8jCDor6Xlh73mlbDnmoTmjqXlj5flvZPliY3pgY3ljobnmoToioLngrlcclxuXHQgICAgICAgICAqIOS9nOS4uuWFtuWPguaVsOOAglxyXG5cdCAgICAgICAgICog5Y+v5Lul6YCa6L+H5Y+C5pWw6aG5IGZpbHRlckZuIOadpeaMh+WumuS4gOS4qui/h+a7pOWZqO+8jCDlj6rmnInnrKblkIjor6Xov4fmu6Tlmajov4fmu6Top4TliJnnmoToioLngrnmiY3kvJrop6ZcclxuXHQgICAgICAgICAqIOWPkWRvRm7lh73mlbDnmoTmiafooYxcclxuXHQgICAgICAgICAqIEBtZXRob2QgdHJhdmVyc2FsXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGRvRm4g5a+55q+P5Liq6YGN5Y6G55qE6IqC54K56KaB5omn6KGM55qE5pa55rOV77yMIOivpeaWueazleaOpeWPl+W9k+WJjemBjeWOhueahOiKgueCueS9nOS4uuWFtuWPguaVsFxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBmaWx0ZXJGbiDov4fmu6TlmajvvIwg6K+l5Ye95pWw5o6l5Y+X5b2T5YmN6YGN5Y6G55qE6IqC54K55L2c5Li65Y+C5pWw77yMIOWmguaenOivpeiKgueCuea7oei2s+i/h+a7pFxyXG5cdCAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAg6KeE5YiZ77yMIOivt+i/lOWbnnRydWXvvIwg6K+l6IqC54K55Lya6Kem5Y+RZG9Gbu+8jCDlkKbliJnvvIwg6K+36L+U5ZueZmFsc2XvvIwg5YiZ6K+l6IqC54K55LiNXHJcblx0ICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICDkvJrop6blj5Fkb0Zu44CCXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUuZG9tLlJhbmdlIH0g5b2T5YmNcmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqIEBzZWUgVUUuZG9tLlJhbmdlOnRyYXZlcnNhbChGdW5jdGlvbilcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBodG1sXHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogPGJvZHk+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIDwhLS0g6YCJ5Yy65byA5aeLIC0tPlxyXG5cdCAgICAgICAgICogICAgIDxzcGFuPjwvc3Bhbj5cclxuXHQgICAgICAgICAqICAgICA8YT48L2E+XHJcblx0ICAgICAgICAgKiAgICAgPCEtLSDpgInljLrnu5PmnZ8gLS0+XHJcblx0ICAgICAgICAgKiA8L2JvZHk+XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogPHNjcmlwdD5cclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgLy9vdXRwdXQ6IDxzcGFuPjwvc3Bhbj48YT48L2E+XHJcblx0ICAgICAgICAgKiAgICAgY29uc29sZS5sb2coIHJhbmdlLmNsb25lQ29udGVudHMoKSApO1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICByYW5nZS50cmF2ZXJzYWwoIGZ1bmN0aW9uICggbm9kZSApIHtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgICAgIG5vZGUuY2xhc3NOYW1lID0gXCJ0ZXN0XCI7XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIH0sIGZ1bmN0aW9uICggbm9kZSApIHtcclxuXHQgICAgICAgICAqICAgICAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAxO1xyXG5cdCAgICAgICAgICogICAgIH0gKTtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgLy9vdXRwdXQ6IDxzcGFuIGNsYXNzPVwidGVzdFwiPjwvc3Bhbj48YSBjbGFzcz1cInRlc3RcIj48L2E+XHJcblx0ICAgICAgICAgKiAgICAgY29uc29sZS5sb2coIHJhbmdlLmNsb25lQ29udGVudHMoKSApO1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqIDwvc2NyaXB0PlxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHRyYXZlcnNhbDpmdW5jdGlvbihkb0ZuLGZpbHRlckZuKXtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5jb2xsYXBzZWQpXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cdCAgICAgICAgICAgIHZhciBib29rbWFyayA9IHRoaXMuY3JlYXRlQm9va21hcmsoKSxcclxuXHQgICAgICAgICAgICAgICAgZW5kID0gYm9va21hcmsuZW5kLFxyXG5cdCAgICAgICAgICAgICAgICBjdXJyZW50ID0gZG9tVXRpbHMuZ2V0TmV4dERvbU5vZGUoYm9va21hcmsuc3RhcnQsIGZhbHNlLCBmaWx0ZXJGbik7XHJcblx0ICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQgJiYgY3VycmVudCAhPT0gZW5kICYmIChkb21VdGlscy5nZXRQb3NpdGlvbihjdXJyZW50LCBlbmQpICYgZG9tVXRpbHMuUE9TSVRJT05fUFJFQ0VESU5HKSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgdG1wTm9kZSA9IGRvbVV0aWxzLmdldE5leHREb21Ob2RlKGN1cnJlbnQsZmFsc2UsZmlsdGVyRm4pO1xyXG5cdCAgICAgICAgICAgICAgICBkb0ZuKGN1cnJlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICBjdXJyZW50ID0gdG1wTm9kZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMubW92ZVRvQm9va21hcmsoYm9va21hcmspO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdH0pKCk7XHJcblxyXG5cdC8vIGNvcmUvU2VsZWN0aW9uLmpzXHJcblx0LyoqXHJcblx0ICog6YCJ6ZuGXHJcblx0ICogQGZpbGVcclxuXHQgKiBAbW9kdWxlIFVFLmRvbVxyXG5cdCAqIEBjbGFzcyBTZWxlY3Rpb25cclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDpgInljLrpm4blkIhcclxuXHQgKiBAdW5maWxlXHJcblx0ICogQG1vZHVsZSBVRS5kb21cclxuXHQgKiBAY2xhc3MgU2VsZWN0aW9uXHJcblx0ICovXHJcblx0KGZ1bmN0aW9uICgpIHtcclxuXHJcblx0ICAgIGZ1bmN0aW9uIGdldEJvdW5kYXJ5SW5mb3JtYXRpb24oIHJhbmdlLCBzdGFydCApIHtcclxuXHQgICAgICAgIHZhciBnZXRJbmRleCA9IGRvbVV0aWxzLmdldE5vZGVJbmRleDtcclxuXHQgICAgICAgIHJhbmdlID0gcmFuZ2UuZHVwbGljYXRlKCk7XHJcblx0ICAgICAgICByYW5nZS5jb2xsYXBzZSggc3RhcnQgKTtcclxuXHQgICAgICAgIHZhciBwYXJlbnQgPSByYW5nZS5wYXJlbnRFbGVtZW50KCk7XHJcblx0ICAgICAgICAvL+WmguaenOiKgueCuemHjOayoeacieWtkOiKgueCue+8jOebtOaOpemAgOWHulxyXG5cdCAgICAgICAgaWYgKCAhcGFyZW50Lmhhc0NoaWxkTm9kZXMoKSApIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gIHtjb250YWluZXI6cGFyZW50LCBvZmZzZXQ6MH07XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgc2libGluZ3MgPSBwYXJlbnQuY2hpbGRyZW4sXHJcblx0ICAgICAgICAgICAgY2hpbGQsXHJcblx0ICAgICAgICAgICAgdGVzdFJhbmdlID0gcmFuZ2UuZHVwbGljYXRlKCksXHJcblx0ICAgICAgICAgICAgc3RhcnRJbmRleCA9IDAsIGVuZEluZGV4ID0gc2libGluZ3MubGVuZ3RoIC0gMSwgaW5kZXggPSAtMSxcclxuXHQgICAgICAgICAgICBkaXN0YW5jZTtcclxuXHQgICAgICAgIHdoaWxlICggc3RhcnRJbmRleCA8PSBlbmRJbmRleCApIHtcclxuXHQgICAgICAgICAgICBpbmRleCA9IE1hdGguZmxvb3IoIChzdGFydEluZGV4ICsgZW5kSW5kZXgpIC8gMiApO1xyXG5cdCAgICAgICAgICAgIGNoaWxkID0gc2libGluZ3NbaW5kZXhdO1xyXG5cdCAgICAgICAgICAgIHRlc3RSYW5nZS5tb3ZlVG9FbGVtZW50VGV4dCggY2hpbGQgKTtcclxuXHQgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSB0ZXN0UmFuZ2UuY29tcGFyZUVuZFBvaW50cyggJ1N0YXJ0VG9TdGFydCcsIHJhbmdlICk7XHJcblx0ICAgICAgICAgICAgaWYgKCBwb3NpdGlvbiA+IDAgKSB7XHJcblx0ICAgICAgICAgICAgICAgIGVuZEluZGV4ID0gaW5kZXggLSAxO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAoIHBvc2l0aW9uIDwgMCApIHtcclxuXHQgICAgICAgICAgICAgICAgc3RhcnRJbmRleCA9IGluZGV4ICsgMTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAvL3RyYWNlOjEwNDNcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuICB7Y29udGFpbmVyOnBhcmVudCwgb2Zmc2V0OmdldEluZGV4KCBjaGlsZCApfTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoIGluZGV4ID09IC0xICkge1xyXG5cdCAgICAgICAgICAgIHRlc3RSYW5nZS5tb3ZlVG9FbGVtZW50VGV4dCggcGFyZW50ICk7XHJcblx0ICAgICAgICAgICAgdGVzdFJhbmdlLnNldEVuZFBvaW50KCAnU3RhcnRUb1N0YXJ0JywgcmFuZ2UgKTtcclxuXHQgICAgICAgICAgICBkaXN0YW5jZSA9IHRlc3RSYW5nZS50ZXh0LnJlcGxhY2UoIC8oXFxyXFxufFxccikvZywgJ1xcbicgKS5sZW5ndGg7XHJcblx0ICAgICAgICAgICAgc2libGluZ3MgPSBwYXJlbnQuY2hpbGROb2RlcztcclxuXHQgICAgICAgICAgICBpZiAoICFkaXN0YW5jZSApIHtcclxuXHQgICAgICAgICAgICAgICAgY2hpbGQgPSBzaWJsaW5nc1tzaWJsaW5ncy5sZW5ndGggLSAxXTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuICB7Y29udGFpbmVyOmNoaWxkLCBvZmZzZXQ6Y2hpbGQubm9kZVZhbHVlLmxlbmd0aH07XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB2YXIgaSA9IHNpYmxpbmdzLmxlbmd0aDtcclxuXHQgICAgICAgICAgICB3aGlsZSAoIGRpc3RhbmNlID4gMCApe1xyXG5cdCAgICAgICAgICAgICAgICBkaXN0YW5jZSAtPSBzaWJsaW5nc1sgLS1pIF0ubm9kZVZhbHVlLmxlbmd0aDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHtjb250YWluZXI6c2libGluZ3NbaV0sIG9mZnNldDotZGlzdGFuY2V9O1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdGVzdFJhbmdlLmNvbGxhcHNlKCBwb3NpdGlvbiA+IDAgKTtcclxuXHQgICAgICAgIHRlc3RSYW5nZS5zZXRFbmRQb2ludCggcG9zaXRpb24gPiAwID8gJ1N0YXJ0VG9TdGFydCcgOiAnRW5kVG9TdGFydCcsIHJhbmdlICk7XHJcblx0ICAgICAgICBkaXN0YW5jZSA9IHRlc3RSYW5nZS50ZXh0LnJlcGxhY2UoIC8oXFxyXFxufFxccikvZywgJ1xcbicgKS5sZW5ndGg7XHJcblx0ICAgICAgICBpZiAoICFkaXN0YW5jZSApIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gIGR0ZC4kZW1wdHlbY2hpbGQudGFnTmFtZV0gfHwgZHRkLiRub25DaGlsZFtjaGlsZC50YWdOYW1lXSA/XHJcblx0ICAgICAgICAgICAge2NvbnRhaW5lcjpwYXJlbnQsIG9mZnNldDpnZXRJbmRleCggY2hpbGQgKSArIChwb3NpdGlvbiA+IDAgPyAwIDogMSl9IDpcclxuXHQgICAgICAgICAgICB7Y29udGFpbmVyOmNoaWxkLCBvZmZzZXQ6cG9zaXRpb24gPiAwID8gMCA6IGNoaWxkLmNoaWxkTm9kZXMubGVuZ3RofVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgd2hpbGUgKCBkaXN0YW5jZSA+IDAgKSB7XHJcblx0ICAgICAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHByZSA9IGNoaWxkO1xyXG5cdCAgICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkW3Bvc2l0aW9uID4gMCA/ICdwcmV2aW91c1NpYmxpbmcnIDogJ25leHRTaWJsaW5nJ107XHJcblx0ICAgICAgICAgICAgICAgIGRpc3RhbmNlIC09IGNoaWxkLm5vZGVWYWx1ZS5sZW5ndGg7XHJcblx0ICAgICAgICAgICAgfSBjYXRjaCAoIGUgKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB7Y29udGFpbmVyOnBhcmVudCwgb2Zmc2V0OmdldEluZGV4KCBwcmUgKX07XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuICB7Y29udGFpbmVyOmNoaWxkLCBvZmZzZXQ6cG9zaXRpb24gPiAwID8gLWRpc3RhbmNlIDogY2hpbGQubm9kZVZhbHVlLmxlbmd0aCArIGRpc3RhbmNlfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5bCGaWVSYW5nZei9rOaNouS4ulJhbmdl5a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7UmFuZ2V9ICAgaWVSYW5nZSAgICBpZVJhbmdl5a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB7UmFuZ2V9ICAgcmFuZ2UgICAgICBSYW5nZeWvueixoVxyXG5cdCAgICAgKiBAcmV0dXJuICB7UmFuZ2V9ICByYW5nZSAgICAgICDov5Tlm57ovazmjaLlkI7nmoRSYW5nZeWvueixoVxyXG5cdCAgICAgKi9cclxuXHQgICAgZnVuY3Rpb24gdHJhbnNmb3JtSUVSYW5nZVRvUmFuZ2UoIGllUmFuZ2UsIHJhbmdlICkge1xyXG5cdCAgICAgICAgaWYgKCBpZVJhbmdlLml0ZW0gKSB7XHJcblx0ICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZSggaWVSYW5nZS5pdGVtKCAwICkgKTtcclxuXHQgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgdmFyIGJpID0gZ2V0Qm91bmRhcnlJbmZvcm1hdGlvbiggaWVSYW5nZSwgdHJ1ZSApO1xyXG5cdCAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KCBiaS5jb250YWluZXIsIGJpLm9mZnNldCApO1xyXG5cdCAgICAgICAgICAgIGlmICggaWVSYW5nZS5jb21wYXJlRW5kUG9pbnRzKCAnU3RhcnRUb0VuZCcsIGllUmFuZ2UgKSAhPSAwICkge1xyXG5cdCAgICAgICAgICAgICAgICBiaSA9IGdldEJvdW5kYXJ5SW5mb3JtYXRpb24oIGllUmFuZ2UsIGZhbHNlICk7XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZCggYmkuY29udGFpbmVyLCBiaS5vZmZzZXQgKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gcmFuZ2U7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDojrflvpdpZVJhbmdlXHJcblx0ICAgICAqIEBwYXJhbSB7U2VsZWN0aW9ufSBzZWwgICAgU2VsZWN0aW9u5a+56LGhXHJcblx0ICAgICAqIEByZXR1cm4ge2llUmFuZ2V9ICAgIOW+l+WIsGllUmFuZ2VcclxuXHQgICAgICovXHJcblx0ICAgIGZ1bmN0aW9uIF9nZXRJRVJhbmdlKCBzZWwgKSB7XHJcblx0ICAgICAgICB2YXIgaWVSYW5nZTtcclxuXHQgICAgICAgIC8vaWXkuIvmnInlj6/og73miqXplJlcclxuXHQgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgaWVSYW5nZSA9IHNlbC5nZXROYXRpdmUoKS5jcmVhdGVSYW5nZSgpO1xyXG5cdCAgICAgICAgfSBjYXRjaCAoIGUgKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgZWwgPSBpZVJhbmdlLml0ZW0gPyBpZVJhbmdlLml0ZW0oIDAgKSA6IGllUmFuZ2UucGFyZW50RWxlbWVudCgpO1xyXG5cdCAgICAgICAgaWYgKCAoIGVsLm93bmVyRG9jdW1lbnQgfHwgZWwgKSA9PT0gc2VsLmRvY3VtZW50ICkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBpZVJhbmdlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIG51bGw7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHZhciBTZWxlY3Rpb24gPSBkb20uU2VsZWN0aW9uID0gZnVuY3Rpb24gKCBkb2MgKSB7XHJcblx0ICAgICAgICB2YXIgbWUgPSB0aGlzLCBpZnJhbWU7XHJcblx0ICAgICAgICBtZS5kb2N1bWVudCA9IGRvYztcclxuXHQgICAgICAgIGlmICggYnJvd3Nlci5pZTliZWxvdyApIHtcclxuXHQgICAgICAgICAgICBpZnJhbWUgPSBkb21VdGlscy5nZXRXaW5kb3coIGRvYyApLmZyYW1lRWxlbWVudDtcclxuXHQgICAgICAgICAgICBkb21VdGlscy5vbiggaWZyYW1lLCAnYmVmb3JlZGVhY3RpdmF0ZScsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgbWUuX2Jha0lFUmFuZ2UgPSBtZS5nZXRJRVJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgfSApO1xyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLm9uKCBpZnJhbWUsICdhY3RpdmF0ZScsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICggIV9nZXRJRVJhbmdlKCBtZSApICYmIG1lLl9iYWtJRVJhbmdlICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLl9iYWtJRVJhbmdlLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9IGNhdGNoICggZXggKSB7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgbWUuX2Jha0lFUmFuZ2UgPSBudWxsO1xyXG5cdCAgICAgICAgICAgIH0gKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmcmFtZSA9IGRvYyA9IG51bGw7XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICBTZWxlY3Rpb24ucHJvdG90eXBlID0ge1xyXG5cclxuXHQgICAgICAgIHJhbmdlSW5Cb2R5IDogZnVuY3Rpb24ocm5nLHR4dFJhbmdlKXtcclxuXHQgICAgICAgICAgICB2YXIgbm9kZSA9IGJyb3dzZXIuaWU5YmVsb3cgfHwgdHh0UmFuZ2UgPyBybmcuaXRlbSA/IHJuZy5pdGVtKCkgOiBybmcucGFyZW50RWxlbWVudCgpIDogcm5nLnN0YXJ0Q29udGFpbmVyO1xyXG5cclxuXHQgICAgICAgICAgICByZXR1cm4gbm9kZSA9PT0gdGhpcy5kb2N1bWVudC5ib2R5IHx8IGRvbVV0aWxzLmluRG9jKG5vZGUsdGhpcy5kb2N1bWVudCk7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6I635Y+W5Y6f55Sfc2VsZWNpdG9u5a+56LGhXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGdldE5hdGl2ZVxyXG5cdCAgICAgICAgICogQHJldHVybiB7IE9iamVjdCB9IOiOt+W+l3NlbGVjdGlvbuWvueixoVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5zZWxlY3Rpb24uZ2V0TmF0aXZlKCk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0TmF0aXZlOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgZG9jID0gdGhpcy5kb2N1bWVudDtcclxuXHQgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gIWRvYyA/IG51bGwgOiBicm93c2VyLmllOWJlbG93ID8gZG9jLnNlbGVjdGlvbiA6IGRvbVV0aWxzLmdldFdpbmRvdyggZG9jICkuZ2V0U2VsZWN0aW9uKCk7XHJcblx0ICAgICAgICAgICAgfSBjYXRjaCAoIGUgKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDojrflvpdpZVJhbmdlXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGdldElFUmFuZ2VcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBPYmplY3QgfSDov5Tlm55pZeWOn+eUn+eahFJhbmdlXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogZWRpdG9yLnNlbGVjdGlvbi5nZXRJRVJhbmdlKCk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0SUVSYW5nZTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGllUmFuZ2UgPSBfZ2V0SUVSYW5nZSggdGhpcyApO1xyXG5cdCAgICAgICAgICAgIGlmICggIWllUmFuZ2UgKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICggdGhpcy5fYmFrSUVSYW5nZSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYWtJRVJhbmdlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiBpZVJhbmdlO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOe8k+WtmOW9k+WJjemAieWMuueahHJhbmdl5ZKM6YCJ5Yy655qE5byA5aeL6IqC54K5XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGNhY2hlXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGNhY2hlOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB0aGlzLmNsZWFyKCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5fY2FjaGVkUmFuZ2UgPSB0aGlzLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5fY2FjaGVkU3RhcnRFbGVtZW50ID0gdGhpcy5nZXRTdGFydCgpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuX2NhY2hlZFN0YXJ0RWxlbWVudFBhdGggPSB0aGlzLmdldFN0YXJ0RWxlbWVudFBhdGgoKTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDojrflj5bpgInljLrlvIDlp4vkvY3nva7nmoTniLboioLngrnliLBib2R5XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGdldFN0YXJ0RWxlbWVudFBhdGhcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBBcnJheSB9IOi/lOWbnueItuiKgueCuembhuWQiFxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5zZWxlY3Rpb24uZ2V0U3RhcnRFbGVtZW50UGF0aCgpO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGdldFN0YXJ0RWxlbWVudFBhdGg6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGlmICggdGhpcy5fY2FjaGVkU3RhcnRFbGVtZW50UGF0aCApIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZFN0YXJ0RWxlbWVudFBhdGg7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciBzdGFydCA9IHRoaXMuZ2V0U3RhcnQoKTtcclxuXHQgICAgICAgICAgICBpZiAoIHN0YXJ0ICkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZG9tVXRpbHMuZmluZFBhcmVudHMoIHN0YXJ0LCB0cnVlLCBudWxsLCB0cnVlIClcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOa4heepuue8k+WtmFxyXG5cdCAgICAgICAgICogQG1ldGhvZCBjbGVhclxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBjbGVhcjpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5fY2FjaGVkU3RhcnRFbGVtZW50UGF0aCA9IHRoaXMuX2NhY2hlZFJhbmdlID0gdGhpcy5fY2FjaGVkU3RhcnRFbGVtZW50ID0gbnVsbDtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDnvJbovpHlmajmmK/lkKblvpfliLDkuobpgInljLpcclxuXHQgICAgICAgICAqIEBtZXRob2QgaXNGb2N1c1xyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBpc0ZvY3VzOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICBpZihicm93c2VyLmllOWJlbG93KXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbmF0aXZlUmFuZ2UgPSBfZ2V0SUVSYW5nZSh0aGlzKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAhIShuYXRpdmVSYW5nZSAmJiB0aGlzLnJhbmdlSW5Cb2R5KG5hdGl2ZVJhbmdlKSk7XHJcblx0ICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5nZXROYXRpdmUoKS5yYW5nZUNvdW50O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSBjYXRjaCAoIGUgKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPlumAieWMuuWvueW6lOeahFJhbmdlXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGdldFJhbmdlXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgT2JqZWN0IH0g5b6X5YiwUmFuZ2Xlr7nosaFcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3Iuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0UmFuZ2U6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gb3B0aW16ZSggcmFuZ2UgKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IG1lLmRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZCxcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlZCA9IHJhbmdlLmNvbGxhcHNlZDtcclxuXHQgICAgICAgICAgICAgICAgd2hpbGUgKCBjaGlsZCAmJiBjaGlsZC5maXJzdENoaWxkICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoIGNoaWxkLCAwICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkLmZpcnN0Q2hpbGQ7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKCAhcmFuZ2Uuc3RhcnRDb250YWluZXIgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydCggbWUuZG9jdW1lbnQuYm9keSwgMCApXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKCBjb2xsYXBzZWQgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSggdHJ1ZSApO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICBpZiAoIG1lLl9jYWNoZWRSYW5nZSAhPSBudWxsICkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkUmFuZ2U7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciByYW5nZSA9IG5ldyBiYWlkdS5lZGl0b3IuZG9tLlJhbmdlKCBtZS5kb2N1bWVudCApO1xyXG5cclxuXHQgICAgICAgICAgICBpZiAoIGJyb3dzZXIuaWU5YmVsb3cgKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBuYXRpdmVSYW5nZSA9IG1lLmdldElFUmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCBuYXRpdmVSYW5nZSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8v5aSH5Lu955qEX2Jha0lFUmFuZ2Xlj6/og73lt7Lnu4/lrp7mlYjkuobvvIxkb23moJHlj5HnlJ/kuoblj5jljJbmr5TlpoLku47mupDnoIHmqKHlvI/liIflm57mnaXvvIzmiYDku6V0cnnkuIDkuIvvvIzlrp7mlYjlsLHmlL7liLBib2R55byA5aeL5L2N572uXHJcblx0ICAgICAgICAgICAgICAgICAgICB0cnl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtSUVSYW5nZVRvUmFuZ2UoIG5hdGl2ZVJhbmdlLCByYW5nZSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9wdGltemUoIHJhbmdlICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgb3B0aW16ZSggcmFuZ2UgKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBzZWwgPSBtZS5nZXROYXRpdmUoKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCBzZWwgJiYgc2VsLnJhbmdlQ291bnQgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3RSYW5nZSA9IHNlbC5nZXRSYW5nZUF0KCAwICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdFJhbmdlID0gc2VsLmdldFJhbmdlQXQoIHNlbC5yYW5nZUNvdW50IC0gMSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoIGZpcnN0UmFuZ2Uuc3RhcnRDb250YWluZXIsIGZpcnN0UmFuZ2Uuc3RhcnRPZmZzZXQgKS5zZXRFbmQoIGxhc3RSYW5nZS5lbmRDb250YWluZXIsIGxhc3RSYW5nZS5lbmRPZmZzZXQgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICggcmFuZ2UuY29sbGFwc2VkICYmIGRvbVV0aWxzLmlzQm9keSggcmFuZ2Uuc3RhcnRDb250YWluZXIgKSAmJiAhcmFuZ2Uuc3RhcnRPZmZzZXQgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW16ZSggcmFuZ2UgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8vdHJhY2U6MTczNCDmnInlj6/og73lt7Lnu4/kuI3lnKhkb23moJHkuIrkuobvvIzmoIfor4bnmoToioLngrlcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5fYmFrUmFuZ2UgJiYgZG9tVXRpbHMuaW5Eb2MoIHRoaXMuX2Jha1JhbmdlLnN0YXJ0Q29udGFpbmVyLCB0aGlzLmRvY3VtZW50ICkgKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmFrUmFuZ2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBvcHRpbXplKCByYW5nZSApO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYWtSYW5nZSA9IHJhbmdlO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPluW8gOWni+WFg+e0oO+8jOeUqOS6jueKtuaAgeWPjeWwhFxyXG5cdCAgICAgICAgICogQG1ldGhvZCBnZXRTdGFydFxyXG5cdCAgICAgICAgICogQHJldHVybiB7IEVsZW1lbnQgfSDojrflvpflvIDlp4vlhYPntKBcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3Iuc2VsZWN0aW9uLmdldFN0YXJ0KCk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0U3RhcnQ6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGlmICggdGhpcy5fY2FjaGVkU3RhcnRFbGVtZW50ICkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkU3RhcnRFbGVtZW50O1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2UgPSBicm93c2VyLmllOWJlbG93ID8gdGhpcy5nZXRJRVJhbmdlKCkgOiB0aGlzLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgIHRtcFJhbmdlLFxyXG5cdCAgICAgICAgICAgICAgICBzdGFydCwgdG1wLCBwYXJlbnQ7XHJcblx0ICAgICAgICAgICAgaWYgKCBicm93c2VyLmllOWJlbG93ICkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoICFyYW5nZSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8vdG9kbyDnu5nnrKzkuIDkuKrlgLzlj6/og73kvJrmnInpl67pophcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmJvZHkuZmlyc3RDaGlsZDtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAvL2NvbnRyb2zlhYPntKBcclxuXHQgICAgICAgICAgICAgICAgaWYgKCByYW5nZS5pdGVtICl7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2UuaXRlbSggMCApO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHRtcFJhbmdlID0gcmFuZ2UuZHVwbGljYXRlKCk7XHJcblx0ICAgICAgICAgICAgICAgIC8v5L+u5q2jaWXkuIs8Yj54PC9iPlt4eF0g6Zet5ZCI5ZCOIDxiPnh8PC9iPnh4XHJcblx0ICAgICAgICAgICAgICAgIHRtcFJhbmdlLnRleHQubGVuZ3RoID4gMCAmJiB0bXBSYW5nZS5tb3ZlU3RhcnQoICdjaGFyYWN0ZXInLCAxICk7XHJcblx0ICAgICAgICAgICAgICAgIHRtcFJhbmdlLmNvbGxhcHNlKCAxICk7XHJcblx0ICAgICAgICAgICAgICAgIHN0YXJ0ID0gdG1wUmFuZ2UucGFyZW50RWxlbWVudCgpO1xyXG5cdCAgICAgICAgICAgICAgICBwYXJlbnQgPSB0bXAgPSByYW5nZS5wYXJlbnRFbGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlICggdG1wID0gdG1wLnBhcmVudE5vZGUgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIHRtcCA9PSBzdGFydCApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHBhcmVudDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLnNocmlua0JvdW5kYXJ5KCk7XHJcblx0ICAgICAgICAgICAgICAgIHN0YXJ0ID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgICAgIGlmICggc3RhcnQubm9kZVR5cGUgPT0gMSAmJiBzdGFydC5oYXNDaGlsZE5vZGVzKCkgKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQuY2hpbGROb2Rlc1tNYXRoLm1pbiggc3RhcnQuY2hpbGROb2Rlcy5sZW5ndGggLSAxLCByYW5nZS5zdGFydE9mZnNldCApXTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIHN0YXJ0Lm5vZGVUeXBlID09IDMgKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGFydC5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiBzdGFydDtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlvpfliLDpgInljLrkuK3nmoTmlofmnKxcclxuXHQgICAgICAgICAqIEBtZXRob2QgZ2V0VGV4dFxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFN0cmluZyB9IOmAieWMuuS4reWMheWQq+eahOaWh+acrFxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5zZWxlY3Rpb24uZ2V0VGV4dCgpO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGdldFRleHQ6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBuYXRpdmVTZWwsIG5hdGl2ZVJhbmdlO1xyXG5cdCAgICAgICAgICAgIGlmICggdGhpcy5pc0ZvY3VzKCkgJiYgKG5hdGl2ZVNlbCA9IHRoaXMuZ2V0TmF0aXZlKCkpICkge1xyXG5cdCAgICAgICAgICAgICAgICBuYXRpdmVSYW5nZSA9IGJyb3dzZXIuaWU5YmVsb3cgPyBuYXRpdmVTZWwuY3JlYXRlUmFuZ2UoKSA6IG5hdGl2ZVNlbC5nZXRSYW5nZUF0KCAwICk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBicm93c2VyLmllOWJlbG93ID8gbmF0aXZlUmFuZ2UudGV4dCA6IG5hdGl2ZVJhbmdlLnRvU3RyaW5nKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiAnJztcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmuIXpmaTpgInljLpcclxuXHQgICAgICAgICAqIEBtZXRob2QgY2xlYXJSYW5nZVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5zZWxlY3Rpb24uY2xlYXJSYW5nZSgpO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGNsZWFyUmFuZ2UgOiBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgIHRoaXMuZ2V0TmF0aXZlKClbYnJvd3Nlci5pZTliZWxvdyA/ICdlbXB0eScgOiAncmVtb3ZlQWxsUmFuZ2VzJ10oKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHR9KSgpO1xyXG5cclxuXHQvLyBjb3JlL0VkaXRvci5qc1xyXG5cdC8qKlxyXG5cdCAqIOe8lui+keWZqOS4u+exu++8jOWMheWQq+e8lui+keWZqOaPkOS+m+eahOWkp+mDqOWIhuWFrOeUqOaOpeWPo1xyXG5cdCAqIEBmaWxlXHJcblx0ICogQG1vZHVsZSBVRVxyXG5cdCAqIEBjbGFzcyBFZGl0b3JcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiBVRWRpdG9y5YWs55So56m66Ze077yMVUVkaXRvcuaJgOacieeahOWKn+iDvemDveaMgui9veWcqOivpeepuumXtOS4i1xyXG5cdCAqIEB1bmZpbGVcclxuXHQgKiBAbW9kdWxlIFVFXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIFVFZGl0b3LnmoTmoLjlv4PnsbvvvIzkuLrnlKjmiLfmj5DkvpvkuI7nvJbovpHlmajkuqTkupLnmoTmjqXlj6PjgIJcclxuXHQgKiBAdW5maWxlXHJcblx0ICogQG1vZHVsZSBVRVxyXG5cdCAqIEBjbGFzcyBFZGl0b3JcclxuXHQgKi9cclxuXHJcblx0KGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdmFyIHVpZCA9IDAsIF9zZWxlY3Rpb25DaGFuZ2VUaW1lcjtcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDojrflj5bnvJbovpHlmajnmoRodG1s5YaF5a6577yM6LWL5YC85Yiw57yW6L6R5Zmo5omA5Zyo6KGo5Y2V55qEdGV4dGFyZWHmlofmnKzln5/ph4zpnaJcclxuXHQgICAgICogQHByaXZhdGVcclxuXHQgICAgICogQG1ldGhvZCBzZXRWYWx1ZVxyXG5cdCAgICAgKiBAcGFyYW0geyBVRS5FZGl0b3IgfSBlZGl0b3Ig57yW6L6R5Zmo5LqL5L6LXHJcblx0ICAgICAqL1xyXG5cdCAgICBmdW5jdGlvbiBzZXRWYWx1ZShmb3JtLCBlZGl0b3IpIHtcclxuXHQgICAgICAgIHZhciB0ZXh0YXJlYTtcclxuXHQgICAgICAgIGlmIChlZGl0b3IudGV4dGFyZWEpIHtcclxuXHQgICAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZWRpdG9yLnRleHRhcmVhKSkge1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdGksIHRpcyA9IGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKGZvcm0sICd0ZXh0YXJlYScpOyB0aSA9IHRpc1tpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRpLmlkID09ICd1ZWRpdG9yX3RleHRhcmVhXycgKyBlZGl0b3Iub3B0aW9ucy50ZXh0YXJlYSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRleHRhcmVhID0gdGk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICB0ZXh0YXJlYSA9IGVkaXRvci50ZXh0YXJlYTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoIXRleHRhcmVhKSB7XHJcblx0ICAgICAgICAgICAgZm9ybS5hcHBlbmRDaGlsZCh0ZXh0YXJlYSA9IGRvbVV0aWxzLmNyZWF0ZUVsZW1lbnQoZG9jdW1lbnQsICd0ZXh0YXJlYScsIHtcclxuXHQgICAgICAgICAgICAgICAgJ25hbWUnOiBlZGl0b3Iub3B0aW9ucy50ZXh0YXJlYSxcclxuXHQgICAgICAgICAgICAgICAgJ2lkJzogJ3VlZGl0b3JfdGV4dGFyZWFfJyArIGVkaXRvci5vcHRpb25zLnRleHRhcmVhLFxyXG5cdCAgICAgICAgICAgICAgICAnc3R5bGUnOiBcImRpc3BsYXk6bm9uZVwiXHJcblx0ICAgICAgICAgICAgfSkpO1xyXG5cdCAgICAgICAgICAgIC8v5LiN6KaB5Lqn55Sf5aSa5LiqdGV4dGFyZWFcclxuXHQgICAgICAgICAgICBlZGl0b3IudGV4dGFyZWEgPSB0ZXh0YXJlYTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgICF0ZXh0YXJlYS5nZXRBdHRyaWJ1dGUoJ25hbWUnKSAmJiB0ZXh0YXJlYS5zZXRBdHRyaWJ1dGUoJ25hbWUnLCBlZGl0b3Iub3B0aW9ucy50ZXh0YXJlYSApO1xyXG5cdCAgICAgICAgdGV4dGFyZWEudmFsdWUgPSBlZGl0b3IuaGFzQ29udGVudHMoKSA/XHJcblx0ICAgICAgICAgICAgKGVkaXRvci5vcHRpb25zLmFsbEh0bWxFbmFibGVkID8gZWRpdG9yLmdldEFsbEh0bWwoKSA6IGVkaXRvci5nZXRDb250ZW50KG51bGwsIG51bGwsIHRydWUpKSA6XHJcblx0ICAgICAgICAgICAgJydcclxuXHQgICAgfVxyXG5cdCAgICBmdW5jdGlvbiBsb2FkUGx1Z2lucyhtZSl7XHJcblx0ICAgICAgICAvL+WIneWni+WMluaPkuS7tlxyXG5cdCAgICAgICAgZm9yICh2YXIgcGkgaW4gVUUucGx1Z2lucykge1xyXG5cdCAgICAgICAgICAgIFVFLnBsdWdpbnNbcGldLmNhbGwobWUpO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgfVxyXG5cdCAgICBmdW5jdGlvbiBjaGVja0N1ckxhbmcoSTE4Til7XHJcblx0ICAgICAgICBmb3IodmFyIGxhbmcgaW4gSTE4Til7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGxhbmdcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gbGFuZ1JlYWRpZWQobWUpe1xyXG5cdCAgICAgICAgbWUubGFuZ0lzUmVhZHkgPSB0cnVlO1xyXG5cclxuXHQgICAgICAgIG1lLmZpcmVFdmVudChcImxhbmdSZWFkeVwiKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOe8lui+keWZqOWHhuWkh+Wwsee7quWQjuS8muinpuWPkeivpeS6i+S7tlxyXG5cdCAgICAgKiBAbW9kdWxlIFVFXHJcblx0ICAgICAqIEBjbGFzcyBFZGl0b3JcclxuXHQgICAgICogQGV2ZW50IHJlYWR5XHJcblx0ICAgICAqIEByZW1pbmQgcmVuZGVy5pa55rOV5omn6KGM5a6M5oiQ5LmL5ZCOLOS8muinpuWPkeivpeS6i+S7tlxyXG5cdCAgICAgKiBAcmVtaW5kXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogZWRpdG9yLmFkZExpc3RlbmVyKCAncmVhZHknLCBmdW5jdGlvbiggZWRpdG9yICkge1xyXG5cdCAgICAgKiAgICAgZWRpdG9yLmV4ZWNDb21tYW5kKCAnZm9jdXMnICk7IC8v57yW6L6R5Zmo5a625Zyo5a6M5oiQ5ZCO77yM6K6p57yW6L6R5Zmo5ou/5Yiw54Sm54K5XHJcblx0ICAgICAqIH0gKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICAvKipcclxuXHQgICAgICog5omn6KGMZGVzdHJveeaWueazlSzkvJrop6blj5Hor6Xkuovku7ZcclxuXHQgICAgICogQG1vZHVsZSBVRVxyXG5cdCAgICAgKiBAY2xhc3MgRWRpdG9yXHJcblx0ICAgICAqIEBldmVudCBkZXN0cm95XHJcblx0ICAgICAqIEBzZWUgVUUuRWRpdG9yOmRlc3Ryb3koKVxyXG5cdCAgICAgKi9cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOaJp+ihjHJlc2V05pa55rOVLOS8muinpuWPkeivpeS6i+S7tlxyXG5cdCAgICAgKiBAbW9kdWxlIFVFXHJcblx0ICAgICAqIEBjbGFzcyBFZGl0b3JcclxuXHQgICAgICogQGV2ZW50IHJlc2V0XHJcblx0ICAgICAqIEBzZWUgVUUuRWRpdG9yOnJlc2V0KClcclxuXHQgICAgICovXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmiafooYxmb2N1c+aWueazlSzkvJrop6blj5Hor6Xkuovku7ZcclxuXHQgICAgICogQG1vZHVsZSBVRVxyXG5cdCAgICAgKiBAY2xhc3MgRWRpdG9yXHJcblx0ICAgICAqIEBldmVudCBmb2N1c1xyXG5cdCAgICAgKiBAc2VlIFVFLkVkaXRvcjpmb2N1cyhCb29sZWFuKVxyXG5cdCAgICAgKi9cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOivreiogOWKoOi9veWujOaIkOS8muinpuWPkeivpeS6i+S7tlxyXG5cdCAgICAgKiBAbW9kdWxlIFVFXHJcblx0ICAgICAqIEBjbGFzcyBFZGl0b3JcclxuXHQgICAgICogQGV2ZW50IGxhbmdSZWFkeVxyXG5cdCAgICAgKi9cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOi/kOihjOWRveS7pOS5i+WQjuS8muinpuWPkeivpeWRveS7pFxyXG5cdCAgICAgKiBAbW9kdWxlIFVFXHJcblx0ICAgICAqIEBjbGFzcyBFZGl0b3JcclxuXHQgICAgICogQGV2ZW50IGJlZm9yZUV4ZWNDb21tYW5kXHJcblx0ICAgICAqL1xyXG5cdCAgICAvKipcclxuXHQgICAgICog6L+Q6KGM5ZG95Luk5LmL5ZCO5Lya6Kem5Y+R6K+l5ZG95LukXHJcblx0ICAgICAqIEBtb2R1bGUgVUVcclxuXHQgICAgICogQGNsYXNzIEVkaXRvclxyXG5cdCAgICAgKiBAZXZlbnQgYWZ0ZXJFeGVjQ29tbWFuZFxyXG5cdCAgICAgKi9cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOi/kOihjOWRveS7pOS5i+WJjeS8muinpuWPkeivpeWRveS7pFxyXG5cdCAgICAgKiBAbW9kdWxlIFVFXHJcblx0ICAgICAqIEBjbGFzcyBFZGl0b3JcclxuXHQgICAgICogQGV2ZW50IGZpcnN0QmVmb3JlRXhlY0NvbW1hbmRcclxuXHQgICAgICovXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDlnKhnZXRDb250ZW505pa55rOV5omn6KGM5LmL5YmN5Lya6Kem5Y+R6K+l5LqL5Lu2XHJcblx0ICAgICAqIEBtb2R1bGUgVUVcclxuXHQgICAgICogQGNsYXNzIEVkaXRvclxyXG5cdCAgICAgKiBAZXZlbnQgYmVmb3JlR2V0Q29udGVudFxyXG5cdCAgICAgKiBAc2VlIFVFLkVkaXRvcjpnZXRDb250ZW50KClcclxuXHQgICAgICovXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDlnKhnZXRDb250ZW505pa55rOV5omn6KGM5LmL5ZCO5Lya6Kem5Y+R6K+l5LqL5Lu2XHJcblx0ICAgICAqIEBtb2R1bGUgVUVcclxuXHQgICAgICogQGNsYXNzIEVkaXRvclxyXG5cdCAgICAgKiBAZXZlbnQgYWZ0ZXJHZXRDb250ZW50XHJcblx0ICAgICAqIEBzZWUgVUUuRWRpdG9yOmdldENvbnRlbnQoKVxyXG5cdCAgICAgKi9cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWcqGdldEFsbEh0bWzmlrnms5XmiafooYzml7bkvJrop6blj5Hor6Xkuovku7ZcclxuXHQgICAgICogQG1vZHVsZSBVRVxyXG5cdCAgICAgKiBAY2xhc3MgRWRpdG9yXHJcblx0ICAgICAqIEBldmVudCBnZXRBbGxIdG1sXHJcblx0ICAgICAqIEBzZWUgVUUuRWRpdG9yOmdldEFsbEh0bWwoKVxyXG5cdCAgICAgKi9cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWcqHNldENvbnRlbnTmlrnms5XmiafooYzkuYvliY3kvJrop6blj5Hor6Xkuovku7ZcclxuXHQgICAgICogQG1vZHVsZSBVRVxyXG5cdCAgICAgKiBAY2xhc3MgRWRpdG9yXHJcblx0ICAgICAqIEBldmVudCBiZWZvcmVTZXRDb250ZW50XHJcblx0ICAgICAqIEBzZWUgVUUuRWRpdG9yOnNldENvbnRlbnQoU3RyaW5nKVxyXG5cdCAgICAgKi9cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWcqHNldENvbnRlbnTmlrnms5XmiafooYzkuYvlkI7kvJrop6blj5Hor6Xkuovku7ZcclxuXHQgICAgICogQG1vZHVsZSBVRVxyXG5cdCAgICAgKiBAY2xhc3MgRWRpdG9yXHJcblx0ICAgICAqIEBldmVudCBhZnRlclNldENvbnRlbnRcclxuXHQgICAgICogQHNlZSBVRS5FZGl0b3I6c2V0Q29udGVudChTdHJpbmcpXHJcblx0ICAgICAqL1xyXG5cdCAgICAvKipcclxuXHQgICAgICog5q+P5b2T57yW6L6R5Zmo5YaF6YOo6YCJ5Yy65Y+R55Sf5pS55Y+Y5pe277yM5bCG6Kem5Y+R6K+l5LqL5Lu2XHJcblx0ICAgICAqIEBldmVudCBzZWxlY3Rpb25jaGFuZ2VcclxuXHQgICAgICogQHdhcm5pbmcg6K+l5LqL5Lu255qE6Kem5Y+R6Z2e5bi46aKR57mB77yM5LiN5bu66K6u5Zyo6K+l5LqL5Lu255qE5aSE55CG6L+H56iL5Lit5YGa6YeN6YeP57qn55qE5aSE55CGXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogZWRpdG9yLmFkZExpc3RlbmVyKCAnc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24oIGVkaXRvciApIHtcclxuXHQgICAgICogICAgIGNvbnNvbGUubG9nKCfpgInljLrlj5HnlJ/mlLnlj5gnKTtcclxuXHQgICAgICogfVxyXG5cdCAgICAgKi9cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWcqOaJgOaciXNlbGVjdGlvbmNoYW5nZeeahOebkeWQrOWHveaVsOaJp+ihjOS5i+WJje+8jOS8muinpuWPkeivpeS6i+S7tlxyXG5cdCAgICAgKiBAbW9kdWxlIFVFXHJcblx0ICAgICAqIEBjbGFzcyBFZGl0b3JcclxuXHQgICAgICogQGV2ZW50IGJlZm9yZVNlbGVjdGlvbkNoYW5nZVxyXG5cdCAgICAgKiBAc2VlIFVFLkVkaXRvcjpzZWxlY3Rpb25jaGFuZ2VcclxuXHQgICAgICovXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDlnKjmiYDmnIlzZWxlY3Rpb25jaGFuZ2XnmoTnm5HlkKzlh73mlbDmiafooYzlrozkuYvlkI7vvIzkvJrop6blj5Hor6Xkuovku7ZcclxuXHQgICAgICogQG1vZHVsZSBVRVxyXG5cdCAgICAgKiBAY2xhc3MgRWRpdG9yXHJcblx0ICAgICAqIEBldmVudCBhZnRlclNlbGVjdGlvbkNoYW5nZVxyXG5cdCAgICAgKiBAc2VlIFVFLkVkaXRvcjpzZWxlY3Rpb25jaGFuZ2VcclxuXHQgICAgICovXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDnvJbovpHlmajlhoXlrrnlj5HnlJ/mlLnlj5jml7bkvJrop6blj5Hor6Xkuovku7ZcclxuXHQgICAgICogQG1vZHVsZSBVRVxyXG5cdCAgICAgKiBAY2xhc3MgRWRpdG9yXHJcblx0ICAgICAqIEBldmVudCBjb250ZW50Q2hhbmdlXHJcblx0ICAgICAqL1xyXG5cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDku6Xpu5jorqTlj4LmlbDmnoTlu7rkuIDkuKrnvJbovpHlmajlrp7kvotcclxuXHQgICAgICogQGNvbnN0cnVjdG9yXHJcblx0ICAgICAqIEByZW1pbmQg6YCa6L+HIOaUueaehOmAoOaWueazleWunuS+i+WMlueahOe8lui+keWZqCzkuI3luKZ1aeWxgi7pnIDopoFyZW5kZXLliLDkuIDkuKrlrrnlmags57yW6L6R5Zmo5a6e5L6L5omN6IO95q2j5bi45riy5p+T5Yiw6aG16Z2iXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogdmFyIGVkaXRvciA9IG5ldyBVRS5FZGl0b3IoKTtcclxuXHQgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCdibG9kJyk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKiBAc2VlIFVFLkNvbmZpZ1xyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDku6Xnu5nlrprnmoTlj4LmlbDpm4blkIjliJvlu7rkuIDkuKrnvJbovpHlmajlrp7kvovvvIzlr7nkuo7mnKrmjIflrprnmoTlj4LmlbDvvIzlsIblupTnlKjpu5jorqTlj4LmlbDjgIJcclxuXHQgICAgICogQGNvbnN0cnVjdG9yXHJcblx0ICAgICAqIEByZW1pbmQg6YCa6L+HIOaUueaehOmAoOaWueazleWunuS+i+WMlueahOe8lui+keWZqCzkuI3luKZ1aeWxgi7pnIDopoFyZW5kZXLliLDkuIDkuKrlrrnlmags57yW6L6R5Zmo5a6e5L6L5omN6IO95q2j5bi45riy5p+T5Yiw6aG16Z2iXHJcblx0ICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IHNldHRpbmcg5Yib5bu657yW6L6R5Zmo55qE5Y+C5pWwXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogdmFyIGVkaXRvciA9IG5ldyBVRS5FZGl0b3IoKTtcclxuXHQgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCdibG9kJyk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKiBAc2VlIFVFLkNvbmZpZ1xyXG5cdCAgICAgKi9cclxuXHQgICAgdmFyIEVkaXRvciA9IFVFLkVkaXRvciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblx0ICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgbWUudWlkID0gdWlkKys7XHJcblx0ICAgICAgICBFdmVudEJhc2UuY2FsbChtZSk7XHJcblx0ICAgICAgICBtZS5jb21tYW5kcyA9IHt9O1xyXG5cdCAgICAgICAgbWUub3B0aW9ucyA9IHV0aWxzLmV4dGVuZCh1dGlscy5jbG9uZShvcHRpb25zIHx8IHt9KSwgVUVESVRPUl9DT05GSUcsIHRydWUpO1xyXG5cdCAgICAgICAgbWUuc2hvcnRjdXRrZXlzID0ge307XHJcblx0ICAgICAgICBtZS5pbnB1dFJ1bGVzID0gW107XHJcblx0ICAgICAgICBtZS5vdXRwdXRSdWxlcyA9IFtdO1xyXG5cdCAgICAgICAgLy/orr7nva7pu5jorqTnmoTluLjnlKjlsZ7mgKdcclxuXHQgICAgICAgIG1lLnNldE9wdChFZGl0b3IuZGVmYXVsdE9wdGlvbnMobWUpKTtcclxuXHJcblx0ICAgICAgICAvKiDlsJ3or5XlvILmraXliqDovb3lkI7lj7DphY3nva4gKi9cclxuXHQgICAgICAgIG1lLmxvYWRTZXJ2ZXJDb25maWcoKTtcclxuXHQgICAgICAgIGlmKCF1dGlscy5pc0VtcHR5T2JqZWN0KFVFLkkxOE4pKXtcclxuXHQgICAgICAgICAgICAvL+S/ruaUuem7mOiupOeahOivreiogOexu+Wei1xyXG5cdCAgICAgICAgICAgIG1lLm9wdGlvbnMubGFuZyA9IENvb2tpZXMuZ2V0Q29vayhcIlByZWZlcl9MYW5nXCIpPT1cInpoX0NOXCI/XCJ6aC1jblwiOlwiZW5cIjtcclxuXHQgICAgICAgICAgICBVRS5wbHVnaW4ubG9hZChtZSk7XHJcblx0ICAgICAgICAgICAgbGFuZ1JlYWRpZWQobWUpO1xyXG5cclxuXHQgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgIHV0aWxzLmxvYWRGaWxlKGRvY3VtZW50LCB7XHJcblx0ICAgICAgICAgICAgICAgIHNyYzogbWUub3B0aW9ucy5sYW5nUGF0aCArIG1lLm9wdGlvbnMubGFuZyArIFwiL1wiICsgbWUub3B0aW9ucy5sYW5nICsgXCIuanNcIixcclxuXHQgICAgICAgICAgICAgICAgdGFnOiBcInNjcmlwdFwiLFxyXG5cdCAgICAgICAgICAgICAgICB0eXBlOiBcInRleHQvamF2YXNjcmlwdFwiLFxyXG5cdCAgICAgICAgICAgICAgICBkZWZlcjogXCJkZWZlclwiXHJcblx0ICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICBVRS5wbHVnaW4ubG9hZChtZSk7XHJcblx0ICAgICAgICAgICAgICAgIGxhbmdSZWFkaWVkKG1lKTtcclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBVRS5pbnN0YW50c1sndWVkaXRvckluc3RhbnQnICsgbWUudWlkXSA9IG1lO1xyXG5cdCAgICB9O1xyXG5cdCAgICBFZGl0b3IucHJvdG90eXBlID0ge1xyXG5cdCAgICAgICAgIHJlZ2lzdGVyQ29tbWFuZCA6IGZ1bmN0aW9uKG5hbWUsb2JqKXtcclxuXHQgICAgICAgICAgICB0aGlzLmNvbW1hbmRzW25hbWVdID0gb2JqO1xyXG5cdCAgICAgICAgIH0sXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOe8lui+keWZqOWvueWkluaPkOS+m+eahOebkeWQrHJlYWR55LqL5Lu255qE5o6l5Y+j77yMIOmAmui/h+iwg+eUqOivpeaWueazle+8jOi+vuWIsOeahOaViOaenOS4juebkeWQrHJlYWR55LqL5Lu25piv5LiA6Ie055qEXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHJlYWR5XHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZuIOe8lui+keWZqHJlYWR55LmL5ZCO5omA5omn6KGM55qE5Zue6LCDLCDlpoLmnpzlnKjms6jlhozkuovku7bkuYvliY3nvJbovpHlmajlt7Lnu49yZWFkee+8jOWwhuS8mlxyXG5cdCAgICAgICAgICog56uL5Y2z6Kem5Y+R6K+l5Zue6LCD44CCXHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOmcgOimgeetieW+hee8lui+keWZqOWKoOi9veWujOaIkOWQjuaJjeiDveaJp+ihjOeahOS7o+eggSzlj6/ku6Xkvb/nlKjor6Xmlrnms5XkvKDlhaVcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3IucmVhZHkoIGZ1bmN0aW9uKCBlZGl0b3IgKSB7XHJcblx0ICAgICAgICAgKiAgICAgZWRpdG9yLnNldENvbnRlbnQoJ+WIneWni+WMluWujOavlScpO1xyXG5cdCAgICAgICAgICogfSApO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKiBAc2VlIFVFLkVkaXRvci5ldmVudDpyZWFkeVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICByZWFkeTogZnVuY3Rpb24gKGZuKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICBpZiAoZm4pIHtcclxuXHQgICAgICAgICAgICAgICAgbWUuaXNSZWFkeSA/IGZuLmFwcGx5KG1lKSA6IG1lLmFkZExpc3RlbmVyKCdyZWFkeScsIGZuKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6K+l5pa55rOV5piv5o+Q5L6b57uZ5o+S5Lu26YeM6Z2i5L2/55So77yM6K6+572u6YWN572u6aG56buY6K6k5YC8XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHNldE9wdFxyXG5cdCAgICAgICAgICogQHdhcm5pbmcg5LiJ5aSE6K6+572u6YWN572u6aG555qE5LyY5YWI57qnOiDlrp7kvovljJbml7bkvKDlhaXlj4LmlbAgPiBzZXRPcHQoKeiuvue9riA+IGNvbmZpZ+aWh+S7tumHjOiuvue9rlxyXG5cdCAgICAgICAgICogQHdhcm5pbmcg6K+l5pa55rOV5LuF5L6b57yW6L6R5Zmo5o+S5Lu25YaF6YOo5ZKM57yW6L6R5Zmo5Yid5aeL5YyW5pe26LCD55So77yM5YW25LuW5Zyw5pa55LiN6IO96LCD55So44CCXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBrZXkg57yW6L6R5Zmo55qE5Y+v5o6l5Y+X55qE6YCJ6aG55ZCN56ewXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyAqIH0gdmFsICDor6XpgInpobnlj6/mjqXlj5fnmoTlgLxcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3Iuc2V0T3B0KCAnaW5pdENvbnRlbnQnLCAn5qyi6L+O5L2/55So57yW6L6R5ZmoJyApO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOivpeaWueazleaYr+aPkOS+m+e7meaPkuS7tumHjOmdouS9v+eUqO+8jOS7pXtrZXk6dmFsdWV96ZuG5ZCI55qE5pa55byP6K6+572u5o+S5Lu25YaF55So5Yiw55qE6YWN572u6aG56buY6K6k5YC8XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHNldE9wdFxyXG5cdCAgICAgICAgICogQHdhcm5pbmcg5LiJ5aSE6K6+572u6YWN572u6aG555qE5LyY5YWI57qnOiDlrp7kvovljJbml7bkvKDlhaXlj4LmlbAgPiBzZXRPcHQoKeiuvue9riA+IGNvbmZpZ+aWh+S7tumHjOiuvue9rlxyXG5cdCAgICAgICAgICogQHdhcm5pbmcg6K+l5pa55rOV5LuF5L6b57yW6L6R5Zmo5o+S5Lu25YaF6YOo5ZKM57yW6L6R5Zmo5Yid5aeL5YyW5pe26LCD55So77yM5YW25LuW5Zyw5pa55LiN6IO96LCD55So44CCXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBPYmplY3QgfSBvcHRpb25zIOWwhuimgeiuvue9rueahOmAiemhueeahOmUruWAvOWvueWvueixoVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5zZXRPcHQoIHtcclxuXHQgICAgICAgICAqICAgICAnaW5pdENvbnRlbnQnOiAn5qyi6L+O5L2/55So57yW6L6R5ZmoJ1xyXG5cdCAgICAgICAgICogfSApO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHNldE9wdDogZnVuY3Rpb24gKGtleSwgdmFsKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG9iaiA9IHt9O1xyXG5cdCAgICAgICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhrZXkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIG9ialtrZXldID0gdmFsXHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgb2JqID0ga2V5O1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB1dGlscy5leHRlbmQodGhpcy5vcHRpb25zLCBvYmosIHRydWUpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldE9wdDpmdW5jdGlvbihrZXkpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNba2V5XVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6ZSA5q+B57yW6L6R5Zmo5a6e5L6L77yM5L2/55SodGV4dGFyZWHku6Pmm79cclxuXHQgICAgICAgICAqIEBtZXRob2QgZGVzdHJveVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5kZXN0cm95KCk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZGVzdHJveTogZnVuY3Rpb24gKCkge1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnZGVzdHJveScpO1xyXG5cdCAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBtZS5jb250YWluZXIucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICB2YXIgdGV4dGFyZWEgPSBtZS50ZXh0YXJlYTtcclxuXHQgICAgICAgICAgICBpZiAoIXRleHRhcmVhKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRleHRhcmVhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcclxuXHQgICAgICAgICAgICAgICAgY29udGFpbmVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRleHRhcmVhLCBjb250YWluZXIpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHRleHRhcmVhLnN0eWxlLmRpc3BsYXkgPSAnJ1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgdGV4dGFyZWEuc3R5bGUud2lkdGggPSBtZS5pZnJhbWUub2Zmc2V0V2lkdGggKyAncHgnO1xyXG5cdCAgICAgICAgICAgIHRleHRhcmVhLnN0eWxlLmhlaWdodCA9IG1lLmlmcmFtZS5vZmZzZXRIZWlnaHQgKyAncHgnO1xyXG5cdCAgICAgICAgICAgIHRleHRhcmVhLnZhbHVlID0gbWUuZ2V0Q29udGVudCgpO1xyXG5cdCAgICAgICAgICAgIHRleHRhcmVhLmlkID0gbWUua2V5O1xyXG5cdCAgICAgICAgICAgIGNvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcclxuXHQgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY29udGFpbmVyKTtcclxuXHQgICAgICAgICAgICB2YXIga2V5ID0gbWUua2V5O1xyXG5cdCAgICAgICAgICAgIC8vdHJhY2U6MjAwNFxyXG5cdCAgICAgICAgICAgIGZvciAodmFyIHAgaW4gbWUpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG1lLmhhc093blByb3BlcnR5KHApKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpc1twXTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBVRS5kZWxFZGl0b3Ioa2V5KTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmuLLmn5PnvJbovpHlmajnmoRET03liLDmjIflrprlrrnlmahcclxuXHQgICAgICAgICAqIEBtZXRob2QgcmVuZGVyXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjb250YWluZXJJZCDmjIflrprkuIDkuKrlrrnlmahJRFxyXG5cdCAgICAgICAgICogQHJlbWluZCDmiafooYzor6Xmlrnms5Us5Lya6Kem5Y+RcmVhZHnkuovku7ZcclxuXHQgICAgICAgICAqIEB3YXJuaW5nIOW/hemhu+S4lOWPquiDveiwg+eUqOS4gOasoVxyXG5cdCAgICAgICAgICovXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmuLLmn5PnvJbovpHlmajnmoRET03liLDmjIflrprlrrnlmahcclxuXHQgICAgICAgICAqIEBtZXRob2QgcmVuZGVyXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBFbGVtZW50IH0gY29udGFpbmVyRG9tIOebtOaOpeaMh+WumuWuueWZqOWvueixoVxyXG5cdCAgICAgICAgICogQHJlbWluZCDmiafooYzor6Xmlrnms5Us5Lya6Kem5Y+RcmVhZHnkuovku7ZcclxuXHQgICAgICAgICAqIEB3YXJuaW5nIOW/hemhu+S4lOWPquiDveiwg+eUqOS4gOasoVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICByZW5kZXI6IGZ1bmN0aW9uIChjb250YWluZXIpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICBvcHRpb25zID0gbWUub3B0aW9ucyxcclxuXHQgICAgICAgICAgICAgICAgZ2V0U3R5bGVWYWx1ZT1mdW5jdGlvbihhdHRyKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludChkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKGNvbnRhaW5lcixhdHRyKSk7XHJcblx0ICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgaWYgKHV0aWxzLmlzU3RyaW5nKGNvbnRhaW5lcikpIHtcclxuXHQgICAgICAgICAgICAgICAgY29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29udGFpbmVyKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKGNvbnRhaW5lcikge1xyXG5cdCAgICAgICAgICAgICAgICBpZihvcHRpb25zLmluaXRpYWxGcmFtZVdpZHRoKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMubWluRnJhbWVXaWR0aCA9IG9wdGlvbnMuaW5pdGlhbEZyYW1lV2lkdGhcclxuXHQgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm1pbkZyYW1lV2lkdGggPSBvcHRpb25zLmluaXRpYWxGcmFtZVdpZHRoID0gY29udGFpbmVyLm9mZnNldFdpZHRoO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmKG9wdGlvbnMuaW5pdGlhbEZyYW1lSGVpZ2h0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMubWluRnJhbWVIZWlnaHQgPSBvcHRpb25zLmluaXRpYWxGcmFtZUhlaWdodFxyXG5cdCAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuaW5pdGlhbEZyYW1lSGVpZ2h0ID0gb3B0aW9ucy5taW5GcmFtZUhlaWdodCA9IGNvbnRhaW5lci5vZmZzZXRIZWlnaHQ7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS53aWR0aCA9IC8lJC8udGVzdChvcHRpb25zLmluaXRpYWxGcmFtZVdpZHRoKSA/ICAnMTAwJScgOiBvcHRpb25zLmluaXRpYWxGcmFtZVdpZHRoLVxyXG5cdCAgICAgICAgICAgICAgICAgICAgZ2V0U3R5bGVWYWx1ZShcInBhZGRpbmctbGVmdFwiKS0gZ2V0U3R5bGVWYWx1ZShcInBhZGRpbmctcmlnaHRcIikgKydweCc7XHJcblx0ICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAvJSQvLnRlc3Qob3B0aW9ucy5pbml0aWFsRnJhbWVIZWlnaHQpID8gICcxMDAlJyA6IG9wdGlvbnMuaW5pdGlhbEZyYW1lSGVpZ2h0IC1cclxuXHQgICAgICAgICAgICAgICAgICAgIGdldFN0eWxlVmFsdWUoXCJwYWRkaW5nLXRvcFwiKS0gZ2V0U3R5bGVWYWx1ZShcInBhZGRpbmctYm90dG9tXCIpICsncHgnO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLnpJbmRleCA9IG9wdGlvbnMuekluZGV4O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdmFyIGh0bWwgPSAoIGllICYmIGJyb3dzZXIudmVyc2lvbiA8IDkgID8gJycgOiAnPCFET0NUWVBFIGh0bWw+JykgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgJzxodG1sIHhtbG5zPVxcJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcXCcgY2xhc3M9XFwndmlld1xcJyA+PGhlYWQ+JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAnPHN0eWxlIHR5cGU9XFwndGV4dC9jc3NcXCc+JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+iuvue9ruWbm+WRqOeahOeVmei+uVxyXG5cdCAgICAgICAgICAgICAgICAgICAgJy52aWV3e3BhZGRpbmc6MDt3b3JkLXdyYXA6YnJlYWstd29yZDtjdXJzb3I6dGV4dDtoZWlnaHQ6OTAlO31cXG4nICtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8v6K6+572u6buY6K6k5a2X5L2T5ZKM5a2X5Y+3XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL2ZvbnQtZmFtaWx55LiN6IO95ZGi6ZqP5L6/5pS577yM5Zyoc2FmYXJp5LiLZmlsbGNoYXLkvJrmnInop6PmnpDpl67pophcclxuXHQgICAgICAgICAgICAgICAgICAgICdib2R5e21hcmdpbjo4cHg7Zm9udC1mYW1pbHk6c2Fucy1zZXJpZjtmb250LXNpemU6MTZweDt9JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+iuvue9ruauteiQvemXtOi3nVxyXG5cdCAgICAgICAgICAgICAgICAgICAgJ3B7bWFyZ2luOjVweCAwO308L3N0eWxlPicgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKCBvcHRpb25zLmlmcmFtZUNzc1VybCA/ICc8bGluayByZWw9XFwnc3R5bGVzaGVldFxcJyB0eXBlPVxcJ3RleHQvY3NzXFwnIGhyZWY9XFwnJyArIHV0aWxzLnVuaHRtbChvcHRpb25zLmlmcmFtZUNzc1VybCkgKyAnXFwnLz4nIDogJycgKSArXHJcblx0ICAgICAgICAgICAgICAgICAgICAob3B0aW9ucy5pbml0aWFsU3R5bGUgPyAnPHN0eWxlPicgKyBvcHRpb25zLmluaXRpYWxTdHlsZSArICc8L3N0eWxlPicgOiAnJykgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgJzwvaGVhZD48Ym9keSBjbGFzcz1cXCd2aWV3XFwnID48L2JvZHk+JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAnPHNjcmlwdCB0eXBlPVxcJ3RleHQvamF2YXNjcmlwdFxcJyAnICsgKGllID8gJ2RlZmVyPVxcJ2RlZmVyXFwnJyA6ICcnICkgKycgaWQ9XFwnX2luaXRpYWxTY3JpcHRcXCc+JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAnc2V0VGltZW91dChmdW5jdGlvbigpe2VkaXRvciA9IHdpbmRvdy5wYXJlbnQuVUUuaW5zdGFudHNbXFwndWVkaXRvckluc3RhbnQnICsgbWUudWlkICsgJ1xcJ107ZWRpdG9yLl9zZXR1cChkb2N1bWVudCk7fSwwKTsnICtcclxuXHQgICAgICAgICAgICAgICAgICAgICd2YXIgX3RtcFNjcmlwdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFxcJ19pbml0aWFsU2NyaXB0XFwnKTtfdG1wU2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoX3RtcFNjcmlwdCk7PC9zY3JpcHQ+PC9odG1sPic7XHJcblx0ICAgICAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChkb21VdGlscy5jcmVhdGVFbGVtZW50KGRvY3VtZW50LCAnaWZyYW1lJywge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWQ6ICd1ZWRpdG9yXycgKyBtZS51aWQsXHJcblx0ICAgICAgICAgICAgICAgICAgICB3aWR0aDogXCIxMDAlXCIsXHJcblx0ICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiMTAwJVwiLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgZnJhbWVib3JkZXI6IFwiMFwiLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/lhYjms6jph4rmjonkuobvvIzliqDnmoTljp/lm6Dlv5jorrDkuobvvIzkvYblvIDlkK/kvJrnm7TmjqXlr7zoh7TlhajlsY/mqKHlvI/kuIvlhoXlrrnlpJrml7bkuI3kvJrlh7rnjrDmu5rliqjmnaFcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgc2Nyb2xsaW5nIDonbm8nLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3JjOiAnamF2YXNjcmlwdDp2b2lkKGZ1bmN0aW9uKCl7ZG9jdW1lbnQub3BlbigpOycgKyAob3B0aW9ucy5jdXN0b21Eb21haW4gJiYgZG9jdW1lbnQuZG9tYWluICE9IGxvY2F0aW9uLmhvc3RuYW1lID8gICdkb2N1bWVudC5kb21haW49XCInICsgZG9jdW1lbnQuZG9tYWluICsgJ1wiOycgOiAnJykgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICdkb2N1bWVudC53cml0ZShcIicgKyBodG1sICsgJ1wiKTtkb2N1bWVudC5jbG9zZSgpO30oKSknXHJcblx0ICAgICAgICAgICAgICAgIH0pKTtcclxuXHQgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcblx0ICAgICAgICAgICAgICAgIC8v6Kej5Yaz5aaC5p6c5piv57uZ5a6a55qE55m+5YiG5q+U77yM5Lya5a+86Ie06auY5bqm566X5LiN5a+555qE6Zeu6aKYXHJcblx0ICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKCAvJSQvLnRlc3Qob3B0aW9ucy5pbml0aWFsRnJhbWVXaWR0aCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMubWluRnJhbWVXaWR0aCA9IG9wdGlvbnMuaW5pdGlhbEZyYW1lV2lkdGggPSBjb250YWluZXIub2Zmc2V0V2lkdGg7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpzov5nph4znu5nlrprlrr3luqbvvIzkvJrlr7zoh7RpZeWcqOaLluWKqOeql+WPo+Wkp+Wwj+aXtu+8jOe8lui+keWMuuWfn+S4jemaj+edgOWPmOWMllxyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gb3B0aW9ucy5pbml0aWFsRnJhbWVXaWR0aCArICdweCc7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZigvJSQvLnRlc3Qob3B0aW9ucy5pbml0aWFsRnJhbWVIZWlnaHQpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm1pbkZyYW1lSGVpZ2h0ID0gb3B0aW9ucy5pbml0aWFsRnJhbWVIZWlnaHQgPSBjb250YWluZXIub2Zmc2V0SGVpZ2h0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBvcHRpb25zLmluaXRpYWxGcmFtZUhlaWdodCArICdweCc7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0pXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOe8lui+keWZqOWIneWni+WMllxyXG5cdCAgICAgICAgICogQG1ldGhvZCBfc2V0dXBcclxuXHQgICAgICAgICAqIEBwcml2YXRlXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBFbGVtZW50IH0gZG9jIOe8lui+keWZqElmcmFtZeS4reeahOaWh+aho+WvueixoVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBfc2V0dXA6IGZ1bmN0aW9uIChkb2MpIHtcclxuXHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgb3B0aW9ucyA9IG1lLm9wdGlvbnM7XHJcblx0ICAgICAgICAgICAgaWYgKGllKSB7XHJcblx0ICAgICAgICAgICAgICAgIGRvYy5ib2R5LmRpc2FibGVkID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgZG9jLmJvZHkuY29udGVudEVkaXRhYmxlID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgZG9jLmJvZHkuZGlzYWJsZWQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBkb2MuYm9keS5jb250ZW50RWRpdGFibGUgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBkb2MuYm9keS5zcGVsbGNoZWNrID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgbWUuZG9jdW1lbnQgPSBkb2M7XHJcblx0ICAgICAgICAgICAgbWUud2luZG93ID0gZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3c7XHJcblx0ICAgICAgICAgICAgbWUuaWZyYW1lID0gbWUud2luZG93LmZyYW1lRWxlbWVudDtcclxuXHQgICAgICAgICAgICBtZS5ib2R5ID0gZG9jLmJvZHk7XHJcblx0ICAgICAgICAgICAgbWUuc2VsZWN0aW9uID0gbmV3IGRvbS5TZWxlY3Rpb24oZG9jKTtcclxuXHQgICAgICAgICAgICAvL2dlY2tv5Yid5aeL5YyW5bCx6IO95b6X5YiwcmFuZ2Us5peg5rOV5Yik5pataXNGb2N1c+S6hlxyXG5cdCAgICAgICAgICAgIHZhciBnZWNrb1NlbDtcclxuXHQgICAgICAgICAgICBpZiAoYnJvd3Nlci5nZWNrbyAmJiAoZ2Vja29TZWwgPSB0aGlzLnNlbGVjdGlvbi5nZXROYXRpdmUoKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgZ2Vja29TZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMuX2luaXRFdmVudHMoKTtcclxuXHQgICAgICAgICAgICAvL+S4umZvcm3mj5DkuqTmj5DkvpvkuIDkuKrpmpDol4/nmoR0ZXh0YXJlYVxyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGZvcm0gPSB0aGlzLmlmcmFtZS5wYXJlbnROb2RlOyAhZG9tVXRpbHMuaXNCb2R5KGZvcm0pOyBmb3JtID0gZm9ybS5wYXJlbnROb2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChmb3JtLnRhZ05hbWUgPT0gJ0ZPUk0nKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5mb3JtID0gZm9ybTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKG1lLm9wdGlvbnMuYXV0b1N5bmNEYXRhKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5vbihtZS53aW5kb3csJ2JsdXInLGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFZhbHVlKGZvcm0sbWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMub24oZm9ybSwgJ3N1Ym1pdCcsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUodGhpcywgbWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKG9wdGlvbnMuaW5pdGlhbENvbnRlbnQpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXV0b0NsZWFyaW5pdGlhbENvbnRlbnQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBvbGRFeGVjQ29tbWFuZCA9IG1lLmV4ZWNDb21tYW5kO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdmaXJzdEJlZm9yZUV4ZWNDb21tYW5kJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9sZEV4ZWNDb21tYW5kLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldERlZmF1bHRDb250ZW50KG9wdGlvbnMuaW5pdGlhbENvbnRlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2VcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q29udGVudChvcHRpb25zLmluaXRpYWxDb250ZW50LCBmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAvL+e8lui+keWZqOS4jeiDveS4uuepuuWGheWuuVxyXG5cclxuXHQgICAgICAgICAgICBpZiAoZG9tVXRpbHMuaXNFbXB0eU5vZGUobWUuYm9keSkpIHtcclxuXHQgICAgICAgICAgICAgICAgbWUuYm9keS5pbm5lckhUTUwgPSAnPHA+JyArIChicm93c2VyLmllID8gJycgOiAnPGJyLz4nKSArICc8L3A+JztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgLy/lpoLmnpzopoHmsYJmb2N1cywg5bCx5oqK5YWJ5qCH5a6a5L2N5Yiw5YaF5a655byA5aeLXHJcblx0ICAgICAgICAgICAgaWYgKG9wdGlvbnMuZm9jdXMpIHtcclxuXHQgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5mb2N1cyhtZS5vcHRpb25zLmZvY3VzSW5FbmQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpzoh6rliqjmuIXpmaTlvIDnnYDvvIzlsLHkuI3pnIDopoHlgZpzZWxlY3Rpb25jaGFuZ2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICAhbWUub3B0aW9ucy5hdXRvQ2xlYXJpbml0aWFsQ29udGVudCAmJiBtZS5fc2VsZWN0aW9uQ2hhbmdlKCk7XHJcblx0ICAgICAgICAgICAgICAgIH0sIDApO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoIW1lLmNvbnRhaW5lcikge1xyXG5cdCAgICAgICAgICAgICAgICBtZS5jb250YWluZXIgPSB0aGlzLmlmcmFtZS5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAob3B0aW9ucy5mdWxsc2NyZWVuICYmIG1lLnVpKSB7XHJcblx0ICAgICAgICAgICAgICAgIG1lLnVpLnNldEZ1bGxTY3JlZW4odHJ1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICBtZS5kb2N1bWVudC5leGVjQ29tbWFuZCgnMkQtcG9zaXRpb24nLCBmYWxzZSwgZmFsc2UpO1xyXG5cdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICAgICAgbWUuZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2VuYWJsZUlubGluZVRhYmxlRWRpdGluZycsIGZhbHNlLCBmYWxzZSk7XHJcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICBtZS5kb2N1bWVudC5leGVjQ29tbWFuZCgnZW5hYmxlT2JqZWN0UmVzaXppbmcnLCBmYWxzZSwgZmFsc2UpO1xyXG5cdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIC8v5oyC5o6l5b+r5o236ZSuXHJcblx0ICAgICAgICAgICAgbWUuX2JpbmRzaG9ydGN1dEtleXMoKTtcclxuXHQgICAgICAgICAgICBtZS5pc1JlYWR5ID0gMTtcclxuXHQgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3JlYWR5Jyk7XHJcblx0ICAgICAgICAgICAgb3B0aW9ucy5vbnJlYWR5ICYmIG9wdGlvbnMub25yZWFkeS5jYWxsKG1lKTtcclxuXHQgICAgICAgICAgICBpZiAoIWJyb3dzZXIuaWU5YmVsb3cpIHtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMub24obWUud2luZG93LCBbJ2JsdXInLCAnZm9jdXMnXSwgZnVuY3Rpb24gKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8vY2hyb21l5LiL5Lya5Ye6546wYWx0K3RhYuWIh+aNouaXtu+8jOWvvOiHtOmAieWMuuS9jee9ruS4jeWvuVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PSAnYmx1cicpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5fYmFrUmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5fYmFrTmF0aXZlUmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0TmF0aXZlKCkuZ2V0UmFuZ2VBdCgwKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuc2VsZWN0aW9uLmdldE5hdGl2ZSgpLnJlbW92ZUFsbFJhbmdlcygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuX2Jha05hdGl2ZVJhbmdlID0gbnVsbDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5fYmFrUmFuZ2UgJiYgbWUuX2Jha1JhbmdlLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAvL3RyYWNlOjE1MTggZmYzLjZib2R55LiN5aSf5a+b77yM5Lya5a+86Ie054K55Ye756m655m95aSE5peg5rOV6I635b6X54Sm54K5XHJcblx0ICAgICAgICAgICAgaWYgKGJyb3dzZXIuZ2Vja28gJiYgYnJvd3Nlci52ZXJzaW9uIDw9IDEwOTAyKSB7XHJcblx0ICAgICAgICAgICAgICAgIC8v5L+u5aSNZmYzLjbliJ3lp4vljJbov5vmnaXvvIzkuI3og73ngrnlh7vojrflvpfnhKbngrlcclxuXHQgICAgICAgICAgICAgICAgbWUuYm9keS5jb250ZW50RWRpdGFibGUgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5ib2R5LmNvbnRlbnRFZGl0YWJsZSA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgIH0sIDEwMCk7XHJcblx0ICAgICAgICAgICAgICAgIHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmJvZHkuc3R5bGUuaGVpZ2h0ID0gbWUuaWZyYW1lLm9mZnNldEhlaWdodCAtIDIwICsgJ3B4J1xyXG5cdCAgICAgICAgICAgICAgICB9LCAxMDApXHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAhb3B0aW9ucy5pc1Nob3cgJiYgbWUuc2V0SGlkZSgpO1xyXG5cdCAgICAgICAgICAgIG9wdGlvbnMucmVhZG9ubHkgJiYgbWUuc2V0RGlzYWJsZWQoKTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlkIzmraXmlbDmja7liLDnvJbovpHlmajmiYDlnKjnmoRmb3JtXHJcblx0ICAgICAgICAgKiDku47nvJbovpHlmajnmoTlrrnlmajoioLngrnlkJHkuIrmn6Xmib5mb3Jt5YWD57Sg77yM6Iul5om+5Yiw77yM5bCx5ZCM5q2l57yW6L6R5YaF5a655Yiw5om+5Yiw55qEZm9ybemHjO+8jOS4uuaPkOS6pOaVsOaNruWBmuWHhuWkh++8jOS4u+imgeeUqOS6juaYr+aJi+WKqOaPkOS6pOeahOaDheWGtVxyXG5cdCAgICAgICAgICog5ZCO5Y+w5Y+W5b6X5pWw5o2u55qE6ZSu5YC877yM5L2/55So5L2g5a655Zmo5LiK55qEbmFtZeWxnuaAp++8jOWmguaenOayoeacieWwseS9v+eUqOWPguaVsOmHjOeahHRleHRhcmVh6aG5XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHN5bmNcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3Iuc3luYygpO1xyXG5cdCAgICAgICAgICogZm9ybS5zdW1iaXQoKTsgLy9mb3Jt5Y+Y6YeP5bey57uP5oyH5ZCR5LqGZm9ybeWFg+e0oFxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOagueaNruS8oOWFpeeahGZvcm1JZO+8jOWcqOmhtemdouS4iuafpeaJvuimgeWQjOatpeaVsOaNrueahOihqOWNle+8jOiLpeaJvuWIsO+8jOWwseWQjOatpee8lui+keWGheWuueWIsOaJvuWIsOeahGZvcm3ph4zvvIzkuLrmj5DkuqTmlbDmja7lgZrlh4blpIdcclxuXHQgICAgICAgICAqIOWQjuWPsOWPluW+l+aVsOaNrueahOmUruWAvO+8jOivpemUruWAvOm7mOiupOS9v+eUqOe7meWumueahOe8lui+keWZqOWuueWZqOeahG5hbWXlsZ7mgKfvvIzlpoLmnpzmsqHmnIluYW1l5bGe5oCn5YiZ5L2/55So5Y+C5pWw6aG56YeM57uZ5a6a55qE4oCcdGV4dGFyZWHigJ3poblcclxuXHQgICAgICAgICAqIEBtZXRob2Qgc3luY1xyXG5cdCAgICAgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gZm9ybUlEIOaMh+WumuS4gOS4quimgeWQjOatpeaVsOaNrueahGZvcm3nmoRpZCznvJbovpHlmajnmoTmlbDmja7kvJrlkIzmraXliLDkvaDmjIflrppmb3Jt5LiLXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHN5bmM6IGZ1bmN0aW9uIChmb3JtSWQpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICBmb3JtID0gZm9ybUlkID8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZm9ybUlkKSA6XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5maW5kUGFyZW50KG1lLmlmcmFtZS5wYXJlbnROb2RlLCBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnRhZ05hbWUgPT0gJ0ZPUk0nXHJcblx0ICAgICAgICAgICAgICAgICAgICB9LCB0cnVlKTtcclxuXHQgICAgICAgICAgICBmb3JtICYmIHNldFZhbHVlKGZvcm0sIG1lKTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDorr7nva7nvJbovpHlmajpq5jluqZcclxuXHQgICAgICAgICAqIEBtZXRob2Qgc2V0SGVpZ2h0XHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOW9k+mFjee9rumhuWF1dG9IZWlnaHRFbmFibGVk5Li655yf5pe2LOivpeaWueazleaXoOaViFxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgTnVtYmVyIH0gbnVtYmVyIOiuvue9rueahOmrmOW6puWAvO+8jOe6r+aVsOWAvO+8jOS4jeW4puWNleS9jVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5zZXRIZWlnaHQobnVtYmVyKTtcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBzZXRIZWlnaHQ6IGZ1bmN0aW9uIChoZWlnaHQsbm90U2V0SGVpZ2h0KSB7XHJcblx0ICAgICAgICAgICAgaWYgKGhlaWdodCAhPT0gcGFyc2VJbnQodGhpcy5pZnJhbWUucGFyZW50Tm9kZS5zdHlsZS5oZWlnaHQpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuaWZyYW1lLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgIW5vdFNldEhlaWdodCAmJiAodGhpcy5vcHRpb25zLm1pbkZyYW1lSGVpZ2h0ID0gdGhpcy5vcHRpb25zLmluaXRpYWxGcmFtZUhlaWdodCA9IGhlaWdodCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5ib2R5LnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7XHJcblx0ICAgICAgICAgICAgIW5vdFNldEhlaWdodCAmJiB0aGlzLnRyaWdnZXIoJ3NldEhlaWdodCcpXHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5Li657yW6L6R5Zmo55qE57yW6L6R5ZG95Luk5o+Q5L6b5b+r5o236ZSuXHJcblx0ICAgICAgICAgKiDov5nkuKrmjqXlj6PmmK/kuLrmj5Lku7bmianlsZXmj5DkvpvnmoTmjqXlj6Ms5Li76KaB5piv5Li65paw5re75Yqg55qE5o+S5Lu277yM5aaC5p6c6ZyA6KaB5re75Yqg5b+r5o236ZSu77yM5omA5o+Q5L6b55qE5o6l5Y+jXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGFkZHNob3J0Y3V0a2V5XHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBPYmplY3QgfSBrZXlzZXQg5ZG95Luk5ZCN5ZKM5b+r5o236ZSu6ZSu5YC85a+55a+56LGh77yM5aSa5Liq5oyJ6ZKu55qE5b+r5o236ZSu55So4oCc77yL4oCd5YiG6ZqUXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogZWRpdG9yLmFkZHNob3J0Y3V0a2V5KHtcclxuXHQgICAgICAgICAqICAgICBcIkJvbGRcIiA6IFwiY3RybCs2NlwiLC8vXkJcclxuXHQgICAgICAgICAqICAgICBcIkl0YWxpY1wiIDogXCJjdHJsKzczXCIsIC8vXklcclxuXHQgICAgICAgICAqIH0pO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6L+Z5Liq5o6l5Y+j5piv5Li65o+S5Lu25omp5bGV5o+Q5L6b55qE5o6l5Y+jLOS4u+imgeaYr+S4uuaWsOa3u+WKoOeahOaPkuS7tu+8jOWmguaenOmcgOimgea3u+WKoOW/q+aNt+mUru+8jOaJgOaPkOS+m+eahOaOpeWPo1xyXG5cdCAgICAgICAgICogQG1ldGhvZCBhZGRzaG9ydGN1dGtleVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOinpuWPkeW/q+aNt+mUruaXtu+8jOWTjeW6lOeahOWRveS7pFxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgU3RyaW5nIH0ga2V5cyDlv6vmjbfplK7nmoTlrZfnrKbkuLLvvIzlpJrkuKrmjInpkq7nlKjigJzvvIvigJ3liIbpmpRcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3IuYWRkc2hvcnRjdXRrZXkoXCJVbmRlcmxpbmVcIiwgXCJjdHJsKzg1XCIpOyAvL15VXHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgYWRkc2hvcnRjdXRrZXk6IGZ1bmN0aW9uIChjbWQsIGtleXMpIHtcclxuXHQgICAgICAgICAgICB2YXIgb2JqID0ge307XHJcblx0ICAgICAgICAgICAgaWYgKGtleXMpIHtcclxuXHQgICAgICAgICAgICAgICAgb2JqW2NtZF0gPSBrZXlzXHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgb2JqID0gY21kO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB1dGlscy5leHRlbmQodGhpcy5zaG9ydGN1dGtleXMsIG9iailcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlr7nnvJbovpHlmajorr7nva5rZXlkb3du5LqL5Lu255uR5ZCs77yM57uR5a6a5b+r5o236ZSu5ZKM5ZG95Luk77yM5b2T5b+r5o236ZSu57uE5ZCI6Kem5Y+R5oiQ5Yqf77yM5Lya5ZON5bqU5a+55bqU55qE5ZG95LukXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIF9iaW5kc2hvcnRjdXRLZXlzXHJcblx0ICAgICAgICAgKiBAcHJpdmF0ZVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBfYmluZHNob3J0Y3V0S2V5czogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsIHNob3J0Y3V0a2V5cyA9IHRoaXMuc2hvcnRjdXRrZXlzO1xyXG5cdCAgICAgICAgICAgIG1lLmFkZExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKHR5cGUsIGUpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGtleUNvZGUgPSBlLmtleUNvZGUgfHwgZS53aGljaDtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBzaG9ydGN1dGtleXMpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0bXAgPSBzaG9ydGN1dGtleXNbaV0uc3BsaXQoJywnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSAwLCB0aTsgdGkgPSB0bXBbdCsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aSA9IHRpLnNwbGl0KCc6Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHRpWzBdLCBwYXJhbSA9IHRpWzFdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvXihjdHJsKShcXCtzaGlmdCk/XFwrKFxcZCspJC8udGVzdChrZXkudG9Mb3dlckNhc2UoKSkgfHwgL14oXFxkKykkLy50ZXN0KGtleSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCggKFJlZ0V4cC4kMSA9PSAnY3RybCcgPyAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSkgOiAwKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKFJlZ0V4cC4kMiAhPSBcIlwiID8gZVtSZWdFeHAuJDIuc2xpY2UoMSkgKyBcIktleVwiXSA6IDEpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBrZXlDb2RlID09IFJlZ0V4cC4kM1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB8fFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5Q29kZSA9PSBSZWdFeHAuJDFcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lLnF1ZXJ5Q29tbWFuZFN0YXRlKGkscGFyYW0pICE9IC0xKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmV4ZWNDb21tYW5kKGksIHBhcmFtKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnByZXZlbnREZWZhdWx0KGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPlue8lui+keWZqOeahOWGheWuuVxyXG5cdCAgICAgICAgICogQG1ldGhvZCBnZXRDb250ZW50XHJcblx0ICAgICAgICAgKiBAd2FybmluZyDor6Xmlrnms5Xojrflj5bliLDnmoTmmK/nu4/ov4fnvJbovpHlmajlhoXnva7nmoTov4fmu6Top4TliJnov5vooYzov4fmu6TlkI7lvpfliLDnmoTlhoXlrrlcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBTdHJpbmcgfSDnvJbovpHlmajnmoTlhoXlrrnlrZfnrKbkuLIsIOWmguaenOe8lui+keWZqOeahOWGheWuueS4uuepuu+8jOaIluiAheaYr+epuueahOagh+etvuWGheWuue+8iOWmgjrigJ0mbHQ7cCZndDsmbHQ7YnIvJmd0OyZsdDsvcCZndDvigJzvvInvvIwg5YiZ6L+U5Zue56m65a2X56ym5LiyXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogLy/nvJbovpHlmahodG1s5YaF5a65OjxwPjE8c3Ryb25nPjI8ZW0+MzQ8L2VtPjU8L3N0cm9uZz42PC9wPlxyXG5cdCAgICAgICAgICogdmFyIGNvbnRlbnQgPSBlZGl0b3IuZ2V0Q29udGVudCgpOyAvL+i/lOWbnuWAvDo8cD4xPHN0cm9uZz4yPGVtPjM0PC9lbT41PC9zdHJvbmc+NjwvcD5cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDojrflj5bnvJbovpHlmajnmoTlhoXlrrnjgIIg5Y+v5Lul6YCa6L+H5Y+C5pWw5a6a5LmJ57yW6L6R5Zmo5YaF572u55qE5Yik56m66KeE5YiZXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGdldENvbnRlbnRcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IEZ1bmN0aW9uIH0gZm4g6Ieq5a6a55qE5Yik56m66KeE5YiZ77yMIOimgeaxguivpeaWueazlei/lOWbnuS4gOS4qmJvb2xlYW7nsbvlnovnmoTlgLzvvIxcclxuXHQgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgIOS7o+ihqOW9k+WJjee8lui+keWZqOeahOWGheWuueaYr+WQpuepuu+8jFxyXG5cdCAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAg5aaC5p6c6L+U5ZuedHJ1Ze+8jCDliJnor6Xmlrnms5XlsIbnm7TmjqXov5Tlm57nqbrlrZfnrKbkuLLvvJvlpoLmnpzov5Tlm55mYWxzZe+8jOWImee8lui+keWZqOWwhui/lOWbnlxyXG5cdCAgICAgICAgICogICAgICAgICAgICAgICAgICAgICAg57uP6L+H5YaF572u6L+H5ruk6KeE5YiZ5aSE55CG5ZCO55qE5YaF5a6544CCXHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOivpeaWueazleWcqOWkhOeQhuWMheWQq+acieWIneWni+WMluWGheWuueeahOaXtuWAmeiDvei1t+WIsOW+iOWlveeahOS9nOeUqOOAglxyXG5cdCAgICAgICAgICogQHdhcm5pbmcg6K+l5pa55rOV6I635Y+W5Yiw55qE5piv57uP6L+H57yW6L6R5Zmo5YaF572u55qE6L+H5ruk6KeE5YiZ6L+b6KGM6L+H5ruk5ZCO5b6X5Yiw55qE5YaF5a65XHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgU3RyaW5nIH0g57yW6L6R5Zmo55qE5YaF5a655a2X56ym5LiyXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogLy8gZWRpdG9yIOaYr+S4gOS4que8lui+keWZqOeahOWunuS+i1xyXG5cdCAgICAgICAgICogdmFyIGNvbnRlbnQgPSBlZGl0b3IuZ2V0Q29udGVudCggZnVuY3Rpb24gKCBlZGl0b3IgKSB7XHJcblx0ICAgICAgICAgKiAgICAgIHJldHVybiBlZGl0b3IuYm9keS5pbm5lckhUTUwgPT09ICfmrKLov47kvb/nlKhVRWRpdG9yJzsgLy/ov5Tlm57nqbrlrZfnrKbkuLJcclxuXHQgICAgICAgICAqIH0gKTtcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBnZXRDb250ZW50OiBmdW5jdGlvbiAoY21kLCBmbixub3RTZXRDdXJzb3IsaWdub3JlQmxhbmssZm9ybWF0dGVyKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICBpZiAoY21kICYmIHV0aWxzLmlzRnVuY3Rpb24oY21kKSkge1xyXG5cdCAgICAgICAgICAgICAgICBmbiA9IGNtZDtcclxuXHQgICAgICAgICAgICAgICAgY21kID0gJyc7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmIChmbiA/ICFmbigpIDogIXRoaXMuaGFzQ29udGVudHMoKSkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnYmVmb3JlZ2V0Y29udGVudCcpO1xyXG5cdCAgICAgICAgICAgIHZhciByb290ID0gVUUuaHRtbHBhcnNlcihtZS5ib2R5LmlubmVySFRNTCxpZ25vcmVCbGFuayk7XHJcblx0ICAgICAgICAgICAgbWUuZmlsdGVyT3V0cHV0UnVsZShyb290KTtcclxuXHQgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ2FmdGVyZ2V0Y29udGVudCcsIGNtZCxyb290KTtcclxuXHQgICAgICAgICAgICByZXR1cm4gIHJvb3QudG9IdG1sKGZvcm1hdHRlcik7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5Y+W5b6X5a6M5pW055qEaHRtbOS7o+egge+8jOWPr+S7peebtOaOpeaYvuekuuaIkOWujOaVtOeahGh0bWzmlofmoaNcclxuXHQgICAgICAgICAqIEBtZXRob2QgZ2V0QWxsSHRtbFxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFN0cmluZyB9IOe8lui+keWZqOeahOWGheWuuWh0bWzmlofmoaPlrZfnrKbkuLJcclxuXHQgICAgICAgICAqIEBlYXhtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3IuZ2V0QWxsSHRtbCgpOyAvL+i/lOWbnuagvOW8j+Wkp+iHtOaYrzogPGh0bWw+PGhlYWQ+Li4uPC9oZWFkPjxib2R5Pi4uLjwvYm9keT48L2h0bWw+XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0QWxsSHRtbDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgIGhlYWRIdG1sID0gW10sXHJcblx0ICAgICAgICAgICAgICAgIGh0bWwgPSAnJztcclxuXHQgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ2dldEFsbEh0bWwnLCBoZWFkSHRtbCk7XHJcblx0ICAgICAgICAgICAgaWYgKGJyb3dzZXIuaWUgJiYgYnJvd3Nlci52ZXJzaW9uID4gOCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgaGVhZEh0bWxGb3JJRTkgPSAnJztcclxuXHQgICAgICAgICAgICAgICAgdXRpbHMuZWFjaChtZS5kb2N1bWVudC5zdHlsZVNoZWV0cywgZnVuY3Rpb24gKHNpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBoZWFkSHRtbEZvcklFOSArPSAoIHNpLmhyZWYgPyAnPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIHR5cGU9XCJ0ZXh0L2Nzc1wiIGhyZWY9XCInICsgc2kuaHJlZiArICdcIiAvPicgOiAnPHN0eWxlPicgKyBzaS5jc3NUZXh0ICsgJzwvc3R5bGU+Jyk7XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICB1dGlscy5lYWNoKG1lLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKSwgZnVuY3Rpb24gKHNpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBoZWFkSHRtbEZvcklFOSArPSBzaS5vdXRlckhUTUw7XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuICc8aHRtbD48aGVhZD4nICsgKG1lLm9wdGlvbnMuY2hhcnNldCA/ICc8bWV0YSBodHRwLWVxdWl2PVwiQ29udGVudC1UeXBlXCIgY29udGVudD1cInRleHQvaHRtbDsgY2hhcnNldD0nICsgbWUub3B0aW9ucy5jaGFyc2V0ICsgJ1wiLz4nIDogJycpXHJcblx0ICAgICAgICAgICAgICAgICsgKGhlYWRIdG1sRm9ySUU5IHx8IG1lLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uaW5uZXJIVE1MKSArIGhlYWRIdG1sLmpvaW4oJ1xcbicpICsgJzwvaGVhZD4nXHJcblx0ICAgICAgICAgICAgICAgICsgJzxib2R5ICcgKyAoaWUgJiYgYnJvd3Nlci52ZXJzaW9uIDwgOSA/ICdjbGFzcz1cInZpZXdcIicgOiAnJykgKyAnPicgKyBtZS5nZXRDb250ZW50KG51bGwsIG51bGwsIHRydWUpICsgJzwvYm9keT48L2h0bWw+JztcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlvpfliLDnvJbovpHlmajnmoTnuq/mlofmnKzlhoXlrrnvvIzkvYbkvJrkv53nlZnmrrXokL3moLzlvI9cclxuXHQgICAgICAgICAqIEBtZXRob2QgZ2V0UGxhaW5UeHRcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBTdHJpbmcgfSDnvJbovpHlmajluKbmrrXokL3moLzlvI/nmoTnuq/mlofmnKzlhoXlrrnlrZfnrKbkuLJcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiAvL+e8lui+keWZqGh0bWzlhoXlrrk6PHA+PHN0cm9uZz4xPC9zdHJvbmc+PC9wPjxwPjxzdHJvbmc+Mjwvc3Ryb25nPjwvcD5cclxuXHQgICAgICAgICAqIGNvbnNvbGUubG9nKGVkaXRvci5nZXRQbGFpblR4dCgpKTsgLy/ovpPlh7o6XCIxXFxuMlxcblxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGdldFBsYWluVHh0OiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoZG9tVXRpbHMuZmlsbENoYXIsICdnJyksXHJcblx0ICAgICAgICAgICAgICAgIGh0bWwgPSB0aGlzLmJvZHkuaW5uZXJIVE1MLnJlcGxhY2UoL1tcXG5cXHJdL2csICcnKTsvL2ll6KaB5YWI5Y675LqGXFxu5Zyo5aSE55CGXHJcblx0ICAgICAgICAgICAgaHRtbCA9IGh0bWwucmVwbGFjZSgvPChwfGRpdilbXj5dKj4oPGJyXFwvPz58Jm5ic3A7KTxcXC9cXDE+L2dpLCAnXFxuJylcclxuXHQgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzxiclxcLz8+L2dpLCAnXFxuJylcclxuXHQgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzxbXj4vXSs+L2csICcnKVxyXG5cdCAgICAgICAgICAgICAgICAucmVwbGFjZSgvKFxcbik/PFxcLyhbXj5dKyk+L2csIGZ1bmN0aW9uIChhLCBiLCBjKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHRkLiRibG9ja1tjXSA/ICdcXG4nIDogYiA/IGIgOiAnJztcclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgLy/lj5blh7rmnaXnmoTnqbrmoLzkvJrmnIljMmEw5Lya5Y+Y5oiQ5Lmx56CB77yM5aSE55CG6L+Z56eN5oOF5Ya1XFx1MDBhMFxyXG5cdCAgICAgICAgICAgIHJldHVybiBodG1sLnJlcGxhY2UocmVnLCAnJykucmVwbGFjZSgvXFx1MDBhMC9nLCAnICcpLnJlcGxhY2UoLyZuYnNwOy9nLCAnICcpO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPlue8lui+keWZqOS4reeahOe6r+aWh+acrOWGheWuuSzmsqHmnInmrrXokL3moLzlvI9cclxuXHQgICAgICAgICAqIEBtZXRob2QgZ2V0Q29udGVudFR4dFxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFN0cmluZyB9IOe8lui+keWZqOS4jeW4puauteiQveagvOW8j+eahOe6r+aWh+acrOWGheWuueWtl+espuS4slxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIC8v57yW6L6R5ZmoaHRtbOWGheWuuTo8cD48c3Ryb25nPjE8L3N0cm9uZz48L3A+PHA+PHN0cm9uZz4yPC9zdHJvbmc+PC9wPlxyXG5cdCAgICAgICAgICogY29uc29sZS5sb2coZWRpdG9yLmdldFBsYWluVHh0KCkpOyAvL+i+k+WHujpcIjEyXHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0Q29udGVudFR4dDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKGRvbVV0aWxzLmZpbGxDaGFyLCAnZycpO1xyXG5cdCAgICAgICAgICAgIC8v5Y+W5Ye65p2l55qE56m65qC85Lya5pyJYzJhMOS8muWPmOaIkOS5seegge+8jOWkhOeQhui/meenjeaDheWGtVxcdTAwYTBcclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5ib2R5W2Jyb3dzZXIuaWUgPyAnaW5uZXJUZXh0JyA6ICd0ZXh0Q29udGVudCddLnJlcGxhY2UocmVnLCAnJykucmVwbGFjZSgvXFx1MDBhMC9nLCAnICcpO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiuvue9rue8lui+keWZqOeahOWGheWuue+8jOWPr+S/ruaUuee8lui+keWZqOW9k+WJjeeahGh0bWzlhoXlrrlcclxuXHQgICAgICAgICAqIEBtZXRob2Qgc2V0Q29udGVudFxyXG5cdCAgICAgICAgICogQHdhcm5pbmcg6YCa6L+H6K+l5pa55rOV5o+S5YWl55qE5YaF5a6577yM5piv57uP6L+H57yW6L6R5Zmo5YaF572u55qE6L+H5ruk6KeE5YiZ6L+b6KGM6L+H5ruk5ZCO5b6X5Yiw55qE5YaF5a65XHJcblx0ICAgICAgICAgKiBAd2FybmluZyDor6Xmlrnms5XkvJrop6blj5FzZWxlY3Rpb25jaGFuZ2Xkuovku7ZcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGh0bWwg6KaB5o+S5YWl55qEaHRtbOWGheWuuVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5nZXRDb250ZW50KCc8cD50ZXN0PC9wPicpO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiuvue9rue8lui+keWZqOeahOWGheWuue+8jOWPr+S/ruaUuee8lui+keWZqOW9k+WJjeeahGh0bWzlhoXlrrlcclxuXHQgICAgICAgICAqIEBtZXRob2Qgc2V0Q29udGVudFxyXG5cdCAgICAgICAgICogQHdhcm5pbmcg6YCa6L+H6K+l5pa55rOV5o+S5YWl55qE5YaF5a6577yM5piv57uP6L+H57yW6L6R5Zmo5YaF572u55qE6L+H5ruk6KeE5YiZ6L+b6KGM6L+H5ruk5ZCO5b6X5Yiw55qE5YaF5a65XHJcblx0ICAgICAgICAgKiBAd2FybmluZyDor6Xmlrnms5XkvJrop6blj5FzZWxlY3Rpb25jaGFuZ2Xkuovku7ZcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGh0bWwg6KaB5o+S5YWl55qEaHRtbOWGheWuuVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgQm9vbGVhbiB9IGlzQXBwZW5kVG8g6Iul5Lyg5YWldHJ1Ze+8jOS4jea4heepuuWOn+adpeeahOWGheWuue+8jOWcqOacgOWQjuaPkuWFpeWGheWuue+8jOWQpuWIme+8jOa4heepuuWGheWuueWGjeaPkuWFpVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIC8v5YGH6K6+6K6+572u5YmN55qE57yW6L6R5Zmo5YaF5a655pivIDxwPm9sZCB0ZXh0PC9wPlxyXG5cdCAgICAgICAgICogZWRpdG9yLnNldENvbnRlbnQoJzxwPm5ldyB0ZXh0PC9wPicsIHRydWUpOyAvL+aPkuWFpeeahOe7k+aenOaYrzxwPm9sZCB0ZXh0PC9wPjxwPm5ldyB0ZXh0PC9wPlxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uIChodG1sLCBpc0FwcGVuZFRvLCBub3RGaXJlU2VsZWN0aW9uY2hhbmdlKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHJcblx0ICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdiZWZvcmVzZXRjb250ZW50JywgaHRtbCk7XHJcblx0ICAgICAgICAgICAgdmFyIHJvb3QgPSBVRS5odG1scGFyc2VyKGh0bWwpO1xyXG5cdCAgICAgICAgICAgIG1lLmZpbHRlcklucHV0UnVsZShyb290KTtcclxuXHQgICAgICAgICAgICBodG1sID0gcm9vdC50b0h0bWwoKTtcclxuXHJcblx0ICAgICAgICAgICAgbWUuYm9keS5pbm5lckhUTUwgPSAoaXNBcHBlbmRUbyA/IG1lLmJvZHkuaW5uZXJIVE1MIDogJycpICsgaHRtbDtcclxuXHJcblxyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGlzQ2RhdGFEaXYobm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAgbm9kZS50YWdOYW1lID09ICdESVYnICYmIG5vZGUuZ2V0QXR0cmlidXRlKCdjZGF0YV90YWcnKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgLy/nu5nmlofmnKzmiJbogIVpbmxpbmXoioLngrnlpZdw5qCH562+XHJcblx0ICAgICAgICAgICAgaWYgKG1lLm9wdGlvbnMuZW50ZXJUYWcgPT0gJ3AnKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB0aGlzLmJvZHkuZmlyc3RDaGlsZCwgdG1wTm9kZTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCFjaGlsZCB8fCBjaGlsZC5ub2RlVHlwZSA9PSAxICYmXHJcblx0ICAgICAgICAgICAgICAgICAgICAoZHRkLiRjZGF0YVtjaGlsZC50YWdOYW1lXSB8fCBpc0NkYXRhRGl2KGNoaWxkKSB8fFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmlzQ3VzdG9tZU5vZGUoY2hpbGQpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgJiYgY2hpbGQgPT09IHRoaXMuYm9keS5sYXN0Q2hpbGQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9keS5pbm5lckhUTUwgPSAnPHA+JyArIChicm93c2VyLmllID8gJyZuYnNwOycgOiAnPGJyLz4nKSArICc8L3A+JyArIHRoaXMuYm9keS5pbm5lckhUTUw7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2hpbGQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2hpbGQgJiYgKGNoaWxkLm5vZGVUeXBlID09IDMgfHwgY2hpbGQubm9kZVR5cGUgPT0gMSAmJiBkdGQucFtjaGlsZC50YWdOYW1lXSAmJiAhZHRkLiRjZGF0YVtjaGlsZC50YWdOYW1lXSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wTm9kZSA9IGNoaWxkLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmFwcGVuZENoaWxkKGNoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSB0bXBOb2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5maXJzdENoaWxkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2hpbGQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmJvZHkuYXBwZW5kQ2hpbGQocCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHAsIGNoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ2FmdGVyc2V0Y29udGVudCcpO1xyXG5cdCAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnY29udGVudGNoYW5nZScpO1xyXG5cclxuXHQgICAgICAgICAgICAhbm90RmlyZVNlbGVjdGlvbmNoYW5nZSAmJiBtZS5fc2VsZWN0aW9uQ2hhbmdlKCk7XHJcblx0ICAgICAgICAgICAgLy/muIXpmaTkv53lrZjnmoTpgInljLpcclxuXHQgICAgICAgICAgICBtZS5fYmFrUmFuZ2UgPSBtZS5fYmFrSUVSYW5nZSA9IG1lLl9iYWtOYXRpdmVSYW5nZSA9IG51bGw7XHJcblx0ICAgICAgICAgICAgLy90cmFjZToxNzQyIHNldENvbnRlbnTlkI5nZWNrb+iDveW+l+WIsOeEpueCuemXrumimFxyXG5cdCAgICAgICAgICAgIHZhciBnZWNrb1NlbDtcclxuXHQgICAgICAgICAgICBpZiAoYnJvd3Nlci5nZWNrbyAmJiAoZ2Vja29TZWwgPSB0aGlzLnNlbGVjdGlvbi5nZXROYXRpdmUoKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgZ2Vja29TZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmKG1lLm9wdGlvbnMuYXV0b1N5bmNEYXRhKXtcclxuXHQgICAgICAgICAgICAgICAgbWUuZm9ybSAmJiBzZXRWYWx1ZShtZS5mb3JtLG1lKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6K6p57yW6L6R5Zmo6I635b6X54Sm54K577yM6buY6K6kZm9jdXPliLDnvJbovpHlmajlpLTpg6hcclxuXHQgICAgICAgICAqIEBtZXRob2QgZm9jdXNcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3IuZm9jdXMoKVxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiuqee8lui+keWZqOiOt+W+l+eEpueCue+8jHRvRW5k56Gu5a6aZm9jdXPkvY3nva5cclxuXHQgICAgICAgICAqIEBtZXRob2QgZm9jdXNcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IEJvb2xlYW4gfSB0b0VuZCDpu5jorqRmb2N1c+WIsOe8lui+keWZqOWktOmDqO+8jHRvRW5k5Li6dHJ1ZeaXtmZvY3Vz5Yiw5YaF5a655bC+6YOoXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogZWRpdG9yLmZvY3VzKHRydWUpXHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZm9jdXM6IGZ1bmN0aW9uICh0b0VuZCkge1xyXG5cdCAgICAgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRvRW5kKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IG1lLmJvZHkubGFzdENoaWxkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYobm9kZSAmJiBub2RlLm5vZGVUeXBlID09IDEgJiYgIWR0ZC4kZW1wdHlbbm9kZS50YWdOYW1lXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoZG9tVXRpbHMuaXNFbXB0eUJsb2NrKG5vZGUpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm5nLnNldFN0YXJ0QXRGaXJzdChub2RlKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBybmcuc2V0U3RhcnRBdExhc3Qobm9kZSlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcm5nLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcm5nLnNldEN1cnNvcih0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKCFybmcuY29sbGFwc2VkICYmIGRvbVV0aWxzLmlzQm9keShybmcuc3RhcnRDb250YWluZXIpICYmIHJuZy5zdGFydE9mZnNldCA9PSAwKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBtZS5ib2R5LmZpcnN0Q2hpbGQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYobm9kZSAmJiBub2RlLm5vZGVUeXBlID09IDEgJiYgIWR0ZC4kZW1wdHlbbm9kZS50YWdOYW1lXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJuZy5zZXRTdGFydEF0Rmlyc3Qobm9kZSkuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHJuZy5zZWxlY3QodHJ1ZSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCdmb2N1cyBzZWxlY3Rpb25jaGFuZ2UnKTtcclxuXHQgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBpc0ZvY3VzOmZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uLmlzRm9jdXMoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBibHVyOmZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgdmFyIHNlbCA9IHRoaXMuc2VsZWN0aW9uLmdldE5hdGl2ZSgpO1xyXG5cdCAgICAgICAgICAgIGlmKHNlbC5lbXB0eSAmJiBicm93c2VyLmllKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG5hdGl2ZVJuZyA9IGRvY3VtZW50LmJvZHkuY3JlYXRlVGV4dFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgICAgIG5hdGl2ZVJuZy5tb3ZlVG9FbGVtZW50VGV4dChkb2N1bWVudC5ib2R5KTtcclxuXHQgICAgICAgICAgICAgICAgbmF0aXZlUm5nLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICBuYXRpdmVSbmcuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgIHNlbC5lbXB0eSgpXHJcblx0ICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgLy90aGlzLmZpcmVFdmVudCgnYmx1ciBzZWxlY3Rpb25jaGFuZ2UnKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOWIneWni+WMllVF5LqL5Lu25Y+K6YOo5YiG5LqL5Lu25Luj55CGXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIF9pbml0RXZlbnRzXHJcblx0ICAgICAgICAgKiBAcHJpdmF0ZVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBfaW5pdEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgIGRvYyA9IG1lLmRvY3VtZW50LFxyXG5cdCAgICAgICAgICAgICAgICB3aW4gPSBtZS53aW5kb3c7XHJcblx0ICAgICAgICAgICAgbWUuX3Byb3h5RG9tRXZlbnQgPSB1dGlscy5iaW5kKG1lLl9wcm94eURvbUV2ZW50LCBtZSk7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMub24oZG9jLCBbJ2NsaWNrJywgJ2NvbnRleHRtZW51JywgJ21vdXNlZG93bicsICdrZXlkb3duJywgJ2tleXVwJywgJ2tleXByZXNzJywgJ21vdXNldXAnLCAnbW91c2VvdmVyJywgJ21vdXNlb3V0JywgJ3NlbGVjdHN0YXJ0J10sIG1lLl9wcm94eURvbUV2ZW50KTtcclxuXHQgICAgICAgICAgICBkb21VdGlscy5vbih3aW4sIFsnZm9jdXMnLCAnYmx1ciddLCBtZS5fcHJveHlEb21FdmVudCk7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMub24obWUuYm9keSwnZHJvcCcsZnVuY3Rpb24oZSl7XHJcblx0ICAgICAgICAgICAgICAgIC8v6Zi75q2iZmbkuIvpu5jorqTnmoTlvLnlh7rmlrDpobXpnaLmiZPlvIDlm77niYdcclxuXHQgICAgICAgICAgICAgICAgaWYoYnJvd3Nlci5nZWNrbyAmJiBlLnN0b3BQcm9wYWdhdGlvbikgeyBlLnN0b3BQcm9wYWdhdGlvbigpOyB9XHJcblx0ICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnY29udGVudGNoYW5nZScpXHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMub24oZG9jLCBbJ21vdXNldXAnLCAna2V5ZG93biddLCBmdW5jdGlvbiAoZXZ0KSB7XHJcblx0ICAgICAgICAgICAgICAgIC8v54m55q6K6ZSu5LiN6Kem5Y+Rc2VsZWN0aW9uY2hhbmdlXHJcblx0ICAgICAgICAgICAgICAgIGlmIChldnQudHlwZSA9PSAna2V5ZG93bicgJiYgKGV2dC5jdHJsS2V5IHx8IGV2dC5tZXRhS2V5IHx8IGV2dC5zaGlmdEtleSB8fCBldnQuYWx0S2V5KSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChldnQuYnV0dG9uID09IDIpcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICBtZS5fc2VsZWN0aW9uQ2hhbmdlKDI1MCwgZXZ0KTtcclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOinpuWPkeS6i+S7tuS7o+eQhlxyXG5cdCAgICAgICAgICogQG1ldGhvZCBfcHJveHlEb21FdmVudFxyXG5cdCAgICAgICAgICogQHByaXZhdGVcclxuXHQgICAgICAgICAqIEByZXR1cm4geyAqIH0gZmlyZUV2ZW5055qE6L+U5Zue5YC8XHJcblx0ICAgICAgICAgKiBAc2VlIFVFLkV2ZW50QmFzZTpmaXJlRXZlbnQoU3RyaW5nKVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBfcHJveHlEb21FdmVudDogZnVuY3Rpb24gKGV2dCkge1xyXG5cdCAgICAgICAgICAgIGlmKHRoaXMuZmlyZUV2ZW50KCdiZWZvcmUnICsgZXZ0LnR5cGUucmVwbGFjZSgvXm9uLywgJycpLnRvTG93ZXJDYXNlKCkpID09PSBmYWxzZSl7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYodGhpcy5maXJlRXZlbnQoZXZ0LnR5cGUucmVwbGFjZSgvXm9uLywgJycpLCBldnQpID09PSBmYWxzZSl7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlyZUV2ZW50KCdhZnRlcicgKyBldnQudHlwZS5yZXBsYWNlKC9eb24vLCAnJykudG9Mb3dlckNhc2UoKSlcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOWPmOWMlumAieWMulxyXG5cdCAgICAgICAgICogQG1ldGhvZCBfc2VsZWN0aW9uQ2hhbmdlXHJcblx0ICAgICAgICAgKiBAcHJpdmF0ZVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBfc2VsZWN0aW9uQ2hhbmdlOiBmdW5jdGlvbiAoZGVsYXksIGV2dCkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgLy/mnInlhYnmoIfmiY3lgZpzZWxlY3Rpb25jaGFuZ2Ug5Li65LqG6Kej5Yaz5pyqZm9jdXPml7bngrnlh7tzb3VyY2XkuI3og73op6blj5Hmm7TmlLnlt6XlhbfmoI/nirbmgIHnmoTpl67popjvvIhzb3VyY2Xlkb3ku6Rub3ROZWVkVW5kbz0x77yJXHJcbi8vXHQgICAgICAgICAgICBpZiAoICFtZS5zZWxlY3Rpb24uaXNGb2N1cygpICl7XHJcbi8vXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4vL1x0ICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgdmFyIGhhY2tGb3JNb3VzZVVwID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgdmFyIG1vdXNlWCwgbW91c2VZO1xyXG5cdCAgICAgICAgICAgIGlmIChicm93c2VyLmllICYmIGJyb3dzZXIudmVyc2lvbiA8IDkgJiYgZXZ0ICYmIGV2dC50eXBlID09ICdtb3VzZXVwJykge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXJhbmdlLmNvbGxhcHNlZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaGFja0Zvck1vdXNlVXAgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbW91c2VYID0gZXZ0LmNsaWVudFg7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtb3VzZVkgPSBldnQuY2xpZW50WTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBjbGVhclRpbWVvdXQoX3NlbGVjdGlvbkNoYW5nZVRpbWVyKTtcclxuXHQgICAgICAgICAgICBfc2VsZWN0aW9uQ2hhbmdlVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCFtZS5zZWxlY3Rpb24gfHwgIW1lLnNlbGVjdGlvbi5nZXROYXRpdmUoKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIC8v5L+u5aSN5LiA5LiqSUXkuIvnmoRidWc6IOm8oOagh+eCueWHu+S4gOauteW3sumAieaLqeeahOaWh+acrOS4remXtOaXtu+8jOWPr+iDveWcqG1vdXNldXDlkI7nmoTkuIDmrrXml7bpl7TlhoXlj5bliLDnmoRyYW5nZeaYr+WcqHNlbGVjdGlvbueahHR5cGXkuLpOb25l5LiL55qE6ZSZ6K+v5YC8LlxyXG5cdCAgICAgICAgICAgICAgICAvL0lF5LiL5aaC5p6c55So5oi35piv5ouW5ou95LiA5q615bey6YCJ5oup5paH5pys77yM5YiZ5LiN5Lya6Kem5Y+RbW91c2V1cOS6i+S7tu+8jOaJgOS7pei/memHjOeahOeJueauiuWkhOeQhuS4jeS8muWvueWFtuacieW9seWTjVxyXG5cdCAgICAgICAgICAgICAgICB2YXIgaWVSYW5nZTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGhhY2tGb3JNb3VzZVVwICYmIG1lLnNlbGVjdGlvbi5nZXROYXRpdmUoKS50eXBlID09ICdOb25lJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWVSYW5nZSA9IG1lLmRvY3VtZW50LmJvZHkuY3JlYXRlVGV4dFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGllUmFuZ2UubW92ZVRvUG9pbnQobW91c2VYLCBtb3VzZVkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZVJhbmdlID0gbnVsbDtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB2YXIgYmFrR2V0SUVSYW5nZTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGllUmFuZ2UpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJha0dldElFUmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0SUVSYW5nZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLnNlbGVjdGlvbi5nZXRJRVJhbmdlID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZVJhbmdlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBtZS5zZWxlY3Rpb24uY2FjaGUoKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGJha0dldElFUmFuZ2UpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLnNlbGVjdGlvbi5nZXRJRVJhbmdlID0gYmFrR2V0SUVSYW5nZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAobWUuc2VsZWN0aW9uLl9jYWNoZWRSYW5nZSAmJiBtZS5zZWxlY3Rpb24uX2NhY2hlZFN0YXJ0RWxlbWVudCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdiZWZvcmVzZWxlY3Rpb25jaGFuZ2UnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8vIOesrOS6jOS4quWPguaVsGNhdXNlQnlVaeS4unRydWXku6PooajnlLHnlKjmiLfkuqTkupLpgKDmiJDnmoRzZWxlY3Rpb25jaGFuZ2UuXHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NlbGVjdGlvbmNoYW5nZScsICEhZXZ0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnYWZ0ZXJzZWxlY3Rpb25jaGFuZ2UnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLnNlbGVjdGlvbi5jbGVhcigpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSwgZGVsYXkgfHwgNTApO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOaJp+ihjOe8lui+keWRveS7pFxyXG5cdCAgICAgICAgICogQG1ldGhvZCBfY2FsbENtZEZuXHJcblx0ICAgICAgICAgKiBAcHJpdmF0ZVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gZm5OYW1lIOWHveaVsOWQjeensFxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgKiB9IGFyZ3Mg5Lyg57uZ5ZG95Luk5Ye95pWw55qE5Y+C5pWwXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgKiB9IOi/lOWbnuWRveS7pOWHveaVsOi/kOihjOeahOi/lOWbnuWAvFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBfY2FsbENtZEZuOiBmdW5jdGlvbiAoZm5OYW1lLCBhcmdzKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNtZE5hbWUgPSBhcmdzWzBdLnRvTG93ZXJDYXNlKCksXHJcblx0ICAgICAgICAgICAgICAgIGNtZCwgY21kRm47XHJcblx0ICAgICAgICAgICAgY21kID0gdGhpcy5jb21tYW5kc1tjbWROYW1lXSB8fCBVRS5jb21tYW5kc1tjbWROYW1lXTtcclxuXHQgICAgICAgICAgICBjbWRGbiA9IGNtZCAmJiBjbWRbZm5OYW1lXTtcclxuXHQgICAgICAgICAgICAvL+ayoeaciXF1ZXJ5Y29tbWFuZHN0YXRl5oiW6ICF5rKh5pyJY29tbWFuZOeahOmDvem7mOiupOi/lOWbnjBcclxuXHQgICAgICAgICAgICBpZiAoKCFjbWQgfHwgIWNtZEZuKSAmJiBmbk5hbWUgPT0gJ3F1ZXJ5Q29tbWFuZFN0YXRlJykge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKGNtZEZuKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBjbWRGbi5hcHBseSh0aGlzLCBhcmdzKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5omn6KGM57yW6L6R5ZG95LukY21kTmFtZe+8jOWujOaIkOWvjOaWh+acrOe8lui+keaViOaenFxyXG5cdCAgICAgICAgICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gY21kTmFtZSDpnIDopoHmiafooYznmoTlkb3ku6RcclxuXHQgICAgICAgICAqIEByZW1pbmQg5YW35L2T5ZG95Luk55qE5L2/55So6K+35Y+C6ICDPGEgaHJlZj1cIiNDT01NQU5ELkxJU1RcIj7lkb3ku6TliJfooag8L2E+XHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgKiB9IOi/lOWbnuWRveS7pOWHveaVsOi/kOihjOeahOi/lOWbnuWAvFxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5leGVjQ29tbWFuZChjbWROYW1lKTtcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKGNtZE5hbWUpIHtcclxuXHQgICAgICAgICAgICBjbWROYW1lID0gY21kTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgIHJlc3VsdCxcclxuXHQgICAgICAgICAgICAgICAgY21kID0gbWUuY29tbWFuZHNbY21kTmFtZV0gfHwgVUUuY29tbWFuZHNbY21kTmFtZV07XHJcblx0ICAgICAgICAgICAgaWYgKCFjbWQgfHwgIWNtZC5leGVjQ29tbWFuZCkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKCFjbWQubm90TmVlZFVuZG8gJiYgIW1lLl9faGFzRW50ZXJFeGVjQ29tbWFuZCkge1xyXG5cdCAgICAgICAgICAgICAgICBtZS5fX2hhc0VudGVyRXhlY0NvbW1hbmQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobWUucXVlcnlDb21tYW5kU3RhdGUuYXBwbHkobWUsYXJndW1lbnRzKSAhPSAtMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdzYXZlU2NlbmUnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudC5hcHBseShtZSwgWydiZWZvcmVleGVjY29tbWFuZCcsIGNtZE5hbWVdLmNvbmNhdChhcmd1bWVudHMpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX2NhbGxDbWRGbignZXhlY0NvbW1hbmQnLCBhcmd1bWVudHMpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/kv53lrZjlnLrmma/ml7bvvIzlgZrkuoblhoXlrrnlr7nmr5TvvIzlho3nnIvmmK/lkKbov5vooYxjb250ZW50Y2hhbmdl6Kem5Y+R77yM6L+Z6YeM5aSa6Kem5Y+R5LqG5LiA5qyh77yM5Y675o6JXHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICghY21kLmlnbm9yZUNvbnRlbnRDaGFuZ2UgJiYgIW1lLl9pZ25vcmVDb250ZW50Q2hhbmdlKSAmJiBtZS5maXJlRXZlbnQoJ2NvbnRlbnRjaGFuZ2UnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudC5hcHBseShtZSwgWydhZnRlcmV4ZWNjb21tYW5kJywgY21kTmFtZV0uY29uY2F0KGFyZ3VtZW50cykpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdzYXZlU2NlbmUnKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBtZS5fX2hhc0VudGVyRXhlY0NvbW1hbmQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9jYWxsQ21kRm4oJ2V4ZWNDb21tYW5kJywgYXJndW1lbnRzKTtcclxuXHQgICAgICAgICAgICAgICAgKCFtZS5fX2hhc0VudGVyRXhlY0NvbW1hbmQgJiYgIWNtZC5pZ25vcmVDb250ZW50Q2hhbmdlICYmICFtZS5faWdub3JlQ29udGVudENoYW5nZSkgJiYgbWUuZmlyZUV2ZW50KCdjb250ZW50Y2hhbmdlJylcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgKCFtZS5fX2hhc0VudGVyRXhlY0NvbW1hbmQgJiYgIWNtZC5pZ25vcmVDb250ZW50Q2hhbmdlICYmICFtZS5faWdub3JlQ29udGVudENoYW5nZSkgJiYgbWUuX3NlbGVjdGlvbkNoYW5nZSgpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5qC55o2u5Lyg5YWl55qEY29tbWFuZOWRveS7pO+8jOafpemAiee8lui+keWZqOW9k+WJjeeahOmAieWMuu+8jOi/lOWbnuWRveS7pOeahOeKtuaAgVxyXG5cdCAgICAgICAgICogQG1ldGhvZCAgcXVlcnlDb21tYW5kU3RhdGVcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZE5hbWUg6ZyA6KaB5p+l6K+i55qE5ZG95Luk5ZCN56ewXHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOWFt+S9k+WRveS7pOeahOS9v+eUqOivt+WPguiAgzxhIGhyZWY9XCIjQ09NTUFORC5MSVNUXCI+5ZG95Luk5YiX6KGoPC9hPlxyXG5cdCAgICAgICAgICogQHJldHVybiB7IE51bWJlciB9IG51bWJlciDov5Tlm57mlL7liY3lkb3ku6TnmoTnirbmgIHvvIzov5Tlm57lgLzkuInnp43mg4XlhrXvvJooLTF8MHwxKVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5xdWVyeUNvbW1hbmRTdGF0ZShjbWROYW1lKSAgPT4gKC0xfDB8MSlcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICogQHNlZSBDT01NQU5ELkxJU1RcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6IGZ1bmN0aW9uIChjbWROYW1lKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhbGxDbWRGbigncXVlcnlDb21tYW5kU3RhdGUnLCBhcmd1bWVudHMpO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOagueaNruS8oOWFpeeahGNvbW1hbmTlkb3ku6TvvIzmn6XpgInnvJbovpHlmajlvZPliY3nmoTpgInljLrvvIzmoLnmja7lkb3ku6Tov5Tlm57nm7jlhbPnmoTlgLxcclxuXHQgICAgICAgICAqIEBtZXRob2QgcXVlcnlDb21tYW5kVmFsdWVcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZE5hbWUg6ZyA6KaB5p+l6K+i55qE5ZG95Luk5ZCN56ewXHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOWFt+S9k+WRveS7pOeahOS9v+eUqOivt+WPguiAgzxhIGhyZWY9XCIjQ09NTUFORC5MSVNUXCI+5ZG95Luk5YiX6KGoPC9hPlxyXG5cdCAgICAgICAgICogQHJlbWluZCDlj6rmnInpg6jliIbmj5Lku7bmnInmraTmlrnms5VcclxuXHQgICAgICAgICAqIEByZXR1cm4geyAqIH0g6L+U5Zue5q+P5Liq5ZG95Luk54m55a6a55qE5b2T5YmN54q25oCB5YC8XHJcblx0ICAgICAgICAgKiBAZ3JhbW1hciBlZGl0b3IucXVlcnlDb21tYW5kVmFsdWUoY21kTmFtZSkgID0+ICB7Kn1cclxuXHQgICAgICAgICAqIEBzZWUgQ09NTUFORC5MSVNUXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFZhbHVlOiBmdW5jdGlvbiAoY21kTmFtZSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWxsQ21kRm4oJ3F1ZXJ5Q29tbWFuZFZhbHVlJywgYXJndW1lbnRzKTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmo4Dmn6XnvJbovpHljLrln5/kuK3mmK/lkKbmnInlhoXlrrlcclxuXHQgICAgICAgICAqIEBtZXRob2QgIGhhc0NvbnRlbnRzXHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOm7mOiupOacieaWh+acrOWGheWuue+8jOaIluiAheacieS7peS4i+iKgueCuemDveS4jeiupOS4uuaYr+epulxyXG5cdCAgICAgICAgICogdGFibGUsdWwsb2wsZGwsaWZyYW1lLGFyZWEsYmFzZSxjb2wsaHIsaW1nLGVtYmVkLGlucHV0LGxpbmssbWV0YSxwYXJhbVxyXG5cdCAgICAgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDmo4Dmn6XmnInlhoXlrrnov5Tlm550cnVl77yM5ZCm5YiZ6L+U5ZueZmFsc2VcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3IuaGFzQ29udGVudHMoKVxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOajgOafpee8lui+keWMuuWfn+S4reaYr+WQpuacieWGheWuue+8jOiLpeWMheWQq+WPguaVsHRhZ3PkuK3nmoToioLngrnnsbvlnovvvIznm7TmjqXov5Tlm550cnVlXHJcblx0ICAgICAgICAgKiBAbWV0aG9kICBoYXNDb250ZW50c1xyXG5cdCAgICAgICAgICogQHBhcmFtIHsgQXJyYXkgfSB0YWdzIOS8oOWFpeaVsOe7hOWIpOaWreaXtueUqOWIsOeahOiKgueCueexu+Wei1xyXG5cdCAgICAgICAgICogQHJldHVybiB7IEJvb2xlYW4gfSDoi6XmlofmoaPkuK3ljIXlkKt0YWdz5pWw57uE6YeM5a+55bqU55qEdGFn77yM6L+U5ZuedHJ1Ze+8jOWQpuWImei/lOWbnmZhbHNlXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogZWRpdG9yLmhhc0NvbnRlbnRzKFsnc3BhbiddKTtcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBoYXNDb250ZW50czogZnVuY3Rpb24gKHRhZ3MpIHtcclxuXHQgICAgICAgICAgICBpZiAodGFncykge1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gdGFnc1tpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoY2kpLmxlbmd0aCA+IDApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoIWRvbVV0aWxzLmlzRW1wdHlCbG9jayh0aGlzLmJvZHkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIC8v6ZqP5pe25re75YqgLOWumuS5ieeahOeJueauiuagh+etvuWmguaenOWtmOWcqO+8jOS4jeiDveiupOS4uuaYr+epulxyXG5cdCAgICAgICAgICAgIHRhZ3MgPSBbJ2RpdiddO1xyXG5cdCAgICAgICAgICAgIGZvciAoaSA9IDA7IGNpID0gdGFnc1tpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbm9kZXMgPSBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh0aGlzLmRvY3VtZW50LCBjaSk7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIG4gPSAwLCBjbjsgY24gPSBub2Rlc1tuKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzQ3VzdG9tZU5vZGUoY24pKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOmHjee9rue8lui+keWZqO+8jOWPr+eUqOadpeWBmuWkmuS4qnRhYuS9v+eUqOWQjOS4gOS4que8lui+keWZqOWunuS+i1xyXG5cdCAgICAgICAgICogQG1ldGhvZCAgcmVzZXRcclxuXHQgICAgICAgICAqIEByZW1pbmQg5q2k5pa55rOV5Lya5riF56m657yW6L6R5Zmo5YaF5a6577yM5riF56m65Zue6YCA5YiX6KGo77yM5Lya6Kem5Y+RcmVzZXTkuovku7ZcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3IucmVzZXQoKVxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3Jlc2V0Jyk7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6K6+572u5b2T5YmN57yW6L6R5Yy65Z+f5Y+v5Lul57yW6L6RXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHNldEVuYWJsZWRcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3Iuc2V0RW5hYmxlZCgpXHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgc2V0RW5hYmxlZDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsIHJhbmdlO1xyXG5cdCAgICAgICAgICAgIGlmIChtZS5ib2R5LmNvbnRlbnRFZGl0YWJsZSA9PSAnZmFsc2UnKSB7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmJvZHkuY29udGVudEVkaXRhYmxlID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgLy/mnInlj6/og73lhoXlrrnkuKLlpLHkuoZcclxuXHQgICAgICAgICAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVUb0Jvb2ttYXJrKG1lLmxhc3RCayk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWUubGFzdEJrXHJcblx0ICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QXRGaXJzdChtZS5ib2R5KS5jb2xsYXBzZSh0cnVlKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdCh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG1lLmJrcXVlcnlDb21tYW5kU3RhdGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLnF1ZXJ5Q29tbWFuZFN0YXRlID0gbWUuYmtxdWVyeUNvbW1hbmRTdGF0ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtZS5ia3F1ZXJ5Q29tbWFuZFN0YXRlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChtZS5ia3F1ZXJ5Q29tbWFuZFZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5xdWVyeUNvbW1hbmRWYWx1ZSA9IG1lLmJrcXVlcnlDb21tYW5kVmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWUuYmtxdWVyeUNvbW1hbmRWYWx1ZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NlbGVjdGlvbmNoYW5nZScpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBlbmFibGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXRFbmFibGVkKCk7XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKiDorr7nva7lvZPliY3nvJbovpHljLrln5/kuI3lj6/nvJbovpFcclxuXHQgICAgICAgICAqIEBtZXRob2Qgc2V0RGlzYWJsZWRcclxuXHQgICAgICAgICAqL1xyXG5cclxuXHQgICAgICAgIC8qKiDorr7nva7lvZPliY3nvJbovpHljLrln5/kuI3lj6/nvJbovpEsZXhjZXB05Lit55qE5ZG95Luk6Zmk5aSWXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHNldERpc2FibGVkXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBleGNlcHQg5L6L5aSW5ZG95Luk55qE5a2X56ym5LiyXHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOWNs+S9v+iuvue9ruS6hmRpc2FibGXvvIzmraTlpITphY3nva7nmoTkvovlpJblkb3ku6Tku43nhLblj6/ku6XmiafooYxcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3Iuc2V0RGlzYWJsZWQoJ2JvbGQnKTsgLy/npoHnlKjlt6XlhbfmoI/kuK3pmaTliqDnspfkuYvlpJbnmoTmiYDmnInlip/og71cclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblxyXG5cdCAgICAgICAgLyoqIOiuvue9ruW9k+WJjee8lui+keWMuuWfn+S4jeWPr+e8lui+kSxleGNlcHTkuK3nmoTlkb3ku6TpmaTlpJZcclxuXHQgICAgICAgICAqIEBtZXRob2Qgc2V0RGlzYWJsZWRcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IEFycmF5IH0gZXhjZXB0IOS+i+WkluWRveS7pOeahOWtl+espuS4suaVsOe7hO+8jOaVsOe7hOS4reeahOWRveS7pOS7jeeEtuWPr+S7peaJp+ihjFxyXG5cdCAgICAgICAgICogQHJlbWluZCDljbPkvb/orr7nva7kuoZkaXNhYmxl77yM5q2k5aSE6YWN572u55qE5L6L5aSW5ZG95Luk5LuN54S25Y+v5Lul5omn6KGMXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogZWRpdG9yLnNldERpc2FibGVkKFsnYm9sZCcsJ2luc2VydGltYWdlJ10pOyAvL+emgeeUqOW3peWFt+agj+S4remZpOWKoOeyl+WSjOaPkuWFpeWbvueJh+S5i+WklueahOaJgOacieWKn+iDvVxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHNldERpc2FibGVkOiBmdW5jdGlvbiAoZXhjZXB0KSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICBleGNlcHQgPSBleGNlcHQgPyB1dGlscy5pc0FycmF5KGV4Y2VwdCkgPyBleGNlcHQgOiBbZXhjZXB0XSA6IFtdO1xyXG5cdCAgICAgICAgICAgIGlmIChtZS5ib2R5LmNvbnRlbnRFZGl0YWJsZSA9PSAndHJ1ZScpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCFtZS5sYXN0QmspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmxhc3RCayA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpLmNyZWF0ZUJvb2ttYXJrKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIG1lLmJvZHkuY29udGVudEVkaXRhYmxlID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmJrcXVlcnlDb21tYW5kU3RhdGUgPSBtZS5xdWVyeUNvbW1hbmRTdGF0ZTtcclxuXHQgICAgICAgICAgICAgICAgbWUuYmtxdWVyeUNvbW1hbmRWYWx1ZSA9IG1lLnF1ZXJ5Q29tbWFuZFZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICBtZS5xdWVyeUNvbW1hbmRTdGF0ZSA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodXRpbHMuaW5kZXhPZihleGNlcHQsIHR5cGUpICE9IC0xKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lLmJrcXVlcnlDb21tYW5kU3RhdGUuYXBwbHkobWUsIGFyZ3VtZW50cyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcblx0ICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgIG1lLnF1ZXJ5Q29tbWFuZFZhbHVlID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh1dGlscy5pbmRleE9mKGV4Y2VwdCwgdHlwZSkgIT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWUuYmtxdWVyeUNvbW1hbmRWYWx1ZS5hcHBseShtZSwgYXJndW1lbnRzKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NlbGVjdGlvbmNoYW5nZScpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBkaXNhYmxlOiBmdW5jdGlvbiAoZXhjZXB0KSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0RGlzYWJsZWQoZXhjZXB0KTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDorr7nva7pu5jorqTlhoXlrrlcclxuXHQgICAgICAgICAqIEBtZXRob2QgX3NldERlZmF1bHRDb250ZW50XHJcblx0ICAgICAgICAgKiBAcHJpdmF0ZVxyXG5cdCAgICAgICAgICogQHBhcmFtICB7IFN0cmluZyB9IGNvbnQg6KaB5a2Y5YWl55qE5YaF5a65XHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIF9zZXREZWZhdWx0Q29udGVudDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyKCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobWUuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2luaXRDb250ZW50JykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmJvZHkuaW5uZXJIVE1MID0gJzxwPicgKyAoaWUgPyAnJyA6ICc8YnIvPicpICsgJzwvcD4nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUucmVtb3ZlTGlzdGVuZXIoJ2ZpcnN0QmVmb3JlRXhlY0NvbW1hbmQgZm9jdXMnLCBjbGVhcik7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5mb2N1cygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLl9zZWxlY3Rpb25DaGFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0sIDApXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoY29udCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgICAgICBtZS5ib2R5LmlubmVySFRNTCA9ICc8cCBpZD1cImluaXRDb250ZW50XCI+JyArIGNvbnQgKyAnPC9wPic7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBtZS5hZGRMaXN0ZW5lcignZmlyc3RCZWZvcmVFeGVjQ29tbWFuZCBmb2N1cycsIGNsZWFyKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9KCksXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmmL7npLrnvJbovpHlmahcclxuXHQgICAgICAgICAqIEBtZXRob2Qgc2V0U2hvd1xyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5zZXRTaG93KClcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBzZXRTaG93OiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcywgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICBpZiAobWUuY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnKSB7XHJcblx0ICAgICAgICAgICAgICAgIC8v5pyJ5Y+v6IO95YaF5a655Lii5aSx5LqGXHJcblx0ICAgICAgICAgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlVG9Cb29rbWFyayhtZS5sYXN0QmspO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lLmxhc3RCa1xyXG5cdCAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEF0Rmlyc3QobWUuYm9keSkuY29sbGFwc2UodHJ1ZSlcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAvL2ll5LiLZm9jdXPlrp7mlYjvvIzmiYDku6XlgZrkuobkuKrlu7bov59cclxuXHQgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3QodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIH0sIDEwMCk7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzaG93OiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0U2hvdygpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6ZqQ6JeP57yW6L6R5ZmoXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHNldEhpZGVcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBlZGl0b3Iuc2V0SGlkZSgpXHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgc2V0SGlkZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgaWYgKCFtZS5sYXN0QmspIHtcclxuXHQgICAgICAgICAgICAgICAgbWUubGFzdEJrID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCkuY3JlYXRlQm9va21hcmsodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIG1lLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgaGlkZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnNldEhpZGUoKTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmoLnmja7mjIflrprnmoTot6/lvoTvvIzojrflj5blr7nlupTnmoTor63oqIDotYTmupBcclxuXHQgICAgICAgICAqIEBtZXRob2QgZ2V0TGFuZ1xyXG5cdCAgICAgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gcGF0aCDot6/lvoTmoLnmja7nmoTmmK9sYW5n55uu5b2V5LiL55qE6K+t6KiA5paH5Lu255qE6Lev5b6E57uT5p6EXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgT2JqZWN0IHwgU3RyaW5nIH0g5qC55o2u6Lev5b6E6L+U5Zue6K+t6KiA6LWE5rqQ55qESnNvbuagvOW8j+WvueixoeaIluiAheivreiogOWtl+espuS4slxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5nZXRMYW5nKCdjb250ZXh0TWVudS5kZWxldGUnKTsgLy/lpoLmnpzlvZPliY3mmK/kuK3mlofvvIzpgqPov5Tlm57mmK/nmoTmmK8n5Yig6ZmkJ1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGdldExhbmc6IGZ1bmN0aW9uIChwYXRoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGxhbmcgPSBVRS5JMThOW3RoaXMub3B0aW9ucy5sYW5nXTtcclxuXHQgICAgICAgICAgICBpZiAoIWxhbmcpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJub3QgaW1wb3J0IGxhbmd1YWdlIGZpbGVcIik7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHBhdGggPSAocGF0aCB8fCBcIlwiKS5zcGxpdChcIi5cIik7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHBhdGhbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgbGFuZyA9IGxhbmdbY2ldO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIWxhbmcpYnJlYWs7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiBsYW5nO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiuoeeul+e8lui+keWZqGh0bWzlhoXlrrnlrZfnrKbkuLLnmoTplb/luqZcclxuXHQgICAgICAgICAqIEBtZXRob2QgIGdldENvbnRlbnRMZW5ndGhcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBOdW1iZXIgfSDov5Tlm57orqHnrpfnmoTplb/luqZcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiAvL+e8lui+keWZqGh0bWzlhoXlrrk8cD48c3Ryb25nPjEzMjwvc3Ryb25nPjwvcD5cclxuXHQgICAgICAgICAqIGVkaXRvci5nZXRDb250ZW50TGVuZ3RoKCkgLy/ov5Tlm54yN1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6K6h566X57yW6L6R5Zmo5b2T5YmN57qv5paH5pys5YaF5a6555qE6ZW/5bqmXHJcblx0ICAgICAgICAgKiBAbWV0aG9kICBnZXRDb250ZW50TGVuZ3RoXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gaW5nb25lSHRtbCDkvKDlhaV0cnVl5pe277yM5Y+q5oyJ54Wn57qv5paH5pys5p2l6K6h566XXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgTnVtYmVyIH0g6L+U5Zue6K6h566X55qE6ZW/5bqm77yM5YaF5a655Lit5pyJaHIvaW1nL2lmcmFtZeagh+etvu+8jOmVv+W6puWKoDFcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiAvL+e8lui+keWZqGh0bWzlhoXlrrk8cD48c3Ryb25nPjEzMjwvc3Ryb25nPjwvcD5cclxuXHQgICAgICAgICAqIGVkaXRvci5nZXRDb250ZW50TGVuZ3RoKCkgLy/ov5Tlm54zXHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0Q29udGVudExlbmd0aDogZnVuY3Rpb24gKGluZ29uZUh0bWwsIHRhZ05hbWVzKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5nZXRDb250ZW50KGZhbHNlLGZhbHNlLHRydWUpLmxlbmd0aDtcclxuXHQgICAgICAgICAgICBpZiAoaW5nb25lSHRtbCkge1xyXG5cdCAgICAgICAgICAgICAgICB0YWdOYW1lcyA9ICh0YWdOYW1lcyB8fCBbXSkuY29uY2F0KFsgJ2hyJywgJ2ltZycsICdpZnJhbWUnXSk7XHJcblx0ICAgICAgICAgICAgICAgIGNvdW50ID0gdGhpcy5nZXRDb250ZW50VHh0KCkucmVwbGFjZSgvW1xcdFxcclxcbl0rL2csICcnKS5sZW5ndGg7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSB0YWdOYW1lc1tpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gdGhpcy5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShjaSkubGVuZ3RoO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiBjb3VudDtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDms6jlhozovpPlhaXov4fmu6Top4TliJlcclxuXHQgICAgICAgICAqIEBtZXRob2QgIGFkZElucHV0UnVsZVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBydWxlIOimgea3u+WKoOeahOi/h+a7pOinhOWImVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5hZGRJbnB1dFJ1bGUoZnVuY3Rpb24ocm9vdCl7XHJcblx0ICAgICAgICAgKiAgICQuZWFjaChyb290LmdldE5vZGVzQnlUYWdOYW1lKCdkaXYnKSxmdW5jdGlvbihpLG5vZGUpe1xyXG5cdCAgICAgICAgICogICAgICAgbm9kZS50YWdOYW1lPVwicFwiO1xyXG5cdCAgICAgICAgICogICB9KTtcclxuXHQgICAgICAgICAqIH0pO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGFkZElucHV0UnVsZTogZnVuY3Rpb24gKHJ1bGUpIHtcclxuXHQgICAgICAgICAgICB0aGlzLmlucHV0UnVsZXMucHVzaChydWxlKTtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmiafooYzms6jlhoznmoTov4fmu6Top4TliJlcclxuXHQgICAgICAgICAqIEBtZXRob2QgIGZpbHRlcklucHV0UnVsZVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgVUUudU5vZGUgfSByb290IOimgei/h+a7pOeahHVOb2Rl6IqC54K5XHJcblx0ICAgICAgICAgKiBAcmVtaW5kIOaJp+ihjGVkaXRvci5zZXRDb250ZW505pa55rOV5ZKM5omn6KGMJ2luc2VydGh0bWwn5ZG95Luk5ZCO77yM5Lya6L+Q6KGM6K+l6L+H5ruk5Ye95pWwXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogZWRpdG9yLmZpbHRlcklucHV0UnVsZShlZGl0b3IuYm9keSk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqIEBzZWUgVUUuRWRpdG9yOmFkZElucHV0UnVsZVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBmaWx0ZXJJbnB1dFJ1bGU6IGZ1bmN0aW9uIChyb290KSB7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHRoaXMuaW5wdXRSdWxlc1tpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICBjaS5jYWxsKHRoaXMsIHJvb3QpXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOazqOWGjOi+k+WHuui/h+a7pOinhOWImVxyXG5cdCAgICAgICAgICogQG1ldGhvZCAgYWRkT3V0cHV0UnVsZVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBydWxlIOimgea3u+WKoOeahOi/h+a7pOinhOWImVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5hZGRPdXRwdXRSdWxlKGZ1bmN0aW9uKHJvb3Qpe1xyXG5cdCAgICAgICAgICogICAkLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgncCcpLGZ1bmN0aW9uKGksbm9kZSl7XHJcblx0ICAgICAgICAgKiAgICAgICBub2RlLnRhZ05hbWU9XCJkaXZcIjtcclxuXHQgICAgICAgICAqICAgfSk7XHJcblx0ICAgICAgICAgKiB9KTtcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBhZGRPdXRwdXRSdWxlOiBmdW5jdGlvbiAocnVsZSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMub3V0cHV0UnVsZXMucHVzaChydWxlKVxyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOagueaNrui+k+WHuui/h+a7pOinhOWIme+8jOi/h+a7pOe8lui+keWZqOWGheWuuVxyXG5cdCAgICAgICAgICogQG1ldGhvZCAgZmlsdGVyT3V0cHV0UnVsZVxyXG5cdCAgICAgICAgICogQHJlbWluZCDmiafooYxlZGl0b3IuZ2V0Q29udGVudOaWueazleeahOaXtuWAme+8jOS8muWFiOi/kOihjOivpei/h+a7pOWHveaVsFxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgVUUudU5vZGUgfSByb290IOimgei/h+a7pOeahHVOb2Rl6IqC54K5XHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogZWRpdG9yLmZpbHRlck91dHB1dFJ1bGUoZWRpdG9yLmJvZHkpO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKiBAc2VlIFVFLkVkaXRvcjphZGRPdXRwdXRSdWxlXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGZpbHRlck91dHB1dFJ1bGU6IGZ1bmN0aW9uIChyb290KSB7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHRoaXMub3V0cHV0UnVsZXNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgY2kuY2FsbCh0aGlzLCByb290KVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmoLnmja5hY3Rpb27lkI3np7Dojrflj5bor7fmsYLnmoTot6/lvoRcclxuXHQgICAgICAgICAqIEBtZXRob2QgIGdldEFjdGlvblVybFxyXG5cdCAgICAgICAgICogQHJlbWluZCDlgYflpoLmsqHmnInorr7nva5zZXJ2ZXJVcmws5Lya5qC55o2uaW1hZ2VVcmzorr7nva7pu5jorqTnmoRjb250cm9sbGVy6Lev5b6EXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBhY3Rpb24gYWN0aW9u5ZCN56ewXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogZWRpdG9yLmdldEFjdGlvblVybCgnY29uZmlnJyk7IC8v6L+U5ZueIFwiL3VlZGl0b3IvcGhwL2NvbnRyb2xsZXIucGhwP2FjdGlvbj1jb25maWdcIlxyXG5cdCAgICAgICAgICogZWRpdG9yLmdldEFjdGlvblVybCgnaW1hZ2UnKTsgLy/ov5Tlm54gXCIvdWVkaXRvci9waHAvY29udHJvbGxlci5waHA/YWN0aW9uPXVwbGFvZGltYWdlXCJcclxuXHQgICAgICAgICAqIGVkaXRvci5nZXRBY3Rpb25VcmwoJ3NjcmF3bCcpOyAvL+i/lOWbniBcIi91ZWRpdG9yL3BocC9jb250cm9sbGVyLnBocD9hY3Rpb249dXBsYW9kc2NyYXdsXCJcclxuXHQgICAgICAgICAqIGVkaXRvci5nZXRBY3Rpb25VcmwoJ2ltYWdlTWFuYWdlcicpOyAvL+i/lOWbniBcIi91ZWRpdG9yL3BocC9jb250cm9sbGVyLnBocD9hY3Rpb249bGlzdGltYWdlXCJcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBnZXRBY3Rpb25Vcmw6IGZ1bmN0aW9uKGFjdGlvbil7XHJcblx0ICAgICAgICAgICAgdmFyIGFjdGlvbk5hbWUgPSB0aGlzLmdldE9wdChhY3Rpb24pIHx8IGFjdGlvbixcclxuXHQgICAgICAgICAgICAgICAgaW1hZ2VVcmwgPSB0aGlzLmdldE9wdCgnaW1hZ2VVcmwnKSxcclxuXHQgICAgICAgICAgICAgICAgc2VydmVyVXJsID0gdGhpcy5nZXRPcHQoJ3NlcnZlclVybCcpO1xyXG5cclxuXHQgICAgICAgICAgICBpZighc2VydmVyVXJsICYmIGltYWdlVXJsKSB7XHJcblx0ICAgICAgICAgICAgICAgIHNlcnZlclVybCA9IGltYWdlVXJsLnJlcGxhY2UoL14oLipbXFwvXSkuKyhbXFwuXS4rKSQvLCAnJDFjb250cm9sbGVyJDInKTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIGlmKHNlcnZlclVybCkge1xyXG5cdCAgICAgICAgICAgICAgICBzZXJ2ZXJVcmwgPSBzZXJ2ZXJVcmwgKyAoc2VydmVyVXJsLmluZGV4T2YoJz8nKSA9PSAtMSA/ICc/JzonJicpICsgJ2FjdGlvbj0nICsgKGFjdGlvbk5hbWUgfHwgJycpO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdXRpbHMuZm9ybWF0VXJsKHNlcnZlclVybCk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgdXRpbHMuaW5oZXJpdHMoRWRpdG9yLCBFdmVudEJhc2UpO1xyXG5cdH0pKCk7XHJcblxyXG5cclxuXHQvLyBjb3JlL0VkaXRvci5kZWZhdWx0b3B0aW9ucy5qc1xyXG5cdC8v57u05oqk57yW6L6R5Zmo5LiA5LiL6buY6K6k55qE5LiN5Zyo5o+S5Lu25Lit55qE6YWN572u6aG5XHJcblx0VUUuRWRpdG9yLmRlZmF1bHRPcHRpb25zID0gZnVuY3Rpb24oZWRpdG9yKXtcclxuXHJcblx0ICAgIHZhciBfdXJsID0gZWRpdG9yLm9wdGlvbnMuVUVESVRPUl9IT01FX1VSTDtcclxuXHQgICAgcmV0dXJuIHtcclxuXHQgICAgICAgIGlzU2hvdzogdHJ1ZSxcclxuXHQgICAgICAgIGluaXRpYWxDb250ZW50OiAnJyxcclxuXHQgICAgICAgIGluaXRpYWxTdHlsZTonJyxcclxuXHQgICAgICAgIGF1dG9DbGVhcmluaXRpYWxDb250ZW50OiBmYWxzZSxcclxuXHQgICAgICAgIGlmcmFtZUNzc1VybDogX3VybCArICd0aGVtZXMvaWZyYW1lLmNzcycsXHJcblx0ICAgICAgICB0ZXh0YXJlYTogJ2VkaXRvclZhbHVlJyxcclxuXHQgICAgICAgIGZvY3VzOiBmYWxzZSxcclxuXHQgICAgICAgIGZvY3VzSW5FbmQ6IHRydWUsXHJcblx0ICAgICAgICBhdXRvQ2xlYXJFbXB0eU5vZGU6IHRydWUsXHJcblx0ICAgICAgICBmdWxsc2NyZWVuOiBmYWxzZSxcclxuXHQgICAgICAgIHJlYWRvbmx5OiBmYWxzZSxcclxuXHQgICAgICAgIHpJbmRleDogOTk5LFxyXG5cdCAgICAgICAgaW1hZ2VQb3B1cDogdHJ1ZSxcclxuXHQgICAgICAgIGVudGVyVGFnOiAncCcsXHJcblx0ICAgICAgICBjdXN0b21Eb21haW46IGZhbHNlLFxyXG5cdCAgICAgICAgbGFuZzogJ3poLWNuJyxcclxuXHQgICAgICAgIGxhbmdQYXRoOiBfdXJsICsgJ2xhbmcvJyxcclxuXHQgICAgICAgIHRoZW1lOiAnZGVmYXVsdCcsXHJcblx0ICAgICAgICB0aGVtZVBhdGg6IF91cmwgKyAndGhlbWVzLycsXHJcblx0ICAgICAgICBhbGxIdG1sRW5hYmxlZDogZmFsc2UsXHJcblx0ICAgICAgICBzY2FsZUVuYWJsZWQ6IGZhbHNlLFxyXG5cdCAgICAgICAgdGFibGVOYXRpdmVFZGl0SW5GRjogZmFsc2UsXHJcblx0ICAgICAgICBhdXRvU3luY0RhdGEgOiB0cnVlLFxyXG5cdCAgICAgICAgZmlsZU5hbWVGb3JtYXQ6ICd7dGltZX17cmFuZDo2fSdcclxuXHQgICAgfVxyXG5cdH07XHJcblxyXG5cdC8vIGNvcmUvbG9hZGNvbmZpZy5qc1xyXG5cdChmdW5jdGlvbigpe1xyXG5cclxuXHQgICAgVUUuRWRpdG9yLnByb3RvdHlwZS5sb2FkU2VydmVyQ29uZmlnID0gZnVuY3Rpb24oKXtcclxuXHQgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgdHJ5e1xyXG5cdCAgICAgICAgICAgICAgICBtZS5vcHRpb25zLmltYWdlVXJsICYmIG1lLnNldE9wdCgnc2VydmVyVXJsJywgbWUub3B0aW9ucy5pbWFnZVVybC5yZXBsYWNlKC9eKC4qW1xcL10pLisoW1xcLl0uKykkLywgJyQxY29udHJvbGxlciQyJykpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdmFyIGNvbmZpZ1VybCA9IG1lLmdldEFjdGlvblVybCgnY29uZmlnJyksXHJcblx0ICAgICAgICAgICAgICAgICAgICBpc0pzb25wID0gdXRpbHMuaXNDcm9zc0RvbWFpblVybChjb25maWdVcmwpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgLyog5Y+R5Ye6YWpheOivt+axgiAqL1xyXG5cdCAgICAgICAgICAgICAgICBtZS5fc2VydmVyQ29uZmlnTG9hZGVkID0gZmFsc2U7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBjb25maWdVcmwgJiYgVUUuYWpheC5yZXF1ZXN0KGNvbmZpZ1VybCx7XHJcblx0ICAgICAgICAgICAgICAgICAgICAnbWV0aG9kJzogJ0dFVCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAnZGF0YVR5cGUnOiBpc0pzb25wID8gJ2pzb25wJzonJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICdvbnN1Y2Nlc3MnOmZ1bmN0aW9uKHIpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb25maWcgPSBpc0pzb25wID8gcjpldmFsKFwiKFwiK3IucmVzcG9uc2VUZXh0K1wiKVwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuZXh0ZW5kKG1lLm9wdGlvbnMsIGNvbmZpZyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnc2VydmVyQ29uZmlnTG9hZGVkJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLl9zZXJ2ZXJDb25maWdMb2FkZWQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0Vycm9yTXNnKG1lLmdldExhbmcoJ2xvYWRjb25maWdGb3JtYXRFcnJvcicpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgJ29uZXJyb3InOmZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0Vycm9yTXNnKG1lLmdldExhbmcoJ2xvYWRjb25maWdIdHRwRXJyb3InKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIH0gY2F0Y2goZSl7XHJcblx0ICAgICAgICAgICAgICAgIHNob3dFcnJvck1zZyhtZS5nZXRMYW5nKCdsb2FkY29uZmlnRXJyb3InKSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgZnVuY3Rpb24gc2hvd0Vycm9yTXNnKG1zZykge1xyXG5cdCAgICAgICAgICAgIGNvbnNvbGUgJiYgY29uc29sZS5lcnJvcihtc2cpO1xyXG5cdCAgICAgICAgICAgIC8vbWUuZmlyZUV2ZW50KCdzaG93TWVzc2FnZScsIHtcclxuXHQgICAgICAgICAgICAvLyAgICAndGl0bGUnOiBtc2csXHJcblx0ICAgICAgICAgICAgLy8gICAgJ3R5cGUnOiAnZXJyb3InXHJcblx0ICAgICAgICAgICAgLy99KTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHJcblx0ICAgIFVFLkVkaXRvci5wcm90b3R5cGUuaXNTZXJ2ZXJDb25maWdMb2FkZWQgPSBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgIHJldHVybiBtZS5fc2VydmVyQ29uZmlnTG9hZGVkIHx8IGZhbHNlO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgVUUuRWRpdG9yLnByb3RvdHlwZS5hZnRlckNvbmZpZ1JlYWR5ID0gZnVuY3Rpb24oaGFuZGxlcil7XHJcblx0ICAgICAgICBpZiAoIWhhbmRsZXIgfHwgIXV0aWxzLmlzRnVuY3Rpb24oaGFuZGxlcikpIHJldHVybjtcclxuXHQgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICB2YXIgcmVhZHlIYW5kbGVyID0gZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICBoYW5kbGVyLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xyXG5cdCAgICAgICAgICAgIG1lLnJlbW92ZUxpc3RlbmVyKCdzZXJ2ZXJDb25maWdMb2FkZWQnLCByZWFkeUhhbmRsZXIpO1xyXG5cdCAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICBpZiAobWUuaXNTZXJ2ZXJDb25maWdMb2FkZWQoKSkge1xyXG5cdCAgICAgICAgICAgIGhhbmRsZXIuY2FsbChtZSwgJ3NlcnZlckNvbmZpZ0xvYWRlZCcpO1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICBtZS5hZGRMaXN0ZW5lcignc2VydmVyQ29uZmlnTG9hZGVkJywgcmVhZHlIYW5kbGVyKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHJcblx0fSkoKTtcclxuXHJcblxyXG5cdC8vIGNvcmUvYWpheC5qc1xyXG5cdC8qKlxyXG5cdCAqIEBmaWxlXHJcblx0ICogQG1vZHVsZSBVRS5hamF4XHJcblx0ICogQHNpbmNlIDEuMi42LjFcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog5o+Q5L6b5a+5YWpheOivt+axgueahOaUr+aMgVxyXG5cdCAqIEBtb2R1bGUgVUUuYWpheFxyXG5cdCAqL1xyXG5cdFVFLmFqYXggPSBmdW5jdGlvbigpIHtcclxuXHJcblx0ICAgIC8v5Yib5bu65LiA5LiqYWpheFJlcXVlc3Tlr7nosaFcclxuXHQgICAgdmFyIGZuU3RyID0gJ1hNTEh0dHBSZXF1ZXN0KCknO1xyXG5cdCAgICB0cnkge1xyXG5cdCAgICAgICAgbmV3IEFjdGl2ZVhPYmplY3QoXCJNc3htbDIuWE1MSFRUUFwiKTtcclxuXHQgICAgICAgIGZuU3RyID0gJ0FjdGl2ZVhPYmplY3QoXFwnTXN4bWwyLlhNTEhUVFBcXCcpJztcclxuXHQgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICBuZXcgQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxIVFRQXCIpO1xyXG5cdCAgICAgICAgICAgIGZuU3RyID0gJ0FjdGl2ZVhPYmplY3QoXFwnTWljcm9zb2Z0LlhNTEhUVFBcXCcpJ1xyXG5cdCAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICAgIHZhciBjcmVhdEFqYXhSZXF1ZXN0ID0gbmV3IEZ1bmN0aW9uKCdyZXR1cm4gbmV3ICcgKyBmblN0cik7XHJcblxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWwhmpzb27lj4LmlbDovazljJbmiJDpgILlkIhhamF45o+Q5Lqk55qE5Y+C5pWw5YiX6KGoXHJcblx0ICAgICAqIEBwYXJhbSBqc29uXHJcblx0ICAgICAqL1xyXG5cdCAgICBmdW5jdGlvbiBqc29uMnN0cihqc29uKSB7XHJcblx0ICAgICAgICB2YXIgc3RyQXJyID0gW107XHJcblx0ICAgICAgICBmb3IgKHZhciBpIGluIGpzb24pIHtcclxuXHQgICAgICAgICAgICAvL+W/veeVpem7mOiupOeahOWHoOS4quWPguaVsFxyXG5cdCAgICAgICAgICAgIGlmKGk9PVwibWV0aG9kXCIgfHwgaT09XCJ0aW1lb3V0XCIgfHwgaT09XCJhc3luY1wiIHx8IGk9PVwiZGF0YVR5cGVcIiB8fCBpPT1cImNhbGxiYWNrXCIpIGNvbnRpbnVlO1xyXG5cdCAgICAgICAgICAgIC8v5b+955Wl5o6n5Yi2XHJcblx0ICAgICAgICAgICAgaWYoanNvbltpXSA9PSB1bmRlZmluZWQgfHwganNvbltpXSA9PSBudWxsKSBjb250aW51ZTtcclxuXHQgICAgICAgICAgICAvL+S8oOmAkui/h+adpeeahOWvueixoeWSjOWHveaVsOS4jeWcqOaPkOS6pOS5i+WIl1xyXG5cdCAgICAgICAgICAgIGlmICghKCh0eXBlb2YganNvbltpXSkudG9Mb3dlckNhc2UoKSA9PSBcImZ1bmN0aW9uXCIgfHwgKHR5cGVvZiBqc29uW2ldKS50b0xvd2VyQ2FzZSgpID09IFwib2JqZWN0XCIpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHN0ckFyci5wdXNoKCBlbmNvZGVVUklDb21wb25lbnQoaSkgKyBcIj1cIitlbmNvZGVVUklDb21wb25lbnQoanNvbltpXSkgKTtcclxuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoanNvbltpXSkpIHtcclxuXHQgICAgICAgICAgICAvL+aUr+aMgeS8oOaVsOe7hOWGheWuuVxyXG5cdCAgICAgICAgICAgICAgICBmb3IodmFyIGogPSAwOyBqIDwganNvbltpXS5sZW5ndGg7IGorKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RyQXJyLnB1c2goIGVuY29kZVVSSUNvbXBvbmVudChpKSArIFwiW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGpzb25baV1bal0pICk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gc3RyQXJyLmpvaW4oXCImXCIpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBkb0FqYXgodXJsLCBhamF4T3B0aW9ucykge1xyXG5cdCAgICAgICAgdmFyIHhociA9IGNyZWF0QWpheFJlcXVlc3QoKSxcclxuXHQgICAgICAgIC8v5piv5ZCm6LaF5pe2XHJcblx0ICAgICAgICAgICAgdGltZUlzT3V0ID0gZmFsc2UsXHJcblx0ICAgICAgICAvL+m7mOiupOWPguaVsFxyXG5cdCAgICAgICAgICAgIGRlZmF1bHRBamF4T3B0aW9ucyA9IHtcclxuXHQgICAgICAgICAgICAgICAgbWV0aG9kOlwiUE9TVFwiLFxyXG5cdCAgICAgICAgICAgICAgICB0aW1lb3V0OjUwMDAsXHJcblx0ICAgICAgICAgICAgICAgIGFzeW5jOnRydWUsXHJcblx0ICAgICAgICAgICAgICAgIGRhdGE6e30sLy/pnIDopoHkvKDpgJLlr7nosaHnmoTor53lj6rog73opobnm5ZcclxuXHQgICAgICAgICAgICAgICAgb25zdWNjZXNzOmZ1bmN0aW9uKCkge1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICBvbmVycm9yOmZ1bmN0aW9uKCkge1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICBpZiAodHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIikge1xyXG5cdCAgICAgICAgICAgIGFqYXhPcHRpb25zID0gdXJsO1xyXG5cdCAgICAgICAgICAgIHVybCA9IGFqYXhPcHRpb25zLnVybDtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmICgheGhyIHx8ICF1cmwpIHJldHVybjtcclxuXHQgICAgICAgIHZhciBhamF4T3B0cyA9IGFqYXhPcHRpb25zID8gdXRpbHMuZXh0ZW5kKGRlZmF1bHRBamF4T3B0aW9ucyxhamF4T3B0aW9ucykgOiBkZWZhdWx0QWpheE9wdGlvbnM7XHJcblxyXG5cdCAgICAgICAgdmFyIHN1Ym1pdFN0ciA9IGpzb24yc3RyKGFqYXhPcHRzKTsgIC8vIHsgbmFtZTpcIkppbVwiLGNpdHk6XCJCZWlqaW5nXCIgfSAtLT4gXCJuYW1lPUppbSZjaXR5PUJlaWppbmdcIlxyXG5cdCAgICAgICAgLy/lpoLmnpznlKjmiLfnm7TmjqXpgJrov4dkYXRh5Y+C5pWw5Lyg6YCSanNvbuWvueixoei/h+adpe+8jOWImeS5n+imgeWwhuatpGpzb27lr7nosaHovazljJbkuLrlrZfnrKbkuLJcclxuXHQgICAgICAgIGlmICghdXRpbHMuaXNFbXB0eU9iamVjdChhamF4T3B0cy5kYXRhKSl7XHJcblx0ICAgICAgICAgICAgc3VibWl0U3RyICs9IChzdWJtaXRTdHI/IFwiJlwiOlwiXCIpICsganNvbjJzdHIoYWpheE9wdHMuZGF0YSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvL+i2heaXtuajgOa1i1xyXG5cdCAgICAgICAgdmFyIHRpbWVySUQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdCAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSAhPSA0KSB7XHJcblx0ICAgICAgICAgICAgICAgIHRpbWVJc091dCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgIHhoci5hYm9ydCgpO1xyXG5cdCAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJRCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSwgYWpheE9wdHMudGltZW91dCk7XHJcblxyXG5cdCAgICAgICAgdmFyIG1ldGhvZCA9IGFqYXhPcHRzLm1ldGhvZC50b1VwcGVyQ2FzZSgpO1xyXG5cdCAgICAgICAgdmFyIHN0ciA9IHVybCArICh1cmwuaW5kZXhPZihcIj9cIik9PS0xP1wiP1wiOlwiJlwiKSArIChtZXRob2Q9PVwiUE9TVFwiP1wiXCI6c3VibWl0U3RyKyBcIiZub0NhY2hlPVwiICsgK25ldyBEYXRlKTtcclxuXHQgICAgICAgIHhoci5vcGVuKG1ldGhvZCwgc3RyLCBhamF4T3B0cy5hc3luYyk7XHJcblx0ICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09IDQpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCF0aW1lSXNPdXQgJiYgeGhyLnN0YXR1cyA9PSAyMDApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGFqYXhPcHRzLm9uc3VjY2Vzcyh4aHIpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYWpheE9wdHMub25lcnJvcih4aHIpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIGlmIChtZXRob2QgPT0gXCJQT1NUXCIpIHtcclxuXHQgICAgICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xyXG5cdCAgICAgICAgICAgIHhoci5zZW5kKHN1Ym1pdFN0cik7XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHhoci5zZW5kKG51bGwpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBkb0pzb25wKHVybCwgb3B0cykge1xyXG5cclxuXHQgICAgICAgIHZhciBzdWNjZXNzaGFuZGxlciA9IG9wdHMub25zdWNjZXNzIHx8IGZ1bmN0aW9uKCl7fSxcclxuXHQgICAgICAgICAgICBzY3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdTQ1JJUFQnKSxcclxuXHQgICAgICAgICAgICBvcHRpb25zID0gb3B0cyB8fCB7fSxcclxuXHQgICAgICAgICAgICBjaGFyc2V0ID0gb3B0aW9uc1snY2hhcnNldCddLFxyXG5cdCAgICAgICAgICAgIGNhbGxiYWNrRmllbGQgPSBvcHRpb25zWydqc29ucCddIHx8ICdjYWxsYmFjaycsXHJcblx0ICAgICAgICAgICAgY2FsbGJhY2tGbk5hbWUsXHJcblx0ICAgICAgICAgICAgdGltZU91dCA9IG9wdGlvbnNbJ3RpbWVPdXQnXSB8fCAwLFxyXG5cdCAgICAgICAgICAgIHRpbWVyLFxyXG5cdCAgICAgICAgICAgIHJlZyA9IG5ldyBSZWdFeHAoJyhcXFxcP3wmKScgKyBjYWxsYmFja0ZpZWxkICsgJz0oW14mXSopJyksXHJcblx0ICAgICAgICAgICAgbWF0Y2hlcztcclxuXHJcblx0ICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihzdWNjZXNzaGFuZGxlcikpIHtcclxuXHQgICAgICAgICAgICBjYWxsYmFja0ZuTmFtZSA9ICdiZF9fZWRpdG9yX18nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjE0NzQ4MzY0OCkudG9TdHJpbmcoMzYpO1xyXG5cdCAgICAgICAgICAgIHdpbmRvd1tjYWxsYmFja0ZuTmFtZV0gPSBnZXRDYWxsQmFjaygwKTtcclxuXHQgICAgICAgIH0gZWxzZSBpZih1dGlscy5pc1N0cmluZyhzdWNjZXNzaGFuZGxlcikpe1xyXG5cdCAgICAgICAgICAgIGNhbGxiYWNrRm5OYW1lID0gc3VjY2Vzc2hhbmRsZXI7XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgIGlmIChtYXRjaGVzID0gcmVnLmV4ZWModXJsKSkge1xyXG5cdCAgICAgICAgICAgICAgICBjYWxsYmFja0ZuTmFtZSA9IG1hdGNoZXNbMl07XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKHJlZywgJ1xceDI0MScgKyBjYWxsYmFja0ZpZWxkICsgJz0nICsgY2FsbGJhY2tGbk5hbWUpO1xyXG5cclxuXHQgICAgICAgIGlmICh1cmwuc2VhcmNoKHJlZykgPCAwKSB7XHJcblx0ICAgICAgICAgICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpIDwgMCA/ICc/JyA6ICcmJykgKyBjYWxsYmFja0ZpZWxkICsgJz0nICsgY2FsbGJhY2tGbk5hbWU7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgdmFyIHF1ZXJ5U3RyID0ganNvbjJzdHIob3B0cyk7ICAvLyB7IG5hbWU6XCJKaW1cIixjaXR5OlwiQmVpamluZ1wiIH0gLS0+IFwibmFtZT1KaW0mY2l0eT1CZWlqaW5nXCJcclxuXHQgICAgICAgIC8v5aaC5p6c55So5oi355u05o6l6YCa6L+HZGF0YeWPguaVsOS8oOmAkmpzb27lr7nosaHov4fmnaXvvIzliJnkuZ/opoHlsIbmraRqc29u5a+56LGh6L2s5YyW5Li65a2X56ym5LiyXHJcblx0ICAgICAgICBpZiAoIXV0aWxzLmlzRW1wdHlPYmplY3Qob3B0cy5kYXRhKSl7XHJcblx0ICAgICAgICAgICAgcXVlcnlTdHIgKz0gKHF1ZXJ5U3RyPyBcIiZcIjpcIlwiKSArIGpzb24yc3RyKG9wdHMuZGF0YSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAocXVlcnlTdHIpIHtcclxuXHQgICAgICAgICAgICB1cmwgPSB1cmwucmVwbGFjZSgvXFw/LywgJz8nICsgcXVlcnlTdHIgKyAnJicpO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIHNjci5vbmVycm9yID0gZ2V0Q2FsbEJhY2soMSk7XHJcblx0ICAgICAgICBpZiggdGltZU91dCApe1xyXG5cdCAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChnZXRDYWxsQmFjaygxKSwgdGltZU91dCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBjcmVhdGVTY3JpcHRUYWcoc2NyLCB1cmwsIGNoYXJzZXQpO1xyXG5cclxuXHQgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVNjcmlwdFRhZyhzY3IsIHVybCwgY2hhcnNldCkge1xyXG5cdCAgICAgICAgICAgIHNjci5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9qYXZhc2NyaXB0Jyk7XHJcblx0ICAgICAgICAgICAgc2NyLnNldEF0dHJpYnV0ZSgnZGVmZXInLCAnZGVmZXInKTtcclxuXHQgICAgICAgICAgICBjaGFyc2V0ICYmIHNjci5zZXRBdHRyaWJ1dGUoJ2NoYXJzZXQnLCBjaGFyc2V0KTtcclxuXHQgICAgICAgICAgICBzY3Iuc2V0QXR0cmlidXRlKCdzcmMnLCB1cmwpO1xyXG5cdCAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc2NyKTtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBmdW5jdGlvbiBnZXRDYWxsQmFjayhvblRpbWVPdXQpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYob25UaW1lT3V0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zLm9uZXJyb3IgJiYgb3B0aW9ucy5vbmVycm9yKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0cnl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NoYW5kbGVyLmFwcGx5KHdpbmRvdywgYXJndW1lbnRzKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKXt9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbmVycm9yICYmIG9wdGlvbnMub25lcnJvci5jYWxsKHdpbmRvdywgZXhjZXB0aW9uKTtcclxuXHQgICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMub25jb21wbGV0ZSAmJiBvcHRpb25zLm9uY29tcGxldGUuYXBwbHkod2luZG93LCBhcmd1bWVudHMpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc2NyLnBhcmVudE5vZGUgJiYgc2NyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHdpbmRvd1tjYWxsYmFja0ZuTmFtZV0gPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgd2luZG93W2NhbGxiYWNrRm5OYW1lXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1jYXRjaChlKXt9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHJldHVybiB7XHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOagueaNrue7meWumueahOWPguaVsOmhue+8jOWQkeaMh+WumueahHVybOWPkei1t+S4gOS4qmFqYXjor7fmsYLjgIIgYWpheOivt+axguWujOaIkOWQju+8jOS8muagueaNruivt+axgue7k+aenOiwg+eUqOebuOW6lOWbnuiwg++8miDlpoLmnpzor7fmsYJcclxuXHQgICAgICAgICAqIOaIkOWKn++8jCDliJnosIPnlKhvbnN1Y2Nlc3Plm57osIPvvIwg5aSx6LSl5YiZ6LCD55SoIG9uZXJyb3Ig5Zue6LCDXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHJlcXVlc3RcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFVSTFN0cmluZyB9IHVybCBhamF46K+35rGC55qEdXJs5Zyw5Z2AXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBPYmplY3QgfSBhamF4T3B0aW9ucyBhamF46K+35rGC6YCJ6aG555qE6ZSu5YC85a+577yM5pSv5oyB55qE6YCJ6aG55aaC5LiL77yaXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogLy/lkJFzYXloZWxsby5waHDlj5HotbfkuIDkuKrlvILmraXnmoRBamF4IEdFVOivt+axgiwg6K+35rGC6LaF5pe25pe26Ze05Li6MTBz77yMIOivt+axguWujOaIkOWQjuaJp+ihjOebuOW6lOeahOWbnuiwg+OAglxyXG5cdCAgICAgICAgICogVUUuYWpheC5yZXF1ZXNldCggJ3NheWhlbGxvLnBocCcsIHtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgLy/or7fmsYLmlrnms5XjgILlj6/pgInlgLzvvJogJ0dFVCcsICdQT1NUJ++8jOm7mOiupOWAvOaYrydQT1NUJ1xyXG5cdCAgICAgICAgICogICAgIG1ldGhvZDogJ0dFVCcsXHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogICAgIC8v6LaF5pe25pe26Ze044CCIOm7mOiupOS4ujUwMDDvvIwg5Y2V5L2N5pivbXNcclxuXHQgICAgICAgICAqICAgICB0aW1lb3V0OiAxMDAwMCxcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgLy/mmK/lkKbmmK/lvILmraXor7fmsYLjgIIgdHJ1ZeS4uuW8guatpeivt+axgu+8jCBmYWxzZeS4uuWQjOatpeivt+axglxyXG5cdCAgICAgICAgICogICAgIGFzeW5jOiB0cnVlLFxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAvL+ivt+axguaQuuW4pueahOaVsOaNruOAguWmguaenOivt+axguS4ukdFVOivt+axgu+8jCBkYXRh5Lya57uP6L+Hc3RyaW5naWZ55ZCO6ZmE5Yqg5Yiw6K+35rGCdXJs5LmL5ZCO44CCXHJcblx0ICAgICAgICAgKiAgICAgZGF0YToge1xyXG5cdCAgICAgICAgICogICAgICAgICBuYW1lOiAndWVkaXRvcidcclxuXHQgICAgICAgICAqICAgICB9LFxyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqICAgICAvL+ivt+axguaIkOWKn+WQjueahOWbnuiwg++8jCDor6Xlm57osIPmjqXlj5flvZPliY3nmoRYTUxIdHRwUmVxdWVzdOWvueixoeS9nOS4uuWPguaVsOOAglxyXG5cdCAgICAgICAgICogICAgIG9uc3VjY2VzczogZnVuY3Rpb24gKCB4aHIgKSB7XHJcblx0ICAgICAgICAgKiAgICAgICAgIGNvbnNvbGUubG9nKCB4aHIucmVzcG9uc2VUZXh0ICk7XHJcblx0ICAgICAgICAgKiAgICAgfSxcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgLy/or7fmsYLlpLHotKXmiJbogIXotoXml7blkI7nmoTlm57osIPjgIJcclxuXHQgICAgICAgICAqICAgICBvbmVycm9yOiBmdW5jdGlvbiAoIHhociApIHtcclxuXHQgICAgICAgICAqICAgICAgICAgIGFsZXJ0KCAnQWpheOivt+axguWksei0pScgKTtcclxuXHQgICAgICAgICAqICAgICB9XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogfSApO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOagueaNrue7meWumueahOWPguaVsOmhueWPkei1t+S4gOS4qmFqYXjor7fmsYLvvIwg5Y+C5pWw6aG56YeM5b+F6aG75YyF5ZCr5LiA5LiqdXJs5Zyw5Z2A44CCIGFqYXjor7fmsYLlrozmiJDlkI7vvIzkvJrmoLnmja7or7fmsYLnu5PmnpzosIPnlKjnm7jlupTlm57osIPvvJog5aaC5p6c6K+35rGCXHJcblx0ICAgICAgICAgKiDmiJDlip/vvIwg5YiZ6LCD55Sob25zdWNjZXNz5Zue6LCD77yMIOWksei0peWImeiwg+eUqCBvbmVycm9yIOWbnuiwg+OAglxyXG5cdCAgICAgICAgICogQG1ldGhvZCByZXF1ZXN0XHJcblx0ICAgICAgICAgKiBAd2FybmluZyDlpoLmnpzlnKjlj4LmlbDpobnph4zmnKrmj5DkvpvkuIDkuKprZXnkuLrigJx1cmzigJ3nmoTlnLDlnYDlgLzvvIzliJnor6Xor7fmsYLlsIbnm7TmjqXpgIDlh7rjgIJcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IGFqYXhPcHRpb25zIGFqYXjor7fmsYLpgInpobnnmoTplK7lgLzlr7nvvIzmlK/mjIHnmoTpgInpobnlpoLkuIvvvJpcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKlxyXG5cdCAgICAgICAgICogLy/lkJFzYXloZWxsby5waHDlj5HotbfkuIDkuKrlvILmraXnmoRBamF4IFBPU1Tor7fmsYIsIOivt+axgui2heaXtuaXtumXtOS4ujVz77yMIOivt+axguWujOaIkOWQjuS4jeaJp+ihjOS7u+S9leWbnuiwg+OAglxyXG5cdCAgICAgICAgICogVUUuYWpheC5yZXF1ZXNldCggJ3NheWhlbGxvLnBocCcsIHtcclxuXHQgICAgICAgICAqXHJcblx0ICAgICAgICAgKiAgICAgLy/or7fmsYLnmoTlnLDlnYDvvIwg6K+l6aG55piv5b+F6aG755qE44CCXHJcblx0ICAgICAgICAgKiAgICAgdXJsOiAnc2F5aGVsbG8ucGhwJ1xyXG5cdCAgICAgICAgICpcclxuXHQgICAgICAgICAqIH0gKTtcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0XHRcdHJlcXVlc3Q6ZnVuY3Rpb24odXJsLCBvcHRzKSB7XHJcblx0ICAgICAgICAgICAgaWYgKG9wdHMgJiYgb3B0cy5kYXRhVHlwZSA9PSAnanNvbnAnKSB7XHJcblx0ICAgICAgICAgICAgICAgIGRvSnNvbnAodXJsLCBvcHRzKTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBkb0FqYXgodXJsLCBvcHRzKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0XHRcdH0sXHJcblx0ICAgICAgICBnZXRKU09OUDpmdW5jdGlvbih1cmwsIGRhdGEsIGZuKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG9wdHMgPSB7XHJcblx0ICAgICAgICAgICAgICAgICdkYXRhJzogZGF0YSxcclxuXHQgICAgICAgICAgICAgICAgJ29uY29tcGxldGUnOiBmblxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgZG9Kc29ucCh1cmwsIG9wdHMpO1xyXG5cdFx0XHR9XHJcblx0XHR9O1xyXG5cclxuXHJcblx0fSgpO1xyXG5cclxuXHJcblx0Ly8gY29yZS9maWx0ZXJ3b3JkLmpzXHJcblx0LyoqXHJcblx0ICogVUXov4fmu6R3b3Jk55qE6Z2Z5oCB5pa55rOVXHJcblx0ICogQGZpbGVcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICogVUVkaXRvcuWFrOeUqOepuumXtO+8jFVFZGl0b3LmiYDmnInnmoTlip/og73pg73mjILovb3lnKjor6Xnqbrpl7TkuItcclxuXHQgKiBAbW9kdWxlIFVFXHJcblx0ICovXHJcblxyXG5cclxuXHQvKipcclxuXHQgKiDmoLnmja7kvKDlhaVodG1s5a2X56ym5Liy6L+H5rukd29yZFxyXG5cdCAqIEBtb2R1bGUgVUVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqIEBtZXRob2QgZmlsdGVyV29yZFxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGh0bWwgaHRtbOWtl+espuS4slxyXG5cdCAqIEByZXR1cm4geyBTdHJpbmcgfSDlt7Lov4fmu6TlkI7nmoTnu5PmnpzlrZfnrKbkuLJcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiBVRS5maWx0ZXJXb3JkKGh0bWwpO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cdHZhciBmaWx0ZXJXb3JkID0gVUUuZmlsdGVyV29yZCA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0ICAgIC8v5piv5ZCm5pivd29yZOi/h+adpeeahOWGheWuuVxyXG5cdCAgICBmdW5jdGlvbiBpc1dvcmREb2N1bWVudCggc3RyICkge1xyXG5cdCAgICAgICAgcmV0dXJuIC8oY2xhc3M9XCI/TXNvfHN0eWxlPVwiW15cIl0qXFxibXNvXFwtfHc6V29yZERvY3VtZW50fDwodnxvKTp8bGFuZz0pL2lnLnRlc3QoIHN0ciApO1xyXG5cdCAgICB9XHJcblx0ICAgIC8v5Y675o6J5bCP5pWwXHJcblx0ICAgIGZ1bmN0aW9uIHRyYW5zVW5pdCggdiApIHtcclxuXHQgICAgICAgIHYgPSB2LnJlcGxhY2UoIC9bXFxkLl0rXFx3Ky9nLCBmdW5jdGlvbiAoIG0gKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHV0aWxzLnRyYW5zVW5pdFRvUHgobSk7XHJcblx0ICAgICAgICB9ICk7XHJcblx0ICAgICAgICByZXR1cm4gdjtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gZmlsdGVyUGFzdGVXb3JkKCBzdHIgKSB7XHJcblx0ICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXHRcXHJcXG5dKy9nLCcgJylcclxuXHQgICAgICAgICAgICAgICAgLnJlcGxhY2UoIC88IS0tW1xcc1xcU10qPy0tPi9pZywgXCJcIiApXHJcblx0ICAgICAgICAgICAgICAgIC8v6L2s5o2i5Zu+54mHXHJcblx0ICAgICAgICAgICAgICAgIC5yZXBsYWNlKC88djpzaGFwZSBbXj5dKj5bXFxzXFxTXSo/LjxcXC92OnNoYXBlPi9naSxmdW5jdGlvbihzdHIpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy9vcGVyYeiDveiHquW3seino+aekOWHumltYWdl5omA6L+Z6YeM55u05o6l6L+U5Zue56m6XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihicm93c2VyLm9wZXJhKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB0cnl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy/mnInlj6/og73mmK9iaXRtYXDljaDkuLrlm77vvIzml6DnlKjvvIznm7TmjqXov4fmu6TmjonvvIzkuLvopoHkvZPnjrDlnKjnspjotLRleGNlbOihqOagvOS4rVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKC9CaXRtYXAvaS50ZXN0KHN0cikpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHN0ci5tYXRjaCgvd2lkdGg6KFsgXFxkLl0qcFt0eF0pL2kpWzFdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBzdHIubWF0Y2goL2hlaWdodDooWyBcXGQuXSpwW3R4XSkvaSlbMV0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYyA9ICBzdHIubWF0Y2goL3NyYz1cXHMqXCIoW15cIl0qKVwiL2kpWzFdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGltZyB3aWR0aD1cIicrIHRyYW5zVW5pdCh3aWR0aCkgKydcIiBoZWlnaHQ9XCInK3RyYW5zVW5pdChoZWlnaHQpICsnXCIgc3JjPVwiJyArIHNyYyArICdcIiAvPic7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGNhdGNoKGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSlcclxuXHQgICAgICAgICAgICAgICAgLy/pkojlr7l3cHPmt7vliqDnmoTlpJrkvZnmoIfnrb7lpITnkIZcclxuXHQgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzxcXC8/ZGl2W14+XSo+L2csJycpXHJcblx0ICAgICAgICAgICAgICAgIC8v5Y675o6J5aSa5L2Z55qE5bGe5oCnXHJcblx0ICAgICAgICAgICAgICAgIC5yZXBsYWNlKCAvdjpcXHcrPShbXCInXT8pW14nXCJdK1xcMS9nLCAnJyApXHJcblx0ICAgICAgICAgICAgICAgIC5yZXBsYWNlKCAvPCghfHNjcmlwdFtePl0qPi4qPzxcXC9zY3JpcHQoPz1bPlxcc10pfFxcLz8oXFw/eG1sKDpcXHcrKT98eG1sfG1ldGF8bGlua3xzdHlsZXxcXHcrOlxcdyspKD89W1xcc1xcLz5dKSlbXj5dKj4vZ2ksIFwiXCIgKVxyXG5cdCAgICAgICAgICAgICAgICAucmVwbGFjZSggLzxwIFtePl0qY2xhc3M9XCI/TXNvSGVhZGluZ1wiP1tePl0qPiguKj8pPFxcL3A+L2dpLCBcIjxwPjxzdHJvbmc+JDE8L3N0cm9uZz48L3A+XCIgKVxyXG5cdCAgICAgICAgICAgICAgICAvL+WOu+aOieWkmuS9meeahOWxnuaAp1xyXG5cdCAgICAgICAgICAgICAgICAucmVwbGFjZSggL1xccysoY2xhc3N8bGFuZ3xhbGlnbilcXHMqPVxccyooWydcIl0/KShbXFx3LV0rKVxcMi9pZywgZnVuY3Rpb24oc3RyLG5hbWUsbWFya3MsdmFsKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8v5L+d55WZbGlzdOeahOagh+ekulxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT0gJ2NsYXNzJyAmJiB2YWwgPT0gJ01zb0xpc3RQYXJhZ3JhcGgnID8gc3RyIDogJydcclxuXHQgICAgICAgICAgICAgICAgfSlcclxuXHQgICAgICAgICAgICAgICAgLy/muIXpmaTlpJrkvZnnmoRmb250L3NwYW7kuI3og73ljLnphY0mbmJzcDvmnInlj6/og73mmK/nqbrmoLxcclxuXHQgICAgICAgICAgICAgICAgLnJlcGxhY2UoIC88KGZvbnR8c3BhbilbXj5dKj4oXFxzKik8XFwvXFwxPi9naSwgZnVuY3Rpb24oYSxiLGMpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMucmVwbGFjZSgvW1xcdFxcclxcbiBdKy9nLCcgJylcclxuXHQgICAgICAgICAgICAgICAgfSlcclxuXHQgICAgICAgICAgICAgICAgLy/lpITnkIZzdHlsZeeahOmXrumimFxyXG5cdCAgICAgICAgICAgICAgICAucmVwbGFjZSggLyg8W2Etel1bXj5dKilcXHNzdHlsZT0oW1wiJ10pKFteXFwyXSo/KVxcMi9naSwgZnVuY3Rpb24oIHN0ciwgdGFnLCB0bXAsIHN0eWxlICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBbXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzID0gc3R5bGUucmVwbGFjZSggL15cXHMrfFxccyskLywgJycgKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJiMzOTsvZywnXFwnJylcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoIC8mcXVvdDsvZ2ksIFwiJ1wiIClcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcXGQuXSsoY218cHQpL2csZnVuY3Rpb24oc3RyKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlscy50cmFuc1VuaXRUb1B4KHN0cilcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KCAvO1xccyovZyApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBpID0gMCx2OyB2ID0gc1tpXTtpKysgKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuYW1lLCB2YWx1ZSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydHMgPSB2LnNwbGl0KCBcIjpcIiApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcnRzLmxlbmd0aCA9PSAyICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gcGFydHNbMF0udG9Mb3dlckNhc2UoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJ0c1sxXS50b0xvd2VyQ2FzZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigvXihiYWNrZ3JvdW5kKVxcdyovLnRlc3QobmFtZSkgJiYgdmFsdWUucmVwbGFjZSgvKGluaXRpYWx8XFxzKS9nLCcnKS5sZW5ndGggPT0gMFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC9eKG1hcmdpbilcXHcqLy50ZXN0KG5hbWUpICYmIC9eMFxcdyskLy50ZXN0KHZhbHVlKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICApe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoIG5hbWUgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNvLXBhZGRpbmctYWx0XCI6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNvLXBhZGRpbmctdG9wLWFsdFwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zby1wYWRkaW5nLXJpZ2h0LWFsdFwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zby1wYWRkaW5nLWJvdHRvbS1hbHRcIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtc28tcGFkZGluZy1sZWZ0LWFsdFwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zby1tYXJnaW4tYWx0XCI6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNvLW1hcmdpbi10b3AtYWx0XCI6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNvLW1hcmdpbi1yaWdodC1hbHRcIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtc28tbWFyZ2luLWJvdHRvbS1hbHRcIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtc28tbWFyZ2luLWxlZnQtYWx0XCI6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2ll5LiL5Lya5Ye6546w5oyk5Yiw5LiA6LW355qE5oOF5Ya1XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2FzZSBcIm1zby10YWJsZS1sYXlvdXQtYWx0XCI6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNvLWhlaWdodFwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zby13aWR0aFwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zby12ZXJ0aWNhbC1hbGlnbi1hbHRcIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RyYWNlOjE4MTkgZmbkuIvkvJrop6PmnpDlh7pwYWRkaW5n5ZyodGFibGXkuIpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighLzx0YWJsZS8udGVzdCh0YWcpKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuW2ldID0gbmFtZS5yZXBsYWNlKCAvXm1zby18LWFsdCQvZywgXCJcIiApICsgXCI6XCIgKyB0cmFuc1VuaXQoIHZhbHVlICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaG9yaXotYWxpZ25cIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuW2ldID0gXCJ0ZXh0LWFsaWduOlwiICsgdmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInZlcnQtYWxpZ25cIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuW2ldID0gXCJ2ZXJ0aWNhbC1hbGlnbjpcIiArIHZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJmb250LWNvbG9yXCI6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNvLWZvcmVncm91bmRcIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuW2ldID0gXCJjb2xvcjpcIiArIHZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtc28tYmFja2dyb3VuZFwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zby1oaWdobGlnaHRcIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuW2ldID0gXCJiYWNrZ3JvdW5kOlwiICsgdmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zby1kZWZhdWx0LWhlaWdodFwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5baV0gPSBcIm1pbi1oZWlnaHQ6XCIgKyB0cmFuc1VuaXQoIHZhbHVlICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIm1zby1kZWZhdWx0LXdpZHRoXCI6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbltpXSA9IFwibWluLXdpZHRoOlwiICsgdHJhbnNVbml0KCB2YWx1ZSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJtc28tcGFkZGluZy1iZXR3ZWVuLWFsdFwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5baV0gPSBcImJvcmRlci1jb2xsYXBzZTpzZXBhcmF0ZTtib3JkZXItc3BhY2luZzpcIiArIHRyYW5zVW5pdCggdmFsdWUgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwidGV4dC1saW5lLXRocm91Z2hcIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICh2YWx1ZSA9PSBcInNpbmdsZVwiKSB8fCAodmFsdWUgPT0gXCJkb3VibGVcIikgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5baV0gPSBcInRleHQtZGVjb3JhdGlvbjpsaW5lLXRocm91Z2hcIjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwibXNvLXplcm8taGVpZ2h0XCI6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB2YWx1ZSA9PSBcInllc1wiICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuW2ldID0gXCJkaXNwbGF5Om5vbmVcIjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2JhY2tncm91bmQnOlxyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdtYXJnaW4nOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggIS9bMS05XS8udGVzdCggdmFsdWUgKSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAvXihtc298Y29sdW1ufGZvbnQtZW1waHxsYW5nfGxheW91dHxsaW5lLWJyZWFrfGxpc3QtaW1hZ2V8bmF2fHBhbm9zZXxwdW5jdHxyb3d8cnVieXxzZXB8c2l6ZXxzcmN8dGFiLXx0YWJsZS1ib3JkZXJ8dGV4dC0oPzpkZWNvcnx0cmFucyl8dG9wLWJhcnx2ZXJzaW9ufHZuZHx3b3JkLWJyZWFrKS8udGVzdCggbmFtZSApXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL3RleHRcXC1pbmRlbnR8cGFkZGluZ3xtYXJnaW4vLnRlc3QobmFtZSkgJiYgL1xcLVtcXGQuXSsvLnRlc3QodmFsdWUpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5baV0gPSBuYW1lICsgXCI6XCIgKyBwYXJ0c1sxXTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFnICsgKG4ubGVuZ3RoID8gJyBzdHlsZT1cIicgKyBuLmpvaW4oICc7JykucmVwbGFjZSgvO3syLH0vZywnOycpICsgJ1wiJyA6ICcnKTtcclxuXHQgICAgICAgICAgICAgICAgfSlcclxuXHJcblxyXG5cdCAgICB9XHJcblxyXG5cdCAgICByZXR1cm4gZnVuY3Rpb24gKCBodG1sICkge1xyXG5cdCAgICAgICAgcmV0dXJuIChpc1dvcmREb2N1bWVudCggaHRtbCApID8gZmlsdGVyUGFzdGVXb3JkKCBodG1sICkgOiBodG1sKTtcclxuXHQgICAgfTtcclxuXHR9KCk7XHJcblxyXG5cdC8vIGNvcmUvbm9kZS5qc1xyXG5cdC8qKlxyXG5cdCAqIOe8lui+keWZqOaooeaLn+eahOiKgueCueexu1xyXG5cdCAqIEBmaWxlXHJcblx0ICogQG1vZHVsZSBVRVxyXG5cdCAqIEBjbGFzcyB1Tm9kZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIFVFZGl0b3LlhaznlKjnqbrpl7TvvIxVRWRpdG9y5omA5pyJ55qE5Yqf6IO96YO95oyC6L295Zyo6K+l56m66Ze05LiLXHJcblx0ICogQHVuZmlsZVxyXG5cdCAqIEBtb2R1bGUgVUVcclxuXHQgKi9cclxuXHJcblx0KGZ1bmN0aW9uICgpIHtcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDnvJbovpHlmajmqKHmi5/nmoToioLngrnnsbtcclxuXHQgICAgICogQHVuZmlsZVxyXG5cdCAgICAgKiBAbW9kdWxlIFVFXHJcblx0ICAgICAqIEBjbGFzcyB1Tm9kZVxyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDpgJrov4fkuIDkuKrplK7lgLzlr7nvvIzliJvlu7rkuIDkuKp1Tm9kZeWvueixoVxyXG5cdCAgICAgKiBAY29uc3RydWN0b3JcclxuXHQgICAgICogQHBhcmFtIHsgT2JqZWN0IH0gYXR0ciDkvKDlhaXopoHliJvlu7rnmoR1Tm9kZeeahOWIneWni+WxnuaAp1xyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIHZhciBub2RlID0gbmV3IHVOb2RlKHtcclxuXHQgICAgICogICAgIHR5cGU6J2VsZW1lbnQnLFxyXG5cdCAgICAgKiAgICAgdGFnTmFtZTonc3BhbicsXHJcblx0ICAgICAqICAgICBhdHRyczp7c3R5bGU6J2ZvbnQtc2l6ZToxNHB4Oyd9XHJcblx0ICAgICAqIH1cclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICB2YXIgdU5vZGUgPSBVRS51Tm9kZSA9IGZ1bmN0aW9uIChvYmopIHtcclxuXHQgICAgICAgIHRoaXMudHlwZSA9IG9iai50eXBlO1xyXG5cdCAgICAgICAgdGhpcy5kYXRhID0gb2JqLmRhdGE7XHJcblx0ICAgICAgICB0aGlzLnRhZ05hbWUgPSBvYmoudGFnTmFtZTtcclxuXHQgICAgICAgIHRoaXMucGFyZW50Tm9kZSA9IG9iai5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgdGhpcy5hdHRycyA9IG9iai5hdHRycyB8fCB7fTtcclxuXHQgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBvYmouY2hpbGRyZW47XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICB2YXIgbm90VHJhbnNBdHRycyA9IHtcclxuXHQgICAgICAgICdocmVmJzoxLFxyXG5cdCAgICAgICAgJ3NyYyc6MSxcclxuXHQgICAgICAgICdfc3JjJzoxLFxyXG5cdCAgICAgICAgJ19ocmVmJzoxLFxyXG5cdCAgICAgICAgJ2NkYXRhX2RhdGEnOjFcclxuXHQgICAgfTtcclxuXHJcblx0ICAgIHZhciBub3RUcmFuc1RhZ05hbWUgPSB7XHJcblx0ICAgICAgICBzdHlsZToxLFxyXG5cdCAgICAgICAgc2NyaXB0OjFcclxuXHQgICAgfTtcclxuXHJcblx0ICAgIHZhciBpbmRlbnRDaGFyID0gJyAgICAnLFxyXG5cdCAgICAgICAgYnJlYWtDaGFyID0gJ1xcbic7XHJcblxyXG5cdCAgICBmdW5jdGlvbiBpbnNlcnRMaW5lKGFyciwgY3VycmVudCwgYmVnaW4pIHtcclxuXHQgICAgICAgIGFyci5wdXNoKGJyZWFrQ2hhcik7XHJcblx0ICAgICAgICByZXR1cm4gY3VycmVudCArIChiZWdpbiA/IDEgOiAtMSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIGluc2VydEluZGVudChhcnIsIGN1cnJlbnQpIHtcclxuXHQgICAgICAgIC8v5o+S5YWl57yp6L+bXHJcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnQ7IGkrKykge1xyXG5cdCAgICAgICAgICAgIGFyci5wdXNoKGluZGVudENoYXIpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvL+WIm+W7unVOb2Rl55qE6Z2Z5oCB5pa55rOVXHJcblx0ICAgIC8v5pSv5oyB5qCH562+5ZKMaHRtbFxyXG5cdCAgICB1Tm9kZS5jcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGh0bWwpIHtcclxuXHQgICAgICAgIGlmICgvWzw+XS8udGVzdChodG1sKSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBVRS5odG1scGFyc2VyKGh0bWwpLmNoaWxkcmVuWzBdXHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBuZXcgdU5vZGUoe1xyXG5cdCAgICAgICAgICAgICAgICB0eXBlOidlbGVtZW50JyxcclxuXHQgICAgICAgICAgICAgICAgY2hpbGRyZW46W10sXHJcblx0ICAgICAgICAgICAgICAgIHRhZ05hbWU6aHRtbFxyXG5cdCAgICAgICAgICAgIH0pXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIHVOb2RlLmNyZWF0ZVRleHQgPSBmdW5jdGlvbiAoZGF0YSxub1RyYW5zKSB7XHJcblx0ICAgICAgICByZXR1cm4gbmV3IFVFLnVOb2RlKHtcclxuXHQgICAgICAgICAgICB0eXBlOid0ZXh0JyxcclxuXHQgICAgICAgICAgICAnZGF0YSc6bm9UcmFucyA/IGRhdGEgOiB1dGlscy51bmh0bWwoZGF0YSB8fCAnJylcclxuXHQgICAgICAgIH0pXHJcblx0ICAgIH07XHJcblx0ICAgIGZ1bmN0aW9uIG5vZGVUb0h0bWwobm9kZSwgYXJyLCBmb3JtYXR0ZXIsIGN1cnJlbnQpIHtcclxuXHQgICAgICAgIHN3aXRjaCAobm9kZS50eXBlKSB7XHJcblx0ICAgICAgICAgICAgY2FzZSAncm9vdCc6XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSBub2RlLmNoaWxkcmVuW2krK107KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+aPkuWFpeaWsOihjFxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm1hdHRlciAmJiBjaS50eXBlID09ICdlbGVtZW50JyAmJiAhZHRkLiRpbmxpbmVXaXRoQVtjaS50YWdOYW1lXSAmJiBpID4gMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydExpbmUoYXJyLCBjdXJyZW50LCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRJbmRlbnQoYXJyLCBjdXJyZW50KVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZVRvSHRtbChjaSwgYXJyLCBmb3JtYXR0ZXIsIGN1cnJlbnQpXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgY2FzZSAndGV4dCc6XHJcblx0ICAgICAgICAgICAgICAgIGlzVGV4dChub2RlLCBhcnIpO1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBjYXNlICdlbGVtZW50JzpcclxuXHQgICAgICAgICAgICAgICAgaXNFbGVtZW50KG5vZGUsIGFyciwgZm9ybWF0dGVyLCBjdXJyZW50KTtcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XHJcblx0ICAgICAgICAgICAgICAgIGlzQ29tbWVudChub2RlLCBhcnIsIGZvcm1hdHRlcik7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gYXJyO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBpc1RleHQobm9kZSwgYXJyKSB7XHJcblx0ICAgICAgICBpZihub2RlLnBhcmVudE5vZGUudGFnTmFtZSA9PSAncHJlJyl7XHJcblx0ICAgICAgICAgICAgLy/mupDnoIHmqKHlvI/kuIvovpPlhaVodG1s5qCH562+77yM5LiN6IO95YGa6L2s5o2i5aSE55CG77yM55u05o6l6L6T5Ye6XHJcblx0ICAgICAgICAgICAgYXJyLnB1c2gobm9kZS5kYXRhKVxyXG5cdCAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgYXJyLnB1c2gobm90VHJhbnNUYWdOYW1lW25vZGUucGFyZW50Tm9kZS50YWdOYW1lXSA/IHV0aWxzLmh0bWwobm9kZS5kYXRhKSA6IG5vZGUuZGF0YS5yZXBsYWNlKC9bIF17Mn0vZywnICZuYnNwOycpKVxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUsIGFyciwgZm9ybWF0dGVyLCBjdXJyZW50KSB7XHJcblx0ICAgICAgICB2YXIgYXR0cmh0bWwgPSAnJztcclxuXHQgICAgICAgIGlmIChub2RlLmF0dHJzKSB7XHJcblx0ICAgICAgICAgICAgYXR0cmh0bWwgPSBbXTtcclxuXHQgICAgICAgICAgICB2YXIgYXR0cnMgPSBub2RlLmF0dHJzO1xyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGEgaW4gYXR0cnMpIHtcclxuXHQgICAgICAgICAgICAgICAgLy/ov5nph4zlsLHpkojlr7lcclxuXHQgICAgICAgICAgICAgICAgLy88cD4nPGltZyBzcmM9J2h0dHA6Ly9uc2NsaWNrLmJhaWR1LmNvbS91LmdpZj8mYXNkZj1cXFwic2RmJmFzZGZhc2Rmczthc2RmJz48L3A+XHJcblx0ICAgICAgICAgICAgICAgIC8v6L+Z6YeM6L6555qEXFxcIuWBmui9rOaNou+8jOimgeS4jeeUqGlubmVySFRNTOebtOaOpeiiq+aIquaWreS6hu+8jOWxnuaAp3NyY1xyXG5cdCAgICAgICAgICAgICAgICAvL+acieWPr+iDveWBmueahOS4jeWkn1xyXG5cdCAgICAgICAgICAgICAgICBhdHRyaHRtbC5wdXNoKGEgKyAoYXR0cnNbYV0gIT09IHVuZGVmaW5lZCA/ICc9XCInICsgKG5vdFRyYW5zQXR0cnNbYV0gPyB1dGlscy5odG1sKGF0dHJzW2FdKS5yZXBsYWNlKC9bXCJdL2csIGZ1bmN0aW9uIChhKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgIHJldHVybiAnJnF1b3Q7J1xyXG5cdCAgICAgICAgICAgICAgICB9KSA6IHV0aWxzLnVuaHRtbChhdHRyc1thXSkpICsgJ1wiJyA6ICcnKSlcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgYXR0cmh0bWwgPSBhdHRyaHRtbC5qb2luKCcgJyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBhcnIucHVzaCgnPCcgKyBub2RlLnRhZ05hbWUgK1xyXG5cdCAgICAgICAgICAgIChhdHRyaHRtbCA/ICcgJyArIGF0dHJodG1sICA6ICcnKSArXHJcblx0ICAgICAgICAgICAgKGR0ZC4kZW1wdHlbbm9kZS50YWdOYW1lXSA/ICdcXC8nIDogJycgKSArICc+J1xyXG5cdCAgICAgICAgKTtcclxuXHQgICAgICAgIC8v5o+S5YWl5paw6KGMXHJcblx0ICAgICAgICBpZiAoZm9ybWF0dGVyICAmJiAgIWR0ZC4kaW5saW5lV2l0aEFbbm9kZS50YWdOYW1lXSAmJiBub2RlLnRhZ05hbWUgIT0gJ3ByZScpIHtcclxuXHQgICAgICAgICAgICBpZihub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoKXtcclxuXHQgICAgICAgICAgICAgICAgY3VycmVudCA9IGluc2VydExpbmUoYXJyLCBjdXJyZW50LCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgaW5zZXJ0SW5kZW50KGFyciwgY3VycmVudClcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4gJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gbm9kZS5jaGlsZHJlbltpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoZm9ybWF0dGVyICYmIGNpLnR5cGUgPT0gJ2VsZW1lbnQnICYmICAhZHRkLiRpbmxpbmVXaXRoQVtjaS50YWdOYW1lXSAmJiBpID4gMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaW5zZXJ0TGluZShhcnIsIGN1cnJlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaW5zZXJ0SW5kZW50KGFyciwgY3VycmVudClcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBub2RlVG9IdG1sKGNpLCBhcnIsIGZvcm1hdHRlciwgY3VycmVudClcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoIWR0ZC4kZW1wdHlbbm9kZS50YWdOYW1lXSkge1xyXG5cdCAgICAgICAgICAgIGlmIChmb3JtYXR0ZXIgJiYgIWR0ZC4kaW5saW5lV2l0aEFbbm9kZS50YWdOYW1lXSAgJiYgbm9kZS50YWdOYW1lICE9ICdwcmUnKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZihub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBpbnNlcnRMaW5lKGFyciwgY3VycmVudCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpbnNlcnRJbmRlbnQoYXJyLCBjdXJyZW50KVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGFyci5wdXNoKCc8XFwvJyArIG5vZGUudGFnTmFtZSArICc+Jyk7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBpc0NvbW1lbnQobm9kZSwgYXJyKSB7XHJcblx0ICAgICAgICBhcnIucHVzaCgnPCEtLScgKyBub2RlLmRhdGEgKyAnLS0+Jyk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIGdldE5vZGVCeUlkKHJvb3QsIGlkKSB7XHJcblx0ICAgICAgICB2YXIgbm9kZTtcclxuXHQgICAgICAgIGlmIChyb290LnR5cGUgPT0gJ2VsZW1lbnQnICYmIHJvb3QuZ2V0QXR0cignaWQnKSA9PSBpZCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiByb290O1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKHJvb3QuY2hpbGRyZW4gJiYgcm9vdC5jaGlsZHJlbi5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gcm9vdC5jaGlsZHJlbltpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobm9kZSA9IGdldE5vZGVCeUlkKGNpLCBpZCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBnZXROb2Rlc0J5VGFnTmFtZShub2RlLCB0YWdOYW1lLCBhcnIpIHtcclxuXHQgICAgICAgIGlmIChub2RlLnR5cGUgPT0gJ2VsZW1lbnQnICYmIG5vZGUudGFnTmFtZSA9PSB0YWdOYW1lKSB7XHJcblx0ICAgICAgICAgICAgYXJyLnB1c2gobm9kZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAobm9kZS5jaGlsZHJlbiAmJiBub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSBub2RlLmNoaWxkcmVuW2krK107KSB7XHJcblx0ICAgICAgICAgICAgICAgIGdldE5vZGVzQnlUYWdOYW1lKGNpLCB0YWdOYW1lLCBhcnIpXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICAgIGZ1bmN0aW9uIG5vZGVUcmF2ZXJzYWwocm9vdCxmbil7XHJcblx0ICAgICAgICBpZihyb290LmNoaWxkcmVuICYmIHJvb3QuY2hpbGRyZW4ubGVuZ3RoKXtcclxuXHQgICAgICAgICAgICBmb3IodmFyIGk9IDAsY2k7Y2k9cm9vdC5jaGlsZHJlbltpXTspe1xyXG5cdCAgICAgICAgICAgICAgICBub2RlVHJhdmVyc2FsKGNpLGZuKTtcclxuXHQgICAgICAgICAgICAgICAgLy9jaeiiq+abv+aNoueahOaDheWGte+8jOi/memHjOWwseS4jeWGjei1sCBmbuS6hlxyXG5cdCAgICAgICAgICAgICAgICBpZihjaS5wYXJlbnROb2RlICl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihjaS5jaGlsZHJlbiAmJiBjaS5jaGlsZHJlbi5sZW5ndGgpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZuKGNpKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoY2kucGFyZW50Tm9kZSkgaSsrXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICBmbihyb290KVxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgfVxyXG5cdCAgICB1Tm9kZS5wcm90b3R5cGUgPSB7XHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlvZPliY3oioLngrnlr7nosaHvvIzovazmjaLmiJBodG1s5paH5pysXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIHRvSHRtbFxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFN0cmluZyB9IOi/lOWbnui9rOaNouWQjueahGh0bWzlrZfnrKbkuLJcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBub2RlLnRvSHRtbCgpO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOW9k+WJjeiKgueCueWvueixoe+8jOi9rOaNouaIkGh0bWzmlofmnKxcclxuXHQgICAgICAgICAqIEBtZXRob2QgdG9IdG1sXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBCb29sZWFuIH0gZm9ybWF0dGVyIOaYr+WQpuagvOW8j+WMlui/lOWbnuWAvFxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFN0cmluZyB9IOi/lOWbnui9rOaNouWQjueahGh0bWzlrZfnrKbkuLJcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBub2RlLnRvSHRtbCggdHJ1ZSApO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHRvSHRtbDpmdW5jdGlvbiAoZm9ybWF0dGVyKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGFyciA9IFtdO1xyXG5cdCAgICAgICAgICAgIG5vZGVUb0h0bWwodGhpcywgYXJyLCBmb3JtYXR0ZXIsIDApO1xyXG5cdCAgICAgICAgICAgIHJldHVybiBhcnIuam9pbignJylcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDojrflj5boioLngrnnmoRodG1s5YaF5a65XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGlubmVySFRNTFxyXG5cdCAgICAgICAgICogQHdhcm5pbmcg5YGH5aaC6IqC54K555qEdHlwZeS4jeaYrydlbGVtZW50J++8jOaIluiKgueCueeahOagh+etvuWQjeensOS4jeWcqGR0ZOWIl+ihqOmHjO+8jOebtOaOpei/lOWbnuW9k+WJjeiKgueCuVxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFN0cmluZyB9IOi/lOWbnuiKgueCueeahGh0bWzlhoXlrrlcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiB2YXIgaHRtbHN0ciA9IG5vZGUuaW5uZXJIVE1MKCk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6K6+572u6IqC54K555qEaHRtbOWGheWuuVxyXG5cdCAgICAgICAgICogQG1ldGhvZCBpbm5lckhUTUxcclxuXHQgICAgICAgICAqIEB3YXJuaW5nIOWBh+WmguiKgueCueeahHR5cGXkuI3mmK8nZWxlbWVudCfvvIzmiJboioLngrnnmoTmoIfnrb7lkI3np7DkuI3lnKhkdGTliJfooajph4zvvIznm7TmjqXov5Tlm57lvZPliY3oioLngrlcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGh0bWxzdHIg5Lyg5YWl6KaB6K6+572u55qEaHRtbOWGheWuuVxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFVFLnVOb2RlIH0g6L+U5Zue6IqC54K55pys6LqrXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogbm9kZS5pbm5lckhUTUwoJzxzcGFuPnRleHQ8L3NwYW4+Jyk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgaW5uZXJIVE1MOmZ1bmN0aW9uIChodG1sc3RyKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMudHlwZSAhPSAnZWxlbWVudCcgfHwgZHRkLiRlbXB0eVt0aGlzLnRhZ05hbWVdKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoaHRtbHN0cikpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYodGhpcy5jaGlsZHJlbil7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gdGhpcy5jaGlsZHJlbltpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNpLnBhcmVudE5vZGUgPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSBbXTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRtcFJvb3QgPSBVRS5odG1scGFyc2VyKGh0bWxzdHIpO1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gdG1wUm9vdC5jaGlsZHJlbltpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNpLnBhcmVudE5vZGUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB0bXBSb290ID0gbmV3IFVFLnVOb2RlKHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHR5cGU6J3Jvb3QnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46dGhpcy5jaGlsZHJlblxyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRtcFJvb3QudG9IdG1sKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPluiKgueCueeahOe6r+aWh+acrOWGheWuuVxyXG5cdCAgICAgICAgICogQG1ldGhvZCBpbm5lclRleHRcclxuXHQgICAgICAgICAqIEB3YXJuaW5nIOWBh+WmguiKgueCueeahHR5cGXkuI3mmK8nZWxlbWVudCfvvIzmiJboioLngrnnmoTmoIfnrb7lkI3np7DkuI3lnKhkdGTliJfooajph4zvvIznm7TmjqXov5Tlm57lvZPliY3oioLngrlcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBTdHJpbmcgfSDov5Tlm57oioLngrnnmoTlrZjmlofmnKzlhoXlrrlcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiB2YXIgdGV4dFN0ciA9IG5vZGUuaW5uZXJUZXh0KCk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6K6+572u6IqC54K555qE57qv5paH5pys5YaF5a65XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGlubmVyVGV4dFxyXG5cdCAgICAgICAgICogQHdhcm5pbmcg5YGH5aaC6IqC54K555qEdHlwZeS4jeaYrydlbGVtZW50J++8jOaIluiKgueCueeahOagh+etvuWQjeensOS4jeWcqGR0ZOWIl+ihqOmHjO+8jOebtOaOpei/lOWbnuW9k+WJjeiKgueCuVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gdGV4dFN0ciDkvKDlhaXopoHorr7nva7nmoTmlofmnKzlhoXlrrlcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS51Tm9kZSB9IOi/lOWbnuiKgueCueacrOi6q1xyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIG5vZGUuaW5uZXJUZXh0KCc8c3Bhbj50ZXh0PC9zcGFuPicpO1xyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGlubmVyVGV4dDpmdW5jdGlvbiAodGV4dFN0cixub1RyYW5zKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMudHlwZSAhPSAnZWxlbWVudCcgfHwgZHRkLiRlbXB0eVt0aGlzLnRhZ05hbWVdKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAodGV4dFN0cikge1xyXG5cdCAgICAgICAgICAgICAgICBpZih0aGlzLmNoaWxkcmVuKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSB0aGlzLmNoaWxkcmVuW2krK107KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2kucGFyZW50Tm9kZSA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHVOb2RlLmNyZWF0ZVRleHQodGV4dFN0cixub1RyYW5zKSk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRvSHRtbCgpLnJlcGxhY2UoLzxbXj5dKz4vZywgJycpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDojrflj5blvZPliY3lr7nosaHnmoRkYXRh5bGe5oCnXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGdldERhdGFcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBPYmplY3QgfSDoi6XoioLngrnnmoR0eXBl5YC85pivZWxlbWVuZXTvvIzov5Tlm57nqbrlrZfnrKbkuLLvvIzlkKbliJnov5Tlm57oioLngrnnmoRkYXRh5bGe5oCnXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogbm9kZS5nZXREYXRhKCk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0RGF0YTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PSAnZWxlbWVudCcpXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhXHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6I635Y+W5b2T5YmN6IqC54K55LiL55qE56ys5LiA5Liq5a2Q6IqC54K5XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGZpcnN0Q2hpbGRcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS51Tm9kZSB9IOi/lOWbnuesrOS4gOS4quWtkOiKgueCuVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIG5vZGUuZmlyc3RDaGlsZCgpOyAvL+i/lOWbnuesrOS4gOS4quWtkOiKgueCuVxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGZpcnN0Q2hpbGQ6ZnVuY3Rpb24gKCkge1xyXG4vL1x0ICAgICAgICAgICAgaWYgKHRoaXMudHlwZSAhPSAnZWxlbWVudCcgfHwgZHRkLiRlbXB0eVt0aGlzLnRhZ05hbWVdKSB7XHJcbi8vXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbi8vXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4gPyB0aGlzLmNoaWxkcmVuWzBdIDogbnVsbDtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDojrflj5blvZPliY3oioLngrnkuIvnmoTmnIDlkI7kuIDkuKrlrZDoioLngrlcclxuXHQgICAgICAgICAqIEBtZXRob2QgbGFzdENoaWxkXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUudU5vZGUgfSDov5Tlm57mnIDlkI7kuIDkuKrlrZDoioLngrlcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBub2RlLmxhc3RDaGlsZCgpOyAvL+i/lOWbnuacgOWQjuS4gOS4quWtkOiKgueCuVxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGxhc3RDaGlsZDpmdW5jdGlvbiAoKSB7XHJcbi8vXHQgICAgICAgICAgICBpZiAodGhpcy50eXBlICE9ICdlbGVtZW50JyB8fCBkdGQuJGVtcHR5W3RoaXMudGFnTmFtZV0gKSB7XHJcbi8vXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbi8vXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4gPyB0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMV0gOiBudWxsO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPluWSjOW9k+WJjeiKgueCueacieebuOWQjOeItuS6suiKgueCueeahOWJjeS4gOS4quiKgueCuVxyXG5cdCAgICAgICAgICogQG1ldGhvZCBwcmV2aW91c1NpYmxpbmdcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBVRS51Tm9kZSB9IOi/lOWbnuWJjeS4gOS4quiKgueCuVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIG5vZGUuY2hpbGRyZW5bMl0ucHJldmlvdXNTaWJsaW5nKCk7IC8v6L+U5Zue5a2Q6IqC54K5bm9kZS5jaGlsZHJlblsxXVxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHByZXZpb3VzU2libGluZyA6IGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gcGFyZW50LmNoaWxkcmVuW2ldOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNpID09PSB0aGlzKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgIHJldHVybiBpID09IDAgPyBudWxsIDogcGFyZW50LmNoaWxkcmVuW2ktMV07XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPluWSjOW9k+WJjeiKgueCueacieebuOWQjOeItuS6suiKgueCueeahOWQjuS4gOS4quiKgueCuVxyXG5cdCAgICAgICAgICogQG1ldGhvZCBuZXh0U2libGluZ1xyXG5cdCAgICAgICAgICogQHJldHVybiB7IFVFLnVOb2RlIH0g6L+U5Zue5ZCO5LiA5Liq6IqC54K5LOaJvuS4jeWIsOi/lOWbnm51bGxcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBub2RlLmNoaWxkcmVuWzJdLm5leHRTaWJsaW5nKCk7IC8v5aaC5p6c5pyJ77yM6L+U5Zue5a2Q6IqC54K5bm9kZS5jaGlsZHJlblszXVxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIG5leHRTaWJsaW5nIDogZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSBwYXJlbnQuY2hpbGRyZW5baSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNpID09PSB0aGlzKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50LmNoaWxkcmVuW2ldO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOeUqOaWsOeahOiKgueCueabv+aNouW9k+WJjeiKgueCuVxyXG5cdCAgICAgICAgICogQG1ldGhvZCByZXBsYWNlQ2hpbGRcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFVFLnVOb2RlIH0gdGFyZ2V0IOimgeabv+aNouaIkOivpeiKgueCueWPguaVsFxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgVUUudU5vZGUgfSBzb3VyY2Ug6KaB6KKr5pu/5o2i5o6J55qE6IqC54K5XHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUudU5vZGUgfSDov5Tlm57mm7/mjaLkuYvlkI7nmoToioLngrnlr7nosaFcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBub2RlLnJlcGxhY2VDaGlsZChuZXdOb2RlLCBjaGlsZE5vZGUpOyAvL+eUqG5ld05vZGXmm7/mjaJjaGlsZE5vZGUsY2hpbGROb2Rl5pivbm9kZeeahOWtkOiKgueCuVxyXG5cdCAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIHJlcGxhY2VDaGlsZDpmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbikge1xyXG5cdCAgICAgICAgICAgICAgICBpZih0YXJnZXQucGFyZW50Tm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YXJnZXQpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSB0aGlzLmNoaWxkcmVuW2ldOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjaSA9PT0gc291cmNlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaSwgMSwgdGFyZ2V0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UucGFyZW50Tm9kZSA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5Zyo6IqC54K555qE5a2Q6IqC54K55YiX6KGo5pyA5ZCO5L2N572u5o+S5YWl5LiA5Liq6IqC54K5XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGFwcGVuZENoaWxkXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBVRS51Tm9kZSB9IG5vZGUg6KaB5o+S5YWl55qE6IqC54K5XHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUudU5vZGUgfSDov5Tlm57liJrmj5LlhaXnmoTlrZDoioLngrlcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBub2RlLmFwcGVuZENoaWxkKCBuZXdOb2RlICk7IC8v5Zyobm9kZeWGheaPkuWFpeWtkOiKgueCuW5ld05vZGVcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBhcHBlbmRDaGlsZDpmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT0gJ3Jvb3QnIHx8ICh0aGlzLnR5cGUgPT0gJ2VsZW1lbnQnICYmICFkdGQuJGVtcHR5W3RoaXMudGFnTmFtZV0pKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghdGhpcy5jaGlsZHJlbikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYobm9kZS5wYXJlbnROb2RlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gdGhpcy5jaGlsZHJlbltpXTsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY2kgPT09IG5vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShpLCAxKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOWcqOS8oOWFpeiKgueCueeahOWJjemdouaPkuWFpeS4gOS4quiKgueCuVxyXG5cdCAgICAgICAgICogQG1ldGhvZCBpbnNlcnRCZWZvcmVcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFVFLnVOb2RlIH0gdGFyZ2V0IOimgeaPkuWFpeeahOiKgueCuVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgVUUudU5vZGUgfSBzb3VyY2Ug5Zyo6K+l5Y+C5pWw6IqC54K55YmN6Z2i5o+S5YWlXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUudU5vZGUgfSDov5Tlm57liJrmj5LlhaXnmoTlrZDoioLngrlcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIG5vZGUpOyAvL+WcqG5vZGXoioLngrnlkI7pnaLmj5LlhaVuZXdOb2RlXHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgaW5zZXJ0QmVmb3JlOmZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmKHRhcmdldC5wYXJlbnROb2RlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRhcmdldCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHRoaXMuY2hpbGRyZW5baV07IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNpID09PSBzb3VyY2UpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZShpLCAwLCB0YXJnZXQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlID0gdGhpcztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlnKjkvKDlhaXoioLngrnnmoTlkI7pnaLmj5LlhaXkuIDkuKroioLngrlcclxuXHQgICAgICAgICAqIEBtZXRob2QgaW5zZXJ0QWZ0ZXJcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFVFLnVOb2RlIH0gdGFyZ2V0IOimgeaPkuWFpeeahOiKgueCuVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgVUUudU5vZGUgfSBzb3VyY2Ug5Zyo6K+l5Y+C5pWw6IqC54K55ZCO6Z2i5o+S5YWlXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgVUUudU5vZGUgfSDov5Tlm57liJrmj5LlhaXnmoTlrZDoioLngrlcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QWZ0ZXIobmV3Tm9kZSwgbm9kZSk7IC8v5Zyobm9kZeiKgueCueWQjumdouaPkuWFpW5ld05vZGVcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBpbnNlcnRBZnRlcjpmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbikge1xyXG5cdCAgICAgICAgICAgICAgICBpZih0YXJnZXQucGFyZW50Tm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0YXJnZXQpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSB0aGlzLmNoaWxkcmVuW2ldOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjaSA9PT0gc291cmNlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaSArIDEsIDAsIHRhcmdldCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOS7juW9k+WJjeiKgueCueeahOWtkOiKgueCueWIl+ihqOS4re+8jOenu+mZpOiKgueCuVxyXG5cdCAgICAgICAgICogQG1ldGhvZCByZW1vdmVDaGlsZFxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgVUUudU5vZGUgfSBub2RlIOimgeenu+mZpOeahOiKgueCueW8leeUqFxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgQm9vbGVhbiB9IGtlZXBDaGlsZHJlbiDmmK/lkKbkv53nlZnnp7vpmaToioLngrnnmoTlrZDoioLngrnvvIzoi6XkvKDlhaV0cnVl77yM6Ieq5Yqo5oqK56e76Zmk6IqC54K555qE5a2Q6IqC54K55o+S5YWl5Yiw56e76Zmk55qE5L2N572uXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgKiB9IOi/lOWbnuWImuenu+mZpOeahOWtkOiKgueCuVxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGROb2RlLHRydWUpOyAvL+WcqG5vZGXnmoTlrZDoioLngrnliJfooajkuK3np7vpmaRjaGlsZOiKgueCue+8jOW5tuS4lOWQp2NoaWxk55qE5a2Q6IqC54K55o+S5YWl5Yiw56e76Zmk55qE5L2N572uXHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgcmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24gKG5vZGUsa2VlcENoaWxkcmVuKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4pIHtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHRoaXMuY2hpbGRyZW5baV07IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNpID09PSBub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaSwgMSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2kucGFyZW50Tm9kZSA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoa2VlcENoaWxkcmVuICYmIGNpLmNoaWxkcmVuICYmIGNpLmNoaWxkcmVuLmxlbmd0aCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaj0gMCxjajtjaj1jaS5jaGlsZHJlbltqXTtqKyspe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5zcGxpY2UoaStqLDAsY2opO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2oucGFyZW50Tm9kZSA9IHRoaXM7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjaTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDojrflj5blvZPliY3oioLngrnmiYDku6PooajnmoTlhYPntKDlsZ7mgKfvvIzljbPojrflj5ZhdHRyc+WvueixoeS4i+eahOWxnuaAp+WAvFxyXG5cdCAgICAgICAgICogQG1ldGhvZCBnZXRBdHRyXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBhdHRyTmFtZSDopoHojrflj5bnmoTlsZ7mgKflkI3np7BcclxuXHQgICAgICAgICAqIEByZXR1cm4geyAqIH0g6L+U5ZueYXR0cnPlr7nosaHkuIvnmoTlsZ7mgKflgLxcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBub2RlLmdldEF0dHIoJ3RpdGxlJyk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0QXR0cjpmdW5jdGlvbiAoYXR0ck5hbWUpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5hdHRycyAmJiB0aGlzLmF0dHJzW2F0dHJOYW1lLnRvTG93ZXJDYXNlKCldXHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6K6+572u5b2T5YmN6IqC54K55omA5Luj6KGo55qE5YWD57Sg5bGe5oCn77yM5Y2z6K6+572uYXR0cnPlr7nosaHkuIvnmoTlsZ7mgKflgLxcclxuXHQgICAgICAgICAqIEBtZXRob2Qgc2V0QXR0clxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gYXR0ck5hbWUg6KaB6K6+572u55qE5bGe5oCn5ZCN56ewXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyAqIH0gYXR0clZhbCDopoHorr7nva7nmoTlsZ7mgKflgLzvvIznsbvlnovop4borr7nva7nmoTlsZ7mgKfogIzlrppcclxuXHQgICAgICAgICAqIEByZXR1cm4geyAqIH0g6L+U5ZueYXR0cnPlr7nosaHkuIvnmoTlsZ7mgKflgLxcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBub2RlLnNldEF0dHIoJ3RpdGxlJywn5qCH6aKYJyk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgc2V0QXR0cjpmdW5jdGlvbiAoYXR0ck5hbWUsIGF0dHJWYWwpIHtcclxuXHQgICAgICAgICAgICBpZiAoIWF0dHJOYW1lKSB7XHJcblx0ICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmF0dHJzO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmKCF0aGlzLmF0dHJzKXtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5hdHRycyA9IHt9O1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAodXRpbHMuaXNPYmplY3QoYXR0ck5hbWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGEgaW4gYXR0ck5hbWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghYXR0ck5hbWVbYV0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5hdHRyc1thXVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJzW2EudG9Mb3dlckNhc2UoKV0gPSBhdHRyTmFtZVthXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghYXR0clZhbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXR0cnNbYXR0ck5hbWVdXHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dHJzW2F0dHJOYW1lLnRvTG93ZXJDYXNlKCldID0gYXR0clZhbDtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6I635Y+W5b2T5YmN6IqC54K55Zyo54i26IqC54K55LiL55qE5L2N572u57Si5byVXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGdldEluZGV4XHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgTnVtYmVyIH0g6L+U5Zue57Si5byV5pWw5YC877yM5aaC5p6c5rKh5pyJ54i26IqC54K577yM6L+U5ZueLTFcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBub2RlLmdldEluZGV4KCk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0SW5kZXg6ZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgIGZvcih2YXIgaT0gMCxjaTtjaT1wYXJlbnQuY2hpbGRyZW5baV07aSsrKXtcclxuXHQgICAgICAgICAgICAgICAgaWYoY2kgPT09IHRoaXMpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOWcqOW9k+WJjeiKgueCueS4i++8jOagueaNrmlk5p+l5om+6IqC54K5XHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGdldE5vZGVCeUlkXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBpZCDopoHmn6Xmib7nmoRpZFxyXG5cdCAgICAgICAgICogQHJldHVybiB7IFVFLnVOb2RlIH0g6L+U5Zue5om+5Yiw55qE6IqC54K5XHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogbm9kZS5nZXROb2RlQnlJZCgndGV4dElkJyk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0Tm9kZUJ5SWQ6ZnVuY3Rpb24gKGlkKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG5vZGU7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuY2hpbGRyZW4gJiYgdGhpcy5jaGlsZHJlbi5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHRoaXMuY2hpbGRyZW5baSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChub2RlID0gZ2V0Tm9kZUJ5SWQoY2ksIGlkKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOWcqOW9k+WJjeiKgueCueS4i++8jOagueaNruWFg+e0oOWQjeensOafpeaJvuiKgueCueWIl+ihqFxyXG5cdCAgICAgICAgICogQG1ldGhvZCBnZXROb2Rlc0J5VGFnTmFtZVxyXG5cdCAgICAgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gdGFnTmFtZXMg6KaB5p+l5om+55qE5YWD57Sg5ZCN56ewXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgQXJyYXkgfSDov5Tlm57mib7liLDnmoToioLngrnliJfooahcclxuXHQgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgKiBub2RlLmdldE5vZGVzQnlUYWdOYW1lKCdzcGFuJyk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0Tm9kZXNCeVRhZ05hbWU6ZnVuY3Rpb24gKHRhZ05hbWVzKSB7XHJcblx0ICAgICAgICAgICAgdGFnTmFtZXMgPSB1dGlscy50cmltKHRhZ05hbWVzKS5yZXBsYWNlKC9bIF17Mix9L2csICcgJykuc3BsaXQoJyAnKTtcclxuXHQgICAgICAgICAgICB2YXIgYXJyID0gW10sIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKHRhZ05hbWVzLCBmdW5jdGlvbiAodGFnTmFtZSkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobWUuY2hpbGRyZW4gJiYgbWUuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gbWUuY2hpbGRyZW5baSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBnZXROb2Rlc0J5VGFnTmFtZShjaSwgdGFnTmFtZSwgYXJyKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGFycjtcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmoLnmja7moLflvI/lkI3np7DvvIzojrflj5boioLngrnnmoTmoLflvI/lgLxcclxuXHQgICAgICAgICAqIEBtZXRob2QgZ2V0U3R5bGVcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG5hbWUg6KaB6I635Y+W55qE5qC35byP5ZCN56ewXHJcblx0ICAgICAgICAgKiBAcmV0dXJuIHsgU3RyaW5nIH0g6L+U5Zue5qC35byP5YC8XHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogbm9kZS5nZXRTdHlsZSgnZm9udC1zaXplJyk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0U3R5bGU6ZnVuY3Rpb24gKG5hbWUpIHtcclxuXHQgICAgICAgICAgICB2YXIgY3NzU3R5bGUgPSB0aGlzLmdldEF0dHIoJ3N0eWxlJyk7XHJcblx0ICAgICAgICAgICAgaWYgKCFjc3NTdHlsZSkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gJydcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoJyhefDspXFxcXHMqJyArIG5hbWUgKyAnOihbXjtdKyknLCdpJyk7XHJcblx0ICAgICAgICAgICAgdmFyIG1hdGNoID0gY3NzU3R5bGUubWF0Y2gocmVnKTtcclxuXHQgICAgICAgICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMF0pIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzJdXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiAnJztcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDnu5noioLngrnorr7nva7moLflvI9cclxuXHQgICAgICAgICAqIEBtZXRob2Qgc2V0U3R5bGVcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IG5hbWUg6KaB6K6+572u55qE55qE5qC35byP5ZCN56ewXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSB2YWwg6KaB6K6+572u55qE55qE5qC35YC8XHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogbm9kZS5zZXRTdHlsZSgnZm9udC1zaXplJywgJzEycHgnKTtcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBzZXRTdHlsZTpmdW5jdGlvbiAobmFtZSwgdmFsKSB7XHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gZXhlYyhuYW1lLCB2YWwpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoJyhefDspXFxcXHMqJyArIG5hbWUgKyAnOihbXjtdKzs/KScsICdnaScpO1xyXG5cdCAgICAgICAgICAgICAgICBjc3NTdHlsZSA9IGNzc1N0eWxlLnJlcGxhY2UocmVnLCAnJDEnKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHZhbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY3NzU3R5bGUgPSBuYW1lICsgJzonICsgdXRpbHMudW5odG1sKHZhbCkgKyAnOycgKyBjc3NTdHlsZVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgdmFyIGNzc1N0eWxlID0gdGhpcy5nZXRBdHRyKCdzdHlsZScpO1xyXG5cdCAgICAgICAgICAgIGlmICghY3NzU3R5bGUpIHtcclxuXHQgICAgICAgICAgICAgICAgY3NzU3R5bGUgPSAnJztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKHV0aWxzLmlzT2JqZWN0KG5hbWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGEgaW4gbmFtZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZXhlYyhhLCBuYW1lW2FdKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgZXhlYyhuYW1lLCB2YWwpXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMuc2V0QXR0cignc3R5bGUnLCB1dGlscy50cmltKGNzc1N0eWxlKSlcclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDkvKDlhaXkuIDkuKrlh73mlbDvvIzpgJLlvZLpgY3ljoblvZPliY3oioLngrnkuIvnmoTmiYDmnInoioLngrlcclxuXHQgICAgICAgICAqIEBtZXRob2QgdHJhdmVyc2FsXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBGdW5jdGlvbiB9IGZuIOmBjeWOhuWIsOiKgueCueeahOaXtu+8jOS8oOWFpeiKgueCueS9nOS4uuWPguaVsO+8jOi/kOihjOatpOWHveaVsFxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIHRyYXZlcnNhbChub2RlLCBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICogICAgIGNvbnNvbGUubG9nKG5vZGUudHlwZSk7XHJcblx0ICAgICAgICAgKiB9KTtcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICB0cmF2ZXJzYWw6ZnVuY3Rpb24oZm4pe1xyXG5cdCAgICAgICAgICAgIGlmKHRoaXMuY2hpbGRyZW4gJiYgdGhpcy5jaGlsZHJlbi5sZW5ndGgpe1xyXG5cdCAgICAgICAgICAgICAgICBub2RlVHJhdmVyc2FsKHRoaXMsZm4pO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdH0pKCk7XHJcblxyXG5cclxuXHQvLyBjb3JlL2h0bWxwYXJzZXIuanNcclxuXHQvKipcclxuXHQgKiBodG1s5a2X56ym5Liy6L2s5o2i5oiQdU5vZGXoioLngrlcclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBtb2R1bGUgVUVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiBVRWRpdG9y5YWs55So56m66Ze077yMVUVkaXRvcuaJgOacieeahOWKn+iDvemDveaMgui9veWcqOivpeepuumXtOS4i1xyXG5cdCAqIEB1bmZpbGVcclxuXHQgKiBAbW9kdWxlIFVFXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIGh0bWzlrZfnrKbkuLLovazmjaLmiJB1Tm9kZeiKgueCueeahOmdmeaAgeaWueazlVxyXG5cdCAqIEBtZXRob2QgaHRtbHBhcnNlclxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGh0bWxzdHIg6KaB6L2s5o2i55qEaHRtbOS7o+eggVxyXG5cdCAqIEBwYXJhbSB7IEJvb2xlYW4gfSBpZ25vcmVCbGFuayDoi6Xorr7nva7kuLp0cnVl77yM6L2s5o2i55qE5pe25YCZ5b+955WlXFxuXFxyXFx0562J56m655m95a2X56ymXHJcblx0ICogQHJldHVybiB7IHVOb2RlIH0g57uZ5a6a55qEaHRtbOeJh+autei9rOaNouW9ouaIkOeahHVOb2Rl5a+56LGhXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogdmFyIHJvb3QgPSBVRS5odG1scGFyc2VyKCc8cD48Yj5odG1scGFyc2VyPC9iPjwvcD4nLCB0cnVlKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0dmFyIGh0bWxwYXJzZXIgPSBVRS5odG1scGFyc2VyID0gZnVuY3Rpb24gKGh0bWxzdHIsaWdub3JlQmxhbmspIHtcclxuXHQgICAgLy90b2RvIOWOn+adpeeahOaWueW8jyAgW15cIic8PlxcL10g5pyJXFwv5bCx5LiN6IO96YWN5a+55LiKIDxURCB2QWxpZ249dG9wIGJhY2tncm91bmQ9Li4vQUFBLkpQRz4g6L+Z5qC355qE5qCH562+5LqGXHJcblx0ICAgIC8v5YWI5Y675o6J5LqG77yM5Yqg5LiK55qE5Y6f5Zug5b+Y5LqG77yM6L+Z6YeM5YWI6K6w5b2VXHJcblx0ICAgIHZhciByZV90YWcgPSAvPCg/Oig/OlxcLyhbXj5dKyk+KXwoPzohLS0oW1xcU3xcXHNdKj8pLS0+KXwoPzooW15cXHNcXC88Pl0rKVxccyooKD86KD86XCJbXlwiXSpcIil8KD86J1teJ10qJyl8W15cIic8Pl0pKilcXC8/PikpL2csXHJcblx0ICAgICAgICByZV9hdHRyID0gLyhbXFx3XFwtOi5dKykoPzooPzpcXHMqPVxccyooPzooPzpcIihbXlwiXSopXCIpfCg/OicoW14nXSopJyl8KFteXFxzPl0rKSkpfCg/PVxcc3wkKSkvZztcclxuXHJcblx0ICAgIC8vaWXkuIvlj5blvpfnmoRodG1s5Y+v6IO95Lya5pyJXFxu5a2Y5Zyo77yM6KaB5Y675o6J77yM5Zyo5aSE55CGcmVwbGFjZSgvW1xcdFxcclxcbl0qL2csJycpO+S7o+eggemrmOmHj+eahFxcbuS4jeiDveWOu+mZpFxyXG5cdCAgICB2YXIgYWxsb3dFbXB0eVRhZ3MgPSB7XHJcblx0ICAgICAgICBiOjEsY29kZToxLGk6MSx1OjEsc3RyaWtlOjEsczoxLHR0OjEsc3Ryb25nOjEscToxLHNhbXA6MSxlbToxLHNwYW46MSxcclxuXHQgICAgICAgIHN1YjoxLGltZzoxLHN1cDoxLGZvbnQ6MSxiaWc6MSxzbWFsbDoxLGlmcmFtZToxLGE6MSxicjoxLHByZToxXHJcblx0ICAgIH07XHJcblx0ICAgIGh0bWxzdHIgPSBodG1sc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChkb21VdGlscy5maWxsQ2hhciwgJ2cnKSwgJycpO1xyXG5cdCAgICBpZighaWdub3JlQmxhbmspe1xyXG5cdCAgICAgICAgaHRtbHN0ciA9IGh0bWxzdHIucmVwbGFjZShuZXcgUmVnRXhwKCdbXFxcXHJcXFxcdFxcXFxuJysoaWdub3JlQmxhbms/Jyc6JyAnKSsnXSo8XFwvPyhcXFxcdyspXFxcXHMqKD86W14+XSopPltcXFxcclxcXFx0XFxcXG4nKyhpZ25vcmVCbGFuaz8nJzonICcpKyddKicsJ2cnKSwgZnVuY3Rpb24oYSxiKXtcclxuXHQgICAgICAgICAgICAvL2Jy5pqC5pe25Y2V54us5aSE55CGXHJcblx0ICAgICAgICAgICAgaWYoYiAmJiBhbGxvd0VtcHR5VGFnc1tiLnRvTG93ZXJDYXNlKCldKXtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGEucmVwbGFjZSgvKF5bXFxuXFxyXSspfChbXFxuXFxyXSskKS9nLCcnKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGEucmVwbGFjZShuZXcgUmVnRXhwKCdeW1xcXFxyXFxcXG4nKyhpZ25vcmVCbGFuaz8nJzonICcpKyddKycpLCcnKS5yZXBsYWNlKG5ldyBSZWdFeHAoJ1tcXFxcclxcXFxuJysoaWdub3JlQmxhbms/Jyc6JyAnKSsnXSskJyksJycpO1xyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHZhciBub3RUcmFuc0F0dHJzID0ge1xyXG5cdCAgICAgICAgJ2hyZWYnOjEsXHJcblx0ICAgICAgICAnc3JjJzoxXHJcblx0ICAgIH07XHJcblxyXG5cdCAgICB2YXIgdU5vZGUgPSBVRS51Tm9kZSxcclxuXHQgICAgICAgIG5lZWRQYXJlbnROb2RlID0ge1xyXG5cdCAgICAgICAgICAgICd0ZCc6J3RyJyxcclxuXHQgICAgICAgICAgICAndHInOlsndGJvZHknLCd0aGVhZCcsJ3Rmb290J10sXHJcblx0ICAgICAgICAgICAgJ3Rib2R5JzondGFibGUnLFxyXG5cdCAgICAgICAgICAgICd0aCc6J3RyJyxcclxuXHQgICAgICAgICAgICAndGhlYWQnOid0YWJsZScsXHJcblx0ICAgICAgICAgICAgJ3Rmb290JzondGFibGUnLFxyXG5cdCAgICAgICAgICAgICdjYXB0aW9uJzondGFibGUnLFxyXG5cdCAgICAgICAgICAgICdsaSc6Wyd1bCcsICdvbCddLFxyXG5cdCAgICAgICAgICAgICdkdCc6J2RsJyxcclxuXHQgICAgICAgICAgICAnZGQnOidkbCcsXHJcblx0ICAgICAgICAgICAgJ29wdGlvbic6J3NlbGVjdCdcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBuZWVkQ2hpbGQgPSB7XHJcblx0ICAgICAgICAgICAgJ29sJzonbGknLFxyXG5cdCAgICAgICAgICAgICd1bCc6J2xpJ1xyXG5cdCAgICAgICAgfTtcclxuXHJcblx0ICAgIGZ1bmN0aW9uIHRleHQocGFyZW50LCBkYXRhKSB7XHJcblxyXG5cdCAgICAgICAgaWYobmVlZENoaWxkW3BhcmVudC50YWdOYW1lXSl7XHJcblx0ICAgICAgICAgICAgdmFyIHRtcE5vZGUgPSB1Tm9kZS5jcmVhdGVFbGVtZW50KG5lZWRDaGlsZFtwYXJlbnQudGFnTmFtZV0pO1xyXG5cdCAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICB0bXBOb2RlLmFwcGVuZENoaWxkKHVOb2RlLmNyZWF0ZVRleHQoZGF0YSkpO1xyXG5cdCAgICAgICAgICAgIHBhcmVudCA9IHRtcE5vZGU7XHJcblx0ICAgICAgICB9ZWxzZXtcclxuXHJcblx0ICAgICAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKHVOb2RlLmNyZWF0ZVRleHQoZGF0YSkpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBlbGVtZW50KHBhcmVudCwgdGFnTmFtZSwgaHRtbGF0dHIpIHtcclxuXHQgICAgICAgIHZhciBuZWVkUGFyZW50VGFnO1xyXG5cdCAgICAgICAgaWYgKG5lZWRQYXJlbnRUYWcgPSBuZWVkUGFyZW50Tm9kZVt0YWdOYW1lXSkge1xyXG5cdCAgICAgICAgICAgIHZhciB0bXBQYXJlbnQgPSBwYXJlbnQsaGFzUGFyZW50O1xyXG5cdCAgICAgICAgICAgIHdoaWxlKHRtcFBhcmVudC50eXBlICE9ICdyb290Jyl7XHJcblx0ICAgICAgICAgICAgICAgIGlmKHV0aWxzLmlzQXJyYXkobmVlZFBhcmVudFRhZykgPyB1dGlscy5pbmRleE9mKG5lZWRQYXJlbnRUYWcsIHRtcFBhcmVudC50YWdOYW1lKSAhPSAtMSA6IG5lZWRQYXJlbnRUYWcgPT0gdG1wUGFyZW50LnRhZ05hbWUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gdG1wUGFyZW50O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaGFzUGFyZW50ID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHRtcFBhcmVudCA9IHRtcFBhcmVudC5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZighaGFzUGFyZW50KXtcclxuXHQgICAgICAgICAgICAgICAgcGFyZW50ID0gZWxlbWVudChwYXJlbnQsIHV0aWxzLmlzQXJyYXkobmVlZFBhcmVudFRhZykgPyBuZWVkUGFyZW50VGFnWzBdIDogbmVlZFBhcmVudFRhZylcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvL+aMiWR0ZOWkhOeQhuW1jOWll1xyXG4vL1x0ICAgICAgICBpZihwYXJlbnQudHlwZSAhPSAncm9vdCcgJiYgIWR0ZFtwYXJlbnQudGFnTmFtZV1bdGFnTmFtZV0pXHJcbi8vXHQgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcclxuXHQgICAgICAgIHZhciBlbG0gPSBuZXcgdU5vZGUoe1xyXG5cdCAgICAgICAgICAgIHBhcmVudE5vZGU6cGFyZW50LFxyXG5cdCAgICAgICAgICAgIHR5cGU6J2VsZW1lbnQnLFxyXG5cdCAgICAgICAgICAgIHRhZ05hbWU6dGFnTmFtZS50b0xvd2VyQ2FzZSgpLFxyXG5cdCAgICAgICAgICAgIC8v5piv6Ieq6Zet5ZCI55qE5aSE55CG5LiA5LiLXHJcblx0ICAgICAgICAgICAgY2hpbGRyZW46ZHRkLiRlbXB0eVt0YWdOYW1lXSA/IG51bGwgOiBbXVxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICAvL+WmguaenOWxnuaAp+WtmOWcqO+8jOWkhOeQhuWxnuaAp1xyXG5cdCAgICAgICAgaWYgKGh0bWxhdHRyKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGF0dHJzID0ge30sIG1hdGNoO1xyXG5cdCAgICAgICAgICAgIHdoaWxlIChtYXRjaCA9IHJlX2F0dHIuZXhlYyhodG1sYXR0cikpIHtcclxuXHQgICAgICAgICAgICAgICAgYXR0cnNbbWF0Y2hbMV0udG9Mb3dlckNhc2UoKV0gPSBub3RUcmFuc0F0dHJzW21hdGNoWzFdLnRvTG93ZXJDYXNlKCldID8gKG1hdGNoWzJdIHx8IG1hdGNoWzNdIHx8IG1hdGNoWzRdKSA6IHV0aWxzLnVuaHRtbChtYXRjaFsyXSB8fCBtYXRjaFszXSB8fCBtYXRjaFs0XSlcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxtLmF0dHJzID0gYXR0cnM7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvL3RyYWNlOjM5NzBcclxuLy9cdCAgICAgICAgLy/lpoLmnpxwYXJlbnTkuIvkuI3og73mlL5lbG1cclxuLy9cdCAgICAgICAgaWYoZHRkLiRpbmxpbmVbcGFyZW50LnRhZ05hbWVdICYmIGR0ZC4kYmxvY2tbZWxtLnRhZ05hbWVdICYmICFkdGRbcGFyZW50LnRhZ05hbWVdW2VsbS50YWdOYW1lXSl7XHJcbi8vXHQgICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcclxuLy9cdCAgICAgICAgICAgIGVsbS5wYXJlbnROb2RlID0gcGFyZW50O1xyXG4vL1x0ICAgICAgICB9XHJcblx0ICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChlbG0pO1xyXG5cdCAgICAgICAgLy/lpoLmnpzmmK/oh6rpl63lkIjoioLngrnov5Tlm57niLbkurLoioLngrlcclxuXHQgICAgICAgIHJldHVybiAgZHRkLiRlbXB0eVt0YWdOYW1lXSA/IHBhcmVudCA6IGVsbVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBjb21tZW50KHBhcmVudCwgZGF0YSkge1xyXG5cdCAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2gobmV3IHVOb2RlKHtcclxuXHQgICAgICAgICAgICB0eXBlOidjb21tZW50JyxcclxuXHQgICAgICAgICAgICBkYXRhOmRhdGEsXHJcblx0ICAgICAgICAgICAgcGFyZW50Tm9kZTpwYXJlbnRcclxuXHQgICAgICAgIH0pKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIG1hdGNoLCBjdXJyZW50SW5kZXggPSAwLCBuZXh0SW5kZXggPSAwO1xyXG5cdCAgICAvL+iuvue9ruagueiKgueCuVxyXG5cdCAgICB2YXIgcm9vdCA9IG5ldyB1Tm9kZSh7XHJcblx0ICAgICAgICB0eXBlOidyb290JyxcclxuXHQgICAgICAgIGNoaWxkcmVuOltdXHJcblx0ICAgIH0pO1xyXG5cdCAgICB2YXIgY3VycmVudFBhcmVudCA9IHJvb3Q7XHJcblxyXG5cdCAgICB3aGlsZSAobWF0Y2ggPSByZV90YWcuZXhlYyhodG1sc3RyKSkge1xyXG5cdCAgICAgICAgY3VycmVudEluZGV4ID0gbWF0Y2guaW5kZXg7XHJcblx0ICAgICAgICB0cnl7XHJcblx0ICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA+IG5leHRJbmRleCkge1xyXG5cdCAgICAgICAgICAgICAgICAvL3RleHQgbm9kZVxyXG5cdCAgICAgICAgICAgICAgICB0ZXh0KGN1cnJlbnRQYXJlbnQsIGh0bWxzdHIuc2xpY2UobmV4dEluZGV4LCBjdXJyZW50SW5kZXgpKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKG1hdGNoWzNdKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZihkdGQuJGNkYXRhW2N1cnJlbnRQYXJlbnQudGFnTmFtZV0pe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGV4dChjdXJyZW50UGFyZW50LCBtYXRjaFswXSk7XHJcblx0ICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy9zdGFydCB0YWdcclxuXHQgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJlbnQgPSBlbGVtZW50KGN1cnJlbnRQYXJlbnQsIG1hdGNoWzNdLnRvTG93ZXJDYXNlKCksIG1hdGNoWzRdKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaFsxXSkge1xyXG5cdCAgICAgICAgICAgICAgICBpZihjdXJyZW50UGFyZW50LnR5cGUgIT0gJ3Jvb3QnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGR0ZC4kY2RhdGFbY3VycmVudFBhcmVudC50YWdOYW1lXSAmJiAhZHRkLiRjZGF0YVttYXRjaFsxXV0pe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRleHQoY3VycmVudFBhcmVudCwgbWF0Y2hbMF0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcFBhcmVudCA9IGN1cnJlbnRQYXJlbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoY3VycmVudFBhcmVudC50eXBlID09ICdlbGVtZW50JyAmJiBjdXJyZW50UGFyZW50LnRhZ05hbWUgIT0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQYXJlbnQgPSBjdXJyZW50UGFyZW50LnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRQYXJlbnQudHlwZSA9PSAncm9vdCcpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhcmVudCA9IHRtcFBhcmVudDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93ICdicmVhaydcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL2VuZCB0YWdcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGFyZW50ID0gY3VycmVudFBhcmVudC5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoWzJdKSB7XHJcblx0ICAgICAgICAgICAgICAgIC8vY29tbWVudFxyXG5cdCAgICAgICAgICAgICAgICBjb21tZW50KGN1cnJlbnRQYXJlbnQsIG1hdGNoWzJdKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1jYXRjaChlKXt9XHJcblxyXG5cdCAgICAgICAgbmV4dEluZGV4ID0gcmVfdGFnLmxhc3RJbmRleDtcclxuXHJcblx0ICAgIH1cclxuXHQgICAgLy/lpoLmnpznu5PmnZ/mmK/mlofmnKzvvIzlsLHmnInlj6/og73kuKLmjonvvIzmiYDku6Xov5nph4zmiYvliqjliKTmlq3kuIDkuItcclxuXHQgICAgLy/kvovlpoIgPGxpPnNkZnNkZnNkZjxsaT5zZGZzZGZzZGZzZGZcclxuXHQgICAgaWYgKG5leHRJbmRleCA8IGh0bWxzdHIubGVuZ3RoKSB7XHJcblx0ICAgICAgICB0ZXh0KGN1cnJlbnRQYXJlbnQsIGh0bWxzdHIuc2xpY2UobmV4dEluZGV4KSk7XHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIHJvb3Q7XHJcblx0fTtcclxuXHJcblxyXG5cdC8vIGNvcmUvZmlsdGVybm9kZS5qc1xyXG5cdC8qKlxyXG5cdCAqIFVF6L+H5ruk6IqC54K555qE6Z2Z5oCB5pa55rOVXHJcblx0ICogQGZpbGVcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICogVUVkaXRvcuWFrOeUqOepuumXtO+8jFVFZGl0b3LmiYDmnInnmoTlip/og73pg73mjILovb3lnKjor6Xnqbrpl7TkuItcclxuXHQgKiBAbW9kdWxlIFVFXHJcblx0ICovXHJcblxyXG5cclxuXHQvKipcclxuXHQgKiDmoLnmja7kvKDlhaXoioLngrnlkozov4fmu6Top4TliJnov4fmu6Tnm7jlupToioLngrlcclxuXHQgKiBAbW9kdWxlIFVFXHJcblx0ICogQHNpbmNlIDEuMi42LjFcclxuXHQgKiBAbWV0aG9kIGZpbHRlck5vZGVcclxuXHQgKiBAcGFyYW0geyBPYmplY3QgfSByb290IOaMh+WumnJvb3ToioLngrlcclxuXHQgKiBAcGFyYW0geyBPYmplY3QgfSBydWxlcyDov4fmu6Top4TliJlqc29u5a+56LGhXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogVUUuZmlsdGVyTm9kZShyb290LGVkaXRvci5vcHRpb25zLmZpbHRlclJ1bGVzKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHR2YXIgZmlsdGVyTm9kZSA9IFVFLmZpbHRlck5vZGUgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIGZpbHRlck5vZGUobm9kZSxydWxlcyl7XHJcblx0ICAgICAgICBzd2l0Y2ggKG5vZGUudHlwZSkge1xyXG5cdCAgICAgICAgICAgIGNhc2UgJ3RleHQnOlxyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBjYXNlICdlbGVtZW50JzpcclxuXHQgICAgICAgICAgICAgICAgdmFyIHZhbDtcclxuXHQgICAgICAgICAgICAgICAgaWYodmFsID0gcnVsZXNbbm9kZS50YWdOYW1lXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgIGlmKHZhbCA9PT0gJy0nKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKVxyXG5cdCAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZih1dGlscy5pc0Z1bmN0aW9uKHZhbCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBub2RlLmdldEluZGV4KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICB2YWwobm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICBpZihub2RlLnBhcmVudE5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5vZGUuY2hpbGRyZW4pe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwLGNpO2NpPW5vZGUuY2hpbGRyZW5baV07KXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlck5vZGUoY2kscnVsZXMpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2kucGFyZW50Tm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gaW5kZXgsY2k7Y2k9cGFyZW50Tm9kZS5jaGlsZHJlbltpXTspe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJOb2RlKGNpLHJ1bGVzKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2kucGFyZW50Tm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpKys7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cnMgPSB2YWxbJyQnXTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgIGlmKGF0dHJzICYmIG5vZGUuYXR0cnMpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXBBdHRycyA9IHt9LHRtcFZhbDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGEgaW4gYXR0cnMpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBWYWwgPSBub2RlLmdldEF0dHIoYSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdG9kbyDlj6rlhYjlr7lzdHlsZeWNleeLrOWkhOeQhlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihhID09ICdzdHlsZScgJiYgdXRpbHMuaXNBcnJheShhdHRyc1thXSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcENzc1N0eWxlID0gW107XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5lYWNoKGF0dHJzW2FdLGZ1bmN0aW9uKHYpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXA7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodG1wID0gbm9kZS5nZXRTdHlsZSh2KSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcENzc1N0eWxlLnB1c2godiArICc6JyArIHRtcCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBWYWwgPSB0bXBDc3NTdHlsZS5qb2luKCc7JylcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih0bXBWYWwpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wQXR0cnNbYV0gPSB0bXBWYWw7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXR0cnMgPSB0bXBBdHRycztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgIGlmKG5vZGUuY2hpbGRyZW4pe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDAsY2k7Y2k9bm9kZS5jaGlsZHJlbltpXTspe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJOb2RlKGNpLHJ1bGVzKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2kucGFyZW50Tm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpKys7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+WmguaenOS4jeWcqOWQjeWNlemHjOaJo+WHuuWtkOiKgueCueW5tuWIoOmZpOivpeiKgueCuSxjZGF0YemZpOWkllxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoZHRkLiRjZGF0YVtub2RlLnRhZ05hbWVdKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSlcclxuXHQgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnROb2RlID0gbm9kZS5wYXJlbnROb2RlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IG5vZGUuZ2V0SW5kZXgoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSx0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSBpbmRleCxjaTtjaT1wYXJlbnROb2RlLmNoaWxkcmVuW2ldOyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlck5vZGUoY2kscnVsZXMpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjaS5wYXJlbnROb2RlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICBjYXNlICdjb21tZW50JzpcclxuXHQgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpXHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9XHJcblx0ICAgIHJldHVybiBmdW5jdGlvbihyb290LHJ1bGVzKXtcclxuXHQgICAgICAgIGlmKHV0aWxzLmlzRW1wdHlPYmplY3QocnVsZXMpKXtcclxuXHQgICAgICAgICAgICByZXR1cm4gcm9vdDtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciB2YWw7XHJcblx0ICAgICAgICBpZih2YWwgPSBydWxlc1snLSddKXtcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKHZhbC5zcGxpdCgnICcpLGZ1bmN0aW9uKGspe1xyXG5cdCAgICAgICAgICAgICAgICBydWxlc1trXSA9ICctJ1xyXG5cdCAgICAgICAgICAgIH0pXHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBmb3IodmFyIGk9IDAsY2k7Y2k9cm9vdC5jaGlsZHJlbltpXTspe1xyXG5cdCAgICAgICAgICAgIGZpbHRlck5vZGUoY2kscnVsZXMpO1xyXG5cdCAgICAgICAgICAgIGlmKGNpLnBhcmVudE5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgIGkrKztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gcm9vdDtcclxuXHQgICAgfVxyXG5cdH0oKTtcclxuXHJcblx0Ly8gY29yZS9wbHVnaW4uanNcclxuXHQvKipcclxuXHQgKiBDcmVhdGVkIHdpdGggSmV0QnJhaW5zIFBocFN0b3JtLlxyXG5cdCAqIFVzZXI6IGNhbXBhaWduXHJcblx0ICogRGF0ZTogMTAvOC8xM1xyXG5cdCAqIFRpbWU6IDY6MTUgUE1cclxuXHQgKiBUbyBjaGFuZ2UgdGhpcyB0ZW1wbGF0ZSB1c2UgRmlsZSB8IFNldHRpbmdzIHwgRmlsZSBUZW1wbGF0ZXMuXHJcblx0ICovXHJcblx0VUUucGx1Z2luID0gZnVuY3Rpb24oKXtcclxuXHQgICAgdmFyIF9wbHVnaW5zID0ge307XHJcblx0ICAgIHJldHVybiB7XHJcblx0ICAgICAgICByZWdpc3RlciA6IGZ1bmN0aW9uKHBsdWdpbk5hbWUsZm4sb2xkT3B0aW9uTmFtZSxhZnRlckRpc2FibGVkKXtcclxuXHQgICAgICAgICAgICBpZihvbGRPcHRpb25OYW1lICYmIHV0aWxzLmlzRnVuY3Rpb24ob2xkT3B0aW9uTmFtZSkpe1xyXG5cdCAgICAgICAgICAgICAgICBhZnRlckRpc2FibGVkID0gb2xkT3B0aW9uTmFtZTtcclxuXHQgICAgICAgICAgICAgICAgb2xkT3B0aW9uTmFtZSA9IG51bGxcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgX3BsdWdpbnNbcGx1Z2luTmFtZV0gPSB7XHJcblx0ICAgICAgICAgICAgICAgIG9wdGlvbk5hbWUgOiBvbGRPcHRpb25OYW1lIHx8IHBsdWdpbk5hbWUsXHJcblx0ICAgICAgICAgICAgICAgIGV4ZWNGbiA6IGZuLFxyXG5cdCAgICAgICAgICAgICAgICAvL+W9k+aPkuS7tuiiq+emgeeUqOaXtuaJp+ihjFxyXG5cdCAgICAgICAgICAgICAgICBhZnRlckRpc2FibGVkIDogYWZ0ZXJEaXNhYmxlZFxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBsb2FkIDogZnVuY3Rpb24oZWRpdG9yKXtcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKF9wbHVnaW5zLGZ1bmN0aW9uKHBsdWdpbil7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBfZXhwb3J0ID0gcGx1Z2luLmV4ZWNGbi5jYWxsKGVkaXRvcik7XHJcblx0ICAgICAgICAgICAgICAgIGlmKGVkaXRvci5vcHRpb25zW3BsdWdpbi5vcHRpb25OYW1lXSAhPT0gZmFsc2Upe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoX2V4cG9ydCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy/lkI7ovrnpnIDopoHlho3lgZrmianlsZVcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5lYWNoKF9leHBvcnQsZnVuY3Rpb24odixrKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoKGsudG9Mb3dlckNhc2UoKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzaG9ydGN1dGtleSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmFkZHNob3J0Y3V0a2V5KHYpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmluZGV2ZW50cyc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuZWFjaCh2LGZ1bmN0aW9uKGZuLGV2ZW50TmFtZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5hZGRMaXN0ZW5lcihldmVudE5hbWUsZm4pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYmluZG11bHRpZXZlbnRzJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5lYWNoKHV0aWxzLmlzQXJyYXkodikgPyB2Olt2XSxmdW5jdGlvbihldmVudCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eXBlcyA9IHV0aWxzLnRyaW0oZXZlbnQudHlwZSkuc3BsaXQoL1xccysvKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuZWFjaCh0eXBlcyxmdW5jdGlvbihldmVudE5hbWUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKGV2ZW50TmFtZSwgZXZlbnQuaGFuZGxlcik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29tbWFuZHMnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmVhY2godixmdW5jdGlvbihleGVjRm4sZXhlY05hbWUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IuY29tbWFuZHNbZXhlY05hbWVdID0gZXhlY0ZuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdvdXRwdXRydWxlJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IuYWRkT3V0cHV0UnVsZSh2KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lucHV0cnVsZSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmFkZElucHV0UnVsZSh2KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RlZmF1bHRvcHRpb25zJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0T3B0KHYpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgfWVsc2UgaWYocGx1Z2luLmFmdGVyRGlzYWJsZWQpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmFmdGVyRGlzYWJsZWQuY2FsbChlZGl0b3IpXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgLy/lkJHkuIvlhbzlrrlcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKFVFLnBsdWdpbnMsZnVuY3Rpb24ocGx1Z2luKXtcclxuXHQgICAgICAgICAgICAgICAgcGx1Z2luLmNhbGwoZWRpdG9yKTtcclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBydW4gOiBmdW5jdGlvbihwbHVnaW5OYW1lLGVkaXRvcil7XHJcblx0ICAgICAgICAgICAgdmFyIHBsdWdpbiA9IF9wbHVnaW5zW3BsdWdpbk5hbWVdO1xyXG5cdCAgICAgICAgICAgIGlmKHBsdWdpbil7XHJcblx0ICAgICAgICAgICAgICAgIHBsdWdpbi5leGVGbi5jYWxsKGVkaXRvcilcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHR9KCk7XHJcblxyXG5cdC8vIGNvcmUva2V5bWFwLmpzXHJcblx0dmFyIGtleW1hcCA9IFVFLmtleW1hcCAgPSB7XHJcblx0ICAgICdCYWNrc3BhY2UnIDogOCxcclxuXHQgICAgJ1RhYicgOiA5LFxyXG5cdCAgICAnRW50ZXInIDogMTMsXHJcblxyXG5cdCAgICAnU2hpZnQnOjE2LFxyXG5cdCAgICAnQ29udHJvbCc6MTcsXHJcblx0ICAgICdBbHQnOjE4LFxyXG5cdCAgICAnQ2Fwc0xvY2snOjIwLFxyXG5cclxuXHQgICAgJ0VzYyc6MjcsXHJcblxyXG5cdCAgICAnU3BhY2ViYXInOjMyLFxyXG5cclxuXHQgICAgJ1BhZ2VVcCc6MzMsXHJcblx0ICAgICdQYWdlRG93bic6MzQsXHJcblx0ICAgICdFbmQnOjM1LFxyXG5cdCAgICAnSG9tZSc6MzYsXHJcblxyXG5cdCAgICAnTGVmdCc6MzcsXHJcblx0ICAgICdVcCc6MzgsXHJcblx0ICAgICdSaWdodCc6MzksXHJcblx0ICAgICdEb3duJzo0MCxcclxuXHJcblx0ICAgICdJbnNlcnQnOjQ1LFxyXG5cclxuXHQgICAgJ0RlbCc6NDYsXHJcblxyXG5cdCAgICAnTnVtTG9jayc6MTQ0LFxyXG5cclxuXHQgICAgJ0NtZCc6OTEsXHJcblxyXG5cdCAgICAnPSc6MTg3LFxyXG5cdCAgICAnLSc6MTg5LFxyXG5cclxuXHQgICAgXCJiXCI6NjYsXHJcblx0ICAgICdpJzo3MyxcclxuXHQgICAgLy/lm57pgIBcclxuXHQgICAgJ3onOjkwLFxyXG5cdCAgICAneSc6ODksXHJcblx0ICAgIC8v57KY6LS0XHJcblx0ICAgICd2JyA6IDg2LFxyXG5cdCAgICAneCcgOiA4OCxcclxuXHJcblx0ICAgICdzJyA6IDgzLFxyXG5cclxuXHQgICAgJ24nIDogNzhcclxuXHR9O1xyXG5cclxuXHQvLyBjb3JlL2xvY2Fsc3RvcmFnZS5qc1xyXG5cdC8v5a2Y5YKo5aqS5LuL5bCB6KOFXHJcblx0dmFyIExvY2FsU3RvcmFnZSA9IFVFLkxvY2FsU3RvcmFnZSA9IChmdW5jdGlvbiAoKSB7XHJcblxyXG5cdCAgICB2YXIgc3RvcmFnZSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UgfHwgZ2V0VXNlckRhdGEoKSB8fCBudWxsLFxyXG5cdCAgICAgICAgTE9DQUxfRklMRSA9ICdsb2NhbFN0b3JhZ2UnO1xyXG5cclxuXHQgICAgcmV0dXJuIHtcclxuXHJcblx0ICAgICAgICBzYXZlTG9jYWxEYXRhOiBmdW5jdGlvbiAoa2V5LCBkYXRhKSB7XHJcblxyXG5cdCAgICAgICAgICAgIGlmIChzdG9yYWdlICYmIGRhdGEpIHtcclxuXHQgICAgICAgICAgICAgICAgc3RvcmFnZS5zZXRJdGVtKGtleSwgZGF0YSk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgZ2V0TG9jYWxEYXRhOiBmdW5jdGlvbiAoa2V5KSB7XHJcblxyXG5cdCAgICAgICAgICAgIGlmIChzdG9yYWdlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBzdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cclxuXHQgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgcmVtb3ZlSXRlbTogZnVuY3Rpb24gKGtleSkge1xyXG5cclxuXHQgICAgICAgICAgICBzdG9yYWdlICYmIHN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xyXG5cclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgIH07XHJcblxyXG5cdCAgICBmdW5jdGlvbiBnZXRVc2VyRGF0YSgpIHtcclxuXHJcblx0ICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHQgICAgICAgIGNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblxyXG5cdCAgICAgICAgaWYgKCFjb250YWluZXIuYWRkQmVoYXZpb3IpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBjb250YWluZXIuYWRkQmVoYXZpb3IoXCIjZGVmYXVsdCN1c2VyZGF0YVwiKTtcclxuXHJcblx0ICAgICAgICByZXR1cm4ge1xyXG5cclxuXHQgICAgICAgICAgICBnZXRJdGVtOiBmdW5jdGlvbiAoa2V5KSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjb250YWluZXIubG9hZChMT0NBTF9GSUxFKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGNvbnRhaW5lci5nZXRBdHRyaWJ1dGUoa2V5KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcclxuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG5cclxuXHQgICAgICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgICAgICBzZXRJdGVtOiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xyXG5cdCAgICAgICAgICAgICAgICBjb250YWluZXIuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xyXG5cdCAgICAgICAgICAgICAgICBjb250YWluZXIuc2F2ZShMT0NBTF9GSUxFKTtcclxuXHQgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xyXG5cclxuXHQgICAgICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgICAgICAvLy8vIOaaguaXtuayoeacieeUqOWIsFxyXG5cdCAgICAgICAgICAgIC8vY2xlYXI6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAvL1xyXG5cdCAgICAgICAgICAgIC8vICAgIHZhciBleHBpcmVzVGltZSA9IG5ldyBEYXRlKCk7XHJcblx0ICAgICAgICAgICAgLy8gICAgZXhwaXJlc1RpbWUuc2V0RnVsbFllYXIoZXhwaXJlc1RpbWUuZ2V0RnVsbFllYXIoKSAtIDEpO1xyXG5cdCAgICAgICAgICAgIC8vICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcclxuXHQgICAgICAgICAgICAvLyAgICBjb250YWluZXIuZXhwaXJlcyA9IGV4cGlyZXNUaW1lLnRvVVRDU3RyaW5nKCk7XHJcblx0ICAgICAgICAgICAgLy8gICAgY29udGFpbmVyLnNhdmUoTE9DQUxfRklMRSk7XHJcblx0ICAgICAgICAgICAgLy8gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xyXG5cdCAgICAgICAgICAgIC8vXHJcblx0ICAgICAgICAgICAgLy99LFxyXG5cclxuXHQgICAgICAgICAgICByZW1vdmVJdGVtOiBmdW5jdGlvbiAoa2V5KSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XHJcblx0ICAgICAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcclxuXHQgICAgICAgICAgICAgICAgY29udGFpbmVyLnNhdmUoTE9DQUxfRklMRSk7XHJcblx0ICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyKTtcclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH07XHJcblxyXG5cdCAgICB9XHJcblxyXG5cdH0pKCk7XHJcblxyXG5cdChmdW5jdGlvbiAoKSB7XHJcblxyXG5cdCAgICB2YXIgUk9PVEtFWSA9ICd1ZWRpdG9yX3ByZWZlcmVuY2UnO1xyXG5cclxuXHQgICAgVUUuRWRpdG9yLnByb3RvdHlwZS5zZXRQcmVmZXJlbmNlcyA9IGZ1bmN0aW9uKGtleSx2YWx1ZSl7XHJcblx0ICAgICAgICB2YXIgb2JqID0ge307XHJcblx0ICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoa2V5KSkge1xyXG5cdCAgICAgICAgICAgIG9ialsga2V5IF0gPSB2YWx1ZTtcclxuXHQgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgb2JqID0ga2V5O1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIGRhdGEgPSBMb2NhbFN0b3JhZ2UuZ2V0TG9jYWxEYXRhKFJPT1RLRVkpO1xyXG5cdCAgICAgICAgaWYgKGRhdGEgJiYgKGRhdGEgPSB1dGlscy5zdHIyanNvbihkYXRhKSkpIHtcclxuXHQgICAgICAgICAgICB1dGlscy5leHRlbmQoZGF0YSwgb2JqKTtcclxuXHQgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgZGF0YSA9IG9iajtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGRhdGEgJiYgTG9jYWxTdG9yYWdlLnNhdmVMb2NhbERhdGEoUk9PVEtFWSwgdXRpbHMuanNvbjJzdHIoZGF0YSkpO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgVUUuRWRpdG9yLnByb3RvdHlwZS5nZXRQcmVmZXJlbmNlcyA9IGZ1bmN0aW9uKGtleSl7XHJcblx0ICAgICAgICB2YXIgZGF0YSA9IExvY2FsU3RvcmFnZS5nZXRMb2NhbERhdGEoUk9PVEtFWSk7XHJcblx0ICAgICAgICBpZiAoZGF0YSAmJiAoZGF0YSA9IHV0aWxzLnN0cjJqc29uKGRhdGEpKSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBrZXkgPyBkYXRhW2tleV0gOiBkYXRhXHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gbnVsbDtcclxuXHQgICAgfTtcclxuXHJcblx0ICAgIFVFLkVkaXRvci5wcm90b3R5cGUucmVtb3ZlUHJlZmVyZW5jZXMgPSBmdW5jdGlvbiAoa2V5KSB7XHJcblx0ICAgICAgICB2YXIgZGF0YSA9IExvY2FsU3RvcmFnZS5nZXRMb2NhbERhdGEoUk9PVEtFWSk7XHJcblx0ICAgICAgICBpZiAoZGF0YSAmJiAoZGF0YSA9IHV0aWxzLnN0cjJqc29uKGRhdGEpKSkge1xyXG5cdCAgICAgICAgICAgIGRhdGFba2V5XSA9IHVuZGVmaW5lZDtcclxuXHQgICAgICAgICAgICBkZWxldGUgZGF0YVtrZXldXHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBkYXRhICYmIExvY2FsU3RvcmFnZS5zYXZlTG9jYWxEYXRhKFJPT1RLRVksIHV0aWxzLmpzb24yc3RyKGRhdGEpKTtcclxuXHQgICAgfTtcclxuXHJcblx0fSkoKTtcclxuXHJcblxyXG5cdC8vIHBsdWdpbnMvZGVmYXVsdGZpbHRlci5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vcGx1Z2luIOe8lui+keWZqOm7mOiupOeahOi/h+a7pOi9rOaNouacuuWItlxyXG5cclxuXHRVRS5wbHVnaW5zWydkZWZhdWx0ZmlsdGVyJ10gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgIG1lLnNldE9wdCh7XHJcblx0ICAgICAgICAnYWxsb3dEaXZUcmFuc1RvUCc6dHJ1ZSxcclxuXHQgICAgICAgICdkaXNhYmxlZFRhYmxlSW5UYWJsZSc6dHJ1ZVxyXG5cdCAgICB9KTtcclxuXHQgICAgLy/pu5jorqTnmoTov4fmu6TlpITnkIZcclxuXHQgICAgLy/ov5vlhaXnvJbovpHlmajnmoTlhoXlrrnlpITnkIZcclxuXHQgICAgbWUuYWRkSW5wdXRSdWxlKGZ1bmN0aW9uIChyb290KSB7XHJcblx0ICAgICAgICB2YXIgYWxsb3dEaXZUcmFuc1RvUCA9IHRoaXMub3B0aW9ucy5hbGxvd0RpdlRyYW5zVG9QO1xyXG5cdCAgICAgICAgdmFyIHZhbDtcclxuXHQgICAgICAgIGZ1bmN0aW9uIHRkUGFyZW50KG5vZGUpe1xyXG5cdCAgICAgICAgICAgIHdoaWxlKG5vZGUgJiYgbm9kZS50eXBlID09ICdlbGVtZW50Jyl7XHJcblx0ICAgICAgICAgICAgICAgIGlmKG5vZGUudGFnTmFtZSA9PSAndGQnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIC8v6L+b6KGM6buY6K6k55qE5aSE55CGXHJcblx0ICAgICAgICByb290LnRyYXZlcnNhbChmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT0gJ2VsZW1lbnQnKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghZHRkLiRjZGF0YVtub2RlLnRhZ05hbWVdICYmIG1lLm9wdGlvbnMuYXV0b0NsZWFyRW1wdHlOb2RlICYmIGR0ZC4kaW5saW5lW25vZGUudGFnTmFtZV0gJiYgIWR0ZC4kZW1wdHlbbm9kZS50YWdOYW1lXSAmJiAoIW5vZGUuYXR0cnMgfHwgdXRpbHMuaXNFbXB0eU9iamVjdChub2RlLmF0dHJzKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghbm9kZS5maXJzdENoaWxkKCkpIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUudGFnTmFtZSA9PSAnc3BhbicgJiYgKCFub2RlLmF0dHJzIHx8IHV0aWxzLmlzRW1wdHlPYmplY3Qobm9kZS5hdHRycykpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUsIHRydWUpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgc3dpdGNoIChub2RlLnRhZ05hbWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0eWxlJzpcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NjcmlwdCc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyKHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2RhdGFfdGFnOiBub2RlLnRhZ05hbWUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNkYXRhX2RhdGE6IChub2RlLmlubmVySFRNTCgpIHx8ICcnKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ191ZV9jdXN0b21fbm9kZV8nOid0cnVlJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudGFnTmFtZSA9ICdkaXYnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuaW5uZXJIVE1MKCcnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2EnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgPSBub2RlLmdldEF0dHIoJ2hyZWYnKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHIoJ19ocmVmJywgdmFsKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ltZyc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy90b2RvIGJhc2U2NOaaguaXtuWOu+aOie+8jOWQjui+ueWBmui/nOeoi+WbvueJh+S4iuS8oOWQju+8jOW5suaOiei/meS4qlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgPSBub2RlLmdldEF0dHIoJ3NyYycpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvXmRhdGE6Ly50ZXN0KHZhbCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cignX3NyYycsIG5vZGUuZ2V0QXR0cignc3JjJykpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3Bhbic6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJyb3dzZXIud2Via2l0ICYmICh2YWwgPSBub2RlLmdldFN0eWxlKCd3aGl0ZS1zcGFjZScpKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoL25vd3JhcHxub3JtYWwvLnRlc3QodmFsKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRTdHlsZSgnd2hpdGUtc3BhY2UnLCAnJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWUub3B0aW9ucy5hdXRvQ2xlYXJFbXB0eU5vZGUgJiYgdXRpbHMuaXNFbXB0eU9iamVjdChub2RlLmF0dHJzKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlLCB0cnVlKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IG5vZGUuZ2V0QXR0cignaWQnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZih2YWwgJiYgL15fYmFpZHVfYm9va21hcmtfL2kudGVzdCh2YWwpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAncCc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCA9IG5vZGUuZ2V0QXR0cignYWxpZ24nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHIoJ2FsaWduJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0U3R5bGUoJ3RleHQtYWxpZ24nLCB2YWwpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJhY2U6MzQzMVxyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNzc1N0eWxlID0gbm9kZS5nZXRBdHRyKCdzdHlsZScpO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNzc1N0eWxlKSB7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzU3R5bGUgPSBjc3NTdHlsZS5yZXBsYWNlKC8obWFyZ2lufHBhZGRpbmcpW147XSsvZywgJycpO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cignc3R5bGUnLCBjc3NTdHlsZSlcclxuXHQvL1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vcOagh+etvuS4jeWFgeiuuOW1jOWll1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmVhY2gobm9kZS5jaGlsZHJlbixmdW5jdGlvbihuKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobi50eXBlID09ICdlbGVtZW50JyAmJiBuLnRhZ05hbWUgPT0gJ3AnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gbi5uZXh0U2libGluZygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEFmdGVyKG4sbm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IG47XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShuZXh0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0gbmV4dC5uZXh0U2libGluZygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5pbnNlcnRBZnRlcihuZXh0LGxhc3QpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBuZXh0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQgPSB0bXA7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5vZGUuZmlyc3RDaGlsZCgpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuaW5uZXJIVE1MKGJyb3dzZXIuaWUgPyAnJm5ic3A7JyA6ICc8YnIvPicpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGl2JzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihub2RlLmdldEF0dHIoJ2NkYXRhX3RhZycpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8v6ZKI5a+55Luj56CB6L+Z6YeM5LiN5aSE55CG5o+S5YWl5Luj56CB55qEZGl2XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gbm9kZS5nZXRBdHRyKCdjbGFzcycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbCAmJiAvXmxpbmUgbnVtYmVyXFxkKy8udGVzdCh2YWwpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFhbGxvd0RpdlRyYW5zVG9QKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXBOb2RlLCBwID0gVUUudU5vZGUuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0bXBOb2RlID0gbm9kZS5maXJzdENoaWxkKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRtcE5vZGUudHlwZSA9PSAndGV4dCcgfHwgIVVFLmRvbS5kdGQuJGJsb2NrW3RtcE5vZGUudGFnTmFtZV0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQodG1wTm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5maXJzdENoaWxkKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHAsIG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBVRS51Tm9kZS5jcmVhdGVFbGVtZW50KCdwJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodG1wTm9kZSwgbm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAuZmlyc3RDaGlsZCgpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocCwgbm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RsJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnRhZ05hbWUgPSAndWwnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnZHQnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnZGQnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudGFnTmFtZSA9ICdsaSc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdsaSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IG5vZGUuZ2V0QXR0cignY2xhc3MnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNsYXNzTmFtZSB8fCAhL2xpc3RcXC0vLnRlc3QoY2xhc3NOYW1lKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHIoKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wTm9kZXMgPSBub2RlLmdldE5vZGVzQnlUYWdOYW1lKCdvbCB1bCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIFVFLnV0aWxzLmVhY2godG1wTm9kZXMsIGZ1bmN0aW9uIChuKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5pbnNlcnRBZnRlcihuLCBub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RkJzpcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RoJzpcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NhcHRpb24nOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFub2RlLmNoaWxkcmVuIHx8ICFub2RlLmNoaWxkcmVuLmxlbmd0aCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoYnJvd3Nlci5pZTExYmVsb3cgPyBVRS51Tm9kZS5jcmVhdGVUZXh0KCcgJykgOiBVRS51Tm9kZS5jcmVhdGVFbGVtZW50KCdicicpKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RhYmxlJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihtZS5vcHRpb25zLmRpc2FibGVkVGFibGVJblRhYmxlICYmIHRkUGFyZW50KG5vZGUpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShVRS51Tm9kZS5jcmVhdGVUZXh0KG5vZGUuaW5uZXJUZXh0KCkpLG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgfVxyXG4vL1x0ICAgICAgICAgICAgaWYobm9kZS50eXBlID09ICdjb21tZW50Jyl7XHJcbi8vXHQgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xyXG4vL1x0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSlcclxuXHJcblx0ICAgIH0pO1xyXG5cclxuXHQgICAgLy/ku47nvJbovpHlmajlh7rljrvnmoTlhoXlrrnlpITnkIZcclxuXHQgICAgbWUuYWRkT3V0cHV0UnVsZShmdW5jdGlvbiAocm9vdCkge1xyXG5cclxuXHQgICAgICAgIHZhciB2YWw7XHJcblx0ICAgICAgICByb290LnRyYXZlcnNhbChmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgIGlmIChub2RlLnR5cGUgPT0gJ2VsZW1lbnQnKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZiAobWUub3B0aW9ucy5hdXRvQ2xlYXJFbXB0eU5vZGUgJiYgZHRkLiRpbmxpbmVbbm9kZS50YWdOYW1lXSAmJiAhZHRkLiRlbXB0eVtub2RlLnRhZ05hbWVdICYmICghbm9kZS5hdHRycyB8fCB1dGlscy5pc0VtcHR5T2JqZWN0KG5vZGUuYXR0cnMpKSkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghbm9kZS5maXJzdENoaWxkKCkpIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUudGFnTmFtZSA9PSAnc3BhbicgJiYgKCFub2RlLmF0dHJzIHx8IHV0aWxzLmlzRW1wdHlPYmplY3Qobm9kZS5hdHRycykpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUsIHRydWUpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgc3dpdGNoIChub2RlLnRhZ05hbWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Rpdic6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCA9IG5vZGUuZ2V0QXR0cignY2RhdGFfdGFnJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS50YWdOYW1lID0gdmFsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKFVFLnVOb2RlLmNyZWF0ZVRleHQobm9kZS5nZXRBdHRyKCdjZGF0YV9kYXRhJykpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyKHtjZGF0YV90YWc6ICcnLCBjZGF0YV9kYXRhOiAnJywnX3VlX2N1c3RvbV9ub2RlXyc6Jyd9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdhJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsID0gbm9kZS5nZXRBdHRyKCdfaHJlZicpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cih7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaHJlZic6IHV0aWxzLmh0bWwodmFsKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdfaHJlZic6ICcnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3Bhbic6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gbm9kZS5nZXRBdHRyKCdpZCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbCAmJiAvXl9iYWlkdV9ib29rbWFya18vaS50ZXN0KHZhbCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdpbWcnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgPSBub2RlLmdldEF0dHIoJ19zcmMnKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHIoe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NyYyc6IG5vZGUuZ2V0QXR0cignX3NyYycpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ19zcmMnOiAnJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH0pXHJcblxyXG5cclxuXHQgICAgfSk7XHJcblx0fTtcclxuXHJcblxyXG5cdC8vIHBsdWdpbnMvaW5zZXJ0aHRtbC5qc1xyXG5cdC8qKlxyXG5cdCAqIOaPkuWFpWh0bWzlrZfnrKbkuLLmj5Lku7ZcclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIOaPkuWFpWh0bWzku6PnoIFcclxuXHQgKiBAY29tbWFuZCBpbnNlcnRodG1sXHJcblx0ICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBodG1sIOaPkuWFpeeahGh0bWzlrZfnrKbkuLJcclxuXHQgKiBAcmVtYWluZCDmj5LlhaXnmoTmoIfnrb7lhoXlrrnmmK/lnKjlvZPliY3nmoTpgInljLrkvY3nva7kuIrmj5LlhaXvvIzlpoLmnpzlvZPliY3mmK/pl63lkIjnirbmgIHvvIzpgqPnm7TmjqXmj5LlhaXlhoXlrrnvvIwg5aaC5p6c5b2T5YmN5piv6YCJ5Lit54q25oCB77yM5bCG5YWI5riF6Zmk5b2T5YmN6YCJ5Lit5YaF5a655ZCO77yM5YaN5YGa5o+S5YWlXHJcblx0ICogQHdhcm5pbmcg5rOo5oSPOuivpeWRveS7pOS8muWvueW9k+WJjemAieWMuueahOS9jee9ru+8jOWvueaPkuWFpeeahOWGheWuuei/m+ihjOi/h+a7pOi9rOaNouWkhOeQhuOAgiDov4fmu6TnmoTop4TliJnpgbXlvqpodG1s6K+t5oSP5YyW55qE5Y6f5YiZ44CCXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogLy94eHhbQkJdeHh4IOW9k+WJjemAieWMuuS4uumdnumXreWQiOmAieWMuu+8jOmAieS4rUJC6L+Z5Lik5Liq5paH5pysXHJcblx0ICogLy/miafooYzlkb3ku6TvvIzmj5LlhaU8Yj5DQzwvYj5cclxuXHQgKiAvL+aPkuWFpeWQjueahOaViOaenCB4eHg8Yj5DQzwvYj54eHhcclxuXHQgKiAvLzxwPnh4fHh4eDwvcD4g5b2T5YmN6YCJ5Yy65Li66Zet5ZCI54q25oCBXHJcblx0ICogLy/mj5LlhaU8cD5DQzwvcD5cclxuXHQgKiAvL+e7k+aenCA8cD54eDwvcD48cD5DQzwvcD48cD54eHg8L3A+XHJcblx0ICogLy88cD54eHh4PC9wPnw8L3A+eHh4PC9wPiDlvZPliY3pgInljLrlnKjkuKTkuKpw5qCH562+5LmL6Ze0XHJcblx0ICogLy/mj5LlhaUgeHh4eFxyXG5cdCAqIC8v57uT5p6cIDxwPnh4eHg8L3A+PHA+eHh4eDwvcD48L3A+eHh4PC9wPlxyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHRVRS5jb21tYW5kc1snaW5zZXJ0aHRtbCddID0ge1xyXG5cdCAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKGNvbW1hbmQsaHRtbCxub3ROZWVkRmlsdGVyKXtcclxuXHQgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgcmFuZ2UsXHJcblx0ICAgICAgICAgICAgZGl2O1xyXG5cdCAgICAgICAgaWYoIWh0bWwpe1xyXG5cdCAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmKG1lLmZpcmVFdmVudCgnYmVmb3JlaW5zZXJ0aHRtbCcsaHRtbCkgPT09IHRydWUpe1xyXG5cdCAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICBkaXYgPSByYW5nZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnZGl2JyApO1xyXG5cdCAgICAgICAgZGl2LnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lJztcclxuXHJcblx0ICAgICAgICBpZiAoIW5vdE5lZWRGaWx0ZXIpIHtcclxuXHQgICAgICAgICAgICB2YXIgcm9vdCA9IFVFLmh0bWxwYXJzZXIoaHRtbCk7XHJcblx0ICAgICAgICAgICAgLy/lpoLmnpznu5nkuobov4fmu6Top4TliJnlsLHlhYjov5vooYzov4fmu6RcclxuXHQgICAgICAgICAgICBpZihtZS5vcHRpb25zLmZpbHRlclJ1bGVzKXtcclxuXHQgICAgICAgICAgICAgICAgVUUuZmlsdGVyTm9kZShyb290LG1lLm9wdGlvbnMuZmlsdGVyUnVsZXMpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAvL+aJp+ihjOm7mOiupOeahOWkhOeQhlxyXG5cdCAgICAgICAgICAgIG1lLmZpbHRlcklucHV0UnVsZShyb290KTtcclxuXHQgICAgICAgICAgICBodG1sID0gcm9vdC50b0h0bWwoKVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZGl2LmlubmVySFRNTCA9IHV0aWxzLnRyaW0oIGh0bWwgKTtcclxuXHJcblx0ICAgICAgICBpZiAoICFyYW5nZS5jb2xsYXBzZWQgKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRtcE5vZGUgPSByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICBpZihkb21VdGlscy5pc0ZpbGxDaGFyKHRtcE5vZGUpKXtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRCZWZvcmUodG1wTm9kZSlcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdG1wTm9kZSA9IHJhbmdlLmVuZENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICBpZihkb21VdGlscy5pc0ZpbGxDaGFyKHRtcE5vZGUpKXtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kQWZ0ZXIodG1wTm9kZSlcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmFuZ2UudHh0VG9FbG1Cb3VuZGFyeSgpO1xyXG5cdCAgICAgICAgICAgIC8v57uT5p2f6L6555WM5Y+v6IO95pS+5Yiw5LqGYnLnmoTliY3ovrnvvIzopoHmiopicuWMheWQq+i/m+adpVxyXG5cdCAgICAgICAgICAgIC8vIHhbeHh4XTxici8+XHJcblx0ICAgICAgICAgICAgaWYocmFuZ2UuZW5kQ29udGFpbmVyICYmIHJhbmdlLmVuZENvbnRhaW5lci5ub2RlVHlwZSA9PSAxKXtcclxuXHQgICAgICAgICAgICAgICAgdG1wTm9kZSA9IHJhbmdlLmVuZENvbnRhaW5lci5jaGlsZE5vZGVzW3JhbmdlLmVuZE9mZnNldF07XHJcblx0ICAgICAgICAgICAgICAgIGlmKHRtcE5vZGUgJiYgZG9tVXRpbHMuaXNCcih0bXBOb2RlKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmRBZnRlcih0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZihyYW5nZS5zdGFydE9mZnNldCA9PSAwKXtcclxuXHQgICAgICAgICAgICAgICAgdG1wTm9kZSA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG5cdCAgICAgICAgICAgICAgICBpZihkb21VdGlscy5pc0JvdW5kYXJ5Tm9kZSh0bXBOb2RlLCdmaXJzdENoaWxkJykgKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRtcE5vZGUgPSByYW5nZS5lbmRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihyYW5nZS5lbmRPZmZzZXQgPT0gKHRtcE5vZGUubm9kZVR5cGUgPT0gMyA/IHRtcE5vZGUubm9kZVZhbHVlLmxlbmd0aCA6IHRtcE5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpICYmIGRvbVV0aWxzLmlzQm91bmRhcnlOb2RlKHRtcE5vZGUsJ2xhc3RDaGlsZCcpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5ib2R5LmlubmVySFRNTCA9ICc8cD4nKyhicm93c2VyLmllID8gJycgOiAnPGJyLz4nKSsnPC9wPic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobWUuYm9keS5maXJzdENoaWxkLDApLmNvbGxhcHNlKHRydWUpXHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICFyYW5nZS5jb2xsYXBzZWQgJiYgcmFuZ2UuZGVsZXRlQ29udGVudHMoKTtcclxuXHQgICAgICAgICAgICBpZihyYW5nZS5zdGFydENvbnRhaW5lci5ub2RlVHlwZSA9PSAxKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gcmFuZ2Uuc3RhcnRDb250YWluZXIuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF0scHJlO1xyXG5cdCAgICAgICAgICAgICAgICBpZihjaGlsZCAmJiBkb21VdGlscy5pc0Jsb2NrRWxtKGNoaWxkKSAmJiAocHJlID0gY2hpbGQucHJldmlvdXNTaWJsaW5nKSAmJiBkb21VdGlscy5pc0Jsb2NrRWxtKHByZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHByZSxwcmUuY2hpbGROb2Rlcy5sZW5ndGgpLmNvbGxhcHNlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZShjaGlsZC5maXJzdENoaWxkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcmUuYXBwZW5kQ2hpbGQoY2hpbGQuZmlyc3RDaGlsZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgdmFyIGNoaWxkLHBhcmVudCxwcmUsdG1wLGhhZEJyZWFrID0gMCwgbmV4dE5vZGU7XHJcblx0ICAgICAgICAvL+WmguaenOW9k+WJjeS9jee9rumAieS4reS6hmZpbGxjaGFy6KaB5bmy5o6J77yM6KaB5LiN5Lya5Lqn55Sf56m66KGMXHJcblx0ICAgICAgICBpZihyYW5nZS5pbkZpbGxDaGFyKCkpe1xyXG5cdCAgICAgICAgICAgIGNoaWxkID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgaWYoZG9tVXRpbHMuaXNGaWxsQ2hhcihjaGlsZCkpe1xyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZShjaGlsZCkuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShjaGlsZCk7XHJcblx0ICAgICAgICAgICAgfWVsc2UgaWYoZG9tVXRpbHMuaXNGaWxsQ2hhcihjaGlsZCx0cnVlKSl7XHJcblx0ICAgICAgICAgICAgICAgIGNoaWxkLm5vZGVWYWx1ZSA9IGNoaWxkLm5vZGVWYWx1ZS5yZXBsYWNlKGZpbGxDaGFyUmVnLCcnKTtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRPZmZzZXQtLTtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2VkICYmIHJhbmdlLmNvbGxhcHNlKHRydWUpXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLy/liJfooajljZXni6zlpITnkIZcclxuXHQgICAgICAgIHZhciBsaSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocmFuZ2Uuc3RhcnRDb250YWluZXIsJ2xpJyx0cnVlKTtcclxuXHQgICAgICAgIGlmKGxpKXtcclxuXHQgICAgICAgICAgICB2YXIgbmV4dCxsYXN0O1xyXG5cdCAgICAgICAgICAgIHdoaWxlKGNoaWxkID0gZGl2LmZpcnN0Q2hpbGQpe1xyXG5cdCAgICAgICAgICAgICAgICAvL+mSiOWvuWhy5Y2V54us5aSE55CG5LiA5LiL5YWIXHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlKGNoaWxkICYmIChjaGlsZC5ub2RlVHlwZSA9PSAzIHx8ICFkb21VdGlscy5pc0Jsb2NrRWxtKGNoaWxkKSB8fCBjaGlsZC50YWdOYW1lPT0nSFInICkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZSggY2hpbGQpLmNvbGxhcHNlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsYXN0ID0gY2hpbGQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IG5leHQ7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmKGNoaWxkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKC9eKG9sfHVsKSQvaS50ZXN0KGNoaWxkLnRhZ05hbWUpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShjaGlsZC5maXJzdENoaWxkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGNoaWxkLmZpcnN0Q2hpbGQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmluc2VydEFmdGVyKGxpLGNoaWxkLmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaSA9IGxpLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY2hpbGQpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wTGk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRtcExpID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5pbnNlcnRBZnRlcihsaSx0bXBMaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdG1wTGkuYXBwZW5kQ2hpbGQoY2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBjaGlsZDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IG5leHQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGkgPSB0bXBMaTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBsaSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocmFuZ2Uuc3RhcnRDb250YWluZXIsJ2xpJyx0cnVlKTtcclxuXHQgICAgICAgICAgICBpZihkb21VdGlscy5pc0VtcHR5QmxvY2sobGkpKXtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGxpKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZihsYXN0KXtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QWZ0ZXIobGFzdCkuY29sbGFwc2UodHJ1ZSkuc2VsZWN0KHRydWUpXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgd2hpbGUgKCBjaGlsZCA9IGRpdi5maXJzdENoaWxkICkge1xyXG5cdCAgICAgICAgICAgICAgICBpZihoYWRCcmVhayl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHdoaWxlKGNoaWxkICYmIChjaGlsZC5ub2RlVHlwZSA9PSAzIHx8ICFkdGQuJGJsb2NrW2NoaWxkLnRhZ05hbWVdKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBjaGlsZC5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwLmFwcGVuZENoaWxkKGNoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IG5leHROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYocC5maXJzdENoaWxkKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQgPSBwXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZSggY2hpbGQgKTtcclxuXHQgICAgICAgICAgICAgICAgbmV4dE5vZGUgPSBjaGlsZC5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgaWYgKCAhaGFkQnJlYWsgJiYgY2hpbGQubm9kZVR5cGUgPT0gZG9tVXRpbHMuTk9ERV9FTEVNRU5UICYmIGRvbVV0aWxzLmlzQmxvY2tFbG0oIGNoaWxkICkgKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBkb21VdGlscy5maW5kUGFyZW50KCBjaGlsZCxmdW5jdGlvbiAoIG5vZGUgKXsgcmV0dXJuIGRvbVV0aWxzLmlzQmxvY2tFbG0oIG5vZGUgKTsgfSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCBwYXJlbnQgJiYgcGFyZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPSAnYm9keScgJiYgIShkdGRbcGFyZW50LnRhZ05hbWVdW2NoaWxkLm5vZGVOYW1lXSAmJiBjaGlsZC5wYXJlbnROb2RlID09PSBwYXJlbnQpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZighZHRkW3BhcmVudC50YWdOYW1lXVtjaGlsZC5ub2RlTmFtZV0pe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmUgPSBwYXJlbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IGNoaWxkLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0bXAgIT09IHBhcmVudCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmUgPSB0bXA7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSB0bXAucGFyZW50Tm9kZTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5icmVha1BhcmVudCggY2hpbGQsIHByZSB8fCB0bXAgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL+WOu+aOiWJyZWFr5ZCO5YmN5LiA5Liq5aSa5L2Z55qE6IqC54K5ICA8cD58PFtwPiA9PT4gPHA+PC9wPjxkaXY+PC9kaXY+PHA+fDwvcD5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJlID0gY2hpbGQucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnRyaW1XaGl0ZVRleHROb2RlKHByZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXByZS5jaGlsZE5vZGVzLmxlbmd0aCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShwcmUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL3RyYWNlOjIwMTIs5Zyo6Z2eaWXnmoTmg4XlhrXvvIzliIflvIDlkI7liankuIvnmoToioLngrnmnInlj6/og73kuI3og73ngrnlhaXlhYnmoIfmt7vliqBicuWNoOS9jVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZighYnJvd3Nlci5pZSAmJlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAobmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nKSAmJlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5pc0Jsb2NrRWxtKG5leHQpICYmXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQubGFzdENoaWxkICYmXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICFkb21VdGlscy5pc0JyKG5leHQubGFzdENoaWxkKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQuYXBwZW5kQ2hpbGQobWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGhhZEJyZWFrID0gMTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICBpZighZGl2LmZpcnN0Q2hpbGQgJiYgbmV4dCAmJiBkb21VdGlscy5pc0Jsb2NrRWxtKG5leHQpKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChuZXh0LDApLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kQWZ0ZXIoIGNoaWxkICkuY29sbGFwc2UoKTtcclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICBjaGlsZCA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG5cclxuXHQgICAgICAgICAgICBpZihuZXh0Tm9kZSAmJiBkb21VdGlscy5pc0JyKG5leHROb2RlKSl7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShuZXh0Tm9kZSlcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgLy/nlKhjaHJvbWXlj6/og73mnInnqbrnmb3lsZXkvY3nrKZcclxuXHQgICAgICAgICAgICBpZihkb21VdGlscy5pc0Jsb2NrRWxtKGNoaWxkKSAmJiBkb21VdGlscy5pc0VtcHR5Tm9kZShjaGlsZCkpe1xyXG5cdCAgICAgICAgICAgICAgICBpZihuZXh0Tm9kZSA9IGNoaWxkLm5leHRTaWJsaW5nKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShjaGlsZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihuZXh0Tm9kZS5ub2RlVHlwZSA9PSAxICYmIGR0ZC4kYmxvY2tbbmV4dE5vZGUudGFnTmFtZV0pe1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChuZXh0Tm9kZSwwKS5jb2xsYXBzZSh0cnVlKS5zaHJpbmtCb3VuZGFyeSgpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHRyeXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZC5pbm5lckhUTUwgPSBicm93c2VyLmllID8gZG9tVXRpbHMuZmlsbENoYXIgOiAnPGJyLz4nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QmVmb3JlKGNoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY2hpbGQpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAvL+WKoOS4inRydWXlm6DkuLrlnKjliKDpmaTooajmg4XnrYnml7bkvJrliKDkuKTmrKHvvIznrKzkuIDmrKHmmK/liKDnmoRmaWxsRGF0YVxyXG5cdCAgICAgICAgICAgIHRyeXtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KHRydWUpO1xyXG5cdCAgICAgICAgICAgIH1jYXRjaChlKXt9XHJcblxyXG5cdCAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cdCAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgcmFuZ2Uuc2Nyb2xsVG9WaWV3KG1lLmF1dG9IZWlnaHRFbmFibGVkLG1lLmF1dG9IZWlnaHRFbmFibGVkID8gZG9tVXRpbHMuZ2V0WFkobWUuaWZyYW1lKS55OjApO1xyXG5cdCAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnYWZ0ZXJpbnNlcnRodG1sJywgaHRtbCk7XHJcblx0ICAgICAgICB9LDIwMCk7XHJcblx0ICAgIH1cclxuXHR9O1xyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9hdXRvdHlwZXNldC5qc1xyXG5cdC8qKlxyXG5cdCAqIOiHquWKqOaOkueJiFxyXG5cdCAqIEBmaWxlXHJcblx0ICogQHNpbmNlIDEuMi42LjFcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog5a+55b2T5YmN57yW6L6R5Zmo55qE5YaF5a655omn6KGM6Ieq5Yqo5o6S54mI77yMIOaOkueJiOeahOihjOS4uuagueaNrmNvbmZpZ+mFjee9ruaWh+S7tumHjOeahOKAnGF1dG90eXBlc2V04oCd6YCJ6aG56L+b6KGM5o6n5Yi244CCXHJcblx0ICogQGNvbW1hbmQgYXV0b3R5cGVzZXRcclxuXHQgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogYGBgamF2YXNjcmlwdFxyXG5cdCAqIGVkaXRvci5leGVjQ29tbWFuZCggJ2F1dG90eXBlc2V0JyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHRVRS5wbHVnaW5zWydhdXRvdHlwZXNldCddID0gZnVuY3Rpb24oKXtcclxuXHJcblx0ICAgIHRoaXMuc2V0T3B0KHsnYXV0b3R5cGVzZXQnOiB7XHJcblx0ICAgICAgICBtZXJnZUVtcHR5bGluZTogdHJ1ZSwgICAgICAgICAgIC8v5ZCI5bm256m66KGMXHJcblx0ICAgICAgICByZW1vdmVDbGFzczogdHJ1ZSwgICAgICAgICAgICAgIC8v5Y675o6J5YaX5L2Z55qEY2xhc3NcclxuXHQgICAgICAgIHJlbW92ZUVtcHR5bGluZTogZmFsc2UsICAgICAgICAgLy/ljrvmjonnqbrooYxcclxuXHQgICAgICAgIHRleHRBbGlnbjpcImxlZnRcIiwgICAgICAgICAgICAgICAvL+auteiQveeahOaOkueJiOaWueW8j++8jOWPr+S7peaYryBsZWZ0LHJpZ2h0LGNlbnRlcixqdXN0aWZ5IOWOu+aOiei/meS4quWxnuaAp+ihqOekuuS4jeaJp+ihjOaOkueJiFxyXG5cdCAgICAgICAgaW1hZ2VCbG9ja0xpbmU6ICdjZW50ZXInLCAgICAgICAvL+WbvueJh+eahOa1ruWKqOaWueW8j++8jOeLrOWNoOS4gOihjOWJp+S4rSzlt6blj7Pmta7liqjvvIzpu5jorqQ6IGNlbnRlcixsZWZ0LHJpZ2h0LG5vbmUg5Y675o6J6L+Z5Liq5bGe5oCn6KGo56S65LiN5omn6KGM5o6S54mIXHJcblx0ICAgICAgICBwYXN0ZUZpbHRlcjogZmFsc2UsICAgICAgICAgICAgIC8v5qC55o2u6KeE5YiZ6L+H5ruk5rKh5LqL57KY6LS06L+b5p2l55qE5YaF5a65XHJcblx0ICAgICAgICBjbGVhckZvbnRTaXplOiBmYWxzZSwgICAgICAgICAgIC8v5Y675o6J5omA5pyJ55qE5YaF5bWM5a2X5Y+377yM5L2/55So57yW6L6R5Zmo6buY6K6k55qE5a2X5Y+3XHJcblx0ICAgICAgICBjbGVhckZvbnRGYW1pbHk6IGZhbHNlLCAgICAgICAgIC8v5Y675o6J5omA5pyJ55qE5YaF5bWM5a2X5L2T77yM5L2/55So57yW6L6R5Zmo6buY6K6k55qE5a2X5L2TXHJcblx0ICAgICAgICByZW1vdmVFbXB0eU5vZGU6IGZhbHNlLCAgICAgICAgIC8vIOWOu+aOieepuuiKgueCuVxyXG5cdCAgICAgICAgLy/lj6/ku6XljrvmjonnmoTmoIfnrb5cclxuXHQgICAgICAgIHJlbW92ZVRhZ05hbWVzOiB1dGlscy5leHRlbmQoe2RpdjoxfSxkdGQuJHJlbW92ZUVtcHR5KSxcclxuXHQgICAgICAgIGluZGVudDogZmFsc2UsICAgICAgICAgICAgICAgICAgLy8g6KGM6aaW57yp6L+bXHJcblx0ICAgICAgICBpbmRlbnRWYWx1ZSA6ICcyZW0nLCAgICAgICAgICAgIC8v6KGM6aaW57yp6L+b55qE5aSn5bCPXHJcblx0ICAgICAgICBiZGMyc2I6IGZhbHNlLFxyXG5cdCAgICAgICAgdG9iZGM6IGZhbHNlXHJcblx0ICAgIH19KTtcclxuXHJcblx0ICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICBvcHQgPSBtZS5vcHRpb25zLmF1dG90eXBlc2V0LFxyXG5cdCAgICAgICAgcmVtYWluQ2xhc3MgPSB7XHJcblx0ICAgICAgICAgICAgJ3NlbGVjdFRkQ2xhc3MnOjEsXHJcblx0ICAgICAgICAgICAgJ3BhZ2VicmVhayc6MSxcclxuXHQgICAgICAgICAgICAnYW5jaG9yY2xhc3MnOjFcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICByZW1haW5UYWcgPSB7XHJcblx0ICAgICAgICAgICAgJ2xpJzoxXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgdGFncyA9IHtcclxuXHQgICAgICAgICAgICBkaXY6MSxcclxuXHQgICAgICAgICAgICBwOjEsXHJcblx0ICAgICAgICAgICAgLy90cmFjZToyMTgzIOi/meS6m+S5n+iupOS4uuaYr+ihjFxyXG5cdCAgICAgICAgICAgIGJsb2NrcXVvdGU6MSxjZW50ZXI6MSxoMToxLGgyOjEsaDM6MSxoNDoxLGg1OjEsaDY6MSxcclxuXHQgICAgICAgICAgICBzcGFuOjFcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBoaWdobGlnaHRDb250O1xyXG5cdCAgICAvL+WNh+e6p+S6hueJiOacrO+8jOS9humFjee9rumhueebrumHjOayoeaciWF1dG90eXBlc2V0XHJcblx0ICAgIGlmKCFvcHQpe1xyXG5cdCAgICAgICAgcmV0dXJuO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICByZWFkTG9jYWxPcHRzKCk7XHJcblxyXG5cdCAgICBmdW5jdGlvbiBpc0xpbmUobm9kZSxub3RFbXB0eSl7XHJcblx0ICAgICAgICBpZighbm9kZSB8fCBub2RlLm5vZGVUeXBlID09IDMpXHJcblx0ICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICBpZihkb21VdGlscy5pc0JyKG5vZGUpKVxyXG5cdCAgICAgICAgICAgIHJldHVybiAxO1xyXG5cdCAgICAgICAgaWYobm9kZSAmJiBub2RlLnBhcmVudE5vZGUgJiYgdGFnc1tub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKV0pe1xyXG5cdCAgICAgICAgICAgIGlmKGhpZ2hsaWdodENvbnQgJiYgaGlnaGxpZ2h0Q29udC5jb250YWlucyhub2RlKVxyXG5cdCAgICAgICAgICAgICAgICB8fFxyXG5cdCAgICAgICAgICAgICAgICBub2RlLmdldEF0dHJpYnV0ZSgncGFnZWJyZWFrJylcclxuXHQgICAgICAgICAgICApe1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIHJldHVybiBub3RFbXB0eSA/ICFkb21VdGlscy5pc0VtcHR5QmxvY2sobm9kZSkgOiBkb21VdGlscy5pc0VtcHR5QmxvY2sobm9kZSxuZXcgUmVnRXhwKCdbXFxcXHMnK2RvbVV0aWxzLmZpbGxDaGFyXHJcblx0ICAgICAgICAgICAgICAgICsnXScsJ2cnKSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIHJlbW92ZU5vdEF0dHJpYnV0ZVNwYW4obm9kZSl7XHJcblx0ICAgICAgICBpZighbm9kZS5zdHlsZS5jc3NUZXh0KXtcclxuXHQgICAgICAgICAgICBkb21VdGlscy5yZW1vdmVBdHRyaWJ1dGVzKG5vZGUsWydzdHlsZSddKTtcclxuXHQgICAgICAgICAgICBpZihub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSAnc3BhbicgJiYgZG9tVXRpbHMuaGFzTm9BdHRyaWJ1dGVzKG5vZGUpKXtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKG5vZGUsdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICAgIGZ1bmN0aW9uIGF1dG90eXBlKHR5cGUsaHRtbCl7XHJcblxyXG5cdCAgICAgICAgdmFyIG1lID0gdGhpcyxjb250O1xyXG5cdCAgICAgICAgaWYoaHRtbCl7XHJcblx0ICAgICAgICAgICAgaWYoIW9wdC5wYXN0ZUZpbHRlcil7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgY29udCA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdCAgICAgICAgICAgIGNvbnQuaW5uZXJIVE1MID0gaHRtbC5odG1sO1xyXG5cdCAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgY29udCA9IG1lLmRvY3VtZW50LmJvZHk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgbm9kZXMgPSBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZShjb250LCcqJyk7XHJcblxyXG5cdCAgICAgICAgLy8g6KGM6aaW57yp6L+b77yM5q616JC95pa55ZCR77yM5q616Ze06Led77yM5q615YaF6Ze06LedXHJcblx0ICAgICAgICBmb3IodmFyIGk9MCxjaTtjaT1ub2Rlc1tpKytdOyl7XHJcblxyXG5cdCAgICAgICAgICAgIGlmKG1lLmZpcmVFdmVudCgnZXhjbHVkZU5vZGVpbmF1dG90eXBlJyxjaSkgPT09IHRydWUpe1xyXG5cdCAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgIC8vZm9udC1zaXplXHJcblx0ICAgICAgICAgICAgaWYob3B0LmNsZWFyRm9udFNpemUgJiYgY2kuc3R5bGUuZm9udFNpemUpe1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmVTdHlsZShjaSwnZm9udC1zaXplJyk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICByZW1vdmVOb3RBdHRyaWJ1dGVTcGFuKGNpKTtcclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIC8vZm9udC1mYW1pbHlcclxuXHQgICAgICAgICAgICBpZihvcHQuY2xlYXJGb250RmFtaWx5ICYmIGNpLnN0eWxlLmZvbnRGYW1pbHkpe1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmVTdHlsZShjaSwnZm9udC1mYW1pbHknKTtcclxuXHQgICAgICAgICAgICAgICAgcmVtb3ZlTm90QXR0cmlidXRlU3BhbihjaSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICBpZihpc0xpbmUoY2kpKXtcclxuXHQgICAgICAgICAgICAgICAgLy/lkIjlubbnqbrooYxcclxuXHQgICAgICAgICAgICAgICAgaWYob3B0Lm1lcmdlRW1wdHlsaW5lICl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IGNpLm5leHRTaWJsaW5nLHRtcE5vZGUsaXNCciA9IGRvbVV0aWxzLmlzQnIoY2kpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgd2hpbGUoaXNMaW5lKG5leHQpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gbmV4dDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gdG1wTm9kZS5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihpc0JyICYmICghbmV4dCB8fCBuZXh0ICYmICFkb21VdGlscy5pc0JyKG5leHQpKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUodG1wTm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAvL+WOu+aOieepuuihjO+8jOS/neeVmeWNoOS9jeeahOepuuihjFxyXG5cdCAgICAgICAgICAgICAgICBpZihvcHQucmVtb3ZlRW1wdHlsaW5lICYmIGRvbVV0aWxzLmluRG9jKGNpLGNvbnQpICYmICFyZW1haW5UYWdbY2kucGFyZW50Tm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCldICl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihkb21VdGlscy5pc0JyKGNpKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IGNpLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5leHQgJiYgIWRvbVV0aWxzLmlzQnIobmV4dCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY2kpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZihpc0xpbmUoY2ksdHJ1ZSkgJiYgY2kudGFnTmFtZSAhPSAnU1BBTicpe1xyXG5cdCAgICAgICAgICAgICAgICBpZihvcHQuaW5kZW50KXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNpLnN0eWxlLnRleHRJbmRlbnQgPSBvcHQuaW5kZW50VmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYob3B0LnRleHRBbGlnbil7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjaS5zdHlsZS50ZXh0QWxpZ24gPSBvcHQudGV4dEFsaWduO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIC8vIGlmKG9wdC5saW5lSGVpZ2h0KVxyXG5cdCAgICAgICAgICAgICAgICAvLyAgICAgY2kuc3R5bGUubGluZUhlaWdodCA9IG9wdC5saW5lSGVpZ2h0ICsgJ2NtJztcclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAvL+WOu+aOiWNsYXNzLOS/neeVmeeahGNsYXNz5LiN5Y675o6JXHJcblx0ICAgICAgICAgICAgaWYob3B0LnJlbW92ZUNsYXNzICYmIGNpLmNsYXNzTmFtZSAmJiAhcmVtYWluQ2xhc3NbY2kuY2xhc3NOYW1lLnRvTG93ZXJDYXNlKCldKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmKGhpZ2hsaWdodENvbnQgJiYgaGlnaGxpZ2h0Q29udC5jb250YWlucyhjaSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZUF0dHJpYnV0ZXMoY2ksWydjbGFzcyddKTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIC8v6KGo5oOF5LiN5aSE55CGXHJcblx0ICAgICAgICAgICAgaWYob3B0LmltYWdlQmxvY2tMaW5lICYmIGNpLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSAnaW1nJyAmJiAhY2kuZ2V0QXR0cmlidXRlKCdlbW90aW9uJykpe1xyXG5cdCAgICAgICAgICAgICAgICBpZihodG1sKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpbWcgPSBjaTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAob3B0LmltYWdlQmxvY2tMaW5lKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbm9uZSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwTiA9IGltZy5wYXJlbnROb2RlLHRtcE5vZGUscHJlLG5leHQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGR0ZC4kaW5saW5lW3BOLnRhZ05hbWVdIHx8IHBOLnRhZ05hbWUgPT0gJ0EnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOID0gcE4ucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gcE47XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRtcE5vZGUudGFnTmFtZSA9PSAnUCcgJiYgZG9tVXRpbHMuZ2V0U3R5bGUodG1wTm9kZSwndGV4dC1hbGlnbicpID09ICdjZW50ZXInKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFkb21VdGlscy5pc0JvZHkodG1wTm9kZSkgJiYgZG9tVXRpbHMuZ2V0Q2hpbGRDb3VudCh0bXBOb2RlLGZ1bmN0aW9uKG5vZGUpe3JldHVybiAhZG9tVXRpbHMuaXNCcihub2RlKSAmJiAhZG9tVXRpbHMuaXNXaGl0ZXNwYWNlKG5vZGUpfSkgPT0gMSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlID0gdG1wTm9kZS5wcmV2aW91c1NpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHRtcE5vZGUubmV4dFNpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocHJlICYmIG5leHQgJiYgcHJlLm5vZGVUeXBlID09IDEgJiYgIG5leHQubm9kZVR5cGUgPT0gMSAmJiBwcmUudGFnTmFtZSA9PSBuZXh0LnRhZ05hbWUgJiYgZG9tVXRpbHMuaXNCbG9ja0VsbShwcmUpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlLmFwcGVuZENoaWxkKHRtcE5vZGUuZmlyc3RDaGlsZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKG5leHQuZmlyc3RDaGlsZCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmUuYXBwZW5kQ2hpbGQobmV4dC5maXJzdENoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUodG1wTm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShuZXh0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuc2V0U3R5bGUodG1wTm9kZSwndGV4dC1hbGlnbicsJycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuc2V0U3R5bGUoaW1nLCdmbG9hdCcsIG9wdC5pbWFnZUJsb2NrTGluZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NlbnRlcic6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1lLnF1ZXJ5Q29tbWFuZFZhbHVlKCdpbWFnZWZsb2F0JykgIT0gJ2NlbnRlcicpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcE4gPSBpbWcucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnNldFN0eWxlKGltZywnZmxvYXQnLCdub25lJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gaW1nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUocE4gJiYgZG9tVXRpbHMuZ2V0Q2hpbGRDb3VudChwTixmdW5jdGlvbihub2RlKXtyZXR1cm4gIWRvbVV0aWxzLmlzQnIobm9kZSkgJiYgIWRvbVV0aWxzLmlzV2hpdGVzcGFjZShub2RlKX0pID09IDFcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiAoZHRkLiRpbmxpbmVbcE4udGFnTmFtZV0gfHwgcE4udGFnTmFtZSA9PSAnQScpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gcE47XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcE4gPSBwTi5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBOb2RlID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuc2V0QXR0cmlidXRlcyhwTm9kZSx7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOid0ZXh0LWFsaWduOmNlbnRlcidcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwTm9kZSx0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOb2RlLmFwcGVuZENoaWxkKHRtcE5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuc2V0U3R5bGUodG1wTm9kZSwnZmxvYXQnLCcnKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlKGNpKS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmV4ZWNDb21tYW5kKCdpbWFnZWZsb2F0Jywgb3B0LmltYWdlQmxvY2tMaW5lKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIC8v5Y675o6J5YaX5L2Z55qE5qCH562+XHJcblx0ICAgICAgICAgICAgaWYob3B0LnJlbW92ZUVtcHR5Tm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgIGlmKG9wdC5yZW1vdmVUYWdOYW1lc1tjaS50YWdOYW1lLnRvTG93ZXJDYXNlKCldICYmIGRvbVV0aWxzLmhhc05vQXR0cmlidXRlcyhjaSkgJiYgZG9tVXRpbHMuaXNFbXB0eUJsb2NrKGNpKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY2kpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYob3B0LnRvYmRjKXtcclxuXHQgICAgICAgICAgICB2YXIgcm9vdCA9IFVFLmh0bWxwYXJzZXIoY29udC5pbm5lckhUTUwpO1xyXG5cdCAgICAgICAgICAgIHJvb3QudHJhdmVyc2FsKGZ1bmN0aW9uKG5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICBpZihub2RlLnR5cGUgPT0gJ3RleHQnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9IFRvREJDKG5vZGUuZGF0YSlcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIGNvbnQuaW5uZXJIVE1MID0gcm9vdC50b0h0bWwoKVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYob3B0LmJkYzJzYil7XHJcblx0ICAgICAgICAgICAgdmFyIHJvb3QgPSBVRS5odG1scGFyc2VyKGNvbnQuaW5uZXJIVE1MKTtcclxuXHQgICAgICAgICAgICByb290LnRyYXZlcnNhbChmdW5jdGlvbihub2RlKXtcclxuXHQgICAgICAgICAgICAgICAgaWYobm9kZS50eXBlID09ICd0ZXh0Jyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBub2RlLmRhdGEgPSBEQkMyU0Iobm9kZS5kYXRhKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgY29udC5pbm5lckhUTUwgPSByb290LnRvSHRtbCgpXHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZihodG1sKXtcclxuXHQgICAgICAgICAgICBodG1sLmh0bWwgPSBjb250LmlubmVySFRNTDtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgICBpZihvcHQucGFzdGVGaWx0ZXIpe1xyXG5cdCAgICAgICAgbWUuYWRkTGlzdGVuZXIoJ2JlZm9yZXBhc3RlJyxhdXRvdHlwZSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIERCQzJTQihzdHIpIHtcclxuXHQgICAgICAgIHZhciByZXN1bHQgPSAnJztcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNvZGUgPSBzdHIuY2hhckNvZGVBdChpKTsgLy/ojrflj5blvZPliY3lrZfnrKbnmoR1bmljb2Rl57yW56CBXHJcblx0ICAgICAgICAgICAgaWYgKGNvZGUgPj0gNjUyODEgJiYgY29kZSA8PSA2NTM3MykvL+WcqOi/meS4qnVuaWNvZGXnvJbnoIHojIPlm7TkuK3nmoTmmK/miYDmnInnmoToi7HmloflrZfmr43lt7Lnu4/lkITnp43lrZfnrKZcclxuXHQgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHN0ci5jaGFyQ29kZUF0KGkpIC0gNjUyNDgpOyAvL+aKiuWFqOinkuWtl+espueahHVuaWNvZGXnvJbnoIHovazmjaLkuLrlr7nlupTljYrop5LlrZfnrKbnmoR1bmljb2Rl56CBXHJcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChjb2RlID09IDEyMjg4KS8v56m65qC8XHJcblx0ICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICByZXN1bHQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShzdHIuY2hhckNvZGVBdChpKSAtIDEyMjg4ICsgMzIpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHJlc3VsdCArPSBzdHIuY2hhckF0KGkpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiByZXN1bHQ7XHJcblx0ICAgIH1cclxuXHQgICAgZnVuY3Rpb24gVG9EQkModHh0c3RyaW5nKSB7XHJcblx0ICAgICAgICB0eHRzdHJpbmcgPSB1dGlscy5odG1sKHR4dHN0cmluZyk7XHJcblx0ICAgICAgICB2YXIgdG1wID0gXCJcIjtcclxuXHQgICAgICAgIHZhciBtYXJrID0gXCJcIjsvKueUqOS6juWIpOaWrSzlpoLmnpzmmK9odG1s5bCW5ous6YeM55qE5qCH6K6wLOWImeS4jei/m+ihjOWFqOinkueahOi9rOaNoiovXHJcblx0ICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR4dHN0cmluZy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgIGlmICh0eHRzdHJpbmcuY2hhckNvZGVBdChpKSA9PSAzMikge1xyXG5cdCAgICAgICAgICAgICAgICB0bXAgPSB0bXAgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKDEyMjg4KTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSBpZiAodHh0c3RyaW5nLmNoYXJDb2RlQXQoaSkgPCAxMjcpIHtcclxuXHQgICAgICAgICAgICAgICAgdG1wID0gdG1wICsgU3RyaW5nLmZyb21DaGFyQ29kZSh0eHRzdHJpbmcuY2hhckNvZGVBdChpKSArIDY1MjQ4KTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHRtcCArPSB0eHRzdHJpbmcuY2hhckF0KGkpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0bXA7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIHJlYWRMb2NhbE9wdHMoKSB7XHJcblx0ICAgICAgICB2YXIgY29va2llT3B0ID0gbWUuZ2V0UHJlZmVyZW5jZXMoJ2F1dG90eXBlc2V0Jyk7XHJcblx0ICAgICAgICB1dGlscy5leHRlbmQobWUub3B0aW9ucy5hdXRvdHlwZXNldCwgY29va2llT3B0KTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgbWUuY29tbWFuZHNbJ2F1dG90eXBlc2V0J10gPSB7XHJcblx0ICAgICAgICBleGVjQ29tbWFuZDpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgbWUucmVtb3ZlTGlzdGVuZXIoJ2JlZm9yZXBhc3RlJyxhdXRvdHlwZSk7XHJcblx0ICAgICAgICAgICAgaWYob3B0LnBhc3RlRmlsdGVyKXtcclxuXHQgICAgICAgICAgICAgICAgbWUuYWRkTGlzdGVuZXIoJ2JlZm9yZXBhc3RlJyxhdXRvdHlwZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGF1dG90eXBlLmNhbGwobWUpXHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9O1xyXG5cclxuXHR9O1xyXG5cclxuXHJcblxyXG5cdC8vIHBsdWdpbnMvYXV0b3N1Ym1pdC5qc1xyXG5cdC8qKlxyXG5cdCAqIOW/q+aNt+mUruaPkOS6pFxyXG5cdCAqIEBmaWxlXHJcblx0ICogQHNpbmNlIDEuMi42LjFcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog5o+Q5Lqk6KGo5Y2VXHJcblx0ICogQGNvbW1hbmQgYXV0b3N1Ym1pdFxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnYXV0b3N1Ym1pdCcgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0VUUucGx1Z2luLnJlZ2lzdGVyKCdhdXRvc3VibWl0JyxmdW5jdGlvbigpe1xyXG5cdCAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgc2hvcnRjdXRrZXk6e1xyXG5cdCAgICAgICAgICAgIFwiYXV0b3N1Ym1pdFwiOlwiY3RybCsxM1wiIC8v5omL5Yqo5o+Q5LqkXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgY29tbWFuZHM6e1xyXG5cdCAgICAgICAgICAgICdhdXRvc3VibWl0Jzp7XHJcblx0ICAgICAgICAgICAgICAgIGV4ZWNDb21tYW5kOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBtZT10aGlzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvcm0gPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKG1lLmlmcmFtZSxcImZvcm1cIiwgZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGZvcm0pe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1lLmZpcmVFdmVudChcImJlZm9yZXN1Ym1pdFwiKT09PWZhbHNlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5zeW5jKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5zdWJtaXQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdH0pO1xyXG5cclxuXHQvLyBwbHVnaW5zL2JhY2tncm91bmQuanNcclxuXHQvKipcclxuXHQgKiDog4zmma/mj5Lku7bvvIzkuLpVRWRpdG9y5o+Q5L6b6K6+572u6IOM5pmv5Yqf6IO9XHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cdFVFLnBsdWdpbi5yZWdpc3RlcignYmFja2dyb3VuZCcsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgIGNzc1J1bGVJZCA9ICdlZGl0b3JfYmFja2dyb3VuZCcsXHJcblx0ICAgICAgICBpc1NldENvbG9yZWQsXHJcblx0ICAgICAgICByZWcgPSBuZXcgUmVnRXhwKCdib2R5W1xcXFxzXSpcXFxceyguKylcXFxcfScsICdpJyk7XHJcblxyXG5cdCAgICBmdW5jdGlvbiBzdHJpbmdUb09iaihzdHIpIHtcclxuXHQgICAgICAgIHZhciBvYmogPSB7fSwgc3R5bGVzID0gc3RyLnNwbGl0KCc7Jyk7XHJcblx0ICAgICAgICB1dGlscy5lYWNoKHN0eWxlcywgZnVuY3Rpb24gKHYpIHtcclxuXHQgICAgICAgICAgICB2YXIgaW5kZXggPSB2LmluZGV4T2YoJzonKSxcclxuXHQgICAgICAgICAgICAgICAga2V5ID0gdXRpbHMudHJpbSh2LnN1YnN0cigwLCBpbmRleCkpLnRvTG93ZXJDYXNlKCk7XHJcblx0ICAgICAgICAgICAga2V5ICYmIChvYmpba2V5XSA9IHV0aWxzLnRyaW0odi5zdWJzdHIoaW5kZXggKyAxKSB8fCAnJykpO1xyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICByZXR1cm4gb2JqO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBzZXRCYWNrZ3JvdW5kKG9iaikge1xyXG5cdCAgICAgICAgaWYgKG9iaikge1xyXG5cdCAgICAgICAgICAgIHZhciBzdHlsZXMgPSBbXTtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBuYW1lIGluIG9iaikge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KG5hbWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdHlsZXMucHVzaChuYW1lICsgXCI6XCIgKyBvYmpbbmFtZV0gKyAnOyAnKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB1dGlscy5jc3NSdWxlKGNzc1J1bGVJZCwgc3R5bGVzLmxlbmd0aCA/ICgnYm9keXsnICsgc3R5bGVzLmpvaW4oXCJcIikgKyAnfScpIDogJycsIG1lLmRvY3VtZW50KTtcclxuXHQgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgdXRpbHMuY3NzUnVsZShjc3NSdWxlSWQsICcnLCBtZS5kb2N1bWVudClcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgICAvL+mHjeWGmWVkaXRvci5oYXNDb250ZW505pa55rOVXHJcblxyXG5cdCAgICB2YXIgb3JnRm4gPSBtZS5oYXNDb250ZW50cztcclxuXHQgICAgbWUuaGFzQ29udGVudHMgPSBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgaWYobWUucXVlcnlDb21tYW5kVmFsdWUoJ2JhY2tncm91bmQnKSl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBvcmdGbi5hcHBseShtZSxhcmd1bWVudHMpO1xyXG5cdCAgICB9O1xyXG5cdCAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgYmluZEV2ZW50czoge1xyXG5cdCAgICAgICAgICAgICdnZXRBbGxIdG1sJzogZnVuY3Rpb24gKHR5cGUsIGhlYWRIdG1sKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBib2R5ID0gdGhpcy5ib2R5LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3UgPSBkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKGJvZHksIFwiYmFja2dyb3VuZC1pbWFnZVwiKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIHVybCA9IFwiXCI7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChzdS5pbmRleE9mKG1lLm9wdGlvbnMuaW1hZ2VQYXRoKSA+IDApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHVybCA9IHN1LnN1YnN0cmluZyhzdS5pbmRleE9mKG1lLm9wdGlvbnMuaW1hZ2VQYXRoKSwgc3UubGVuZ3RoIC0gMSkucmVwbGFjZSgvXCJ8XFwofFxcKS9pZywgXCJcIik7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB1cmwgPSBzdSAhPSBcIm5vbmVcIiA/IHN1LnJlcGxhY2UoL3VybFxcKFwiP3xcIj9cXCkvaWcsIFwiXCIpIDogXCJcIjtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB2YXIgaHRtbCA9ICc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+Ym9keXsnO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgYmdPYmogPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBcImJhY2tncm91bmQtY29sb3JcIjogZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShib2R5LCBcImJhY2tncm91bmQtY29sb3JcIikgfHwgXCIjZmZmZmZmXCIsXHJcblx0ICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1pbWFnZSc6IHVybCA/ICd1cmwoJyArIHVybCArICcpJyA6ICcnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtcmVwZWF0JzogZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShib2R5LCBcImJhY2tncm91bmQtcmVwZWF0XCIpIHx8IFwiXCIsXHJcblx0ICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1wb3NpdGlvbic6IGJyb3dzZXIuaWUgPyAoZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShib2R5LCBcImJhY2tncm91bmQtcG9zaXRpb24teFwiKSArIFwiIFwiICsgZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShib2R5LCBcImJhY2tncm91bmQtcG9zaXRpb24teVwiKSkgOiBkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKGJvZHksIFwiYmFja2dyb3VuZC1wb3NpdGlvblwiKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiBkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKGJvZHksIFwiaGVpZ2h0XCIpXHJcblx0ICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gYmdPYmopIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChiZ09iai5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gbmFtZSArIFwiOlwiICsgYmdPYmpbbmFtZV0gKyBcIjsgXCI7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaHRtbCArPSAnfTwvc3R5bGU+ICc7XHJcblx0ICAgICAgICAgICAgICAgIGhlYWRIdG1sLnB1c2goaHRtbCk7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAnYWZ0ZXJzZXRjb250ZW50JzogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICBpZihpc1NldENvbG9yZWQgPT0gZmFsc2UpIHNldEJhY2tncm91bmQoKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgaW5wdXRSdWxlOiBmdW5jdGlvbiAocm9vdCkge1xyXG5cdCAgICAgICAgICAgIGlzU2V0Q29sb3JlZCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgncCcpLCBmdW5jdGlvbiAocCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgc3R5bGVzID0gcC5nZXRBdHRyKCdkYXRhLWJhY2tncm91bmQnKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHN0eWxlcykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaXNTZXRDb2xvcmVkID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHNldEJhY2tncm91bmQoc3RyaW5nVG9PYmooc3R5bGVzKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBwLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIG91dHB1dFJ1bGU6IGZ1bmN0aW9uIChyb290KSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgc3R5bGVzID0gKHV0aWxzLmNzc1J1bGUoY3NzUnVsZUlkLCBtZS5kb2N1bWVudCkgfHwgJycpLnJlcGxhY2UoL1tcXG5cXHJdKy9nLCAnJykubWF0Y2gocmVnKTtcclxuXHQgICAgICAgICAgICBpZiAoc3R5bGVzKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJvb3QuYXBwZW5kQ2hpbGQoVUUudU5vZGUuY3JlYXRlRWxlbWVudCgnPHAgc3R5bGU9XCJkaXNwbGF5Om5vbmU7XCIgZGF0YS1iYWNrZ3JvdW5kPVwiJyArIHV0aWxzLnRyaW0oc3R5bGVzWzFdLnJlcGxhY2UoL1wiL2csICcnKS5yZXBsYWNlKC9bXFxzXSsvZywgJyAnKSkgKyAnXCI+PGJyLz48L3A+JykpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBjb21tYW5kczoge1xyXG5cdCAgICAgICAgICAgICdiYWNrZ3JvdW5kJzoge1xyXG5cdCAgICAgICAgICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKGNtZCwgb2JqKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzZXRCYWNrZ3JvdW5kKG9iaik7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIHF1ZXJ5Q29tbWFuZFZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlcyA9ICh1dGlscy5jc3NSdWxlKGNzc1J1bGVJZCwgbWUuZG9jdW1lbnQpIHx8ICcnKS5yZXBsYWNlKC9bXFxuXFxyXSsvZywgJycpLm1hdGNoKHJlZyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGVzID8gc3RyaW5nVG9PYmooc3R5bGVzWzFdKSA6IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIG5vdE5lZWRVbmRvOiB0cnVlXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0fSk7XHJcblxyXG5cdC8vIHBsdWdpbnMvaW1hZ2UuanNcclxuXHQvKipcclxuXHQgKiDlm77niYfmj5LlhaXjgIHmjpLniYjmj5Lku7ZcclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIOWbvueJh+Wvuem9kOaWueW8j1xyXG5cdCAqIEBjb21tYW5kIGltYWdlZmxvYXRcclxuXHQgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICogQHJlbWluZCDlgLxjZW50ZXLkuLrni6zljaDkuIDooYzlsYXkuK1cclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gYWxpZ24g5a+56b2Q5pa55byP77yM5Y+v5LygbGVmdOOAgXJpZ2h044CBbm9uZeOAgWNlbnRlclxyXG5cdCAqIEByZW1haW5kIGNlbnRlcuihqOekuuWbvueJh+eLrOWNoOS4gOihjFxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogYGBgamF2YXNjcmlwdFxyXG5cdCAqIGVkaXRvci5leGVjQ29tbWFuZCggJ2ltYWdlZmxvYXQnLCAnY2VudGVyJyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDlpoLmnpzpgInljLrmiYDlnKjkvY3nva7mmK/lm77niYfljLrln59cclxuXHQgKiBAY29tbWFuZCBpbWFnZWZsb2F0XHJcblx0ICogQG1ldGhvZCBxdWVyeUNvbW1hbmRWYWx1ZVxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAcmV0dXJuIHsgU3RyaW5nIH0g6L+U5Zue5Zu+54mH5a+56b2Q5pa55byPXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCAnaW1hZ2VmbG9hdCcgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0VUUuY29tbWFuZHNbJ2ltYWdlZmxvYXQnXSA9IHtcclxuXHQgICAgZXhlY0NvbW1hbmQ6ZnVuY3Rpb24gKGNtZCwgYWxpZ24pIHtcclxuXHQgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgIGlmICghcmFuZ2UuY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGltZyA9IHJhbmdlLmdldENsb3NlZE5vZGUoKTtcclxuXHQgICAgICAgICAgICBpZiAoaW1nICYmIGltZy50YWdOYW1lID09ICdJTUcnKSB7XHJcblx0ICAgICAgICAgICAgICAgIHN3aXRjaCAoYWxpZ24pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnbm9uZSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBOID0gaW1nLnBhcmVudE5vZGUsIHRtcE5vZGUsIHByZSwgbmV4dDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZHRkLiRpbmxpbmVbcE4udGFnTmFtZV0gfHwgcE4udGFnTmFtZSA9PSAnQScpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcE4gPSBwTi5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gcE47XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRtcE5vZGUudGFnTmFtZSA9PSAnUCcgJiYgZG9tVXRpbHMuZ2V0U3R5bGUodG1wTm9kZSwgJ3RleHQtYWxpZ24nKSA9PSAnY2VudGVyJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRvbVV0aWxzLmlzQm9keSh0bXBOb2RlKSAmJiBkb21VdGlscy5nZXRDaGlsZENvdW50KHRtcE5vZGUsIGZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWRvbVV0aWxzLmlzQnIobm9kZSkgJiYgIWRvbVV0aWxzLmlzV2hpdGVzcGFjZShub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkgPT0gMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlID0gdG1wTm9kZS5wcmV2aW91c1NpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gdG1wTm9kZS5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmUgJiYgbmV4dCAmJiBwcmUubm9kZVR5cGUgPT0gMSAmJiBuZXh0Lm5vZGVUeXBlID09IDEgJiYgcHJlLnRhZ05hbWUgPT0gbmV4dC50YWdOYW1lICYmIGRvbVV0aWxzLmlzQmxvY2tFbG0ocHJlKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZS5hcHBlbmRDaGlsZCh0bXBOb2RlLmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChuZXh0LmZpcnN0Q2hpbGQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlLmFwcGVuZENoaWxkKG5leHQuZmlyc3RDaGlsZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSh0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobmV4dCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnNldFN0eWxlKHRtcE5vZGUsICd0ZXh0LWFsaWduJywgJycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdE5vZGUoaW1nKS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuc2V0U3R5bGUoaW1nLCAnZmxvYXQnLCBhbGlnbiA9PSAnbm9uZScgPyAnJyA6IGFsaWduKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihhbGlnbiA9PSAnbm9uZScpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmVBdHRyaWJ1dGVzKGltZywnYWxpZ24nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2VudGVyJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWUucXVlcnlDb21tYW5kVmFsdWUoJ2ltYWdlZmxvYXQnKSAhPSAnY2VudGVyJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTiA9IGltZy5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5zZXRTdHlsZShpbWcsICdmbG9hdCcsICcnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlQXR0cmlidXRlcyhpbWcsJ2FsaWduJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE5vZGUgPSBpbWc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChwTiAmJiBkb21VdGlscy5nZXRDaGlsZENvdW50KHBOLCBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFkb21VdGlscy5pc0JyKG5vZGUpICYmICFkb21VdGlscy5pc1doaXRlc3BhY2Uobm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pID09IDFcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIChkdGQuJGlubGluZVtwTi50YWdOYW1lXSB8fCBwTi50YWdOYW1lID09ICdBJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE5vZGUgPSBwTjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOID0gcE4ucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZSh0bXBOb2RlKS5zZXRDdXJzb3IoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTiA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwTi5hcHBlbmRDaGlsZCh0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuc2V0U3R5bGUodG1wTm9kZSwgJ2Zsb2F0JywgJycpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoJ2luc2VydEh0bWwnLCAnPHAgaWQ9XCJfaW1nX3BhcmVudF90bXBcIiBzdHlsZT1cInRleHQtYWxpZ246Y2VudGVyXCI+JyArIHBOLmlubmVySFRNTCArICc8L3A+Jyk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gbWUuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ19pbWdfcGFyZW50X3RtcCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlLnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wTm9kZSA9IHRtcE5vZGUuZmlyc3RDaGlsZDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZSh0bXBOb2RlKS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/ljrvmjonlkI7ovrnlpJrkvZnnmoTlhYPntKBcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHRtcE5vZGUucGFyZW50Tm9kZS5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgJiYgZG9tVXRpbHMuaXNFbXB0eU5vZGUobmV4dCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShuZXh0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfSxcclxuXHQgICAgcXVlcnlDb21tYW5kVmFsdWU6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICBzdGFydE5vZGUsIGZsb2F0U3R5bGU7XHJcblx0ICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuICdub25lJztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHN0YXJ0Tm9kZSA9IHJhbmdlLmdldENsb3NlZE5vZGUoKTtcclxuXHQgICAgICAgIGlmIChzdGFydE5vZGUgJiYgc3RhcnROb2RlLm5vZGVUeXBlID09IDEgJiYgc3RhcnROb2RlLnRhZ05hbWUgPT0gJ0lNRycpIHtcclxuXHQgICAgICAgICAgICBmbG9hdFN0eWxlID0gZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShzdGFydE5vZGUsICdmbG9hdCcpIHx8IHN0YXJ0Tm9kZS5nZXRBdHRyaWJ1dGUoJ2FsaWduJyk7XHJcblxyXG5cdCAgICAgICAgICAgIGlmIChmbG9hdFN0eWxlID09ICdub25lJykge1xyXG5cdCAgICAgICAgICAgICAgICBmbG9hdFN0eWxlID0gZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShzdGFydE5vZGUucGFyZW50Tm9kZSwgJ3RleHQtYWxpZ24nKSA9PSAnY2VudGVyJyA/ICdjZW50ZXInIDogZmxvYXRTdHlsZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICAgICAgbGVmdDoxLFxyXG5cdCAgICAgICAgICAgICAgICByaWdodDoxLFxyXG5cdCAgICAgICAgICAgICAgICBjZW50ZXI6MVxyXG5cdCAgICAgICAgICAgIH1bZmxvYXRTdHlsZV0gPyBmbG9hdFN0eWxlIDogJ25vbmUnO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuICdub25lJztcclxuXHJcblxyXG5cdCAgICB9LFxyXG5cdCAgICBxdWVyeUNvbW1hbmRTdGF0ZTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgIHN0YXJ0Tm9kZTtcclxuXHJcblx0ICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkKSAgcmV0dXJuIC0xO1xyXG5cclxuXHQgICAgICAgIHN0YXJ0Tm9kZSA9IHJhbmdlLmdldENsb3NlZE5vZGUoKTtcclxuXHQgICAgICAgIGlmIChzdGFydE5vZGUgJiYgc3RhcnROb2RlLm5vZGVUeXBlID09IDEgJiYgc3RhcnROb2RlLnRhZ05hbWUgPT0gJ0lNRycpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gMDtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiAtMTtcclxuXHQgICAgfVxyXG5cdH07XHJcblxyXG5cclxuXHQvKipcclxuXHQgKiDmj5LlhaXlm77niYdcclxuXHQgKiBAY29tbWFuZCBpbnNlcnRpbWFnZVxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQHBhcmFtIHsgT2JqZWN0IH0gb3B0IOWxnuaAp+mUruWAvOWvue+8jOi/meS6m+WxnuaAp+mDveWwhuiiq+WkjeWItuWIsOW9k+WJjeaPkuWFpeWbvueJh1xyXG5cdCAqIEByZW1pbmQg6K+l5ZG95Luk56ys5LqM5Liq5Y+C5pWw5Y+v5o6l5Y+X5LiA5Liq5Zu+54mH6YWN572u6aG55a+56LGh55qE5pWw57uE77yM5Y+v5Lul5o+S5YWl5aSa5byg5Zu+54mH77yMXHJcblx0ICog5q2k5pe25pWw57uE55qE5q+P5LiA5Liq5YWD57Sg6YO95piv5LiA5LiqT2JqZWN057G75Z6L55qE5Zu+54mH5bGe5oCn6ZuG5ZCI44CCXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnaW5zZXJ0aW1hZ2UnLCB7XHJcblx0ICogICAgIHNyYzonYS9iL2MuanBnJyxcclxuXHQgKiAgICAgd2lkdGg6JzEwMCcsXHJcblx0ICogICAgIGhlaWdodDonMTAwJ1xyXG5cdCAqIH0gKTtcclxuXHQgKiBgYGBcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdpbnNlcnRpbWFnZScsIFt7XHJcblx0ICogICAgIHNyYzonYS9iL2MuanBnJyxcclxuXHQgKiAgICAgd2lkdGg6JzEwMCcsXHJcblx0ICogICAgIGhlaWdodDonMTAwJ1xyXG5cdCAqIH0se1xyXG5cdCAqICAgICBzcmM6J2EvYi9kLmpwZycsXHJcblx0ICogICAgIHdpZHRoOicxMDAnLFxyXG5cdCAqICAgICBoZWlnaHQ6JzEwMCdcclxuXHQgKiB9XSApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHRVRS5jb21tYW5kc1snaW5zZXJ0aW1hZ2UnXSA9IHtcclxuXHQgICAgZXhlY0NvbW1hbmQ6ZnVuY3Rpb24gKGNtZCwgb3B0KSB7XHJcblxyXG5cdCAgICAgICAgb3B0ID0gdXRpbHMuaXNBcnJheShvcHQpID8gb3B0IDogW29wdF07XHJcblx0ICAgICAgICBpZiAoIW9wdC5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgaW1nID0gcmFuZ2UuZ2V0Q2xvc2VkTm9kZSgpO1xyXG5cclxuXHQgICAgICAgIGlmKG1lLmZpcmVFdmVudCgnYmVmb3JlaW5zZXJ0aW1hZ2UnLCBvcHQpID09PSB0cnVlKXtcclxuXHQgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgZnVuY3Rpb24gdW5odG1sRGF0YShpbWdDaSkge1xyXG5cclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKCd3aWR0aCxoZWlnaHQsYm9yZGVyLGhzcGFjZSx2c3BhY2UnLnNwbGl0KCcsJyksIGZ1bmN0aW9uIChpdGVtKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZiAoaW1nQ2lbaXRlbV0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGltZ0NpW2l0ZW1dID0gcGFyc2VJbnQoaW1nQ2lbaXRlbV0sIDEwKSB8fCAwO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2goJ3NyYyxfc3JjJy5zcGxpdCgnLCcpLCBmdW5jdGlvbiAoaXRlbSkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYgKGltZ0NpW2l0ZW1dKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpbWdDaVtpdGVtXSA9IHV0aWxzLnVuaHRtbEZvclVybChpbWdDaVtpdGVtXSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKCd0aXRsZSxhbHQnLnNwbGl0KCcsJyksIGZ1bmN0aW9uIChpdGVtKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZiAoaW1nQ2lbaXRlbV0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGltZ0NpW2l0ZW1dID0gdXRpbHMudW5odG1sKGltZ0NpW2l0ZW1dKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIGlmIChpbWcgJiYgL2ltZy9pLnRlc3QoaW1nLnRhZ05hbWUpICYmIChpbWcuY2xhc3NOYW1lICE9IFwiZWR1aS1mYWtlZC12aWRlb1wiIHx8IGltZy5jbGFzc05hbWUuaW5kZXhPZihcImVkdWktdXBsb2FkLXZpZGVvXCIpIT0tMSkgJiYgIWltZy5nZXRBdHRyaWJ1dGUoXCJ3b3JkX2ltZ1wiKSkge1xyXG5cdCAgICAgICAgICAgIHZhciBmaXJzdCA9IG9wdC5zaGlmdCgpO1xyXG5cdCAgICAgICAgICAgIHZhciBmbG9hdFN0eWxlID0gZmlyc3RbJ2Zsb2F0U3R5bGUnXTtcclxuXHQgICAgICAgICAgICBkZWxldGUgZmlyc3RbJ2Zsb2F0U3R5bGUnXTtcclxuLy8vL1x0ICAgICAgICAgICAgICAgIGltZy5zdHlsZS5ib3JkZXIgPSAoZmlyc3QuYm9yZGVyfHwwKSArXCJweCBzb2xpZCAjMDAwXCI7XHJcbi8vLy9cdCAgICAgICAgICAgICAgICBpbWcuc3R5bGUubWFyZ2luID0gKGZpcnN0Lm1hcmdpbnx8MCkgK1wicHhcIjtcclxuLy9cdCAgICAgICAgICAgICAgICBpbWcuc3R5bGUuY3NzVGV4dCArPSAnO21hcmdpbjonICsgKGZpcnN0Lm1hcmdpbnx8MCkgK1wicHg7XCIgKyAnYm9yZGVyOicgKyAoZmlyc3QuYm9yZGVyfHwwKSArXCJweCBzb2xpZCAjMDAwXCI7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMuc2V0QXR0cmlidXRlcyhpbWcsIGZpcnN0KTtcclxuXHQgICAgICAgICAgICBtZS5leGVjQ29tbWFuZCgnaW1hZ2VmbG9hdCcsIGZsb2F0U3R5bGUpO1xyXG5cdCAgICAgICAgICAgIGlmIChvcHQubGVuZ3RoID4gMCkge1xyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEFmdGVyKGltZykuc2V0Q3Vyc29yKGZhbHNlLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoJ2luc2VydGltYWdlJywgb3B0KTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICB2YXIgaHRtbCA9IFtdLCBzdHIgPSAnJywgY2k7XHJcblx0ICAgICAgICAgICAgY2kgPSBvcHRbMF07XHJcblx0ICAgICAgICAgICAgaWYgKG9wdC5sZW5ndGggPT0gMSkge1xyXG5cdCAgICAgICAgICAgICAgICB1bmh0bWxEYXRhKGNpKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHN0ciA9ICc8aW1nIHNyYz1cIicgKyBjaS5zcmMgKyAnXCIgJyArIChjaS5fc3JjID8gJyBfc3JjPVwiJyArIGNpLl9zcmMgKyAnXCIgJyA6ICcnKSArXHJcblx0ICAgICAgICAgICAgICAgICAgICAoY2kud2lkdGggPyAnd2lkdGg9XCInICsgY2kud2lkdGggKyAnXCIgJyA6ICcnKSArXHJcblx0ICAgICAgICAgICAgICAgICAgICAoY2kuaGVpZ2h0ID8gJyBoZWlnaHQ9XCInICsgY2kuaGVpZ2h0ICsgJ1wiICcgOiAnJykgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKGNpWydmbG9hdFN0eWxlJ10gPT0gJ2xlZnQnIHx8IGNpWydmbG9hdFN0eWxlJ10gPT0gJ3JpZ2h0JyA/ICcgc3R5bGU9XCJmbG9hdDonICsgY2lbJ2Zsb2F0U3R5bGUnXSArICc7XCInIDogJycpICtcclxuXHQgICAgICAgICAgICAgICAgICAgIChjaS50aXRsZSAmJiBjaS50aXRsZSAhPSBcIlwiID8gJyB0aXRsZT1cIicgKyBjaS50aXRsZSArICdcIicgOiAnJykgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKGNpLmJvcmRlciAmJiBjaS5ib3JkZXIgIT0gXCIwXCIgPyAnIGJvcmRlcj1cIicgKyBjaS5ib3JkZXIgKyAnXCInIDogJycpICtcclxuXHQgICAgICAgICAgICAgICAgICAgIChjaS5hbHQgJiYgY2kuYWx0ICE9IFwiXCIgPyAnIGFsdD1cIicgKyBjaS5hbHQgKyAnXCInIDogJycpICtcclxuXHQgICAgICAgICAgICAgICAgICAgIChjaS5oc3BhY2UgJiYgY2kuaHNwYWNlICE9IFwiMFwiID8gJyBoc3BhY2UgPSBcIicgKyBjaS5oc3BhY2UgKyAnXCInIDogJycpICtcclxuXHQgICAgICAgICAgICAgICAgICAgIChjaS52c3BhY2UgJiYgY2kudnNwYWNlICE9IFwiMFwiID8gJyB2c3BhY2UgPSBcIicgKyBjaS52c3BhY2UgKyAnXCInIDogJycpICsgJy8+JztcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNpWydmbG9hdFN0eWxlJ10gPT0gJ2NlbnRlcicpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0ciA9ICc8cCBzdHlsZT1cInRleHQtYWxpZ246IGNlbnRlclwiPicgKyBzdHIgKyAnPC9wPic7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaHRtbC5wdXNoKHN0cik7XHJcblxyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBjaSA9IG9wdFtpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdW5odG1sRGF0YShjaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdHIgPSAnPHAgJyArIChjaVsnZmxvYXRTdHlsZSddID09ICdjZW50ZXInID8gJ3N0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyXCIgJyA6ICcnKSArICc+PGltZyBzcmM9XCInICsgY2kuc3JjICsgJ1wiICcgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIChjaS53aWR0aCA/ICd3aWR0aD1cIicgKyBjaS53aWR0aCArICdcIiAnIDogJycpICsgKGNpLl9zcmMgPyAnIF9zcmM9XCInICsgY2kuX3NyYyArICdcIiAnIDogJycpICtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAoY2kuaGVpZ2h0ID8gJyBoZWlnaHQ9XCInICsgY2kuaGVpZ2h0ICsgJ1wiICcgOiAnJykgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICcgc3R5bGU9XCInICsgKGNpWydmbG9hdFN0eWxlJ10gJiYgY2lbJ2Zsb2F0U3R5bGUnXSAhPSAnY2VudGVyJyA/ICdmbG9hdDonICsgY2lbJ2Zsb2F0U3R5bGUnXSArICc7JyA6ICcnKSArXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKGNpLmJvcmRlciB8fCAnJykgKyAnXCIgJyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgKGNpLnRpdGxlID8gJyB0aXRsZT1cIicgKyBjaS50aXRsZSArICdcIicgOiAnJykgKyAnIC8+PC9wPic7XHJcblx0ICAgICAgICAgICAgICAgICAgICBodG1sLnB1c2goc3RyKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoJ2luc2VydEh0bWwnLCBodG1sLmpvaW4oJycpKTtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBtZS5maXJlRXZlbnQoJ2FmdGVyaW5zZXJ0aW1hZ2UnLCBvcHQpXHJcblx0ICAgIH1cclxuXHR9O1xyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9qdXN0aWZ5LmpzXHJcblx0LyoqXHJcblx0ICog5q616JC95qC85byPXHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDmrrXokL3lr7npvZDmlrnlvI9cclxuXHQgKiBAY29tbWFuZCBqdXN0aWZ5XHJcblx0ICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBhbGlnbiDlr7npvZDmlrnlvI/vvJpsZWZ0ID0+IOWxheW3pu+8jHJpZ2h0ID0+IOWxheWPs++8jGNlbnRlciA9PiDlsYXkuK3vvIxqdXN0aWZ5ID0+IOS4pOerr+Wvuem9kFxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogYGBgamF2YXNjcmlwdFxyXG5cdCAqIGVkaXRvci5leGVjQ29tbWFuZCggJ2p1c3RpZnknLCAnY2VudGVyJyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cdC8qKlxyXG5cdCAqIOWmguaenOmAieWMuuaJgOWcqOS9jee9ruaYr+auteiQveWMuuWfn++8jOi/lOWbnuW9k+WJjeauteiQveWvuem9kOaWueW8j1xyXG5cdCAqIEBjb21tYW5kIGp1c3RpZnlcclxuXHQgKiBAbWV0aG9kIHF1ZXJ5Q29tbWFuZFZhbHVlXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAqIEByZXR1cm4geyBTdHJpbmcgfSDov5Tlm57mrrXokL3lr7npvZDmlrnlvI9cclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiBlZGl0b3IucXVlcnlDb21tYW5kVmFsdWUoICdqdXN0aWZ5JyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHRVRS5wbHVnaW5zWydqdXN0aWZ5J109ZnVuY3Rpb24oKXtcclxuXHQgICAgdmFyIG1lPXRoaXMsXHJcblx0ICAgICAgICBibG9jayA9IGRvbVV0aWxzLmlzQmxvY2tFbG0sXHJcblx0ICAgICAgICBkZWZhdWx0VmFsdWUgPSB7XHJcblx0ICAgICAgICAgICAgbGVmdDoxLFxyXG5cdCAgICAgICAgICAgIHJpZ2h0OjEsXHJcblx0ICAgICAgICAgICAgY2VudGVyOjEsXHJcblx0ICAgICAgICAgICAganVzdGlmeToxXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZG9KdXN0aWZ5ID0gZnVuY3Rpb24gKHJhbmdlLCBzdHlsZSkge1xyXG5cdCAgICAgICAgICAgIHZhciBib29rbWFyayA9IHJhbmdlLmNyZWF0ZUJvb2ttYXJrKCksXHJcblx0ICAgICAgICAgICAgICAgIGZpbHRlckZuID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09IDEgPyBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPSAnYnInICYmICFkb21VdGlscy5pc0Jvb2ttYXJrTm9kZShub2RlKSA6ICFkb21VdGlscy5pc1doaXRlc3BhY2Uobm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgIH07XHJcblxyXG5cdCAgICAgICAgICAgIHJhbmdlLmVubGFyZ2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgdmFyIGJvb2ttYXJrMiA9IHJhbmdlLmNyZWF0ZUJvb2ttYXJrKCksXHJcblx0ICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZShib29rbWFyazIuc3RhcnQsIGZhbHNlLCBmaWx0ZXJGbiksXHJcblx0ICAgICAgICAgICAgICAgIHRtcFJhbmdlID0gcmFuZ2UuY2xvbmVSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICB0bXBOb2RlO1xyXG5cdCAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICYmICEoZG9tVXRpbHMuZ2V0UG9zaXRpb24oY3VycmVudCwgYm9va21hcmsyLmVuZCkgJiBkb21VdGlscy5QT1NJVElPTl9GT0xMT1dJTkcpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjdXJyZW50Lm5vZGVUeXBlID09IDMgfHwgIWJsb2NrKGN1cnJlbnQpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0bXBSYW5nZS5zZXRTdGFydEJlZm9yZShjdXJyZW50KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQgIT09IGJvb2ttYXJrMi5lbmQgJiYgIWJsb2NrKGN1cnJlbnQpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdG1wTm9kZSA9IGN1cnJlbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGRvbVV0aWxzLmdldE5leHREb21Ob2RlKGN1cnJlbnQsIGZhbHNlLCBudWxsLCBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWJsb2NrKG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wUmFuZ2Uuc2V0RW5kQWZ0ZXIodG1wTm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY29tbW9uID0gdG1wUmFuZ2UuZ2V0Q29tbW9uQW5jZXN0b3IoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghZG9tVXRpbHMuaXNCb2R5KGNvbW1vbikgJiYgYmxvY2soY29tbW9uKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnNldFN0eWxlcyhjb21tb24sIHV0aWxzLmlzU3RyaW5nKHN0eWxlKSA/IHsndGV4dC1hbGlnbic6c3R5bGV9IDogc3R5bGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjb21tb247XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gcmFuZ2UuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnNldFN0eWxlcyhwLCB1dGlscy5pc1N0cmluZyhzdHlsZSkgPyB7J3RleHQtYWxpZ24nOnN0eWxlfSA6IHN0eWxlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJhZyA9IHRtcFJhbmdlLmV4dHJhY3RDb250ZW50cygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQoZnJhZyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdG1wUmFuZ2UuaW5zZXJ0Tm9kZShwKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gcDtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZShjdXJyZW50LCBmYWxzZSwgZmlsdGVyRm4pO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGRvbVV0aWxzLmdldE5leHREb21Ob2RlKGN1cnJlbnQsIHRydWUsIGZpbHRlckZuKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gcmFuZ2UubW92ZVRvQm9va21hcmsoYm9va21hcmsyKS5tb3ZlVG9Cb29rbWFyayhib29rbWFyayk7XHJcblx0ICAgICAgICB9O1xyXG5cclxuXHQgICAgVUUuY29tbWFuZHNbJ2p1c3RpZnknXSA9IHtcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOmZ1bmN0aW9uIChjbWROYW1lLCBhbGlnbikge1xyXG5cdCAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgIHR4dDtcclxuXHJcblx0ICAgICAgICAgICAgLy/pl63lkIjml7bljZXni6zlpITnkIZcclxuXHQgICAgICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgICAgIHR4dCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ3AnKTtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZSh0eHQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBkb0p1c3RpZnkocmFuZ2UsIGFsaWduKTtcclxuXHQgICAgICAgICAgICBpZiAodHh0KSB7XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QmVmb3JlKHR4dCkuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSh0eHQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XHJcblxyXG5cclxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRWYWx1ZTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHN0YXJ0Tm9kZSA9IHRoaXMuc2VsZWN0aW9uLmdldFN0YXJ0KCksXHJcblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShzdGFydE5vZGUsICd0ZXh0LWFsaWduJyk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZVt2YWx1ZV0gPyB2YWx1ZSA6ICdsZWZ0JztcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHN0YXJ0ID0gdGhpcy5zZWxlY3Rpb24uZ2V0U3RhcnQoKSxcclxuXHQgICAgICAgICAgICAgICAgY2VsbCA9IHN0YXJ0ICYmIGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUoc3RhcnQsIFtcInRkXCIsIFwidGhcIixcImNhcHRpb25cIl0sIHRydWUpO1xyXG5cclxuXHQgICAgICAgICAgICByZXR1cm4gY2VsbD8gLTE6MDtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgIH07XHJcblx0fTtcclxuXHJcblxyXG5cdC8vIHBsdWdpbnMvZm9udC5qc1xyXG5cdC8qKlxyXG5cdCAqIOWtl+S9k+minOiJsizog4zmma/oibIs5a2X5Y+3LOWtl+S9kyzkuIvliJLnur8s5Yig6Zmk57q/XHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDlrZfkvZPpopzoibJcclxuXHQgKiBAY29tbWFuZCBmb3JlY29sb3JcclxuXHQgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IHZhbHVlIOiJsuWAvCjlv4XpobvljYHlha3ov5vliLYpXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnZm9yZWNvbG9yJywgJyMwMDAnICk7XHJcblx0ICogYGBgXHJcblx0ICovXHJcblx0LyoqXHJcblx0ICog6L+U5Zue6YCJ5Yy65a2X5L2T6aKc6ImyXHJcblx0ICogQGNvbW1hbmQgZm9yZWNvbG9yXHJcblx0ICogQG1ldGhvZCBxdWVyeUNvbW1hbmRWYWx1ZVxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAcmV0dXJuIHsgU3RyaW5nIH0g6L+U5Zue5a2X5L2T6aKc6ImyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCAnZm9yZWNvbG9yJyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDlrZfkvZPog4zmma/popzoibJcclxuXHQgKiBAY29tbWFuZCBiYWNrY29sb3JcclxuXHQgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IHZhbHVlIOiJsuWAvCjlv4XpobvljYHlha3ov5vliLYpXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnYmFja2NvbG9yJywgJyMwMDAnICk7XHJcblx0ICogYGBgXHJcblx0ICovXHJcblx0LyoqXHJcblx0ICog6L+U5Zue6YCJ5Yy65a2X5L2T6aKc6ImyXHJcblx0ICogQGNvbW1hbmQgYmFja2NvbG9yXHJcblx0ICogQG1ldGhvZCBxdWVyeUNvbW1hbmRWYWx1ZVxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAcmV0dXJuIHsgU3RyaW5nIH0g6L+U5Zue5a2X5L2T6IOM5pmv6aKc6ImyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCAnYmFja2NvbG9yJyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDlrZfkvZPlpKflsI9cclxuXHQgKiBAY29tbWFuZCBmb250c2l6ZVxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gdmFsdWUg5a2X5L2T5aSn5bCPXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnZm9udHNpemUnLCAnMTRweCcgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHQvKipcclxuXHQgKiDov5Tlm57pgInljLrlrZfkvZPlpKflsI9cclxuXHQgKiBAY29tbWFuZCBmb250c2l6ZVxyXG5cdCAqIEBtZXRob2QgcXVlcnlDb21tYW5kVmFsdWVcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQHJldHVybiB7IFN0cmluZyB9IOi/lOWbnuWtl+S9k+Wkp+Wwj1xyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogYGBgamF2YXNjcmlwdFxyXG5cdCAqIGVkaXRvci5xdWVyeUNvbW1hbmRWYWx1ZSggJ2ZvbnRzaXplJyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDlrZfkvZPmoLflvI9cclxuXHQgKiBAY29tbWFuZCBmb250ZmFtaWx5XHJcblx0ICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSB2YWx1ZSDlrZfkvZPmoLflvI9cclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdmb250ZmFtaWx5JywgJ+W+rui9r+mbhem7kScgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHQvKipcclxuXHQgKiDov5Tlm57pgInljLrlrZfkvZPmoLflvI9cclxuXHQgKiBAY29tbWFuZCBmb250ZmFtaWx5XHJcblx0ICogQG1ldGhvZCBxdWVyeUNvbW1hbmRWYWx1ZVxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAcmV0dXJuIHsgU3RyaW5nIH0g6L+U5Zue5a2X5L2T5qC35byPXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCAnZm9udGZhbWlseScgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog5a2X5L2T5LiL5YiS57q/LOS4juWIoOmZpOe6v+S6kuaWpVxyXG5cdCAqIEBjb21tYW5kIHVuZGVybGluZVxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAndW5kZXJsaW5lJyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDlrZfkvZPliKDpmaTnur8s5LiO5LiL5YiS57q/5LqS5palXHJcblx0ICogQGNvbW1hbmQgc3RyaWtldGhyb3VnaFxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnc3RyaWtldGhyb3VnaCcgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog5a2X5L2T6L655qGGXHJcblx0ICogQGNvbW1hbmQgZm9udGJvcmRlclxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnZm9udGJvcmRlcicgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0VUUucGx1Z2luc1snZm9udCddID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgZm9udHMgPSB7XHJcblx0ICAgICAgICAgICAgJ2ZvcmVjb2xvcic6ICdjb2xvcicsXHJcblx0ICAgICAgICAgICAgJ2JhY2tjb2xvcic6ICdiYWNrZ3JvdW5kLWNvbG9yJyxcclxuXHQgICAgICAgICAgICAnZm9udHNpemUnOiAnZm9udC1zaXplJyxcclxuXHQgICAgICAgICAgICAnZm9udGZhbWlseSc6ICdmb250LWZhbWlseScsXHJcblx0ICAgICAgICAgICAgJ3VuZGVybGluZSc6ICd0ZXh0LWRlY29yYXRpb24nLFxyXG5cdCAgICAgICAgICAgICdzdHJpa2V0aHJvdWdoJzogJ3RleHQtZGVjb3JhdGlvbicsXHJcblx0ICAgICAgICAgICAgJ2ZvbnRib3JkZXInOiAnYm9yZGVyJ1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIG5lZWRDbWQgPSB7J3VuZGVybGluZSc6IDEsICdzdHJpa2V0aHJvdWdoJzogMSwgJ2ZvbnRib3JkZXInOiAxfSxcclxuXHQgICAgICAgIG5lZWRTZXRDaGlsZCA9IHtcclxuXHQgICAgICAgICAgICAnZm9yZWNvbG9yJzogJ2NvbG9yJyxcclxuXHQgICAgICAgICAgICAnYmFja2NvbG9yJzogJ2JhY2tncm91bmQtY29sb3InLFxyXG5cdCAgICAgICAgICAgICdmb250c2l6ZSc6ICdmb250LXNpemUnLFxyXG5cdCAgICAgICAgICAgICdmb250ZmFtaWx5JzogJ2ZvbnQtZmFtaWx5J1xyXG5cclxuXHQgICAgICAgIH07XHJcblx0ICAgIG1lLnNldE9wdCh7XHJcblx0ICAgICAgICAnZm9udGZhbWlseSc6IFtcclxuXHQgICAgICAgICAgICB7IG5hbWU6ICdzb25ndGknLCB2YWw6ICflrovkvZMsU2ltU3VuJ30sXHJcblx0ICAgICAgICAgICAgeyBuYW1lOiAneWFoZWknLCB2YWw6ICflvq7ova/pm4Xpu5EsTWljcm9zb2Z0IFlhSGVpJ30sXHJcblx0ICAgICAgICAgICAgeyBuYW1lOiAna2FpdGknLCB2YWw6ICfmpbfkvZMs5qW35L2TX0dCMjMxMiwgU2ltS2FpJ30sXHJcblx0ICAgICAgICAgICAgeyBuYW1lOiAnaGVpdGknLCB2YWw6ICfpu5HkvZMsIFNpbUhlaSd9LFxyXG5cdCAgICAgICAgICAgIHsgbmFtZTogJ2xpc2h1JywgdmFsOiAn6Zq25LmmLCBTaW1MaSd9LFxyXG5cdCAgICAgICAgICAgIHsgbmFtZTogJ2FuZGFsZU1vbm8nLCB2YWw6ICdhbmRhbGUgbW9ubyd9LFxyXG5cdCAgICAgICAgICAgIHsgbmFtZTogJ2FyaWFsJywgdmFsOiAnYXJpYWwsIGhlbHZldGljYSxzYW5zLXNlcmlmJ30sXHJcblx0ICAgICAgICAgICAgeyBuYW1lOiAnYXJpYWxCbGFjaycsIHZhbDogJ2FyaWFsIGJsYWNrLGF2YW50IGdhcmRlJ30sXHJcblx0ICAgICAgICAgICAgeyBuYW1lOiAnY29taWNTYW5zTXMnLCB2YWw6ICdjb21pYyBzYW5zIG1zJ30sXHJcblx0ICAgICAgICAgICAgeyBuYW1lOiAnaW1wYWN0JywgdmFsOiAnaW1wYWN0LGNoaWNhZ28nfSxcclxuXHQgICAgICAgICAgICB7IG5hbWU6ICd0aW1lc05ld1JvbWFuJywgdmFsOiAndGltZXMgbmV3IHJvbWFuJ31cclxuXHQgICAgICAgIF0sXHJcblx0ICAgICAgICAnZm9udHNpemUnOiBbMTAsIDExLCAxMiwgMTQsIDE2LCAxOCwgMjAsIDI0LCAzNl1cclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICBmdW5jdGlvbiBtZXJnZVdpdGhQYXJlbnQobm9kZSl7XHJcblx0ICAgICAgICB2YXIgcGFyZW50O1xyXG5cdCAgICAgICAgd2hpbGUocGFyZW50ID0gbm9kZS5wYXJlbnROb2RlKXtcclxuXHQgICAgICAgICAgICBpZihwYXJlbnQudGFnTmFtZSA9PSAnU1BBTicgJiYgZG9tVXRpbHMuZ2V0Q2hpbGRDb3VudChwYXJlbnQsZnVuY3Rpb24oY2hpbGQpe1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gIWRvbVV0aWxzLmlzQm9va21hcmtOb2RlKGNoaWxkKSAmJiAhZG9tVXRpbHMuaXNCcihjaGlsZClcclxuXHQgICAgICAgICAgICB9KSA9PSAxKSB7XHJcblx0ICAgICAgICAgICAgICAgIHBhcmVudC5zdHlsZS5jc3NUZXh0ICs9IG5vZGUuc3R5bGUuY3NzVGV4dDtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKG5vZGUsdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIG5vZGUgPSBwYXJlbnQ7XHJcblxyXG5cdCAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9XHJcblx0ICAgIGZ1bmN0aW9uIG1lcmdlQ2hpbGQocm5nLGNtZE5hbWUsdmFsdWUpe1xyXG5cdCAgICAgICAgaWYobmVlZFNldENoaWxkW2NtZE5hbWVdKXtcclxuXHQgICAgICAgICAgICBybmcuYWRqdXN0bWVudEJvdW5kYXJ5KCk7XHJcblx0ICAgICAgICAgICAgaWYoIXJuZy5jb2xsYXBzZWQgJiYgcm5nLnN0YXJ0Q29udGFpbmVyLm5vZGVUeXBlID09IDEpe1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBybmcuc3RhcnRDb250YWluZXIuY2hpbGROb2Rlc1tybmcuc3RhcnRPZmZzZXRdO1xyXG5cdCAgICAgICAgICAgICAgICBpZihzdGFydCAmJiBkb21VdGlscy5pc1RhZ05vZGUoc3RhcnQsJ3NwYW4nKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgYmsgPSBybmcuY3JlYXRlQm9va21hcmsoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHV0aWxzLmVhY2goZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoc3RhcnQsICdzcGFuJyksIGZ1bmN0aW9uIChzcGFuKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzcGFuLnBhcmVudE5vZGUgfHwgZG9tVXRpbHMuaXNCb29rbWFya05vZGUoc3BhbikpcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNtZE5hbWUgPT0gJ2JhY2tjb2xvcicgJiYgZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShzcGFuLCdiYWNrZ3JvdW5kLWNvbG9yJykudG9Mb3dlckNhc2UoKSA9PT0gdmFsdWUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZVN0eWxlKHNwYW4sbmVlZFNldENoaWxkW2NtZE5hbWVdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihzcGFuLnN0eWxlLmNzc1RleHQucmVwbGFjZSgvXlxccyskLywnJykubGVuZ3RoID09IDApe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoc3Bhbix0cnVlKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcm5nLm1vdmVUb0Jvb2ttYXJrKGJrKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgfVxyXG5cdCAgICBmdW5jdGlvbiBtZXJnZXNpYmxpbmcocm5nLGNtZE5hbWUsdmFsdWUpIHtcclxuXHQgICAgICAgIHZhciBjb2xsYXBzZWQgPSBybmcuY29sbGFwc2VkLFxyXG5cdCAgICAgICAgICAgIGJrID0gcm5nLmNyZWF0ZUJvb2ttYXJrKCksIGNvbW1vbjtcclxuXHQgICAgICAgIGlmIChjb2xsYXBzZWQpIHtcclxuXHQgICAgICAgICAgICBjb21tb24gPSBiay5zdGFydC5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgIHdoaWxlIChkdGQuJGlubGluZVtjb21tb24udGFnTmFtZV0pIHtcclxuXHQgICAgICAgICAgICAgICAgY29tbW9uID0gY29tbW9uLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICBjb21tb24gPSBkb21VdGlscy5nZXRDb21tb25BbmNlc3Rvcihiay5zdGFydCwgYmsuZW5kKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHV0aWxzLmVhY2goZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoY29tbW9uLCAnc3BhbicpLCBmdW5jdGlvbiAoc3Bhbikge1xyXG5cdCAgICAgICAgICAgIGlmICghc3Bhbi5wYXJlbnROb2RlIHx8IGRvbVV0aWxzLmlzQm9va21hcmtOb2RlKHNwYW4pKXJldHVybjtcclxuXHQgICAgICAgICAgICBpZiAoL1xccypib3JkZXJcXHMqOlxccypub25lOz9cXHMqL2kudGVzdChzcGFuLnN0eWxlLmNzc1RleHQpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmKC9eXFxzKmJvcmRlclxccyo6XFxzKm5vbmU7P1xccyokLy50ZXN0KHNwYW4uc3R5bGUuY3NzVGV4dCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHNwYW4sIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZVN0eWxlKHNwYW4sJ2JvcmRlcicpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJldHVyblxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoL2JvcmRlci9pLnRlc3Qoc3Bhbi5zdHlsZS5jc3NUZXh0KSAmJiBzcGFuLnBhcmVudE5vZGUudGFnTmFtZSA9PSAnU1BBTicgJiYgL2JvcmRlci9pLnRlc3Qoc3Bhbi5wYXJlbnROb2RlLnN0eWxlLmNzc1RleHQpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHNwYW4uc3R5bGUuY3NzVGV4dCA9IHNwYW4uc3R5bGUuY3NzVGV4dC5yZXBsYWNlKC9ib3JkZXJbXjpdKjpbXjtdKzs/L2dpLCAnJyk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmKCEoY21kTmFtZT09J2ZvbnRib3JkZXInICYmIHZhbHVlPT0nbm9uZScpKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG5leHQgPSBzcGFuLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICB3aGlsZSAobmV4dCAmJiBuZXh0Lm5vZGVUeXBlID09IDEgJiYgbmV4dC50YWdOYW1lID09ICdTUEFOJyApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGRvbVV0aWxzLmlzQm9va21hcmtOb2RlKG5leHQpICYmIGNtZE5hbWUgPT0gJ2ZvbnRib3JkZXInKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5hcHBlbmRDaGlsZChuZXh0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gc3Bhbi5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0LnN0eWxlLmNzc1RleHQgPT0gc3Bhbi5zdHlsZS5jc3NUZXh0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMubW92ZUNoaWxkKG5leHQsIHNwYW4pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShuZXh0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzcGFuLm5leHRTaWJsaW5nID09PSBuZXh0KVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHNwYW4ubmV4dFNpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgICAgICBtZXJnZVdpdGhQYXJlbnQoc3Bhbik7XHJcblx0ICAgICAgICAgICAgaWYoYnJvd3Nlci5pZSAmJiBicm93c2VyLnZlcnNpb24gPiA4ICl7XHJcblx0ICAgICAgICAgICAgICAgIC8v5ou36LSd54i25Lqy5Lus55qE54m55Yir55qE5bGe5oCnLOi/memHjOWPquWBmuiDjOaZr+minOiJsueahOWkhOeQhlxyXG5cdCAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gZG9tVXRpbHMuZmluZFBhcmVudChzcGFuLGZ1bmN0aW9uKG4pe3JldHVybiBuLnRhZ05hbWUgPT0gJ1NQQU4nICYmIC9iYWNrZ3JvdW5kLWNvbG9yLy50ZXN0KG4uc3R5bGUuY3NzVGV4dCl9KTtcclxuXHQgICAgICAgICAgICAgICAgaWYocGFyZW50ICYmICEvYmFja2dyb3VuZC1jb2xvci8udGVzdChzcGFuLnN0eWxlLmNzc1RleHQpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHNwYW4uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gcGFyZW50LnN0eWxlLmJhY2tncm91bmRDb2xvcjtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIHJuZy5tb3ZlVG9Cb29rbWFyayhiayk7XHJcblx0ICAgICAgICBtZXJnZUNoaWxkKHJuZyxjbWROYW1lLHZhbHVlKVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBtZS5hZGRJbnB1dFJ1bGUoZnVuY3Rpb24gKHJvb3QpIHtcclxuXHQgICAgICAgIHV0aWxzLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgndSBzIGRlbCBmb250IHN0cmlrZScpLCBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgIGlmIChub2RlLnRhZ05hbWUgPT0gJ2ZvbnQnKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjc3NTdHlsZSA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIG5vZGUuYXR0cnMpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NpemUnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NTdHlsZS5wdXNoKCdmb250LXNpemU6JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEnOicxMCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMic6JzEyJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICczJzonMTYnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzQnOicxOCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnNSc6JzI0JyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc2JzonMzInLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzcnOic0OCdcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVtub2RlLmF0dHJzW3BdXSB8fCBub2RlLmF0dHJzW3BdKSArICdweCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb2xvcic6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1N0eWxlLnB1c2goJ2NvbG9yOicgKyBub2RlLmF0dHJzW3BdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZmFjZSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc1N0eWxlLnB1c2goJ2ZvbnQtZmFtaWx5OicgKyBub2RlLmF0dHJzW3BdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3R5bGUnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NTdHlsZS5wdXNoKG5vZGUuYXR0cnNbcF0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIG5vZGUuYXR0cnMgPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAnc3R5bGUnOiBjc3NTdHlsZS5qb2luKCc7JylcclxuXHQgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgdmFsID0gbm9kZS50YWdOYW1lID09ICd1JyA/ICd1bmRlcmxpbmUnIDogJ2xpbmUtdGhyb3VnaCc7XHJcblx0ICAgICAgICAgICAgICAgIG5vZGUuYXR0cnMgPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAnc3R5bGUnOiAobm9kZS5nZXRBdHRyKCdzdHlsZScpIHx8ICcnKSArICd0ZXh0LWRlY29yYXRpb246JyArIHZhbCArICc7J1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIG5vZGUudGFnTmFtZSA9ICdzcGFuJztcclxuXHQgICAgICAgIH0pO1xyXG4vL1x0ICAgICAgICB1dGlscy5lYWNoKHJvb3QuZ2V0Tm9kZXNCeVRhZ05hbWUoJ3NwYW4nKSwgZnVuY3Rpb24gKG5vZGUpIHtcclxuLy9cdCAgICAgICAgICAgIHZhciB2YWw7XHJcbi8vXHQgICAgICAgICAgICBpZih2YWwgPSBub2RlLmdldEF0dHIoJ2NsYXNzJykpe1xyXG4vL1x0ICAgICAgICAgICAgICAgIGlmKC9mb250c3RyaWtldGhyb3VnaC8udGVzdCh2YWwpKXtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRTdHlsZSgndGV4dC1kZWNvcmF0aW9uJywnbGluZS10aHJvdWdoJyk7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIGlmKG5vZGUuYXR0cnNbJ2NsYXNzJ10pe1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hdHRyc1snY2xhc3MnXSA9IG5vZGUuYXR0cnNbJ2NsYXNzJ10ucmVwbGFjZSgvZm9udHN0cmlrZXRocm91Z2gvLCcnKTtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHIoJ2NsYXNzJylcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgfVxyXG4vL1x0ICAgICAgICAgICAgICAgIH1cclxuLy9cdCAgICAgICAgICAgICAgICBpZigvZm9udGJvcmRlci8udGVzdCh2YWwpKXtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRTdHlsZSgnYm9yZGVyJywnMXB4IHNvbGlkICMwMDAnKTtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgaWYobm9kZS5hdHRyc1snY2xhc3MnXSl7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmF0dHJzWydjbGFzcyddID0gbm9kZS5hdHRyc1snY2xhc3MnXS5yZXBsYWNlKC9mb250Ym9yZGVyLywnJyk7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyKCdjbGFzcycpXHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIH1cclxuLy9cdCAgICAgICAgICAgICAgICB9XHJcbi8vXHQgICAgICAgICAgICB9XHJcbi8vXHQgICAgICAgIH0pO1xyXG5cdCAgICB9KTtcclxuLy9cdCAgICBtZS5hZGRPdXRwdXRSdWxlKGZ1bmN0aW9uKHJvb3Qpe1xyXG4vL1x0ICAgICAgICB1dGlscy5lYWNoKHJvb3QuZ2V0Tm9kZXNCeVRhZ05hbWUoJ3NwYW4nKSwgZnVuY3Rpb24gKG5vZGUpIHtcclxuLy9cdCAgICAgICAgICAgIHZhciB2YWw7XHJcbi8vXHQgICAgICAgICAgICBpZih2YWwgPSBub2RlLmdldFN0eWxlKCd0ZXh0LWRlY29yYXRpb24nKSl7XHJcbi8vXHQgICAgICAgICAgICAgICAgaWYoL2xpbmUtdGhyb3VnaC8udGVzdCh2YWwpKXtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgaWYobm9kZS5hdHRyc1snY2xhc3MnXSl7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmF0dHJzWydjbGFzcyddICs9ICcgZm9udHN0cmlrZXRocm91Z2gnO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cignY2xhc3MnLCdmb250c3RyaWtldGhyb3VnaCcpXHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIH1cclxuLy9cdCAgICAgICAgICAgICAgICB9XHJcblx0Ly9cclxuLy9cdCAgICAgICAgICAgICAgICBub2RlLnNldFN0eWxlKCd0ZXh0LWRlY29yYXRpb24nKVxyXG4vL1x0ICAgICAgICAgICAgfVxyXG4vL1x0ICAgICAgICAgICAgaWYodmFsID0gbm9kZS5nZXRTdHlsZSgnYm9yZGVyJykpe1xyXG4vL1x0ICAgICAgICAgICAgICAgIGlmKC8xcHgvLnRlc3QodmFsKSAmJiAvc29saWQvLnRlc3QodmFsKSl7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIGlmKG5vZGUuYXR0cnNbJ2NsYXNzJ10pe1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hdHRyc1snY2xhc3MnXSArPSAnIGZvbnRib3JkZXInO1xyXG5cdC8vXHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyKCdjbGFzcycsJ2ZvbnRib3JkZXInKVxyXG4vL1x0ICAgICAgICAgICAgICAgICAgICB9XHJcbi8vXHQgICAgICAgICAgICAgICAgfVxyXG4vL1x0ICAgICAgICAgICAgICAgIG5vZGUuc2V0U3R5bGUoJ2JvcmRlcicpXHJcblx0Ly9cclxuLy9cdCAgICAgICAgICAgIH1cclxuLy9cdCAgICAgICAgfSk7XHJcbi8vXHQgICAgfSk7XHJcblx0ICAgIGZvciAodmFyIHAgaW4gZm9udHMpIHtcclxuXHQgICAgICAgIChmdW5jdGlvbiAoY21kLCBzdHlsZSkge1xyXG5cdCAgICAgICAgICAgIFVFLmNvbW1hbmRzW2NtZF0gPSB7XHJcblx0ICAgICAgICAgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoY21kTmFtZSwgdmFsdWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgfHwgKHRoaXMucXVlcnlDb21tYW5kU3RhdGUoY21kTmFtZSkgPyAnbm9uZScgOiBjbWROYW1lID09ICd1bmRlcmxpbmUnID8gJ3VuZGVybGluZScgOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWUgPT0gJ2ZvbnRib3JkZXInID8gJzFweCBzb2xpZCAjMDAwJyA6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsaW5lLXRocm91Z2gnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09ICdkZWZhdWx0Jykge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSBtZS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnZm9udCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKHRleHQpLnNlbGVjdCgpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoJ3JlbW92ZUZvcm1hdCcsICdzcGFuLGEnLCBzdHlsZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRleHQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRCZWZvcmUodGV4dCkuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSh0ZXh0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VzaWJsaW5nKHJhbmdlLGNtZE5hbWUsdmFsdWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdCgpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmFuZ2UuY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWVkQ21kW2NtZF0gJiYgbWUucXVlcnlDb21tYW5kVmFsdWUoY21kKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoJ3JlbW92ZUZvcm1hdCcsICdzcGFuLGEnLCBzdHlsZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmFwcGx5SW5saW5lU3R5bGUoJ3NwYW4nLCB7J3N0eWxlJzogc3R5bGUgKyAnOicgKyB2YWx1ZX0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXJnZXNpYmxpbmcocmFuZ2UsIGNtZE5hbWUsdmFsdWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwYW4gPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCAnc3BhbicsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gbWUuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ2ZvbnQnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNwYW4gJiYgIXNwYW4uY2hpbGRyZW4ubGVuZ3RoICYmICFzcGFuW2Jyb3dzZXIuaWUgPyAnaW5uZXJUZXh0JyA6ICd0ZXh0Q29udGVudCddLnJlcGxhY2UoZmlsbENoYXJSZWcsICcnKS5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yIGllIGhhY2sgd2hlbiBlbnRlclxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZSh0ZXh0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZWVkQ21kW2NtZF0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlKHRleHQpLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmV4ZWNDb21tYW5kKCdyZW1vdmVGb3JtYXQnLCAnc3BhbixhJywgc3R5bGUsIG51bGwpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZSh0ZXh0LCAnc3BhbicsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QmVmb3JlKHRleHQpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4gJiYgKHNwYW4uc3R5bGUuY3NzVGV4dCArPSAnOycgKyBzdHlsZSArICc6JyArIHZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpLnNlbGVjdCgpO1xyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKHRleHQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZSh0ZXh0KS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwYW4gPSByYW5nZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5lZWRDbWRbY21kXSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYeagh+etvuWGheeahOS4jeWkhOeQhui3s+i/h1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHRleHQsICdhJywgdHJ1ZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRCZWZvcmUodGV4dCkuc2V0Q3Vyc29yKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSh0ZXh0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5leGVjQ29tbWFuZCgncmVtb3ZlRm9ybWF0JywgJ3NwYW4sYScsIHN0eWxlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGFuLnN0eWxlLmNzc1RleHQgPSBzdHlsZSArICc6JyArIHZhbHVlO1xyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNwYW4sIHRleHQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy/kv67lpI3vvIxzcGFu5aWXc3BhbiDkvYbmoLflvI/kuI3nu6fmib/nmoTpl67pophcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYnJvd3Nlci5pZSB8fCBicm93c2VyLmllICYmIGJyb3dzZXIudmVyc2lvbiA9PSA5KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNwYW5QYXJlbnQgPSBzcGFuLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCFkb21VdGlscy5pc0Jsb2NrRWxtKHNwYW5QYXJlbnQpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcGFuUGFyZW50LnRhZ05hbWUgPT0gJ1NQQU4nKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL29wZXJh5ZCI5bm2c3R5bGXkuI3kvJrliqDlhaVcIjtcIlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Bhbi5zdHlsZS5jc3NUZXh0ID0gc3BhblBhcmVudC5zdHlsZS5jc3NUZXh0ICsgXCI7XCIgKyBzcGFuLnN0eWxlLmNzc1RleHQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhblBhcmVudCA9IHNwYW5QYXJlbnQucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcGVyYSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChzcGFuLCAwKS5jb2xsYXBzZSh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VzaWJsaW5nKHJhbmdlLCBjbWROYW1lLHZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHNwYW4sIDApLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlc2libGluZyhyYW5nZSxjbWROYW1lLHZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RyYWNlOjk4MVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kb21VdGlscy5tZXJnZVRvUGFyZW50KHNwYW4pXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHRleHQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIHF1ZXJ5Q29tbWFuZFZhbHVlOiBmdW5jdGlvbiAoY21kTmFtZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0Tm9kZSA9IHRoaXMuc2VsZWN0aW9uLmdldFN0YXJ0KCk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgLy90cmFjZTo5NDZcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjbWROYW1lID09ICd1bmRlcmxpbmUnIHx8IGNtZE5hbWUgPT0gJ3N0cmlrZXRocm91Z2gnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcE5vZGUgPSBzdGFydE5vZGUsIHZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0bXBOb2RlICYmICFkb21VdGlscy5pc0Jsb2NrRWxtKHRtcE5vZGUpICYmICFkb21VdGlscy5pc0JvZHkodG1wTm9kZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRtcE5vZGUubm9kZVR5cGUgPT0gMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKHRtcE5vZGUsIHN0eWxlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSAnbm9uZScpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE5vZGUgPSB0bXBOb2RlLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnbm9uZSc7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY21kTmFtZSA9PSAnZm9udGJvcmRlcicpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0gc3RhcnROb2RlLCB2YWw7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRtcCAmJiBkdGQuJGlubGluZVt0bXAudGFnTmFtZV0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCA9IGRvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUodG1wLCAnYm9yZGVyJykpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLzFweC8udGVzdCh2YWwpICYmIC9zb2xpZC8udGVzdCh2YWwpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSB0bXAucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoIGNtZE5hbWUgPT0gJ0ZvbnRTaXplJyApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3R5bGVWYWwgPSBkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKHN0YXJ0Tm9kZSwgc3R5bGUpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSAvXihbXFxkXFwuXSspKFxcdyspJC8uZXhlYyggc3R5bGVWYWwgKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoIHRtcCApIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKCB0bXBbMV0gKSArIHRtcFsyXTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3R5bGVWYWw7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAgZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShzdGFydE5vZGUsIHN0eWxlKTtcclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6IGZ1bmN0aW9uIChjbWROYW1lKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIW5lZWRDbWRbY21kTmFtZV0pXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdmFsID0gdGhpcy5xdWVyeUNvbW1hbmRWYWx1ZShjbWROYW1lKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjbWROYW1lID09ICdmb250Ym9yZGVyJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAvMXB4Ly50ZXN0KHZhbCkgJiYgL3NvbGlkLy50ZXN0KHZhbClcclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICBjbWROYW1lID09ICd1bmRlcmxpbmUnID8gL3VuZGVybGluZS8udGVzdCh2YWwpIDogL2xpbmVcXC10aHJvdWdoLy50ZXN0KHZhbCk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9KShwLCBmb250c1twXSk7XHJcblx0ICAgIH1cclxuXHR9O1xyXG5cclxuXHQvLyBwbHVnaW5zL2xpbmsuanNcclxuXHQvKipcclxuXHQgKiDotoXpk77mjqVcclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIOaPkuWFpei2hemTvuaOpVxyXG5cdCAqIEBjb21tYW5kIGxpbmtcclxuXHQgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAqIEBwYXJhbSB7IE9iamVjdCB9IG9wdGlvbnMgICDorr7nva7oh6rlrprkuYnlsZ7mgKfvvIzkvovlpoLvvJp1cmzjgIF0aXRsZeOAgXRhcmdldFxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogYGBgamF2YXNjcmlwdFxyXG5cdCAqIGVkaXRvci5leGVjQ29tbWFuZCggJ2xpbmsnLCAne1xyXG5cdCAqICAgICB1cmw6J3VlZGl0b3IuYmFpZHUuY29tJyxcclxuXHQgKiAgICAgdGl0bGU6J3VlZGl0b3InLFxyXG5cdCAqICAgICB0YXJnZXQ6J19ibGFuaydcclxuXHQgKiB9JyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cdC8qKlxyXG5cdCAqIOi/lOWbnuW9k+WJjemAieS4reeahOesrOS4gOS4qui2hemTvuaOpeiKgueCuVxyXG5cdCAqIEBjb21tYW5kIGxpbmtcclxuXHQgKiBAbWV0aG9kIHF1ZXJ5Q29tbWFuZFZhbHVlXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAqIEByZXR1cm4geyBFbGVtZW50IH0g6LaF6ZO+5o6l6IqC54K5XHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCAnbGluaycgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog5Y+W5raI6LaF6ZO+5o6lXHJcblx0ICogQGNvbW1hbmQgdW5saW5rXHJcblx0ICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICd1bmxpbmsnKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0VUUucGx1Z2luc1snbGluayddID0gZnVuY3Rpb24oKXtcclxuXHQgICAgZnVuY3Rpb24gb3B0aW1pemUoIHJhbmdlICkge1xyXG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gcmFuZ2Uuc3RhcnRDb250YWluZXIsZW5kID0gcmFuZ2UuZW5kQ29udGFpbmVyO1xyXG5cclxuXHQgICAgICAgIGlmICggc3RhcnQgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKCBzdGFydCwgJ2EnLCB0cnVlICkgKSB7XHJcblx0ICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRCZWZvcmUoIHN0YXJ0ICk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoIGVuZCA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUoIGVuZCwgJ2EnLCB0cnVlICkgKSB7XHJcblx0ICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kQWZ0ZXIoIGVuZCApO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cclxuXHQgICAgVUUuY29tbWFuZHNbJ3VubGluayddID0ge1xyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQgOiBmdW5jdGlvbigpIHtcclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICBib29rbWFyaztcclxuXHQgICAgICAgICAgICBpZihyYW5nZS5jb2xsYXBzZWQgJiYgIWRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUoIHJhbmdlLnN0YXJ0Q29udGFpbmVyLCAnYScsIHRydWUgKSl7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgYm9va21hcmsgPSByYW5nZS5jcmVhdGVCb29rbWFyaygpO1xyXG5cdCAgICAgICAgICAgIG9wdGltaXplKCByYW5nZSApO1xyXG5cdCAgICAgICAgICAgIHJhbmdlLnJlbW92ZUlubGluZVN0eWxlKCAnYScgKS5tb3ZlVG9Cb29rbWFyayggYm9va21hcmsgKS5zZWxlY3QoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZSA6IGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuICF0aGlzLmhpZ2hsaWdodCAmJiB0aGlzLnF1ZXJ5Q29tbWFuZFZhbHVlKCdsaW5rJykgPyAgMCA6IC0xO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgfTtcclxuXHQgICAgZnVuY3Rpb24gZG9MaW5rKHJhbmdlLG9wdCxtZSl7XHJcblx0ICAgICAgICB2YXIgcm5nQ2xvbmUgPSByYW5nZS5jbG9uZVJhbmdlKCksXHJcblx0ICAgICAgICAgICAgbGluayA9IG1lLnF1ZXJ5Q29tbWFuZFZhbHVlKCdsaW5rJyk7XHJcblx0ICAgICAgICBvcHRpbWl6ZSggcmFuZ2UgPSByYW5nZS5hZGp1c3RtZW50Qm91bmRhcnkoKSApO1xyXG5cdCAgICAgICAgdmFyIHN0YXJ0ID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcblx0ICAgICAgICBpZihzdGFydC5ub2RlVHlwZSA9PSAxICYmIGxpbmspe1xyXG5cdCAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF07XHJcblx0ICAgICAgICAgICAgaWYoc3RhcnQgJiYgc3RhcnQubm9kZVR5cGUgPT0gMSAmJiBzdGFydC50YWdOYW1lID09ICdBJyAmJiAvXig/Omh0dHBzP3xmdHB8ZmlsZSlcXHMqOlxccypcXC9cXC8vLnRlc3Qoc3RhcnRbYnJvd3Nlci5pZT8naW5uZXJUZXh0JzondGV4dENvbnRlbnQnXSkpe1xyXG5cdCAgICAgICAgICAgICAgICBzdGFydFticm93c2VyLmllID8gJ2lubmVyVGV4dCcgOiAndGV4dENvbnRlbnQnXSA9ICB1dGlscy5odG1sKG9wdC50ZXh0VmFsdWV8fG9wdC5ocmVmKTtcclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYoICFybmdDbG9uZS5jb2xsYXBzZWQgfHwgbGluayl7XHJcblx0ICAgICAgICAgICAgcmFuZ2UucmVtb3ZlSW5saW5lU3R5bGUoICdhJyApO1xyXG5cdCAgICAgICAgICAgIHJuZ0Nsb25lID0gcmFuZ2UuY2xvbmVSYW5nZSgpO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIGlmICggcm5nQ2xvbmUuY29sbGFwc2VkICkge1xyXG5cdCAgICAgICAgICAgIHZhciBhID0gcmFuZ2UuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2EnKSxcclxuXHQgICAgICAgICAgICAgICAgdGV4dCA9ICcnO1xyXG5cdCAgICAgICAgICAgIGlmKG9wdC50ZXh0VmFsdWUpe1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdGV4dCA9ICAgdXRpbHMuaHRtbChvcHQudGV4dFZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgZGVsZXRlIG9wdC50ZXh0VmFsdWU7XHJcblx0ICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgIHRleHQgPSAgIHV0aWxzLmh0bWwob3B0LmhyZWYpO1xyXG5cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMuc2V0QXR0cmlidXRlcyggYSwgb3B0ICk7XHJcblx0ICAgICAgICAgICAgc3RhcnQgPSAgZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZSggcm5nQ2xvbmUuc3RhcnRDb250YWluZXIsICdhJywgdHJ1ZSApO1xyXG5cdCAgICAgICAgICAgIGlmKHN0YXJ0ICYmIGRvbVV0aWxzLmlzSW5Ob2RlRW5kQm91bmRhcnkocm5nQ2xvbmUsc3RhcnQpKXtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRBZnRlcihzdGFydCkuY29sbGFwc2UodHJ1ZSk7XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBhW2Jyb3dzZXIuaWUgPyAnaW5uZXJUZXh0JyA6ICd0ZXh0Q29udGVudCddID0gdGV4dDtcclxuXHQgICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKGEpLnNlbGVjdE5vZGUoIGEgKTtcclxuXHQgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgcmFuZ2UuYXBwbHlJbmxpbmVTdHlsZSggJ2EnLCBvcHQgKTtcclxuXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHQgICAgVUUuY29tbWFuZHNbJ2xpbmsnXSA9IHtcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kIDogZnVuY3Rpb24oIGNtZE5hbWUsIG9wdCApIHtcclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2U7XHJcblx0ICAgICAgICAgICAgb3B0Ll9ocmVmICYmIChvcHQuX2hyZWYgPSB1dGlscy51bmh0bWwob3B0Ll9ocmVmLC9bPFwiPl0vZykpO1xyXG5cdCAgICAgICAgICAgIG9wdC5ocmVmICYmIChvcHQuaHJlZiA9IHV0aWxzLnVuaHRtbChvcHQuaHJlZiwvWzxcIj5dL2cpKTtcclxuXHQgICAgICAgICAgICBvcHQudGV4dFZhbHVlICYmIChvcHQudGV4dFZhbHVlID0gdXRpbHMudW5odG1sKG9wdC50ZXh0VmFsdWUsL1s8XCI+XS9nKSk7XHJcblx0ICAgICAgICAgICAgZG9MaW5rKHJhbmdlPXRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCksb3B0LHRoaXMpO1xyXG5cdCAgICAgICAgICAgIC8v6Zet5ZCI6YO95LiN5Yqg5Y2g5L2N56ym77yM5aaC5p6c5Yqg5LqG5Lya5ZyoYeWQjui+ueWkmuS4quWNoOS9jeespuiKgueCue+8jOWvvOiHtGHmmK/lm77niYfog4zmma/nu4TmiJDnmoTliJfooajvvIzlh7rnjrDnqbrnmb3pl67pophcclxuXHQgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSgpLnNlbGVjdCh0cnVlKTtcclxuXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kVmFsdWUgOiBmdW5jdGlvbigpIHtcclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICBub2RlO1xyXG5cdCAgICAgICAgICAgIGlmICggcmFuZ2UuY29sbGFwc2VkICkge1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICBub2RlID0gdGhpcy5zZWxlY3Rpb24uZ2V0U3RhcnQoKTtcclxuXHQgICAgICAgICAgICAgICAgLy/lnKhpZeS4i2dldHN0YXJ0KCnlj5blgLzlgY/kuIrkuoZcclxuXHQgICAgICAgICAgICAgICAgbm9kZSA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG5cdCAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5ub2RlVHlwZSA9PSAxID8gbm9kZSA6IG5vZGUucGFyZW50Tm9kZTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmICggbm9kZSAmJiAobm9kZSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUoIG5vZGUsICdhJywgdHJ1ZSApKSAmJiAhIGRvbVV0aWxzLmlzSW5Ob2RlRW5kQm91bmRhcnkocmFuZ2Usbm9kZSkpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIC8vdHJhY2U6MTExMSAg5aaC5p6c5pivPHA+PGE+eHg8L2E+PC9wPiBzdGFydENvbnRhaW5lcuaYr3DlsLHkvJrmib7kuI3liLBhXHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLnNocmlua0JvdW5kYXJ5KCk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyLm5vZGVUeXBlICA9PSAzIHx8ICFyYW5nZS5zdGFydENvbnRhaW5lci5jaGlsZE5vZGVzW3JhbmdlLnN0YXJ0T2Zmc2V0XSA/IHJhbmdlLnN0YXJ0Q29udGFpbmVyIDogcmFuZ2Uuc3RhcnRDb250YWluZXIuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF0sXHJcblx0ICAgICAgICAgICAgICAgICAgICBlbmQgPSAgcmFuZ2UuZW5kQ29udGFpbmVyLm5vZGVUeXBlID09IDMgfHwgcmFuZ2UuZW5kT2Zmc2V0ID09IDAgPyByYW5nZS5lbmRDb250YWluZXIgOiByYW5nZS5lbmRDb250YWluZXIuY2hpbGROb2Rlc1tyYW5nZS5lbmRPZmZzZXQtMV0sXHJcblx0ICAgICAgICAgICAgICAgICAgICBjb21tb24gPSByYW5nZS5nZXRDb21tb25BbmNlc3RvcigpO1xyXG5cdCAgICAgICAgICAgICAgICBub2RlID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZSggY29tbW9uLCAnYScsIHRydWUgKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCAhbm9kZSAmJiBjb21tb24ubm9kZVR5cGUgPT0gMSl7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGFzID0gY29tbW9uLmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnYScgKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcyxwZTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsY2k7IGNpID0gYXNbaSsrXTsgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcHMgPSBkb21VdGlscy5nZXRQb3NpdGlvbiggY2ksIHN0YXJ0ICkscGUgPSBkb21VdGlscy5nZXRQb3NpdGlvbiggY2ksZW5kKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIChwcyAmIGRvbVV0aWxzLlBPU0lUSU9OX0ZPTExPV0lORyB8fCBwcyAmIGRvbVV0aWxzLlBPU0lUSU9OX0NPTlRBSU5TKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAocGUgJiBkb21VdGlscy5QT1NJVElPTl9QUkVDRURJTkcgfHwgcGUgJiBkb21VdGlscy5QT1NJVElPTl9DT05UQUlOUylcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBjaTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGUgOiBmdW5jdGlvbigpIHtcclxuXHQgICAgICAgICAgICAvL+WIpOaWreWmguaenOaYr+inhumikeeahOivnei/nuaOpeS4jeWPr+eUqFxyXG5cdCAgICAgICAgICAgIC8vZml4IDg1M1xyXG5cdCAgICAgICAgICAgIHZhciBpbWcgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLmdldENsb3NlZE5vZGUoKSxcclxuXHQgICAgICAgICAgICAgICAgZmxhZyA9IGltZyAmJiAoaW1nLmNsYXNzTmFtZSA9PSBcImVkdWktZmFrZWQtdmlkZW9cIiB8fCBpbWcuY2xhc3NOYW1lLmluZGV4T2YoXCJlZHVpLXVwbG9hZC12aWRlb1wiKSE9LTEpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiBmbGFnID8gLTEgOiAwO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdH07XHJcblxyXG5cdC8vIHBsdWdpbnMvaWZyYW1lLmpzXHJcblx0Ly8vaW1wb3J0IGNvcmVcclxuXHQvLy9pbXBvcnQgcGx1Z2luc1xcaW5zZXJ0aHRtbC5qc1xyXG5cdC8vL2NvbW1hbmRzIOaPkuWFpeahhuaetlxyXG5cdC8vL2NvbW1hbmRzTmFtZSAgSW5zZXJ0RnJhbWVcclxuXHQvLy9jb21tYW5kc1RpdGxlICDmj5LlhaVJZnJhbWVcclxuXHQvLy9jb21tYW5kc0RpYWxvZyAgZGlhbG9nc1xcaW5zZXJ0ZnJhbWVcclxuXHJcblx0VUUucGx1Z2luc1snaW5zZXJ0ZnJhbWUnXSA9IGZ1bmN0aW9uKCkge1xyXG5cdCAgIHZhciBtZSA9dGhpcztcclxuXHQgICAgZnVuY3Rpb24gZGVsZXRlSWZyYW1lKCl7XHJcblx0ICAgICAgICBtZS5faWZyYW1lICYmIGRlbGV0ZSBtZS5faWZyYW1lO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcihcInNlbGVjdGlvbmNoYW5nZVwiLGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICBkZWxldGVJZnJhbWUoKTtcclxuXHQgICAgfSk7XHJcblxyXG5cdH07XHJcblxyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9zY3Jhd2wuanNcclxuXHQvLy9pbXBvcnQgY29yZVxyXG5cdC8vL2NvbW1hbmRzIOa2gum4plxyXG5cdC8vL2NvbW1hbmRzTmFtZSAgU2NyYXdsXHJcblx0Ly8vY29tbWFuZHNUaXRsZSAg5raC6bimXHJcblx0Ly8vY29tbWFuZHNEaWFsb2cgIGRpYWxvZ3NcXHNjcmF3bFxyXG5cdFVFLmNvbW1hbmRzWydzY3Jhd2wnXSA9IHtcclxuXHQgICAgcXVlcnlDb21tYW5kU3RhdGUgOiBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgcmV0dXJuICggYnJvd3Nlci5pZSAmJiBicm93c2VyLnZlcnNpb24gIDw9IDggKSA/IC0xIDowO1xyXG5cdCAgICB9XHJcblx0fTtcclxuXHJcblxyXG5cdC8vIHBsdWdpbnMvcmVtb3ZlZm9ybWF0LmpzXHJcblx0LyoqXHJcblx0ICog5riF6Zmk5qC85byPXHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDmuIXpmaTmloflrZfmoLflvI9cclxuXHQgKiBAY29tbWFuZCByZW1vdmVmb3JtYXRcclxuXHQgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgdGFncyAgICAg5Lul6YCX5Y+36ZqU5byA55qE5qCH562+44CC5aaC77yac3Ryb25nXHJcblx0ICogQHBhcmFtICAge1N0cmluZ30gICBzdHlsZSAgICDmoLflvI/lpoLvvJpjb2xvclxyXG5cdCAqIEBwYXJhbSAgIHtTdHJpbmd9ICAgYXR0cnMgICAg5bGe5oCn5aaCOndpZHRoXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAncmVtb3ZlZm9ybWF0JywgJ3N0cm9uZycsJ2NvbG9yJywnd2lkdGgnICk7XHJcblx0ICogYGBgXHJcblx0ICovXHJcblxyXG5cdFVFLnBsdWdpbnNbJ3JlbW92ZWZvcm1hdCddID0gZnVuY3Rpb24oKXtcclxuXHQgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgbWUuc2V0T3B0KHtcclxuXHQgICAgICAgJ3JlbW92ZUZvcm1hdFRhZ3MnOiAnYixiaWcsY29kZSxkZWwsZGZuLGVtLGZvbnQsaSxpbnMsa2JkLHEsc2FtcCxzbWFsbCxzcGFuLHN0cmlrZSxzdHJvbmcsc3ViLHN1cCx0dCx1LHZhcicsXHJcblx0ICAgICAgICdyZW1vdmVGb3JtYXRBdHRyaWJ1dGVzJzonY2xhc3Msc3R5bGUsbGFuZyx3aWR0aCxoZWlnaHQsYWxpZ24saHNwYWNlLHZhbGlnbidcclxuXHQgICAgfSk7XHJcblx0ICAgIG1lLmNvbW1hbmRzWydyZW1vdmVmb3JtYXQnXSA9IHtcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kIDogZnVuY3Rpb24oIGNtZE5hbWUsIHRhZ3MsIHN0eWxlLCBhdHRycyxub3RJbmNsdWRlQSApIHtcclxuXHJcblx0ICAgICAgICAgICAgdmFyIHRhZ1JlZyA9IG5ldyBSZWdFeHAoICdeKD86JyArICh0YWdzIHx8IHRoaXMub3B0aW9ucy5yZW1vdmVGb3JtYXRUYWdzKS5yZXBsYWNlKCAvLC9nLCAnfCcgKSArICcpJCcsICdpJyApICxcclxuXHQgICAgICAgICAgICAgICAgcmVtb3ZlRm9ybWF0QXR0cmlidXRlcyA9IHN0eWxlID8gW10gOiAoYXR0cnMgfHwgdGhpcy5vcHRpb25zLnJlbW92ZUZvcm1hdEF0dHJpYnV0ZXMpLnNwbGl0KCAnLCcgKSxcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UgPSBuZXcgZG9tLlJhbmdlKCB0aGlzLmRvY3VtZW50ICksXHJcblx0ICAgICAgICAgICAgICAgIGJvb2ttYXJrLG5vZGUscGFyZW50LFxyXG5cdCAgICAgICAgICAgICAgICBmaWx0ZXIgPSBmdW5jdGlvbiggbm9kZSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09IDE7XHJcblx0ICAgICAgICAgICAgICAgIH07XHJcblxyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGlzUmVkdW5kYW50U3BhbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAzIHx8IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9ICdzcGFuJyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoYnJvd3Nlci5pZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy9pZSDkuIvliKTmlq3lrp7mlYjvvIzmiYDku6Xlj6rog73nroDljZXnlKhzdHlsZeadpeWIpOaWrVxyXG5cdCAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gbm9kZS5zdHlsZS5jc3NUZXh0ID09ICcnID8gMSA6IDA7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgYXR0cnMgPSBub2RlLmF0dHJpYnV0ZXM7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIGF0dHJzLmxlbmd0aCApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsbCA9IGF0dHJzLmxlbmd0aDsgaTxsOyBpKysgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggYXR0cnNbaV0uc3BlY2lmaWVkICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuICFub2RlLmF0dHJpYnV0ZXMubGVuZ3RoO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBmdW5jdGlvbiBkb1JlbW92ZSggcmFuZ2UgKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB2YXIgYm9va21hcmsxID0gcmFuZ2UuY3JlYXRlQm9va21hcmsoKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCByYW5nZS5jb2xsYXBzZWQgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5lbmxhcmdlKCB0cnVlICk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIC8v5LiN6IO95oqKYeagh+etvuWIh+S6hlxyXG5cdCAgICAgICAgICAgICAgICBpZighbm90SW5jbHVkZUEpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGFOb2RlID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShyYW5nZS5zdGFydENvbnRhaW5lciwnYScsdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihhTm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRCZWZvcmUoYU5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGFOb2RlID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShyYW5nZS5lbmRDb250YWluZXIsJ2EnLHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoYU5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZEFmdGVyKGFOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICBib29rbWFyayA9IHJhbmdlLmNyZWF0ZUJvb2ttYXJrKCk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBub2RlID0gYm9va21hcmsuc3RhcnQ7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAvL+WIh+W8gOWni1xyXG5cdCAgICAgICAgICAgICAgICB3aGlsZSAoIChwYXJlbnQgPSBub2RlLnBhcmVudE5vZGUpICYmICFkb21VdGlscy5pc0Jsb2NrRWxtKCBwYXJlbnQgKSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmJyZWFrUGFyZW50KCBub2RlLCBwYXJlbnQgKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5jbGVhckVtcHR5U2libGluZyggbm9kZSApO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmICggYm9va21hcmsuZW5kICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/liIfnu5PmnZ9cclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBib29rbWFyay5lbmQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIChwYXJlbnQgPSBub2RlLnBhcmVudE5vZGUpICYmICFkb21VdGlscy5pc0Jsb2NrRWxtKCBwYXJlbnQgKSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5icmVha1BhcmVudCggbm9kZSwgcGFyZW50ICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuY2xlYXJFbXB0eVNpYmxpbmcoIG5vZGUgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+W8gOWni+WOu+mZpOagt+W8j1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZSggYm9va21hcmsuc3RhcnQsIGZhbHNlLCBmaWx0ZXIgKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBuZXh0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCBjdXJyZW50ICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICggY3VycmVudCA9PSBib29rbWFyay5lbmQgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IGRvbVV0aWxzLmdldE5leHREb21Ob2RlKCBjdXJyZW50LCB0cnVlLCBmaWx0ZXIgKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhZHRkLiRlbXB0eVtjdXJyZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKV0gJiYgIWRvbVV0aWxzLmlzQm9va21hcmtOb2RlKCBjdXJyZW50ICkgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggdGFnUmVnLnRlc3QoIGN1cnJlbnQudGFnTmFtZSApICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBzdHlsZSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmVTdHlsZSggY3VycmVudCwgc3R5bGUgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGlzUmVkdW5kYW50U3BhbiggY3VycmVudCApICYmIHN0eWxlICE9ICd0ZXh0LWRlY29yYXRpb24nKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKCBjdXJyZW50LCB0cnVlICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoIGN1cnJlbnQsIHRydWUgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJhY2U6OTM5ICDkuI3og73miopsaXN05LiK55qE5qC35byP5Y675o6JXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighZHRkLiR0YWJsZUNvbnRlbnRbY3VycmVudC50YWdOYW1lXSAmJiAhZHRkLiRsaXN0W2N1cnJlbnQudGFnTmFtZV0pe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZUF0dHJpYnV0ZXMoIGN1cnJlbnQsIHJlbW92ZUZvcm1hdEF0dHJpYnV0ZXMgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGlzUmVkdW5kYW50U3BhbiggY3VycmVudCApICl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSggY3VycmVudCwgdHJ1ZSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IG5leHQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgLy90cmFjZToxMDM1XHJcblx0ICAgICAgICAgICAgICAgIC8vdHJhY2U6MTA5NiDkuI3og73miop0ZOS4iueahOagt+W8j+WOu+aOie+8jOavlOWmgui+ueahhlxyXG5cdCAgICAgICAgICAgICAgICB2YXIgcE4gPSBib29rbWFyay5zdGFydC5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICBpZihkb21VdGlscy5pc0Jsb2NrRWxtKHBOKSAmJiAhZHRkLiR0YWJsZUNvbnRlbnRbcE4udGFnTmFtZV0gJiYgIWR0ZC4kbGlzdFtwTi50YWdOYW1lXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmVBdHRyaWJ1dGVzKCAgcE4scmVtb3ZlRm9ybWF0QXR0cmlidXRlcyApO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHBOID0gYm9va21hcmsuZW5kLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgIGlmKGJvb2ttYXJrLmVuZCAmJiBkb21VdGlscy5pc0Jsb2NrRWxtKHBOKSAmJiAhZHRkLiR0YWJsZUNvbnRlbnRbcE4udGFnTmFtZV0mJiAhZHRkLiRsaXN0W3BOLnRhZ05hbWVdKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZUF0dHJpYnV0ZXMoICBwTixyZW1vdmVGb3JtYXRBdHRyaWJ1dGVzICk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UubW92ZVRvQm9va21hcmsoIGJvb2ttYXJrICkubW92ZVRvQm9va21hcmsoYm9va21hcmsxKTtcclxuXHQgICAgICAgICAgICAgICAgLy/muIXpmaTlhpfkvZnnmoTku6PnoIEgPGI+PGJvb2ttYXJrPjwvYj5cclxuXHQgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSByYW5nZS5zdGFydENvbnRhaW5lcixcclxuXHQgICAgICAgICAgICAgICAgICAgIHRtcCxcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlZCA9IHJhbmdlLmNvbGxhcHNlZDtcclxuXHQgICAgICAgICAgICAgICAgd2hpbGUobm9kZS5ub2RlVHlwZSA9PSAxICYmIGRvbVV0aWxzLmlzRW1wdHlOb2RlKG5vZGUpICYmIGR0ZC4kcmVtb3ZlRW1wdHlbbm9kZS50YWdOYW1lXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0bXAgPSBub2RlLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZShub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8vdHJhY2U6OTM3XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+abtOaWsOe7k+adn+i+ueeVjFxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYocmFuZ2Uuc3RhcnRDb250YWluZXIgPT09IHJhbmdlLmVuZENvbnRhaW5lcil7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuZW5kT2Zmc2V0LS07XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBub2RlID0gdG1wO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZighY29sbGFwc2VkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUgPSByYW5nZS5lbmRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZShub2RlLm5vZGVUeXBlID09IDEgJiYgZG9tVXRpbHMuaXNFbXB0eU5vZGUobm9kZSkgJiYgZHRkLiRyZW1vdmVFbXB0eVtub2RlLnRhZ05hbWVdKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSBub2RlLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kQmVmb3JlKG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShub2RlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHRtcDtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cdCAgICAgICAgICAgIHJhbmdlID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICBkb1JlbW92ZSggcmFuZ2UgKTtcclxuXHQgICAgICAgICAgICByYW5nZS5zZWxlY3QoKTtcclxuXHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9O1xyXG5cclxuXHR9O1xyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9ibG9ja3F1b3RlLmpzXHJcblx0LyoqXHJcblx0ICog5re75Yqg5byV55SoXHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDmt7vliqDlvJXnlKhcclxuXHQgKiBAY29tbWFuZCBibG9ja3F1b3RlXHJcblx0ICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdibG9ja3F1b3RlJyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDmt7vliqDlvJXnlKhcclxuXHQgKiBAY29tbWFuZCBibG9ja3F1b3RlXHJcblx0ICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAcGFyYW0geyBPYmplY3QgfSBhdHRycyDoioLngrnlsZ7mgKdcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdibG9ja3F1b3RlJyx7XHJcblx0ICogICAgIHN0eWxlOiBcImNvbG9yOiByZWQ7XCJcclxuXHQgKiB9ICk7XHJcblx0ICogYGBgXHJcblx0ICovXHJcblxyXG5cclxuXHRVRS5wbHVnaW5zWydibG9ja3F1b3RlJ10gPSBmdW5jdGlvbigpe1xyXG5cdCAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICBmdW5jdGlvbiBnZXRPYmooZWRpdG9yKXtcclxuXHQgICAgICAgIHJldHVybiBkb21VdGlscy5maWx0ZXJOb2RlTGlzdChlZGl0b3Iuc2VsZWN0aW9uLmdldFN0YXJ0RWxlbWVudFBhdGgoKSwnYmxvY2txdW90ZScpO1xyXG5cdCAgICB9XHJcblx0ICAgIG1lLmNvbW1hbmRzWydibG9ja3F1b3RlJ10gPSB7XHJcblx0ICAgICAgICBleGVjQ29tbWFuZCA6IGZ1bmN0aW9uKCBjbWROYW1lLCBhdHRycyApIHtcclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICBvYmogPSBnZXRPYmoodGhpcyksXHJcblx0ICAgICAgICAgICAgICAgIGJsb2NrcXVvdGUgPSBkdGQuYmxvY2txdW90ZSxcclxuXHQgICAgICAgICAgICAgICAgYm9va21hcmsgPSByYW5nZS5jcmVhdGVCb29rbWFyaygpO1xyXG5cclxuXHQgICAgICAgICAgICBpZiAoIG9iaiApIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSByYW5nZS5zdGFydENvbnRhaW5lcixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFydEJsb2NrID0gZG9tVXRpbHMuaXNCbG9ja0VsbShzdGFydCkgPyBzdGFydCA6IGRvbVV0aWxzLmZpbmRQYXJlbnQoc3RhcnQsZnVuY3Rpb24obm9kZSl7cmV0dXJuIGRvbVV0aWxzLmlzQmxvY2tFbG0obm9kZSl9KSxcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gcmFuZ2UuZW5kQ29udGFpbmVyLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuZEJsb2NrID0gZG9tVXRpbHMuaXNCbG9ja0VsbShlbmQpID8gZW5kIDogIGRvbVV0aWxzLmZpbmRQYXJlbnQoZW5kLGZ1bmN0aW9uKG5vZGUpe3JldHVybiBkb21VdGlscy5pc0Jsb2NrRWxtKG5vZGUpfSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/lpITnkIbkuIDkuItsaVxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhcnRCbG9jayA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUoc3RhcnRCbG9jaywnbGknLHRydWUpIHx8IHN0YXJ0QmxvY2s7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbmRCbG9jayA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUoZW5kQmxvY2ssJ2xpJyx0cnVlKSB8fCBlbmRCbG9jaztcclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoc3RhcnRCbG9jay50YWdOYW1lID09ICdMSScgfHwgc3RhcnRCbG9jay50YWdOYW1lID09ICdURCcgfHwgc3RhcnRCbG9jayA9PT0gb2JqIHx8IGRvbVV0aWxzLmlzQm9keShzdGFydEJsb2NrKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKG9iaix0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmJyZWFrUGFyZW50KHN0YXJ0QmxvY2ssb2JqKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihzdGFydEJsb2NrICE9PSBlbmRCbG9jayl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShlbmRCbG9jaywnYmxvY2txdW90ZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKG9iail7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVuZEJsb2NrLnRhZ05hbWUgPT0gJ0xJJyB8fCBlbmRCbG9jay50YWdOYW1lID09ICdURCd8fCBkb21VdGlscy5pc0JvZHkoZW5kQmxvY2spKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5wYXJlbnROb2RlICYmIGRvbVV0aWxzLnJlbW92ZShvYmosdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuYnJlYWtQYXJlbnQoZW5kQmxvY2ssb2JqKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGJsb2NrcXVvdGVzID0gZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGhpcy5kb2N1bWVudCwnYmxvY2txdW90ZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpPTAsYmk7Ymk9YmxvY2txdW90ZXNbaSsrXTspe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFiaS5jaGlsZE5vZGVzLmxlbmd0aCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShiaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoZG9tVXRpbHMuZ2V0UG9zaXRpb24oYmksc3RhcnRCbG9jaykmZG9tVXRpbHMuUE9TSVRJT05fRk9MTE9XSU5HICYmIGRvbVV0aWxzLmdldFBvc2l0aW9uKGJpLGVuZEJsb2NrKSZkb21VdGlscy5QT1NJVElPTl9QUkVDRURJTkcpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoYmksdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdmFyIHRtcFJhbmdlID0gcmFuZ2UuY2xvbmVSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHRtcFJhbmdlLnN0YXJ0Q29udGFpbmVyLm5vZGVUeXBlID09IDEgPyB0bXBSYW5nZS5zdGFydENvbnRhaW5lciA6IHRtcFJhbmdlLnN0YXJ0Q29udGFpbmVyLnBhcmVudE5vZGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICBwcmVOb2RlID0gbm9kZSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvRW5kID0gMTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIC8v6LCD5pW05byA5aeLXHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlICggMSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICggZG9tVXRpbHMuaXNCb2R5KG5vZGUpICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICggcHJlTm9kZSAhPT0gbm9kZSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCByYW5nZS5jb2xsYXBzZWQgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBSYW5nZS5zZWxlY3ROb2RlKCBwcmVOb2RlICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb0VuZCA9IDA7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBSYW5nZS5zZXRTdGFydEJlZm9yZSggcHJlTm9kZSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFJhbmdlLnNldFN0YXJ0KG5vZGUsMCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICggIWJsb2NrcXVvdGVbbm9kZS50YWdOYW1lXSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHJhbmdlLmNvbGxhcHNlZCApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wUmFuZ2Uuc2VsZWN0Tm9kZSggcHJlTm9kZSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wUmFuZ2Uuc2V0U3RhcnRCZWZvcmUoIHByZU5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBwcmVOb2RlID0gbm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIC8v6LCD5pW057uT5p2fXHJcblx0ICAgICAgICAgICAgICAgIGlmICggZG9FbmQgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBwcmVOb2RlID0gbm9kZSA9ICBub2RlID0gdG1wUmFuZ2UuZW5kQ29udGFpbmVyLm5vZGVUeXBlID09IDEgPyB0bXBSYW5nZS5lbmRDb250YWluZXIgOiB0bXBSYW5nZS5lbmRDb250YWluZXIucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHdoaWxlICggMSApIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBkb21VdGlscy5pc0JvZHkoIG5vZGUgKSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBwcmVOb2RlICE9PSBub2RlICkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFJhbmdlLnNldEVuZEFmdGVyKCBwcmVOb2RlICk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wUmFuZ2Uuc2V0RW5kKCBub2RlLCBub2RlLmNoaWxkTm9kZXMubGVuZ3RoICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICFibG9ja3F1b3RlW25vZGUudGFnTmFtZV0gKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFJhbmdlLnNldEVuZEFmdGVyKCBwcmVOb2RlICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcHJlTm9kZSA9IG5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICBub2RlID0gcmFuZ2UuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2Jsb2NrcXVvdGUnICk7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnNldEF0dHJpYnV0ZXMoIG5vZGUsIGF0dHJzICk7XHJcblx0ICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoIHRtcFJhbmdlLmV4dHJhY3RDb250ZW50cygpICk7XHJcblx0ICAgICAgICAgICAgICAgIHRtcFJhbmdlLmluc2VydE5vZGUoIG5vZGUgKTtcclxuXHQgICAgICAgICAgICAgICAgLy/ljrvpmaTph43lpI3nmoRcclxuXHQgICAgICAgICAgICAgICAgdmFyIGNoaWxkcyA9IGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKG5vZGUsJ2Jsb2NrcXVvdGUnKTtcclxuXHQgICAgICAgICAgICAgICAgZm9yKHZhciBpPTAsY2k7Y2k9Y2hpbGRzW2krK107KXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGNpLnBhcmVudE5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShjaSx0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmFuZ2UubW92ZVRvQm9va21hcmsoIGJvb2ttYXJrICkuc2VsZWN0KCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGUgOiBmdW5jdGlvbigpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gZ2V0T2JqKHRoaXMpID8gMSA6IDA7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0fTtcclxuXHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL2NvbnZlcnRjYXNlLmpzXHJcblx0LyoqXHJcblx0ICog5aSn5bCP5YaZ6L2s5o2iXHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDmiorpgInljLrlhoXmlofmnKzlj5jlpKflhpnvvIzkuI7igJx0b2xvd2VyY2FzZeKAneWRveS7pOS6kuaWpVxyXG5cdCAqIEBjb21tYW5kIHRvdXBwZXJjYXNlXHJcblx0ICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICd0b3VwcGVyY2FzZScgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog5oqK6YCJ5Yy65YaF5paH5pys5Y+Y5bCP5YaZ77yM5LiO4oCcdG91cHBlcmNhc2XigJ3lkb3ku6TkupLmlqVcclxuXHQgKiBAY29tbWFuZCB0b2xvd2VyY2FzZVxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAndG9sb3dlcmNhc2UnICk7XHJcblx0ICogYGBgXHJcblx0ICovXHJcblx0VUUuY29tbWFuZHNbJ3RvdXBwZXJjYXNlJ10gPVxyXG5cdFVFLmNvbW1hbmRzWyd0b2xvd2VyY2FzZSddID0ge1xyXG5cdCAgICBleGVjQ29tbWFuZDpmdW5jdGlvbiAoY21kKSB7XHJcblx0ICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgdmFyIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgaWYocm5nLmNvbGxhcHNlZCl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHJuZztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciBiayA9IHJuZy5jcmVhdGVCb29rbWFyaygpLFxyXG5cdCAgICAgICAgICAgIGJrRW5kID0gYmsuZW5kLFxyXG5cdCAgICAgICAgICAgIGZpbHRlckZuID0gZnVuY3Rpb24oIG5vZGUgKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAhZG9tVXRpbHMuaXNCcihub2RlKSAmJiAhZG9tVXRpbHMuaXNXaGl0ZXNwYWNlKCBub2RlICk7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBjdXJOb2RlID0gZG9tVXRpbHMuZ2V0TmV4dERvbU5vZGUoIGJrLnN0YXJ0LCBmYWxzZSwgZmlsdGVyRm4gKTtcclxuXHQgICAgICAgIHdoaWxlICggY3VyTm9kZSAmJiAoZG9tVXRpbHMuZ2V0UG9zaXRpb24oIGN1ck5vZGUsIGJrRW5kICkgJiBkb21VdGlscy5QT1NJVElPTl9QUkVDRURJTkcpICkge1xyXG5cclxuXHQgICAgICAgICAgICBpZiAoIGN1ck5vZGUubm9kZVR5cGUgPT0gMyApIHtcclxuXHQgICAgICAgICAgICAgICAgY3VyTm9kZS5ub2RlVmFsdWUgPSBjdXJOb2RlLm5vZGVWYWx1ZVtjbWQgPT0gJ3RvdXBwZXJjYXNlJyA/ICd0b1VwcGVyQ2FzZScgOiAndG9Mb3dlckNhc2UnXSgpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBjdXJOb2RlID0gZG9tVXRpbHMuZ2V0TmV4dERvbU5vZGUoIGN1ck5vZGUsIHRydWUsIGZpbHRlckZuICk7XHJcblx0ICAgICAgICAgICAgaWYoY3VyTm9kZSA9PT0gYmtFbmQpe1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcm5nLm1vdmVUb0Jvb2ttYXJrKGJrKS5zZWxlY3QoKTtcclxuXHQgICAgfVxyXG5cdH07XHJcblxyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9pbmRlbnQuanNcclxuXHQvKipcclxuXHQgKiDpppbooYznvKnov5tcclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIOe8qei/m1xyXG5cdCAqIEBjb21tYW5kIGluZGVudFxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnaW5kZW50JyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cdFVFLmNvbW1hbmRzWydpbmRlbnQnXSA9IHtcclxuXHQgICAgZXhlY0NvbW1hbmQgOiBmdW5jdGlvbigpIHtcclxuXHQgICAgICAgICB2YXIgbWUgPSB0aGlzLHZhbHVlID0gbWUucXVlcnlDb21tYW5kU3RhdGUoXCJpbmRlbnRcIikgPyBcIjBlbVwiIDogKG1lLm9wdGlvbnMuaW5kZW50VmFsdWUgfHwgJzJlbScpO1xyXG5cdCAgICAgICAgIG1lLmV4ZWNDb21tYW5kKCdQYXJhZ3JhcGgnLCdwJyx7c3R5bGU6J3RleHQtaW5kZW50OicrIHZhbHVlfSk7XHJcblx0ICAgIH0sXHJcblx0ICAgIHF1ZXJ5Q29tbWFuZFN0YXRlIDogZnVuY3Rpb24oKSB7XHJcblx0ICAgICAgICB2YXIgcE4gPSBkb21VdGlscy5maWx0ZXJOb2RlTGlzdCh0aGlzLnNlbGVjdGlvbi5nZXRTdGFydEVsZW1lbnRQYXRoKCksJ3AgaDEgaDIgaDMgaDQgaDUgaDYnKTtcclxuXHQgICAgICAgIHJldHVybiBwTiAmJiBwTi5zdHlsZS50ZXh0SW5kZW50ICYmIHBhcnNlSW50KHBOLnN0eWxlLnRleHRJbmRlbnQpID8gIDEgOiAwO1xyXG5cdCAgICB9XHJcblxyXG5cdH07XHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL3ByaW50LmpzXHJcblx0LyoqXHJcblx0ICog5omT5Y2wXHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDmiZPljbBcclxuXHQgKiBAY29tbWFuZCBwcmludFxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAncHJpbnQnICk7XHJcblx0ICogYGBgXHJcblx0ICovXHJcblx0VUUuY29tbWFuZHNbJ3ByaW50J10gPSB7XHJcblx0ICAgIGV4ZWNDb21tYW5kIDogZnVuY3Rpb24oKXtcclxuXHQgICAgICAgIHRoaXMud2luZG93LnByaW50KCk7XHJcblx0ICAgIH0sXHJcblx0ICAgIG5vdE5lZWRVbmRvIDogMVxyXG5cdH07XHJcblxyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9wcmV2aWV3LmpzXHJcblx0LyoqXHJcblx0ICog6aKE6KeIXHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDpooTop4hcclxuXHQgKiBAY29tbWFuZCBwcmV2aWV3XHJcblx0ICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdwcmV2aWV3JyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cdFVFLmNvbW1hbmRzWydwcmV2aWV3J10gPSB7XHJcblx0ICAgIGV4ZWNDb21tYW5kIDogZnVuY3Rpb24oKXtcclxuXHQgICAgICAgIHZhciB3ID0gd2luZG93Lm9wZW4oJycsICdfYmxhbmsnLCAnJyksXHJcblx0ICAgICAgICAgICAgZCA9IHcuZG9jdW1lbnQ7XHJcblx0ICAgICAgICBkLm9wZW4oKTtcclxuXHQgICAgICAgIGQud3JpdGUoJzwhRE9DVFlQRSBodG1sPjxodG1sPjxoZWFkPjxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiLz48c2NyaXB0IHNyYz1cIicrdGhpcy5vcHRpb25zLlVFRElUT1JfSE9NRV9VUkwrJ3VlZGl0b3IucGFyc2UuanNcIj48L3NjcmlwdD48c2NyaXB0PicgK1xyXG5cdCAgICAgICAgICAgIFwic2V0VGltZW91dChmdW5jdGlvbigpe3VQYXJzZSgnZGl2Jyx7cm9vdFBhdGg6ICdcIisgdGhpcy5vcHRpb25zLlVFRElUT1JfSE9NRV9VUkwgK1wiJ30pfSwzMDApXCIgK1xyXG5cdCAgICAgICAgICAgICc8L3NjcmlwdD48L2hlYWQ+PGJvZHk+PGRpdj4nK3RoaXMuZ2V0Q29udGVudChudWxsLG51bGwsdHJ1ZSkrJzwvZGl2PjwvYm9keT48L2h0bWw+Jyk7XHJcblx0ICAgICAgICBkLmNsb3NlKCk7XHJcblx0ICAgIH0sXHJcblx0ICAgIG5vdE5lZWRVbmRvIDogMVxyXG5cdH07XHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL3NlbGVjdGFsbC5qc1xyXG5cdC8qKlxyXG5cdCAqIOWFqOmAiVxyXG5cdCAqIEBmaWxlXHJcblx0ICogQHNpbmNlIDEuMi42LjFcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog6YCJ5Lit5omA5pyJ5YaF5a65XHJcblx0ICogQGNvbW1hbmQgc2VsZWN0YWxsXHJcblx0ICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdzZWxlY3RhbGwnICk7XHJcblx0ICogYGBgXHJcblx0ICovXHJcblx0VUUucGx1Z2luc1snc2VsZWN0YWxsJ10gPSBmdW5jdGlvbigpe1xyXG5cdCAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICBtZS5jb21tYW5kc1snc2VsZWN0YWxsJ10gPSB7XHJcblx0ICAgICAgICBleGVjQ29tbWFuZCA6IGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgLy/ljrvmjonkuobljp/nlJ/nmoRzZWxlY3RBbGws5Zug5Li65Lya5Ye6546w5oql6ZSZ5ZKM5b2T5YaF5a655Li656m65pe277yM5LiN6IO95Ye6546w6Zet5ZCI54q25oCB55qE5YWJ5qCHXHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxib2R5ID0gbWUuYm9keSxcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlQ29udGVudHMoYm9keSk7XHJcblx0ICAgICAgICAgICAgaWYoZG9tVXRpbHMuaXNFbXB0eUJsb2NrKGJvZHkpKXtcclxuXHQgICAgICAgICAgICAgICAgLy9vcGVyYeS4jeiDveiHquWKqOWQiOW5tuWIsOWFg+e0oOeahOmHjOi+ue+8jOimgeaJi+WKqOWkhOeQhuS4gOS4i1xyXG5cdCAgICAgICAgICAgICAgICBpZihicm93c2VyLm9wZXJhICYmIGJvZHkuZmlyc3RDaGlsZCAmJiBib2R5LmZpcnN0Q2hpbGQubm9kZVR5cGUgPT0gMSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEF0Rmlyc3QoYm9keS5maXJzdENoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSh0cnVlKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KHRydWUpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIG5vdE5lZWRVbmRvIDogMVxyXG5cdCAgICB9O1xyXG5cclxuXHJcblx0ICAgIC8v5b+r5o236ZSuXHJcblx0ICAgIG1lLmFkZHNob3J0Y3V0a2V5KHtcclxuXHQgICAgICAgICBcInNlbGVjdEFsbFwiIDogXCJjdHJsKzY1XCJcclxuXHQgICAgfSk7XHJcblx0fTtcclxuXHJcblxyXG5cdC8vIHBsdWdpbnMvcGFyYWdyYXBoLmpzXHJcblx0LyoqXHJcblx0ICog5q616JC95qC35byPXHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDmrrXokL3moLzlvI9cclxuXHQgKiBAY29tbWFuZCBwYXJhZ3JhcGhcclxuXHQgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSAgIHN0eWxlICAgICAgICAgICAgICAg5qCH562+5YC85Li677yaJ3AnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnXHJcblx0ICogQHBhcmFtIHtPYmplY3R9ICAgYXR0cnMgICAgICAgICAgICAgICDmoIfnrb7nmoTlsZ7mgKdcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdQYXJhZ3JhcGgnLCdoMScsJ3tcclxuXHQgKiAgICAgY2xhc3M6J3Rlc3QnXHJcblx0ICogfScgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog6L+U5Zue6YCJ5Yy65YaF6IqC54K55qCH562+5ZCNXHJcblx0ICogQGNvbW1hbmQgcGFyYWdyYXBoXHJcblx0ICogQG1ldGhvZCBxdWVyeUNvbW1hbmRWYWx1ZVxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAcmV0dXJuIHsgU3RyaW5nIH0g6IqC54K55qCH562+5ZCNXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCAnUGFyYWdyYXBoJyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHRVRS5wbHVnaW5zWydwYXJhZ3JhcGgnXSA9IGZ1bmN0aW9uKCkge1xyXG5cdCAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgYmxvY2sgPSBkb21VdGlscy5pc0Jsb2NrRWxtLFxyXG5cdCAgICAgICAgbm90RXhjaGFuZ2UgPSBbJ1REJywnTEknLCdQUkUnXSxcclxuXHJcblx0ICAgICAgICBkb1BhcmFncmFwaCA9IGZ1bmN0aW9uKHJhbmdlLHN0eWxlLGF0dHJzLHNvdXJjZUNtZE5hbWUpe1xyXG5cdCAgICAgICAgICAgIHZhciBib29rbWFyayA9IHJhbmdlLmNyZWF0ZUJvb2ttYXJrKCksXHJcblx0ICAgICAgICAgICAgICAgIGZpbHRlckZuID0gZnVuY3Rpb24oIG5vZGUgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gICBub2RlLm5vZGVUeXBlID09IDEgPyBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSAhPSAnYnInICYmICAhZG9tVXRpbHMuaXNCb29rbWFya05vZGUobm9kZSkgOiAhZG9tVXRpbHMuaXNXaGl0ZXNwYWNlKCBub2RlICk7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIHBhcmE7XHJcblxyXG5cdCAgICAgICAgICAgIHJhbmdlLmVubGFyZ2UoIHRydWUgKTtcclxuXHQgICAgICAgICAgICB2YXIgYm9va21hcmsyID0gcmFuZ2UuY3JlYXRlQm9va21hcmsoKSxcclxuXHQgICAgICAgICAgICAgICAgY3VycmVudCA9IGRvbVV0aWxzLmdldE5leHREb21Ob2RlKCBib29rbWFyazIuc3RhcnQsIGZhbHNlLCBmaWx0ZXJGbiApLFxyXG5cdCAgICAgICAgICAgICAgICB0bXBSYW5nZSA9IHJhbmdlLmNsb25lUmFuZ2UoKSxcclxuXHQgICAgICAgICAgICAgICAgdG1wTm9kZTtcclxuXHQgICAgICAgICAgICB3aGlsZSAoIGN1cnJlbnQgJiYgIShkb21VdGlscy5nZXRQb3NpdGlvbiggY3VycmVudCwgYm9va21hcmsyLmVuZCApICYgZG9tVXRpbHMuUE9TSVRJT05fRk9MTE9XSU5HKSApIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCBjdXJyZW50Lm5vZGVUeXBlID09IDMgfHwgIWJsb2NrKCBjdXJyZW50ICkgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0bXBSYW5nZS5zZXRTdGFydEJlZm9yZSggY3VycmVudCApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCBjdXJyZW50ICYmIGN1cnJlbnQgIT09IGJvb2ttYXJrMi5lbmQgJiYgIWJsb2NrKCBjdXJyZW50ICkgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdG1wTm9kZSA9IGN1cnJlbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGRvbVV0aWxzLmdldE5leHREb21Ob2RlKCBjdXJyZW50LCBmYWxzZSwgbnVsbCwgZnVuY3Rpb24oIG5vZGUgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhYmxvY2soIG5vZGUgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB0bXBSYW5nZS5zZXRFbmRBZnRlciggdG1wTm9kZSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgXHJcblx0ICAgICAgICAgICAgICAgICAgICBwYXJhID0gcmFuZ2UuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggc3R5bGUgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGF0dHJzKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5zZXRBdHRyaWJ1dGVzKHBhcmEsYXR0cnMpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNvdXJjZUNtZE5hbWUgJiYgc291cmNlQ21kTmFtZSA9PSAnY3VzdG9tc3R5bGUnICYmIGF0dHJzLnN0eWxlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYS5zdHlsZS5jc3NUZXh0ID0gYXR0cnMuc3R5bGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcGFyYS5hcHBlbmRDaGlsZCggdG1wUmFuZ2UuZXh0cmFjdENvbnRlbnRzKCkgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8v6ZyA6KaB5YaF5a655Y2g5L2NXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihkb21VdGlscy5pc0VtcHR5Tm9kZShwYXJhKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuZmlsbENoYXIocmFuZ2UuZG9jdW1lbnQscGFyYSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wUmFuZ2UuaW5zZXJ0Tm9kZSggcGFyYSApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBwYXJhLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+WmguaenHBhcmHkuIrkuIDnuqfmmK/kuIDkuKpibG9ja+WFg+e0oOS4lOS4jeaYr2JvZHksdGTlsLHliKDpmaTlroNcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICggYmxvY2soIHBhcmVudCApICYmICFkb21VdGlscy5pc0JvZHkoIHBhcmEucGFyZW50Tm9kZSApICYmIHV0aWxzLmluZGV4T2Yobm90RXhjaGFuZ2UscGFyZW50LnRhZ05hbWUpPT0tMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8v5a2Y5YKoZGlyLHN0eWxlXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoIShzb3VyY2VDbWROYW1lICYmIHNvdXJjZUNtZE5hbWUgPT0gJ2N1c3RvbXN0eWxlJykpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuZ2V0QXR0cmlidXRlKCdkaXInKSAmJiBwYXJhLnNldEF0dHJpYnV0ZSgnZGlyJyxwYXJlbnQuZ2V0QXR0cmlidXRlKCdkaXInKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdHJhY2U6MTA3MFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuc3R5bGUuY3NzVGV4dCAmJiAocGFyYS5zdHlsZS5jc3NUZXh0ID0gcGFyZW50LnN0eWxlLmNzc1RleHQgKyAnOycgKyBwYXJhLnN0eWxlLmNzc1RleHQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RyYWNlOjEwMzBcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnN0eWxlLnRleHRBbGlnbiAmJiAhcGFyYS5zdHlsZS50ZXh0QWxpZ24gJiYgKHBhcmEuc3R5bGUudGV4dEFsaWduID0gcGFyZW50LnN0eWxlLnRleHRBbGlnbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5zdHlsZS50ZXh0SW5kZW50ICYmICFwYXJhLnN0eWxlLnRleHRJbmRlbnQgJiYgKHBhcmEuc3R5bGUudGV4dEluZGVudCA9IHBhcmVudC5zdHlsZS50ZXh0SW5kZW50KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LnN0eWxlLnBhZGRpbmcgJiYgIXBhcmEuc3R5bGUucGFkZGluZyAmJiAocGFyYS5zdHlsZS5wYWRkaW5nID0gcGFyZW50LnN0eWxlLnBhZGRpbmcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy90cmFjZToxNzA2IOmAieaLqeeahOWwseaYr2gxLTbopoHliKDpmaRcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihhdHRycyAmJiAvaFxcZC9pLnRlc3QocGFyZW50LnRhZ05hbWUpICYmICEvaFxcZC9pLnRlc3QocGFyYS50YWdOYW1lKSApe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5zZXRBdHRyaWJ1dGVzKHBhcmVudCxhdHRycyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNvdXJjZUNtZE5hbWUgJiYgc291cmNlQ21kTmFtZSA9PSAnY3VzdG9tc3R5bGUnICYmIGF0dHJzLnN0eWxlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5zdHlsZS5jc3NUZXh0ID0gYXR0cnMuc3R5bGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHBhcmEsdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmEgPSBwYXJlbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSggcGFyYS5wYXJlbnROb2RlLCB0cnVlICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKCAgdXRpbHMuaW5kZXhPZihub3RFeGNoYW5nZSxwYXJlbnQudGFnTmFtZSkhPS0xKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gcGFyZW50O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gcGFyYTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGRvbVV0aWxzLmdldE5leHREb21Ob2RlKCBjdXJyZW50LCBmYWxzZSwgZmlsdGVyRm4gKTtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZSggY3VycmVudCwgdHJ1ZSwgZmlsdGVyRm4gKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gcmFuZ2UubW92ZVRvQm9va21hcmsoIGJvb2ttYXJrMiApLm1vdmVUb0Jvb2ttYXJrKCBib29rbWFyayApO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgbWUuc2V0T3B0KCdwYXJhZ3JhcGgnLHsncCc6JycsICdoMSc6JycsICdoMic6JycsICdoMyc6JycsICdoNCc6JycsICdoNSc6JycsICdoNic6Jyd9KTtcclxuXHQgICAgbWUuY29tbWFuZHNbJ3BhcmFncmFwaCddID0ge1xyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQgOiBmdW5jdGlvbiggY21kTmFtZSwgc3R5bGUsYXR0cnMsc291cmNlQ21kTmFtZSApIHtcclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgICAvL+mXreWQiOaXtuWNleeLrOWkhOeQhlxyXG5cdCAgICAgICAgICAgIGlmKHJhbmdlLmNvbGxhcHNlZCl7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB0eHQgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdwJyk7XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUodHh0KTtcclxuXHQgICAgICAgICAgICAgICAgLy/ljrvmjonlhpfkvZnnmoRmaWxsY2hhclxyXG5cdCAgICAgICAgICAgICAgICBpZihicm93c2VyLmllKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gdHh0LnByZXZpb3VzU2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKG5vZGUgJiYgZG9tVXRpbHMuaXNXaGl0ZXNwYWNlKG5vZGUpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBub2RlID0gdHh0Lm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYobm9kZSAmJiBkb21VdGlscy5pc1doaXRlc3BhY2Uobm9kZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmFuZ2UgPSBkb1BhcmFncmFwaChyYW5nZSxzdHlsZSxhdHRycyxzb3VyY2VDbWROYW1lKTtcclxuXHQgICAgICAgICAgICBpZih0eHQpe1xyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZSh0eHQpLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICBwTiA9IHR4dC5wYXJlbnROb2RlO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHR4dCk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZihkb21VdGlscy5pc0Jsb2NrRWxtKHBOKSYmZG9tVXRpbHMuaXNFbXB0eU5vZGUocE4pKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmZpbGxOb2RlKHRoaXMuZG9jdW1lbnQscE4pO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgaWYoYnJvd3Nlci5nZWNrbyAmJiByYW5nZS5jb2xsYXBzZWQgJiYgcmFuZ2Uuc3RhcnRDb250YWluZXIubm9kZVR5cGUgPT0gMSl7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyLmNoaWxkTm9kZXNbcmFuZ2Uuc3RhcnRPZmZzZXRdO1xyXG5cdCAgICAgICAgICAgICAgICBpZihjaGlsZCAmJiBjaGlsZC5ub2RlVHlwZSA9PSAxICYmIGNoaWxkLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSBzdHlsZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChjaGlsZCwwKS5jb2xsYXBzZSh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAvL3RyYWNlOjEwOTcg5Y6f5p2l5pyJdHJ1Ze+8jOWOn+WboOW/mOS6hu+8jOS9huWOu+S6huWwseS4jeiDvea4hemZpOWkmuS9meeahOWNoOS9jeespuS6hlxyXG5cdCAgICAgICAgICAgIHJhbmdlLnNlbGVjdCgpO1xyXG5cclxuXHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kVmFsdWUgOiBmdW5jdGlvbigpIHtcclxuXHQgICAgICAgICAgICB2YXIgbm9kZSA9IGRvbVV0aWxzLmZpbHRlck5vZGVMaXN0KHRoaXMuc2VsZWN0aW9uLmdldFN0YXJ0RWxlbWVudFBhdGgoKSwncCBoMSBoMiBoMyBoNCBoNSBoNicpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiBub2RlID8gbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgOiAnJztcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHR9O1xyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9kaXJlY3Rpb25hbGl0eS5qc1xyXG5cdC8qKlxyXG5cdCAqIOiuvue9ruaWh+Wtl+i+k+WFpeeahOaWueWQkeeahOaPkuS7tlxyXG5cdCAqIEBmaWxlXHJcblx0ICogQHNpbmNlIDEuMi42LjFcclxuXHQgKi9cclxuXHQoZnVuY3Rpb24oKSB7XHJcblx0ICAgIHZhciBibG9jayA9IGRvbVV0aWxzLmlzQmxvY2tFbG0gLFxyXG5cdCAgICAgICAgZ2V0T2JqID0gZnVuY3Rpb24oZWRpdG9yKXtcclxuLy9cdCAgICAgICAgICAgIHZhciBzdGFydE5vZGUgPSBlZGl0b3Iuc2VsZWN0aW9uLmdldFN0YXJ0KCksXHJcbi8vXHQgICAgICAgICAgICAgICAgcGFyZW50cztcclxuLy9cdCAgICAgICAgICAgIGlmICggc3RhcnROb2RlICkge1xyXG4vL1x0ICAgICAgICAgICAgICAgIC8v5p+l5om+5omA5pyJ55qE5pivYmxvY2vnmoTniLbkurLoioLngrlcclxuLy9cdCAgICAgICAgICAgICAgICBwYXJlbnRzID0gZG9tVXRpbHMuZmluZFBhcmVudHMoIHN0YXJ0Tm9kZSwgdHJ1ZSwgYmxvY2ssIHRydWUgKTtcclxuLy9cdCAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDAsY2k7IGNpID0gcGFyZW50c1tpKytdOyApIHtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgaWYgKCBjaS5nZXRBdHRyaWJ1dGUoICdkaXInICkgKSB7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2k7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIH1cclxuLy9cdCAgICAgICAgICAgICAgICB9XHJcbi8vXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGRvbVV0aWxzLmZpbHRlck5vZGVMaXN0KGVkaXRvci5zZWxlY3Rpb24uZ2V0U3RhcnRFbGVtZW50UGF0aCgpLGZ1bmN0aW9uKG4pe3JldHVybiBuICYmIG4ubm9kZVR5cGUgPT0gMSAmJiBuLmdldEF0dHJpYnV0ZSgnZGlyJyl9KTtcclxuXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZG9EaXJlY3Rpb25hbGl0eSA9IGZ1bmN0aW9uKHJhbmdlLGVkaXRvcixmb3J3YXJkKXtcclxuXHQgICAgICAgICAgICBcclxuXHQgICAgICAgICAgICB2YXIgYm9va21hcmssXHJcblx0ICAgICAgICAgICAgICAgIGZpbHRlckZuID0gZnVuY3Rpb24oIG5vZGUgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gICBub2RlLm5vZGVUeXBlID09IDEgPyAhZG9tVXRpbHMuaXNCb29rbWFya05vZGUobm9kZSkgOiAhZG9tVXRpbHMuaXNXaGl0ZXNwYWNlKG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgICAgICAgICAgb2JqID0gZ2V0T2JqKCBlZGl0b3IgKTtcclxuXHJcblx0ICAgICAgICAgICAgaWYgKCBvYmogJiYgcmFuZ2UuY29sbGFwc2VkICkge1xyXG5cdCAgICAgICAgICAgICAgICBvYmouc2V0QXR0cmlidXRlKCAnZGlyJywgZm9yd2FyZCApO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2U7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGJvb2ttYXJrID0gcmFuZ2UuY3JlYXRlQm9va21hcmsoKTtcclxuXHQgICAgICAgICAgICByYW5nZS5lbmxhcmdlKCB0cnVlICk7XHJcblx0ICAgICAgICAgICAgdmFyIGJvb2ttYXJrMiA9IHJhbmdlLmNyZWF0ZUJvb2ttYXJrKCksXHJcblx0ICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZSggYm9va21hcmsyLnN0YXJ0LCBmYWxzZSwgZmlsdGVyRm4gKSxcclxuXHQgICAgICAgICAgICAgICAgdG1wUmFuZ2UgPSByYW5nZS5jbG9uZVJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgIHRtcE5vZGU7XHJcblx0ICAgICAgICAgICAgd2hpbGUgKCBjdXJyZW50ICYmICAhKGRvbVV0aWxzLmdldFBvc2l0aW9uKCBjdXJyZW50LCBib29rbWFyazIuZW5kICkgJiBkb21VdGlscy5QT1NJVElPTl9GT0xMT1dJTkcpICkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIGN1cnJlbnQubm9kZVR5cGUgPT0gMyB8fCAhYmxvY2soIGN1cnJlbnQgKSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRtcFJhbmdlLnNldFN0YXJ0QmVmb3JlKCBjdXJyZW50ICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIGN1cnJlbnQgJiYgY3VycmVudCAhPT0gYm9va21hcmsyLmVuZCAmJiAhYmxvY2soIGN1cnJlbnQgKSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gY3VycmVudDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gZG9tVXRpbHMuZ2V0TmV4dERvbU5vZGUoIGN1cnJlbnQsIGZhbHNlLCBudWxsLCBmdW5jdGlvbiggbm9kZSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFibG9jayggbm9kZSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHRtcFJhbmdlLnNldEVuZEFmdGVyKCB0bXBOb2RlICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY29tbW9uID0gdG1wUmFuZ2UuZ2V0Q29tbW9uQW5jZXN0b3IoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICggIWRvbVV0aWxzLmlzQm9keSggY29tbW9uICkgJiYgYmxvY2soIGNvbW1vbiApICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8v6YGN5Y6G5Yiw5LqGYmxvY2voioLngrlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb21tb24uc2V0QXR0cmlidXRlKCAnZGlyJywgZm9yd2FyZCApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBjb21tb247XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8v5rKh5pyJ6YGN5Y6G5Yiw77yM5re75Yqg5LiA5LiqYmxvY2voioLngrlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IHJhbmdlLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdwJyApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHAuc2V0QXR0cmlidXRlKCAnZGlyJywgZm9yd2FyZCApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcmFnID0gdG1wUmFuZ2UuZXh0cmFjdENvbnRlbnRzKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcC5hcHBlbmRDaGlsZCggZnJhZyApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRtcFJhbmdlLmluc2VydE5vZGUoIHAgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gcDtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gZG9tVXRpbHMuZ2V0TmV4dERvbU5vZGUoIGN1cnJlbnQsIGZhbHNlLCBmaWx0ZXJGbiApO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGRvbVV0aWxzLmdldE5leHREb21Ob2RlKCBjdXJyZW50LCB0cnVlLCBmaWx0ZXJGbiApO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiByYW5nZS5tb3ZlVG9Cb29rbWFyayggYm9va21hcmsyICkubW92ZVRvQm9va21hcmsoIGJvb2ttYXJrICk7XHJcblx0ICAgICAgICB9O1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOaWh+Wtl+i+k+WFpeaWueWQkVxyXG5cdCAgICAgKiBAY29tbWFuZCBkaXJlY3Rpb25hbGl0eVxyXG5cdCAgICAgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZE5hbWUg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGZvcndhcmQg5Lyg5YWlJ2x0cifooajnpLrku47lt6blkJHlj7PovpPlhaXvvIzkvKDlhaUncnRsJ+ihqOekuuS7juWPs+WQkeW3pui+k+WFpVxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIGVkaXRvci5leGVjQ29tbWFuZCggJ2RpcmVjdGlvbmFsaXR5JywgJ2x0cicpO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5p+l6K+i5b2T5YmN6YCJ5Yy655qE5paH5a2X6L6T5YWl5pa55ZCRXHJcblx0ICAgICAqIEBjb21tYW5kIGRpcmVjdGlvbmFsaXR5XHJcblx0ICAgICAqIEBtZXRob2QgcXVlcnlDb21tYW5kVmFsdWVcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gY21kTmFtZSDlkb3ku6TlrZfnrKbkuLJcclxuXHQgICAgICogQHJldHVybiB7IFN0cmluZyB9IOi/lOWbnidsdHIn6KGo56S65LuO5bem5ZCR5Y+z6L6T5YWl77yM6L+U5ZueJ3J0bCfooajnpLrku47lj7PlkJHlt6bovpPlhaVcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBlZGl0b3IucXVlcnlDb21tYW5kVmFsdWUoICdkaXJlY3Rpb25hbGl0eScpO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIFVFLmNvbW1hbmRzWydkaXJlY3Rpb25hbGl0eSddID0ge1xyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQgOiBmdW5jdGlvbiggY21kTmFtZSxmb3J3YXJkICkge1xyXG5cdCAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgLy/pl63lkIjml7bljZXni6zlpITnkIZcclxuXHQgICAgICAgICAgICBpZihyYW5nZS5jb2xsYXBzZWQpe1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgdHh0ID0gdGhpcy5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnZCcpO1xyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKHR4dCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGRvRGlyZWN0aW9uYWxpdHkocmFuZ2UsdGhpcyxmb3J3YXJkKTtcclxuXHQgICAgICAgICAgICBpZih0eHQpe1xyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZSh0eHQpLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUodHh0KTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIHJhbmdlLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFZhbHVlIDogZnVuY3Rpb24oKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG5vZGUgPSBnZXRPYmoodGhpcyk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG5vZGUgPyBub2RlLmdldEF0dHJpYnV0ZSgnZGlyJykgOiAnbHRyJztcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHR9KSgpO1xyXG5cclxuXHJcblxyXG5cdC8vIHBsdWdpbnMvaG9yaXpvbnRhbC5qc1xyXG5cdC8qKlxyXG5cdCAqIOaPkuWFpeWIhuWJsue6v+aPkuS7tlxyXG5cdCAqIEBmaWxlXHJcblx0ICogQHNpbmNlIDEuMi42LjFcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog5o+S5YWl5YiG5Ymy57q/XHJcblx0ICogQGNvbW1hbmQgaG9yaXpvbnRhbFxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWROYW1lIOWRveS7pOWtl+espuS4slxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogYGBgamF2YXNjcmlwdFxyXG5cdCAqIGVkaXRvci5leGVjQ29tbWFuZCggJ2hvcml6b250YWwnICk7XHJcblx0ICogYGBgXHJcblx0ICovXHJcblx0VUUucGx1Z2luc1snaG9yaXpvbnRhbCddID0gZnVuY3Rpb24oKXtcclxuXHQgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgbWUuY29tbWFuZHNbJ2hvcml6b250YWwnXSA9IHtcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kIDogZnVuY3Rpb24oIGNtZE5hbWUgKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICBpZihtZS5xdWVyeUNvbW1hbmRTdGF0ZShjbWROYW1lKSE9PS0xKXtcclxuXHQgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoJ2luc2VydEh0bWwnLCc8aHI+Jyk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICAgICAgaWYoc3RhcnQubm9kZVR5cGUgPT0gMSAmJiAhc3RhcnQuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF0gKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdG1wO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYodG1wID0gc3RhcnQuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldCAtIDFdKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZih0bXAubm9kZVR5cGUgPT0gMSAmJiB0bXAudGFnTmFtZSA9PSAnSFInKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobWUub3B0aW9ucy5lbnRlclRhZyA9PSAncCcpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZSh0bXApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQodG1wLDApLnNldEN1cnNvcigpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZSh0bXApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRCZWZvcmUodG1wKS5zZXRDdXJzb3IoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvL+i+ueeVjOWcqHRhYmxl6YeM5LiN6IO95Yqg5YiG6ZqU57q/XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZSA6IGZ1bmN0aW9uKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBkb21VdGlscy5maWx0ZXJOb2RlTGlzdCh0aGlzLnNlbGVjdGlvbi5nZXRTdGFydEVsZW1lbnRQYXRoKCksJ3RhYmxlJykgPyAtMSA6IDA7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcbi8vXHQgICAgbWUuYWRkTGlzdGVuZXIoJ2RlbGtleXVwJyxmdW5jdGlvbigpe1xyXG4vL1x0ICAgICAgICB2YXIgcm5nID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuLy9cdCAgICAgICAgaWYoYnJvd3Nlci5pZSAmJiBicm93c2VyLnZlcnNpb24gPiA4KXtcclxuLy9cdCAgICAgICAgICAgIHJuZy50eHRUb0VsbUJvdW5kYXJ5KHRydWUpO1xyXG4vL1x0ICAgICAgICAgICAgaWYoZG9tVXRpbHMuaXNTdGFydEluYmxvY2socm5nKSl7XHJcbi8vXHQgICAgICAgICAgICAgICAgdmFyIHRtcE5vZGUgPSBybmcuc3RhcnRDb250YWluZXI7XHJcbi8vXHQgICAgICAgICAgICAgICAgdmFyIHByZSA9IHRtcE5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG4vL1x0ICAgICAgICAgICAgICAgIGlmKHByZSAmJiBkb21VdGlscy5pc1RhZ05vZGUocHJlLCdocicpKXtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHByZSk7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIHJuZy5zZWxlY3QoKTtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4vL1x0ICAgICAgICAgICAgICAgIH1cclxuLy9cdCAgICAgICAgICAgIH1cclxuLy9cdCAgICAgICAgfVxyXG4vL1x0ICAgICAgICBpZihkb21VdGlscy5pc0JvZHkocm5nLnN0YXJ0Q29udGFpbmVyKSl7XHJcbi8vXHQgICAgICAgICAgICB2YXIgaHIgPSBybmcuc3RhcnRDb250YWluZXIuY2hpbGROb2Rlc1tybmcuc3RhcnRPZmZzZXQgLTFdO1xyXG4vL1x0ICAgICAgICAgICAgaWYoaHIgJiYgaHIubm9kZU5hbWUgPT0gJ0hSJyl7XHJcbi8vXHQgICAgICAgICAgICAgICAgdmFyIG5leHQgPSBoci5uZXh0U2libGluZztcclxuLy9cdCAgICAgICAgICAgICAgICBpZihuZXh0KXtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgcm5nLnNldFN0YXJ0KG5leHQsMClcclxuLy9cdCAgICAgICAgICAgICAgICB9ZWxzZSBpZihoci5wcmV2aW91c1NpYmxpbmcpe1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICBybmcuc2V0U3RhcnRBdExhc3QoaHIucHJldmlvdXNTaWJsaW5nKVxyXG4vL1x0ICAgICAgICAgICAgICAgIH1lbHNle1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICBoci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwLGhyKTtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuZmlsbE5vZGUodGhpcy5kb2N1bWVudCxwKTtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgcm5nLnNldFN0YXJ0KHAsMCk7XHJcbi8vXHQgICAgICAgICAgICAgICAgfVxyXG4vL1x0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShocik7XHJcbi8vXHQgICAgICAgICAgICAgICAgcm5nLnNldEN1cnNvcihmYWxzZSx0cnVlKTtcclxuLy9cdCAgICAgICAgICAgIH1cclxuLy9cdCAgICAgICAgfVxyXG4vL1x0ICAgIH0pXHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdkZWxrZXlkb3duJyxmdW5jdGlvbihuYW1lLGV2dCl7XHJcblx0ICAgICAgICB2YXIgcm5nID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgIHJuZy50eHRUb0VsbUJvdW5kYXJ5KHRydWUpO1xyXG5cdCAgICAgICAgaWYoZG9tVXRpbHMuaXNTdGFydEluYmxvY2socm5nKSl7XHJcblx0ICAgICAgICAgICAgdmFyIHRtcE5vZGUgPSBybmcuc3RhcnRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgdmFyIHByZSA9IHRtcE5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgIGlmKHByZSAmJiBkb21VdGlscy5pc1RhZ05vZGUocHJlLCdocicpKXtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHByZSk7XHJcblx0ICAgICAgICAgICAgICAgIHJuZy5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMucHJldmVudERlZmF1bHQoZXZ0KTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgIH0pXHJcblx0fTtcclxuXHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL3RpbWUuanNcclxuXHQvKipcclxuXHQgKiDmj5LlhaXml7bpl7Tlkozml6XmnJ9cclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIOaPkuWFpeaXtumXtO+8jOm7mOiupOagvOW8j++8mjEyOjU5OjU5XHJcblx0ICogQGNvbW1hbmQgdGltZVxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAndGltZScpO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDmj5LlhaXml6XmnJ/vvIzpu5jorqTmoLzlvI/vvJoyMDEzLTA4LTMwXHJcblx0ICogQGNvbW1hbmQgZGF0ZVxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnZGF0ZScpO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cdFVFLmNvbW1hbmRzWyd0aW1lJ10gPSBVRS5jb21tYW5kc1tcImRhdGVcIl0gPSB7XHJcblx0ICAgIGV4ZWNDb21tYW5kIDogZnVuY3Rpb24oY21kLCBmb3JtYXQpe1xyXG5cdCAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZTtcclxuXHJcblx0ICAgICAgICBmdW5jdGlvbiBmb3JtYXRUaW1lKGRhdGUsIGZvcm1hdCkge1xyXG5cdCAgICAgICAgICAgIHZhciBoaCA9ICgnMCcgKyBkYXRlLmdldEhvdXJzKCkpLnNsaWNlKC0yKSxcclxuXHQgICAgICAgICAgICAgICAgaWkgPSAoJzAnICsgZGF0ZS5nZXRNaW51dGVzKCkpLnNsaWNlKC0yKSxcclxuXHQgICAgICAgICAgICAgICAgc3MgPSAoJzAnICsgZGF0ZS5nZXRTZWNvbmRzKCkpLnNsaWNlKC0yKTtcclxuXHQgICAgICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJ2hoOmlpOnNzJztcclxuXHQgICAgICAgICAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL2hoL2lnLCBoaCkucmVwbGFjZSgvaWkvaWcsIGlpKS5yZXBsYWNlKC9zcy9pZywgc3MpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlLCBmb3JtYXQpIHtcclxuXHQgICAgICAgICAgICB2YXIgeXl5eSA9ICgnMDAwJyArIGRhdGUuZ2V0RnVsbFllYXIoKSkuc2xpY2UoLTQpLFxyXG5cdCAgICAgICAgICAgICAgICB5eSA9IHl5eXkuc2xpY2UoLTIpLFxyXG5cdCAgICAgICAgICAgICAgICBtbSA9ICgnMCcgKyAoZGF0ZS5nZXRNb250aCgpKzEpKS5zbGljZSgtMiksXHJcblx0ICAgICAgICAgICAgICAgIGRkID0gKCcwJyArIGRhdGUuZ2V0RGF0ZSgpKS5zbGljZSgtMik7XHJcblx0ICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICd5eXl5LW1tLWRkJztcclxuXHQgICAgICAgICAgICByZXR1cm4gZm9ybWF0LnJlcGxhY2UoL3l5eXkvaWcsIHl5eXkpLnJlcGxhY2UoL3l5L2lnLCB5eSkucmVwbGFjZSgvbW0vaWcsIG1tKS5yZXBsYWNlKC9kZC9pZywgZGQpO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIHRoaXMuZXhlY0NvbW1hbmQoJ2luc2VydEh0bWwnLGNtZCA9PSBcInRpbWVcIiA/IGZvcm1hdFRpbWUoZGF0ZSwgZm9ybWF0KTpmb3JtYXREYXRlKGRhdGUsIGZvcm1hdCkgKTtcclxuXHQgICAgfVxyXG5cdH07XHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL3Jvd3NwYWNpbmcuanNcclxuXHQvKipcclxuXHQgKiDmrrXliY3mrrXlkI7pl7Tot53mj5Lku7ZcclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdC8qKlxyXG5cdCAqIOiuvue9ruautemXtOi3nVxyXG5cdCAqIEBjb21tYW5kIHJvd3NwYWNpbmdcclxuXHQgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IHZhbHVlIOautemXtOi3neeahOWAvO+8jOS7pXB45Li65Y2V5L2NXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gZGlyIOmXtOi3neS9jee9ru+8jHRvcOaIlmJvdHRvbe+8jOWIhuWIq+ihqOekuuauteWJjeWSjOauteWQjlxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogYGBgamF2YXNjcmlwdFxyXG5cdCAqIGVkaXRvci5leGVjQ29tbWFuZCggJ3Jvd3NwYWNpbmcnLCAnMTAnLCAndG9wJyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHRVRS5wbHVnaW5zWydyb3dzcGFjaW5nJ10gPSBmdW5jdGlvbigpe1xyXG5cdCAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICBtZS5zZXRPcHQoe1xyXG5cdCAgICAgICAgJ3Jvd3NwYWNpbmd0b3AnOlsnNScsICcxMCcsICcxNScsICcyMCcsICcyNSddLFxyXG5cdCAgICAgICAgJ3Jvd3NwYWNpbmdib3R0b20nOlsnNScsICcxMCcsICcxNScsICcyMCcsICcyNSddXHJcblxyXG5cdCAgICB9KTtcclxuXHQgICAgbWUuY29tbWFuZHNbJ3Jvd3NwYWNpbmcnXSA9ICB7XHJcblx0ICAgICAgICBleGVjQ29tbWFuZCA6IGZ1bmN0aW9uKCBjbWROYW1lLHZhbHVlLGRpciApIHtcclxuXHQgICAgICAgICAgICB0aGlzLmV4ZWNDb21tYW5kKCdwYXJhZ3JhcGgnLCdwJyx7c3R5bGU6J21hcmdpbi0nK2RpcisnOicrdmFsdWUgKyAncHgnfSk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kVmFsdWUgOiBmdW5jdGlvbihjbWROYW1lLGRpcikge1xyXG5cdCAgICAgICAgICAgIHZhciBwTiA9IGRvbVV0aWxzLmZpbHRlck5vZGVMaXN0KHRoaXMuc2VsZWN0aW9uLmdldFN0YXJ0RWxlbWVudFBhdGgoKSxmdW5jdGlvbihub2RlKXtyZXR1cm4gZG9tVXRpbHMuaXNCbG9ja0VsbShub2RlKSB9KSxcclxuXHQgICAgICAgICAgICAgICAgdmFsdWU7XHJcblx0ICAgICAgICAgICAgLy90cmFjZToxMDI2XHJcblx0ICAgICAgICAgICAgaWYocE4pe1xyXG5cdCAgICAgICAgICAgICAgICB2YWx1ZSA9IGRvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUocE4sJ21hcmdpbi0nK2RpcikucmVwbGFjZSgvW15cXGRdL2csJycpO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gIXZhbHVlID8gMCA6IHZhbHVlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gMDtcclxuXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0fTtcclxuXHJcblxyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9saW5laGVpZ2h0LmpzXHJcblx0LyoqXHJcblx0ICog6K6+572u6KGM5YaF6Ze06LedXHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cdFVFLnBsdWdpbnNbJ2xpbmVoZWlnaHQnXSA9IGZ1bmN0aW9uKCl7XHJcblx0ICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgIG1lLnNldE9wdCh7J2xpbmVoZWlnaHQnOlsnMScsICcxLjUnLCcxLjc1JywnMicsICczJywgJzQnLCAnNSddfSk7XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog6KGM6LedXHJcblx0ICAgICAqIEBjb21tYW5kIGxpbmVoZWlnaHRcclxuXHQgICAgICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWROYW1lIOWRveS7pOWtl+espuS4slxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSB2YWx1ZSDkvKDlhaXnmoTooYzpq5jlgLzvvIwg6K+l5YC85piv5b2T5YmN5a2X5L2T55qE5YCN5pWw77yMIOS+i+Wmgu+8miAxLjUsIDEuNzVcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdsaW5laGVpZ2h0JywgMS41KTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICAvKipcclxuXHQgICAgICog5p+l6K+i5b2T5YmN6YCJ5Yy65YaF5a6555qE6KGM6auY5aSn5bCPXHJcblx0ICAgICAqIEBjb21tYW5kIGxpbmVoZWlnaHRcclxuXHQgICAgICogQG1ldGhvZCBxdWVyeUNvbW1hbmRWYWx1ZVxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAqIEByZXR1cm4geyBTdHJpbmcgfSDov5Tlm57lvZPliY3ooYzpq5jlpKflsI9cclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBlZGl0b3IucXVlcnlDb21tYW5kVmFsdWUoICdsaW5laGVpZ2h0JyApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICBtZS5jb21tYW5kc1snbGluZWhlaWdodCddID0gIHtcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kIDogZnVuY3Rpb24oIGNtZE5hbWUsdmFsdWUgKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5leGVjQ29tbWFuZCgncGFyYWdyYXBoJywncCcse3N0eWxlOidsaW5lLWhlaWdodDonKyAodmFsdWUgPT0gXCIxXCIgPyBcIm5vcm1hbFwiIDogdmFsdWUgKyAnZW0nKSB9KTtcclxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRWYWx1ZSA6IGZ1bmN0aW9uKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBwTiA9IGRvbVV0aWxzLmZpbHRlck5vZGVMaXN0KHRoaXMuc2VsZWN0aW9uLmdldFN0YXJ0RWxlbWVudFBhdGgoKSxmdW5jdGlvbihub2RlKXtyZXR1cm4gZG9tVXRpbHMuaXNCbG9ja0VsbShub2RlKX0pO1xyXG5cdCAgICAgICAgICAgIGlmKHBOKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShwTiwnbGluZS1oZWlnaHQnKTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlID09ICdub3JtYWwnID8gMSA6IHZhbHVlLnJlcGxhY2UoL1teXFxkLl0qL2lnLFwiXCIpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHR9O1xyXG5cclxuXHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL2luc2VydGNvZGUuanNcclxuXHQvKipcclxuXHQgKiDmj5LlhaXku6PnoIHmj5Lku7ZcclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdFVFLnBsdWdpbnNbJ2luc2VydGNvZGUnXSA9IGZ1bmN0aW9uKCkge1xyXG5cdCAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICBtZS5yZWFkeShmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgdXRpbHMuY3NzUnVsZSgncHJlJywncHJle21hcmdpbjouNWVtIDA7cGFkZGluZzouNGVtIC42ZW07Ym9yZGVyLXJhZGl1czo4cHg7YmFja2dyb3VuZDojZjhmOGY4O30nLFxyXG5cdCAgICAgICAgICAgIG1lLmRvY3VtZW50KVxyXG5cdCAgICB9KTtcclxuXHQgICAgbWUuc2V0T3B0KCdpbnNlcnRjb2RlJyx7XHJcblx0ICAgICAgICAgICAgJ2FzMyc6J0FjdGlvblNjcmlwdDMnLFxyXG5cdCAgICAgICAgICAgICdiYXNoJzonQmFzaC9TaGVsbCcsXHJcblx0ICAgICAgICAgICAgJ2NwcCc6J0MvQysrJyxcclxuXHQgICAgICAgICAgICAnY3NzJzonQ3NzJyxcclxuXHQgICAgICAgICAgICAnY2YnOidDb2RlRnVuY3Rpb24nLFxyXG5cdCAgICAgICAgICAgICdjIyc6J0MjJyxcclxuXHQgICAgICAgICAgICAnZGVscGhpJzonRGVscGhpJyxcclxuXHQgICAgICAgICAgICAnZGlmZic6J0RpZmYnLFxyXG5cdCAgICAgICAgICAgICdlcmxhbmcnOidFcmxhbmcnLFxyXG5cdCAgICAgICAgICAgICdncm9vdnknOidHcm9vdnknLFxyXG5cdCAgICAgICAgICAgICdodG1sJzonSHRtbCcsXHJcblx0ICAgICAgICAgICAgJ2phdmEnOidKYXZhJyxcclxuXHQgICAgICAgICAgICAnamZ4JzonSmF2YUZ4JyxcclxuXHQgICAgICAgICAgICAnanMnOidKYXZhc2NyaXB0JyxcclxuXHQgICAgICAgICAgICAncGwnOidQZXJsJyxcclxuXHQgICAgICAgICAgICAncGhwJzonUGhwJyxcclxuXHQgICAgICAgICAgICAncGxhaW4nOidQbGFpbiBUZXh0JyxcclxuXHQgICAgICAgICAgICAncHMnOidQb3dlclNoZWxsJyxcclxuXHQgICAgICAgICAgICAncHl0aG9uJzonUHl0aG9uJyxcclxuXHQgICAgICAgICAgICAncnVieSc6J1J1YnknLFxyXG5cdCAgICAgICAgICAgICdzY2FsYSc6J1NjYWxhJyxcclxuXHQgICAgICAgICAgICAnc3FsJzonU3FsJyxcclxuXHQgICAgICAgICAgICAndmInOidWYicsXHJcblx0ICAgICAgICAgICAgJ3htbCc6J1htbCdcclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5o+S5YWl5Luj56CBXHJcblx0ICAgICAqIEBjb21tYW5kIGluc2VydGNvZGVcclxuXHQgICAgICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGxhbmcg5o+S5YWl5Luj56CB55qE6K+t6KiAXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnaW5zZXJ0Y29kZScsICdqYXZhc2NyaXB0JyApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5aaC5p6c6YCJ5Yy65omA5Zyo5L2N572u5piv5o+S5YWl5o+S5YWl5Luj56CB5Yy65Z+f77yM6L+U5Zue5Luj56CB55qE6K+t6KiAXHJcblx0ICAgICAqIEBjb21tYW5kIGluc2VydGNvZGVcclxuXHQgICAgICogQG1ldGhvZCBxdWVyeUNvbW1hbmRWYWx1ZVxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAqIEByZXR1cm4geyBTdHJpbmcgfSDov5Tlm57ku6PnoIHnmoTor63oqIBcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBlZGl0b3IucXVlcnlDb21tYW5kVmFsdWUoICdpbnNlcnRjb2RlJyApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICBtZS5jb21tYW5kc1snaW5zZXJ0Y29kZSddID0ge1xyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQgOiBmdW5jdGlvbihjbWQsbGFuZyl7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgcm5nID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgIHByZSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocm5nLnN0YXJ0Q29udGFpbmVyLCdwcmUnLHRydWUpO1xyXG5cdCAgICAgICAgICAgIGlmKHByZSl7XHJcblx0ICAgICAgICAgICAgICAgIHByZS5jbGFzc05hbWUgPSAnYnJ1c2g6JytsYW5nKyc7dG9vbGJhcjpmYWxzZTsnO1xyXG5cdCAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgY29kZSA9ICcnO1xyXG5cdCAgICAgICAgICAgICAgICBpZihybmcuY29sbGFwc2VkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBicm93c2VyLmllICYmIGJyb3dzZXIuaWUxMWJlbG93ID8gKGJyb3dzZXIudmVyc2lvbiA8PSA4ID8gJyZuYnNwOyc6JycpOic8YnIvPic7XHJcblx0ICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGZyYWcgPSBybmcuZXh0cmFjdENvbnRlbnRzKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZGl2ID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoZnJhZyk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdXRpbHMuZWFjaChVRS5maWx0ZXJOb2RlKFVFLmh0bWxwYXJzZXIoZGl2LmlubmVySFRNTC5yZXBsYWNlKC9bXFxyXFx0XS9nLCcnKSksbWUub3B0aW9ucy5maWx0ZXJUeHRSdWxlcykuY2hpbGRyZW4sZnVuY3Rpb24obm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoYnJvd3Nlci5pZSAmJiBicm93c2VyLmllMTFiZWxvdyAmJiBicm93c2VyLnZlcnNpb24gPiA4KXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5vZGUudHlwZSA9PSdlbGVtZW50Jyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihub2RlLnRhZ05hbWUgPT0gJ2JyJyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSArPSAnXFxuJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoIWR0ZC4kZW1wdHlbbm9kZS50YWdOYW1lXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuZWFjaChub2RlLmNoaWxkcmVuLGZ1bmN0aW9uKGNuKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY24udHlwZSA9PSdlbGVtZW50Jyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjbi50YWdOYW1lID09ICdicicpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgKz0gJ1xcbidcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKCFkdGQuJGVtcHR5W25vZGUudGFnTmFtZV0pe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgKz0gY24uaW5uZXJUZXh0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSArPSBjbi5kYXRhXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCEvXFxuJC8udGVzdChjb2RlKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgKz0gJ1xcbic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgKz0gbm9kZS5kYXRhICsgJ1xcbidcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighbm9kZS5uZXh0U2libGluZygpICYmIC9cXG4kLy50ZXN0KGNvZGUpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlLnJlcGxhY2UoL1xcbiQvLCcnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihicm93c2VyLmllICYmIGJyb3dzZXIuaWUxMWJlbG93KXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihub2RlLnR5cGUgPT0nZWxlbWVudCcpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5vZGUudGFnTmFtZSA9PSAnYnInKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSArPSAnPGJyPidcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZighZHRkLiRlbXB0eVtub2RlLnRhZ05hbWVdKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuZWFjaChub2RlLmNoaWxkcmVuLGZ1bmN0aW9uKGNuKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNuLnR5cGUgPT0nZWxlbWVudCcpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNuLnRhZ05hbWUgPT0gJ2JyJyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgKz0gJzxicj4nXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoIWR0ZC4kZW1wdHlbbm9kZS50YWdOYW1lXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgKz0gY24uaW5uZXJUZXh0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSArPSBjbi5kYXRhXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZighL2JyPiQvLnRlc3QoY29kZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSArPSAnPGJyPic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlICs9IG5vZGUuZGF0YSArICc8YnI+J1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIW5vZGUubmV4dFNpYmxpbmcoKSAmJiAvPGJyPiQvLnRlc3QoY29kZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgPSBjb2RlLnJlcGxhY2UoLzxicj4kLywnJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUgKz0gKG5vZGUudHlwZSA9PSAnZWxlbWVudCcgPyAoZHRkLiRlbXB0eVtub2RlLnRhZ05hbWVdID8gICcnIDogbm9kZS5pbm5lclRleHQoKSkgOiBub2RlLmRhdGEpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIS9iclxcLz9cXHMqPiQvLnRlc3QoY29kZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFub2RlLm5leHRTaWJsaW5nKCkpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlICs9ICc8YnI+J1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBtZS5leGVjQ29tbWFuZCgnaW5zZXJ0aHRtbCcsJzxwcmUgaWQ9XCJjb2RlclwiY2xhc3M9XCJicnVzaDonK2xhbmcrJzt0b29sYmFyOmZhbHNlXCI+Jytjb2RlKyc8L3ByZT4nLHRydWUpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgcHJlID0gbWUuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvZGVyJyk7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZUF0dHJpYnV0ZXMocHJlLCdpZCcpO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgdG1wTm9kZSA9IHByZS5wcmV2aW91c1NpYmxpbmc7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZih0bXBOb2RlICYmICh0bXBOb2RlLm5vZGVUeXBlID09IDMgJiYgdG1wTm9kZS5ub2RlVmFsdWUubGVuZ3RoID09IDEgJiYgYnJvd3Nlci5pZSAmJiBicm93c2VyLnZlcnNpb24gPT0gNiB8fCAgZG9tVXRpbHMuaXNFbXB0eUJsb2NrKHRtcE5vZGUpKSl7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHRtcE5vZGUpXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdmFyIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgICAgICBpZihkb21VdGlscy5pc0VtcHR5QmxvY2socHJlKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuc2V0U3RhcnQocHJlLDApLnNldEN1cnNvcihmYWxzZSx0cnVlKVxyXG5cdCAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJuZy5zZWxlY3ROb2RlQ29udGVudHMocHJlKS5zZWxlY3QoKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHJcblxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFZhbHVlIDogZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICB2YXIgcGF0aCA9IHRoaXMuc2VsZWN0aW9uLmdldFN0YXJ0RWxlbWVudFBhdGgoKTtcclxuXHQgICAgICAgICAgICB2YXIgbGFuZyA9ICcnO1xyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2gocGF0aCxmdW5jdGlvbihub2RlKXtcclxuXHQgICAgICAgICAgICAgICAgaWYobm9kZS5ub2RlTmFtZSA9PSdQUkUnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IG5vZGUuY2xhc3NOYW1lLm1hdGNoKC9icnVzaDooW147XSspLyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsYW5nID0gbWF0Y2ggJiYgbWF0Y2hbMV0gPyBtYXRjaFsxXSA6ICcnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGxhbmc7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICBtZS5hZGRJbnB1dFJ1bGUoZnVuY3Rpb24ocm9vdCl7XHJcblx0ICAgICAgIHV0aWxzLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgncHJlJyksZnVuY3Rpb24ocHJlKXtcclxuXHQgICAgICAgICAgIHZhciBicnMgPSBwcmUuZ2V0Tm9kZXNCeVRhZ05hbWUoJ2JyJyk7XHJcblx0ICAgICAgICAgICBpZihicnMubGVuZ3RoKXtcclxuXHQgICAgICAgICAgICAgICBicm93c2VyLmllICYmIGJyb3dzZXIuaWUxMWJlbG93ICYmIGJyb3dzZXIudmVyc2lvbiA+IDggJiYgdXRpbHMuZWFjaChicnMsZnVuY3Rpb24oYnIpe1xyXG5cdCAgICAgICAgICAgICAgICAgICB2YXIgdHh0ID0gVUUudU5vZGUuY3JlYXRlVGV4dCgnXFxuJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgIGJyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHR4dCxicik7XHJcblx0ICAgICAgICAgICAgICAgICAgIGJyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYnIpO1xyXG5cdCAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICBpZihicm93c2VyLmllICYmIGJyb3dzZXIuaWUxMWJlbG93ICYmIGJyb3dzZXIudmVyc2lvbiA+IDgpXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB2YXIgY29kZSA9IHByZS5pbm5lclRleHQoKS5zcGxpdCgvXFxuLyk7XHJcblx0ICAgICAgICAgICAgcHJlLmlubmVySFRNTCgnJyk7XHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaChjb2RlLGZ1bmN0aW9uKGMpe1xyXG5cdCAgICAgICAgICAgICAgICBpZihjLmxlbmd0aCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBwcmUuYXBwZW5kQ2hpbGQoVUUudU5vZGUuY3JlYXRlVGV4dChjKSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcHJlLmFwcGVuZENoaWxkKFVFLnVOb2RlLmNyZWF0ZUVsZW1lbnQoJ2JyJykpXHJcblx0ICAgICAgICAgICAgfSlcclxuXHQgICAgICAgfSlcclxuXHQgICAgfSk7XHJcblx0ICAgIG1lLmFkZE91dHB1dFJ1bGUoZnVuY3Rpb24ocm9vdCl7XHJcblx0ICAgICAgICB1dGlscy5lYWNoKHJvb3QuZ2V0Tm9kZXNCeVRhZ05hbWUoJ3ByZScpLGZ1bmN0aW9uKHByZSl7XHJcblx0ICAgICAgICAgICAgdmFyIGNvZGUgPSAnJztcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKHByZS5jaGlsZHJlbixmdW5jdGlvbihuKXtcclxuXHQgICAgICAgICAgICAgICBpZihuLnR5cGUgPT0gJ3RleHQnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgLy/lnKhpZeS4i+aWh+acrOWGheWuueacieWPr+iDveacq+WwvuW4puaciVxcbuimgeWOu+aOiVxyXG5cdCAgICAgICAgICAgICAgICAgICAvL3RyYWNlOjMzOTZcclxuXHQgICAgICAgICAgICAgICAgICAgY29kZSArPSBuLmRhdGEucmVwbGFjZSgvWyBdL2csJyZuYnNwOycpLnJlcGxhY2UoL1xcbiQvLCcnKTtcclxuXHQgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgaWYobi50YWdOYW1lID09ICdicicpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgY29kZSAgKz0gJ1xcbidcclxuXHQgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICBjb2RlICs9ICghZHRkLiRlbXB0eVtuLnRhZ05hbWVdID8gJycgOiBuLmlubmVyVGV4dCgpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgICAgICBwcmUuaW5uZXJUZXh0KGNvZGUucmVwbGFjZSgvKCZuYnNwO3xcXG4pKyQvLCcnKSlcclxuXHQgICAgICAgIH0pXHJcblx0ICAgIH0pO1xyXG5cdCAgICAvL+S4jemcgOimgeWIpOaWrWhpZ2hsaWdodOeahGNvbW1hbmTliJfooahcclxuXHQgICAgbWUubm90TmVlZENvZGVRdWVyeSA9e1xyXG5cdCAgICAgICAgaGVscDoxLFxyXG5cdCAgICAgICAgdW5kbzoxLFxyXG5cdCAgICAgICAgcmVkbzoxLFxyXG5cdCAgICAgICAgc291cmNlOjEsXHJcblx0ICAgICAgICBwcmludDoxLFxyXG5cdCAgICAgICAgc2VhcmNocmVwbGFjZToxLFxyXG5cdCAgICAgICAgZnVsbHNjcmVlbjoxLFxyXG5cdCAgICAgICAgcHJldmlldzoxLFxyXG5cdCAgICAgICAgaW5zZXJ0cGFyYWdyYXBoOjEsXHJcblx0ICAgICAgICBlbGVtZW50cGF0aDoxLFxyXG5cdCAgICAgICAgaW5zZXJ0Y29kZToxLFxyXG5cdCAgICAgICAgaW5zZXJ0aHRtbDoxLFxyXG5cdCAgICAgICAgc2VsZWN0YWxsOjFcclxuXHQgICAgfTtcclxuXHQgICAgLy/lsIZxdWV5Q29tbWFtbmRTdGF0ZemHjee9rlxyXG5cdCAgICB2YXIgb3JnUXVlcnkgPSBtZS5xdWVyeUNvbW1hbmRTdGF0ZTtcclxuXHQgICAgbWUucXVlcnlDb21tYW5kU3RhdGUgPSBmdW5jdGlvbihjbWQpe1xyXG5cdCAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHJcblx0ICAgICAgICBpZighbWUubm90TmVlZENvZGVRdWVyeVtjbWQudG9Mb3dlckNhc2UoKV0gJiYgbWUuc2VsZWN0aW9uICYmIG1lLnF1ZXJ5Q29tbWFuZFZhbHVlKCdpbnNlcnRjb2RlJykpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiAtMTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBVRS5FZGl0b3IucHJvdG90eXBlLnF1ZXJ5Q29tbWFuZFN0YXRlLmFwcGx5KHRoaXMsYXJndW1lbnRzKVxyXG5cdCAgICB9O1xyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcignYmVmb3JlZW50ZXJrZXlkb3duJyxmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgdmFyIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgdmFyIHByZSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocm5nLnN0YXJ0Q29udGFpbmVyLCdwcmUnLHRydWUpO1xyXG5cdCAgICAgICAgaWYocHJlKXtcclxuXHQgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgIGlmKCFybmcuY29sbGFwc2VkKXtcclxuXHQgICAgICAgICAgICAgICBybmcuZGVsZXRlQ29udGVudHMoKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYoIWJyb3dzZXIuaWUgfHwgYnJvd3Nlci5pZTlhYm92ZSl7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB0bXBOb2RlID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKSxwcmU7XHJcblx0ICAgICAgICAgICAgICAgIHJuZy5pbnNlcnROb2RlKHRtcE5vZGUpLnNldFN0YXJ0QWZ0ZXIodG1wTm9kZSkuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBuZXh0ID0gdG1wTm9kZS5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgaWYoIW5leHQgJiYgKCFicm93c2VyLmllIHx8IGJyb3dzZXIudmVyc2lvbiA+IDEwKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuaW5zZXJ0Tm9kZSh0bXBOb2RlLmNsb25lTm9kZShmYWxzZSkpO1xyXG5cdCAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJuZy5zZXRTdGFydEFmdGVyKHRtcE5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHByZSA9IHRtcE5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgdG1wO1xyXG5cdCAgICAgICAgICAgICAgICB3aGlsZShwcmUgKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRtcCA9IHByZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHByZSA9IHByZS5wcmV2aW91c1NpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZighcHJlIHx8IHByZS5ub2RlTmFtZSA9PSAnQlInKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcmUgPSB0bXA7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYocHJlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBzdHIgPSAnJztcclxuXHQgICAgICAgICAgICAgICAgICAgIHdoaWxlKHByZSAmJiBwcmUubm9kZU5hbWUgIT0gJ0JSJyAmJiAgbmV3IFJlZ0V4cCgnXltcXFxccycrZG9tVXRpbHMuZmlsbENoYXIrJ10qJCcpLnRlc3QocHJlLm5vZGVWYWx1ZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBwcmUubm9kZVZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHByZSA9IHByZS5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKHByZS5ub2RlTmFtZSAhPSAnQlInKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBwcmUubm9kZVZhbHVlLm1hdGNoKG5ldyBSZWdFeHAoJ14oW1xcXFxzJytkb21VdGlscy5maWxsQ2hhcisnXSspJykpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoICYmIG1hdGNoWzFdKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IG1hdGNoWzFdXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKHN0cil7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gbWUuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBybmcuaW5zZXJ0Tm9kZShzdHIpLnNldFN0YXJ0QWZ0ZXIoc3RyKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBybmcuY29sbGFwc2UodHJ1ZSkuc2VsZWN0KHRydWUpO1xyXG5cdCAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICBpZihicm93c2VyLnZlcnNpb24gPiA4KXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdHh0ID0gbWUuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJ1xcbicpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcm5nLnN0YXJ0Q29udGFpbmVyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYocm5nLnN0YXJ0T2Zmc2V0ID09IDApe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmVOb2RlID0gc3RhcnQucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKHByZU5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBybmcuaW5zZXJ0Tm9kZSh0eHQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsbGNoYXIgPSBtZS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnICcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBybmcuc2V0U3RhcnRBZnRlcih0eHQpLmluc2VydE5vZGUoZmlsbGNoYXIpLnNldFN0YXJ0KGZpbGxjaGFyLDApLmNvbGxhcHNlKHRydWUpLnNlbGVjdCh0cnVlKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJuZy5pbnNlcnROb2RlKHR4dCkuc2V0U3RhcnRBZnRlcih0eHQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxsY2hhciA9IG1lLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcgJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBybmcuc3RhcnRDb250YWluZXIuY2hpbGROb2Rlc1tybmcuc3RhcnRPZmZzZXRdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN0YXJ0ICYmICEvXlxcbi8udGVzdChzdGFydC5ub2RlVmFsdWUpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm5nLnNldFN0YXJ0QmVmb3JlKHR4dClcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcm5nLmluc2VydE5vZGUoZmlsbGNoYXIpLnNldFN0YXJ0KGZpbGxjaGFyLDApLmNvbGxhcHNlKHRydWUpLnNlbGVjdCh0cnVlKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdG1wTm9kZSA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuaW5zZXJ0Tm9kZSh0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJuZy5pbnNlcnROb2RlKG1lLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRvbVV0aWxzLmZpbGxDaGFyKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuc2V0U3RhcnRBZnRlcih0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHByZSA9IHRtcE5vZGUucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRtcDtcclxuXHQgICAgICAgICAgICAgICAgICAgIHdoaWxlKHByZSApe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IHByZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcmUgPSBwcmUucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFwcmUgfHwgcHJlLm5vZGVOYW1lID09ICdCUicpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmUgPSB0bXA7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKHByZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0ciA9ICcnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKHByZSAmJiBwcmUubm9kZU5hbWUgIT0gJ0JSJyAmJiAgbmV3IFJlZ0V4cCgnXlsgJytkb21VdGlscy5maWxsQ2hhcisnXSokJykudGVzdChwcmUubm9kZVZhbHVlKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBwcmUubm9kZVZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmUgPSBwcmUubmV4dFNpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKHByZS5ub2RlTmFtZSAhPSAnQlInKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcHJlLm5vZGVWYWx1ZS5tYXRjaChuZXcgUmVnRXhwKCdeKFsgJytkb21VdGlscy5maWxsQ2hhcisnXSspJykpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihtYXRjaCAmJiBtYXRjaFsxXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gbWF0Y2hbMV1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IG1lLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0cik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcm5nLmluc2VydE5vZGUoc3RyKS5zZXRTdGFydEFmdGVyKHN0cik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuY29sbGFwc2UodHJ1ZSkuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgIH0pO1xyXG5cclxuXHQgICAgbWUuYWRkTGlzdGVuZXIoJ3RhYmtleWRvd24nLGZ1bmN0aW9uKGNtZCxldnQpe1xyXG5cdCAgICAgICAgdmFyIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgdmFyIHByZSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocm5nLnN0YXJ0Q29udGFpbmVyLCdwcmUnLHRydWUpO1xyXG5cdCAgICAgICAgaWYocHJlKXtcclxuXHQgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgIGlmKGV2dC5zaGlmdEtleSl7XHJcblxyXG5cdCAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICBpZighcm5nLmNvbGxhcHNlZCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgYmsgPSBybmcuY3JlYXRlQm9va21hcmsoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGJrLnN0YXJ0LnByZXZpb3VzU2libGluZztcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZShzdGFydCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYocHJlLmZpcnN0Q2hpbGQgPT09IHN0YXJ0ICYmICFkb21VdGlscy5pc0JyKHN0YXJ0KSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZS5pbnNlcnRCZWZvcmUobWUuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJyAgICAnKSxzdGFydCk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoZG9tVXRpbHMuaXNCcihzdGFydCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmUuaW5zZXJ0QmVmb3JlKG1lLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcgICAgJyksc3RhcnQubmV4dFNpYmxpbmcpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGVuZCA9IGJrLmVuZDtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gYmsuc3RhcnQubmV4dFNpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihwcmUuZmlyc3RDaGlsZCA9PT0gYmsuc3RhcnQpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHByZS5pbnNlcnRCZWZvcmUobWUuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJyAgICAnKSxzdGFydC5uZXh0U2libGluZylcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZShzdGFydCAmJiBzdGFydCAhPT0gZW5kKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihkb21VdGlscy5pc0JyKHN0YXJ0KSAmJiBzdGFydC5uZXh0U2libGluZyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN0YXJ0Lm5leHRTaWJsaW5nID09PSBlbmQpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlLmluc2VydEJlZm9yZShtZS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnICAgICcpLHN0YXJ0Lm5leHRTaWJsaW5nKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBzdGFydC5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHJuZy5tb3ZlVG9Cb29rbWFyayhiaykuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRtcE5vZGUgPSBtZS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnICAgICcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcm5nLmluc2VydE5vZGUodG1wTm9kZSkuc2V0U3RhcnRBZnRlcih0bXBOb2RlKS5jb2xsYXBzZSh0cnVlKS5zZWxlY3QodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgIH0pO1xyXG5cclxuXHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdiZWZvcmVpbnNlcnRodG1sJyxmdW5jdGlvbihldnROYW1lLGh0bWwpe1xyXG5cdCAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICBybmcgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICBwcmUgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHJuZy5zdGFydENvbnRhaW5lciwncHJlJyx0cnVlKTtcclxuXHQgICAgICAgIGlmKHByZSl7XHJcblx0ICAgICAgICAgICAgaWYoIXJuZy5jb2xsYXBzZWQpe1xyXG5cdCAgICAgICAgICAgICAgICBybmcuZGVsZXRlQ29udGVudHMoKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgaHRtbHN0ciA9ICcnO1xyXG5cdCAgICAgICAgICAgIGlmKGJyb3dzZXIuaWUgJiYgYnJvd3Nlci52ZXJzaW9uID4gOCl7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB1dGlscy5lYWNoKFVFLmZpbHRlck5vZGUoVUUuaHRtbHBhcnNlcihodG1sKSxtZS5vcHRpb25zLmZpbHRlclR4dFJ1bGVzKS5jaGlsZHJlbixmdW5jdGlvbihub2RlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKG5vZGUudHlwZSA9PSdlbGVtZW50Jyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYobm9kZS50YWdOYW1lID09ICdicicpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICdcXG4nXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoIWR0ZC4kZW1wdHlbbm9kZS50YWdOYW1lXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmVhY2gobm9kZS5jaGlsZHJlbixmdW5jdGlvbihjbil7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjbi50eXBlID09J2VsZW1lbnQnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjbi50YWdOYW1lID09ICdicicpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICdcXG4nXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoIWR0ZC4kZW1wdHlbbm9kZS50YWdOYW1lXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWxzdHIgKz0gY24uaW5uZXJUZXh0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSBjbi5kYXRhXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCEvXFxuJC8udGVzdChodG1sc3RyKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sc3RyICs9ICdcXG4nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciArPSBub2RlLmRhdGEgKyAnXFxuJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoIW5vZGUubmV4dFNpYmxpbmcoKSAmJiAvXFxuJC8udGVzdChodG1sc3RyKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaHRtbHN0ciA9IGh0bWxzdHIucmVwbGFjZSgvXFxuJC8sJycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRtcE5vZGUgPSBtZS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh1dGlscy5odG1sKGh0bWxzdHIucmVwbGFjZSgvJm5ic3A7L2csJyAnKSkpO1xyXG5cdCAgICAgICAgICAgICAgICBybmcuaW5zZXJ0Tm9kZSh0bXBOb2RlKS5zZWxlY3ROb2RlKHRtcE5vZGUpLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgZnJhZyA9IG1lLmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHV0aWxzLmVhY2goVUUuZmlsdGVyTm9kZShVRS5odG1scGFyc2VyKGh0bWwpLG1lLm9wdGlvbnMuZmlsdGVyVHh0UnVsZXMpLmNoaWxkcmVuLGZ1bmN0aW9uKG5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYobm9kZS50eXBlID09J2VsZW1lbnQnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihub2RlLnRhZ05hbWUgPT0gJ2JyJyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQobWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKSlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZSBpZighZHRkLiRlbXB0eVtub2RlLnRhZ05hbWVdKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuZWFjaChub2RlLmNoaWxkcmVuLGZ1bmN0aW9uKGNuKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNuLnR5cGUgPT0nZWxlbWVudCcpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNuLnRhZ05hbWUgPT0gJ2JyJyl7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyJykpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoIWR0ZC4kZW1wdHlbbm9kZS50YWdOYW1lXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQobWUuZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodXRpbHMuaHRtbChjbi5pbm5lclRleHQoKS5yZXBsYWNlKC8mbmJzcDsvZywnICcpKSkpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKG1lLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHV0aWxzLmh0bWwoIGNuLmRhdGEucmVwbGFjZSgvJm5ic3A7L2csJyAnKSkpKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGZyYWcubGFzdENoaWxkLm5vZGVOYW1lICE9ICdCUicpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChtZS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh1dGlscy5odG1sKCBub2RlLmRhdGEucmVwbGFjZSgvJm5ic3A7L2csJyAnKSkpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKCFub2RlLm5leHRTaWJsaW5nKCkgJiYgZnJhZy5sYXN0Q2hpbGQubm9kZU5hbWUgPT0gJ0JSJyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICBmcmFnLnJlbW92ZUNoaWxkKGZyYWcubGFzdENoaWxkKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICBybmcuaW5zZXJ0Tm9kZShmcmFnKS5zZWxlY3QoKTtcclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfSk7XHJcblx0ICAgIC8v5pa55ZCR6ZSu55qE5aSE55CGXHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdrZXlkb3duJyxmdW5jdGlvbihjbWQsZXZ0KXtcclxuXHQgICAgICAgIHZhciBtZSA9IHRoaXMsa2V5Q29kZSA9IGV2dC5rZXlDb2RlIHx8IGV2dC53aGljaDtcclxuXHQgICAgICAgIGlmKGtleUNvZGUgPT0gNDApe1xyXG5cdCAgICAgICAgICAgIHZhciBybmcgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxwcmUsc3RhcnQgPSBybmcuc3RhcnRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgaWYocm5nLmNvbGxhcHNlZCAmJiAocHJlID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuc3RhcnRDb250YWluZXIsJ3ByZScsdHJ1ZSkpICYmICFwcmUubmV4dFNpYmxpbmcpe1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbGFzdCA9IHByZS5sYXN0Q2hpbGRcclxuXHQgICAgICAgICAgICAgICAgd2hpbGUobGFzdCAmJiBsYXN0Lm5vZGVOYW1lID09ICdCUicpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbGFzdCA9IGxhc3QucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmKGxhc3QgPT09IHN0YXJ0IHx8IHJuZy5zdGFydENvbnRhaW5lciA9PT0gcHJlICYmIHJuZy5zdGFydE9mZnNldCA9PSBwcmUuY2hpbGROb2Rlcy5sZW5ndGgpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoJ2luc2VydHBhcmFncmFwaCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucHJldmVudERlZmF1bHQoZXZ0KVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfSk7XHJcblx0ICAgIC8vdHJhY2U6MzM5NVxyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcignZGVsa2V5ZG93bicsZnVuY3Rpb24odHlwZSxldnQpe1xyXG5cdCAgICAgICAgdmFyIHJuZyA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICBybmcudHh0VG9FbG1Cb3VuZGFyeSh0cnVlKTtcclxuXHQgICAgICAgIHZhciBzdGFydCA9IHJuZy5zdGFydENvbnRhaW5lcjtcclxuXHQgICAgICAgIGlmKGRvbVV0aWxzLmlzVGFnTm9kZShzdGFydCwncHJlJykgJiYgcm5nLmNvbGxhcHNlZCAmJiBkb21VdGlscy5pc1N0YXJ0SW5ibG9jayhybmcpKXtcclxuXHQgICAgICAgICAgICB2YXIgcCA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuXHQgICAgICAgICAgICBkb21VdGlscy5maWxsTm9kZShtZS5kb2N1bWVudCxwKTtcclxuXHQgICAgICAgICAgICBzdGFydC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwLHN0YXJ0KTtcclxuXHQgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoc3RhcnQpO1xyXG5cdCAgICAgICAgICAgIHJuZy5zZXRTdGFydChwLDApLnNldEN1cnNvcihmYWxzZSx0cnVlKTtcclxuXHQgICAgICAgICAgICBkb21VdGlscy5wcmV2ZW50RGVmYXVsdChldnQpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9KVxyXG5cdH07XHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL2NsZWFyZG9jLmpzXHJcblx0LyoqXHJcblx0ICog5riF56m65paH5qGj5o+S5Lu2XHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDmuIXnqbrmlofmoaNcclxuXHQgKiBAY29tbWFuZCBjbGVhcmRvY1xyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogLy9lZGl0b3Ig5piv57yW6L6R5Zmo5a6e5L6LXHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCdjbGVhcmRvYycpO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHRVRS5jb21tYW5kc1snY2xlYXJkb2MnXSA9IHtcclxuXHQgICAgZXhlY0NvbW1hbmQgOiBmdW5jdGlvbiggY21kTmFtZSkge1xyXG5cdCAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICBlbnRlclRhZyA9IG1lLm9wdGlvbnMuZW50ZXJUYWcsXHJcblx0ICAgICAgICAgICAgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgIGlmKGVudGVyVGFnID09IFwiYnJcIil7XHJcblx0ICAgICAgICAgICAgbWUuYm9keS5pbm5lckhUTUwgPSBcIjxici8+XCI7XHJcblx0ICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQobWUuYm9keSwwKS5zZXRDdXJzb3IoKTtcclxuXHQgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgIG1lLmJvZHkuaW5uZXJIVE1MID0gXCI8cD5cIisoaWUgPyBcIlwiIDogXCI8YnIvPlwiKStcIjwvcD5cIjtcclxuXHQgICAgICAgICAgICByYW5nZS5zZXRTdGFydChtZS5ib2R5LmZpcnN0Q2hpbGQsMCkuc2V0Q3Vyc29yKGZhbHNlLHRydWUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgIG1lLmZpcmVFdmVudChcImNsZWFyRG9jXCIpO1xyXG5cdCAgICAgICAgfSwwKTtcclxuXHJcblx0ICAgIH1cclxuXHR9O1xyXG5cclxuXHJcblxyXG5cdC8vIHBsdWdpbnMvYW5jaG9yLmpzXHJcblx0LyoqXHJcblx0ICog6ZSa54K55o+S5Lu277yM5Li6VUVkaXRvcuaPkOS+m+aPkuWFpemUmueCueaUr+aMgVxyXG5cdCAqIEBmaWxlXHJcblx0ICogQHNpbmNlIDEuMi42LjFcclxuXHQgKi9cclxuXHRVRS5wbHVnaW4ucmVnaXN0ZXIoJ2FuY2hvcicsIGZ1bmN0aW9uICgpe1xyXG5cclxuXHQgICAgcmV0dXJuIHtcclxuXHQgICAgICAgIGJpbmRFdmVudHM6e1xyXG5cdCAgICAgICAgICAgICdyZWFkeSc6ZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgdXRpbHMuY3NzUnVsZSgnYW5jaG9yJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICcuYW5jaG9yY2xhc3N7YmFja2dyb3VuZDogdXJsKFxcJydcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICArIHRoaXMub3B0aW9ucy50aGVtZVBhdGhcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICArIHRoaXMub3B0aW9ucy50aGVtZSArJy9pbWFnZXMvYW5jaG9yLmdpZlxcJykgbm8tcmVwZWF0IHNjcm9sbCBsZWZ0IGNlbnRlciB0cmFuc3BhcmVudDtjdXJzb3I6IGF1dG87ZGlzcGxheTogaW5saW5lLWJsb2NrO2hlaWdodDogMTZweDt3aWR0aDogMTVweDt9JyxcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgIG91dHB1dFJ1bGU6IGZ1bmN0aW9uKHJvb3Qpe1xyXG5cdCAgICAgICAgICAgdXRpbHMuZWFjaChyb290LmdldE5vZGVzQnlUYWdOYW1lKCdpbWcnKSxmdW5jdGlvbihhKXtcclxuXHQgICAgICAgICAgICAgICB2YXIgdmFsO1xyXG5cdCAgICAgICAgICAgICAgIGlmKHZhbCA9IGEuZ2V0QXR0cignYW5jaG9ybmFtZScpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgYS50YWdOYW1lID0gJ2EnO1xyXG5cdCAgICAgICAgICAgICAgICAgICBhLnNldEF0dHIoe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9ybmFtZSA6ICcnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA6IHZhbCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcycgOiAnJ1xyXG5cdCAgICAgICAgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgIH0pXHJcblx0ICAgICAgIH0sXHJcblx0ICAgICAgIGlucHV0UnVsZTpmdW5jdGlvbihyb290KXtcclxuXHQgICAgICAgICAgIHV0aWxzLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgnYScpLGZ1bmN0aW9uKGEpe1xyXG5cdCAgICAgICAgICAgICAgIHZhciB2YWw7XHJcblx0ICAgICAgICAgICAgICAgaWYoKHZhbCA9IGEuZ2V0QXR0cignbmFtZScpKSAmJiAhYS5nZXRBdHRyKCdocmVmJykpe1xyXG5cdCAgICAgICAgICAgICAgICAgICBhLnRhZ05hbWUgPSAnaW1nJztcclxuXHQgICAgICAgICAgICAgICAgICAgYS5zZXRBdHRyKHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvcm5hbWUgOmEuZ2V0QXR0cignbmFtZScpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJyA6ICdhbmNob3JjbGFzcydcclxuXHQgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgIGEuc2V0QXR0cignbmFtZScpXHJcblxyXG5cdCAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgIH0pXHJcblxyXG5cdCAgICAgICB9LFxyXG5cdCAgICAgICBjb21tYW5kczp7XHJcblx0ICAgICAgICAgICAvKipcclxuXHQgICAgICAgICAgICAqIOaPkuWFpemUmueCuVxyXG5cdCAgICAgICAgICAgICogQGNvbW1hbmQgYW5jaG9yXHJcblx0ICAgICAgICAgICAgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICAgICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBuYW1lIOmUmueCueWQjeensOWtl+espuS4slxyXG5cdCAgICAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAgICAqIC8vZWRpdG9yIOaYr+e8lui+keWZqOWunuS+i1xyXG5cdCAgICAgICAgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCdhbmNob3InLCAnYW5jaG9yMScpO1xyXG5cdCAgICAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgICAgKi9cclxuXHQgICAgICAgICAgICdhbmNob3InOntcclxuXHQgICAgICAgICAgICAgICBleGVjQ29tbWFuZDpmdW5jdGlvbiAoY21kLCBuYW1lKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCksaW1nID0gcmFuZ2UuZ2V0Q2xvc2VkTm9kZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICBpZiAoaW1nICYmIGltZy5nZXRBdHRyaWJ1dGUoJ2FuY2hvcm5hbWUnKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWcuc2V0QXR0cmlidXRlKCdhbmNob3JuYW1lJywgbmFtZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QmVmb3JlKGltZykuc2V0Q3Vyc29yKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGltZyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5Y+q5Zyo6YCJ5Yy655qE5byA5aeL5o+S5YWlXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2hvciA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuc2V0QXR0cmlidXRlcyhhbmNob3Ise1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYW5jaG9ybmFtZSc6bmFtZSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzonYW5jaG9yY2xhc3MnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZShhbmNob3IpLnNldFN0YXJ0QWZ0ZXIoYW5jaG9yKS5zZXRDdXJzb3IoZmFsc2UsdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICB9XHJcblx0ICAgICAgIH1cclxuXHQgICAgfVxyXG5cdH0pO1xyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy93b3JkY291bnQuanNcclxuXHQvLy9pbXBvcnQgY29yZVxyXG5cdC8vL2NvbW1hbmRzIOWtl+aVsOe7n+iuoVxyXG5cdC8vL2NvbW1hbmRzTmFtZSAgV29yZENvdW50LHdvcmRDb3VudFxyXG5cdC8vL2NvbW1hbmRzVGl0bGUgIOWtl+aVsOe7n+iuoVxyXG5cdC8qXHJcblx0ICogQ3JlYXRlZCBieSBKZXRCcmFpbnMgV2ViU3Rvcm0uXHJcblx0ICogVXNlcjogdGFvcWlsaVxyXG5cdCAqIERhdGU6IDExLTktN1xyXG5cdCAqIFRpbWU6IOS4i+WNiDg6MThcclxuXHQgKiBUbyBjaGFuZ2UgdGhpcyB0ZW1wbGF0ZSB1c2UgRmlsZSB8IFNldHRpbmdzIHwgRmlsZSBUZW1wbGF0ZXMuXHJcblx0ICovXHJcblxyXG5cdFVFLnBsdWdpbnNbJ3dvcmRjb3VudCddID0gZnVuY3Rpb24oKXtcclxuXHQgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgbWUuc2V0T3B0KCd3b3JkQ291bnQnLHRydWUpO1xyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcignY29udGVudGNoYW5nZScsZnVuY3Rpb24oKXtcclxuXHQgICAgICAgIG1lLmZpcmVFdmVudCgnd29yZGNvdW50Jyk7XHJcblx0ICAgIH0pO1xyXG5cdCAgICB2YXIgdGltZXI7XHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdyZWFkeScsZnVuY3Rpb24oKXtcclxuXHQgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICBkb21VdGlscy5vbihtZS5ib2R5LFwia2V5dXBcIixmdW5jdGlvbihldnQpe1xyXG5cdCAgICAgICAgICAgIHZhciBjb2RlID0gZXZ0LmtleUNvZGV8fGV2dC53aGljaCxcclxuXHQgICAgICAgICAgICAgICAgLy/lv73nlaXnmoTmjInplK4sY3RyLGFsdCxzaGlmdCzmlrnlkJHplK5cclxuXHQgICAgICAgICAgICAgICAgaWdub3JlcyA9IHtcIjE2XCI6MSxcIjE4XCI6MSxcIjIwXCI6MSxcIjM3XCI6MSxcIjM4XCI6MSxcIjM5XCI6MSxcIjQwXCI6MX07XHJcblx0ICAgICAgICAgICAgaWYoY29kZSBpbiBpZ25vcmVzKSByZXR1cm47XHJcblx0ICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuXHQgICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCd3b3JkY291bnQnKTtcclxuXHQgICAgICAgICAgICB9LDIwMClcclxuXHQgICAgICAgIH0pXHJcblx0ICAgIH0pO1xyXG5cdH07XHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL3BhZ2VicmVhay5qc1xyXG5cdC8qKlxyXG5cdCAqIOWIhumhteWKn+iDveaPkuS7tlxyXG5cdCAqIEBmaWxlXHJcblx0ICogQHNpbmNlIDEuMi42LjFcclxuXHQgKi9cclxuXHRVRS5wbHVnaW5zWydwYWdlYnJlYWsnXSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgIG5vdEJyZWFrVGFncyA9IFsndGQnXTtcclxuXHQgICAgbWUuc2V0T3B0KCdwYWdlQnJlYWtUYWcnLCdfdWVkaXRvcl9wYWdlX2JyZWFrX3RhZ18nKTtcclxuXHJcblx0ICAgIGZ1bmN0aW9uIGZpbGxOb2RlKG5vZGUpe1xyXG5cdCAgICAgICAgaWYoZG9tVXRpbHMuaXNFbXB0eUJsb2NrKG5vZGUpKXtcclxuXHQgICAgICAgICAgICB2YXIgZmlyc3RDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZCx0bXBOb2RlO1xyXG5cclxuXHQgICAgICAgICAgICB3aGlsZShmaXJzdENoaWxkICYmIGZpcnN0Q2hpbGQubm9kZVR5cGUgPT0gMSAmJiBkb21VdGlscy5pc0VtcHR5QmxvY2soZmlyc3RDaGlsZCkpe1xyXG5cdCAgICAgICAgICAgICAgICB0bXBOb2RlID0gZmlyc3RDaGlsZDtcclxuXHQgICAgICAgICAgICAgICAgZmlyc3RDaGlsZCA9IGZpcnN0Q2hpbGQuZmlyc3RDaGlsZDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgIXRtcE5vZGUgJiYgKHRtcE5vZGUgPSBub2RlKTtcclxuXHQgICAgICAgICAgICBkb21VdGlscy5maWxsTm9kZShtZS5kb2N1bWVudCx0bXBOb2RlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgICAvL+WIhumhteespuagt+W8j+a3u+WKoFxyXG5cclxuXHQgICAgbWUucmVhZHkoZnVuY3Rpb24oKXtcclxuXHQgICAgICAgIHV0aWxzLmNzc1J1bGUoJ3BhZ2VicmVhaycsJy5wYWdlYnJlYWt7ZGlzcGxheTpibG9jaztjbGVhcjpib3RoICFpbXBvcnRhbnQ7Y3Vyc29yOmRlZmF1bHQgIWltcG9ydGFudDt3aWR0aDogMTAwJSAhaW1wb3J0YW50O21hcmdpbjowO30nLG1lLmRvY3VtZW50KTtcclxuXHQgICAgfSk7XHJcblx0ICAgIGZ1bmN0aW9uIGlzSHIobm9kZSl7XHJcblx0ICAgICAgICByZXR1cm4gbm9kZSAmJiBub2RlLm5vZGVUeXBlID09IDEgJiYgbm9kZS50YWdOYW1lID09ICdIUicgJiYgbm9kZS5jbGFzc05hbWUgPT0gJ3BhZ2VicmVhayc7XHJcblx0ICAgIH1cclxuXHQgICAgbWUuYWRkSW5wdXRSdWxlKGZ1bmN0aW9uKHJvb3Qpe1xyXG5cdCAgICAgICAgcm9vdC50cmF2ZXJzYWwoZnVuY3Rpb24obm9kZSl7XHJcblx0ICAgICAgICAgICAgaWYobm9kZS50eXBlID09ICd0ZXh0JyAmJiBub2RlLmRhdGEgPT0gbWUub3B0aW9ucy5wYWdlQnJlYWtUYWcpe1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgaHIgPSBVRS51Tm9kZS5jcmVhdGVFbGVtZW50KCc8aHIgY2xhc3M9XCJwYWdlYnJlYWtcIiBub3NoYWRlPVwibm9zaGFkZVwiIHNpemU9XCI1XCIgc3R5bGU9XCItd2Via2l0LXVzZXItc2VsZWN0OiBub25lO1wiPicpO1xyXG5cdCAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGhyLG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSlcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9KVxyXG5cdCAgICB9KTtcclxuXHQgICAgbWUuYWRkT3V0cHV0UnVsZShmdW5jdGlvbihub2RlKXtcclxuXHQgICAgICAgIHV0aWxzLmVhY2gobm9kZS5nZXROb2Rlc0J5VGFnTmFtZSgnaHInKSxmdW5jdGlvbihuKXtcclxuXHQgICAgICAgICAgICBpZihuLmdldEF0dHIoJ2NsYXNzJykgPT0gJ3BhZ2VicmVhaycpe1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgdHh0ID0gVUUudU5vZGUuY3JlYXRlVGV4dChtZS5vcHRpb25zLnBhZ2VCcmVha1RhZyk7XHJcblx0ICAgICAgICAgICAgICAgIG4ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodHh0LG4pO1xyXG5cdCAgICAgICAgICAgICAgICBuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobik7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSlcclxuXHJcblx0ICAgIH0pO1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOaPkuWFpeWIhumhteesplxyXG5cdCAgICAgKiBAY29tbWFuZCBwYWdlYnJlYWtcclxuXHQgICAgICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAqIEByZW1pbmQg5Zyo6KGo5qC85Lit5o+S5YWl5YiG6aG156ym5Lya5oqK6KGo5qC85YiH5YiG5oiQ5Lik6YOo5YiGXHJcblx0ICAgICAqIEByZW1pbmQg6I635Y+W57yW6L6R5Zmo5YaF55qE5pWw5o2u5pe277yMIOe8lui+keWZqOS8muaKiuWIhumhteespui9rOaNouaIkOKAnF91ZWRpdG9yX3BhZ2VfYnJlYWtfdGFnX+KAneWtl+espuS4su+8jFxyXG5cdCAgICAgKiAgICAgICAgICDku6Xkvr/kuo7mj5DkuqTmlbDmja7liLDmnI3liqHlmajnq6/lkI7lpITnkIbliIbpobXjgIJcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdwYWdlYnJlYWsnKTsgLy/mj5LlhaXkuIDkuKpocuagh+etvu+8jOW4puacieagt+W8j+exu+WQjXBhZ2VicmVha1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICBtZS5jb21tYW5kc1sncGFnZWJyZWFrJ10gPSB7XHJcblx0ICAgICAgICBleGVjQ29tbWFuZDpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCksaHIgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdocicpO1xyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLnNldEF0dHJpYnV0ZXMoaHIse1xyXG5cdCAgICAgICAgICAgICAgICAnY2xhc3MnIDogJ3BhZ2VicmVhaycsXHJcblx0ICAgICAgICAgICAgICAgIG5vc2hhZGU6XCJub3NoYWRlXCIsXHJcblx0ICAgICAgICAgICAgICAgIHNpemU6XCI1XCJcclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICBkb21VdGlscy51blNlbGVjdGFibGUoaHIpO1xyXG5cdCAgICAgICAgICAgIC8vdGFibGXljZXni6zlpITnkIZcclxuXHQgICAgICAgICAgICB2YXIgbm9kZSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocmFuZ2Uuc3RhcnRDb250YWluZXIsIG5vdEJyZWFrVGFncywgdHJ1ZSksXHJcblxyXG5cdCAgICAgICAgICAgICAgICBwYXJlbnRzID0gW10sIHBOO1xyXG5cdCAgICAgICAgICAgIGlmIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHN3aXRjaCAobm9kZS50YWdOYW1lKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdURCc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcE4gPSBub2RlLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwTi5wcmV2aW91c1NpYmxpbmcpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShwTiwgJ3RhYmxlJyk7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlV3JhcERpdiA9IHRhYmxlLnBhcmVudE5vZGU7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodGFibGVXcmFwRGl2ICYmIHRhYmxlV3JhcERpdi5ub2RlVHlwZSA9PSAxXHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHRhYmxlV3JhcERpdi50YWdOYW1lID09ICdESVYnXHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHRhYmxlV3JhcERpdi5nZXRBdHRyaWJ1dGUoJ2Ryb3BkcmFnJylcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKXtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHRhYmxlV3JhcERpdix0cnVlKTtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGhyLCB0YWJsZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHMgPSBkb21VdGlscy5maW5kUGFyZW50cyhociwgdHJ1ZSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBOLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGhyLCBwTik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudHMgPSBkb21VdGlscy5maW5kUGFyZW50cyhocik7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwTiA9IHBhcmVudHNbMV07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhyICE9PSBwTikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5icmVha1BhcmVudChociwgcE4pO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy90YWJsZeimgemHjeWGmee7keWumuS4gOS4i+aLluaLvVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnYWZ0ZXJhZGp1c3R0YWJsZScsbWUuZG9jdW1lbnQpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIXJhbmdlLmNvbGxhcHNlZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2UuZGVsZXRlQ29udGVudHMoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCAhZG9tVXRpbHMuaXNCb2R5KHN0YXJ0KSAmJiBkb21VdGlscy5pc0Jsb2NrRWxtKHN0YXJ0KSAmJiBkb21VdGlscy5pc0VtcHR5Tm9kZShzdGFydCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZShzdGFydCkuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHN0YXJ0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKGhyKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHZhciBwTiA9IGhyLnBhcmVudE5vZGUsIG5leHROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICB3aGlsZSAoIWRvbVV0aWxzLmlzQm9keShwTikpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmJyZWFrUGFyZW50KGhyLCBwTik7XHJcblx0ICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGhyLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5leHROb2RlICYmIGRvbVV0aWxzLmlzRW1wdHlCbG9jayhuZXh0Tm9kZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobmV4dE5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcE4gPSBoci5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIG5leHROb2RlID0gaHIubmV4dFNpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBwcmUgPSBoci5wcmV2aW91c1NpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgIGlmKGlzSHIocHJlKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUocHJlKTtcclxuXHQgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICBwcmUgJiYgZmlsbE5vZGUocHJlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYoIW5leHROb2RlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBwID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGhyLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQocCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5maWxsTm9kZShtZS5kb2N1bWVudCxwKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHAsMCkuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoaXNIcihuZXh0Tm9kZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShuZXh0Tm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmaWxsTm9kZShuZXh0Tm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmRBZnRlcihocikuY29sbGFwc2UoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3QodHJ1ZSk7XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0fTtcclxuXHJcblx0Ly8gcGx1Z2lucy93b3JkaW1hZ2UuanNcclxuXHQvLy9pbXBvcnQgY29yZVxyXG5cdC8vL2NvbW1hbmRzIOacrOWcsOWbvueJh+W8leWvvOS4iuS8oFxyXG5cdC8vL2NvbW1hbmRzTmFtZSAgV29yZEltYWdlXHJcblx0Ly8vY29tbWFuZHNUaXRsZSAg5pys5Zyw5Zu+54mH5byV5a+85LiK5LygXHJcblx0Ly8vY29tbWFuZHNEaWFsb2cgIGRpYWxvZ3NcXHdvcmRpbWFnZVxyXG5cclxuXHRVRS5wbHVnaW4ucmVnaXN0ZXIoJ3dvcmRpbWFnZScsZnVuY3Rpb24oKXtcclxuXHQgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgIGltYWdlcyA9IFtdO1xyXG5cdCAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgY29tbWFuZHMgOiB7XHJcblx0ICAgICAgICAgICAgJ3dvcmRpbWFnZSc6e1xyXG5cdCAgICAgICAgICAgICAgICBleGVjQ29tbWFuZDpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW1hZ2VzID0gZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobWUuYm9keSwgXCJpbWdcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdXJsTGlzdCA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IGltYWdlc1tpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBjaS5nZXRBdHRyaWJ1dGUoXCJ3b3JkX2ltZ1wiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1cmwgJiYgdXJsTGlzdC5wdXNoKHVybCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXJsTGlzdDtcclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaW1hZ2VzID0gZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobWUuYm9keSwgXCJpbWdcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gaW1hZ2VzW2krK107KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNpLmdldEF0dHJpYnV0ZShcIndvcmRfaW1nXCIpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgbm90TmVlZFVuZG86dHJ1ZVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBpbnB1dFJ1bGUgOiBmdW5jdGlvbiAocm9vdCkge1xyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgnaW1nJyksIGZ1bmN0aW9uIChpbWcpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGF0dHJzID0gaW1nLmF0dHJzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgZmxhZyA9IHBhcnNlSW50KGF0dHJzLndpZHRoKSA8IDEyOCB8fCBwYXJzZUludChhdHRycy5oZWlnaHQpIDwgNDMsXHJcblx0ICAgICAgICAgICAgICAgICAgICBvcHQgPSBtZS5vcHRpb25zLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3JjID0gb3B0LlVFRElUT1JfSE9NRV9VUkwgKyAndGhlbWVzL2RlZmF1bHQvaW1hZ2VzL3NwYWNlci5naWYnO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoYXR0cnNbJ3NyYyddICYmIC9eKD86KGZpbGU6XFwvKykpLy50ZXN0KGF0dHJzWydzcmMnXSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGltZy5zZXRBdHRyKHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDphdHRycy53aWR0aCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6YXR0cnMuaGVpZ2h0LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGFsdDphdHRycy5hbHQsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd29yZF9pbWc6IGF0dHJzLnNyYyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzcmM6c3JjLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICdzdHlsZSc6J2JhY2tncm91bmQ6dXJsKCcgKyAoIGZsYWcgPyBvcHQudGhlbWVQYXRoICsgb3B0LnRoZW1lICsgJy9pbWFnZXMvd29yZC5naWYnIDogb3B0LmxhbmdQYXRoICsgb3B0LmxhbmcgKyAnL2ltYWdlcy9sb2NhbGltYWdlLnBuZycpICsgJykgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXI7Ym9yZGVyOjFweCBzb2xpZCAjZGRkJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSlcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHR9KTtcclxuXHJcblx0Ly8gcGx1Z2lucy9kcmFnZHJvcC5qc1xyXG5cdFVFLnBsdWdpbnNbJ2RyYWdkcm9wJ10gPSBmdW5jdGlvbiAoKXtcclxuXHJcblx0ICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgIG1lLnJlYWR5KGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICBkb21VdGlscy5vbih0aGlzLmJvZHksJ2RyYWdlbmQnLGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgdmFyIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgIHZhciBub2RlID0gcm5nLmdldENsb3NlZE5vZGUoKXx8bWUuc2VsZWN0aW9uLmdldFN0YXJ0KCk7XHJcblxyXG5cdCAgICAgICAgICAgIGlmKG5vZGUgJiYgbm9kZS50YWdOYW1lID09ICdJTUcnKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHZhciBwcmUgPSBub2RlLnByZXZpb3VzU2libGluZyxuZXh0O1xyXG5cdCAgICAgICAgICAgICAgICB3aGlsZShuZXh0ID0gbm9kZS5uZXh0U2libGluZyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihuZXh0Lm5vZGVUeXBlID09IDEgJiYgbmV4dC50YWdOYW1lID09ICdTUEFOJyAmJiAhbmV4dC5maXJzdENoaWxkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobmV4dClcclxuXHQgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYoKHByZSAmJiBwcmUubm9kZVR5cGUgPT0gMSAmJiAhZG9tVXRpbHMuaXNFbXB0eUJsb2NrKHByZSkgfHwgIXByZSkgJiYgKCFuZXh0IHx8IG5leHQgJiYgIWRvbVV0aWxzLmlzRW1wdHlCbG9jayhuZXh0KSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYocHJlICYmIHByZS50YWdOYW1lID09ICdQJyAmJiAhZG9tVXRpbHMuaXNFbXB0eUJsb2NrKHByZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHByZS5hcHBlbmRDaGlsZChub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5tb3ZlQ2hpbGQobmV4dCxwcmUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShuZXh0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1lbHNlICBpZihuZXh0ICYmIG5leHQudGFnTmFtZSA9PSAnUCcgJiYgIWRvbVV0aWxzLmlzRW1wdHlCbG9jayhuZXh0KSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC5pbnNlcnRCZWZvcmUobm9kZSxuZXh0LmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKHByZSAmJiBwcmUudGFnTmFtZSA9PSAnUCcgJiYgZG9tVXRpbHMuaXNFbXB0eUJsb2NrKHByZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShwcmUpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihuZXh0ICYmIG5leHQudGFnTmFtZSA9PSAnUCcgJiYgZG9tVXRpbHMuaXNFbXB0eUJsb2NrKG5leHQpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobmV4dClcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHJuZy5zZWxlY3ROb2RlKG5vZGUpLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdzYXZlU2NlbmUnKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH0pXHJcblx0ICAgIH0pO1xyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbih0eXBlLCBldnQpIHtcclxuXHQgICAgICAgIHZhciBrZXlDb2RlID0gZXZ0LmtleUNvZGUgfHwgZXZ0LndoaWNoO1xyXG5cdCAgICAgICAgaWYgKGtleUNvZGUgPT0gMTMpIHtcclxuXHQgICAgICAgICAgICB2YXIgcm5nID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCksbm9kZTtcclxuXHQgICAgICAgICAgICBpZihub2RlID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuc3RhcnRDb250YWluZXIsJ3AnLHRydWUpKXtcclxuXHQgICAgICAgICAgICAgICAgaWYoZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCd0ZXh0LWFsaWduJykgPT0gJ2NlbnRlcicpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlU3R5bGUobm9kZSwndGV4dC1hbGlnbicpXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0pXHJcblx0fTtcclxuXHJcblxyXG5cdC8vIHBsdWdpbnMvdW5kby5qc1xyXG5cdC8qKlxyXG5cdCAqIHVuZG8gcmVkb1xyXG5cdCAqIEBmaWxlXHJcblx0ICogQHNpbmNlIDEuMi42LjFcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog5pKk6ZSA5LiK5LiA5qyh5omn6KGM55qE5ZG95LukXHJcblx0ICogQGNvbW1hbmQgdW5kb1xyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAndW5kbycgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0LyoqXHJcblx0ICog6YeN5YGa5LiK5LiA5qyh5omn6KGM55qE5ZG95LukXHJcblx0ICogQGNvbW1hbmQgcmVkb1xyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICogQGV4YW1wbGVcclxuXHQgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAncmVkbycgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0VUUucGx1Z2luc1sndW5kbyddID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB2YXIgc2F2ZVNjZW5lVGltZXI7XHJcblx0ICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICBtYXhVbmRvQ291bnQgPSBtZS5vcHRpb25zLm1heFVuZG9Db3VudCB8fCAyMCxcclxuXHQgICAgICAgIG1heElucHV0Q291bnQgPSBtZS5vcHRpb25zLm1heElucHV0Q291bnQgfHwgMjAsXHJcblx0ICAgICAgICBmaWxsY2hhciA9IG5ldyBSZWdFeHAoZG9tVXRpbHMuZmlsbENoYXIgKyAnfDxcXC9ocj4nLCAnZ2knKTsvLyBpZeS8muS6p+eUn+WkmuS9meeahDwvaHI+XHJcblx0ICAgIHZhciBub05lZWRGaWxsQ2hhclRhZ3MgPSB7XHJcblx0ICAgICAgICBvbDoxLHVsOjEsdGFibGU6MSx0Ym9keToxLHRyOjEsYm9keToxXHJcblx0ICAgIH07XHJcblx0ICAgIHZhciBvcmdTdGF0ZSA9IG1lLm9wdGlvbnMuYXV0b0NsZWFyRW1wdHlOb2RlO1xyXG5cdCAgICBmdW5jdGlvbiBjb21wYXJlQWRkcihpbmRleEEsIGluZGV4Qikge1xyXG5cdCAgICAgICAgaWYgKGluZGV4QS5sZW5ndGggIT0gaW5kZXhCLmxlbmd0aClcclxuXHQgICAgICAgICAgICByZXR1cm4gMDtcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gaW5kZXhBLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG5cdCAgICAgICAgICAgIGlmIChpbmRleEFbaV0gIT0gaW5kZXhCW2ldKVxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gMFxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIDE7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIGNvbXBhcmVSYW5nZUFkZHJlc3Mocm5nQWRkckEsIHJuZ0FkZHJCKSB7XHJcblx0ICAgICAgICBpZiAocm5nQWRkckEuY29sbGFwc2VkICE9IHJuZ0FkZHJCLmNvbGxhcHNlZCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiAwO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKCFjb21wYXJlQWRkcihybmdBZGRyQS5zdGFydEFkZHJlc3MsIHJuZ0FkZHJCLnN0YXJ0QWRkcmVzcykgfHwgIWNvbXBhcmVBZGRyKHJuZ0FkZHJBLmVuZEFkZHJlc3MsIHJuZ0FkZHJCLmVuZEFkZHJlc3MpKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gMTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gVW5kb01hbmFnZXIoKSB7XHJcblx0ICAgICAgICB0aGlzLmxpc3QgPSBbXTtcclxuXHQgICAgICAgIHRoaXMuaW5kZXggPSAwO1xyXG5cdCAgICAgICAgdGhpcy5oYXNVbmRvID0gZmFsc2U7XHJcblx0ICAgICAgICB0aGlzLmhhc1JlZG8gPSBmYWxzZTtcclxuXHQgICAgICAgIHRoaXMudW5kbyA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5oYXNVbmRvKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghdGhpcy5saXN0W3RoaXMuaW5kZXggLSAxXSAmJiB0aGlzLmxpc3QubGVuZ3RoID09IDEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5saXN0W3RoaXMuaW5kZXhdLmNvbnRlbnQgPT0gdGhpcy5saXN0W3RoaXMuaW5kZXggLSAxXS5jb250ZW50KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4LS07XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbmRleCA9PSAwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzdG9yZSgwKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnJlc3RvcmUoLS10aGlzLmluZGV4KTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9O1xyXG5cdCAgICAgICAgdGhpcy5yZWRvID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLmhhc1JlZG8pIHtcclxuXHQgICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMubGlzdFt0aGlzLmluZGV4XS5jb250ZW50ID09IHRoaXMubGlzdFt0aGlzLmluZGV4ICsgMV0uY29udGVudCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRleCsrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5kZXggPT0gdGhpcy5saXN0Lmxlbmd0aCAtIDEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXN0b3JlKHRoaXMuaW5kZXgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZSgrK3RoaXMuaW5kZXgpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH07XHJcblxyXG5cdCAgICAgICAgdGhpcy5yZXN0b3JlID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMuZWRpdG9yO1xyXG5cdCAgICAgICAgICAgIHZhciBzY2VuZSA9IHRoaXMubGlzdFt0aGlzLmluZGV4XTtcclxuXHQgICAgICAgICAgICB2YXIgcm9vdCA9IFVFLmh0bWxwYXJzZXIoc2NlbmUuY29udGVudC5yZXBsYWNlKGZpbGxjaGFyLCAnJykpO1xyXG5cdCAgICAgICAgICAgIG1lLm9wdGlvbnMuYXV0b0NsZWFyRW1wdHlOb2RlID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgbWUuZmlsdGVySW5wdXRSdWxlKHJvb3QpO1xyXG5cdCAgICAgICAgICAgIG1lLm9wdGlvbnMuYXV0b0NsZWFyRW1wdHlOb2RlID0gb3JnU3RhdGU7XHJcblx0ICAgICAgICAgICAgLy90cmFjZTo4NzNcclxuXHQgICAgICAgICAgICAvL+WOu+aOieWxleS9jeesplxyXG5cdCAgICAgICAgICAgIG1lLmRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gcm9vdC50b0h0bWwoKTtcclxuXHQgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ2FmdGVyc2NlbmNlcmVzdG9yZScpO1xyXG5cdCAgICAgICAgICAgIC8v5aSE55CGdW5kb+WQjuepuuagvOS4jeWxleS9jeeahOmXrumimFxyXG5cdCAgICAgICAgICAgIGlmIChicm93c2VyLmllKSB7XHJcblx0ICAgICAgICAgICAgICAgIHV0aWxzLmVhY2goZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobWUuZG9jdW1lbnQsJ3RkIHRoIGNhcHRpb24gcCcpLGZ1bmN0aW9uKG5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoZG9tVXRpbHMuaXNFbXB0eU5vZGUobm9kZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmZpbGxOb2RlKG1lLmRvY3VtZW50LCBub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSlcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIHRyeXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHJuZyA9IG5ldyBkb20uUmFuZ2UobWUuZG9jdW1lbnQpLm1vdmVUb0FkZHJlc3Moc2NlbmUuYWRkcmVzcyk7XHJcblx0ICAgICAgICAgICAgICAgIHJuZy5zZWxlY3Qobm9OZWVkRmlsbENoYXJUYWdzW3JuZy5zdGFydENvbnRhaW5lci5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSk7XHJcblx0ICAgICAgICAgICAgfWNhdGNoKGUpe31cclxuXHJcblx0ICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHQgICAgICAgICAgICB0aGlzLmNsZWFyS2V5KCk7XHJcblx0ICAgICAgICAgICAgLy/kuI3og73mioroh6rlt7FyZXNldOS6hlxyXG5cdCAgICAgICAgICAgIG1lLmZpcmVFdmVudCgncmVzZXQnLCB0cnVlKTtcclxuXHQgICAgICAgIH07XHJcblxyXG5cdCAgICAgICAgdGhpcy5nZXRTY2VuZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLmVkaXRvcjtcclxuXHQgICAgICAgICAgICB2YXIgcm5nID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgIHJuZ0FkZHJlc3MgPSBybmcuY3JlYXRlQWRkcmVzcyhmYWxzZSx0cnVlKTtcclxuXHQgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ2JlZm9yZWdldHNjZW5lJyk7XHJcblx0ICAgICAgICAgICAgdmFyIHJvb3QgPSBVRS5odG1scGFyc2VyKG1lLmJvZHkuaW5uZXJIVE1MKTtcclxuXHQgICAgICAgICAgICBtZS5vcHRpb25zLmF1dG9DbGVhckVtcHR5Tm9kZSA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgIG1lLmZpbHRlck91dHB1dFJ1bGUocm9vdCk7XHJcblx0ICAgICAgICAgICAgbWUub3B0aW9ucy5hdXRvQ2xlYXJFbXB0eU5vZGUgPSBvcmdTdGF0ZTtcclxuXHQgICAgICAgICAgICB2YXIgY29udCA9IHJvb3QudG9IdG1sKCk7XHJcblx0ICAgICAgICAgICAgLy90cmFjZTozNDYxXHJcblx0ICAgICAgICAgICAgLy/ov5nkuKrkvJrlvJXotbflm57pgIDml7blr7zoh7TnqbrmoLzkuKLlpLHnmoTmg4XlhrVcclxuLy9cdCAgICAgICAgICAgIGJyb3dzZXIuaWUgJiYgKGNvbnQgPSBjb250LnJlcGxhY2UoLz4mbmJzcDs8L2csICc+PCcpLnJlcGxhY2UoL1xccyo8L2csICc8JykucmVwbGFjZSgvPlxccyovZywgJz4nKSk7XHJcblx0ICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdhZnRlcmdldHNjZW5lJyk7XHJcblxyXG5cdCAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgIGFkZHJlc3M6cm5nQWRkcmVzcyxcclxuXHQgICAgICAgICAgICAgICAgY29udGVudDpjb250XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIHRoaXMuc2F2ZSA9IGZ1bmN0aW9uIChub3RDb21wYXJlUmFuZ2Usbm90U2V0Q3Vyc29yKSB7XHJcblx0ICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHNhdmVTY2VuZVRpbWVyKTtcclxuXHQgICAgICAgICAgICB2YXIgY3VycmVudFNjZW5lID0gdGhpcy5nZXRTY2VuZShub3RTZXRDdXJzb3IpLFxyXG5cdCAgICAgICAgICAgICAgICBsYXN0U2NlbmUgPSB0aGlzLmxpc3RbdGhpcy5pbmRleF07XHJcblxyXG5cdCAgICAgICAgICAgIGlmKGxhc3RTY2VuZSAmJiBsYXN0U2NlbmUuY29udGVudCAhPSBjdXJyZW50U2NlbmUuY29udGVudCl7XHJcblx0ICAgICAgICAgICAgICAgIG1lLnRyaWdnZXIoJ2NvbnRlbnRjaGFuZ2UnKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAvL+WGheWuueebuOWQjOS9jee9ruebuOWQjOS4jeWtmFxyXG5cdCAgICAgICAgICAgIGlmIChsYXN0U2NlbmUgJiYgbGFzdFNjZW5lLmNvbnRlbnQgPT0gY3VycmVudFNjZW5lLmNvbnRlbnQgJiZcclxuXHQgICAgICAgICAgICAgICAgKCBub3RDb21wYXJlUmFuZ2UgPyAxIDogY29tcGFyZVJhbmdlQWRkcmVzcyhsYXN0U2NlbmUuYWRkcmVzcywgY3VycmVudFNjZW5lLmFkZHJlc3MpIClcclxuXHQgICAgICAgICAgICAgICAgKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy5saXN0ID0gdGhpcy5saXN0LnNsaWNlKDAsIHRoaXMuaW5kZXggKyAxKTtcclxuXHQgICAgICAgICAgICB0aGlzLmxpc3QucHVzaChjdXJyZW50U2NlbmUpO1xyXG5cdCAgICAgICAgICAgIC8v5aaC5p6c5aSn5LqO5pyA5aSn5pWw6YeP5LqG77yM5bCx5oqK5pyA5YmN55qE5YmU6ZmkXHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMubGlzdC5sZW5ndGggPiBtYXhVbmRvQ291bnQpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5saXN0LnNoaWZ0KCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMuaW5kZXggPSB0aGlzLmxpc3QubGVuZ3RoIC0gMTtcclxuXHQgICAgICAgICAgICB0aGlzLmNsZWFyS2V5KCk7XHJcblx0ICAgICAgICAgICAgLy/ot5/mlrB1bmRvL3JlZG/nirbmgIFcclxuXHQgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuXHQgICAgICAgIH07XHJcblx0ICAgICAgICB0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB0aGlzLmhhc1JlZG8gPSAhIXRoaXMubGlzdFt0aGlzLmluZGV4ICsgMV07XHJcblx0ICAgICAgICAgICAgdGhpcy5oYXNVbmRvID0gISF0aGlzLmxpc3RbdGhpcy5pbmRleCAtIDFdO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5saXN0ID0gW107XHJcblx0ICAgICAgICAgICAgdGhpcy5pbmRleCA9IDA7XHJcblx0ICAgICAgICAgICAgdGhpcy5oYXNVbmRvID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgdGhpcy5oYXNSZWRvID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgdGhpcy5jbGVhcktleSgpO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIHRoaXMuY2xlYXJLZXkgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAga2V5Y29udCA9IDA7XHJcblx0ICAgICAgICAgICAgbGFzdEtleUNvZGUgPSBudWxsO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgbWUudW5kb01hbmdlciA9IG5ldyBVbmRvTWFuYWdlcigpO1xyXG5cdCAgICBtZS51bmRvTWFuZ2VyLmVkaXRvciA9IG1lO1xyXG5cdCAgICBmdW5jdGlvbiBzYXZlU2NlbmUoKSB7XHJcblx0ICAgICAgICB0aGlzLnVuZG9NYW5nZXIuc2F2ZSgpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcignc2F2ZVNjZW5lJywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmNhbGwoYXJndW1lbnRzLDEpO1xyXG5cdCAgICAgICAgdGhpcy51bmRvTWFuZ2VyLnNhdmUuYXBwbHkodGhpcy51bmRvTWFuZ2VyLGFyZ3MpO1xyXG5cdCAgICB9KTtcclxuXHJcbi8vXHQgICAgbWUuYWRkTGlzdGVuZXIoJ2JlZm9yZWV4ZWNjb21tYW5kJywgc2F2ZVNjZW5lKTtcclxuLy9cdCAgICBtZS5hZGRMaXN0ZW5lcignYWZ0ZXJleGVjY29tbWFuZCcsIHNhdmVTY2VuZSk7XHJcblxyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcigncmVzZXQnLCBmdW5jdGlvbiAodHlwZSwgZXhjbHVkZSkge1xyXG5cdCAgICAgICAgaWYgKCFleGNsdWRlKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy51bmRvTWFuZ2VyLnJlc2V0KCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0pO1xyXG5cdCAgICBtZS5jb21tYW5kc1sncmVkbyddID0gbWUuY29tbWFuZHNbJ3VuZG8nXSA9IHtcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOmZ1bmN0aW9uIChjbWROYW1lKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy51bmRvTWFuZ2VyW2NtZE5hbWVdKCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6ZnVuY3Rpb24gKGNtZE5hbWUpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy51bmRvTWFuZ2VyWydoYXMnICsgKGNtZE5hbWUudG9Mb3dlckNhc2UoKSA9PSAndW5kbycgPyAnVW5kbycgOiAnUmVkbycpXSA/IDAgOiAtMTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBub3ROZWVkVW5kbzoxXHJcblx0ICAgIH07XHJcblxyXG5cdCAgICB2YXIga2V5cyA9IHtcclxuXHQgICAgICAgICAgICAvLyAgLypCYWNrc3BhY2UqLyA4OjEsIC8qRGVsZXRlKi8gNDY6MSxcclxuXHQgICAgICAgICAgICAvKlNoaWZ0Ki8gMTY6MSwgLypDdHJsKi8gMTc6MSwgLypBbHQqLyAxODoxLFxyXG5cdCAgICAgICAgICAgIDM3OjEsIDM4OjEsIDM5OjEsIDQwOjFcclxuXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAga2V5Y29udCA9IDAsXHJcblx0ICAgICAgICBsYXN0S2V5Q29kZTtcclxuXHQgICAgLy/ovpPlhaXms5XnirbmgIHkuIvkuI3orqHnrpflrZfnrKbmlbBcclxuXHQgICAgdmFyIGlucHV0VHlwZSA9IGZhbHNlO1xyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcigncmVhZHknLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICBkb21VdGlscy5vbih0aGlzLmJvZHksICdjb21wb3NpdGlvbnN0YXJ0JywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGlucHV0VHlwZSA9IHRydWU7XHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIGRvbVV0aWxzLm9uKHRoaXMuYm9keSwgJ2NvbXBvc2l0aW9uZW5kJywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGlucHV0VHlwZSA9IGZhbHNlO1xyXG5cdCAgICAgICAgfSlcclxuXHQgICAgfSk7XHJcblx0ICAgIC8v5b+r5o236ZSuXHJcblx0ICAgIG1lLmFkZHNob3J0Y3V0a2V5KHtcclxuXHQgICAgICAgIFwiVW5kb1wiOlwiY3RybCs5MFwiLCAvL3VuZG9cclxuXHQgICAgICAgIFwiUmVkb1wiOlwiY3RybCs4OVwiIC8vcmVkb1xyXG5cclxuXHQgICAgfSk7XHJcblx0ICAgIHZhciBpc0NvbGxhcHNlZCA9IHRydWU7XHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKHR5cGUsIGV2dCkge1xyXG5cclxuXHQgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICB2YXIga2V5Q29kZSA9IGV2dC5rZXlDb2RlIHx8IGV2dC53aGljaDtcclxuXHQgICAgICAgIGlmICgha2V5c1trZXlDb2RlXSAmJiAhZXZ0LmN0cmxLZXkgJiYgIWV2dC5tZXRhS2V5ICYmICFldnQuc2hpZnRLZXkgJiYgIWV2dC5hbHRLZXkpIHtcclxuXHQgICAgICAgICAgICBpZiAoaW5wdXRUeXBlKVxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG5cdCAgICAgICAgICAgIGlmKCFtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKS5jb2xsYXBzZWQpe1xyXG5cdCAgICAgICAgICAgICAgICBtZS51bmRvTWFuZ2VyLnNhdmUoZmFsc2UsdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGlzQ29sbGFwc2VkID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKG1lLnVuZG9NYW5nZXIubGlzdC5sZW5ndGggPT0gMCkge1xyXG5cdCAgICAgICAgICAgICAgICBtZS51bmRvTWFuZ2VyLnNhdmUodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGNsZWFyVGltZW91dChzYXZlU2NlbmVUaW1lcik7XHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gc2F2ZShjb250KXtcclxuXHQgICAgICAgICAgICAgICAgY29udC51bmRvTWFuZ2VyLnNhdmUoZmFsc2UsdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGNvbnQuZmlyZUV2ZW50KCdzZWxlY3Rpb25jaGFuZ2UnKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgc2F2ZVNjZW5lVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgICAgIGlmKGlucHV0VHlwZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW50ZXJhbFRpbWVyID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZighaW5wdXRUeXBlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZShtZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJhbFRpbWVyKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH0sMzAwKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHNhdmUobWUpO1xyXG5cdCAgICAgICAgICAgIH0sMjAwKTtcclxuXHJcblx0ICAgICAgICAgICAgbGFzdEtleUNvZGUgPSBrZXlDb2RlO1xyXG5cdCAgICAgICAgICAgIGtleWNvbnQrKztcclxuXHQgICAgICAgICAgICBpZiAoa2V5Y29udCA+PSBtYXhJbnB1dENvdW50ICkge1xyXG5cdCAgICAgICAgICAgICAgICBzYXZlKG1lKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfSk7XHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uICh0eXBlLCBldnQpIHtcclxuXHQgICAgICAgIHZhciBrZXlDb2RlID0gZXZ0LmtleUNvZGUgfHwgZXZ0LndoaWNoO1xyXG5cdCAgICAgICAgaWYgKCFrZXlzW2tleUNvZGVdICYmICFldnQuY3RybEtleSAmJiAhZXZ0Lm1ldGFLZXkgJiYgIWV2dC5zaGlmdEtleSAmJiAhZXZ0LmFsdEtleSkge1xyXG5cdCAgICAgICAgICAgIGlmIChpbnB1dFR5cGUpXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICBpZighaXNDb2xsYXBzZWQpe1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnVuZG9NYW5nZXIuc2F2ZShmYWxzZSx0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgaXNDb2xsYXBzZWQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfSk7XHJcblx0ICAgIC8v5omp5bGV5a6e5L6L77yM5re75Yqg5YWz6Zet5ZKM5byA5ZCv5ZG95LukdW5kb1xyXG5cdCAgICBtZS5zdG9wQ21kVW5kbyA9IGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICBtZS5fX2hhc0VudGVyRXhlY0NvbW1hbmQgPSB0cnVlO1xyXG5cdCAgICB9O1xyXG5cdCAgICBtZS5zdGFydENtZFVuZG8gPSBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgbWUuX19oYXNFbnRlckV4ZWNDb21tYW5kID0gZmFsc2U7XHJcblx0ICAgIH1cclxuXHR9O1xyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9jb3B5LmpzXHJcblx0VUUucGx1Z2luLnJlZ2lzdGVyKCdjb3B5JywgZnVuY3Rpb24gKCkge1xyXG5cclxuXHQgICAgdmFyIG1lID0gdGhpcztcclxuXHJcblx0ICAgIGZ1bmN0aW9uIGluaXRaZXJvQ2xpcGJvYXJkKCkge1xyXG5cclxuXHQgICAgICAgIFplcm9DbGlwYm9hcmQuY29uZmlnKHtcclxuXHQgICAgICAgICAgICBkZWJ1ZzogZmFsc2UsXHJcblx0ICAgICAgICAgICAgc3dmUGF0aDogbWUub3B0aW9ucy5VRURJVE9SX0hPTUVfVVJMICsgJ3RoaXJkLXBhcnR5L3plcm9jbGlwYm9hcmQvWmVyb0NsaXBib2FyZC5zd2YnXHJcblx0ICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICB2YXIgY2xpZW50ID0gbWUuemVyb2NsaXBib2FyZCA9IG5ldyBaZXJvQ2xpcGJvYXJkKCk7XHJcblxyXG5cdCAgICAgICAgLy8g5aSN5Yi25YaF5a65XHJcblx0ICAgICAgICBjbGllbnQub24oJ2NvcHknLCBmdW5jdGlvbiAoZSkge1xyXG5cdCAgICAgICAgICAgIHZhciBjbGllbnQgPSBlLmNsaWVudCxcclxuXHQgICAgICAgICAgICAgICAgcm5nID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuXHQgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQocm5nLmNsb25lQ29udGVudHMoKSk7XHJcblx0ICAgICAgICAgICAgY2xpZW50LnNldFRleHQoZGl2LmlubmVyVGV4dCB8fCBkaXYudGV4dENvbnRlbnQpO1xyXG5cdCAgICAgICAgICAgIGNsaWVudC5zZXRIdG1sKGRpdi5pbm5lckhUTUwpO1xyXG5cdCAgICAgICAgICAgIHJuZy5zZWxlY3QoKTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgLy8gaG92ZXLkuovku7bkvKDpgJLliLB0YXJnZXRcclxuXHQgICAgICAgIGNsaWVudC5vbignbW91c2VvdmVyIG1vdXNlb3V0JywgZnVuY3Rpb24gKGUpIHtcclxuXHQgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcblx0ICAgICAgICAgICAgaWYgKGUudHlwZSA9PSAnbW91c2VvdmVyJykge1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5hZGRDbGFzcyh0YXJnZXQsICdlZHVpLXN0YXRlLWhvdmVyJyk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChlLnR5cGUgPT0gJ21vdXNlb3V0Jykge1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmVDbGFzc2VzKHRhcmdldCwgJ2VkdWktc3RhdGUtaG92ZXInKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIC8vIGZsYXNo5Yqg6L295LiN5oiQ5YqfXHJcblx0ICAgICAgICBjbGllbnQub24oJ3dyb25nZmxhc2ggbm9mbGFzaCcsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICBaZXJvQ2xpcGJvYXJkLmRlc3Ryb3koKTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgYmluZEV2ZW50czoge1xyXG5cdCAgICAgICAgICAgICdyZWFkeSc6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCFicm93c2VyLmllKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Llplcm9DbGlwYm9hcmQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbml0WmVyb0NsaXBib2FyZCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5sb2FkRmlsZShkb2N1bWVudCwge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM6IG1lLm9wdGlvbnMuVUVESVRPUl9IT01FX1VSTCArIFwidGhpcmQtcGFydHkvemVyb2NsaXBib2FyZC9aZXJvQ2xpcGJvYXJkLmpzXCIsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogXCJzY3JpcHRcIixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0L2phdmFzY3JpcHRcIixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmZXI6IFwiZGVmZXJcIlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFplcm9DbGlwYm9hcmQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBjb21tYW5kczoge1xyXG5cdCAgICAgICAgICAgICdjb3B5Jzoge1xyXG5cdCAgICAgICAgICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKGNtZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFtZS5kb2N1bWVudC5leGVjQ29tbWFuZCgnY29weScpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQobWUuZ2V0TGFuZygnY29weW1zZycpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdH0pO1xyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9wYXN0ZS5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vaW1wb3J0IHBsdWdpbnMvaW5zZXJ0aHRtbC5qc1xyXG5cdC8vL2ltcG9ydCBwbHVnaW5zL3VuZG8uanNcclxuXHQvLy9pbXBvcnQgcGx1Z2lucy9zZXJpYWxpemUuanNcclxuXHQvLy9jb21tYW5kcyDnspjotLRcclxuXHQvLy9jb21tYW5kc05hbWUgIFBhc3RlUGxhaW5cclxuXHQvLy9jb21tYW5kc1RpdGxlICDnuq/mlofmnKznspjotLTmqKHlvI9cclxuXHQvKipcclxuXHQgKiBAZGVzY3JpcHRpb24g57KY6LS0XHJcblx0ICogQGF1dGhvciB6aGFueWlcclxuXHQgKi9cclxuXHRVRS5wbHVnaW5zWydwYXN0ZSddID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBnZXRDbGlwYm9hcmREYXRhKGNhbGxiYWNrKSB7XHJcblx0ICAgICAgICB2YXIgZG9jID0gdGhpcy5kb2N1bWVudDtcclxuXHQgICAgICAgIGlmIChkb2MuZ2V0RWxlbWVudEJ5SWQoJ2JhaWR1X3Bhc3RlYmluJykpIHtcclxuXHQgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgIGJrID0gcmFuZ2UuY3JlYXRlQm9va21hcmsoKSxcclxuXHQgICAgICAgIC8v5Yib5bu65Ymq6LS055qE5a655ZmoZGl2XHJcblx0ICAgICAgICAgICAgcGFzdGViaW4gPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0ICAgICAgICBwYXN0ZWJpbi5pZCA9ICdiYWlkdV9wYXN0ZWJpbic7XHJcblx0ICAgICAgICAvLyBTYWZhcmkg6KaB5rGCZGl25b+F6aG75pyJ5YaF5a6577yM5omN6IO957KY6LS05YaF5a656L+b5p2lXHJcblx0ICAgICAgICBicm93c2VyLndlYmtpdCAmJiBwYXN0ZWJpbi5hcHBlbmRDaGlsZChkb2MuY3JlYXRlVGV4dE5vZGUoZG9tVXRpbHMuZmlsbENoYXIgKyBkb21VdGlscy5maWxsQ2hhcikpO1xyXG5cdCAgICAgICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQocGFzdGViaW4pO1xyXG5cdCAgICAgICAgLy90cmFjZTo3MTcg6ZqQ6JeP55qEc3BhbuS4jeiDveW+l+WIsHRvcFxyXG5cdCAgICAgICAgLy9iay5zdGFydC5pbm5lckhUTUwgPSAnJm5ic3A7JztcclxuXHQgICAgICAgIGJrLnN0YXJ0LnN0eWxlLmRpc3BsYXkgPSAnJztcclxuXHQgICAgICAgIHBhc3RlYmluLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO3dpZHRoOjFweDtoZWlnaHQ6MXB4O292ZXJmbG93OmhpZGRlbjtsZWZ0Oi0xMDAwcHg7d2hpdGUtc3BhY2U6bm93cmFwO3RvcDpcIiArXHJcblx0ICAgICAgICAgICAgLy/opoHlnKjnjrDlnKjlhYnmoIflubPooYznmoTkvY3nva7liqDlhaXvvIzlkKbliJnkvJrlh7rnjrDot7PliqjnmoTpl67pophcclxuXHQgICAgICAgICAgICBkb21VdGlscy5nZXRYWShiay5zdGFydCkueSArICdweCc7XHJcblxyXG5cdCAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKHBhc3RlYmluKS5zZWxlY3QodHJ1ZSk7XHJcblxyXG5cdCAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgaWYgKGJyb3dzZXIud2Via2l0KSB7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBwYXN0ZWJpbnMgPSBkb2MucXVlcnlTZWxlY3RvckFsbCgnI2JhaWR1X3Bhc3RlYmluJyksIHBpOyBwaSA9IHBhc3RlYmluc1tpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzRW1wdHlOb2RlKHBpKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShwaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBhc3RlYmluID0gcGk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICAgICAgcGFzdGViaW4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChwYXN0ZWJpbik7XHJcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByYW5nZS5tb3ZlVG9Cb29rbWFyayhiaykuc2VsZWN0KHRydWUpO1xyXG5cdCAgICAgICAgICAgIGNhbGxiYWNrKHBhc3RlYmluKTtcclxuXHQgICAgICAgIH0sIDApO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICB2YXIgbWUgPSB0aGlzO1xyXG5cclxuXHQgICAgbWUuc2V0T3B0KHtcclxuXHQgICAgICAgIHJldGFpbk9ubHlMYWJlbFBhc3RlZCA6IGZhbHNlXHJcblx0ICAgIH0pO1xyXG5cclxuXHQgICAgdmFyIHR4dENvbnRlbnQsIGh0bWxDb250ZW50LCBhZGRyZXNzO1xyXG5cclxuXHQgICAgZnVuY3Rpb24gZ2V0UHVyZUh0bWwoaHRtbCl7XHJcblx0ICAgICAgICByZXR1cm4gaHRtbC5yZXBsYWNlKC88KFxcLz8pKFtcXHdcXC1dKykoW14+XSopPi9naSwgZnVuY3Rpb24gKGEsIGIsIHRhZ05hbWUsIGF0dHJzKSB7XHJcblx0ICAgICAgICAgICAgdGFnTmFtZSA9IHRhZ05hbWUudG9Mb3dlckNhc2UoKTtcclxuXHQgICAgICAgICAgICBpZiAoe2ltZzogMX1bdGFnTmFtZV0pIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGE7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGF0dHJzID0gYXR0cnMucmVwbGFjZSgvKFtcXHdcXC1dKj8pXFxzKj1cXHMqKChcIihbXlwiXSopXCIpfCgnKFteJ10qKScpfChbXlxccz5dKykpL2dpLCBmdW5jdGlvbiAoc3RyLCBhdHIsIHZhbCkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgJ3NyYyc6IDEsXHJcblx0ICAgICAgICAgICAgICAgICAgICAnaHJlZic6IDEsXHJcblx0ICAgICAgICAgICAgICAgICAgICAnbmFtZSc6IDFcclxuXHQgICAgICAgICAgICAgICAgfVthdHIudG9Mb3dlckNhc2UoKV0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBhdHIgKyAnPScgKyB2YWwgKyAnICdcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gJydcclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICBpZiAoe1xyXG5cdCAgICAgICAgICAgICAgICAnc3Bhbic6IDEsXHJcblx0ICAgICAgICAgICAgICAgICdkaXYnOiAxXHJcblx0ICAgICAgICAgICAgfVt0YWdOYW1lXSkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gJydcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuICc8JyArIGIgKyB0YWdOYW1lICsgJyAnICsgdXRpbHMudHJpbShhdHRycykgKyAnPidcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgIH1cclxuXHQgICAgZnVuY3Rpb24gZmlsdGVyKGRpdikge1xyXG5cdCAgICAgICAgdmFyIGh0bWw7XHJcblx0ICAgICAgICBpZiAoZGl2LmZpcnN0Q2hpbGQpIHtcclxuXHQgICAgICAgICAgICAvL+WOu+aOiWN1dOS4rea3u+WKoOeahOi+ueeVjOWAvFxyXG5cdCAgICAgICAgICAgIHZhciBub2RlcyA9IGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKGRpdiwgJ3NwYW4nKTtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbmk7IG5pID0gbm9kZXNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG5pLmlkID09ICdfYmFpZHVfY3V0X3N0YXJ0JyB8fCBuaS5pZCA9PSAnX2JhaWR1X2N1dF9lbmQnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobmkpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICBpZiAoYnJvd3Nlci53ZWJraXQpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHZhciBicnMgPSBkaXYucXVlcnlTZWxlY3RvckFsbCgnZGl2IGJyJyk7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBiaTsgYmkgPSBicnNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBwTiA9IGJpLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocE4udGFnTmFtZSA9PSAnRElWJyAmJiBwTi5jaGlsZE5vZGVzLmxlbmd0aCA9PSAxKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcE4uaW5uZXJIVE1MID0gJzxwPjxici8+PC9wPic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHBOKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB2YXIgZGl2cyA9IGRpdi5xdWVyeVNlbGVjdG9yQWxsKCcjYmFpZHVfcGFzdGViaW4nKTtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGRpOyBkaSA9IGRpdnNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0bXBQID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZGkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodG1wUCwgZGkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGRpLmZpcnN0Q2hpbGQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0bXBQLmFwcGVuZENoaWxkKGRpLmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGRpKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgdmFyIG1ldGFzID0gZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ21ldGEnKTtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IG1ldGFzW2krK107KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY2kpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICB2YXIgYnJzID0gZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ2JyJyk7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGNpID0gYnJzW2krK107KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoL15hcHBsZS0vaS50ZXN0KGNpLmNsYXNzTmFtZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY2kpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmIChicm93c2VyLmdlY2tvKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBkaXJ0eU5vZGVzID0gZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoJ1tfbW96X2RpcnR5XScpO1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBjaSA9IGRpcnR5Tm9kZXNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNpLnJlbW92ZUF0dHJpYnV0ZSgnX21vel9kaXJ0eScpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmICghYnJvd3Nlci5pZSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgc3BhbnMgPSBkaXYucXVlcnlTZWxlY3RvckFsbCgnc3Bhbi5BcHBsZS1zdHlsZS1zcGFuJyk7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSBzcGFuc1tpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGNpLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgLy9pZeS4i+S9v+eUqGlubmVySFRNTOS8muS6p+eUn+WkmuS9meeahFxcclxcbuWtl+espu+8jOS5n+S8muS6p+eUnyZuYnNwO+i/memHjOi/h+a7pOaOiVxyXG5cdCAgICAgICAgICAgIGh0bWwgPSBkaXYuaW5uZXJIVE1MOy8vLnJlcGxhY2UoLz4oPzooXFxzfCZuYnNwOykqPyk8L2csJz48Jyk7XHJcblxyXG5cdCAgICAgICAgICAgIC8v6L+H5rukd29yZOeymOi0tOi/h+adpeeahOWGl+S9meWxnuaAp1xyXG5cdCAgICAgICAgICAgIGh0bWwgPSBVRS5maWx0ZXJXb3JkKGh0bWwpO1xyXG5cdCAgICAgICAgICAgIC8v5Y+W5raI5LqG5b+955Wl56m655m955qE56ys5LqM5Liq5Y+C5pWw77yM57KY6LS06L+H5p2l55qE5pyJ5Lqb5piv5pyJ56m655m955qE77yM5Lya6KKr5aWX5LiK55u45YWz55qE5qCH562+XHJcblx0ICAgICAgICAgICAgdmFyIHJvb3QgPSBVRS5odG1scGFyc2VyKGh0bWwpO1xyXG5cdCAgICAgICAgICAgIC8v5aaC5p6c57uZ5LqG6L+H5ruk6KeE5YiZ5bCx5YWI6L+b6KGM6L+H5rukXHJcblx0ICAgICAgICAgICAgaWYgKG1lLm9wdGlvbnMuZmlsdGVyUnVsZXMpIHtcclxuXHQgICAgICAgICAgICAgICAgVUUuZmlsdGVyTm9kZShyb290LCBtZS5vcHRpb25zLmZpbHRlclJ1bGVzKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgLy/miafooYzpu5jorqTnmoTlpITnkIZcclxuXHQgICAgICAgICAgICBtZS5maWx0ZXJJbnB1dFJ1bGUocm9vdCk7XHJcblx0ICAgICAgICAgICAgLy/pkojlr7ljaHJvbWXnmoTlpITnkIZcclxuXHQgICAgICAgICAgICBpZiAoYnJvd3Nlci53ZWJraXQpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGJyID0gcm9vdC5sYXN0Q2hpbGQoKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGJyICYmIGJyLnR5cGUgPT0gJ2VsZW1lbnQnICYmIGJyLnRhZ05hbWUgPT0gJ2JyJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcm9vdC5yZW1vdmVDaGlsZChicilcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB1dGlscy5lYWNoKG1lLmJvZHkucXVlcnlTZWxlY3RvckFsbCgnZGl2JyksIGZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZG9tVXRpbHMuaXNFbXB0eUJsb2NrKG5vZGUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKG5vZGUsdHJ1ZSlcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSlcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaHRtbCA9IHsnaHRtbCc6IHJvb3QudG9IdG1sKCl9O1xyXG5cdCAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnYmVmb3JlcGFzdGUnLCBodG1sLCByb290KTtcclxuXHQgICAgICAgICAgICAvL+aKouS6hum7mOiupOeahOeymOi0tO+8jOmCo+WQjui+ueeahOWGheWuueWwseS4jeaJp+ihjOS6hu+8jOavlOWmguihqOagvOeymOi0tFxyXG5cdCAgICAgICAgICAgIGlmKCFodG1sLmh0bWwpe1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJvb3QgPSBVRS5odG1scGFyc2VyKGh0bWwuaHRtbCx0cnVlKTtcclxuXHQgICAgICAgICAgICAvL+WmguaenOW8gOWQr+S6hue6r+aWh+acrOaooeW8j1xyXG5cdCAgICAgICAgICAgIGlmIChtZS5xdWVyeUNvbW1hbmRTdGF0ZSgncGFzdGVwbGFpbicpID09PSAxKSB7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmV4ZWNDb21tYW5kKCdpbnNlcnRIdG1sJywgVUUuZmlsdGVyTm9kZShyb290LCBtZS5vcHRpb25zLmZpbHRlclR4dFJ1bGVzKS50b0h0bWwoKSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgLy/mlofmnKzmqKHlvI9cclxuXHQgICAgICAgICAgICAgICAgVUUuZmlsdGVyTm9kZShyb290LCBtZS5vcHRpb25zLmZpbHRlclR4dFJ1bGVzKTtcclxuXHQgICAgICAgICAgICAgICAgdHh0Q29udGVudCA9IHJvb3QudG9IdG1sKCk7XHJcblx0ICAgICAgICAgICAgICAgIC8v5a6M5YWo5qih5byPXHJcblx0ICAgICAgICAgICAgICAgIGh0bWxDb250ZW50ID0gaHRtbC5odG1sO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgYWRkcmVzcyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpLmNyZWF0ZUFkZHJlc3ModHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmV4ZWNDb21tYW5kKCdpbnNlcnRIdG1sJywgbWUuZ2V0T3B0KCdyZXRhaW5Pbmx5TGFiZWxQYXN0ZWQnKSA9PT0gdHJ1ZSA/ICBnZXRQdXJlSHRtbChodG1sQ29udGVudCkgOiBodG1sQ29udGVudCwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIG1lLmZpcmVFdmVudChcImFmdGVycGFzdGVcIiwgaHRtbCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdwYXN0ZVRyYW5zZmVyJywgZnVuY3Rpb24gKGNtZCwgcGxhaW5UeXBlKSB7XHJcblxyXG5cdCAgICAgICAgaWYgKGFkZHJlc3MgJiYgdHh0Q29udGVudCAmJiBodG1sQ29udGVudCAmJiB0eHRDb250ZW50ICE9IGh0bWxDb250ZW50KSB7XHJcblx0ICAgICAgICAgICAgdmFyIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgcmFuZ2UubW92ZVRvQWRkcmVzcyhhZGRyZXNzLCB0cnVlKTtcclxuXHJcblx0ICAgICAgICAgICAgaWYgKCFyYW5nZS5jb2xsYXBzZWQpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlICghZG9tVXRpbHMuaXNCb2R5KHJhbmdlLnN0YXJ0Q29udGFpbmVyKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKHN0YXJ0Lm5vZGVUeXBlID09IDEpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldF07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoIXN0YXJ0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRCZWZvcmUocmFuZ2Uuc3RhcnRDb250YWluZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZSA9IHN0YXJ0LnByZXZpb3VzU2libGluZztcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYocHJlICYmIHByZS5ub2RlVHlwZSA9PSAzICYmIG5ldyBSZWdFeHAoJ15bXFxuXFxyXFx0ICcrZG9tVXRpbHMuZmlsbENoYXIrJ10qJCcpLnRlc3QocHJlLm5vZGVWYWx1ZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZShwcmUpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYocmFuZ2Uuc3RhcnRPZmZzZXQgPT0gMCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRCZWZvcmUocmFuZ2Uuc3RhcnRDb250YWluZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlICghZG9tVXRpbHMuaXNCb2R5KHJhbmdlLmVuZENvbnRhaW5lcilcclxuXHQgICAgICAgICAgICAgICAgICAgICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGVuZCA9IHJhbmdlLmVuZENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGVuZC5ub2RlVHlwZSA9PSAxKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbmQgPSBlbmQuY2hpbGROb2Rlc1tyYW5nZS5lbmRPZmZzZXRdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFlbmQpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmRBZnRlcihyYW5nZS5lbmRDb250YWluZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHQgPSBlbmQubmV4dFNpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYobmV4dCAmJiBuZXh0Lm5vZGVUeXBlID09IDMgJiYgbmV3IFJlZ0V4cCgnXltcXG5cXHJcXHQnK2RvbVV0aWxzLmZpbGxDaGFyKyddKiQnKS50ZXN0KG5leHQubm9kZVZhbHVlKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZEFmdGVyKG5leHQpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYocmFuZ2UuZW5kT2Zmc2V0ID09IHJhbmdlLmVuZENvbnRhaW5lcltyYW5nZS5lbmRDb250YWluZXIubm9kZVR5cGUgPT0gMyA/ICdub2RlVmFsdWUnIDogJ2NoaWxkTm9kZXMnXS5sZW5ndGgpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZEFmdGVyKHJhbmdlLmVuZENvbnRhaW5lcik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICByYW5nZS5kZWxldGVDb250ZW50cygpO1xyXG5cdCAgICAgICAgICAgIHJhbmdlLnNlbGVjdCh0cnVlKTtcclxuXHQgICAgICAgICAgICBtZS5fX2hhc0VudGVyRXhlY0NvbW1hbmQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgIHZhciBodG1sID0gaHRtbENvbnRlbnQ7XHJcblx0ICAgICAgICAgICAgaWYgKHBsYWluVHlwZSA9PT0gMiApIHtcclxuXHQgICAgICAgICAgICAgICAgaHRtbCA9IGdldFB1cmVIdG1sKGh0bWwpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAocGxhaW5UeXBlKSB7XHJcblx0ICAgICAgICAgICAgICAgIGh0bWwgPSB0eHRDb250ZW50O1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBtZS5leGVjQ29tbWFuZCgnaW5zZXJ0aHRtbCcsIGh0bWwsIHRydWUpO1xyXG5cdCAgICAgICAgICAgIG1lLl9faGFzRW50ZXJFeGVjQ29tbWFuZCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgIHZhciBybmcgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICB3aGlsZSAoIWRvbVV0aWxzLmlzQm9keShybmcuc3RhcnRDb250YWluZXIpICYmICFybmcuc3RhcnRPZmZzZXQgJiZcclxuXHQgICAgICAgICAgICAgICAgcm5nLnN0YXJ0Q29udGFpbmVyW3JuZy5zdGFydENvbnRhaW5lci5ub2RlVHlwZSA9PSAzID8gJ25vZGVWYWx1ZScgOiAnY2hpbGROb2RlcyddLmxlbmd0aFxyXG5cdCAgICAgICAgICAgICAgICApIHtcclxuXHQgICAgICAgICAgICAgICAgcm5nLnNldFN0YXJ0QmVmb3JlKHJuZy5zdGFydENvbnRhaW5lcik7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciB0bXBBZGRyZXNzID0gcm5nLmNyZWF0ZUFkZHJlc3ModHJ1ZSk7XHJcblx0ICAgICAgICAgICAgYWRkcmVzcy5lbmRBZGRyZXNzID0gdG1wQWRkcmVzcy5zdGFydEFkZHJlc3M7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0pO1xyXG5cclxuXHQgICAgbWUuYWRkTGlzdGVuZXIoJ3JlYWR5JywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgZG9tVXRpbHMub24obWUuYm9keSwgJ2N1dCcsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICBpZiAoIXJhbmdlLmNvbGxhcHNlZCAmJiBtZS51bmRvTWFuZ2VyKSB7XHJcblx0ICAgICAgICAgICAgICAgIG1lLnVuZG9NYW5nZXIuc2F2ZSgpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgIC8vaWXkuItiZWZvcmVwYXN0ZeWcqOeCueWHu+WPs+mUruaXtuS5n+S8muinpuWPke+8jOaJgOS7peeUqOebkeaOp+mUruebmOaJjeWkhOeQhlxyXG5cdCAgICAgICAgZG9tVXRpbHMub24obWUuYm9keSwgYnJvd3Nlci5pZSB8fCBicm93c2VyLm9wZXJhID8gJ2tleWRvd24nIDogJ3Bhc3RlJywgZnVuY3Rpb24gKGUpIHtcclxuXHQgICAgICAgICAgICBpZiAoKGJyb3dzZXIuaWUgfHwgYnJvd3Nlci5vcGVyYSkgJiYgKCghZS5jdHJsS2V5ICYmICFlLm1ldGFLZXkpIHx8IGUua2V5Q29kZSAhPSAnODYnKSkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGdldENsaXBib2FyZERhdGEuY2FsbChtZSwgZnVuY3Rpb24gKGRpdikge1xyXG5cdCAgICAgICAgICAgICAgICBmaWx0ZXIoZGl2KTtcclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgIH0pO1xyXG5cclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICBtZS5jb21tYW5kc1sncGFzdGUnXSA9IHtcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoY21kKSB7XHJcblx0ICAgICAgICAgICAgaWYgKGJyb3dzZXIuaWUpIHtcclxuXHQgICAgICAgICAgICAgICAgZ2V0Q2xpcGJvYXJkRGF0YS5jYWxsKG1lLCBmdW5jdGlvbiAoZGl2KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmaWx0ZXIoZGl2KTtcclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmRvY3VtZW50LmV4ZWNDb21tYW5kKCdwYXN0ZScpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIGFsZXJ0KG1lLmdldExhbmcoJ3Bhc3RlbXNnJykpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdH07XHJcblxyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9wdXJldHh0cGFzdGUuanNcclxuXHQvKipcclxuXHQgKiDnuq/mlofmnKznspjotLTmj5Lku7ZcclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdFVFLnBsdWdpbnNbJ3Bhc3RlcGxhaW4nXSA9IGZ1bmN0aW9uKCl7XHJcblx0ICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgIG1lLnNldE9wdCh7XHJcblx0ICAgICAgICAncGFzdGVwbGFpbic6ZmFsc2UsXHJcblx0ICAgICAgICAnZmlsdGVyVHh0UnVsZXMnIDogZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICBmdW5jdGlvbiB0cmFuc1Aobm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgIG5vZGUudGFnTmFtZSA9ICdwJztcclxuXHQgICAgICAgICAgICAgICAgbm9kZS5zZXRTdHlsZSgpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBmdW5jdGlvbiByZW1vdmVOb2RlKG5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSx0cnVlKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgICAgICAgICAvL+ebtOaOpeWIoOmZpOWPiuWFtuWtl+iKgueCueWGheWuuVxyXG5cdCAgICAgICAgICAgICAgICAnLScgOiAnc2NyaXB0IHN0eWxlIG9iamVjdCBpZnJhbWUgZW1iZWQgaW5wdXQgc2VsZWN0JyxcclxuXHQgICAgICAgICAgICAgICAgJ3AnOiB7JDp7fX0sXHJcblx0ICAgICAgICAgICAgICAgICdicic6eyQ6e319LFxyXG5cdCAgICAgICAgICAgICAgICBkaXY6IGZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdG1wTm9kZSwgcCA9IFVFLnVOb2RlLmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0bXBOb2RlID0gbm9kZS5maXJzdENoaWxkKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG1wTm9kZS50eXBlID09ICd0ZXh0JyB8fCAhVUUuZG9tLmR0ZC4kYmxvY2tbdG1wTm9kZS50YWdOYW1lXSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmFwcGVuZENoaWxkKHRtcE5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwLmZpcnN0Q2hpbGQoKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwLCBub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAgPSBVRS51Tm9kZS5jcmVhdGVFbGVtZW50KCdwJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRtcE5vZGUsIG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHAuZmlyc3RDaGlsZCgpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwLCBub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgb2w6IHJlbW92ZU5vZGUsXHJcblx0ICAgICAgICAgICAgICAgIHVsOiByZW1vdmVOb2RlLFxyXG5cdCAgICAgICAgICAgICAgICBkbDpyZW1vdmVOb2RlLFxyXG5cdCAgICAgICAgICAgICAgICBkdDpyZW1vdmVOb2RlLFxyXG5cdCAgICAgICAgICAgICAgICBkZDpyZW1vdmVOb2RlLFxyXG5cdCAgICAgICAgICAgICAgICAnbGknOnJlbW92ZU5vZGUsXHJcblx0ICAgICAgICAgICAgICAgICdjYXB0aW9uJzp0cmFuc1AsXHJcblx0ICAgICAgICAgICAgICAgICd0aCc6dHJhbnNQLFxyXG5cdCAgICAgICAgICAgICAgICAndHInOnRyYW5zUCxcclxuXHQgICAgICAgICAgICAgICAgJ2gxJzp0cmFuc1AsJ2gyJzp0cmFuc1AsJ2gzJzp0cmFuc1AsJ2g0Jzp0cmFuc1AsJ2g1Jzp0cmFuc1AsJ2g2Jzp0cmFuc1AsXHJcblx0ICAgICAgICAgICAgICAgICd0ZCc6ZnVuY3Rpb24obm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy/msqHmnInlhoXlrrnnmoR0ZOebtOaOpeWIoOaOiVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0eHQgPSAhIW5vZGUuaW5uZXJUZXh0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYodHh0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEFmdGVyKFVFLnVOb2RlLmNyZWF0ZVRleHQoJyAmbmJzcDsgJm5ic3A7Jyksbm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSxub2RlLmlubmVyVGV4dCgpKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSgpXHJcblx0ICAgIH0pO1xyXG5cdCAgICAvL+aaguaXtui/memHjOaUr+aMgeS4gOS4i+iAgeeJiOacrOeahOWxnuaAp1xyXG5cdCAgICB2YXIgcGFzdGVwbGFpbiA9IG1lLm9wdGlvbnMucGFzdGVwbGFpbjtcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDlkK/nlKjmiJblj5bmtojnuq/mlofmnKznspjotLTmqKHlvI9cclxuXHQgICAgICogQGNvbW1hbmQgcGFzdGVwbGFpblxyXG5cdCAgICAgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBlZGl0b3IucXVlcnlDb21tYW5kU3RhdGUoICdwYXN0ZXBsYWluJyApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5p+l6K+i5b2T5YmN5piv5ZCm5aSE5LqO57qv5paH5pys57KY6LS05qih5byPXHJcblx0ICAgICAqIEBjb21tYW5kIHBhc3RlcGxhaW5cclxuXHQgICAgICogQG1ldGhvZCBxdWVyeUNvbW1hbmRTdGF0ZVxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAqIEByZXR1cm4geyBpbnQgfSDlpoLmnpzlpITkuo7nuq/mlofmnKzmqKHlvI/vvIzov5Tlm54x77yM5ZCm5YiZ77yM6L+U5ZueMFxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIGVkaXRvci5xdWVyeUNvbW1hbmRTdGF0ZSggJ3Bhc3RlcGxhaW4nICk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgbWUuY29tbWFuZHNbJ3Bhc3RlcGxhaW4nXSA9IHtcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICByZXR1cm4gcGFzdGVwbGFpbiA/IDEgOiAwO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICBwYXN0ZXBsYWluID0gIXBhc3RlcGxhaW58MDtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBub3ROZWVkVW5kbyA6IDFcclxuXHQgICAgfTtcclxuXHR9O1xyXG5cclxuXHQvLyBwbHVnaW5zL2xpc3QuanNcclxuXHQvKipcclxuXHQgKiDmnInluo/liJfooags5peg5bqP5YiX6KGo5o+S5Lu2XHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHRVRS5wbHVnaW5zWydsaXN0J10gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICBub3RFeGNoYW5nZSA9IHtcclxuXHQgICAgICAgICAgICAnVEQnOjEsXHJcblx0ICAgICAgICAgICAgJ1BSRSc6MSxcclxuXHQgICAgICAgICAgICAnQkxPQ0tRVU9URSc6MVxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgdmFyIGN1c3RvbVN0eWxlID0ge1xyXG5cdCAgICAgICAgJ2NuJyA6ICdjbi0xLScsXHJcblx0ICAgICAgICAnY24xJyA6ICdjbi0yLScsXHJcblx0ICAgICAgICAnY24yJyA6ICdjbi0zLScsXHJcblx0ICAgICAgICAnbnVtJzogICdudW0tMS0nLFxyXG5cdCAgICAgICAgJ251bTEnIDogJ251bS0yLScsXHJcblx0ICAgICAgICAnbnVtMicgOiAnbnVtLTMtJyxcclxuXHQgICAgICAgICdkYXNoJyAgOiAnZGFzaCcsXHJcblx0ICAgICAgICAnZG90JzonZG90J1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgbWUuc2V0T3B0KCB7XHJcblx0ICAgICAgICAnYXV0b1RyYW5zV29yZFRvTGlzdCc6ZmFsc2UsXHJcblx0ICAgICAgICAnaW5zZXJ0b3JkZXJlZGxpc3QnOntcclxuXHQgICAgICAgICAgICAnbnVtJzonJyxcclxuXHQgICAgICAgICAgICAnbnVtMSc6JycsXHJcblx0ICAgICAgICAgICAgJ251bTInOicnLFxyXG5cdCAgICAgICAgICAgICdjbic6JycsXHJcblx0ICAgICAgICAgICAgJ2NuMSc6JycsXHJcblx0ICAgICAgICAgICAgJ2NuMic6JycsXHJcblx0ICAgICAgICAgICAgJ2RlY2ltYWwnOicnLFxyXG5cdCAgICAgICAgICAgICdsb3dlci1hbHBoYSc6JycsXHJcblx0ICAgICAgICAgICAgJ2xvd2VyLXJvbWFuJzonJyxcclxuXHQgICAgICAgICAgICAndXBwZXItYWxwaGEnOicnLFxyXG5cdCAgICAgICAgICAgICd1cHBlci1yb21hbic6JydcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAnaW5zZXJ0dW5vcmRlcmVkbGlzdCc6e1xyXG5cdCAgICAgICAgICAgICdjaXJjbGUnOicnLFxyXG5cdCAgICAgICAgICAgICdkaXNjJzonJyxcclxuXHQgICAgICAgICAgICAnc3F1YXJlJzonJyxcclxuXHQgICAgICAgICAgICAnZGFzaCcgOiAnJyxcclxuXHQgICAgICAgICAgICAnZG90JzonJ1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGxpc3REZWZhdWx0UGFkZGluZ0xlZnQgOiAnMzAnLFxyXG5cdCAgICAgICAgbGlzdGljb25wYXRoIDogJ2h0dHA6Ly9icy5iYWlkdS5jb20vbGlzdGljb24vJyxcclxuXHQgICAgICAgIG1heExpc3RMZXZlbCA6IC0xLC8vLTHkuI3pmZDliLZcclxuXHQgICAgICAgIGRpc2FibGVQSW5MaXN0OmZhbHNlXHJcblx0ICAgIH0gKTtcclxuXHQgICAgZnVuY3Rpb24gbGlzdFRvQXJyYXkobGlzdCl7XHJcblx0ICAgICAgICB2YXIgYXJyID0gW107XHJcblx0ICAgICAgICBmb3IodmFyIHAgaW4gbGlzdCl7XHJcblx0ICAgICAgICAgICAgYXJyLnB1c2gocClcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiBhcnI7XHJcblx0ICAgIH1cclxuXHQgICAgdmFyIGxpc3RTdHlsZSA9IHtcclxuXHQgICAgICAgICdPTCc6bGlzdFRvQXJyYXkobWUub3B0aW9ucy5pbnNlcnRvcmRlcmVkbGlzdCksXHJcblx0ICAgICAgICAnVUwnOmxpc3RUb0FycmF5KG1lLm9wdGlvbnMuaW5zZXJ0dW5vcmRlcmVkbGlzdClcclxuXHQgICAgfTtcclxuXHQgICAgdmFyIGxpaWNvbnBhdGggPSBtZS5vcHRpb25zLmxpc3RpY29ucGF0aDtcclxuXHJcblx0ICAgIC8v5qC55o2u55So5oi36YWN572u77yM6LCD5pW0Y3VzdG9tU3R5bGVcclxuXHQgICAgZm9yKHZhciBzIGluIGN1c3RvbVN0eWxlKXtcclxuXHQgICAgICAgIGlmKCFtZS5vcHRpb25zLmluc2VydG9yZGVyZWRsaXN0Lmhhc093blByb3BlcnR5KHMpICYmICFtZS5vcHRpb25zLmluc2VydHVub3JkZXJlZGxpc3QuaGFzT3duUHJvcGVydHkocykpe1xyXG5cdCAgICAgICAgICAgIGRlbGV0ZSBjdXN0b21TdHlsZVtzXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgbWUucmVhZHkoZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIGN1c3RvbUNzcyA9IFtdO1xyXG5cdCAgICAgICAgZm9yKHZhciBwIGluIGN1c3RvbVN0eWxlKXtcclxuXHQgICAgICAgICAgICBpZihwID09ICdkYXNoJyB8fCBwID09ICdkb3QnKXtcclxuXHQgICAgICAgICAgICAgICAgY3VzdG9tQ3NzLnB1c2goJ2xpLmxpc3QtJyArIGN1c3RvbVN0eWxlW3BdICsgJ3tiYWNrZ3JvdW5kLWltYWdlOnVybCgnICsgbGlpY29ucGF0aCArY3VzdG9tU3R5bGVbcF0rJy5naWYpfScpO1xyXG5cdCAgICAgICAgICAgICAgICBjdXN0b21Dc3MucHVzaCgndWwuY3VzdG9tXycrcCsne2xpc3Qtc3R5bGU6bm9uZTt9dWwuY3VzdG9tXycrcCsnIGxpe2JhY2tncm91bmQtcG9zaXRpb246MCAzcHg7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0fScpO1xyXG5cdCAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICBmb3IodmFyIGk9IDA7aTw5OTtpKyspe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ3NzLnB1c2goJ2xpLmxpc3QtJyArIGN1c3RvbVN0eWxlW3BdICsgaSArICd7YmFja2dyb3VuZC1pbWFnZTp1cmwoJyArIGxpaWNvbnBhdGggKyAnbGlzdC0nK2N1c3RvbVN0eWxlW3BdICsgaSArICcuZ2lmKX0nKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGN1c3RvbUNzcy5wdXNoKCdvbC5jdXN0b21fJytwKyd7bGlzdC1zdHlsZTpub25lO31vbC5jdXN0b21fJytwKycgbGl7YmFja2dyb3VuZC1wb3NpdGlvbjowIDNweDtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXR9Jyk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHN3aXRjaChwKXtcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnY24nOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ3NzLnB1c2goJ2xpLmxpc3QtJytwKyctcGFkZGluZ2xlZnQtMXtwYWRkaW5nLWxlZnQ6MjVweH0nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNzcy5wdXNoKCdsaS5saXN0LScrcCsnLXBhZGRpbmdsZWZ0LTJ7cGFkZGluZy1sZWZ0OjQwcHh9Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjdXN0b21Dc3MucHVzaCgnbGkubGlzdC0nK3ArJy1wYWRkaW5nbGVmdC0ze3BhZGRpbmctbGVmdDo1NXB4fScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ2NuMSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICBjdXN0b21Dc3MucHVzaCgnbGkubGlzdC0nK3ArJy1wYWRkaW5nbGVmdC0xe3BhZGRpbmctbGVmdDozMHB4fScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ3NzLnB1c2goJ2xpLmxpc3QtJytwKyctcGFkZGluZ2xlZnQtMntwYWRkaW5nLWxlZnQ6NDBweH0nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNzcy5wdXNoKCdsaS5saXN0LScrcCsnLXBhZGRpbmdsZWZ0LTN7cGFkZGluZy1sZWZ0OjU1cHh9Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnY24yJzpcclxuXHQgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNzcy5wdXNoKCdsaS5saXN0LScrcCsnLXBhZGRpbmdsZWZ0LTF7cGFkZGluZy1sZWZ0OjQwcHh9Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjdXN0b21Dc3MucHVzaCgnbGkubGlzdC0nK3ArJy1wYWRkaW5nbGVmdC0ye3BhZGRpbmctbGVmdDo1NXB4fScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ3NzLnB1c2goJ2xpLmxpc3QtJytwKyctcGFkZGluZ2xlZnQtM3twYWRkaW5nLWxlZnQ6NjhweH0nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlICdudW0nOlxyXG5cdCAgICAgICAgICAgICAgICBjYXNlICdudW0xJzpcclxuXHQgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNzcy5wdXNoKCdsaS5saXN0LScrcCsnLXBhZGRpbmdsZWZ0LTF7cGFkZGluZy1sZWZ0OjI1cHh9Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnbnVtMic6XHJcblx0ICAgICAgICAgICAgICAgICAgICBjdXN0b21Dc3MucHVzaCgnbGkubGlzdC0nK3ArJy1wYWRkaW5nbGVmdC0xe3BhZGRpbmctbGVmdDozNXB4fScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY3VzdG9tQ3NzLnB1c2goJ2xpLmxpc3QtJytwKyctcGFkZGluZ2xlZnQtMntwYWRkaW5nLWxlZnQ6NDBweH0nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlICdkYXNoJzpcclxuXHQgICAgICAgICAgICAgICAgICAgIGN1c3RvbUNzcy5wdXNoKCdsaS5saXN0LScrcCsnLXBhZGRpbmdsZWZ0e3BhZGRpbmctbGVmdDozNXB4fScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgIGNhc2UgJ2RvdCc6XHJcblx0ICAgICAgICAgICAgICAgICAgICBjdXN0b21Dc3MucHVzaCgnbGkubGlzdC0nK3ArJy1wYWRkaW5nbGVmdHtwYWRkaW5nLWxlZnQ6MjBweH0nKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBjdXN0b21Dc3MucHVzaCgnLmxpc3QtcGFkZGluZ2xlZnQtMXtwYWRkaW5nLWxlZnQ6MH0nKTtcclxuXHQgICAgICAgIGN1c3RvbUNzcy5wdXNoKCcubGlzdC1wYWRkaW5nbGVmdC0ye3BhZGRpbmctbGVmdDonK21lLm9wdGlvbnMubGlzdERlZmF1bHRQYWRkaW5nTGVmdCsncHh9Jyk7XHJcblx0ICAgICAgICBjdXN0b21Dc3MucHVzaCgnLmxpc3QtcGFkZGluZ2xlZnQtM3twYWRkaW5nLWxlZnQ6JyttZS5vcHRpb25zLmxpc3REZWZhdWx0UGFkZGluZ0xlZnQqMisncHh9Jyk7XHJcblx0ICAgICAgICAvL+WmguaenOS4jee7meWuveW6puS8muWcqOiHquWumuW6lOagt+W8j+mHjOWHuueOsOa7muWKqOadoVxyXG5cdCAgICAgICAgdXRpbHMuY3NzUnVsZSgnbGlzdCcsICdvbCx1bHttYXJnaW46MDtwYWRpbmc6MDsnKyhicm93c2VyLmllID8gJycgOiAnd2lkdGg6OTUlJykrJ31saXtjbGVhcjpib3RoO30nK2N1c3RvbUNzcy5qb2luKCdcXG4nKSwgbWUuZG9jdW1lbnQpO1xyXG5cdCAgICB9KTtcclxuXHQgICAgLy/ljZXni6zlpITnkIbliarliIfnmoTpl67pophcclxuXHQgICAgbWUucmVhZHkoZnVuY3Rpb24oKXtcclxuXHQgICAgICAgIGRvbVV0aWxzLm9uKG1lLmJvZHksJ2N1dCcsZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBybmcgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxsaTtcclxuXHQgICAgICAgICAgICAgICAgLy90cmFjZTozNDE2XHJcblx0ICAgICAgICAgICAgICAgIGlmKCFybmcuY29sbGFwc2VkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGxpID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuc3RhcnRDb250YWluZXIsJ2xpJyx0cnVlKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWxpLm5leHRTaWJsaW5nICYmIGRvbVV0aWxzLmlzRW1wdHlCbG9jayhsaSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG4gPSBsaS5wYXJlbnROb2RlLG5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5vZGUgPSBwbi5wcmV2aW91c1NpYmxpbmcpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHBuKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJuZy5zZXRTdGFydEF0TGFzdChub2RlKS5jb2xsYXBzZSh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJuZy5zZWxlY3QodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNlIGlmKG5vZGUgPSBwbi5uZXh0U2libGluZyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUocG4pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm5nLnNldFN0YXJ0QXRGaXJzdChub2RlKS5jb2xsYXBzZSh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJuZy5zZWxlY3QodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcE5vZGUgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5maWxsTm9kZShtZS5kb2N1bWVudCx0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBuLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRtcE5vZGUscG4pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHBuKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJuZy5zZXRTdGFydCh0bXBOb2RlLDApLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm5nLnNlbGVjdCh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgfSlcclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICBmdW5jdGlvbiBnZXRTdHlsZShub2RlKXtcclxuXHQgICAgICAgIHZhciBjbHMgPSBub2RlLmNsYXNzTmFtZTtcclxuXHQgICAgICAgIGlmKGRvbVV0aWxzLmhhc0NsYXNzKG5vZGUsL2N1c3RvbV8vKSl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGNscy5tYXRjaCgvY3VzdG9tXyhcXHcrKS8pWzFdXHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gZG9tVXRpbHMuZ2V0U3R5bGUobm9kZSwgJ2xpc3Qtc3R5bGUtdHlwZScpXHJcblxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcignYmVmb3JlcGFzdGUnLGZ1bmN0aW9uKHR5cGUsaHRtbCl7XHJcblx0ICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpLGxpO1xyXG5cdCAgICAgICAgdmFyIHJvb3QgPSBVRS5odG1scGFyc2VyKGh0bWwuaHRtbCx0cnVlKTtcclxuXHQgICAgICAgIGlmKGxpID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuc3RhcnRDb250YWluZXIsJ2xpJyx0cnVlKSl7XHJcblx0ICAgICAgICAgICAgdmFyIGxpc3QgPSBsaS5wYXJlbnROb2RlLHRhZ05hbWUgPSBsaXN0LnRhZ05hbWUgPT0gJ09MJyA/ICd1bCc6J29sJztcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKHJvb3QuZ2V0Tm9kZXNCeVRhZ05hbWUodGFnTmFtZSksZnVuY3Rpb24obil7XHJcblx0ICAgICAgICAgICAgICAgIG4udGFnTmFtZSA9IGxpc3QudGFnTmFtZTtcclxuXHQgICAgICAgICAgICAgICAgbi5zZXRBdHRyKCk7XHJcblx0ICAgICAgICAgICAgICAgIGlmKG4ucGFyZW50Tm9kZSA9PT0gcm9vdCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0eXBlID0gZ2V0U3R5bGUobGlzdCkgfHwgKGxpc3QudGFnTmFtZSA9PSAnT0wnID8gJ2RlY2ltYWwnIDogJ2Rpc2MnKVxyXG5cdCAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBuLnBhcmVudE5vZGUuZ2V0QXR0cignY2xhc3MnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGNsYXNzTmFtZSAmJiAvY3VzdG9tXy8udGVzdChjbGFzc05hbWUpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gY2xhc3NOYW1lLm1hdGNoKC9jdXN0b21fKFxcdyspLylbMV1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBuLnBhcmVudE5vZGUuZ2V0U3R5bGUoJ2xpc3Qtc3R5bGUtdHlwZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoIXR5cGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSBsaXN0LnRhZ05hbWUgPT0gJ09MJyA/ICdkZWNpbWFsJyA6ICdkaXNjJztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB1dGlscy5pbmRleE9mKGxpc3RTdHlsZVtsaXN0LnRhZ05hbWVdLCB0eXBlKTtcclxuXHQgICAgICAgICAgICAgICAgaWYobi5wYXJlbnROb2RlICE9PSByb290KVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpbmRleCArIDEgPT0gbGlzdFN0eWxlW2xpc3QudGFnTmFtZV0ubGVuZ3RoID8gMCA6IGluZGV4ICsgMTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRTdHlsZSA9IGxpc3RTdHlsZVtsaXN0LnRhZ05hbWVdW2luZGV4XTtcclxuXHQgICAgICAgICAgICAgICAgaWYoY3VzdG9tU3R5bGVbY3VycmVudFN0eWxlXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBuLnNldEF0dHIoJ2NsYXNzJywgJ2N1c3RvbV8nICsgY3VycmVudFN0eWxlKVxyXG5cclxuXHQgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICBuLnNldFN0eWxlKCdsaXN0LXN0eWxlLXR5cGUnLGN1cnJlbnRTdHlsZSlcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pXHJcblxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIGh0bWwuaHRtbCA9IHJvb3QudG9IdG1sKCk7XHJcblx0ICAgIH0pO1xyXG5cdCAgICAvL+WvvOWHuuaXtu+8jOWOu+aOiXDmoIfnrb5cclxuXHQgICAgbWUuZ2V0T3B0KCdkaXNhYmxlUEluTGlzdCcpID09PSB0cnVlICYmIG1lLmFkZE91dHB1dFJ1bGUoZnVuY3Rpb24ocm9vdCl7XHJcblx0ICAgICAgICB1dGlscy5lYWNoKHJvb3QuZ2V0Tm9kZXNCeVRhZ05hbWUoJ2xpJyksZnVuY3Rpb24obGkpe1xyXG5cdCAgICAgICAgICAgIHZhciBuZXdDaGlsZHJlbnMgPSBbXSxpbmRleD0wO1xyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2gobGkuY2hpbGRyZW4sZnVuY3Rpb24obil7XHJcblx0ICAgICAgICAgICAgICAgIGlmKG4udGFnTmFtZSA9PSAncCcpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRtcE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZSh0bXBOb2RlID0gbi5jaGlsZHJlbi5wb3AoKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkcmVucy5zcGxpY2UoaW5kZXgsMCx0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlLnBhcmVudE5vZGUgPSBsaTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYXN0Tm9kZSA9IHRtcE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gbmV3Q2hpbGRyZW5zW25ld0NoaWxkcmVucy5sZW5ndGgtMV07XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZighdG1wTm9kZSB8fCB0bXBOb2RlLnR5cGUgIT0gJ2VsZW1lbnQnIHx8IHRtcE5vZGUudGFnTmFtZSAhPSAnYnInKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnIgPSBVRS51Tm9kZS5jcmVhdGVFbGVtZW50KCdicicpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyLnBhcmVudE5vZGUgPSBsaTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZHJlbnMucHVzaChicik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBuZXdDaGlsZHJlbnMubGVuZ3RoO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgaWYobmV3Q2hpbGRyZW5zLmxlbmd0aCl7XHJcblx0ICAgICAgICAgICAgICAgIGxpLmNoaWxkcmVuID0gbmV3Q2hpbGRyZW5zO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICB9KTtcclxuXHQgICAgLy/ov5vlhaXnvJbovpHlmajnmoRsaeimgeWll3DmoIfnrb5cclxuXHQgICAgbWUuYWRkSW5wdXRSdWxlKGZ1bmN0aW9uKHJvb3Qpe1xyXG5cdCAgICAgICAgdXRpbHMuZWFjaChyb290LmdldE5vZGVzQnlUYWdOYW1lKCdsaScpLGZ1bmN0aW9uKGxpKXtcclxuXHQgICAgICAgICAgICB2YXIgdG1wUCA9IFVFLnVOb2RlLmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuXHQgICAgICAgICAgICBmb3IodmFyIGk9IDAsY2k7Y2k9bGkuY2hpbGRyZW5baV07KXtcclxuXHQgICAgICAgICAgICAgICAgaWYoY2kudHlwZSA9PSAndGV4dCcgfHwgZHRkLnBbY2kudGFnTmFtZV0pe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wUC5hcHBlbmRDaGlsZChjaSk7XHJcblx0ICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYodG1wUC5maXJzdENoaWxkKCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxpLmluc2VydEJlZm9yZSh0bXBQLGNpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0bXBQID0gVUUudU5vZGUuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpICsgMjtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYodG1wUC5maXJzdENoaWxkKCkgJiYgIXRtcFAucGFyZW50Tm9kZSB8fCAhbGkuZmlyc3RDaGlsZCgpKXtcclxuXHQgICAgICAgICAgICAgICAgbGkuYXBwZW5kQ2hpbGQodG1wUCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIC8vdHJhY2U6MzM1N1xyXG5cdCAgICAgICAgICAgIC8vcOS4jeiDveS4uuepulxyXG5cdCAgICAgICAgICAgIGlmICghdG1wUC5maXJzdENoaWxkKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgdG1wUC5pbm5lckhUTUwoYnJvd3Nlci5pZSA/ICcmbmJzcDsnIDogJzxici8+JylcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgLy/ljrvmjonmnKvlsL7nmoTnqbrnmb1cclxuXHQgICAgICAgICAgICB2YXIgcCA9IGxpLmZpcnN0Q2hpbGQoKTtcclxuXHQgICAgICAgICAgICB2YXIgbGFzdENoaWxkID0gcC5sYXN0Q2hpbGQoKTtcclxuXHQgICAgICAgICAgICBpZihsYXN0Q2hpbGQgJiYgbGFzdENoaWxkLnR5cGUgPT0gJ3RleHQnICYmIC9eXFxzKiQvLnRlc3QobGFzdENoaWxkLmRhdGEpKXtcclxuXHQgICAgICAgICAgICAgICAgcC5yZW1vdmVDaGlsZChsYXN0Q2hpbGQpXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICBpZihtZS5vcHRpb25zLmF1dG9UcmFuc1dvcmRUb0xpc3Qpe1xyXG5cdCAgICAgICAgICAgIHZhciBvcmRlcmxpc3R0eXBlID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgJ251bTEnOi9eXFxkK1xcKS8sXHJcblx0ICAgICAgICAgICAgICAgICAgICAnZGVjaW1hbCc6L15cXGQrXFwuLyxcclxuXHQgICAgICAgICAgICAgICAgICAgICdsb3dlci1hbHBoYSc6L15bYS16XStcXCkvLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgJ3VwcGVyLWFscGhhJzovXltBLVpdK1xcLi8sXHJcblx0ICAgICAgICAgICAgICAgICAgICAnY24nOi9eW1xcdTRFMDBcXHU0RThDXFx1NEUwOVxcdTU2REJcXHU1MTZkXFx1NGU5NFxcdTRlMDNcXHU1MTZiXFx1NGU1ZF0rW1xcdTMwMDFdLyxcclxuXHQgICAgICAgICAgICAgICAgICAgICdjbjInOi9eXFwoW1xcdTRFMDBcXHU0RThDXFx1NEUwOVxcdTU2REJcXHU1MTZkXFx1NGU5NFxcdTRlMDNcXHU1MTZiXFx1NGU1ZF0rXFwpL1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICB1bm9yZGVybGlzdHR5cGUgPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAnc3F1YXJlJzonbidcclxuXHQgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICBmdW5jdGlvbiBjaGVja0xpc3RUeXBlKGNvbnRlbnQsY29udGFpbmVyKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHNwYW4gPSBjb250YWluZXIuZmlyc3RDaGlsZCgpO1xyXG5cdCAgICAgICAgICAgICAgICBpZihzcGFuICYmICBzcGFuLnR5cGUgPT0gJ2VsZW1lbnQnICYmIHNwYW4udGFnTmFtZSA9PSAnc3BhbicgJiYgL1dpbmdkaW5nc3xTeW1ib2wvLnRlc3Qoc3Bhbi5nZXRTdHlsZSgnZm9udC1mYW1pbHknKSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBwIGluIHVub3JkZXJsaXN0dHlwZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYodW5vcmRlcmxpc3R0eXBlW3BdID09IHNwYW4uZGF0YSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdkaXNjJ1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGZvcih2YXIgcCBpbiBvcmRlcmxpc3R0eXBlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKG9yZGVybGlzdHR5cGVbcF0udGVzdChjb250ZW50KSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHA7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgncCcpLGZ1bmN0aW9uKG5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICBpZihub2RlLmdldEF0dHIoJ2NsYXNzJykgIT0gJ01zb0xpc3RQYXJhZ3JhcGgnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAvL3dvcmTnspjotLTov4fmnaXnmoTkvJrluKbmnIltYXJnaW7opoHljrvmjoks5L2G6L+Z5qC35Lmf5Y+v6IO95Lya6K+v5ZG95Lit5LiA5Lqb5aSu6KeGXHJcblx0ICAgICAgICAgICAgICAgIG5vZGUuc2V0U3R5bGUoJ21hcmdpbicsJycpO1xyXG5cdCAgICAgICAgICAgICAgICBub2RlLnNldFN0eWxlKCdtYXJnaW4tbGVmdCcsJycpO1xyXG5cdCAgICAgICAgICAgICAgICBub2RlLnNldEF0dHIoJ2NsYXNzJywnJyk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBmdW5jdGlvbiBhcHBlbmRMaShsaXN0LHAsdHlwZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihsaXN0LnRhZ05hbWUgPT0gJ29sJyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoYnJvd3Nlci5pZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdCA9IHAuZmlyc3RDaGlsZCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihmaXJzdC50eXBlID09J2VsZW1lbnQnICYmIGZpcnN0LnRhZ05hbWUgPT0gJ3NwYW4nICYmIG9yZGVybGlzdHR5cGVbdHlwZV0udGVzdChmaXJzdC5pbm5lclRleHQoKSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5yZW1vdmVDaGlsZChmaXJzdCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5pbm5lckhUTUwocC5pbm5lckhUTUwoKS5yZXBsYWNlKG9yZGVybGlzdHR5cGVbdHlwZV0sJycpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwLnJlbW92ZUNoaWxkKHAuZmlyc3RDaGlsZCgpKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsaSA9IFVFLnVOb2RlLmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsaS5hcHBlbmRDaGlsZChwKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQobGkpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHZhciB0bXAgPSBub2RlLHR5cGUsY2FjaGVOb2RlID0gbm9kZTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmKG5vZGUucGFyZW50Tm9kZS50YWdOYW1lICE9ICdsaScgJiYgKHR5cGUgPSBjaGVja0xpc3RUeXBlKG5vZGUuaW5uZXJUZXh0KCksbm9kZSkpKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IFVFLnVOb2RlLmNyZWF0ZUVsZW1lbnQobWUub3B0aW9ucy5pbnNlcnRvcmRlcmVkbGlzdC5oYXNPd25Qcm9wZXJ0eSh0eXBlKSA/ICdvbCcgOiAndWwnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGN1c3RvbVN0eWxlW3R5cGVdKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsaXN0LnNldEF0dHIoJ2NsYXNzJywnY3VzdG9tXycrdHlwZSlcclxuXHQgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Quc2V0U3R5bGUoJ2xpc3Qtc3R5bGUtdHlwZScsdHlwZSlcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHdoaWxlKG5vZGUgJiYgbm9kZS5wYXJlbnROb2RlLnRhZ05hbWUgIT0gJ2xpJyAmJiBjaGVja0xpc3RUeXBlKG5vZGUuaW5uZXJUZXh0KCksbm9kZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IG5vZGUubmV4dFNpYmxpbmcoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZighdG1wKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShsaXN0LG5vZGUpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVuZExpKGxpc3Qsbm9kZSx0eXBlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlID0gdG1wO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoIWxpc3QucGFyZW50Tm9kZSAmJiBub2RlICYmIG5vZGUucGFyZW50Tm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShsaXN0LG5vZGUpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdmFyIHNwYW4gPSBjYWNoZU5vZGUuZmlyc3RDaGlsZCgpO1xyXG5cdCAgICAgICAgICAgICAgICBpZihzcGFuICYmIHNwYW4udHlwZSA9PSAnZWxlbWVudCcgJiYgc3Bhbi50YWdOYW1lID09ICdzcGFuJyAmJiAvXlxccyooJm5ic3A7KStcXHMqJC8udGVzdChzcGFuLmlubmVyVGV4dCgpKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzcGFuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3BhbilcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pXHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9KTtcclxuXHJcblx0ICAgIC8v6LCD5pW057Si5byV5qCH562+XHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdjb250ZW50Y2hhbmdlJyxmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgYWRqdXN0TGlzdFN0eWxlKG1lLmRvY3VtZW50KVxyXG5cdCAgICB9KTtcclxuXHJcblx0ICAgIGZ1bmN0aW9uIGFkanVzdExpc3RTdHlsZShkb2MsaWdub3JlKXtcclxuXHQgICAgICAgIHV0aWxzLmVhY2goZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZG9jLCdvbCB1bCcpLGZ1bmN0aW9uKG5vZGUpe1xyXG5cclxuXHQgICAgICAgICAgICBpZighZG9tVXRpbHMuaW5Eb2Mobm9kZSxkb2MpKVxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgaWYocGFyZW50LnRhZ05hbWUgPT0gbm9kZS50YWdOYW1lKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG5vZGVTdHlsZVR5cGUgPSBnZXRTdHlsZShub2RlKSB8fCAobm9kZS50YWdOYW1lID09ICdPTCcgPyAnZGVjaW1hbCcgOiAnZGlzYycpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcGFyZW50U3R5bGVUeXBlID0gZ2V0U3R5bGUocGFyZW50KSB8fCAocGFyZW50LnRhZ05hbWUgPT0gJ09MJyA/ICdkZWNpbWFsJyA6ICdkaXNjJyk7XHJcblx0ICAgICAgICAgICAgICAgIGlmKG5vZGVTdHlsZVR5cGUgPT0gcGFyZW50U3R5bGVUeXBlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZUluZGV4ID0gdXRpbHMuaW5kZXhPZihsaXN0U3R5bGVbbm9kZS50YWdOYW1lXSwgbm9kZVN0eWxlVHlwZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdHlsZUluZGV4ID0gc3R5bGVJbmRleCArIDEgPT0gbGlzdFN0eWxlW25vZGUudGFnTmFtZV0ubGVuZ3RoID8gMCA6IHN0eWxlSW5kZXggKyAxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc2V0TGlzdFN0eWxlKG5vZGUsbGlzdFN0eWxlW25vZGUudGFnTmFtZV1bc3R5bGVJbmRleF0pXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciBpbmRleCA9IDAsdHlwZSA9IDI7XHJcblx0ICAgICAgICAgICAgaWYoIGRvbVV0aWxzLmhhc0NsYXNzKG5vZGUsL2N1c3RvbV8vKSl7XHJcblx0ICAgICAgICAgICAgICAgIGlmKCEoL1tvdV1sL2kudGVzdChwYXJlbnQudGFnTmFtZSkgJiYgZG9tVXRpbHMuaGFzQ2xhc3MocGFyZW50LC9jdXN0b21fLykpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAxO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgIGlmKC9bb3VdbC9pLnRlc3QocGFyZW50LnRhZ05hbWUpICYmIGRvbVV0aWxzLmhhc0NsYXNzKHBhcmVudCwvY3VzdG9tXy8pKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAzO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB2YXIgc3R5bGUgPSBkb21VdGlscy5nZXRTdHlsZShub2RlLCAnbGlzdC1zdHlsZS10eXBlJyk7XHJcblx0ICAgICAgICAgICAgc3R5bGUgJiYgKG5vZGUuc3R5bGUuY3NzVGV4dCA9ICdsaXN0LXN0eWxlLXR5cGU6JyArIHN0eWxlKTtcclxuXHQgICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9IHV0aWxzLnRyaW0obm9kZS5jbGFzc05hbWUucmVwbGFjZSgvbGlzdC1wYWRkaW5nbGVmdC1cXHcrLywnJykpICsgJyBsaXN0LXBhZGRpbmdsZWZ0LScgKyB0eXBlO1xyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2goZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobm9kZSwnbGknKSxmdW5jdGlvbihsaSl7XHJcblx0ICAgICAgICAgICAgICAgIGxpLnN0eWxlLmNzc1RleHQgJiYgKGxpLnN0eWxlLmNzc1RleHQgPSAnJyk7XHJcblx0ICAgICAgICAgICAgICAgIGlmKCFsaS5maXJzdENoaWxkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShsaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYobGkucGFyZW50Tm9kZSAhPT0gbm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaW5kZXgrKztcclxuXHQgICAgICAgICAgICAgICAgaWYoZG9tVXRpbHMuaGFzQ2xhc3Mobm9kZSwvY3VzdG9tXy8pICl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcGFkZGluZ0xlZnQgPSAxLGN1cnJlbnRTdHlsZSA9IGdldFN0eWxlKG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYobm9kZS50YWdOYW1lID09ICdPTCcpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRTdHlsZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaChjdXJyZW50U3R5bGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY24nIDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2NuMSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjbjInOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGluZGV4ID4gMTAgJiYgKGluZGV4ICUgMTAgPT0gMCB8fCBpbmRleCA+IDEwICYmIGluZGV4IDwgMjApKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQgPSAyXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoaW5kZXggPiAyMCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0ID0gM1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ251bTInIDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpbmRleCA+IDkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWRkaW5nTGVmdCA9IDJcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGkuY2xhc3NOYW1lID0gJ2xpc3QtJytjdXN0b21TdHlsZVtjdXJyZW50U3R5bGVdKyBpbmRleCArICcgJyArICdsaXN0LScrY3VycmVudFN0eWxlKyctcGFkZGluZ2xlZnQtJyArIHBhZGRpbmdMZWZ0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGkuY2xhc3NOYW1lID0gJ2xpc3QtJytjdXN0b21TdHlsZVtjdXJyZW50U3R5bGVdICArICcgJyArICdsaXN0LScrY3VycmVudFN0eWxlKyctcGFkZGluZ2xlZnQnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxpLmNsYXNzTmFtZSA9IGxpLmNsYXNzTmFtZS5yZXBsYWNlKC9saXN0LVtcXHdcXC1dKy9naSwnJyk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IGxpLmdldEF0dHJpYnV0ZSgnY2xhc3MnKTtcclxuXHQgICAgICAgICAgICAgICAgaWYoY2xhc3NOYW1lICE9PSBudWxsICYmICFjbGFzc05hbWUucmVwbGFjZSgvXFxzL2csJycpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZUF0dHJpYnV0ZXMobGksJ2NsYXNzJylcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICFpZ25vcmUgJiYgYWRqdXN0TGlzdChub2RlLG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpLGdldFN0eWxlKG5vZGUpfHxkb21VdGlscy5nZXRTdHlsZShub2RlLCAnbGlzdC1zdHlsZS10eXBlJyksdHJ1ZSk7XHJcblx0ICAgICAgICB9KVxyXG5cdCAgICB9XHJcblx0ICAgIGZ1bmN0aW9uIGFkanVzdExpc3QobGlzdCwgdGFnLCBzdHlsZSxpZ25vcmVFbXB0eSkge1xyXG5cdCAgICAgICAgdmFyIG5leHRMaXN0ID0gbGlzdC5uZXh0U2libGluZztcclxuXHQgICAgICAgIGlmIChuZXh0TGlzdCAmJiBuZXh0TGlzdC5ub2RlVHlwZSA9PSAxICYmIG5leHRMaXN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSB0YWcgJiYgKGdldFN0eWxlKG5leHRMaXN0KSB8fCBkb21VdGlscy5nZXRTdHlsZShuZXh0TGlzdCwgJ2xpc3Qtc3R5bGUtdHlwZScpIHx8ICh0YWcgPT0gJ29sJyA/ICdkZWNpbWFsJyA6ICdkaXNjJykpID09IHN0eWxlKSB7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMubW92ZUNoaWxkKG5leHRMaXN0LCBsaXN0KTtcclxuXHQgICAgICAgICAgICBpZiAobmV4dExpc3QuY2hpbGROb2Rlcy5sZW5ndGggPT0gMCkge1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobmV4dExpc3QpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmKG5leHRMaXN0ICYmIGRvbVV0aWxzLmlzRmlsbENoYXIobmV4dExpc3QpKXtcclxuXHQgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobmV4dExpc3QpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIHByZUxpc3QgPSBsaXN0LnByZXZpb3VzU2libGluZztcclxuXHQgICAgICAgIGlmIChwcmVMaXN0ICYmIHByZUxpc3Qubm9kZVR5cGUgPT0gMSAmJiBwcmVMaXN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSB0YWcgJiYgKGdldFN0eWxlKHByZUxpc3QpIHx8IGRvbVV0aWxzLmdldFN0eWxlKHByZUxpc3QsICdsaXN0LXN0eWxlLXR5cGUnKSB8fCAodGFnID09ICdvbCcgPyAnZGVjaW1hbCcgOiAnZGlzYycpKSA9PSBzdHlsZSkge1xyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLm1vdmVDaGlsZChsaXN0LCBwcmVMaXN0KTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmKHByZUxpc3QgJiYgZG9tVXRpbHMuaXNGaWxsQ2hhcihwcmVMaXN0KSl7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHByZUxpc3QpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgIWlnbm9yZUVtcHR5ICYmIGRvbVV0aWxzLmlzRW1wdHlCbG9jayhsaXN0KSAmJiBkb21VdGlscy5yZW1vdmUobGlzdCk7XHJcblx0ICAgICAgICBpZihnZXRTdHlsZShsaXN0KSl7XHJcblx0ICAgICAgICAgICAgYWRqdXN0TGlzdFN0eWxlKGxpc3Qub3duZXJEb2N1bWVudCx0cnVlKVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBzZXRMaXN0U3R5bGUobGlzdCxzdHlsZSl7XHJcblx0ICAgICAgICBpZihjdXN0b21TdHlsZVtzdHlsZV0pe1xyXG5cdCAgICAgICAgICAgIGxpc3QuY2xhc3NOYW1lID0gJ2N1c3RvbV8nICsgc3R5bGU7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0cnl7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMuc2V0U3R5bGUobGlzdCwgJ2xpc3Qtc3R5bGUtdHlwZScsIHN0eWxlKTtcclxuXHQgICAgICAgIH1jYXRjaChlKXt9XHJcblx0ICAgIH1cclxuXHQgICAgZnVuY3Rpb24gY2xlYXJFbXB0eVNpYmxpbmcobm9kZSkge1xyXG5cdCAgICAgICAgdmFyIHRtcE5vZGUgPSBub2RlLnByZXZpb3VzU2libGluZztcclxuXHQgICAgICAgIGlmICh0bXBOb2RlICYmIGRvbVV0aWxzLmlzRW1wdHlCbG9jayh0bXBOb2RlKSkge1xyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSh0bXBOb2RlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHRtcE5vZGUgPSBub2RlLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgaWYgKHRtcE5vZGUgJiYgZG9tVXRpbHMuaXNFbXB0eUJsb2NrKHRtcE5vZGUpKSB7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHRtcE5vZGUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uICh0eXBlLCBldnQpIHtcclxuXHQgICAgICAgIGZ1bmN0aW9uIHByZXZlbnRBbmRTYXZlKCkge1xyXG5cdCAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCA/IGV2dC5wcmV2ZW50RGVmYXVsdCgpIDogKGV2dC5yZXR1cm5WYWx1ZSA9IGZhbHNlKTtcclxuXHQgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ2NvbnRlbnRjaGFuZ2UnKTtcclxuXHQgICAgICAgICAgICBtZS51bmRvTWFuZ2VyICYmIG1lLnVuZG9NYW5nZXIuc2F2ZSgpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZnVuY3Rpb24gZmluZExpc3Qobm9kZSxmaWx0ZXJGbil7XHJcblx0ICAgICAgICAgICAgd2hpbGUobm9kZSAmJiAhZG9tVXRpbHMuaXNCb2R5KG5vZGUpKXtcclxuXHQgICAgICAgICAgICAgICAgaWYoZmlsdGVyRm4obm9kZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZihub2RlLm5vZGVUeXBlID09IDEgJiYgL1tvdV1sL2kudGVzdChub2RlLnRhZ05hbWUpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIGtleUNvZGUgPSBldnQua2V5Q29kZSB8fCBldnQud2hpY2g7XHJcblx0ICAgICAgICBpZiAoa2V5Q29kZSA9PSAxMyAmJiAhZXZ0LnNoaWZ0S2V5KSB7Ly/lm57ovaZcclxuXHQgICAgICAgICAgICB2YXIgcm5nID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgIHBhcmVudCA9IGRvbVV0aWxzLmZpbmRQYXJlbnQocm5nLnN0YXJ0Q29udGFpbmVyLGZ1bmN0aW9uKG5vZGUpe3JldHVybiBkb21VdGlscy5pc0Jsb2NrRWxtKG5vZGUpfSx0cnVlKSxcclxuXHQgICAgICAgICAgICAgICAgbGkgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHJuZy5zdGFydENvbnRhaW5lciwnbGknLHRydWUpO1xyXG5cdCAgICAgICAgICAgIGlmKHBhcmVudCAmJiBwYXJlbnQudGFnTmFtZSAhPSAnUFJFJyAmJiAhbGkpe1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IHBhcmVudC5pbm5lckhUTUwucmVwbGFjZShuZXcgUmVnRXhwKGRvbVV0aWxzLmZpbGxDaGFyLCAnZycpLCcnKTtcclxuXHQgICAgICAgICAgICAgICAgaWYoL15cXHMqMVxccypcXC5bXlxcZF0vLnRlc3QoaHRtbCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcGFyZW50LmlubmVySFRNTCA9IGh0bWwucmVwbGFjZSgvXlxccyoxXFxzKlxcLi8sJycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcm5nLnNldFN0YXJ0QXRMYXN0KHBhcmVudCkuY29sbGFwc2UodHJ1ZSkuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5fX2hhc0VudGVyRXhlY0NvbW1hbmQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoJ2luc2VydG9yZGVyZWRsaXN0Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5fX2hhc0VudGVyRXhlY0NvbW1hbmQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQgPSBmaW5kTGlzdChyYW5nZS5zdGFydENvbnRhaW5lcixmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUudGFnTmFtZSA9PSAnVEFCTEUnO1xyXG5cdCAgICAgICAgICAgICAgICB9KSxcclxuXHQgICAgICAgICAgICAgICAgZW5kID0gcmFuZ2UuY29sbGFwc2VkID8gc3RhcnQgOiBmaW5kTGlzdChyYW5nZS5lbmRDb250YWluZXIsZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnRhZ05hbWUgPT0gJ1RBQkxFJztcclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgICAgIGlmIChzdGFydCAmJiBlbmQgJiYgc3RhcnQgPT09IGVuZCkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYgKCFyYW5nZS5jb2xsYXBzZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShyYW5nZS5zdGFydENvbnRhaW5lciwgJ2xpJywgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbmQgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHJhbmdlLmVuZENvbnRhaW5lciwgJ2xpJywgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnQgJiYgZW5kICYmIHN0YXJ0ID09PSBlbmQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5kZWxldGVDb250ZW50cygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxpID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShyYW5nZS5zdGFydENvbnRhaW5lciwgJ2xpJywgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpICYmIGRvbVV0aWxzLmlzRW1wdHlCbG9jayhsaSkpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZSA9IGxpLnByZXZpb3VzU2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dCA9IGxpLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuZmlsbE5vZGUobWUuZG9jdW1lbnQsIHApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRMaXN0ID0gbGkucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZSAmJiBuZXh0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChuZXh0LCAwKS5jb2xsYXBzZSh0cnVlKS5zZWxlY3QodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobGkpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcHJlICYmICFuZXh0IHx8ICFwcmUpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50TGlzdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwLCBwYXJlbnRMaXN0KTtcclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaS5wYXJlbnROb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHAsIHBhcmVudExpc3QubmV4dFNpYmxpbmcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGxpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGFyZW50TGlzdC5maXJzdENoaWxkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHBhcmVudExpc3QpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQocCwgMCkuc2V0Q3Vyc29yKCk7XHJcblxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2ZW50QW5kU2F2ZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcFJhbmdlID0gcmFuZ2UuY2xvbmVSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBiayA9IHRtcFJhbmdlLmNvbGxhcHNlKGZhbHNlKS5jcmVhdGVCb29rbWFyaygpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5kZWxldGVDb250ZW50cygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRtcFJhbmdlLm1vdmVUb0Jvb2ttYXJrKGJrKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGkgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHRtcFJhbmdlLnN0YXJ0Q29udGFpbmVyLCAnbGknLCB0cnVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJFbXB0eVNpYmxpbmcobGkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRtcFJhbmdlLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHByZXZlbnRBbmRTYXZlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgICAgICAgICAgbGkgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCAnbGknLCB0cnVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmIChsaSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzRW1wdHlCbG9jayhsaSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBiayA9IHJhbmdlLmNyZWF0ZUJvb2ttYXJrKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudExpc3QgPSBsaS5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaSAhPT0gcGFyZW50TGlzdC5sYXN0Q2hpbGQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuYnJlYWtQYXJlbnQobGksIHBhcmVudExpc3QpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckVtcHR5U2libGluZyhsaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudExpc3QucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobGksIHBhcmVudExpc3QubmV4dFNpYmxpbmcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9tVXRpbHMuaXNFbXB0eU5vZGUocGFyZW50TGlzdCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShwYXJlbnRMaXN0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL+W1jOWll+S4jeWkhOeQhlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZHRkLiRsaXN0W2xpLnBhcmVudE5vZGUudGFnTmFtZV0pIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZG9tVXRpbHMuaXNCbG9ja0VsbShsaS5maXJzdENoaWxkKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcCA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHAsIGxpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChsaS5maXJzdENoaWxkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcC5hcHBlbmRDaGlsZChsaS5maXJzdENoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShsaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobGksIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVUb0Jvb2ttYXJrKGJrKS5zZWxlY3QoKTtcclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3QgPSBsaS5maXJzdENoaWxkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3QgfHwgIWRvbVV0aWxzLmlzQmxvY2tFbG0oZmlyc3QpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWxpLmZpcnN0Q2hpbGQgJiYgZG9tVXRpbHMuZmlsbE5vZGUobWUuZG9jdW1lbnQsIHApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobGkuZmlyc3RDaGlsZCkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQobGkuZmlyc3RDaGlsZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGkuYXBwZW5kQ2hpbGQocCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gcDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzcGFuID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKHNwYW4pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmJyZWFrUGFyZW50KHNwYW4sIGxpKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRMaSA9IHNwYW4ubmV4dFNpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QgPSBuZXh0TGkuZmlyc3RDaGlsZDtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFmaXJzdCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuZmlsbE5vZGUobWUuZG9jdW1lbnQsIHApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0TGkuYXBwZW5kQ2hpbGQocCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gcDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzRW1wdHlOb2RlKGZpcnN0KSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdC5pbm5lckhUTUwgPSAnJztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuZmlsbE5vZGUobWUuZG9jdW1lbnQsIGZpcnN0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KGZpcnN0LCAwKS5jb2xsYXBzZSh0cnVlKS5zaHJpbmtCb3VuZGFyeSgpLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShzcGFuKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJlID0gbmV4dExpLnByZXZpb3VzU2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJlICYmIGRvbVV0aWxzLmlzRW1wdHlCbG9jayhwcmUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZS5pbm5lckhUTUwgPSAnPHA+PC9wPic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmZpbGxOb2RlKG1lLmRvY3VtZW50LCBwcmUuZmlyc3RDaGlsZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHByZXZlbnRBbmRTYXZlKCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKGtleUNvZGUgPT0gOCkge1xyXG5cdCAgICAgICAgICAgIC8v5L+u5LitaWXkuK1saeS4i+eahOmXrumimFxyXG5cdCAgICAgICAgICAgIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCAmJiBkb21VdGlscy5pc1N0YXJ0SW5ibG9jayhyYW5nZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgdG1wUmFuZ2UgPSByYW5nZS5jbG9uZVJhbmdlKCkudHJpbUJvdW5kYXJ5KCk7XHJcblx0ICAgICAgICAgICAgICAgIGxpID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShyYW5nZS5zdGFydENvbnRhaW5lciwgJ2xpJywgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIC8v6KaB5ZyobGnnmoTmnIDlt6bovrnvvIzmiY3og73lpITnkIZcclxuXHQgICAgICAgICAgICAgICAgaWYgKGxpICYmIGRvbVV0aWxzLmlzU3RhcnRJbmJsb2NrKHRtcFJhbmdlKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCAncCcsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0ICYmIHN0YXJ0ICE9PSBsaS5maXJzdENoaWxkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudExpc3QgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHN0YXJ0LFsnb2wnLCd1bCddKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5icmVha1BhcmVudChzdGFydCxwYXJlbnRMaXN0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjbGVhckVtcHR5U2libGluZyhzdGFydCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdjb250ZW50Y2hhbmdlJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnQsMCkuc2V0Q3Vyc29yKGZhbHNlLHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnc2F2ZVNjZW5lJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucHJldmVudERlZmF1bHQoZXZ0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGxpICYmIChwcmUgPSBsaS5wcmV2aW91c1NpYmxpbmcpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleUNvZGUgPT0gNDYgJiYgbGkuY2hpbGROb2Rlcy5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL+acieWPr+iDveS4iui+ueeahOWFhOW8n+iKgueCueaYr+S4qjLnuqfoj5zljZXvvIzopoHov73liqDliLAy57qn6I+c5Y2V55qE5pyA5ZCO55qEbGlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHRkLiRsaXN0W3ByZS50YWdOYW1lXSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmUgPSBwcmUubGFzdENoaWxkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS51bmRvTWFuZ2VyICYmIG1lLnVuZG9NYW5nZXIuc2F2ZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gbGkuZmlyc3RDaGlsZDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9tVXRpbHMuaXNCbG9ja0VsbShmaXJzdCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzRW1wdHlOb2RlKGZpcnN0KSkge1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKHByZSwgcHJlLmNoaWxkTm9kZXMubGVuZ3RoKS5zaHJpbmtCb3VuZGFyeSgpLmNvbGxhcHNlKCkuc2VsZWN0KHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlLmFwcGVuZENoaWxkKGZpcnN0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KGZpcnN0LCAwKS5zZXRDdXJzb3IoZmFsc2UsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9maXJzdOS4jeaYr+WUr+S4gOeahOiKgueCuVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGxpLmZpcnN0Q2hpbGQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmUuYXBwZW5kQ2hpbGQobGkuZmlyc3RDaGlsZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3BhbiA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUoc3Bhbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL+WIpOaWrXByZeaYr+WQpuaYr+epuueahOiKgueCuSzlpoLmnpzmmK88cD48YnIvPjwvcD7nsbvlnovnmoTnqbroioLngrnvvIzlubLmjolw5qCH562+6Ziy5q2i5a6D5Y2g5L2NXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9tVXRpbHMuaXNFbXB0eUJsb2NrKHByZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmUuaW5uZXJIVE1MID0gJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5tb3ZlQ2hpbGQobGksIHByZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZShzcGFuKS5jb2xsYXBzZSh0cnVlKS5zZWxlY3QodHJ1ZSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHNwYW4pO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5pc0VtcHR5Tm9kZShsaSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlLmFwcGVuZENoaWxkKHApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQocCwgMCkuc2V0Q3Vyc29yKCk7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQocHJlLCBwcmUuY2hpbGROb2Rlcy5sZW5ndGgpLnNocmlua0JvdW5kYXJ5KCkuY29sbGFwc2UoKS5zZWxlY3QodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQocHJlLCBwcmUuY2hpbGROb2Rlcy5sZW5ndGgpLmNvbGxhcHNlKCkuc2VsZWN0KHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGxpLmZpcnN0Q2hpbGQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmUuYXBwZW5kQ2hpbGQobGkuZmlyc3RDaGlsZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGxpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ2NvbnRlbnRjaGFuZ2UnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnByZXZlbnREZWZhdWx0KGV2dCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIC8vdHJhY2U6OTgwXHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGxpICYmICFsaS5wcmV2aW91c1NpYmxpbmcpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50TGlzdCA9IGxpLnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJrID0gcmFuZ2UuY3JlYXRlQm9va21hcmsoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihkb21VdGlscy5pc1RhZ05vZGUocGFyZW50TGlzdC5wYXJlbnROb2RlLCdvbCB1bCcpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50TGlzdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShsaSxwYXJlbnRMaXN0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZG9tVXRpbHMuaXNFbXB0eU5vZGUocGFyZW50TGlzdCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHBhcmVudExpc3QpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGxpLmZpcnN0Q2hpbGQpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50TGlzdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShsaS5maXJzdENoaWxkLHBhcmVudExpc3QpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobGkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkb21VdGlscy5pc0VtcHR5Tm9kZShwYXJlbnRMaXN0KSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUocGFyZW50TGlzdClcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZVRvQm9va21hcmsoYmspLnNldEN1cnNvcihmYWxzZSx0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ2NvbnRlbnRjaGFuZ2UnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnByZXZlbnREZWZhdWx0KGV2dCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9KTtcclxuXHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdrZXl1cCcsZnVuY3Rpb24odHlwZSwgZXZ0KXtcclxuXHQgICAgICAgIHZhciBrZXlDb2RlID0gZXZ0LmtleUNvZGUgfHwgZXZ0LndoaWNoO1xyXG5cdCAgICAgICAgaWYgKGtleUNvZGUgPT0gOCkge1xyXG5cdCAgICAgICAgICAgIHZhciBybmcgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxsaXN0O1xyXG5cdCAgICAgICAgICAgIGlmKGxpc3QgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHJuZy5zdGFydENvbnRhaW5lcixbJ29sJywgJ3VsJ10sdHJ1ZSkpe1xyXG5cdCAgICAgICAgICAgICAgICBhZGp1c3RMaXN0KGxpc3QsbGlzdC50YWdOYW1lLnRvTG93ZXJDYXNlKCksZ2V0U3R5bGUobGlzdCl8fGRvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUobGlzdCwnbGlzdC1zdHlsZS10eXBlJyksdHJ1ZSlcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0pO1xyXG5cdCAgICAvL+WkhOeQhnRhYumUrlxyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcigndGFia2V5ZG93bicsZnVuY3Rpb24oKXtcclxuXHJcblx0ICAgICAgICB2YXIgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHJcblx0ICAgICAgICAvL+aOp+WItue6p+aVsFxyXG5cdCAgICAgICAgZnVuY3Rpb24gY2hlY2tMZXZlbChsaSl7XHJcblx0ICAgICAgICAgICAgaWYobWUub3B0aW9ucy5tYXhMaXN0TGV2ZWwgIT0gLTEpe1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbGV2ZWwgPSBsaS5wYXJlbnROb2RlLGxldmVsTnVtID0gMDtcclxuXHQgICAgICAgICAgICAgICAgd2hpbGUoL1tvdV1sL2kudGVzdChsZXZlbC50YWdOYW1lKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsZXZlbE51bSsrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbGV2ZWwgPSBsZXZlbC5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmKGxldmVsTnVtID49IG1lLm9wdGlvbnMubWF4TGlzdExldmVsKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLy/lj6rku6XlvIDlp4vkuLrlh4ZcclxuXHQgICAgICAgIC8vdG9kbyDlkI7nu63mlLnov5tcclxuXHQgICAgICAgIHZhciBsaSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocmFuZ2Uuc3RhcnRDb250YWluZXIsICdsaScsIHRydWUpO1xyXG5cdCAgICAgICAgaWYobGkpe1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgYms7XHJcblx0ICAgICAgICAgICAgaWYocmFuZ2UuY29sbGFwc2VkKXtcclxuXHQgICAgICAgICAgICAgICAgaWYoY2hlY2tMZXZlbChsaSkpXHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHBhcmVudExpID0gbGkucGFyZW50Tm9kZSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGxpc3QgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHBhcmVudExpLnRhZ05hbWUpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB1dGlscy5pbmRleE9mKGxpc3RTdHlsZVtsaXN0LnRhZ05hbWVdLCBnZXRTdHlsZShwYXJlbnRMaSl8fGRvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUocGFyZW50TGksICdsaXN0LXN0eWxlLXR5cGUnKSk7XHJcblx0ICAgICAgICAgICAgICAgIGluZGV4ID0gaW5kZXggKyAxID09IGxpc3RTdHlsZVtsaXN0LnRhZ05hbWVdLmxlbmd0aCA/IDAgOiBpbmRleCArIDE7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U3R5bGUgPSBsaXN0U3R5bGVbbGlzdC50YWdOYW1lXVtpbmRleF07XHJcblx0ICAgICAgICAgICAgICAgIHNldExpc3RTdHlsZShsaXN0LGN1cnJlbnRTdHlsZSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmKGRvbVV0aWxzLmlzU3RhcnRJbmJsb2NrKHJhbmdlKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYmsgPSByYW5nZS5jcmVhdGVCb29rbWFyaygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcGFyZW50TGkuaW5zZXJ0QmVmb3JlKGxpc3QsIGxpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQobGkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYWRqdXN0TGlzdChsaXN0LGxpc3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpLGN1cnJlbnRTdHlsZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ2NvbnRlbnRjaGFuZ2UnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVUb0Jvb2ttYXJrKGJrKS5zZWxlY3QodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgICAgICBiayA9IHJhbmdlLmNyZWF0ZUJvb2ttYXJrKCk7XHJcblx0ICAgICAgICAgICAgICAgIGZvcih2YXIgaT0gMCxjbG9zZUxpc3QscGFyZW50cyA9IGRvbVV0aWxzLmZpbmRQYXJlbnRzKGxpKSxjaTtjaT1wYXJlbnRzW2krK107KXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGRvbVV0aWxzLmlzVGFnTm9kZShjaSwnb2wgdWwnKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2xvc2VMaXN0ID0gY2k7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnQgPSBsaTtcclxuXHQgICAgICAgICAgICAgICAgaWYoYmsuZW5kKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHdoaWxlKGN1cnJlbnQgJiYgIShkb21VdGlscy5nZXRQb3NpdGlvbihjdXJyZW50LCBiay5lbmQpICYgZG9tVXRpbHMuUE9TSVRJT05fRk9MTE9XSU5HKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoY2hlY2tMZXZlbChjdXJyZW50KSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZShjdXJyZW50LGZhbHNlLG51bGwsZnVuY3Rpb24obm9kZSl7cmV0dXJuIG5vZGUgIT09IGNsb3NlTGlzdH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudExpID0gY3VycmVudC5wYXJlbnROb2RlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChwYXJlbnRMaS50YWdOYW1lKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSB1dGlscy5pbmRleE9mKGxpc3RTdHlsZVtsaXN0LnRhZ05hbWVdLCBnZXRTdHlsZShwYXJlbnRMaSl8fGRvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUocGFyZW50TGksICdsaXN0LXN0eWxlLXR5cGUnKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IGluZGV4ICsgMSA9PSBsaXN0U3R5bGVbbGlzdC50YWdOYW1lXS5sZW5ndGggPyAwIDogaW5kZXggKyAxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50U3R5bGUgPSBsaXN0U3R5bGVbbGlzdC50YWdOYW1lXVtjdXJyZW50SW5kZXhdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNldExpc3RTdHlsZShsaXN0LGN1cnJlbnRTdHlsZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50TGkuaW5zZXJ0QmVmb3JlKGxpc3QsIGN1cnJlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGN1cnJlbnQgJiYgIShkb21VdGlscy5nZXRQb3NpdGlvbihjdXJyZW50LCBiay5lbmQpICYgZG9tVXRpbHMuUE9TSVRJT05fRk9MTE9XSU5HKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpID0gY3VycmVudC5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5hcHBlbmRDaGlsZChjdXJyZW50KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIWxpIHx8IGRvbVV0aWxzLmlzVGFnTm9kZShsaSwnb2wgdWwnKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihsaSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUobGkgPSBsaS5maXJzdENoaWxkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYobGkudGFnTmFtZSA9PSAnTEknKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGkgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZShjdXJyZW50LGZhbHNlLG51bGwsZnVuY3Rpb24obm9kZSl7cmV0dXJuIG5vZGUgIT09IGNsb3NlTGlzdH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IGxpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBhZGp1c3RMaXN0KGxpc3QsbGlzdC50YWdOYW1lLnRvTG93ZXJDYXNlKCksY3VycmVudFN0eWxlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gbGk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdjb250ZW50Y2hhbmdlJyk7XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLm1vdmVUb0Jvb2ttYXJrKGJrKS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgfSk7XHJcblx0ICAgIGZ1bmN0aW9uIGdldExpKHN0YXJ0KXtcclxuXHQgICAgICAgIHdoaWxlKHN0YXJ0ICYmICFkb21VdGlscy5pc0JvZHkoc3RhcnQpKXtcclxuXHQgICAgICAgICAgICBpZihzdGFydC5ub2RlTmFtZSA9PSAnVEFCTEUnKXtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmKHN0YXJ0Lm5vZGVOYW1lID09ICdMSScpe1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gc3RhcnRcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgc3RhcnQgPSBzdGFydC5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5pyJ5bqP5YiX6KGo77yM5LiO4oCcaW5zZXJ0dW5vcmRlcmVkbGlzdOKAneWRveS7pOS6kuaWpVxyXG5cdCAgICAgKiBAY29tbWFuZCBpbnNlcnRvcmRlcmVkbGlzdFxyXG5cdCAgICAgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGNvbW1hbmQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IHN0eWxlIOaPkuWFpeeahOacieW6j+WIl+ihqOexu+Wei++8jOWAvOS4uu+8mmRlY2ltYWwsbG93ZXItYWxwaGEsbG93ZXItcm9tYW4sdXBwZXItYWxwaGEsdXBwZXItcm9tYW4sY24sY24xLGNuMixudW0sbnVtMSxudW0yXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnaW5zZXJ0b3JkZXJlZGxpc3QnLCdkZWNpbWFsJyk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOafpeivouW9k+WJjemAieWMuuWGheWuueaYr+WQpuacieW6j+WIl+ihqFxyXG5cdCAgICAgKiBAY29tbWFuZCBpbnNlcnRvcmRlcmVkbGlzdFxyXG5cdCAgICAgKiBAbWV0aG9kIHF1ZXJ5Q29tbWFuZFN0YXRlXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgICAgICogQHJldHVybiB7IGludCB9IOWmguaenOW9k+WJjemAieWMuuaYr+acieW6j+WIl+ihqOi/lOWbnjHvvIzlkKbliJnov5Tlm54wXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogZWRpdG9yLnF1ZXJ5Q29tbWFuZFN0YXRlKCAnaW5zZXJ0b3JkZXJlZGxpc3QnICk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOafpeivouW9k+WJjemAieWMuuWGheWuueaYr+WQpuacieW6j+WIl+ihqFxyXG5cdCAgICAgKiBAY29tbWFuZCBpbnNlcnRvcmRlcmVkbGlzdFxyXG5cdCAgICAgKiBAbWV0aG9kIHF1ZXJ5Q29tbWFuZFZhbHVlXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgICAgICogQHJldHVybiB7IFN0cmluZyB9IOi/lOWbnuW9k+WJjeacieW6j+WIl+ihqOeahOexu+Wei++8jOWAvOS4um51bGzmiJZkZWNpbWFsLGxvd2VyLWFscGhhLGxvd2VyLXJvbWFuLHVwcGVyLWFscGhhLHVwcGVyLXJvbWFuLGNuLGNuMSxjbjIsbnVtLG51bTEsbnVtMlxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIGVkaXRvci5xdWVyeUNvbW1hbmRWYWx1ZSggJ2luc2VydG9yZGVyZWRsaXN0JyApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5peg5bqP5YiX6KGo77yM5LiO4oCcaW5zZXJ0b3JkZXJlZGxpc3TigJ3lkb3ku6TkupLmlqVcclxuXHQgICAgICogQGNvbW1hbmQgaW5zZXJ0dW5vcmRlcmVkbGlzdFxyXG5cdCAgICAgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGNvbW1hbmQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IHN0eWxlIOaPkuWFpeeahOaXoOW6j+WIl+ihqOexu+Wei++8jOWAvOS4uu+8mmNpcmNsZSxkaXNjLHNxdWFyZSxkYXNoLGRvdFxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIGVkaXRvci5leGVjQ29tbWFuZCggJ2luc2VydHVub3JkZXJlZGxpc3QnLCdjaXJjbGUnKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICAvKipcclxuXHQgICAgICog5p+l6K+i5b2T5YmN5piv5ZCm5pyJd29yZOaWh+aho+eymOi0tOi/m+adpeeahOWbvueJh1xyXG5cdCAgICAgKiBAY29tbWFuZCBpbnNlcnR1bm9yZGVyZWRsaXN0XHJcblx0ICAgICAqIEBtZXRob2QgaW5zZXJ0dW5vcmRlcmVkbGlzdFxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjb21tYW5kIOWRveS7pOWtl+espuS4slxyXG5cdCAgICAgKiBAcmV0dXJuIHsgaW50IH0g5aaC5p6c5b2T5YmN6YCJ5Yy65piv5peg5bqP5YiX6KGo6L+U5ZueMe+8jOWQpuWImei/lOWbnjBcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiBlZGl0b3IucXVlcnlDb21tYW5kU3RhdGUoICdpbnNlcnR1bm9yZGVyZWRsaXN0JyApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmn6Xor6LlvZPliY3pgInljLrlhoXlrrnmmK/lkKbmnInluo/liJfooahcclxuXHQgICAgICogQGNvbW1hbmQgaW5zZXJ0dW5vcmRlcmVkbGlzdFxyXG5cdCAgICAgKiBAbWV0aG9kIHF1ZXJ5Q29tbWFuZFZhbHVlXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGNvbW1hbmQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAqIEByZXR1cm4geyBTdHJpbmcgfSDov5Tlm57lvZPliY3ml6Dluo/liJfooajnmoTnsbvlnovvvIzlgLzkuLpudWxs5oiWY2lyY2xlLGRpc2Msc3F1YXJlLGRhc2gsZG90XHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICogZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCAnaW5zZXJ0dW5vcmRlcmVkbGlzdCcgKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cclxuXHQgICAgbWUuY29tbWFuZHNbJ2luc2VydG9yZGVyZWRsaXN0J10gPVxyXG5cdCAgICBtZS5jb21tYW5kc1snaW5zZXJ0dW5vcmRlcmVkbGlzdCddID0ge1xyXG5cdCAgICAgICAgICAgIGV4ZWNDb21tYW5kOmZ1bmN0aW9uIChjb21tYW5kLCBzdHlsZSkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYgKCFzdHlsZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSBjb21tYW5kLnRvTG93ZXJDYXNlKCkgPT0gJ2luc2VydG9yZGVyZWRsaXN0JyA/ICdkZWNpbWFsJyA6ICdkaXNjJztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgZmlsdGVyRm4gPSBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAgIG5vZGUubm9kZVR5cGUgPT0gMSA/IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9ICdicicgOiAhZG9tVXRpbHMuaXNXaGl0ZXNwYWNlKG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgIHRhZyA9IGNvbW1hbmQudG9Mb3dlckNhc2UoKSA9PSAnaW5zZXJ0b3JkZXJlZGxpc3QnID8gJ29sJyA6ICd1bCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICBmcmFnID0gbWUuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cdCAgICAgICAgICAgICAgICAvL+WOu+aOieaYr+WboOS4uuS8muWHuueOsOmAieWIsOacq+Wwvu+8jOWvvOiHtGFkanVzdG1lbnRCb3VuZGFyeee8qeWIsG9sL3Vs55qE5L2N572uXHJcblx0ICAgICAgICAgICAgICAgIC8vcmFuZ2Uuc2hyaW5rQm91bmRhcnkoKTsvLy5hZGp1c3RtZW50Qm91bmRhcnkoKTtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UuYWRqdXN0bWVudEJvdW5kYXJ5KCkuc2hyaW5rQm91bmRhcnkoKTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGJrbyA9IHJhbmdlLmNyZWF0ZUJvb2ttYXJrKHRydWUpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBnZXRMaShtZS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChia28uc3RhcnQpKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIG1vZGlmeVN0YXJ0ID0gMCxcclxuXHQgICAgICAgICAgICAgICAgICAgIGVuZCA9ICBnZXRMaShtZS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChia28uZW5kKSksXHJcblx0ICAgICAgICAgICAgICAgICAgICBtb2RpZnlFbmQgPSAwLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJlbnQsIGVuZFBhcmVudCxcclxuXHQgICAgICAgICAgICAgICAgICAgIGxpc3QsIHRtcDtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmIChzdGFydCB8fCBlbmQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXJ0ICYmIChzdGFydFBhcmVudCA9IHN0YXJ0LnBhcmVudE5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFia28uZW5kKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gc3RhcnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbmQgJiYgKGVuZFBhcmVudCA9IGVuZC5wYXJlbnROb2RlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRQYXJlbnQgPT09IGVuZFBhcmVudCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzdGFydCAhPT0gZW5kKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IHN0YXJ0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHN0YXJ0Lm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRvbVV0aWxzLmlzQmxvY2tFbG0odG1wLmZpcnN0Q2hpbGQpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0bXAuZmlyc3RDaGlsZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQodG1wLmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wLmFwcGVuZENoaWxkKHApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQodG1wKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdG1wID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0UGFyZW50Lmluc2VydEJlZm9yZSh0bXAsIGVuZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkb21VdGlscy5pc0Jsb2NrRWxtKGVuZC5maXJzdENoaWxkKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZW5kLmZpcnN0Q2hpbGQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAuYXBwZW5kQ2hpbGQoZW5kLmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZC5hcHBlbmRDaGlsZChwKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChlbmQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmJyZWFrUGFyZW50KHRtcCwgc3RhcnRQYXJlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5pc0VtcHR5Tm9kZSh0bXAucHJldmlvdXNTaWJsaW5nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUodG1wLnByZXZpb3VzU2libGluZyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5pc0VtcHR5Tm9kZSh0bXAubmV4dFNpYmxpbmcpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSh0bXAubmV4dFNpYmxpbmcpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlU3R5bGUgPSBnZXRTdHlsZShzdGFydFBhcmVudCkgfHwgZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShzdGFydFBhcmVudCwgJ2xpc3Qtc3R5bGUtdHlwZScpIHx8IChjb21tYW5kLnRvTG93ZXJDYXNlKCkgPT0gJ2luc2VydG9yZGVyZWRsaXN0JyA/ICdkZWNpbWFsJyA6ICdkaXNjJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0UGFyZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSB0YWcgJiYgbm9kZVN0eWxlID09IHN0eWxlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaSwgdG1wRnJhZyA9IG1lLmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTsgY2kgPSBmcmFnLmZpcnN0Q2hpbGQ7KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkb21VdGlscy5pc1RhZ05vZGUoY2ksJ29sIHVsJykpe1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOWIoOmZpOaXtu+8jOWtkOWIl+ihqOS4jeWkhOeQhlxyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmVhY2goZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoY2ksJ2xpJyksZnVuY3Rpb24obGkpe1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlKGxpLmZpcnN0Q2hpbGQpe1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBGcmFnLmFwcGVuZENoaWxkKGxpLmZpcnN0Q2hpbGQpO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQvL1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRnJhZy5hcHBlbmRDaGlsZChjaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2kuZmlyc3RDaGlsZCkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRnJhZy5hcHBlbmRDaGlsZChjaS5maXJzdENoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGNpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcC5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0bXBGcmFnLCB0bXApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldExpc3RTdHlsZShsaXN0LHN0eWxlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5hcHBlbmRDaGlsZChmcmFnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGxpc3QsIHRtcCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUodG1wKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ICYmIGFkanVzdExpc3QobGlzdCwgdGFnLCBzdHlsZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZVRvQm9va21hcmsoYmtvKS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+W8gOWni1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0YXJ0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcCA9IHN0YXJ0Lm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9tVXRpbHMuaXNUYWdOb2RlKHN0YXJ0LCAnb2wgdWwnKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChzdGFydCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wZnJhZyA9IG1lLmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNCbG9jayA9IDA7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3RhcnQuZmlyc3RDaGlsZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5pc0Jsb2NrRWxtKHN0YXJ0LmZpcnN0Q2hpbGQpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Jsb2NrID0gMTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wZnJhZy5hcHBlbmRDaGlsZChzdGFydC5maXJzdENoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaGFzQmxvY2spIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wUCA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBQLmFwcGVuZENoaWxkKHRtcGZyYWcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQodG1wUCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQodG1wZnJhZyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoc3RhcnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHRtcDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRQYXJlbnQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZnJhZywgc3RhcnRQYXJlbnQubmV4dFNpYmxpbmcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5pc0VtcHR5Tm9kZShzdGFydFBhcmVudCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRCZWZvcmUoc3RhcnRQYXJlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoc3RhcnRQYXJlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QWZ0ZXIoc3RhcnRQYXJlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZnlTdGFydCA9IDE7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGVuZCAmJiBkb21VdGlscy5pbkRvYyhlbmRQYXJlbnQsIG1lLmRvY3VtZW50KSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8v57uT5p2fXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBlbmRQYXJlbnQuZmlyc3RDaGlsZDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoc3RhcnQgJiYgc3RhcnQgIT09IGVuZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSBzdGFydC5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzVGFnTm9kZShzdGFydCwgJ29sIHVsJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoc3RhcnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wZnJhZyA9IG1lLmRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Jsb2NrID0gMDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzdGFydC5maXJzdENoaWxkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzQmxvY2tFbG0oc3RhcnQuZmlyc3RDaGlsZCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQmxvY2sgPSAxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBmcmFnLmFwcGVuZENoaWxkKHN0YXJ0LmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNCbG9jaykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFAgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wUC5hcHBlbmRDaGlsZCh0bXBmcmFnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKHRtcFApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKHRtcGZyYWcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHN0YXJ0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHRtcDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcERpdiA9IGRvbVV0aWxzLmNyZWF0ZUVsZW1lbnQobWUuZG9jdW1lbnQsICdkaXYnLCB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0bXBEaXYnOjFcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5tb3ZlQ2hpbGQoZW5kLCB0bXBEaXYpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKHRtcERpdik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGVuZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZW5kUGFyZW50LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZyYWcsIGVuZFBhcmVudCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kQmVmb3JlKGVuZFBhcmVudCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzRW1wdHlOb2RlKGVuZFBhcmVudCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGVuZFBhcmVudCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZnlFbmQgPSAxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmICghbW9kaWZ5U3RhcnQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QmVmb3JlKG1lLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJrby5zdGFydCkpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChia28uZW5kICYmICFtb2RpZnlFbmQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldEVuZEFmdGVyKG1lLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGJrby5lbmQpKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5lbmxhcmdlKHRydWUsIGZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm90RXhjaGFuZ2Vbbm9kZS50YWdOYW1lXTtcclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBmcmFnID0gbWUuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdmFyIGJrID0gcmFuZ2UuY3JlYXRlQm9va21hcmsoKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZShiay5zdGFydCwgZmFsc2UsIGZpbHRlckZuKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIHRtcFJhbmdlID0gcmFuZ2UuY2xvbmVSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wTm9kZSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGJsb2NrID0gZG9tVXRpbHMuaXNCbG9ja0VsbTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQgIT09IGJrLmVuZCAmJiAoZG9tVXRpbHMuZ2V0UG9zaXRpb24oY3VycmVudCwgYmsuZW5kKSAmIGRvbVV0aWxzLlBPU0lUSU9OX1BSRUNFRElORykpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudC5ub2RlVHlwZSA9PSAzIHx8IGR0ZC5saVtjdXJyZW50LnRhZ05hbWVdKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQubm9kZVR5cGUgPT0gMSAmJiBkdGQuJGxpc3RbY3VycmVudC50YWdOYW1lXSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY3VycmVudC5maXJzdENoaWxkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGN1cnJlbnQuZmlyc3RDaGlsZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wTm9kZSA9IGRvbVV0aWxzLmdldE5leHREb21Ob2RlKGN1cnJlbnQsIGZhbHNlLCBmaWx0ZXJGbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShjdXJyZW50KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHRtcE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdG1wTm9kZSA9IGN1cnJlbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdG1wUmFuZ2Uuc2V0U3RhcnRCZWZvcmUoY3VycmVudCk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChjdXJyZW50ICYmIGN1cnJlbnQgIT09IGJrLmVuZCAmJiAoIWJsb2NrKGN1cnJlbnQpIHx8IGRvbVV0aWxzLmlzQm9va21hcmtOb2RlKGN1cnJlbnQpICkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wTm9kZSA9IGN1cnJlbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZShjdXJyZW50LCBmYWxzZSwgbnVsbCwgZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhbm90RXhjaGFuZ2Vbbm9kZS50YWdOYW1lXTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCAmJiBibG9jayhjdXJyZW50KSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXAgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZSh0bXBOb2RlLCBmYWxzZSwgZmlsdGVyRm4pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG1wICYmIGRvbVV0aWxzLmlzQm9va21hcmtOb2RlKHRtcCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZSh0bXAsIGZhbHNlLCBmaWx0ZXJGbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gdG1wO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRtcFJhbmdlLnNldEVuZEFmdGVyKHRtcE5vZGUpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gZG9tVXRpbHMuZ2V0TmV4dERvbU5vZGUodG1wTm9kZSwgZmFsc2UsIGZpbHRlckZuKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxpID0gcmFuZ2UuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGkuYXBwZW5kQ2hpbGQodG1wUmFuZ2UuZXh0cmFjdENvbnRlbnRzKCkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRvbVV0aWxzLmlzRW1wdHlOb2RlKGxpKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXBOb2RlID0gcmFuZ2UuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShsaS5maXJzdENoaWxkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcE5vZGUuYXBwZW5kQ2hpbGQobGkuZmlyc3RDaGlsZClcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaS5hcHBlbmRDaGlsZCh0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChsaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZShjdXJyZW50LCB0cnVlLCBmaWx0ZXJGbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UubW92ZVRvQm9va21hcmsoYmspLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICBsaXN0ID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xyXG5cdCAgICAgICAgICAgICAgICBzZXRMaXN0U3R5bGUobGlzdCxzdHlsZSk7XHJcblx0ICAgICAgICAgICAgICAgIGxpc3QuYXBwZW5kQ2hpbGQoZnJhZyk7XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUobGlzdCk7XHJcblx0ICAgICAgICAgICAgICAgIC8v5b2T5YmNbGlzdOS4iuS4i+eci+iDveWQpuWQiOW5tlxyXG5cdCAgICAgICAgICAgICAgICBhZGp1c3RMaXN0KGxpc3QsIHRhZywgc3R5bGUpO1xyXG5cdCAgICAgICAgICAgICAgICAvL+WOu+aOieWGl+S9meeahHRtcERpdlxyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2ksIHRtcERpdnMgPSBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZShsaXN0LCAnZGl2Jyk7IGNpID0gdG1wRGl2c1tpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNpLmdldEF0dHJpYnV0ZSgndG1wRGl2JykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY2ksIHRydWUpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UubW92ZVRvQm9va21hcmsoYmtvKS5zZWxlY3QoKTtcclxuXHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTpmdW5jdGlvbiAoY29tbWFuZCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgdGFnID0gY29tbWFuZC50b0xvd2VyQ2FzZSgpID09ICdpbnNlcnRvcmRlcmVkbGlzdCcgPyAnb2wnIDogJ3VsJztcclxuXHQgICAgICAgICAgICAgICAgdmFyIHBhdGggPSB0aGlzLnNlbGVjdGlvbi5nZXRTdGFydEVsZW1lbnRQYXRoKCk7XHJcblx0ICAgICAgICAgICAgICAgIGZvcih2YXIgaT0gMCxjaTtjaSA9IHBhdGhbaSsrXTspe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoY2kubm9kZU5hbWUgPT0gJ1RBQkxFJyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDBcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKHRhZyA9PSBjaS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuXHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBxdWVyeUNvbW1hbmRWYWx1ZTpmdW5jdGlvbiAoY29tbWFuZCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgdGFnID0gY29tbWFuZC50b0xvd2VyQ2FzZSgpID09ICdpbnNlcnRvcmRlcmVkbGlzdCcgPyAnb2wnIDogJ3VsJztcclxuXHQgICAgICAgICAgICAgICAgdmFyIHBhdGggPSB0aGlzLnNlbGVjdGlvbi5nZXRTdGFydEVsZW1lbnRQYXRoKCksXHJcblx0ICAgICAgICAgICAgICAgICAgICBub2RlO1xyXG5cdCAgICAgICAgICAgICAgICBmb3IodmFyIGk9IDAsY2k7Y2kgPSBwYXRoW2krK107KXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGNpLm5vZGVOYW1lID09ICdUQUJMRScpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYodGFnID09IGNpLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBjaTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUgPyBnZXRTdHlsZShub2RlKSB8fCBkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsICdsaXN0LXN0eWxlLXR5cGUnKSA6IG51bGw7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfTtcclxuXHR9O1xyXG5cclxuXHJcblxyXG5cdC8vIHBsdWdpbnMvc291cmNlLmpzXHJcblx0LyoqXHJcblx0ICog5rqQ56CB57yW6L6R5o+S5Lu2XHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQoZnVuY3Rpb24gKCl7XHJcblx0ICAgIHZhciBzb3VyY2VFZGl0b3JzID0ge1xyXG5cdCAgICAgICAgdGV4dGFyZWE6IGZ1bmN0aW9uIChlZGl0b3IsIGhvbGRlcil7XHJcblx0ICAgICAgICAgICAgdmFyIHRleHRhcmVhID0gaG9sZGVyLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcclxuXHQgICAgICAgICAgICB0ZXh0YXJlYS5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOmFic29sdXRlO3Jlc2l6ZTpub25lO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Ym9yZGVyOjA7cGFkZGluZzowO21hcmdpbjowO292ZXJmbG93LXk6YXV0bzsnO1xyXG5cdCAgICAgICAgICAgIC8vIHRvZG86IElF5LiL5Y+q5pyJb25yZXNpemXlsZ7mgKflj6/nlKguLi4g5b6I57qg57uTXHJcblx0ICAgICAgICAgICAgaWYgKGJyb3dzZXIuaWUgJiYgYnJvd3Nlci52ZXJzaW9uIDwgOCkge1xyXG5cdCAgICAgICAgICAgICAgICB0ZXh0YXJlYS5zdHlsZS53aWR0aCA9IGhvbGRlci5vZmZzZXRXaWR0aCArICdweCc7XHJcblx0ICAgICAgICAgICAgICAgIHRleHRhcmVhLnN0eWxlLmhlaWdodCA9IGhvbGRlci5vZmZzZXRIZWlnaHQgKyAncHgnO1xyXG5cdCAgICAgICAgICAgICAgICBob2xkZXIub25yZXNpemUgPSBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLnN0eWxlLndpZHRoID0gaG9sZGVyLm9mZnNldFdpZHRoICsgJ3B4JztcclxuXHQgICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLnN0eWxlLmhlaWdodCA9IGhvbGRlci5vZmZzZXRIZWlnaHQgKyAncHgnO1xyXG5cdCAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBob2xkZXIuYXBwZW5kQ2hpbGQodGV4dGFyZWEpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uIChjb250ZW50KXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRleHRhcmVhLnZhbHVlID0gY29udGVudDtcclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgZ2V0Q29udGVudDogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dGFyZWEudmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIHNlbGVjdDogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcmFuZ2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoYnJvd3Nlci5pZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gdGV4dGFyZWEuY3JlYXRlVGV4dFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vdG9kbzogY2hyb21l5LiL5peg5rOV6K6+572u54Sm54K5XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWEuc2V0U2VsZWN0aW9uUmFuZ2UoMCwgMCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGV4dGFyZWEuZm9jdXMoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgZGlzcG9zZTogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBob2xkZXIucmVtb3ZlQ2hpbGQodGV4dGFyZWEpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy8gdG9kb1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaG9sZGVyLm9ucmVzaXplID0gbnVsbDtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRleHRhcmVhID0gbnVsbDtcclxuXHQgICAgICAgICAgICAgICAgICAgIGhvbGRlciA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGNvZGVtaXJyb3I6IGZ1bmN0aW9uIChlZGl0b3IsIGhvbGRlcil7XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBjb2RlRWRpdG9yID0gd2luZG93LkNvZGVNaXJyb3IoaG9sZGVyLCB7XHJcblx0ICAgICAgICAgICAgICAgIG1vZGU6IFwidGV4dC9odG1sXCIsXHJcblx0ICAgICAgICAgICAgICAgIHRhYk1vZGU6IFwiaW5kZW50XCIsXHJcblx0ICAgICAgICAgICAgICAgIGxpbmVOdW1iZXJzOiB0cnVlLFxyXG5cdCAgICAgICAgICAgICAgICBsaW5lV3JhcHBpbmc6dHJ1ZVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIHZhciBkb20gPSBjb2RlRWRpdG9yLmdldFdyYXBwZXJFbGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgZG9tLnN0eWxlLmNzc1RleHQgPSAncG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Zm9udC1mYW1pbHk6Y29uc29sYXMsXCJDb3VyaWVyIG5ld1wiLG1vbm9zcGFjZTtmb250LXNpemU6MTNweDsnO1xyXG5cdCAgICAgICAgICAgIGNvZGVFZGl0b3IuZ2V0U2Nyb2xsZXJFbGVtZW50KCkuc3R5bGUuY3NzVGV4dCA9ICdwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTsnO1xyXG5cdCAgICAgICAgICAgIGNvZGVFZGl0b3IucmVmcmVzaCgpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgIGdldENvZGVNaXJyb3I6ZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2RlRWRpdG9yO1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICBzZXRDb250ZW50OiBmdW5jdGlvbiAoY29udGVudCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlRWRpdG9yLnNldFZhbHVlKGNvbnRlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICBnZXRDb250ZW50OiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2RlRWRpdG9yLmdldFZhbHVlKCk7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIHNlbGVjdDogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjb2RlRWRpdG9yLmZvY3VzKCk7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaG9sZGVyLnJlbW92ZUNoaWxkKGRvbSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb20gPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY29kZUVkaXRvciA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgVUUucGx1Z2luc1snc291cmNlJ10gPSBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICB2YXIgb3B0ID0gdGhpcy5vcHRpb25zO1xyXG5cdCAgICAgICAgdmFyIHNvdXJjZU1vZGUgPSBmYWxzZTtcclxuXHQgICAgICAgIHZhciBzb3VyY2VFZGl0b3I7XHJcblx0ICAgICAgICB2YXIgb3JnU2V0Q29udGVudDtcclxuXHQgICAgICAgIG9wdC5zb3VyY2VFZGl0b3IgPSBicm93c2VyLmllICA/ICd0ZXh0YXJlYScgOiAob3B0LnNvdXJjZUVkaXRvciB8fCAnY29kZW1pcnJvcicpO1xyXG5cclxuXHQgICAgICAgIG1lLnNldE9wdCh7XHJcblx0ICAgICAgICAgICAgc291cmNlRWRpdG9yRmlyc3Q6ZmFsc2VcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgZnVuY3Rpb24gY3JlYXRlU291cmNlRWRpdG9yKGhvbGRlcil7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHNvdXJjZUVkaXRvcnNbb3B0LnNvdXJjZUVkaXRvciA9PSAnY29kZW1pcnJvcicgJiYgd2luZG93LkNvZGVNaXJyb3IgPyAnY29kZW1pcnJvcicgOiAndGV4dGFyZWEnXShtZSwgaG9sZGVyKTtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB2YXIgYmFrQ3NzVGV4dDtcclxuXHQgICAgICAgIC8v6Kej5Yaz5Zyo5rqQ56CB5qih5byP5LiLZ2V0Q29udGVudOS4jeiDveW+l+WIsOacgOaWsOeahOWGheWuuemXrumimFxyXG5cdCAgICAgICAgdmFyIG9sZEdldENvbnRlbnQsXHJcblx0ICAgICAgICAgICAgYmFrQWRkcmVzcztcclxuXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOWIh+aNoua6kOeggeaooeW8j+WSjOe8lui+keaooeW8j1xyXG5cdCAgICAgICAgICogQGNvbW1hbmQgc291cmNlXHJcblx0ICAgICAgICAgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnc291cmNlJyk7XHJcblx0ICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAqL1xyXG5cclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5p+l6K+i5b2T5YmN57yW6L6R5Yy65Z+f55qE54q25oCB5piv5rqQ56CB5qih5byP6L+Y5piv5Y+v6KeG5YyW5qih5byPXHJcblx0ICAgICAgICAgKiBAY29tbWFuZCBzb3VyY2VcclxuXHQgICAgICAgICAqIEBtZXRob2QgcXVlcnlDb21tYW5kU3RhdGVcclxuXHQgICAgICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgICAgICAgICAqIEByZXR1cm4geyBpbnQgfSDlpoLmnpzlvZPliY3mmK/mupDnoIHnvJbovpHmqKHlvI/vvIzov5Tlm54x77yM5ZCm5YiZ6L+U5ZueMFxyXG5cdCAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAqIGVkaXRvci5xdWVyeUNvbW1hbmRTdGF0ZSggJ3NvdXJjZScgKTtcclxuXHQgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICovXHJcblxyXG5cdCAgICAgICAgbWUuY29tbWFuZHNbJ3NvdXJjZSddID0ge1xyXG5cdCAgICAgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHNvdXJjZU1vZGUgPSAhc291cmNlTW9kZTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHNvdXJjZU1vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJha0FkZHJlc3MgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKS5jcmVhdGVBZGRyZXNzKGZhbHNlLHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUudW5kb01hbmdlciAmJiBtZS51bmRvTWFuZ2VyLnNhdmUodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihicm93c2VyLmdlY2tvKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5ib2R5LmNvbnRlbnRFZGl0YWJsZSA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGJha0Nzc1RleHQgPSBtZS5pZnJhbWUuc3R5bGUuY3NzVGV4dDtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmlmcmFtZS5zdHlsZS5jc3NUZXh0ICs9ICdwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0zMjc2OHB4O3RvcDotMzI3NjhweDsnO1xyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ2JlZm9yZWdldGNvbnRlbnQnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciByb290ID0gVUUuaHRtbHBhcnNlcihtZS5ib2R5LmlubmVySFRNTCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5maWx0ZXJPdXRwdXRSdWxlKHJvb3QpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcm9vdC50cmF2ZXJzYWwoZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS50eXBlID09ICdlbGVtZW50Jykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vZGUudGFnTmFtZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndGQnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndGgnOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY2FwdGlvbic6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihub2RlLmNoaWxkcmVuICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09IDEpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5vZGUuZmlyc3RDaGlsZCgpLnRhZ05hbWUgPT0gJ2JyJyApe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCgpKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3ByZSc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5pbm5lclRleHQobm9kZS5pbm5lclRleHQoKS5yZXBsYWNlKC8mbmJzcDsvZywnICcpKVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnYWZ0ZXJnZXRjb250ZW50Jyk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByb290LnRvSHRtbCh0cnVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBzb3VyY2VFZGl0b3IgPSBjcmVhdGVTb3VyY2VFZGl0b3IobWUuaWZyYW1lLnBhcmVudE5vZGUpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHNvdXJjZUVkaXRvci5zZXRDb250ZW50KGNvbnRlbnQpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIG9yZ1NldENvbnRlbnQgPSBtZS5zZXRDb250ZW50O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLnNldENvbnRlbnQgPSBmdW5jdGlvbihodG1sKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL+i/memHjOaaguaXtuS4jeinpuWPkeS6i+S7tu+8jOmYsuatouaKpemUmVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb290ID0gVUUuaHRtbHBhcnNlcihodG1sKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5maWx0ZXJJbnB1dFJ1bGUocm9vdCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCA9IHJvb3QudG9IdG1sKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlRWRpdG9yLnNldENvbnRlbnQoaHRtbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlRWRpdG9yLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmFkZExpc3RlbmVyKCdmdWxsc2NyZWVuY2hhbmdlZCcsIGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZUVkaXRvci5nZXRDb2RlTWlycm9yKCkucmVmcmVzaCgpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1jYXRjaChlKXt9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+mHjee9rmdldENvbnRlbnTvvIzmupDnoIHmqKHlvI/kuIvlj5blgLzkuZ/og73mmK/mnIDmlrDnmoTmlbDmja5cclxuXHQgICAgICAgICAgICAgICAgICAgIG9sZEdldENvbnRlbnQgPSBtZS5nZXRDb250ZW50O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZ2V0Q29udGVudCA9IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2VFZGl0b3IuZ2V0Q29udGVudCgpIHx8ICc8cD4nICsgKGJyb3dzZXIuaWUgPyAnJyA6ICc8YnIvPicpKyc8L3A+JztcclxuXHQgICAgICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5pZnJhbWUuc3R5bGUuY3NzVGV4dCA9IGJha0Nzc1RleHQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY29udCA9IHNvdXJjZUVkaXRvci5nZXRDb250ZW50KCkgfHwgJzxwPicgKyAoYnJvd3Nlci5pZSA/ICcnIDogJzxici8+JykrJzwvcD4nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/lpITnkIbmjolibG9ja+iKgueCueWJjeWQjueahOepuuagvCzmnInlj6/og73kvJror6/lkb3kuK3vvIzmmoLml7bkuI3ogIPomZFcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbnQgPSBjb250LnJlcGxhY2UobmV3IFJlZ0V4cCgnW1xcXFxyXFxcXHRcXFxcbiBdKjxcXC8/KFxcXFx3KylcXFxccyooPzpbXj5dKik+JywnZycpLCBmdW5jdGlvbihhLGIpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKGIgJiYgIWR0ZC4kaW5saW5lV2l0aEFbYi50b0xvd2VyQ2FzZSgpXSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhLnJlcGxhY2UoLyheW1xcblxcclxcdCBdKil8KFtcXG5cXHJcXHQgXSokKS9nLCcnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEucmVwbGFjZSgvKF5bXFxuXFxyXFx0XSopfChbXFxuXFxyXFx0XSokKS9nLCcnKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuc2V0Q29udGVudCA9IG9yZ1NldENvbnRlbnQ7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuc2V0Q29udGVudChjb250KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHNvdXJjZUVkaXRvci5kaXNwb3NlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzb3VyY2VFZGl0b3IgPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/ov5jljp9nZXRDb250ZW505pa55rOVXHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5nZXRDb250ZW50ID0gb2xkR2V0Q29udGVudDtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBmaXJzdCA9IG1lLmJvZHkuZmlyc3RDaGlsZDtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8vdHJhY2U6MTEwNiDpg73liKDpmaTnqbrkuobvvIzkuIvovrnkvJrmiqXplJnvvIzmiYDku6XooaXlhYXkuIDkuKpw5Y2g5L2NXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZighZmlyc3Qpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmJvZHkuaW5uZXJIVE1MID0gJzxwPicrKGJyb3dzZXIuaWU/Jyc6Jzxici8+JykrJzwvcD4nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gbWUuYm9keS5maXJzdENoaWxkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+imgeWcqGlmbeS4uuaYvuekuuaXtmZm5omN6IO95Y+W5Yiwc2VsZWN0aW9uLOWQpuWImeaKpemUmVxyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/ov5nph4zkuI3og73mr5TovoPkvY3nva7kuoZcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLnVuZG9NYW5nZXIgJiYgbWUudW5kb01hbmdlci5zYXZlKHRydWUpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGJyb3dzZXIuZ2Vja28pe1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LnN0eWxlLmNzc1RleHQgPSAncG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDotMzI3NjhweCc7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaW5wdXQpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5ib2R5LmNvbnRlbnRFZGl0YWJsZSA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuc2V0Vmlld3BvcnRPZmZzZXQoaW5wdXQsIHsgbGVmdDogLTMyNzY4LCB0b3A6IDAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmZvY3VzKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmJvZHkuY29udGVudEVkaXRhYmxlID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpLm1vdmVUb0FkZHJlc3MoYmFrQWRkcmVzcykuc2VsZWN0KHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGlucHV0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy9pZeS4i+acieWPr+iDveaKpemUme+8jOavlOWmguWcqOS7o+eggemhtuWktOeahOaDheWGtVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRyeXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuc2VsZWN0aW9uLmdldFJhbmdlKCkubW92ZVRvQWRkcmVzcyhiYWtBZGRyZXNzKS5zZWxlY3QodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGUpe31cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3NvdXJjZW1vZGVjaGFuZ2VkJywgc291cmNlTW9kZSk7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2VNb2RlfDA7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBub3ROZWVkVW5kbyA6IDFcclxuXHQgICAgICAgIH07XHJcblx0ICAgICAgICB2YXIgb2xkUXVlcnlDb21tYW5kU3RhdGUgPSBtZS5xdWVyeUNvbW1hbmRTdGF0ZTtcclxuXHJcblx0ICAgICAgICBtZS5xdWVyeUNvbW1hbmRTdGF0ZSA9IGZ1bmN0aW9uIChjbWROYW1lKXtcclxuXHQgICAgICAgICAgICBjbWROYW1lID0gY21kTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdCAgICAgICAgICAgIGlmIChzb3VyY2VNb2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgIC8v5rqQ56CB5qih5byP5LiL5Y+v5Lul5byA5ZCv55qE5ZG95LukXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBjbWROYW1lIGluIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICdzb3VyY2UnIDogMSxcclxuXHQgICAgICAgICAgICAgICAgICAgICdmdWxsc2NyZWVuJyA6IDFcclxuXHQgICAgICAgICAgICAgICAgfSA/IDEgOiAtMVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gb2xkUXVlcnlDb21tYW5kU3RhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuXHQgICAgICAgIH07XHJcblxyXG5cdCAgICAgICAgaWYob3B0LnNvdXJjZUVkaXRvciA9PSBcImNvZGVtaXJyb3JcIil7XHJcblxyXG5cdCAgICAgICAgICAgIG1lLmFkZExpc3RlbmVyKFwicmVhZHlcIixmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgICAgICB1dGlscy5sb2FkRmlsZShkb2N1bWVudCx7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzcmMgOiBvcHQuY29kZU1pcnJvckpzVXJsIHx8IG9wdC5VRURJVE9SX0hPTUVfVVJMICsgXCJ0aGlyZC1wYXJ0eS9jb2RlbWlycm9yL2NvZGVtaXJyb3IuanNcIixcclxuXHQgICAgICAgICAgICAgICAgICAgIHRhZyA6IFwic2NyaXB0XCIsXHJcblx0ICAgICAgICAgICAgICAgICAgICB0eXBlIDogXCJ0ZXh0L2phdmFzY3JpcHRcIixcclxuXHQgICAgICAgICAgICAgICAgICAgIGRlZmVyIDogXCJkZWZlclwiXHJcblx0ICAgICAgICAgICAgICAgIH0sZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKG9wdC5zb3VyY2VFZGl0b3JGaXJzdCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5leGVjQ29tbWFuZChcInNvdXJjZVwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LDApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgdXRpbHMubG9hZEZpbGUoZG9jdW1lbnQse1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGFnIDogXCJsaW5rXCIsXHJcblx0ICAgICAgICAgICAgICAgICAgICByZWwgOiBcInN0eWxlc2hlZXRcIixcclxuXHQgICAgICAgICAgICAgICAgICAgIHR5cGUgOiBcInRleHQvY3NzXCIsXHJcblx0ICAgICAgICAgICAgICAgICAgICBocmVmIDogb3B0LmNvZGVNaXJyb3JDc3NVcmwgfHwgb3B0LlVFRElUT1JfSE9NRV9VUkwgKyBcInRoaXJkLXBhcnR5L2NvZGVtaXJyb3IvY29kZW1pcnJvci5jc3NcIlxyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9O1xyXG5cclxuXHR9KSgpO1xyXG5cclxuXHQvLyBwbHVnaW5zL2VudGVya2V5LmpzXHJcblx0Ly8vaW1wb3J0IGNvcmVcclxuXHQvLy9pbXBvcnQgcGx1Z2lucy91bmRvLmpzXHJcblx0Ly8vY29tbWFuZHMg6K6+572u5Zue6L2m5qCH562+cOaIlmJyXHJcblx0Ly8vY29tbWFuZHNOYW1lICBFbnRlcktleVxyXG5cdC8vL2NvbW1hbmRzVGl0bGUgIOiuvue9ruWbnui9puagh+etvnDmiJZiclxyXG5cdC8qKlxyXG5cdCAqIEBkZXNjcmlwdGlvbiDlpITnkIblm57ovaZcclxuXHQgKiBAYXV0aG9yIHpoYW55aVxyXG5cdCAqL1xyXG5cdFVFLnBsdWdpbnNbJ2VudGVya2V5J10gPSBmdW5jdGlvbigpIHtcclxuXHQgICAgdmFyIGhUYWcsXHJcblx0ICAgICAgICBtZSA9IHRoaXMsXHJcblx0ICAgICAgICB0YWcgPSBtZS5vcHRpb25zLmVudGVyVGFnO1xyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcigna2V5dXAnLCBmdW5jdGlvbih0eXBlLCBldnQpIHtcclxuXHJcblx0ICAgICAgICB2YXIga2V5Q29kZSA9IGV2dC5rZXlDb2RlIHx8IGV2dC53aGljaDtcclxuXHQgICAgICAgIGlmIChrZXlDb2RlID09IDEzKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgIHN0YXJ0ID0gcmFuZ2Uuc3RhcnRDb250YWluZXIsXHJcblx0ICAgICAgICAgICAgICAgIGRvU2F2ZTtcclxuXHJcblx0ICAgICAgICAgICAgLy/kv67mraPlnKhoMS1oNumHjOi+ueWbnui9puWQjuS4jeiDveW1jOWll3DnmoTpl67pophcclxuXHQgICAgICAgICAgICBpZiAoIWJyb3dzZXIuaWUpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmICgvaFxcZC9pLnRlc3QoaFRhZykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChicm93c2VyLmdlY2tvKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHN0YXJ0LCBbICdoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsJ2Jsb2NrcXVvdGUnLCdjYXB0aW9uJywndGFibGUnXSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmRvY3VtZW50LmV4ZWNDb21tYW5kKCdmb3JtYXRCbG9jaycsIGZhbHNlLCAnPHA+Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvU2F2ZSA9IDE7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL2Nocm9tZSByZW1vdmUgZGl2XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0Lm5vZGVUeXBlID09IDEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IG1lLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKSxkaXY7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUodG1wKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGl2ID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZSh0bXAsICdkaXYnLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpdikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZGl2LmZpcnN0Q2hpbGQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmFwcGVuZENoaWxkKGRpdi5maXJzdENoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwLCBkaXYpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGRpdik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZSh0bXApLnNldEN1cnNvcigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9TYXZlID0gMTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUodG1wKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChtZS51bmRvTWFuZ2VyICYmIGRvU2F2ZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLnVuZG9NYW5nZXIuc2F2ZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIC8v5rKh5pyJ56uZ5L2N56ym77yM5Lya5Ye6546w5aSa6KGM55qE6Zeu6aKYXHJcblx0ICAgICAgICAgICAgICAgIGJyb3dzZXIub3BlcmEgJiYgIHJhbmdlLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScsdHJ1ZSx0cnVlKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKHR5cGUsIGV2dCkge1xyXG5cdCAgICAgICAgdmFyIGtleUNvZGUgPSBldnQua2V5Q29kZSB8fCBldnQud2hpY2g7XHJcblx0ICAgICAgICBpZiAoa2V5Q29kZSA9PSAxMykgey8v5Zue6L2mXHJcblx0ICAgICAgICAgICAgaWYobWUuZmlyZUV2ZW50KCdiZWZvcmVlbnRlcmtleWRvd24nKSl7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnByZXZlbnREZWZhdWx0KGV2dCk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdzYXZlU2NlbmUnLHRydWUsdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgaFRhZyA9ICcnO1xyXG5cclxuXHJcblx0ICAgICAgICAgICAgdmFyIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblxyXG5cdCAgICAgICAgICAgIGlmICghcmFuZ2UuY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgICAgIC8v6LeodGTkuI3og73liKBcclxuXHQgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcmFuZ2Uuc3RhcnRDb250YWluZXIsXHJcblx0ICAgICAgICAgICAgICAgICAgICBlbmQgPSByYW5nZS5lbmRDb250YWluZXIsXHJcblx0ICAgICAgICAgICAgICAgICAgICBzdGFydFRkID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShzdGFydCwgJ3RkJywgdHJ1ZSksXHJcblx0ICAgICAgICAgICAgICAgICAgICBlbmRUZCA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUoZW5kLCAndGQnLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHN0YXJ0VGQgJiYgZW5kVGQgJiYgc3RhcnRUZCAhPT0gZW5kVGQgfHwgIXN0YXJ0VGQgJiYgZW5kVGQgfHwgc3RhcnRUZCAmJiAhZW5kVGQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCA/IGV2dC5wcmV2ZW50RGVmYXVsdCgpIDogKCBldnQucmV0dXJuVmFsdWUgPSBmYWxzZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKHRhZyA9PSAncCcpIHtcclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIWJyb3dzZXIuaWUpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocmFuZ2Uuc3RhcnRDb250YWluZXIsIFsnb2wnLCd1bCcsJ3AnLCAnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnLCdibG9ja3F1b3RlJywnY2FwdGlvbiddLCB0cnVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAvL29wZXJh5LiL5omn6KGMZm9ybWF0YmxvY2vkvJrlnKh0YWJsZeeahOWcuuaZr+S4i+aciemXrumimO+8jOWbnui9puWcqG9wZXJh5Y6f55Sf5pSv5oyB5b6I5aW977yM5omA5Lul5pqC5pe25Zyob3BlcmHljrvmjonosIPnlKjov5nkuKrljp/nlJ/nmoRjb21tYW5kXHJcblx0ICAgICAgICAgICAgICAgICAgICAvL3RyYWNlOjI0MzFcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghc3RhcnQgJiYgIWJyb3dzZXIub3BlcmEpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuZG9jdW1lbnQuZXhlY0NvbW1hbmQoJ2Zvcm1hdEJsb2NrJywgZmFsc2UsICc8cD4nKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJyb3dzZXIuZ2Vja28pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCAncCcsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCAmJiBkb21VdGlscy5yZW1vdmVEaXJ0eUF0dHIoc3RhcnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBoVGFnID0gc3RhcnQudGFnTmFtZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFydC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT0gJ3AnICYmIGJyb3dzZXIuZ2Vja28gJiYgZG9tVXRpbHMucmVtb3ZlRGlydHlBdHRyKHN0YXJ0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0ID8gZXZ0LnByZXZlbnREZWZhdWx0KCkgOiAoIGV2dC5yZXR1cm5WYWx1ZSA9IGZhbHNlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmICghcmFuZ2UuY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5kZWxldGVDb250ZW50cygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzdGFydC5ub2RlVHlwZSA9PSAxICYmIChzdGFydCA9IHN0YXJ0LmNoaWxkTm9kZXNbcmFuZ2Uuc3RhcnRPZmZzZXRdKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzdGFydC5ub2RlVHlwZSA9PSAxKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkdGQuJGVtcHR5W3N0YXJ0LnRhZ05hbWVdKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZShzdGFydCkuc2V0Q3Vyc29yKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWUudW5kb01hbmdlcikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLnVuZG9NYW5nZXIuc2F2ZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RhcnQuZmlyc3RDaGlsZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJyID0gcmFuZ2UuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0LmFwcGVuZENoaWxkKGJyKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKS5zZXRDdXJzb3IoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZS51bmRvTWFuZ2VyKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUudW5kb01hbmdlci5zYXZlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBzdGFydC5maXJzdENoaWxkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnQgPT09IHJhbmdlLnN0YXJ0Q29udGFpbmVyLmNoaWxkTm9kZXNbcmFuZ2Uuc3RhcnRPZmZzZXRdKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyID0gcmFuZ2UuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnInKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZShicikuc2V0Q3Vyc29yKCk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCAwKS5zZXRDdXJzb3IoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnIgPSByYW5nZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdicicpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUoYnIpLnNldFN0YXJ0QWZ0ZXIoYnIpLnNldEN1cnNvcigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBiciA9IHJhbmdlLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKGJyKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnQgPSBici5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudC5sYXN0Q2hpbGQgPT09IGJyKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnIucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYnIuY2xvbmVOb2RlKHRydWUpLCBicik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnRCZWZvcmUoYnIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEFmdGVyKGJyKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldEN1cnNvcigpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9KTtcclxuXHR9O1xyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9rZXlzdHJva2VzLmpzXHJcblx0Lyog5aSE55CG54m55q6K6ZSu55qE5YW85a655oCn6Zeu6aKYICovXHJcblx0VUUucGx1Z2luc1sna2V5c3Ryb2tlcyddID0gZnVuY3Rpb24oKSB7XHJcblx0ICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgIHZhciBjb2xsYXBzZWQgPSB0cnVlO1xyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uKHR5cGUsIGV2dCkge1xyXG5cdCAgICAgICAgdmFyIGtleUNvZGUgPSBldnQua2V5Q29kZSB8fCBldnQud2hpY2gsXHJcblx0ICAgICAgICAgICAgcm5nID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblxyXG5cdCAgICAgICAgLy/lpITnkIblhajpgInnmoTmg4XlhrVcclxuXHQgICAgICAgIGlmKCFybmcuY29sbGFwc2VkICYmICEoZXZ0LmN0cmxLZXkgfHwgZXZ0LnNoaWZ0S2V5IHx8IGV2dC5hbHRLZXkgfHwgZXZ0Lm1ldGFLZXkpICYmIChrZXlDb2RlID49IDY1ICYmIGtleUNvZGUgPD05MFxyXG5cdCAgICAgICAgICAgIHx8IGtleUNvZGUgPj0gNDggJiYga2V5Q29kZSA8PSA1NyB8fFxyXG5cdCAgICAgICAgICAgIGtleUNvZGUgPj0gOTYgJiYga2V5Q29kZSA8PSAxMTEgfHwge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgMTM6MSxcclxuXHQgICAgICAgICAgICAgICAgICAgIDg6MSxcclxuXHQgICAgICAgICAgICAgICAgICAgIDQ2OjFcclxuXHQgICAgICAgICAgICAgICAgfVtrZXlDb2RlXSlcclxuXHQgICAgICAgICAgICApe1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgdG1wTm9kZSA9IHJuZy5zdGFydENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICBpZihkb21VdGlscy5pc0ZpbGxDaGFyKHRtcE5vZGUpKXtcclxuXHQgICAgICAgICAgICAgICAgcm5nLnNldFN0YXJ0QmVmb3JlKHRtcE5vZGUpXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRtcE5vZGUgPSBybmcuZW5kQ29udGFpbmVyO1xyXG5cdCAgICAgICAgICAgIGlmKGRvbVV0aWxzLmlzRmlsbENoYXIodG1wTm9kZSkpe1xyXG5cdCAgICAgICAgICAgICAgICBybmcuc2V0RW5kQWZ0ZXIodG1wTm9kZSlcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcm5nLnR4dFRvRWxtQm91bmRhcnkoKTtcclxuXHQgICAgICAgICAgICAvL+e7k+adn+i+ueeVjOWPr+iDveaUvuWIsOS6hmJy55qE5YmN6L6577yM6KaB5oqKYnLljIXlkKvov5vmnaVcclxuXHQgICAgICAgICAgICAvLyB4W3h4eF08YnIvPlxyXG5cdCAgICAgICAgICAgIGlmKHJuZy5lbmRDb250YWluZXIgJiYgcm5nLmVuZENvbnRhaW5lci5ub2RlVHlwZSA9PSAxKXtcclxuXHQgICAgICAgICAgICAgICAgdG1wTm9kZSA9IHJuZy5lbmRDb250YWluZXIuY2hpbGROb2Rlc1tybmcuZW5kT2Zmc2V0XTtcclxuXHQgICAgICAgICAgICAgICAgaWYodG1wTm9kZSAmJiBkb21VdGlscy5pc0JyKHRtcE5vZGUpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJuZy5zZXRFbmRBZnRlcih0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZihybmcuc3RhcnRPZmZzZXQgPT0gMCl7XHJcblx0ICAgICAgICAgICAgICAgIHRtcE5vZGUgPSBybmcuc3RhcnRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgICAgIGlmKGRvbVV0aWxzLmlzQm91bmRhcnlOb2RlKHRtcE5vZGUsJ2ZpcnN0Q2hpbGQnKSApe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wTm9kZSA9IHJuZy5lbmRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihybmcuZW5kT2Zmc2V0ID09ICh0bXBOb2RlLm5vZGVUeXBlID09IDMgPyB0bXBOb2RlLm5vZGVWYWx1ZS5sZW5ndGggOiB0bXBOb2RlLmNoaWxkTm9kZXMubGVuZ3RoKSAmJiBkb21VdGlscy5pc0JvdW5kYXJ5Tm9kZSh0bXBOb2RlLCdsYXN0Q2hpbGQnKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdzYXZlU2NlbmUnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5ib2R5LmlubmVySFRNTCA9ICc8cD4nKyhicm93c2VyLmllID8gJycgOiAnPGJyLz4nKSsnPC9wPic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcm5nLnNldFN0YXJ0KG1lLmJvZHkuZmlyc3RDaGlsZCwwKS5zZXRDdXJzb3IoZmFsc2UsdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuX3NlbGVjdGlvbkNoYW5nZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAvL+WkhOeQhmJhY2tzcGFjZVxyXG5cdCAgICAgICAgaWYgKGtleUNvZGUgPT0ga2V5bWFwLkJhY2tzcGFjZSkge1xyXG5cdCAgICAgICAgICAgIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgIGNvbGxhcHNlZCA9IHJuZy5jb2xsYXBzZWQ7XHJcblx0ICAgICAgICAgICAgaWYobWUuZmlyZUV2ZW50KCdkZWxrZXlkb3duJyxldnQpKXtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgc3RhcnQsZW5kO1xyXG5cdCAgICAgICAgICAgIC8v6YG/5YWN5oyJ5Lik5qyh5Yig6Zmk5omN6IO955Sf5pWI55qE6Zeu6aKYXHJcblx0ICAgICAgICAgICAgaWYocm5nLmNvbGxhcHNlZCAmJiBybmcuaW5GaWxsQ2hhcigpKXtcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQgPSBybmcuc3RhcnRDb250YWluZXI7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZihkb21VdGlscy5pc0ZpbGxDaGFyKHN0YXJ0KSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuc2V0U3RhcnRCZWZvcmUoc3RhcnQpLnNocmlua0JvdW5kYXJ5KHRydWUpLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHN0YXJ0KVxyXG5cdCAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXJ0Lm5vZGVWYWx1ZSA9IHN0YXJ0Lm5vZGVWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoJ14nICsgZG9tVXRpbHMuZmlsbENoYXIgKSwnJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuc3RhcnRPZmZzZXQtLTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJuZy5jb2xsYXBzZSh0cnVlKS5zZWxlY3QodHJ1ZSlcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgLy/op6PlhrPpgInkuK1jb250cm9s5YWD57Sg5LiN6IO95Yig6Zmk55qE6Zeu6aKYXHJcblx0ICAgICAgICAgICAgaWYgKHN0YXJ0ID0gcm5nLmdldENsb3NlZE5vZGUoKSkge1xyXG5cdCAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgICAgICBybmcuc2V0U3RhcnRCZWZvcmUoc3RhcnQpO1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoc3RhcnQpO1xyXG5cdCAgICAgICAgICAgICAgICBybmcuc2V0Q3Vyc29yKCk7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnc2F2ZVNjZW5lJyk7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnByZXZlbnREZWZhdWx0KGV2dCk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgLy/pmLvmraLlnKh0YWJsZeS4iueahOWIoOmZpFxyXG5cdCAgICAgICAgICAgIGlmICghYnJvd3Nlci5pZSkge1xyXG5cdCAgICAgICAgICAgICAgICBzdGFydCA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocm5nLnN0YXJ0Q29udGFpbmVyLCAndGFibGUnLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgZW5kID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuZW5kQ29udGFpbmVyLCAndGFibGUnLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHN0YXJ0ICYmICFlbmQgfHwgIXN0YXJ0ICYmIGVuZCB8fCBzdGFydCAhPT0gZW5kKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvL+WkhOeQhnRhYumUrueahOmAu+i+kVxyXG5cdCAgICAgICAgaWYgKGtleUNvZGUgPT0ga2V5bWFwLlRhYikge1xyXG5cdCAgICAgICAgICAgIC8v5LiN5aSE55CG5Lul5LiL5qCH562+XHJcblx0ICAgICAgICAgICAgdmFyIGV4Y2x1ZGVUYWdOYW1lRm9yVGFiS2V5ID0ge1xyXG5cdCAgICAgICAgICAgICAgICAnb2wnIDogMSxcclxuXHQgICAgICAgICAgICAgICAgJ3VsJyA6IDEsXHJcblx0ICAgICAgICAgICAgICAgICd0YWJsZSc6MVxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgLy/lpITnkIbnu4Tku7bph4znmoR0YWLmjInkuIvkuovku7ZcclxuXHQgICAgICAgICAgICBpZihtZS5maXJlRXZlbnQoJ3RhYmtleWRvd24nLGV2dCkpe1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5wcmV2ZW50RGVmYXVsdChldnQpO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciByYW5nZSA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnc2F2ZVNjZW5lJyk7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsdHh0ID0gJycsdGFiU2l6ZSA9IG1lLm9wdGlvbnMudGFiU2l6ZXx8IDQsdGFiTm9kZSA9ICBtZS5vcHRpb25zLnRhYk5vZGUgfHwgJyZuYnNwOyc7IGkgPCB0YWJTaXplOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgdHh0ICs9IHRhYk5vZGU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciBzcGFuID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG5cdCAgICAgICAgICAgIHNwYW4uaW5uZXJIVE1MID0gdHh0ICsgZG9tVXRpbHMuZmlsbENoYXI7XHJcblx0ICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCkge1xyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKHNwYW4uY2xvbmVOb2RlKHRydWUpLmZpcnN0Q2hpbGQpLnNldEN1cnNvcih0cnVlKTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgZmlsdGVyRm4gPSBmdW5jdGlvbihub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9tVXRpbHMuaXNCbG9ja0VsbShub2RlKSAmJiAhZXhjbHVkZVRhZ05hbWVGb3JUYWJLZXlbbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCldXHJcblxyXG5cdCAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICAvL+aZrumAmueahOaDheWGtVxyXG5cdCAgICAgICAgICAgICAgICBzdGFydCA9IGRvbVV0aWxzLmZpbmRQYXJlbnQocmFuZ2Uuc3RhcnRDb250YWluZXIsIGZpbHRlckZuLHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICBlbmQgPSBkb21VdGlscy5maW5kUGFyZW50KHJhbmdlLmVuZENvbnRhaW5lciwgZmlsdGVyRm4sdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChzdGFydCAmJiBlbmQgJiYgc3RhcnQgPT09IGVuZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2UuZGVsZXRlQ29udGVudHMoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUoc3Bhbi5jbG9uZU5vZGUodHJ1ZSkuZmlyc3RDaGlsZCkuc2V0Q3Vyc29yKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGJvb2ttYXJrID0gcmFuZ2UuY3JlYXRlQm9va21hcmsoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlLmVubGFyZ2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgYm9va21hcmsyID0gcmFuZ2UuY3JlYXRlQm9va21hcmsoKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gZG9tVXRpbHMuZ2V0TmV4dERvbU5vZGUoYm9va21hcmsyLnN0YXJ0LCBmYWxzZSwgZmlsdGVyRm4pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGN1cnJlbnQgJiYgIShkb21VdGlscy5nZXRQb3NpdGlvbihjdXJyZW50LCBib29rbWFyazIuZW5kKSAmIGRvbVV0aWxzLlBPU0lUSU9OX0ZPTExPV0lORykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Lmluc2VydEJlZm9yZShzcGFuLmNsb25lTm9kZSh0cnVlKS5maXJzdENoaWxkLCBjdXJyZW50LmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBkb21VdGlscy5nZXROZXh0RG9tTm9kZShjdXJyZW50LCBmYWxzZSwgZmlsdGVyRm4pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZVRvQm9va21hcmsoYm9va21hcmsyKS5tb3ZlVG9Cb29rbWFyayhib29rbWFyaykuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMucHJldmVudERlZmF1bHQoZXZ0KVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgLy90cmFjZToxNjM0XHJcblx0ICAgICAgICAvL2Zm55qEZGVs6ZSu5Zyo5a655Zmo56m655qE5pe25YCZ77yM5Lmf5Lya5Yig6ZmkXHJcblx0ICAgICAgICBpZihicm93c2VyLmdlY2tvICYmIGtleUNvZGUgPT0gNDYpe1xyXG5cdCAgICAgICAgICAgIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgaWYocmFuZ2UuY29sbGFwc2VkKXtcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQgPSByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICAgICAgaWYoZG9tVXRpbHMuaXNFbXB0eUJsb2NrKHN0YXJ0KSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gc3RhcnQucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHdoaWxlKGRvbVV0aWxzLmdldENoaWxkQ291bnQocGFyZW50KSA9PSAxICYmICFkb21VdGlscy5pc0JvZHkocGFyZW50KSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBwYXJlbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihzdGFydCA9PT0gcGFyZW50Lmxhc3RDaGlsZClcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfSk7XHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uKHR5cGUsIGV2dCkge1xyXG5cdCAgICAgICAgdmFyIGtleUNvZGUgPSBldnQua2V5Q29kZSB8fCBldnQud2hpY2gsXHJcblx0ICAgICAgICAgICAgcm5nLG1lID0gdGhpcztcclxuXHQgICAgICAgIGlmKGtleUNvZGUgPT0ga2V5bWFwLkJhY2tzcGFjZSl7XHJcblx0ICAgICAgICAgICAgaWYobWUuZmlyZUV2ZW50KCdkZWxrZXl1cCcpKXtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBybmcgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICBpZihybmcuY29sbGFwc2VkKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRtcE5vZGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICBhdXRvQ2xlYXJUYWdOYW1lID0gWydoMScsJ2gyJywnaDMnLCdoNCcsJ2g1JywnaDYnXTtcclxuXHQgICAgICAgICAgICAgICAgaWYodG1wTm9kZSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocm5nLnN0YXJ0Q29udGFpbmVyLGF1dG9DbGVhclRhZ05hbWUsdHJ1ZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoZG9tVXRpbHMuaXNFbXB0eUJsb2NrKHRtcE5vZGUpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJlID0gdG1wTm9kZS5wcmV2aW91c1NpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYocHJlICYmIHByZS5ub2RlTmFtZSAhPSAnVEFCTEUnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHRtcE5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBybmcuc2V0U3RhcnRBdExhc3QocHJlKS5zZXRDdXJzb3IoZmFsc2UsdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHQgPSB0bXBOb2RlLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihuZXh0ICYmIG5leHQubm9kZU5hbWUgIT0gJ1RBQkxFJyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUodG1wTm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBybmcuc2V0U3RhcnRBdEZpcnN0KG5leHQpLnNldEN1cnNvcihmYWxzZSx0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAvL+WkhOeQhuW9k+WIoOmZpOWIsGJvZHnml7bvvIzopoHph43mlrDnu5lw5qCH562+5bGV5L2NXHJcblx0ICAgICAgICAgICAgICAgIGlmKGRvbVV0aWxzLmlzQm9keShybmcuc3RhcnRDb250YWluZXIpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0bXBOb2RlID0gZG9tVXRpbHMuY3JlYXRlRWxlbWVudChtZS5kb2N1bWVudCwncCcse1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICdpbm5lckhUTUwnIDogYnJvd3Nlci5pZSA/IGRvbVV0aWxzLmZpbGxDaGFyIDogJzxici8+J1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuaW5zZXJ0Tm9kZSh0bXBOb2RlKS5zZXRTdGFydCh0bXBOb2RlLDApLnNldEN1cnNvcihmYWxzZSx0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgIC8vY2hyb21l5LiL5aaC5p6c5Yig6Zmk5LqGaW5saW5l5qCH562+77yM5rWP6KeI5Zmo5Lya5pyJ6K6w5b+G77yM5Zyo6L6T5YWl5paH5a2X6L+Y5piv5Lya5aWX5LiK5Yia5omN5Yig6Zmk55qE5qCH562+77yM5omA5Lul6L+Z6YeM5YaN6YCJ5LiA5qyh5bCx5LiN5Lya5LqGXHJcblx0ICAgICAgICAgICAgaWYoICFjb2xsYXBzZWQgJiYgKHJuZy5zdGFydENvbnRhaW5lci5ub2RlVHlwZSA9PSAzIHx8IHJuZy5zdGFydENvbnRhaW5lci5ub2RlVHlwZSA9PSAxICYmIGRvbVV0aWxzLmlzRW1wdHlCbG9jayhybmcuc3RhcnRDb250YWluZXIpKSl7XHJcblx0ICAgICAgICAgICAgICAgIGlmKGJyb3dzZXIuaWUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHNwYW4gPSBybmcuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcm5nLmluc2VydE5vZGUoc3Bhbikuc2V0U3RhcnRCZWZvcmUoc3BhbikuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoc3BhbilcclxuXHQgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuc2VsZWN0KClcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgfSlcclxuXHR9O1xyXG5cclxuXHQvLyBwbHVnaW5zL2ZpeGltZ2NsaWNrLmpzXHJcblx0Ly8vaW1wb3J0IGNvcmVcclxuXHQvLy9jb21tYW5kcyDkv67lpI1jaHJvbWXkuIvlm77niYfkuI3og73ngrnlh7vnmoTpl67popjvvIzlh7rnjrDlhavkuKrop5Llj6/mlLnlj5jlpKflsI9cclxuXHQvLy9jb21tYW5kc05hbWUgIEZpeEltZ0NsaWNrXHJcblx0Ly8vY29tbWFuZHNUaXRsZSAg5L+u5aSNY2hyb21l5LiL5Zu+54mH5LiN6IO954K55Ye755qE6Zeu6aKY77yM5Ye6546w5YWr5Liq6KeS5Y+v5pS55Y+Y5aSn5bCPXHJcblx0Ly/kv67lpI1jaHJvbWXkuIvlm77niYfkuI3og73ngrnlh7vnmoTpl67popjvvIzlh7rnjrDlhavkuKrop5Llj6/mlLnlj5jlpKflsI9cclxuXHJcblx0VUUucGx1Z2luc1snZml4aW1nY2xpY2snXSA9IChmdW5jdGlvbiAoKSB7XHJcblxyXG5cdCAgICB2YXIgZWxlbWVudFVwZGF0ZWQgPSBmYWxzZTtcclxuXHQgICAgZnVuY3Rpb24gU2NhbGUoKSB7XHJcblx0ICAgICAgICB0aGlzLmVkaXRvciA9IG51bGw7XHJcblx0ICAgICAgICB0aGlzLnJlc2l6ZXIgPSBudWxsO1xyXG5cdCAgICAgICAgdGhpcy5jb3ZlciA9IG51bGw7XHJcblx0ICAgICAgICB0aGlzLmRvYyA9IGRvY3VtZW50O1xyXG5cdCAgICAgICAgdGhpcy5wcmVQb3MgPSB7eDogMCwgeTogMH07XHJcblx0ICAgICAgICB0aGlzLnN0YXJ0UG9zID0ge3g6IDAsIHk6IDB9O1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgdmFyIHJlY3QgPSBbXHJcblx0ICAgICAgICAgICAgLy9bbGVmdCwgdG9wLCB3aWR0aCwgaGVpZ2h0XVxyXG5cdCAgICAgICAgICAgIFswLCAwLCAtMSwgLTFdLFxyXG5cdCAgICAgICAgICAgIFswLCAwLCAwLCAtMV0sXHJcblx0ICAgICAgICAgICAgWzAsIDAsIDEsIC0xXSxcclxuXHQgICAgICAgICAgICBbMCwgMCwgLTEsIDBdLFxyXG5cdCAgICAgICAgICAgIFswLCAwLCAxLCAwXSxcclxuXHQgICAgICAgICAgICBbMCwgMCwgLTEsIDFdLFxyXG5cdCAgICAgICAgICAgIFswLCAwLCAwLCAxXSxcclxuXHQgICAgICAgICAgICBbMCwgMCwgMSwgMV1cclxuXHQgICAgICAgIF07XHJcblxyXG5cdCAgICAgICAgU2NhbGUucHJvdG90eXBlID0ge1xyXG5cdCAgICAgICAgICAgIGluaXQ6IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICAgICAgbWUuZWRpdG9yID0gZWRpdG9yO1xyXG5cdCAgICAgICAgICAgICAgICBtZS5zdGFydFBvcyA9IHRoaXMucHJlUG9zID0ge3g6IDAsIHk6IDB9O1xyXG5cdCAgICAgICAgICAgICAgICBtZS5kcmFnSWQgPSAtMTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHZhciBoYW5kcyA9IFtdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgY292ZXIgPSBtZS5jb3ZlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmVzaXplciA9IG1lLnJlc2l6ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGNvdmVyLmlkID0gbWUuZWRpdG9yLnVpLmlkICsgJ19pbWFnZXNjYWxlX2NvdmVyJztcclxuXHQgICAgICAgICAgICAgICAgY292ZXIuc3R5bGUuY3NzVGV4dCA9ICdwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5Om5vbmU7ei1pbmRleDonICsgKG1lLmVkaXRvci5vcHRpb25zLnpJbmRleCkgKyAnO2ZpbHRlcjphbHBoYShvcGFjaXR5PTApOyBvcGFjaXR5OjA7YmFja2dyb3VuZDojQ0NDOyc7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLm9uKGNvdmVyLCAnbW91c2Vkb3duIGNsaWNrJywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuaGlkZSgpO1xyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGhhbmRzLnB1c2goJzxzcGFuIGNsYXNzPVwiZWR1aS1lZGl0b3ItaW1hZ2VzY2FsZS1oYW5kJyArIGkgKyAnXCI+PC9zcGFuPicpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJlc2l6ZXIuaWQgPSBtZS5lZGl0b3IudWkuaWQgKyAnX2ltYWdlc2NhbGUnO1xyXG5cdCAgICAgICAgICAgICAgICByZXNpemVyLmNsYXNzTmFtZSA9ICdlZHVpLWVkaXRvci1pbWFnZXNjYWxlJztcclxuXHQgICAgICAgICAgICAgICAgcmVzaXplci5pbm5lckhUTUwgPSBoYW5kcy5qb2luKCcnKTtcclxuXHQgICAgICAgICAgICAgICAgcmVzaXplci5zdHlsZS5jc3NUZXh0ICs9ICc7ZGlzcGxheTpub25lO2JvcmRlcjoxcHggc29saWQgIzNiNzdmZjt6LWluZGV4OicgKyAobWUuZWRpdG9yLm9wdGlvbnMuekluZGV4KSArICc7JztcclxuXHJcblx0ICAgICAgICAgICAgICAgIG1lLmVkaXRvci51aS5nZXREb20oKS5hcHBlbmRDaGlsZChjb3Zlcik7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmVkaXRvci51aS5nZXREb20oKS5hcHBlbmRDaGlsZChyZXNpemVyKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIG1lLmluaXRTdHlsZSgpO1xyXG5cdCAgICAgICAgICAgICAgICBtZS5pbml0RXZlbnRzKCk7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBpbml0U3R5bGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgdXRpbHMuY3NzUnVsZSgnaW1hZ2VzY2FsZScsICcuZWR1aS1lZGl0b3ItaW1hZ2VzY2FsZXtkaXNwbGF5Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjFweCBzb2xpZCAjMzhCMkNFO2N1cnNvcjpoYW5kOy13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7LW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtib3gtc2l6aW5nOiBjb250ZW50LWJveDt9JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAnLmVkdWktZWRpdG9yLWltYWdlc2NhbGUgc3Bhbntwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDo2cHg7aGVpZ2h0OjZweDtvdmVyZmxvdzpoaWRkZW47Zm9udC1zaXplOjBweDtkaXNwbGF5OmJsb2NrO2JhY2tncm91bmQtY29sb3I6IzNDOUREMDt9J1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKyAnLmVkdWktZWRpdG9yLWltYWdlc2NhbGUgLmVkdWktZWRpdG9yLWltYWdlc2NhbGUtaGFuZDB7Y3Vyc29yOm53LXJlc2l6ZTt0b3A6MDttYXJnaW4tdG9wOi00cHg7bGVmdDowO21hcmdpbi1sZWZ0Oi00cHg7fSdcclxuXHQgICAgICAgICAgICAgICAgICAgICsgJy5lZHVpLWVkaXRvci1pbWFnZXNjYWxlIC5lZHVpLWVkaXRvci1pbWFnZXNjYWxlLWhhbmQxe2N1cnNvcjpuLXJlc2l6ZTt0b3A6MDttYXJnaW4tdG9wOi00cHg7bGVmdDo1MCU7bWFyZ2luLWxlZnQ6LTRweDt9J1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKyAnLmVkdWktZWRpdG9yLWltYWdlc2NhbGUgLmVkdWktZWRpdG9yLWltYWdlc2NhbGUtaGFuZDJ7Y3Vyc29yOm5lLXJlc2l6ZTt0b3A6MDttYXJnaW4tdG9wOi00cHg7bGVmdDoxMDAlO21hcmdpbi1sZWZ0Oi0zcHg7fSdcclxuXHQgICAgICAgICAgICAgICAgICAgICsgJy5lZHVpLWVkaXRvci1pbWFnZXNjYWxlIC5lZHVpLWVkaXRvci1pbWFnZXNjYWxlLWhhbmQze2N1cnNvcjp3LXJlc2l6ZTt0b3A6NTAlO21hcmdpbi10b3A6LTRweDtsZWZ0OjA7bWFyZ2luLWxlZnQ6LTRweDt9J1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKyAnLmVkdWktZWRpdG9yLWltYWdlc2NhbGUgLmVkdWktZWRpdG9yLWltYWdlc2NhbGUtaGFuZDR7Y3Vyc29yOmUtcmVzaXplO3RvcDo1MCU7bWFyZ2luLXRvcDotNHB4O2xlZnQ6MTAwJTttYXJnaW4tbGVmdDotM3B4O30nXHJcblx0ICAgICAgICAgICAgICAgICAgICArICcuZWR1aS1lZGl0b3ItaW1hZ2VzY2FsZSAuZWR1aS1lZGl0b3ItaW1hZ2VzY2FsZS1oYW5kNXtjdXJzb3I6c3ctcmVzaXplO3RvcDoxMDAlO21hcmdpbi10b3A6LTNweDtsZWZ0OjA7bWFyZ2luLWxlZnQ6LTRweDt9J1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKyAnLmVkdWktZWRpdG9yLWltYWdlc2NhbGUgLmVkdWktZWRpdG9yLWltYWdlc2NhbGUtaGFuZDZ7Y3Vyc29yOnMtcmVzaXplO3RvcDoxMDAlO21hcmdpbi10b3A6LTNweDtsZWZ0OjUwJTttYXJnaW4tbGVmdDotNHB4O30nXHJcblx0ICAgICAgICAgICAgICAgICAgICArICcuZWR1aS1lZGl0b3ItaW1hZ2VzY2FsZSAuZWR1aS1lZGl0b3ItaW1hZ2VzY2FsZS1oYW5kN3tjdXJzb3I6c2UtcmVzaXplO3RvcDoxMDAlO21hcmdpbi10b3A6LTNweDtsZWZ0OjEwMCU7bWFyZ2luLWxlZnQ6LTNweDt9Jyk7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBpbml0RXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBtZS5zdGFydFBvcy54ID0gbWUuc3RhcnRQb3MueSA9IDA7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmlzRHJhZ2luZyA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgX2V2ZW50SGFuZGxlcjogZnVuY3Rpb24gKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICAgICAgc3dpdGNoIChlLnR5cGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21vdXNlZG93bic6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQsIGhhbmQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmQuY2xhc3NOYW1lLmluZGV4T2YoJ2VkdWktZWRpdG9yLWltYWdlc2NhbGUtaGFuZCcpICE9IC0xICYmIG1lLmRyYWdJZCA9PSAtMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5kcmFnSWQgPSBoYW5kLmNsYXNzTmFtZS5zbGljZSgtMSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLnN0YXJ0UG9zLnggPSBtZS5wcmVQb3MueCA9IGUuY2xpZW50WDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuc3RhcnRQb3MueSA9IG1lLnByZVBvcy55ID0gZS5jbGllbnRZO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5vbihtZS5kb2MsJ21vdXNlbW92ZScsIG1lLnByb3h5KG1lLl9ldmVudEhhbmRsZXIsIG1lKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnbW91c2Vtb3ZlJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWUuZHJhZ0lkICE9IC0xKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLnVwZGF0ZUNvbnRhaW5lclN0eWxlKG1lLmRyYWdJZCwge3g6IGUuY2xpZW50WCAtIG1lLnByZVBvcy54LCB5OiBlLmNsaWVudFkgLSBtZS5wcmVQb3MueX0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5wcmVQb3MueCA9IGUuY2xpZW50WDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUucHJlUG9zLnkgPSBlLmNsaWVudFk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRVcGRhdGVkID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUudXBkYXRlVGFyZ2V0RWxlbWVudCgpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICdtb3VzZXVwJzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWUuZHJhZ0lkICE9IC0xKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLnVwZGF0ZUNvbnRhaW5lclN0eWxlKG1lLmRyYWdJZCwge3g6IGUuY2xpZW50WCAtIG1lLnByZVBvcy54LCB5OiBlLmNsaWVudFkgLSBtZS5wcmVQb3MueX0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS51cGRhdGVUYXJnZXRFbGVtZW50KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZS50YXJnZXQucGFyZW50Tm9kZSkgbWUuYXR0YWNoVG8obWUudGFyZ2V0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuZHJhZ0lkID0gLTE7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnVuKG1lLmRvYywnbW91c2Vtb3ZlJywgbWUucHJveHkobWUuX2V2ZW50SGFuZGxlciwgbWUpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL+S/ruWkjeWPquaYr+eCueWHu+aMquWKqOeCue+8jOS9huayoeacieaUueWPmOWkp+Wwj++8jOS4jeW6lOivpeinpuWPkWNvbnRlbnRjaGFuZ2VcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihlbGVtZW50VXBkYXRlZCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRVcGRhdGVkID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmVkaXRvci5maXJlRXZlbnQoJ2NvbnRlbnRjaGFuZ2UnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgdXBkYXRlVGFyZ2V0RWxlbWVudDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5zZXRTdHlsZXMobWUudGFyZ2V0LCB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAnd2lkdGgnOiBtZS5yZXNpemVyLnN0eWxlLndpZHRoLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgJ2hlaWdodCc6IG1lLnJlc2l6ZXIuc3R5bGUuaGVpZ2h0XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICBtZS50YXJnZXQud2lkdGggPSBwYXJzZUludChtZS5yZXNpemVyLnN0eWxlLndpZHRoKTtcclxuXHQgICAgICAgICAgICAgICAgbWUudGFyZ2V0LmhlaWdodCA9IHBhcnNlSW50KG1lLnJlc2l6ZXIuc3R5bGUuaGVpZ2h0KTtcclxuXHQgICAgICAgICAgICAgICAgbWUuYXR0YWNoVG8obWUudGFyZ2V0KTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIHVwZGF0ZUNvbnRhaW5lclN0eWxlOiBmdW5jdGlvbiAoZGlyLCBvZmZzZXQpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbSA9IG1lLnJlc2l6ZXIsIHRtcDtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmIChyZWN0W2Rpcl1bMF0gIT0gMCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wID0gcGFyc2VJbnQoZG9tLnN0eWxlLmxlZnQpICsgb2Zmc2V0Lng7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb20uc3R5bGUubGVmdCA9IG1lLl92YWxpZFNjYWxlZFByb3AoJ2xlZnQnLCB0bXApICsgJ3B4JztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAocmVjdFtkaXJdWzFdICE9IDApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRtcCA9IHBhcnNlSW50KGRvbS5zdHlsZS50b3ApICsgb2Zmc2V0Lnk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb20uc3R5bGUudG9wID0gbWUuX3ZhbGlkU2NhbGVkUHJvcCgndG9wJywgdG1wKSArICdweCc7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKHJlY3RbZGlyXVsyXSAhPSAwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0bXAgPSBkb20uY2xpZW50V2lkdGggKyByZWN0W2Rpcl1bMl0gKiBvZmZzZXQueDtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbS5zdHlsZS53aWR0aCA9IG1lLl92YWxpZFNjYWxlZFByb3AoJ3dpZHRoJywgdG1wKSArICdweCc7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKHJlY3RbZGlyXVszXSAhPSAwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0bXAgPSBkb20uY2xpZW50SGVpZ2h0ICsgcmVjdFtkaXJdWzNdICogb2Zmc2V0Lnk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb20uc3R5bGUuaGVpZ2h0ID0gbWUuX3ZhbGlkU2NhbGVkUHJvcCgnaGVpZ2h0JywgdG1wKSArICdweCc7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIF92YWxpZFNjYWxlZFByb3A6IGZ1bmN0aW9uIChwcm9wLCB2YWx1ZSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgZWxlID0gdGhpcy5yZXNpemVyLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgd3JhcCA9IGRvY3VtZW50O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdmFsdWUgPSBpc05hTih2YWx1ZSkgPyAwIDogdmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgIHN3aXRjaCAocHJvcCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlIDwgMCA/IDAgOiAodmFsdWUgKyBlbGUuY2xpZW50V2lkdGgpID4gd3JhcC5jbGllbnRXaWR0aCA/IHdyYXAuY2xpZW50V2lkdGggLSBlbGUuY2xpZW50V2lkdGggOiB2YWx1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3RvcCc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlIDwgMCA/IDAgOiAodmFsdWUgKyBlbGUuY2xpZW50SGVpZ2h0KSA+IHdyYXAuY2xpZW50SGVpZ2h0ID8gd3JhcC5jbGllbnRIZWlnaHQgLSBlbGUuY2xpZW50SGVpZ2h0IDogdmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlICd3aWR0aCc6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlIDw9IDAgPyAxIDogKHZhbHVlICsgZWxlLm9mZnNldExlZnQpID4gd3JhcC5jbGllbnRXaWR0aCA/IHdyYXAuY2xpZW50V2lkdGggLSBlbGUub2Zmc2V0TGVmdCA6IHZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSAnaGVpZ2h0JzpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUgPD0gMCA/IDEgOiAodmFsdWUgKyBlbGUub2Zmc2V0VG9wKSA+IHdyYXAuY2xpZW50SGVpZ2h0ID8gd3JhcC5jbGllbnRIZWlnaHQgLSBlbGUub2Zmc2V0VG9wIDogdmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIGhpZGVDb3ZlcjogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmNvdmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBzaG93Q292ZXI6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvclBvcyA9IGRvbVV0aWxzLmdldFhZKG1lLmVkaXRvci51aS5nZXREb20oKSksXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZnJhbWVQb3MgPSBkb21VdGlscy5nZXRYWShtZS5lZGl0b3IuaWZyYW1lKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnNldFN0eWxlcyhtZS5jb3Zlciwge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogbWUuZWRpdG9yLmlmcmFtZS5vZmZzZXRXaWR0aCArICdweCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAnaGVpZ2h0JzogbWUuZWRpdG9yLmlmcmFtZS5vZmZzZXRIZWlnaHQgKyAncHgnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgJ3RvcCc6IGlmcmFtZVBvcy55IC0gZWRpdG9yUG9zLnkgKyAncHgnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiBpZnJhbWVQb3MueCAtIGVkaXRvclBvcy54ICsgJ3B4JyxcclxuXHQgICAgICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICdhYnNvbHV0ZScsXHJcblx0ICAgICAgICAgICAgICAgICAgICAnZGlzcGxheSc6ICcnXHJcblx0ICAgICAgICAgICAgICAgIH0pXHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBzaG93OiBmdW5jdGlvbiAodGFyZ2V0T2JqKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgICAgIG1lLnJlc2l6ZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblx0ICAgICAgICAgICAgICAgIGlmKHRhcmdldE9iaikgbWUuYXR0YWNoVG8odGFyZ2V0T2JqKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLm9uKHRoaXMucmVzaXplciwgJ21vdXNlZG93bicsIG1lLnByb3h5KG1lLl9ldmVudEhhbmRsZXIsIG1lKSk7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLm9uKG1lLmRvYywgJ21vdXNldXAnLCBtZS5wcm94eShtZS5fZXZlbnRIYW5kbGVyLCBtZSkpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgbWUuc2hvd0NvdmVyKCk7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmVkaXRvci5maXJlRXZlbnQoJ2FmdGVyc2NhbGVzaG93JywgbWUpO1xyXG5cdCAgICAgICAgICAgICAgICBtZS5lZGl0b3IuZmlyZUV2ZW50KCdzYXZlU2NlbmUnKTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIGhpZGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICAgICAgbWUuaGlkZUNvdmVyKCk7XHJcblx0ICAgICAgICAgICAgICAgIG1lLnJlc2l6ZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnVuKG1lLnJlc2l6ZXIsICdtb3VzZWRvd24nLCBtZS5wcm94eShtZS5fZXZlbnRIYW5kbGVyLCBtZSkpO1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy51bihtZS5kb2MsICdtb3VzZXVwJywgbWUucHJveHkobWUuX2V2ZW50SGFuZGxlciwgbWUpKTtcclxuXHQgICAgICAgICAgICAgICAgbWUuZWRpdG9yLmZpcmVFdmVudCgnYWZ0ZXJzY2FsZWhpZGUnLCBtZSk7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3VtZW50cyk7XHJcblx0ICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBhdHRhY2hUbzogZnVuY3Rpb24gKHRhcmdldE9iaikge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gbWUudGFyZ2V0ID0gdGFyZ2V0T2JqLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmVzaXplciA9IHRoaXMucmVzaXplcixcclxuXHQgICAgICAgICAgICAgICAgICAgIGltZ1BvcyA9IGRvbVV0aWxzLmdldFhZKHRhcmdldCksXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZnJhbWVQb3MgPSBkb21VdGlscy5nZXRYWShtZS5lZGl0b3IuaWZyYW1lKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvclBvcyA9IGRvbVV0aWxzLmdldFhZKHJlc2l6ZXIucGFyZW50Tm9kZSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5zZXRTdHlsZXMocmVzaXplciwge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzogdGFyZ2V0LndpZHRoICsgJ3B4JyxcclxuXHQgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOiB0YXJnZXQuaGVpZ2h0ICsgJ3B4JyxcclxuXHQgICAgICAgICAgICAgICAgICAgICdsZWZ0JzogaWZyYW1lUG9zLnggKyBpbWdQb3MueCAtIG1lLmVkaXRvci5kb2N1bWVudC5ib2R5LnNjcm9sbExlZnQgLSBlZGl0b3JQb3MueCAtIHBhcnNlSW50KHJlc2l6ZXIuc3R5bGUuYm9yZGVyTGVmdFdpZHRoKSArICdweCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAndG9wJzogaWZyYW1lUG9zLnkgKyBpbWdQb3MueSAtIG1lLmVkaXRvci5kb2N1bWVudC5ib2R5LnNjcm9sbFRvcCAtIGVkaXRvclBvcy55IC0gcGFyc2VJbnQocmVzaXplci5zdHlsZS5ib3JkZXJUb3BXaWR0aCkgKyAncHgnXHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfSkoKTtcclxuXHJcblx0ICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgIGltYWdlU2NhbGU7XHJcblxyXG5cdCAgICAgICAgbWUuc2V0T3B0KCdpbWFnZVNjYWxlRW5hYmxlZCcsIHRydWUpO1xyXG5cclxuXHQgICAgICAgIGlmICggIWJyb3dzZXIuaWUgJiYgbWUub3B0aW9ucy5pbWFnZVNjYWxlRW5hYmxlZCkge1xyXG5cdCAgICAgICAgICAgIG1lLmFkZExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICh0eXBlLCBlKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGltZyA9IHJhbmdlLmdldENsb3NlZE5vZGUoKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmIChpbWcgJiYgaW1nLnRhZ05hbWUgPT0gJ0lNRycgJiYgbWUuYm9keS5jb250ZW50RWRpdGFibGUhPVwiZmFsc2VcIikge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChpbWcuY2xhc3NOYW1lLmluZGV4T2YoXCJlZHVpLWZha2VkLW11c2ljXCIpICE9IC0xIHx8XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaW1nLmdldEF0dHJpYnV0ZShcImFuY2hvcm5hbWVcIikgfHxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5oYXNDbGFzcyhpbWcsICdsb2FkaW5nY2xhc3MnKSB8fFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmhhc0NsYXNzKGltZywgJ2xvYWRlcnJvcmNsYXNzJykpIHsgcmV0dXJuIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWltYWdlU2NhbGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVNjYWxlID0gbmV3IFNjYWxlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VTY2FsZS5pbml0KG1lKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS51aS5nZXREb20oKS5hcHBlbmRDaGlsZChpbWFnZVNjYWxlLnJlc2l6ZXIpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX2tleURvd25IYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VTY2FsZS5oaWRlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGltYWdlU2NhbGUudGFyZ2V0KSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKS5zZWxlY3ROb2RlKGltYWdlU2NhbGUudGFyZ2V0KS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LCBfbW91c2VEb3duSGFuZGxlciA9IGZ1bmN0aW9uIChlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGUgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGUgJiYgKGVsZS5jbGFzc05hbWU9PT11bmRlZmluZWQgfHwgZWxlLmNsYXNzTmFtZS5pbmRleE9mKCdlZHVpLWVkaXRvci1pbWFnZXNjYWxlJykgPT0gLTEpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfa2V5RG93bkhhbmRsZXIoZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LCB0aW1lcjtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuYWRkTGlzdGVuZXIoJ2FmdGVyc2NhbGVzaG93JywgZnVuY3Rpb24gKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuYWRkTGlzdGVuZXIoJ2JlZm9yZWtleWRvd24nLCBfa2V5RG93bkhhbmRsZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5hZGRMaXN0ZW5lcignYmVmb3JlbW91c2Vkb3duJywgX21vdXNlRG93bkhhbmRsZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5vbihkb2N1bWVudCwgJ2tleWRvd24nLCBfa2V5RG93bkhhbmRsZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5vbihkb2N1bWVudCwnbW91c2Vkb3duJywgX21vdXNlRG93bkhhbmRsZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5zZWxlY3Rpb24uZ2V0TmF0aXZlKCkucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuYWRkTGlzdGVuZXIoJ2FmdGVyc2NhbGVoaWRlJywgZnVuY3Rpb24gKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUucmVtb3ZlTGlzdGVuZXIoJ2JlZm9yZWtleWRvd24nLCBfa2V5RG93bkhhbmRsZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5yZW1vdmVMaXN0ZW5lcignYmVmb3JlbW91c2Vkb3duJywgX21vdXNlRG93bkhhbmRsZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy51bihkb2N1bWVudCwgJ2tleWRvd24nLCBfa2V5RG93bkhhbmRsZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy51bihkb2N1bWVudCwnbW91c2Vkb3duJywgX21vdXNlRG93bkhhbmRsZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gaW1hZ2VTY2FsZS50YXJnZXQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQucGFyZW50Tm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuc2VsZWN0aW9uLmdldFJhbmdlKCkuc2VsZWN0Tm9kZSh0YXJnZXQpLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPIOaciWlmcmFtZeeahOaDheWGte+8jG1vdXNlZG93buS4jeiDveW+gOS4i+S8oOOAguOAglxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLm9uKGltYWdlU2NhbGUucmVzaXplciwgJ21vdXNlZG93bicsIGZ1bmN0aW9uIChlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLnNlbGVjdGlvbi5nZXROYXRpdmUoKS5yZW1vdmVBbGxSYW5nZXMoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVsZSA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZSAmJiBlbGUuY2xhc3NOYW1lLmluZGV4T2YoJ2VkdWktZWRpdG9yLWltYWdlc2NhbGUtaGFuZCcpID09IC0xKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlU2NhbGUuaGlkZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGltYWdlU2NhbGUudGFyZ2V0KSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKS5zZWxlY3ROb2RlKGVsZSkuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAyMDApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMub24oaW1hZ2VTY2FsZS5yZXNpemVyLCAnbW91c2V1cCcsIGZ1bmN0aW9uIChlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGUgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGUgJiYgZWxlLmNsYXNzTmFtZS5pbmRleE9mKCdlZHVpLWVkaXRvci1pbWFnZXNjYWxlLWhhbmQnKSA9PSAtMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaW1hZ2VTY2FsZS5zaG93KGltZyk7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTY2FsZSAmJiBpbWFnZVNjYWxlLnJlc2l6ZXIuc3R5bGUuZGlzcGxheSAhPSAnbm9uZScpIGltYWdlU2NhbGUuaGlkZSgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgaWYgKGJyb3dzZXIud2Via2l0KSB7XHJcblx0ICAgICAgICAgICAgbWUuYWRkTGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKHR5cGUsIGUpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LnRhZ05hbWUgPT0gJ0lNRycgJiYgbWUuYm9keS5jb250ZW50RWRpdGFibGUhPVwiZmFsc2VcIikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gbmV3IGRvbS5SYW5nZShtZS5kb2N1bWVudCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlKGUudGFyZ2V0KS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0fSkoKTtcclxuXHJcblx0Ly8gcGx1Z2lucy9hdXRvbGluay5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vY29tbWFuZHMg5Li66Z2eaWXmtY/op4jlmajoh6rliqjmt7vliqBh5qCH562+XHJcblx0Ly8vY29tbWFuZHNOYW1lICBBdXRvTGlua1xyXG5cdC8vL2NvbW1hbmRzVGl0bGUgIOiHquWKqOWinuWKoOmTvuaOpVxyXG5cdC8qKlxyXG5cdCAqIEBkZXNjcmlwdGlvbiDkuLrpnZ5pZea1j+iniOWZqOiHquWKqOa3u+WKoGHmoIfnrb5cclxuXHQgKiBAYXV0aG9yIHpoYW55aVxyXG5cdCAqL1xyXG5cclxuXHRVRS5wbHVnaW4ucmVnaXN0ZXIoJ2F1dG9saW5rJyxmdW5jdGlvbigpe1xyXG5cdCAgICB2YXIgY29udCA9IDA7XHJcblxyXG5cdCAgICByZXR1cm4gIWJyb3dzZXIuaWUgPyB7XHJcblxyXG5cdCAgICAgICAgICAgIGJpbmRFdmVudHM6e1xyXG5cdCAgICAgICAgICAgICAgICAncmVzZXQnIDogZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbnQgPSAwO1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAna2V5ZG93bic6ZnVuY3Rpb24odHlwZSwgZXZ0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGtleUNvZGUgPSBldnQua2V5Q29kZSB8fCBldnQud2hpY2g7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGtleUNvZGUgPT0gMzIgfHwga2V5Q29kZSA9PSAxMykge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsID0gbWUuc2VsZWN0aW9uLmdldE5hdGl2ZSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IHNlbC5nZXRSYW5nZUF0KDApLmNsb25lUmFuZ2UoKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHN0YXJ0Lm5vZGVUeXBlID09IDEgJiYgcmFuZ2Uuc3RhcnRPZmZzZXQgPiAwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gcmFuZ2Uuc3RhcnRDb250YWluZXIuY2hpbGROb2Rlc1tyYW5nZS5zdGFydE9mZnNldCAtIDFdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0LCBzdGFydC5ub2RlVHlwZSA9PSAxID8gc3RhcnQuY2hpbGROb2Rlcy5sZW5ndGggOiBzdGFydC5ub2RlVmFsdWUubGVuZ3RoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gcmFuZ2Uuc3RhcnRDb250YWluZXI7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb3tcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlLnN0YXJ0T2Zmc2V0ID09IDApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gcmFuZ2Uuc3RhcnRDb250YWluZXIucHJldmlvdXNTaWJsaW5nO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChzdGFydCAmJiBzdGFydC5ub2RlVHlwZSA9PSAxKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBzdGFydC5sYXN0Q2hpbGQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0IHx8IGRvbVV0aWxzLmlzRmlsbENoYXIoc3RhcnQpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IHN0YXJ0Lm5vZGVWYWx1ZS5sZW5ndGg7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0ID0gcmFuZ2Uuc3RhcnRPZmZzZXQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoc3RhcnQsIG9mZnNldCAtIDEpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHJhbmdlLnRvU3RyaW5nKCkuY2hhckNvZGVBdCgwKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChjaGFyQ29kZSAhPSAxNjAgJiYgY2hhckNvZGUgIT0gMzIpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2UudG9TdHJpbmcoKS5yZXBsYWNlKG5ldyBSZWdFeHAoZG9tVXRpbHMuZmlsbENoYXIsICdnJyksICcnKS5tYXRjaCgvKD86aHR0cHM/OlxcL1xcL3xzc2g6XFwvXFwvfGZ0cDpcXC9cXC98ZmlsZTpcXC98d3d3XFwuKS9pKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShyYW5nZS50b1N0cmluZygpLmxlbmd0aCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZigvXig/Omh0dHBzPzpcXC9cXC98c3NoOlxcL1xcL3xmdHA6XFwvXFwvfGZpbGU6XFwvfHd3d1xcLikvaS50ZXN0KHJhbmdlLnRvU3RyaW5nKCkpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChyYW5nZS5zdGFydENvbnRhaW5lcixyYW5nZS5zdGFydE9mZnNldCsxKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1jYXRjaChlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RyYWNlOjIxMjFcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSghKG5leHQgPSBzdGFydC5uZXh0U2libGluZykpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkb21VdGlscy5pc0JvZHkoc3RhcnQpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHN0YXJ0LnBhcmVudE5vZGU7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChuZXh0LDApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9yYW5nZeeahOW8gOWni+i+ueeVjOW3sue7j+WcqGHmoIfnrb7ph4znmoTkuI3lho3lpITnkIZcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShyYW5nZS5zdGFydENvbnRhaW5lciwnYScsdHJ1ZSkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpLHRleHQgPSBtZS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnICcpLGhyZWY7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS51bmRvTWFuZ2VyICYmIG1lLnVuZG9NYW5nZXIuc2F2ZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmFwcGVuZENoaWxkKHJhbmdlLmV4dHJhY3RDb250ZW50cygpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5ocmVmID0gYS5pbm5lckhUTUwgPSBhLmlubmVySFRNTC5yZXBsYWNlKC88W14+XSs+L2csJycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmID0gYS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpLnJlcGxhY2UobmV3IFJlZ0V4cChkb21VdGlscy5maWxsQ2hhciwnZycpLCcnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZiA9IC9eKD86aHR0cHM/OlxcL1xcLykvaWcudGVzdChocmVmKSA/IGhyZWYgOiBcImh0dHA6Ly9cIisgaHJlZjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoJ19zcmMnLHV0aWxzLmh0bWwoaHJlZikpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmhyZWYgPSB1dGlscy5odG1sKGhyZWYpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZShhKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0ZXh0LCBhLm5leHRTaWJsaW5nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQodGV4dCwgMCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbC5hZGRSYW5nZShyYW5nZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLnVuZG9NYW5nZXIgJiYgbWUudW5kb01hbmdlci5zYXZlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfTp7fVxyXG5cdCAgICB9LGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICB2YXIga2V5Q29kZXMgPSB7XHJcblx0ICAgICAgICAgICAgMzc6MSwgMzg6MSwgMzk6MSwgNDA6MSxcclxuXHQgICAgICAgICAgICAxMzoxLDMyOjFcclxuXHQgICAgICAgIH07XHJcblx0ICAgICAgICBmdW5jdGlvbiBjaGVja0lzQ2x1ZGVMaW5rKG5vZGUpe1xyXG5cdCAgICAgICAgICAgIGlmKG5vZGUubm9kZVR5cGUgPT0gMyl7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmKG5vZGUubm9kZU5hbWUgPT0gJ0EnKXtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciBsYXN0Q2hpbGQgPSBub2RlLmxhc3RDaGlsZDtcclxuXHJcblx0ICAgICAgICAgICAgd2hpbGUobGFzdENoaWxkKXtcclxuXHQgICAgICAgICAgICAgICAgaWYobGFzdENoaWxkLm5vZGVOYW1lID09ICdBJyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGFzdENoaWxkO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmKGxhc3RDaGlsZC5ub2RlVHlwZSA9PSAzKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGRvbVV0aWxzLmlzV2hpdGVzcGFjZShsYXN0Q2hpbGQpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYXN0Q2hpbGQgPSBsYXN0Q2hpbGQucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBsYXN0Q2hpbGQgPSBsYXN0Q2hpbGQubGFzdENoaWxkO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGJyb3dzZXIuaWUgJiYgdGhpcy5hZGRMaXN0ZW5lcigna2V5dXAnLGZ1bmN0aW9uKGNtZCxldnQpe1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsa2V5Q29kZSA9IGV2dC5rZXlDb2RlO1xyXG5cdCAgICAgICAgICAgIGlmKGtleUNvZGVzW2tleUNvZGVdKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBybmcuc3RhcnRDb250YWluZXI7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZihrZXlDb2RlID09IDEzKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHdoaWxlKHN0YXJ0ICYmICFkb21VdGlscy5pc0JvZHkoc3RhcnQpICYmICFkb21VdGlscy5pc0Jsb2NrRWxtKHN0YXJ0KSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBzdGFydC5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoc3RhcnQgJiYgIWRvbVV0aWxzLmlzQm9keShzdGFydCkgJiYgc3RhcnQubm9kZU5hbWUgPT0gJ1AnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJlID0gc3RhcnQucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKHByZSAmJiBwcmUubm9kZVR5cGUgPT0gMSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcmUgPSBjaGVja0lzQ2x1ZGVMaW5rKHByZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHByZSAmJiAhcHJlLmdldEF0dHJpYnV0ZSgnX2hyZWYnKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUocHJlLHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9ZWxzZSBpZihrZXlDb2RlID09IDMyICl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihzdGFydC5ub2RlVHlwZSA9PSAzICYmIC9eXFxzJC8udGVzdChzdGFydC5ub2RlVmFsdWUpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdGFydCA9IHN0YXJ0LnByZXZpb3VzU2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihzdGFydCAmJiBzdGFydC5ub2RlTmFtZSA9PSAnQScgJiYgIXN0YXJ0LmdldEF0dHJpYnV0ZSgnX2hyZWYnKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShzdGFydCx0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1lbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShzdGFydCwnYScsdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihzdGFydCAmJiAhc3RhcnQuZ2V0QXR0cmlidXRlKCdfaHJlZicpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmsgPSBybmcuY3JlYXRlQm9va21hcmsoKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHN0YXJ0LHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJuZy5tb3ZlVG9Cb29rbWFyayhiaykuc2VsZWN0KHRydWUpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgfVxyXG5cdCk7XHJcblxyXG5cdC8vIHBsdWdpbnMvYXV0b2hlaWdodC5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vY29tbWFuZHMg5b2T6L6T5YWl5YaF5a656LaF6L+H57yW6L6R5Zmo6auY5bqm5pe277yM57yW6L6R5Zmo6Ieq5Yqo5aKe6auYXHJcblx0Ly8vY29tbWFuZHNOYW1lICBBdXRvSGVpZ2h0LGF1dG9IZWlnaHRFbmFibGVkXHJcblx0Ly8vY29tbWFuZHNUaXRsZSAg6Ieq5Yqo5aKe6auYXHJcblx0LyoqXHJcblx0ICogQGRlc2NyaXB0aW9uIOiHquWKqOS8uOWxlVxyXG5cdCAqIEBhdXRob3IgemhhbnlpXHJcblx0ICovXHJcblx0VUUucGx1Z2luc1snYXV0b2hlaWdodCddID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAvL+aPkOS+m+W8gOWFs++8jOWwseeul+WKoOi9veS5n+WPr+S7peWFs+mXrVxyXG5cdCAgICBtZS5hdXRvSGVpZ2h0RW5hYmxlZCA9IG1lLm9wdGlvbnMuYXV0b0hlaWdodEVuYWJsZWQgIT09IGZhbHNlO1xyXG5cdCAgICBpZiAoIW1lLmF1dG9IZWlnaHRFbmFibGVkKSB7XHJcblx0ICAgICAgICByZXR1cm47XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHZhciBiYWtPdmVyZmxvdyxcclxuXHQgICAgICAgIGxhc3RIZWlnaHQgPSAwLFxyXG5cdCAgICAgICAgb3B0aW9ucyA9IG1lLm9wdGlvbnMsXHJcblx0ICAgICAgICBjdXJyZW50SGVpZ2h0LFxyXG5cdCAgICAgICAgdGltZXI7XHJcblxyXG5cdCAgICBmdW5jdGlvbiBhZGp1c3RIZWlnaHQoKSB7XHJcblx0ICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuXHQgICAgICAgIGlmKGlzRnVsbHNjcmVlbilyZXR1cm47XHJcblx0ICAgICAgICBpZiAoIW1lLnF1ZXJ5Q29tbWFuZFN0YXRlIHx8IG1lLnF1ZXJ5Q29tbWFuZFN0YXRlICYmIG1lLnF1ZXJ5Q29tbWFuZFN0YXRlKCdzb3VyY2UnKSAhPSAxKSB7XHJcblx0ICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IG1lLmJvZHkubGFzdENoaWxkO1xyXG5cdCAgICAgICAgICAgICAgICB3aGlsZShub2RlICYmIG5vZGUubm9kZVR5cGUgIT0gMSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYobm9kZSAmJiBub2RlLm5vZGVUeXBlID09IDEpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5jbGVhciA9ICdib3RoJztcclxuXHQgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRIZWlnaHQgPSBNYXRoLm1heChkb21VdGlscy5nZXRYWShub2RlKS55ICsgbm9kZS5vZmZzZXRIZWlnaHQgKyAyNSAsTWF0aC5tYXgob3B0aW9ucy5taW5GcmFtZUhlaWdodCwgb3B0aW9ucy5pbml0aWFsRnJhbWVIZWlnaHQpKSA7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudEhlaWdodCAhPSBsYXN0SGVpZ2h0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRIZWlnaHQgIT09IHBhcnNlSW50KG1lLmlmcmFtZS5wYXJlbnROb2RlLnN0eWxlLmhlaWdodCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuaWZyYW1lLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gY3VycmVudEhlaWdodCArICdweCc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmJvZHkuc3R5bGUuaGVpZ2h0ID0gY3VycmVudEhlaWdodCArICdweCc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEhlaWdodCA9IGN1cnJlbnRIZWlnaHQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmVTdHlsZShub2RlLCdjbGVhcicpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgICAgICB9LDUwKVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICAgIHZhciBpc0Z1bGxzY3JlZW47XHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdmdWxsc2NyZWVuY2hhbmdlZCcsZnVuY3Rpb24oY21kLGYpe1xyXG5cdCAgICAgICAgaXNGdWxsc2NyZWVuID0gZlxyXG5cdCAgICB9KTtcclxuXHQgICAgbWUuYWRkTGlzdGVuZXIoJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICBtZS5yZW1vdmVMaXN0ZW5lcignY29udGVudGNoYW5nZSBhZnRlcmluc2VydGh0bWwga2V5dXAgbW91c2V1cCcsYWRqdXN0SGVpZ2h0KVxyXG5cdCAgICB9KTtcclxuXHQgICAgbWUuZW5hYmxlQXV0b0hlaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICBpZiAoIW1lLmF1dG9IZWlnaHRFbmFibGVkKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIGRvYyA9IG1lLmRvY3VtZW50O1xyXG5cdCAgICAgICAgbWUuYXV0b0hlaWdodEVuYWJsZWQgPSB0cnVlO1xyXG5cdCAgICAgICAgYmFrT3ZlcmZsb3cgPSBkb2MuYm9keS5zdHlsZS5vdmVyZmxvd1k7XHJcblx0ICAgICAgICBkb2MuYm9keS5zdHlsZS5vdmVyZmxvd1kgPSAnaGlkZGVuJztcclxuXHQgICAgICAgIG1lLmFkZExpc3RlbmVyKCdjb250ZW50Y2hhbmdlIGFmdGVyaW5zZXJ0aHRtbCBrZXl1cCBtb3VzZXVwJyxhZGp1c3RIZWlnaHQpO1xyXG5cdCAgICAgICAgLy9mZuS4jee7meS6i+S7tueul+W+l+S4jeWvuVxyXG5cclxuXHQgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGFkanVzdEhlaWdodC5jYWxsKG1lKTtcclxuXHQgICAgICAgIH0sIGJyb3dzZXIuZ2Vja28gPyAxMDAgOiAwKTtcclxuXHQgICAgICAgIG1lLmZpcmVFdmVudCgnYXV0b2hlaWdodGNoYW5nZWQnLCBtZS5hdXRvSGVpZ2h0RW5hYmxlZCk7XHJcblx0ICAgIH07XHJcblx0ICAgIG1lLmRpc2FibGVBdXRvSGVpZ2h0ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuXHQgICAgICAgIG1lLmJvZHkuc3R5bGUub3ZlcmZsb3dZID0gYmFrT3ZlcmZsb3cgfHwgJyc7XHJcblxyXG5cdCAgICAgICAgbWUucmVtb3ZlTGlzdGVuZXIoJ2NvbnRlbnRjaGFuZ2UnLCBhZGp1c3RIZWlnaHQpO1xyXG5cdCAgICAgICAgbWUucmVtb3ZlTGlzdGVuZXIoJ2tleXVwJywgYWRqdXN0SGVpZ2h0KTtcclxuXHQgICAgICAgIG1lLnJlbW92ZUxpc3RlbmVyKCdtb3VzZXVwJywgYWRqdXN0SGVpZ2h0KTtcclxuXHQgICAgICAgIG1lLmF1dG9IZWlnaHRFbmFibGVkID0gZmFsc2U7XHJcblx0ICAgICAgICBtZS5maXJlRXZlbnQoJ2F1dG9oZWlnaHRjaGFuZ2VkJywgbWUuYXV0b0hlaWdodEVuYWJsZWQpO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgbWUub24oJ3NldEhlaWdodCcsZnVuY3Rpb24oKXtcclxuXHQgICAgICAgIG1lLmRpc2FibGVBdXRvSGVpZ2h0KClcclxuXHQgICAgfSk7XHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdyZWFkeScsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIG1lLmVuYWJsZUF1dG9IZWlnaHQoKTtcclxuXHQgICAgICAgIC8vdHJhY2U6MTc2NFxyXG5cdCAgICAgICAgdmFyIHRpbWVyO1xyXG5cdCAgICAgICAgZG9tVXRpbHMub24oYnJvd3Nlci5pZSA/IG1lLmJvZHkgOiBtZS5kb2N1bWVudCwgYnJvd3Nlci53ZWJraXQgPyAnZHJhZ292ZXInIDogJ2Ryb3AnLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuXHQgICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAvL3RyYWNlOjM2ODFcclxuXHQgICAgICAgICAgICAgICAgYWRqdXN0SGVpZ2h0LmNhbGwobWUpO1xyXG5cdCAgICAgICAgICAgIH0sIDEwMCk7XHJcblxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICAvL+S/ruWkjeWGheWuuei/h+WkmuaXtu+8jOWbnuWIsOmhtumDqO+8jOmhtumDqOWGheWuueiiq+W3peWFt+agj+mBruaMoemXrumimFxyXG5cdCAgICAgICAgdmFyIGxhc3RTY3JvbGxZO1xyXG5cdCAgICAgICAgd2luZG93Lm9uc2Nyb2xsID0gZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICBpZihsYXN0U2Nyb2xsWSA9PT0gbnVsbCl7XHJcblx0ICAgICAgICAgICAgICAgIGxhc3RTY3JvbGxZID0gdGhpcy5zY3JvbGxZXHJcblx0ICAgICAgICAgICAgfWVsc2UgaWYodGhpcy5zY3JvbGxZID09IDAgJiYgbGFzdFNjcm9sbFkgIT0gMCl7XHJcblx0ICAgICAgICAgICAgICAgIG1lLndpbmRvdy5zY3JvbGxUbygwLDApO1xyXG5cdCAgICAgICAgICAgICAgICBsYXN0U2Nyb2xsWSA9IG51bGw7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9KTtcclxuXHJcblxyXG5cdH07XHJcblxyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9hdXRvZmxvYXQuanNcclxuXHQvLy9pbXBvcnQgY29yZVxyXG5cdC8vL2NvbW1hbmRzIOaCrOa1ruW3peWFt+agj1xyXG5cdC8vL2NvbW1hbmRzTmFtZSAgQXV0b0Zsb2F0LGF1dG9GbG9hdEVuYWJsZWRcclxuXHQvLy9jb21tYW5kc1RpdGxlICDmgqzmta7lt6XlhbfmoI9cclxuXHQvKipcclxuXHQgKiAgbW9kaWZpZWQgYnkgY2hlbmdjaGFvMDFcclxuXHQgKiAg5rOo5oSP77yaIOW8leWFpeatpOWKn+iDveWQju+8jOWcqElFNuS4i+S8muWwhmJvZHnnmoTog4zmma/lm77niYfopobnm5bmjonvvIFcclxuXHQgKi9cclxuXHRVRS5wbHVnaW5zWydhdXRvZmxvYXQnXSA9IGZ1bmN0aW9uKCkge1xyXG5cdCAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgbGFuZyA9IG1lLmdldExhbmcoKTtcclxuXHQgICAgbWUuc2V0T3B0KHtcclxuXHQgICAgICAgIHRvcE9mZnNldDowXHJcblx0ICAgIH0pO1xyXG5cdCAgICB2YXIgb3B0c0F1dG9GbG9hdEVuYWJsZWQgPSBtZS5vcHRpb25zLmF1dG9GbG9hdEVuYWJsZWQgIT09IGZhbHNlLFxyXG5cdCAgICAgICAgdG9wT2Zmc2V0ID0gbWUub3B0aW9ucy50b3BPZmZzZXQ7XHJcblxyXG5cclxuXHQgICAgLy/lpoLmnpzkuI3lm7rlrpp0b29sYmFy55qE5L2N572u77yM5YiZ55u05o6l6YCA5Ye6XHJcblx0ICAgIGlmKCFvcHRzQXV0b0Zsb2F0RW5hYmxlZCl7XHJcblx0ICAgICAgICByZXR1cm47XHJcblx0ICAgIH1cclxuXHQgICAgdmFyIHVpVXRpbHMgPSBVRS51aS51aVV0aWxzLFxyXG5cdCAgICAgICAgTHRlSUU2ID0gYnJvd3Nlci5pZSAmJiBicm93c2VyLnZlcnNpb24gPD0gNixcclxuXHQgICAgICAgIHF1aXJrcyA9IGJyb3dzZXIucXVpcmtzO1xyXG5cclxuXHQgICAgZnVuY3Rpb24gY2hlY2tIYXNVSSgpe1xyXG5cdCAgICAgICAgaWYoIVVFLnVpKXtcclxuXHQgICAgICAgICAgICBhbGVydChsYW5nLmF1dG9mbG9hdE1zZyk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gMTtcclxuXHQgICAgfVxyXG5cdCAgICBmdW5jdGlvbiBmaXhJRTZGaXhlZFBvcygpe1xyXG5cdCAgICAgICAgdmFyIGRvY1N0eWxlID0gZG9jdW1lbnQuYm9keS5zdHlsZTtcclxuXHQgICAgICAgIGRvY1N0eWxlLmJhY2tncm91bmRJbWFnZSA9ICd1cmwoXCJhYm91dDpibGFua1wiKSc7XHJcblx0ICAgICAgICBkb2NTdHlsZS5iYWNrZ3JvdW5kQXR0YWNobWVudCA9ICdmaXhlZCc7XHJcblx0ICAgIH1cclxuXHQgICAgdmFyXHRiYWtDc3NUZXh0LFxyXG5cdCAgICAgICAgcGxhY2VIb2xkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcclxuXHQgICAgICAgIHRvb2xiYXJCb3gsb3JnVG9wLFxyXG5cdCAgICAgICAgZ2V0UG9zaXRpb24sXHJcblx0ICAgICAgICBmbGFnID10cnVlOyAgIC8vaWU35qih5byP5LiL6ZyA6KaB5YGP56e7XHJcblx0ICAgIGZ1bmN0aW9uIHNldEZsb2F0aW5nKCl7XHJcblx0ICAgICAgICB2YXIgdG9vYmFyQm94UG9zID0gZG9tVXRpbHMuZ2V0WFkodG9vbGJhckJveCksXHJcblx0ICAgICAgICAgICAgb3JpZ2FsRmxvYXQgPSBkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKHRvb2xiYXJCb3gsJ3Bvc2l0aW9uJyksXHJcblx0ICAgICAgICAgICAgb3JpZ2FsTGVmdCA9IGRvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUodG9vbGJhckJveCwnbGVmdCcpO1xyXG5cdCAgICAgICAgdG9vbGJhckJveC5zdHlsZS53aWR0aCA9IHRvb2xiYXJCb3gub2Zmc2V0V2lkdGggKyAncHgnO1xyXG5cdCAgICAgICAgdG9vbGJhckJveC5zdHlsZS56SW5kZXggPSBtZS5vcHRpb25zLnpJbmRleCAqIDEgKyAxO1xyXG5cdCAgICAgICAgdG9vbGJhckJveC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwbGFjZUhvbGRlciwgdG9vbGJhckJveCk7XHJcblx0ICAgICAgICBpZiAoTHRlSUU2IHx8IChxdWlya3MgJiYgYnJvd3Nlci5pZSkpIHtcclxuXHQgICAgICAgICAgICBpZih0b29sYmFyQm94LnN0eWxlLnBvc2l0aW9uICE9ICdhYnNvbHV0ZScpe1xyXG5cdCAgICAgICAgICAgICAgICB0b29sYmFyQm94LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdG9vbGJhckJveC5zdHlsZS50b3AgPSAoZG9jdW1lbnQuYm9keS5zY3JvbGxUb3B8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApIC0gb3JnVG9wICsgdG9wT2Zmc2V0ICArICdweCc7XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgIGlmIChicm93c2VyLmllN0NvbXBhdCAmJiBmbGFnKSB7XHJcblx0ICAgICAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgdG9vbGJhckJveC5zdHlsZS5sZWZ0ID0gIGRvbVV0aWxzLmdldFhZKHRvb2xiYXJCb3gpLnggLSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCsyICArICdweCc7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmKHRvb2xiYXJCb3guc3R5bGUucG9zaXRpb24gIT0gJ2ZpeGVkJyl7XHJcblx0ICAgICAgICAgICAgICAgIHRvb2xiYXJCb3guc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xyXG5cdCAgICAgICAgICAgICAgICB0b29sYmFyQm94LnN0eWxlLnRvcCA9IHRvcE9mZnNldCArXCJweFwiO1xyXG5cdCAgICAgICAgICAgICAgICAoKG9yaWdhbEZsb2F0ID09ICdhYnNvbHV0ZScgfHwgb3JpZ2FsRmxvYXQgPT0gJ3JlbGF0aXZlJykgJiYgcGFyc2VGbG9hdChvcmlnYWxMZWZ0KSkgJiYgKHRvb2xiYXJCb3guc3R5bGUubGVmdCA9IHRvb2JhckJveFBvcy54ICsgJ3B4Jyk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICAgIGZ1bmN0aW9uIHVuc2V0RmxvYXRpbmcoKXtcclxuXHQgICAgICAgIGZsYWcgPSB0cnVlO1xyXG5cdCAgICAgICAgaWYocGxhY2VIb2xkZXIucGFyZW50Tm9kZSl7XHJcblx0ICAgICAgICAgICAgcGxhY2VIb2xkZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChwbGFjZUhvbGRlcik7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgdG9vbGJhckJveC5zdHlsZS5jc3NUZXh0ID0gYmFrQ3NzVGV4dDtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gdXBkYXRlRmxvYXRpbmcoKXtcclxuXHQgICAgICAgIHZhciByZWN0MyA9IGdldFBvc2l0aW9uKG1lLmNvbnRhaW5lcik7XHJcblx0ICAgICAgICB2YXIgb2Zmc2V0PW1lLm9wdGlvbnMudG9vbGJhclRvcE9mZnNldHx8MDtcclxuXHQgICAgICAgIGlmIChyZWN0My50b3AgPCAwICYmIHJlY3QzLmJvdHRvbSAtIHRvb2xiYXJCb3gub2Zmc2V0SGVpZ2h0ID4gb2Zmc2V0KSB7XHJcblx0ICAgICAgICAgICAgc2V0RmxvYXRpbmcoKTtcclxuXHQgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgIHVuc2V0RmxvYXRpbmcoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdCAgICB2YXIgZGVmZXJfdXBkYXRlRmxvYXRpbmcgPSB1dGlscy5kZWZlcihmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgdXBkYXRlRmxvYXRpbmcoKTtcclxuXHQgICAgfSxicm93c2VyLmllID8gMjAwIDogMTAwLHRydWUpO1xyXG5cclxuXHQgICAgbWUuYWRkTGlzdGVuZXIoJ2Rlc3Ryb3knLGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICBkb21VdGlscy51bih3aW5kb3csIFsnc2Nyb2xsJywncmVzaXplJ10sIHVwZGF0ZUZsb2F0aW5nKTtcclxuXHQgICAgICAgIG1lLnJlbW92ZUxpc3RlbmVyKCdrZXlkb3duJywgZGVmZXJfdXBkYXRlRmxvYXRpbmcpO1xyXG5cdCAgICB9KTtcclxuXHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdyZWFkeScsIGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICBpZihjaGVja0hhc1VJKG1lKSl7XHJcblx0ICAgICAgICAgICAgLy/liqDovb3kuoZ1aee7hOS7tu+8jOS9huWcqG5ld+aXtu+8jOayoeacieWKoOi9vXVp77yM5a+86Ie057yW6L6R5Zmo5a6e5L6L5LiK5rKh5pyJdWnnsbvvvIzmiYDku6Xov5nph4zlgZrliKTmlq1cclxuXHQgICAgICAgICAgICBpZighbWUudWkpe1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGdldFBvc2l0aW9uID0gdWlVdGlscy5nZXRDbGllbnRSZWN0O1xyXG5cdCAgICAgICAgICAgIHRvb2xiYXJCb3ggPSBtZS51aS5nZXREb20oJ3Rvb2xiYXJib3gnKTtcclxuXHQgICAgICAgICAgICBvcmdUb3AgPSBnZXRQb3NpdGlvbih0b29sYmFyQm94KS50b3A7XHJcblx0ICAgICAgICAgICAgYmFrQ3NzVGV4dCA9IHRvb2xiYXJCb3guc3R5bGUuY3NzVGV4dDtcclxuXHQgICAgICAgICAgICBwbGFjZUhvbGRlci5zdHlsZS5oZWlnaHQgPSB0b29sYmFyQm94Lm9mZnNldEhlaWdodCArICdweCc7XHJcblx0ICAgICAgICAgICAgaWYoTHRlSUU2KXtcclxuXHQgICAgICAgICAgICAgICAgZml4SUU2Rml4ZWRQb3MoKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMub24od2luZG93LCBbJ3Njcm9sbCcsJ3Jlc2l6ZSddLCB1cGRhdGVGbG9hdGluZyk7XHJcblx0ICAgICAgICAgICAgbWUuYWRkTGlzdGVuZXIoJ2tleWRvd24nLCBkZWZlcl91cGRhdGVGbG9hdGluZyk7XHJcblxyXG5cdCAgICAgICAgICAgIG1lLmFkZExpc3RlbmVyKCdiZWZvcmVmdWxsc2NyZWVuY2hhbmdlJywgZnVuY3Rpb24gKHQsIGVuYWJsZWQpe1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoZW5hYmxlZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdW5zZXRGbG9hdGluZygpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgbWUuYWRkTGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2VkJywgZnVuY3Rpb24gKHQsIGVuYWJsZWQpe1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIWVuYWJsZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUZsb2F0aW5nKCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICBtZS5hZGRMaXN0ZW5lcignc291cmNlbW9kZWNoYW5nZWQnLCBmdW5jdGlvbiAodCwgZW5hYmxlZCl7XHJcblx0ICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB1cGRhdGVGbG9hdGluZygpO1xyXG5cdCAgICAgICAgICAgICAgICB9LDApO1xyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIG1lLmFkZExpc3RlbmVyKFwiY2xlYXJEb2NcIixmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB1cGRhdGVGbG9hdGluZygpO1xyXG5cdCAgICAgICAgICAgICAgICB9LDApO1xyXG5cclxuXHQgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9KTtcclxuXHR9O1xyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy92aWRlby5qc1xyXG5cdC8qKlxyXG5cdCAqIHZpZGVv5o+S5Lu277yMIOS4ulVFZGl0b3Lmj5Dkvpvop4bpopHmj5LlhaXmlK/mjIFcclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cdFVFLnBsdWdpbnNbJ3ZpZGVvJ10gPSBmdW5jdGlvbiAoKXtcclxuXHQgICAgdmFyIG1lID10aGlzO1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOWIm+W7uuaPkuWFpeinhumikeWtl+espueqnFxyXG5cdCAgICAgKiBAcGFyYW0gdXJsIOinhumikeWcsOWdgFxyXG5cdCAgICAgKiBAcGFyYW0gd2lkdGgg6KeG6aKR5a695bqmXHJcblx0ICAgICAqIEBwYXJhbSBoZWlnaHQg6KeG6aKR6auY5bqmXHJcblx0ICAgICAqIEBwYXJhbSBhbGlnbiDop4bpopHlr7npvZBcclxuXHQgICAgICogQHBhcmFtIHRvRW1iZWQg5piv5ZCm5LulZmxhc2jku6Pmm7/mmL7npLpcclxuXHQgICAgICogQHBhcmFtIGFkZFBhcmFncmFwaCAg5piv5ZCm6ZyA6KaB5re75YqgUCDmoIfnrb5cclxuXHQgICAgICovXHJcblx0ICAgIGZ1bmN0aW9uIGNyZWF0SW5zZXJ0U3RyKHVybCx3aWR0aCxoZWlnaHQsaWQsYWxpZ24sY2xhc3NuYW1lLHR5cGUpe1xyXG5cclxuXHQgICAgICAgIHVybCA9IHV0aWxzLnVuaHRtbEZvclVybCh1cmwpO1xyXG5cdCAgICAgICAgYWxpZ24gPSB1dGlscy51bmh0bWwoYWxpZ24pO1xyXG5cdCAgICAgICAgY2xhc3NuYW1lID0gdXRpbHMudW5odG1sKGNsYXNzbmFtZSk7XHJcblxyXG5cdCAgICAgICAgd2lkdGggPSBwYXJzZUludCh3aWR0aCwgMTApIHx8IDA7XHJcblx0ICAgICAgICBoZWlnaHQgPSBwYXJzZUludChoZWlnaHQsIDEwKSB8fCAwO1xyXG5cclxuXHQgICAgICAgIHZhciBzdHI7XHJcblx0ICAgICAgICBzd2l0Y2ggKHR5cGUpe1xyXG5cdCAgICAgICAgICAgIGNhc2UgJ2ltYWdlJzpcclxuXHQgICAgICAgICAgICAgICAgc3RyID0gJzxpbWcgJyArIChpZCA/ICdpZD1cIicgKyBpZCsnXCInIDogJycpICsgJyB3aWR0aD1cIicrIHdpZHRoICsnXCIgaGVpZ2h0PVwiJyArIGhlaWdodCArICdcIiBfdXJsPVwiJyt1cmwrJ1wiIGNsYXNzPVwiJyArIGNsYXNzbmFtZS5yZXBsYWNlKC9cXGJ2aWRlby1qc1xcYi8sICcnKSArICdcIicgICtcclxuXHQgICAgICAgICAgICAgICAgICAgICcgc3JjPVwiJyArIG1lLm9wdGlvbnMuVUVESVRPUl9IT01FX1VSTCsndGhlbWVzL2RlZmF1bHQvaW1hZ2VzL3NwYWNlci5naWZcIiBzdHlsZT1cImJhY2tncm91bmQ6dXJsKCcrbWUub3B0aW9ucy5VRURJVE9SX0hPTUVfVVJMKyd0aGVtZXMvZGVmYXVsdC9pbWFnZXMvdmlkZW9sb2dvLmdpZikgbm8tcmVwZWF0IGNlbnRlciBjZW50ZXI7IGJvcmRlcjoxcHggc29saWQgZ3JheTsnKyhhbGlnbiA/ICdmbG9hdDonICsgYWxpZ24gKyAnOyc6ICcnKSsnXCIgLz4nXHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGNhc2UgJ2VtYmVkJzpcclxuXHQgICAgICAgICAgICAgICAgc3RyID0gJzxlbWJlZCB0eXBlPVwiYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2hcIiBjbGFzcz1cIicgKyBjbGFzc25hbWUgKyAnXCIgcGx1Z2luc3BhZ2U9XCJodHRwOi8vd3d3Lm1hY3JvbWVkaWEuY29tL2dvL2dldGZsYXNocGxheWVyXCInICtcclxuXHQgICAgICAgICAgICAgICAgICAgICcgc3JjPVwiJyArICB1dGlscy5odG1sKHVybCkgKyAnXCIgd2lkdGg9XCInICsgd2lkdGggICsgJ1wiIGhlaWdodD1cIicgKyBoZWlnaHQgICsgJ1wiJyAgKyAoYWxpZ24gPyAnIHN0eWxlPVwiZmxvYXQ6JyArIGFsaWduICsgJ1wiJzogJycpICtcclxuXHQgICAgICAgICAgICAgICAgICAgICcgd21vZGU9XCJ0cmFuc3BhcmVudFwiIHBsYXk9XCJ0cnVlXCIgbG9vcD1cImZhbHNlXCIgbWVudT1cImZhbHNlXCIgYWxsb3dzY3JpcHRhY2Nlc3M9XCJuZXZlclwiIGFsbG93ZnVsbHNjcmVlbj1cInRydWVcIiA+JztcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgY2FzZSAndmlkZW8nOlxyXG5cdCAgICAgICAgICAgICAgICB2YXIgZXh0ID0gdXJsLnN1YnN0cih1cmwubGFzdEluZGV4T2YoJy4nKSArIDEpO1xyXG5cdCAgICAgICAgICAgICAgICBpZihleHQgPT0gJ29ndicpIGV4dCA9ICdvZ2cnO1xyXG5cdCAgICAgICAgICAgICAgICBzdHIgPSAnPHZpZGVvJyArIChpZCA/ICcgaWQ9XCInICsgaWQgKyAnXCInIDogJycpICsgJyBjbGFzcz1cIicgKyBjbGFzc25hbWUgKyAnIHZpZGVvLWpzXCIgJyArIChhbGlnbiA/ICcgc3R5bGU9XCJmbG9hdDonICsgYWxpZ24gKyAnXCInOiAnJykgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgJyBjb250cm9scyBwcmVsb2FkPVwibm9uZVwiIHdpZHRoPVwiJyArIHdpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBoZWlnaHQgKyAnXCIgc3JjPVwiJyArIHVybCArICdcIiBkYXRhLXNldHVwPVwie31cIj4nICtcclxuXHQgICAgICAgICAgICAgICAgICAgICc8c291cmNlIHNyYz1cIicgKyB1cmwgKyAnXCIgdHlwZT1cInZpZGVvLycgKyBleHQgKyAnXCIgLz48L3ZpZGVvPic7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIHN0cjtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gc3dpdGNoSW1nQW5kVmlkZW8ocm9vdCxpbWcydmlkZW8pe1xyXG5cdCAgICAgICAgdXRpbHMuZWFjaChyb290LmdldE5vZGVzQnlUYWdOYW1lKGltZzJ2aWRlbyA/ICdpbWcnIDogJ2VtYmVkIHZpZGVvJyksZnVuY3Rpb24obm9kZSl7XHJcblx0ICAgICAgICAgICAgdmFyIGNsYXNzTmFtZSA9IG5vZGUuZ2V0QXR0cignY2xhc3MnKTtcclxuXHQgICAgICAgICAgICBpZihjbGFzc05hbWUgJiYgY2xhc3NOYW1lLmluZGV4T2YoJ2VkdWktZmFrZWQtdmlkZW8nKSAhPSAtMSl7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBodG1sID0gY3JlYXRJbnNlcnRTdHIoIGltZzJ2aWRlbyA/IG5vZGUuZ2V0QXR0cignX3VybCcpIDogbm9kZS5nZXRBdHRyKCdzcmMnKSxub2RlLmdldEF0dHIoJ3dpZHRoJyksbm9kZS5nZXRBdHRyKCdoZWlnaHQnKSxudWxsLG5vZGUuZ2V0U3R5bGUoJ2Zsb2F0JykgfHwgJycsY2xhc3NOYW1lLGltZzJ2aWRlbyA/ICdlbWJlZCc6J2ltYWdlJyk7XHJcblx0ICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoVUUudU5vZGUuY3JlYXRlRWxlbWVudChodG1sKSxub2RlKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYoY2xhc3NOYW1lICYmIGNsYXNzTmFtZS5pbmRleE9mKCdlZHVpLXVwbG9hZC12aWRlbycpICE9IC0xKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGh0bWwgPSBjcmVhdEluc2VydFN0ciggaW1nMnZpZGVvID8gbm9kZS5nZXRBdHRyKCdfdXJsJykgOiBub2RlLmdldEF0dHIoJ3NyYycpLG5vZGUuZ2V0QXR0cignd2lkdGgnKSxub2RlLmdldEF0dHIoJ2hlaWdodCcpLG51bGwsbm9kZS5nZXRTdHlsZSgnZmxvYXQnKSB8fCAnJyxjbGFzc05hbWUsaW1nMnZpZGVvID8gJ3ZpZGVvJzonaW1hZ2UnKTtcclxuXHQgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChVRS51Tm9kZS5jcmVhdGVFbGVtZW50KGh0bWwpLG5vZGUpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pXHJcblx0ICAgIH1cclxuXHJcblx0ICAgIG1lLmFkZE91dHB1dFJ1bGUoZnVuY3Rpb24ocm9vdCl7XHJcblx0ICAgICAgICBzd2l0Y2hJbWdBbmRWaWRlbyhyb290LHRydWUpXHJcblx0ICAgIH0pO1xyXG5cdCAgICBtZS5hZGRJbnB1dFJ1bGUoZnVuY3Rpb24ocm9vdCl7XHJcblx0ICAgICAgICBzd2l0Y2hJbWdBbmRWaWRlbyhyb290KVxyXG5cdCAgICB9KTtcclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmj5LlhaXop4bpopFcclxuXHQgICAgICogQGNvbW1hbmQgaW5zZXJ0dmlkZW9cclxuXHQgICAgICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IHZpZGVvQXR0ciDplK7lgLzlr7nlr7nosaHvvIwg5o+P6L+w5LiA5Liq6KeG6aKR55qE5omA5pyJ5bGe5oCnXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogdmFyIHZpZGVvQXR0ciA9IHtcclxuXHQgICAgICogICAgICAvL+inhumikeWcsOWdgFxyXG5cdCAgICAgKiAgICAgIHVybDogJ2h0dHA6Ly93d3cueW91a3UuY29tL3h4eCcsXHJcblx0ICAgICAqICAgICAgLy/op4bpopHlrr3pq5jlgLzvvIwg5Y2V5L2NcHhcclxuXHQgICAgICogICAgICB3aWR0aDogMjAwLFxyXG5cdCAgICAgKiAgICAgIGhlaWdodDogMTAwXHJcblx0ICAgICAqIH07XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8vZWRpdG9yIOaYr+e8lui+keWZqOWunuS+i1xyXG5cdCAgICAgKiAvL+WQkee8lui+keWZqOaPkuWFpeWNleS4quinhumikVxyXG5cdCAgICAgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdpbnNlcnR2aWRlbycsIHZpZGVvQXR0ciApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5o+S5YWl6KeG6aKRXHJcblx0ICAgICAqIEBjb21tYW5kIGluc2VydHZpZGVvXHJcblx0ICAgICAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAgICAgKiBAcGFyYW0geyBBcnJheSB9IHZpZGVvQXJyIOmcgOimgeaPkuWFpeeahOinhumikeeahOaVsOe7hO+8jCDlhbbkuK3nmoTmr4/kuIDkuKrlhYPntKDpg73mmK/kuIDkuKrplK7lgLzlr7nlr7nosaHvvIwg5o+P6L+w5LqG5LiA5Liq6KeG6aKR55qE5omA5pyJ5bGe5oCnXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogdmFyIHZpZGVvQXR0cjEgPSB7XHJcblx0ICAgICAqICAgICAgLy/op4bpopHlnLDlnYBcclxuXHQgICAgICogICAgICB1cmw6ICdodHRwOi8vd3d3LnlvdWt1LmNvbS94eHgnLFxyXG5cdCAgICAgKiAgICAgIC8v6KeG6aKR5a696auY5YC877yMIOWNleS9jXB4XHJcblx0ICAgICAqICAgICAgd2lkdGg6IDIwMCxcclxuXHQgICAgICogICAgICBoZWlnaHQ6IDEwMFxyXG5cdCAgICAgKiB9LFxyXG5cdCAgICAgKiB2aWRlb0F0dHIyID0ge1xyXG5cdCAgICAgKiAgICAgIC8v6KeG6aKR5Zyw5Z2AXHJcblx0ICAgICAqICAgICAgdXJsOiAnaHR0cDovL3d3dy55b3VrdS5jb20veHh4JyxcclxuXHQgICAgICogICAgICAvL+inhumikeWuvemrmOWAvO+8jCDljZXkvY1weFxyXG5cdCAgICAgKiAgICAgIHdpZHRoOiAyMDAsXHJcblx0ICAgICAqICAgICAgaGVpZ2h0OiAxMDBcclxuXHQgICAgICogfVxyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL2VkaXRvciDmmK/nvJbovpHlmajlrp7kvotcclxuXHQgICAgICogLy/or6Xmlrnms5XlsIbkvJrlkJHnvJbovpHlmajlhoXmj5LlhaXkuKTkuKrop4bpopFcclxuXHQgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnaW5zZXJ0dmlkZW8nLCBbIHZpZGVvQXR0cjEsIHZpZGVvQXR0cjIgXSApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5p+l6K+i5b2T5YmN5YWJ5qCH5omA5Zyo5aSE5piv5ZCm5piv5LiA5Liq6KeG6aKRXHJcblx0ICAgICAqIEBjb21tYW5kIGluc2VydHZpZGVvXHJcblx0ICAgICAqIEBtZXRob2QgcXVlcnlDb21tYW5kU3RhdGVcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOmcgOimgeafpeivoueahOWRveS7pOWtl+espuS4slxyXG5cdCAgICAgKiBAcmV0dXJuIHsgaW50IH0g5aaC5p6c5b2T5YmN5YWJ5qCH5omA5Zyo5aSE55qE5YWD57Sg5piv5LiA5Liq6KeG6aKR5a+56LGh77yMIOWImei/lOWbnjHvvIzlkKbliJnov5Tlm54wXHJcblx0ICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICpcclxuXHQgICAgICogLy9lZGl0b3Ig5piv57yW6L6R5Zmo5a6e5L6LXHJcblx0ICAgICAqIGVkaXRvci5xdWVyeUNvbW1hbmRTdGF0ZSggJ2luc2VydHZpZGVvJyApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblx0ICAgIG1lLmNvbW1hbmRzW1wiaW5zZXJ0dmlkZW9cIl0gPSB7XHJcblx0ICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKGNtZCwgdmlkZW9PYmpzLCB0eXBlKXtcclxuXHQgICAgICAgICAgICB2aWRlb09ianMgPSB1dGlscy5pc0FycmF5KHZpZGVvT2Jqcyk/dmlkZW9PYmpzOlt2aWRlb09ianNdO1xyXG5cdCAgICAgICAgICAgIHZhciBodG1sID0gW10saWQgPSAndG1wVmVkaW8nLCBjbDtcclxuXHQgICAgICAgICAgICBmb3IodmFyIGk9MCx2aSxsZW4gPSB2aWRlb09ianMubGVuZ3RoO2k8bGVuO2krKyl7XHJcblx0ICAgICAgICAgICAgICAgIHZpID0gdmlkZW9PYmpzW2ldO1xyXG5cdCAgICAgICAgICAgICAgICBjbCA9ICh0eXBlID09ICd1cGxvYWQnID8gJ2VkdWktdXBsb2FkLXZpZGVvIHZpZGVvLWpzIHZqcy1kZWZhdWx0LXNraW4nOidlZHVpLWZha2VkLXZpZGVvJyk7XHJcblx0ICAgICAgICAgICAgICAgIGh0bWwucHVzaChjcmVhdEluc2VydFN0ciggdmkudXJsLCB2aS53aWR0aCB8fCA0MjAsICB2aS5oZWlnaHQgfHwgMjgwLCBpZCArIGksIG51bGwsIGNsLCAnaW1hZ2UnKSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIG1lLmV4ZWNDb21tYW5kKFwiaW5zZXJ0aHRtbFwiLGh0bWwuam9pbihcIlwiKSx0cnVlKTtcclxuXHQgICAgICAgICAgICB2YXIgcm5nID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICBmb3IodmFyIGk9IDAsbGVuPXZpZGVvT2Jqcy5sZW5ndGg7aTxsZW47aSsrKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGltZyA9IHRoaXMuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RtcFZlZGlvJytpKTtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlQXR0cmlidXRlcyhpbWcsJ2lkJyk7XHJcblx0ICAgICAgICAgICAgICAgIHJuZy5zZWxlY3ROb2RlKGltZykuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmV4ZWNDb21tYW5kKCdpbWFnZWZsb2F0Jyx2aWRlb09ianNbaV0uYWxpZ24pXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlIDogZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICB2YXIgaW1nID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCkuZ2V0Q2xvc2VkTm9kZSgpLFxyXG5cdCAgICAgICAgICAgICAgICBmbGFnID0gaW1nICYmIChpbWcuY2xhc3NOYW1lID09IFwiZWR1aS1mYWtlZC12aWRlb1wiIHx8IGltZy5jbGFzc05hbWUuaW5kZXhPZihcImVkdWktdXBsb2FkLXZpZGVvXCIpIT0tMSk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGZsYWcgPyAxIDogMDtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHR9O1xyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy90YWJsZS5jb3JlLmpzXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlZCB3aXRoIEpldEJyYWlucyBXZWJTdG9ybS5cclxuXHQgKiBVc2VyOiB0YW9xaWxpXHJcblx0ICogRGF0ZTogMTMtMS0xOFxyXG5cdCAqIFRpbWU6IOS4iuWNiDExOjA5XHJcblx0ICogVG8gY2hhbmdlIHRoaXMgdGVtcGxhdGUgdXNlIEZpbGUgfCBTZXR0aW5ncyB8IEZpbGUgVGVtcGxhdGVzLlxyXG5cdCAqL1xyXG5cdC8qKlxyXG5cdCAqIFVF6KGo5qC85pON5L2c57G7XHJcblx0ICogQHBhcmFtIHRhYmxlXHJcblx0ICogQGNvbnN0cnVjdG9yXHJcblx0ICovXHJcblx0KGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdmFyIFVFVGFibGUgPSBVRS5VRVRhYmxlID0gZnVuY3Rpb24gKHRhYmxlKSB7XHJcblx0ICAgICAgICB0aGlzLnRhYmxlID0gdGFibGU7XHJcblx0ICAgICAgICB0aGlzLmluZGV4VGFibGUgPSBbXTtcclxuXHQgICAgICAgIHRoaXMuc2VsZWN0ZWRUZHMgPSBbXTtcclxuXHQgICAgICAgIHRoaXMuY2VsbHNSYW5nZSA9IHt9O1xyXG5cdCAgICAgICAgdGhpcy51cGRhdGUodGFibGUpO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgLy89PT3ku6XkuIvkuLrpnZnmgIHlt6Xlhbfmlrnms5U9PT1cclxuXHQgICAgVUVUYWJsZS5yZW1vdmVTZWxlY3RlZENsYXNzID0gZnVuY3Rpb24gKGNlbGxzKSB7XHJcblx0ICAgICAgICB1dGlscy5lYWNoKGNlbGxzLCBmdW5jdGlvbiAoY2VsbCkge1xyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZUNsYXNzZXMoY2VsbCwgXCJzZWxlY3RUZENsYXNzXCIpO1xyXG5cdCAgICAgICAgfSlcclxuXHQgICAgfTtcclxuXHQgICAgVUVUYWJsZS5hZGRTZWxlY3RlZENsYXNzID0gZnVuY3Rpb24gKGNlbGxzKSB7XHJcblx0ICAgICAgICB1dGlscy5lYWNoKGNlbGxzLCBmdW5jdGlvbiAoY2VsbCkge1xyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLmFkZENsYXNzKGNlbGwsIFwic2VsZWN0VGRDbGFzc1wiKTtcclxuXHQgICAgICAgIH0pXHJcblx0ICAgIH07XHJcblx0ICAgIFVFVGFibGUuaXNFbXB0eUJsb2NrID0gZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKGRvbVV0aWxzLmZpbGxDaGFyLCAnZycpO1xyXG5cdCAgICAgICAgaWYgKG5vZGVbYnJvd3Nlci5pZSA/ICdpbm5lclRleHQnIDogJ3RleHRDb250ZW50J10ucmVwbGFjZSgvXlxccyokLywgJycpLnJlcGxhY2UocmVnLCAnJykubGVuZ3RoID4gMCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiAwO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgZm9yICh2YXIgaSBpbiBkdGQuJGlzTm90RW1wdHkpIGlmIChkdGQuJGlzTm90RW1wdHkuaGFzT3duUHJvcGVydHkoaSkpIHtcclxuXHQgICAgICAgICAgICBpZiAobm9kZS5nZXRFbGVtZW50c0J5VGFnTmFtZShpKS5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIDE7XHJcblx0ICAgIH07XHJcblx0ICAgIFVFVGFibGUuZ2V0V2lkdGggPSBmdW5jdGlvbiAoY2VsbCkge1xyXG5cdCAgICAgICAgaWYgKCFjZWxsKXJldHVybiAwO1xyXG5cdCAgICAgICAgcmV0dXJuIHBhcnNlSW50KGRvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUoY2VsbCwgXCJ3aWR0aFwiKSwgMTApO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOiOt+WPluWNleWFg+agvOaIluiAheWNleWFg+agvOe7hOeahOKAnOWvuem9kOKAneeKtuaAgeOAgiDlpoLmnpzlvZPliY3nmoTmo4DmtYvlr7nosaHmmK/kuIDkuKrljZXlhYPmoLznu4TvvIwg5Y+q5pyJ5Zyo5ruh6Laz5omA5pyJ5Y2V5YWD5qC855qEIOawtOW5s+WSjOerluebtCDlr7npvZDlsZ7mgKfpg73nm7jlkIznmoRcclxuXHQgICAgICog5p2h5Lu25pe25omN5Lya6L+U5Zue5YW254q25oCB5YC877yM5ZCm5YiZ5bCG6L+U5ZuebnVsbO+8myDlpoLmnpzlvZPliY3lj6rmo4DmtYvkuobkuIDkuKrljZXlhYPmoLzvvIwg5YiZ55u05o6l6L+U5Zue5b2T5YmN5Y2V5YWD5qC855qE5a+56b2Q54q25oCB77ybXHJcblx0ICAgICAqIEBwYXJhbSB0YWJsZSBjZWxsIG9yIHRhYmxlIGNlbGxzICwg5pSv5oyB5Y2V5Liq5Y2V5YWD5qC8ZG9t5a+56LGhIOaIluiAhSDljZXlhYPmoLxkb23lr7nosaHmlbDnu4RcclxuXHQgICAgICogQHJldHVybiB7IGFsaWduOiAnbGVmdCcgfHwgJ3JpZ2h0JyB8fCAnY2VudGVyJywgdmFsaWduOiAndG9wJyB8fCAnbWlkZGxlJyB8fCAnYm90dG9tJyB9IOaIluiAhSBudWxsXHJcblx0ICAgICAqL1xyXG5cdCAgICBVRVRhYmxlLmdldFRhYmxlQ2VsbEFsaWduU3RhdGUgPSBmdW5jdGlvbiAoIGNlbGxzICkge1xyXG5cclxuXHQgICAgICAgICF1dGlscy5pc0FycmF5KCBjZWxscyApICYmICggY2VsbHMgPSBbY2VsbHNdICk7XHJcblxyXG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IHt9LFxyXG5cdCAgICAgICAgICAgIHN0YXR1cyA9IFsnYWxpZ24nLCAndmFsaWduJ10sXHJcblx0ICAgICAgICAgICAgdGVtcFN0YXR1cyA9IG51bGwsXHJcblx0ICAgICAgICAgICAgaXNTYW1lID0gdHJ1ZTsvL+eKtuaAgeaYr+WQpuebuOWQjFxyXG5cclxuXHQgICAgICAgIHV0aWxzLmVhY2goIGNlbGxzLCBmdW5jdGlvbiggY2VsbE5vZGUgKXtcclxuXHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaCggc3RhdHVzLCBmdW5jdGlvbiggY3VycmVudFN0YXRlICl7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB0ZW1wU3RhdHVzID0gY2VsbE5vZGUuZ2V0QXR0cmlidXRlKCBjdXJyZW50U3RhdGUgKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmKCAhcmVzdWx0WyBjdXJyZW50U3RhdGUgXSAmJiB0ZW1wU3RhdHVzICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmVzdWx0WyBjdXJyZW50U3RhdGUgXSA9IHRlbXBTdGF0dXM7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggIXJlc3VsdFsgY3VycmVudFN0YXRlIF0gfHwgKCB0ZW1wU3RhdHVzICE9PSByZXN1bHRbIGN1cnJlbnRTdGF0ZSBdICkgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpc1NhbWUgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9ICk7XHJcblxyXG5cdCAgICAgICAgICAgIHJldHVybiBpc1NhbWU7XHJcblxyXG5cdCAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgcmV0dXJuIGlzU2FtZSA/IHJlc3VsdCA6IG51bGw7XHJcblxyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOagueaNruW9k+WJjemAieWMuuiOt+WPluebuOWFs+eahHRhYmxl5L+h5oGvXHJcblx0ICAgICAqIEByZXR1cm4ge09iamVjdH1cclxuXHQgICAgICovXHJcblx0ICAgIFVFVGFibGUuZ2V0VGFibGVJdGVtc0J5UmFuZ2UgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcblx0ICAgICAgICB2YXIgc3RhcnQgPSBlZGl0b3Iuc2VsZWN0aW9uLmdldFN0YXJ0KCk7XHJcblxyXG5cdCAgICAgICAgLy9mZuS4i+S8mumAieS4rWJvb2ttYXJrXHJcblx0ICAgICAgICBpZiggc3RhcnQgJiYgc3RhcnQuaWQgJiYgc3RhcnQuaWQuaW5kZXhPZignX2JhaWR1X2Jvb2ttYXJrX3N0YXJ0XycpID09PSAwICYmIHN0YXJ0Lm5leHRTaWJsaW5nKSB7XHJcblx0ICAgICAgICAgICAgc3RhcnQgPSBzdGFydC5uZXh0U2libGluZztcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAvL+WcqHRhYmxl5oiW6ICFdGTovrnnvJjmnInlj6/og73lrZjlnKjpgInkuK10cueahOaDheWGtVxyXG5cdCAgICAgICAgdmFyIGNlbGwgPSBzdGFydCAmJiBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHN0YXJ0LCBbXCJ0ZFwiLCBcInRoXCJdLCB0cnVlKSxcclxuXHQgICAgICAgICAgICB0ciA9IGNlbGwgJiYgY2VsbC5wYXJlbnROb2RlLFxyXG5cdCAgICAgICAgICAgIGNhcHRpb24gPSBzdGFydCAmJiBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHN0YXJ0LCAnY2FwdGlvbicsIHRydWUpLFxyXG5cdCAgICAgICAgICAgIHRhYmxlID0gY2FwdGlvbiA/IGNhcHRpb24ucGFyZW50Tm9kZSA6IHRyICYmIHRyLnBhcmVudE5vZGUucGFyZW50Tm9kZTtcclxuXHJcblx0ICAgICAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgICAgIGNlbGw6Y2VsbCxcclxuXHQgICAgICAgICAgICB0cjp0cixcclxuXHQgICAgICAgICAgICB0YWJsZTp0YWJsZSxcclxuXHQgICAgICAgICAgICBjYXB0aW9uOmNhcHRpb25cclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgVUVUYWJsZS5nZXRVRVRhYmxlQnlTZWxlY3RlZCA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuXHQgICAgICAgIHZhciB0YWJsZSA9IFVFVGFibGUuZ2V0VGFibGVJdGVtc0J5UmFuZ2UoZWRpdG9yKS50YWJsZTtcclxuXHQgICAgICAgIGlmICh0YWJsZSAmJiB0YWJsZS51ZVRhYmxlICYmIHRhYmxlLnVlVGFibGUuc2VsZWN0ZWRUZHMubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRhYmxlLnVlVGFibGU7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gbnVsbDtcclxuXHQgICAgfTtcclxuXHJcblx0ICAgIFVFVGFibGUuZ2V0RGVmYXVsdFZhbHVlID0gZnVuY3Rpb24gKGVkaXRvciwgdGFibGUpIHtcclxuXHQgICAgICAgIHZhciBib3JkZXJNYXAgPSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaW46JzBweCcsXHJcblx0ICAgICAgICAgICAgICAgIG1lZGl1bTonMXB4JyxcclxuXHQgICAgICAgICAgICAgICAgdGhpY2s6JzJweCdcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIHRhYmxlQm9yZGVyLCB0ZFBhZGRpbmcsIHRkQm9yZGVyLCB0bXBWYWx1ZTtcclxuXHQgICAgICAgIGlmICghdGFibGUpIHtcclxuXHQgICAgICAgICAgICB0YWJsZSA9IGVkaXRvci5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xyXG5cdCAgICAgICAgICAgIHRhYmxlLmluc2VydFJvdygwKS5pbnNlcnRDZWxsKDApLmlubmVySFRNTCA9ICd4eHgnO1xyXG5cdCAgICAgICAgICAgIGVkaXRvci5ib2R5LmFwcGVuZENoaWxkKHRhYmxlKTtcclxuXHQgICAgICAgICAgICB2YXIgdGQgPSB0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGQnKVswXTtcclxuXHQgICAgICAgICAgICB0bXBWYWx1ZSA9IGRvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUodGFibGUsICdib3JkZXItbGVmdC13aWR0aCcpO1xyXG5cdCAgICAgICAgICAgIHRhYmxlQm9yZGVyID0gcGFyc2VJbnQoYm9yZGVyTWFwW3RtcFZhbHVlXSB8fCB0bXBWYWx1ZSwgMTApO1xyXG5cdCAgICAgICAgICAgIHRtcFZhbHVlID0gZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZSh0ZCwgJ3BhZGRpbmctbGVmdCcpO1xyXG5cdCAgICAgICAgICAgIHRkUGFkZGluZyA9IHBhcnNlSW50KGJvcmRlck1hcFt0bXBWYWx1ZV0gfHwgdG1wVmFsdWUsIDEwKTtcclxuXHQgICAgICAgICAgICB0bXBWYWx1ZSA9IGRvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUodGQsICdib3JkZXItbGVmdC13aWR0aCcpO1xyXG5cdCAgICAgICAgICAgIHRkQm9yZGVyID0gcGFyc2VJbnQoYm9yZGVyTWFwW3RtcFZhbHVlXSB8fCB0bXBWYWx1ZSwgMTApO1xyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSh0YWJsZSk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICAgICAgdGFibGVCb3JkZXI6dGFibGVCb3JkZXIsXHJcblx0ICAgICAgICAgICAgICAgIHRkUGFkZGluZzp0ZFBhZGRpbmcsXHJcblx0ICAgICAgICAgICAgICAgIHRkQm9yZGVyOnRkQm9yZGVyXHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgdGQgPSB0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGQnKVswXTtcclxuXHQgICAgICAgICAgICB0bXBWYWx1ZSA9IGRvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUodGFibGUsICdib3JkZXItbGVmdC13aWR0aCcpO1xyXG5cdCAgICAgICAgICAgIHRhYmxlQm9yZGVyID0gcGFyc2VJbnQoYm9yZGVyTWFwW3RtcFZhbHVlXSB8fCB0bXBWYWx1ZSwgMTApO1xyXG5cdCAgICAgICAgICAgIHRtcFZhbHVlID0gZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZSh0ZCwgJ3BhZGRpbmctbGVmdCcpO1xyXG5cdCAgICAgICAgICAgIHRkUGFkZGluZyA9IHBhcnNlSW50KGJvcmRlck1hcFt0bXBWYWx1ZV0gfHwgdG1wVmFsdWUsIDEwKTtcclxuXHQgICAgICAgICAgICB0bXBWYWx1ZSA9IGRvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUodGQsICdib3JkZXItbGVmdC13aWR0aCcpO1xyXG5cdCAgICAgICAgICAgIHRkQm9yZGVyID0gcGFyc2VJbnQoYm9yZGVyTWFwW3RtcFZhbHVlXSB8fCB0bXBWYWx1ZSwgMTApO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlQm9yZGVyOnRhYmxlQm9yZGVyLFxyXG5cdCAgICAgICAgICAgICAgICB0ZFBhZGRpbmc6dGRQYWRkaW5nLFxyXG5cdCAgICAgICAgICAgICAgICB0ZEJvcmRlcjp0ZEJvcmRlclxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDmoLnmja7lvZPliY3ngrnlh7vnmoR0ZOaIluiAhXRhYmxl6I635Y+W57Si5byV5a+56LGhXHJcblx0ICAgICAqIEBwYXJhbSB0ZE9yVGFibGVcclxuXHQgICAgICovXHJcblx0ICAgIFVFVGFibGUuZ2V0VUVUYWJsZSA9IGZ1bmN0aW9uICh0ZE9yVGFibGUpIHtcclxuXHQgICAgICAgIHZhciB0YWcgPSB0ZE9yVGFibGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdCAgICAgICAgdGRPclRhYmxlID0gKHRhZyA9PSBcInRkXCIgfHwgdGFnID09IFwidGhcIiB8fCB0YWcgPT0gJ2NhcHRpb24nKSA/IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUodGRPclRhYmxlLCBcInRhYmxlXCIsIHRydWUpIDogdGRPclRhYmxlO1xyXG5cdCAgICAgICAgaWYgKCF0ZE9yVGFibGUudWVUYWJsZSkge1xyXG5cdCAgICAgICAgICAgIHRkT3JUYWJsZS51ZVRhYmxlID0gbmV3IFVFVGFibGUodGRPclRhYmxlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB0ZE9yVGFibGUudWVUYWJsZTtcclxuXHQgICAgfTtcclxuXHJcblx0ICAgIFVFVGFibGUuY2xvbmVDZWxsID0gZnVuY3Rpb24oY2VsbCxpZ25vcmVNZXJnZSxrZWVwUHJvKXtcclxuXHQgICAgICAgIGlmICghY2VsbCB8fCB1dGlscy5pc1N0cmluZyhjZWxsKSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnRhYmxlLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChjZWxsIHx8ICd0ZCcpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIGZsYWcgPSBkb21VdGlscy5oYXNDbGFzcyhjZWxsLCBcInNlbGVjdFRkQ2xhc3NcIik7XHJcblx0ICAgICAgICBmbGFnICYmIGRvbVV0aWxzLnJlbW92ZUNsYXNzZXMoY2VsbCwgXCJzZWxlY3RUZENsYXNzXCIpO1xyXG5cdCAgICAgICAgdmFyIHRtcENlbGwgPSBjZWxsLmNsb25lTm9kZSh0cnVlKTtcclxuXHQgICAgICAgIGlmIChpZ25vcmVNZXJnZSkge1xyXG5cdCAgICAgICAgICAgIHRtcENlbGwucm93U3BhbiA9IHRtcENlbGwuY29sU3BhbiA9IDE7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvL+WOu+aOieWuvemrmFxyXG5cdCAgICAgICAgIWtlZXBQcm8gJiYgZG9tVXRpbHMucmVtb3ZlQXR0cmlidXRlcyh0bXBDZWxsLCd3aWR0aCBoZWlnaHQnKTtcclxuXHQgICAgICAgICFrZWVwUHJvICYmIGRvbVV0aWxzLnJlbW92ZUF0dHJpYnV0ZXModG1wQ2VsbCwnc3R5bGUnKTtcclxuXHJcblx0ICAgICAgICB0bXBDZWxsLnN0eWxlLmJvcmRlckxlZnRTdHlsZSA9IFwiXCI7XHJcblx0ICAgICAgICB0bXBDZWxsLnN0eWxlLmJvcmRlclRvcFN0eWxlID0gXCJcIjtcclxuXHQgICAgICAgIHRtcENlbGwuc3R5bGUuYm9yZGVyTGVmdENvbG9yID0gY2VsbC5zdHlsZS5ib3JkZXJSaWdodENvbG9yO1xyXG5cdCAgICAgICAgdG1wQ2VsbC5zdHlsZS5ib3JkZXJMZWZ0V2lkdGggPSBjZWxsLnN0eWxlLmJvcmRlclJpZ2h0V2lkdGg7XHJcblx0ICAgICAgICB0bXBDZWxsLnN0eWxlLmJvcmRlclRvcENvbG9yID0gY2VsbC5zdHlsZS5ib3JkZXJCb3R0b21Db2xvcjtcclxuXHQgICAgICAgIHRtcENlbGwuc3R5bGUuYm9yZGVyVG9wV2lkdGggPSBjZWxsLnN0eWxlLmJvcmRlckJvdHRvbVdpZHRoO1xyXG5cdCAgICAgICAgZmxhZyAmJiBkb21VdGlscy5hZGRDbGFzcyhjZWxsLCBcInNlbGVjdFRkQ2xhc3NcIik7XHJcblx0ICAgICAgICByZXR1cm4gdG1wQ2VsbDtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgVUVUYWJsZS5wcm90b3R5cGUgPSB7XHJcblx0ICAgICAgICBnZXRNYXhSb3dzOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgcm93cyA9IHRoaXMudGFibGUucm93cywgbWF4TGVuID0gMTtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgcm93OyByb3cgPSByb3dzW2ldOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRNYXggPSAxO1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgY2o7IGNqID0gcm93LmNlbGxzW2orK107KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjdXJyZW50TWF4ID0gTWF0aC5tYXgoY2oucm93U3BhbiB8fCAxLCBjdXJyZW50TWF4KTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBtYXhMZW4gPSBNYXRoLm1heChjdXJyZW50TWF4ICsgaSwgbWF4TGVuKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG1heExlbjtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPluW9k+WJjeihqOagvOeahOacgOWkp+WIl+aVsFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBnZXRNYXhDb2xzOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgcm93cyA9IHRoaXMudGFibGUucm93cywgbWF4TGVuID0gMCwgY2VsbFJvd3MgPSB7fTtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgcm93OyByb3cgPSByb3dzW2ldOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGNlbGxzTnVtID0gMDtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGNqOyBjaiA9IHJvdy5jZWxsc1tqKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2VsbHNOdW0gKz0gKGNqLmNvbFNwYW4gfHwgMSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY2oucm93U3BhbiAmJiBjai5yb3dTcGFuID4gMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAxOyBrIDwgY2oucm93U3BhbjsgaysrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2VsbFJvd3NbJ3Jvd18nICsgKGkgKyBrKV0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxSb3dzWydyb3dfJyArIChpICsgayldID0gKGNqLmNvbFNwYW4gfHwgMSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsUm93c1sncm93XycgKyAoaSArIGspXSsrXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGNlbGxzTnVtICs9IGNlbGxSb3dzWydyb3dfJyArIGldIHx8IDA7XHJcblx0ICAgICAgICAgICAgICAgIG1heExlbiA9IE1hdGgubWF4KGNlbGxzTnVtLCBtYXhMZW4pO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gbWF4TGVuO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldENlbGxDb2xJbmRleDpmdW5jdGlvbiAoY2VsbCkge1xyXG5cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPluW9k+WJjWNlbGzml4HovrnnmoTljZXlhYPmoLzvvIxcclxuXHQgICAgICAgICAqIEBwYXJhbSBjZWxsXHJcblx0ICAgICAgICAgKiBAcGFyYW0gcmlnaHRcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0SFNpZGVDZWxsOmZ1bmN0aW9uIChjZWxsLCByaWdodCkge1xyXG5cdCAgICAgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjZWxsSW5mbyA9IHRoaXMuZ2V0Q2VsbEluZm8oY2VsbCksXHJcblx0ICAgICAgICAgICAgICAgICAgICBwcmV2aWV3Um93SW5kZXgsIHByZXZpZXdDb2xJbmRleDtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGxlbiA9IHRoaXMuc2VsZWN0ZWRUZHMubGVuZ3RoLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLmNlbGxzUmFuZ2U7XHJcblx0ICAgICAgICAgICAgICAgIC8v6aaW6KGM5oiW6ICF6aaW5YiX5rKh5pyJ5YmN572u5Y2V5YWD5qC8XHJcblx0ICAgICAgICAgICAgICAgIGlmICgoIXJpZ2h0ICYmICghbGVuID8gIWNlbGxJbmZvLmNvbEluZGV4IDogIXJhbmdlLmJlZ2luQ29sSW5kZXgpKSB8fCAocmlnaHQgJiYgKCFsZW4gPyAoY2VsbEluZm8uY29sSW5kZXggPT0gKHRoaXMuY29sc051bSAtIDEpKSA6IChyYW5nZS5lbmRDb2xJbmRleCA9PSB0aGlzLmNvbHNOdW0gLSAxKSkpKSByZXR1cm4gbnVsbDtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHByZXZpZXdSb3dJbmRleCA9ICFsZW4gPyBjZWxsSW5mby5yb3dJbmRleCA6IHJhbmdlLmJlZ2luUm93SW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIHByZXZpZXdDb2xJbmRleCA9ICFyaWdodCA/ICggIWxlbiA/IChjZWxsSW5mby5jb2xJbmRleCA8IDEgPyAwIDogKGNlbGxJbmZvLmNvbEluZGV4IC0gMSkpIDogcmFuZ2UuYmVnaW5Db2xJbmRleCAtIDEpXHJcblx0ICAgICAgICAgICAgICAgICAgICA6ICggIWxlbiA/IGNlbGxJbmZvLmNvbEluZGV4ICsgMSA6IHJhbmdlLmVuZENvbEluZGV4ICsgMSk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENlbGwodGhpcy5pbmRleFRhYmxlW3ByZXZpZXdSb3dJbmRleF1bcHJldmlld0NvbEluZGV4XS5yb3dJbmRleCwgdGhpcy5pbmRleFRhYmxlW3ByZXZpZXdSb3dJbmRleF1bcHJldmlld0NvbEluZGV4XS5jZWxsSW5kZXgpO1xyXG5cdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgc2hvd0Vycm9yKGUpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRUYWJOZXh0Q2VsbDpmdW5jdGlvbiAoY2VsbCwgcHJlUm93SW5kZXgpIHtcclxuXHQgICAgICAgICAgICB2YXIgY2VsbEluZm8gPSB0aGlzLmdldENlbGxJbmZvKGNlbGwpLFxyXG5cdCAgICAgICAgICAgICAgICByb3dJbmRleCA9IHByZVJvd0luZGV4IHx8IGNlbGxJbmZvLnJvd0luZGV4LFxyXG5cdCAgICAgICAgICAgICAgICBjb2xJbmRleCA9IGNlbGxJbmZvLmNvbEluZGV4ICsgMSArIChjZWxsSW5mby5jb2xTcGFuIC0gMSksXHJcblx0ICAgICAgICAgICAgICAgIG5leHRDZWxsO1xyXG5cdCAgICAgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgICAgIG5leHRDZWxsID0gdGhpcy5nZXRDZWxsKHRoaXMuaW5kZXhUYWJsZVtyb3dJbmRleF1bY29sSW5kZXhdLnJvd0luZGV4LCB0aGlzLmluZGV4VGFibGVbcm93SW5kZXhdW2NvbEluZGV4XS5jZWxsSW5kZXgpO1xyXG5cdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4ID0gcm93SW5kZXggKiAxICsgMTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbEluZGV4ID0gMDtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5leHRDZWxsID0gdGhpcy5nZXRDZWxsKHRoaXMuaW5kZXhUYWJsZVtyb3dJbmRleF1bY29sSW5kZXhdLnJvd0luZGV4LCB0aGlzLmluZGV4VGFibGVbcm93SW5kZXhdW2NvbEluZGV4XS5jZWxsSW5kZXgpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG5leHRDZWxsO1xyXG5cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPluinhuinieS4iueahOWQjue9ruWNleWFg+agvFxyXG5cdCAgICAgICAgICogQHBhcmFtIGNlbGxcclxuXHQgICAgICAgICAqIEBwYXJhbSBib3R0b21cclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0VlNpZGVDZWxsOmZ1bmN0aW9uIChjZWxsLCBib3R0b20sIGlnbm9yZVJhbmdlKSB7XHJcblx0ICAgICAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGNlbGxJbmZvID0gdGhpcy5nZXRDZWxsSW5mbyhjZWxsKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIG5leHRSb3dJbmRleCwgbmV4dENvbEluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbGVuID0gdGhpcy5zZWxlY3RlZFRkcy5sZW5ndGggJiYgIWlnbm9yZVJhbmdlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLmNlbGxzUmFuZ2U7XHJcblx0ICAgICAgICAgICAgICAgIC8v5pyr6KGM5oiW6ICF5pyr5YiX5rKh5pyJ5ZCO572u5Y2V5YWD5qC8XHJcblx0ICAgICAgICAgICAgICAgIGlmICgoIWJvdHRvbSAmJiAoY2VsbEluZm8ucm93SW5kZXggPT0gMCkpIHx8IChib3R0b20gJiYgKCFsZW4gPyAoY2VsbEluZm8ucm93SW5kZXggKyBjZWxsSW5mby5yb3dTcGFuID4gdGhpcy5yb3dzTnVtIC0gMSkgOiAocmFuZ2UuZW5kUm93SW5kZXggPT0gdGhpcy5yb3dzTnVtIC0gMSkpKSkgcmV0dXJuIG51bGw7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBuZXh0Um93SW5kZXggPSAhYm90dG9tID8gKCAhbGVuID8gY2VsbEluZm8ucm93SW5kZXggLSAxIDogcmFuZ2UuYmVnaW5Sb3dJbmRleCAtIDEpXHJcblx0ICAgICAgICAgICAgICAgICAgICA6ICggIWxlbiA/IChjZWxsSW5mby5yb3dJbmRleCArIGNlbGxJbmZvLnJvd1NwYW4pIDogcmFuZ2UuZW5kUm93SW5kZXggKyAxKTtcclxuXHQgICAgICAgICAgICAgICAgbmV4dENvbEluZGV4ID0gIWxlbiA/IGNlbGxJbmZvLmNvbEluZGV4IDogcmFuZ2UuYmVnaW5Db2xJbmRleDtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2VsbCh0aGlzLmluZGV4VGFibGVbbmV4dFJvd0luZGV4XVtuZXh0Q29sSW5kZXhdLnJvd0luZGV4LCB0aGlzLmluZGV4VGFibGVbbmV4dFJvd0luZGV4XVtuZXh0Q29sSW5kZXhdLmNlbGxJbmRleCk7XHJcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgICAgICBzaG93RXJyb3IoZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6I635Y+W55u45ZCM57uT5p2f5L2N572u55qE5Y2V5YWD5qC877yMeE9yWeaMh+S7o+S6huaYr+iOt+WPlnjovbTnm7jlkIzov5jmmK956L2055u45ZCMXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGdldFNhbWVFbmRQb3NDZWxsczpmdW5jdGlvbiAoY2VsbCwgeE9yWSkge1xyXG5cdCAgICAgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBmbGFnID0gKHhPclkudG9Mb3dlckNhc2UoKSA9PT0gXCJ4XCIpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgZW5kID0gZG9tVXRpbHMuZ2V0WFkoY2VsbClbZmxhZyA/ICd4JyA6ICd5J10gKyBjZWxsW1wib2Zmc2V0XCIgKyAoZmxhZyA/ICdXaWR0aCcgOiAnSGVpZ2h0JyldLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcm93cyA9IHRoaXMudGFibGUucm93cyxcclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGxzID0gbnVsbCwgcmV0dXJucyA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucm93c051bTsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjZWxscyA9IHJvd3NbaV0uY2VsbHM7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgdG1wQ2VsbDsgdG1wQ2VsbCA9IGNlbGxzW2orK107KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcEVuZCA9IGRvbVV0aWxzLmdldFhZKHRtcENlbGwpW2ZsYWcgPyAneCcgOiAneSddICsgdG1wQ2VsbFtcIm9mZnNldFwiICsgKGZsYWcgPyAnV2lkdGgnIDogJ0hlaWdodCcpXTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL+WvueW6lOihjOeahHRk5bey57uP6KKr5LiK6Z2i6KGMcm93U3BhbuS6hlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0bXBFbmQgPiBlbmQgJiYgZmxhZykgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGwgPT0gdG1wQ2VsbCB8fCBlbmQgPT0gdG1wRW5kKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5Y+q6I635Y+W5Y2V5LiA55qE5Y2V5YWD5qC8XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdG9kbyDku4Xojrflj5bljZXkuIDljZXlhYPmoLzlnKjnibnlrprmg4XlhrXkuIvkvJrpgKDmiJByZXR1cm5z5Li656m677yM5LuO6ICM5b2x5ZON5ZCO57ut55qE5ouW5ou95a6e546w77yM5L+u5q2j6L+Z5Liq44CC6ZyA6ICD6JmR5oCn6IO9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0bXBDZWxsW2ZsYWcgPyBcImNvbFNwYW5cIiA6IFwicm93U3BhblwiXSA9PSAxKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5zLnB1c2godG1wQ2VsbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWcpIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXJucztcclxuXHQgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHNob3dFcnJvcihlKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgc2V0Q2VsbENvbnRlbnQ6ZnVuY3Rpb24gKGNlbGwsIGNvbnRlbnQpIHtcclxuXHQgICAgICAgICAgICBjZWxsLmlubmVySFRNTCA9IGNvbnRlbnQgfHwgKGJyb3dzZXIuaWUgPyBkb21VdGlscy5maWxsQ2hhciA6IFwiPGJyIC8+XCIpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGNsb25lQ2VsbDpVRVRhYmxlLmNsb25lQ2VsbCxcclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog6I635Y+W6Lef5b2T5YmN5Y2V5YWD5qC855qE5Y+z6L6556uW57q/5Li65bem6L6555qE5omA5pyJ5pyq5ZCI5bm25Y2V5YWD5qC8XHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGdldFNhbWVTdGFydFBvc1hDZWxsczpmdW5jdGlvbiAoY2VsbCkge1xyXG5cdCAgICAgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBzdGFydCA9IGRvbVV0aWxzLmdldFhZKGNlbGwpLnggKyBjZWxsLm9mZnNldFdpZHRoLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcm93cyA9IHRoaXMudGFibGUucm93cywgY2VsbHMgLCByZXR1cm5zID0gW107XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yb3dzTnVtOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGxzID0gcm93c1tpXS5jZWxscztcclxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCB0bXBDZWxsOyB0bXBDZWxsID0gY2VsbHNbaisrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wU3RhcnQgPSBkb21VdGlscy5nZXRYWSh0bXBDZWxsKS54O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0bXBTdGFydCA+IHN0YXJ0KSBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG1wU3RhcnQgPT0gc3RhcnQgJiYgdG1wQ2VsbC5jb2xTcGFuID09IDEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJucy5wdXNoKHRtcENlbGwpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVybnM7XHJcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgICAgICBzaG93RXJyb3IoZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5pu05pawdGFibGXlr7nlupTnmoTntKLlvJXooahcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgdXBkYXRlOmZ1bmN0aW9uICh0YWJsZSkge1xyXG5cdCAgICAgICAgICAgIHRoaXMudGFibGUgPSB0YWJsZSB8fCB0aGlzLnRhYmxlO1xyXG5cdCAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUZHMgPSBbXTtcclxuXHQgICAgICAgICAgICB0aGlzLmNlbGxzUmFuZ2UgPSB7fTtcclxuXHQgICAgICAgICAgICB0aGlzLmluZGV4VGFibGUgPSBbXTtcclxuXHQgICAgICAgICAgICB2YXIgcm93cyA9IHRoaXMudGFibGUucm93cyxcclxuXHQgICAgICAgICAgICAgICAgcm93c051bSA9IHRoaXMuZ2V0TWF4Um93cygpLFxyXG5cdCAgICAgICAgICAgICAgICBkTnVtID0gcm93c051bSAtIHJvd3MubGVuZ3RoLFxyXG5cdCAgICAgICAgICAgICAgICBjb2xzTnVtID0gdGhpcy5nZXRNYXhDb2xzKCk7XHJcblx0ICAgICAgICAgICAgd2hpbGUgKGROdW0tLSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRhYmxlLmluc2VydFJvdyhyb3dzLmxlbmd0aCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMucm93c051bSA9IHJvd3NOdW07XHJcblx0ICAgICAgICAgICAgdGhpcy5jb2xzTnVtID0gY29sc051bTtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcm93cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmluZGV4VGFibGVbaV0gPSBuZXcgQXJyYXkoY29sc051bSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIC8v5aGr5YWF57Si5byV6KGoXHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgcm93SW5kZXggPSAwLCByb3c7IHJvdyA9IHJvd3Nbcm93SW5kZXhdOyByb3dJbmRleCsrKSB7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGNlbGxJbmRleCA9IDAsIGNlbGwsIGNlbGxzID0gcm93LmNlbGxzOyBjZWxsID0gY2VsbHNbY2VsbEluZGV4XTsgY2VsbEluZGV4KyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8v5L+u5q2j5pW06KGM6KKrcm93U3BhbuaXtuWvvOiHtOeahOihjOaVsOiuoeeul+mUmeivr1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGwucm93U3BhbiA+IHJvd3NOdW0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnJvd1NwYW4gPSByb3dzTnVtO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNvbEluZGV4ID0gY2VsbEluZGV4LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NwYW4gPSBjZWxsLnJvd1NwYW4gfHwgMSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb2xTcGFuID0gY2VsbC5jb2xTcGFuIHx8IDE7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+W9k+W3sue7j+iiq+S4iuS4gOihjHJvd1NwYW7miJbogIXooqvliY3kuIDliJdjb2xTcGFu5LqG77yM5YiZ6Lez5Yiw5LiL5LiA5Liq5Y2V5YWD5qC86L+b6KGMXHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5pbmRleFRhYmxlW3Jvd0luZGV4XVtjb2xJbmRleF0pIGNvbEluZGV4Kys7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJvd1NwYW47IGorKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgY29sU3BhbjsgaysrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZXhUYWJsZVtyb3dJbmRleCArIGpdW2NvbEluZGV4ICsga10gPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3dJbmRleDpyb3dJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxJbmRleDpjZWxsSW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xJbmRleDpjb2xJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd1NwYW46cm93U3BhbixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbFNwYW46Y29sU3BhblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIC8v5L+u5aSN5q6L57y6dGRcclxuXHQgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcm93c051bTsgaisrKSB7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBjb2xzTnVtOyBrKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmluZGV4VGFibGVbal1ba10gPT09IHVuZGVmaW5lZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJvdyA9IHJvd3Nbal07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2VsbCA9IHJvdy5jZWxsc1tyb3cuY2VsbHMubGVuZ3RoIC0gMV07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2VsbCA9IGNlbGwgPyBjZWxsLmNsb25lTm9kZSh0cnVlKSA6IHRoaXMudGFibGUub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDZWxsQ29udGVudChjZWxsKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbC5jb2xTcGFuICE9PSAxKWNlbGwuY29sU3BhbiA9IDE7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGwucm93U3BhbiAhPT0gMSljZWxsLnJvd1NwYW4gPSAxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChjZWxsKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4VGFibGVbal1ba10gPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4OmosXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxJbmRleDpjZWxsLmNlbGxJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sSW5kZXg6ayxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93U3BhbjoxLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xTcGFuOjFcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgLy/lvZPmoYbpgInlkI7liKDpmaTooYzmiJbogIXliJflkI7mkqTplIDvvIzpnIDopoHph43lu7rpgInljLrjgIJcclxuXHQgICAgICAgICAgICB2YXIgdGRzID0gZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGhpcy50YWJsZSwgXCJ0ZFwiKSxcclxuXHQgICAgICAgICAgICAgICAgc2VsZWN0VGRzID0gW107XHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaCh0ZHMsIGZ1bmN0aW9uICh0ZCkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoZG9tVXRpbHMuaGFzQ2xhc3ModGQsIFwic2VsZWN0VGRDbGFzc1wiKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc2VsZWN0VGRzLnB1c2godGQpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgaWYgKHNlbGVjdFRkcy5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gc2VsZWN0VGRzWzBdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgZW5kID0gc2VsZWN0VGRzW3NlbGVjdFRkcy5sZW5ndGggLSAxXSxcclxuXHQgICAgICAgICAgICAgICAgICAgIHN0YXJ0SW5mbyA9IHRoaXMuZ2V0Q2VsbEluZm8oc3RhcnQpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgZW5kSW5mbyA9IHRoaXMuZ2V0Q2VsbEluZm8oZW5kKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRkcyA9IHNlbGVjdFRkcztcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5jZWxsc1JhbmdlID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYmVnaW5Sb3dJbmRleDpzdGFydEluZm8ucm93SW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgICAgICBiZWdpbkNvbEluZGV4OnN0YXJ0SW5mby5jb2xJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgICAgIGVuZFJvd0luZGV4OmVuZEluZm8ucm93SW5kZXggKyBlbmRJbmZvLnJvd1NwYW4gLSAxLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgZW5kQ29sSW5kZXg6ZW5kSW5mby5jb2xJbmRleCArIGVuZEluZm8uY29sU3BhbiAtIDFcclxuXHQgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgLy/nu5nnrKzkuIDooYzorr7nva5maXJzdFJvd+eahOagt+W8j+WQjeensCzlnKjmjpLluo/lm77moIfnmoTmoLflvI/kuIrkvb/nlKjliLBcclxuXHQgICAgICAgICAgICBpZighZG9tVXRpbHMuaGFzQ2xhc3ModGhpcy50YWJsZS5yb3dzWzBdLCBcImZpcnN0Um93XCIpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLmFkZENsYXNzKHRoaXMudGFibGUucm93c1swXSwgXCJmaXJzdFJvd1wiKTtcclxuXHQgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMTsgaTwgdGhpcy50YWJsZS5yb3dzLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmVDbGFzc2VzKHRoaXMudGFibGUucm93c1tpXSwgXCJmaXJzdFJvd1wiKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOiOt+WPluWNleWFg+agvOeahOe0ouW8leS/oeaBr1xyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBnZXRDZWxsSW5mbzpmdW5jdGlvbiAoY2VsbCkge1xyXG5cdCAgICAgICAgICAgIGlmICghY2VsbCkgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgIHZhciBjZWxsSW5kZXggPSBjZWxsLmNlbGxJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgcm93SW5kZXggPSBjZWxsLnBhcmVudE5vZGUucm93SW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgIHJvd0luZm8gPSB0aGlzLmluZGV4VGFibGVbcm93SW5kZXhdLFxyXG5cdCAgICAgICAgICAgICAgICBudW1Db2xzID0gdGhpcy5jb2xzTnVtO1xyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGNvbEluZGV4ID0gY2VsbEluZGV4OyBjb2xJbmRleCA8IG51bUNvbHM7IGNvbEluZGV4KyspIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGNlbGxJbmZvID0gcm93SW5mb1tjb2xJbmRleF07XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjZWxsSW5mby5yb3dJbmRleCA9PT0gcm93SW5kZXggJiYgY2VsbEluZm8uY2VsbEluZGV4ID09PSBjZWxsSW5kZXgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBjZWxsSW5mbztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOagueaNruihjOWIl+WPt+iOt+WPluWNleWFg+agvFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBnZXRDZWxsOmZ1bmN0aW9uIChyb3dJbmRleCwgY2VsbEluZGV4KSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHJvd0luZGV4IDwgdGhpcy5yb3dzTnVtICYmIHRoaXMudGFibGUucm93c1tyb3dJbmRleF0uY2VsbHNbY2VsbEluZGV4XSB8fCBudWxsO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5Yig6Zmk5Y2V5YWD5qC8XHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGRlbGV0ZUNlbGw6ZnVuY3Rpb24gKGNlbGwsIHJvd0luZGV4KSB7XHJcblx0ICAgICAgICAgICAgcm93SW5kZXggPSB0eXBlb2Ygcm93SW5kZXggPT0gJ251bWJlcicgPyByb3dJbmRleCA6IGNlbGwucGFyZW50Tm9kZS5yb3dJbmRleDtcclxuXHQgICAgICAgICAgICB2YXIgcm93ID0gdGhpcy50YWJsZS5yb3dzW3Jvd0luZGV4XTtcclxuXHQgICAgICAgICAgICByb3cuZGVsZXRlQ2VsbChjZWxsLmNlbGxJbmRleCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmoLnmja7lp4vmnKvkuKTkuKrljZXlhYPmoLzojrflj5booqvmoYbpgInnmoTmiYDmnInljZXlhYPmoLzojIPlm7RcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgZ2V0Q2VsbHNSYW5nZTpmdW5jdGlvbiAoY2VsbEEsIGNlbGxCKSB7XHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tSYW5nZShiZWdpblJvd0luZGV4LCBiZWdpbkNvbEluZGV4LCBlbmRSb3dJbmRleCwgZW5kQ29sSW5kZXgpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRtcEJlZ2luUm93SW5kZXggPSBiZWdpblJvd0luZGV4LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wQmVnaW5Db2xJbmRleCA9IGJlZ2luQ29sSW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgICAgICB0bXBFbmRSb3dJbmRleCA9IGVuZFJvd0luZGV4LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wRW5kQ29sSW5kZXggPSBlbmRDb2xJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGxJbmZvLCBjb2xJbmRleCwgcm93SW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIC8vIOmAmui/h2luZGV4VGFibGXmo4Dmn6XmmK/lkKblrZjlnKjotoXlh7pUYWJsZVJhbmdl5LiK6L6555WM55qE5oOF5Ya1XHJcblx0ICAgICAgICAgICAgICAgIGlmIChiZWdpblJvd0luZGV4ID4gMCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yIChjb2xJbmRleCA9IGJlZ2luQ29sSW5kZXg7IGNvbEluZGV4IDwgZW5kQ29sSW5kZXg7IGNvbEluZGV4KyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjZWxsSW5mbyA9IG1lLmluZGV4VGFibGVbYmVnaW5Sb3dJbmRleF1bY29sSW5kZXhdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4ID0gY2VsbEluZm8ucm93SW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvd0luZGV4IDwgYmVnaW5Sb3dJbmRleCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBCZWdpblJvd0luZGV4ID0gTWF0aC5taW4ocm93SW5kZXgsIHRtcEJlZ2luUm93SW5kZXgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAvLyDpgJrov4dpbmRleFRhYmxl5qOA5p+l5piv5ZCm5a2Y5Zyo6LaF5Ye6VGFibGVSYW5nZeWPs+i+ueeVjOeahOaDheWGtVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoZW5kQ29sSW5kZXggPCBtZS5jb2xzTnVtKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHJvd0luZGV4ID0gYmVnaW5Sb3dJbmRleDsgcm93SW5kZXggPCBlbmRSb3dJbmRleDsgcm93SW5kZXgrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxJbmZvID0gbWUuaW5kZXhUYWJsZVtyb3dJbmRleF1bZW5kQ29sSW5kZXhdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbEluZGV4ID0gY2VsbEluZm8uY29sSW5kZXggKyBjZWxsSW5mby5jb2xTcGFuIC0gMTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sSW5kZXggPiBlbmRDb2xJbmRleCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBFbmRDb2xJbmRleCA9IE1hdGgubWF4KGNvbEluZGV4LCB0bXBFbmRDb2xJbmRleCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIC8vIOajgOafpeaYr+WQpuaciei2heWHulRhYmxlUmFuZ2XkuIvovrnnlYznmoTmg4XlhrVcclxuXHQgICAgICAgICAgICAgICAgaWYgKGVuZFJvd0luZGV4IDwgbWUucm93c051bSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yIChjb2xJbmRleCA9IGJlZ2luQ29sSW5kZXg7IGNvbEluZGV4IDwgZW5kQ29sSW5kZXg7IGNvbEluZGV4KyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjZWxsSW5mbyA9IG1lLmluZGV4VGFibGVbZW5kUm93SW5kZXhdW2NvbEluZGV4XTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByb3dJbmRleCA9IGNlbGxJbmZvLnJvd0luZGV4ICsgY2VsbEluZm8ucm93U3BhbiAtIDE7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJvd0luZGV4ID4gZW5kUm93SW5kZXgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wRW5kUm93SW5kZXggPSBNYXRoLm1heChyb3dJbmRleCwgdG1wRW5kUm93SW5kZXgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAvLyDmo4Dmn6XmmK/lkKbmnInotoXlh7pUYWJsZVJhbmdl5bem6L6555WM55qE5oOF5Ya1XHJcblx0ICAgICAgICAgICAgICAgIGlmIChiZWdpbkNvbEluZGV4ID4gMCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yIChyb3dJbmRleCA9IGJlZ2luUm93SW5kZXg7IHJvd0luZGV4IDwgZW5kUm93SW5kZXg7IHJvd0luZGV4KyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjZWxsSW5mbyA9IG1lLmluZGV4VGFibGVbcm93SW5kZXhdW2JlZ2luQ29sSW5kZXhdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbEluZGV4ID0gY2VsbEluZm8uY29sSW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbEluZGV4IDwgYmVnaW5Db2xJbmRleCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBCZWdpbkNvbEluZGV4ID0gTWF0aC5taW4oY2VsbEluZm8uY29sSW5kZXgsIHRtcEJlZ2luQ29sSW5kZXgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAvL+mAkuW9kuiwg+eUqOebtOiHs+aJgOacieWujOaIkOaJgOacieahhumAieWNleWFg+agvOeahOaJqeWxlVxyXG5cdCAgICAgICAgICAgICAgICBpZiAodG1wQmVnaW5Sb3dJbmRleCAhPSBiZWdpblJvd0luZGV4IHx8IHRtcEJlZ2luQ29sSW5kZXggIT0gYmVnaW5Db2xJbmRleCB8fCB0bXBFbmRSb3dJbmRleCAhPSBlbmRSb3dJbmRleCB8fCB0bXBFbmRDb2xJbmRleCAhPSBlbmRDb2xJbmRleCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrUmFuZ2UodG1wQmVnaW5Sb3dJbmRleCwgdG1wQmVnaW5Db2xJbmRleCwgdG1wRW5kUm93SW5kZXgsIHRtcEVuZENvbEluZGV4KTtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8vIOS4jemcgOimgeaJqeWxlVRhYmxlUmFuZ2XnmoTmg4XlhrVcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYmVnaW5Sb3dJbmRleDpiZWdpblJvd0luZGV4LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luQ29sSW5kZXg6YmVnaW5Db2xJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbmRSb3dJbmRleDplbmRSb3dJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbmRDb2xJbmRleDplbmRDb2xJbmRleFxyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGxBSW5mbyA9IG1lLmdldENlbGxJbmZvKGNlbGxBKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNlbGxBID09PSBjZWxsQikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBiZWdpblJvd0luZGV4OmNlbGxBSW5mby5yb3dJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBiZWdpbkNvbEluZGV4OmNlbGxBSW5mby5jb2xJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlbmRSb3dJbmRleDpjZWxsQUluZm8ucm93SW5kZXggKyBjZWxsQUluZm8ucm93U3BhbiAtIDEsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZW5kQ29sSW5kZXg6Y2VsbEFJbmZvLmNvbEluZGV4ICsgY2VsbEFJbmZvLmNvbFNwYW4gLSAxXHJcblx0ICAgICAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjZWxsQkluZm8gPSBtZS5nZXRDZWxsSW5mbyhjZWxsQik7XHJcblx0ICAgICAgICAgICAgICAgIC8vIOiuoeeul1RhYmxlUmFuZ2XnmoTlm5vkuKrovrlcclxuXHQgICAgICAgICAgICAgICAgdmFyIGJlZ2luUm93SW5kZXggPSBNYXRoLm1pbihjZWxsQUluZm8ucm93SW5kZXgsIGNlbGxCSW5mby5yb3dJbmRleCksXHJcblx0ICAgICAgICAgICAgICAgICAgICBiZWdpbkNvbEluZGV4ID0gTWF0aC5taW4oY2VsbEFJbmZvLmNvbEluZGV4LCBjZWxsQkluZm8uY29sSW5kZXgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgZW5kUm93SW5kZXggPSBNYXRoLm1heChjZWxsQUluZm8ucm93SW5kZXggKyBjZWxsQUluZm8ucm93U3BhbiAtIDEsIGNlbGxCSW5mby5yb3dJbmRleCArIGNlbGxCSW5mby5yb3dTcGFuIC0gMSksXHJcblx0ICAgICAgICAgICAgICAgICAgICBlbmRDb2xJbmRleCA9IE1hdGgubWF4KGNlbGxBSW5mby5jb2xJbmRleCArIGNlbGxBSW5mby5jb2xTcGFuIC0gMSwgY2VsbEJJbmZvLmNvbEluZGV4ICsgY2VsbEJJbmZvLmNvbFNwYW4gLSAxKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBjaGVja1JhbmdlKGJlZ2luUm93SW5kZXgsIGJlZ2luQ29sSW5kZXgsIGVuZFJvd0luZGV4LCBlbmRDb2xJbmRleCk7XHJcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgICAgICAvL3Rocm93IGU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5L6d5o2uY2VsbHNSYW5nZeiOt+WPluWvueW6lOeahOWNleWFg+agvOmbhuWQiFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBnZXRDZWxsczpmdW5jdGlvbiAocmFuZ2UpIHtcclxuXHQgICAgICAgICAgICAvL+avj+asoeiOt+WPlmNlbGxz5LmL5YmN5b+F6aG75YWI5riF6Zmk5LiK5qyh55qE6YCJ5oup77yM5ZCm5YiZ5Lya5a+55ZCO57ut6I635Y+W5pON5L2c6YCg5oiQ5b2x5ZONXHJcblx0ICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdGVkKCk7XHJcblx0ICAgICAgICAgICAgdmFyIGJlZ2luUm93SW5kZXggPSByYW5nZS5iZWdpblJvd0luZGV4LFxyXG5cdCAgICAgICAgICAgICAgICBiZWdpbkNvbEluZGV4ID0gcmFuZ2UuYmVnaW5Db2xJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgZW5kUm93SW5kZXggPSByYW5nZS5lbmRSb3dJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgZW5kQ29sSW5kZXggPSByYW5nZS5lbmRDb2xJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgY2VsbEluZm8sIHJvd0luZGV4LCBjb2xJbmRleCwgdGRIYXNoID0ge30sIHJldHVyblRkcyA9IFtdO1xyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSBiZWdpblJvd0luZGV4OyBpIDw9IGVuZFJvd0luZGV4OyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IGJlZ2luQ29sSW5kZXg7IGogPD0gZW5kQ29sSW5kZXg7IGorKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2VsbEluZm8gPSB0aGlzLmluZGV4VGFibGVbaV1bal07XHJcblx0ICAgICAgICAgICAgICAgICAgICByb3dJbmRleCA9IGNlbGxJbmZvLnJvd0luZGV4O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY29sSW5kZXggPSBjZWxsSW5mby5jb2xJbmRleDtcclxuXHQgICAgICAgICAgICAgICAgICAgIC8vIOWmguaenENlbGxz6YeM5bey57uP5YyF5ZCr5LqG5q2kQ2VsbOWImei3s+i/h1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IHJvd0luZGV4ICsgJ3wnICsgY29sSW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGRIYXNoW2tleV0pIGNvbnRpbnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGRIYXNoW2tleV0gPSAxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHJvd0luZGV4IDwgaSB8fCBjb2xJbmRleCA8IGogfHwgcm93SW5kZXggKyBjZWxsSW5mby5yb3dTcGFuIC0gMSA+IGVuZFJvd0luZGV4IHx8IGNvbEluZGV4ICsgY2VsbEluZm8uY29sU3BhbiAtIDEgPiBlbmRDb2xJbmRleCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuVGRzLnB1c2godGhpcy5nZXRDZWxsKHJvd0luZGV4LCBjZWxsSW5mby5jZWxsSW5kZXgpKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gcmV0dXJuVGRzO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICog5riF55CG5bey57uP6YCJ5Lit55qE5Y2V5YWD5qC8XHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGNsZWFyU2VsZWN0ZWQ6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIFVFVGFibGUucmVtb3ZlU2VsZWN0ZWRDbGFzcyh0aGlzLnNlbGVjdGVkVGRzKTtcclxuXHQgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVGRzID0gW107XHJcblx0ICAgICAgICAgICAgdGhpcy5jZWxsc1JhbmdlID0ge307XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmoLnmja5yYW5nZeiuvue9ruW3sue7j+mAieS4reeahOWNleWFg+agvFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBzZXRTZWxlY3RlZDpmdW5jdGlvbiAocmFuZ2UpIHtcclxuXHQgICAgICAgICAgICB2YXIgY2VsbHMgPSB0aGlzLmdldENlbGxzKHJhbmdlKTtcclxuXHQgICAgICAgICAgICBVRVRhYmxlLmFkZFNlbGVjdGVkQ2xhc3MoY2VsbHMpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRUZHMgPSBjZWxscztcclxuXHQgICAgICAgICAgICB0aGlzLmNlbGxzUmFuZ2UgPSByYW5nZTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBpc0Z1bGxSb3c6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuY2VsbHNSYW5nZTtcclxuXHQgICAgICAgICAgICByZXR1cm4gKHJhbmdlLmVuZENvbEluZGV4IC0gcmFuZ2UuYmVnaW5Db2xJbmRleCArIDEpID09IHRoaXMuY29sc051bTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBpc0Z1bGxDb2w6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuY2VsbHNSYW5nZSxcclxuXHQgICAgICAgICAgICAgICAgdGFibGUgPSB0aGlzLnRhYmxlLFxyXG5cdCAgICAgICAgICAgICAgICB0aHMgPSB0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRoXCIpLFxyXG5cdCAgICAgICAgICAgICAgICByb3dzID0gcmFuZ2UuZW5kUm93SW5kZXggLSByYW5nZS5iZWdpblJvd0luZGV4ICsgMTtcclxuXHQgICAgICAgICAgICByZXR1cm4gICF0aHMubGVuZ3RoID8gcm93cyA9PSB0aGlzLnJvd3NOdW0gOiByb3dzID09IHRoaXMucm93c051bSB8fCAocm93cyA9PSB0aGlzLnJvd3NOdW0gLSAxKTtcclxuXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDojrflj5bop4bop4nkuIrnmoTliY3nva7ljZXlhYPmoLzvvIzpu5jorqTmmK/lt6bovrnvvIx0b3DkvKDlhaXml7ZcclxuXHQgICAgICAgICAqIEBwYXJhbSBjZWxsXHJcblx0ICAgICAgICAgKiBAcGFyYW0gdG9wXHJcblx0ICAgICAgICAgKi9cclxuXHQgICAgICAgIGdldE5leHRDZWxsOmZ1bmN0aW9uIChjZWxsLCBib3R0b20sIGlnbm9yZVJhbmdlKSB7XHJcblx0ICAgICAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGNlbGxJbmZvID0gdGhpcy5nZXRDZWxsSW5mbyhjZWxsKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIG5leHRSb3dJbmRleCwgbmV4dENvbEluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbGVuID0gdGhpcy5zZWxlY3RlZFRkcy5sZW5ndGggJiYgIWlnbm9yZVJhbmdlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLmNlbGxzUmFuZ2U7XHJcblx0ICAgICAgICAgICAgICAgIC8v5pyr6KGM5oiW6ICF5pyr5YiX5rKh5pyJ5ZCO572u5Y2V5YWD5qC8XHJcblx0ICAgICAgICAgICAgICAgIGlmICgoIWJvdHRvbSAmJiAoY2VsbEluZm8ucm93SW5kZXggPT0gMCkpIHx8IChib3R0b20gJiYgKCFsZW4gPyAoY2VsbEluZm8ucm93SW5kZXggKyBjZWxsSW5mby5yb3dTcGFuID4gdGhpcy5yb3dzTnVtIC0gMSkgOiAocmFuZ2UuZW5kUm93SW5kZXggPT0gdGhpcy5yb3dzTnVtIC0gMSkpKSkgcmV0dXJuIG51bGw7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBuZXh0Um93SW5kZXggPSAhYm90dG9tID8gKCAhbGVuID8gY2VsbEluZm8ucm93SW5kZXggLSAxIDogcmFuZ2UuYmVnaW5Sb3dJbmRleCAtIDEpXHJcblx0ICAgICAgICAgICAgICAgICAgICA6ICggIWxlbiA/IChjZWxsSW5mby5yb3dJbmRleCArIGNlbGxJbmZvLnJvd1NwYW4pIDogcmFuZ2UuZW5kUm93SW5kZXggKyAxKTtcclxuXHQgICAgICAgICAgICAgICAgbmV4dENvbEluZGV4ID0gIWxlbiA/IGNlbGxJbmZvLmNvbEluZGV4IDogcmFuZ2UuYmVnaW5Db2xJbmRleDtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2VsbCh0aGlzLmluZGV4VGFibGVbbmV4dFJvd0luZGV4XVtuZXh0Q29sSW5kZXhdLnJvd0luZGV4LCB0aGlzLmluZGV4VGFibGVbbmV4dFJvd0luZGV4XVtuZXh0Q29sSW5kZXhdLmNlbGxJbmRleCk7XHJcblx0ICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgICAgICBzaG93RXJyb3IoZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldFByZXZpZXdDZWxsOmZ1bmN0aW9uIChjZWxsLCB0b3ApIHtcclxuXHQgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgY2VsbEluZm8gPSB0aGlzLmdldENlbGxJbmZvKGNlbGwpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcHJldmlld1Jvd0luZGV4LCBwcmV2aWV3Q29sSW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBsZW4gPSB0aGlzLnNlbGVjdGVkVGRzLmxlbmd0aCxcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5jZWxsc1JhbmdlO1xyXG5cdCAgICAgICAgICAgICAgICAvL+mmluihjOaIluiAhemmluWIl+ayoeacieWJjee9ruWNleWFg+agvFxyXG5cdCAgICAgICAgICAgICAgICBpZiAoKCF0b3AgJiYgKCFsZW4gPyAhY2VsbEluZm8uY29sSW5kZXggOiAhcmFuZ2UuYmVnaW5Db2xJbmRleCkpIHx8ICh0b3AgJiYgKCFsZW4gPyAoY2VsbEluZm8ucm93SW5kZXggPiAodGhpcy5jb2xzTnVtIC0gMSkpIDogKHJhbmdlLmVuZENvbEluZGV4ID09IHRoaXMuY29sc051bSAtIDEpKSkpIHJldHVybiBudWxsO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgcHJldmlld1Jvd0luZGV4ID0gIXRvcCA/ICggIWxlbiA/IGNlbGxJbmZvLnJvd0luZGV4IDogcmFuZ2UuYmVnaW5Sb3dJbmRleCApXHJcblx0ICAgICAgICAgICAgICAgICAgICA6ICggIWxlbiA/IChjZWxsSW5mby5yb3dJbmRleCA8IDEgPyAwIDogKGNlbGxJbmZvLnJvd0luZGV4IC0gMSkpIDogcmFuZ2UuYmVnaW5Sb3dJbmRleCk7XHJcblx0ICAgICAgICAgICAgICAgIHByZXZpZXdDb2xJbmRleCA9ICF0b3AgPyAoICFsZW4gPyAoY2VsbEluZm8uY29sSW5kZXggPCAxID8gMCA6IChjZWxsSW5mby5jb2xJbmRleCAtIDEpKSA6IHJhbmdlLmJlZ2luQ29sSW5kZXggLSAxKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgOiAoICFsZW4gPyBjZWxsSW5mby5jb2xJbmRleCA6IHJhbmdlLmVuZENvbEluZGV4ICsgMSk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENlbGwodGhpcy5pbmRleFRhYmxlW3ByZXZpZXdSb3dJbmRleF1bcHJldmlld0NvbEluZGV4XS5yb3dJbmRleCwgdGhpcy5pbmRleFRhYmxlW3ByZXZpZXdSb3dJbmRleF1bcHJldmlld0NvbEluZGV4XS5jZWxsSW5kZXgpO1xyXG5cdCAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgc2hvd0Vycm9yKGUpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOenu+WKqOWNleWFg+agvOS4reeahOWGheWuuVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBtb3ZlQ29udGVudDpmdW5jdGlvbiAoY2VsbFRvLCBjZWxsRnJvbSkge1xyXG5cdCAgICAgICAgICAgIGlmIChVRVRhYmxlLmlzRW1wdHlCbG9jayhjZWxsRnJvbSkpIHJldHVybjtcclxuXHQgICAgICAgICAgICBpZiAoVUVUYWJsZS5pc0VtcHR5QmxvY2soY2VsbFRvKSkge1xyXG5cdCAgICAgICAgICAgICAgICBjZWxsVG8uaW5uZXJIVE1MID0gY2VsbEZyb20uaW5uZXJIVE1MO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciBjaGlsZCA9IGNlbGxUby5sYXN0Q2hpbGQ7XHJcblx0ICAgICAgICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09IDMgfHwgIWR0ZC4kYmxvY2tbY2hpbGQudGFnTmFtZV0pIHtcclxuXHQgICAgICAgICAgICAgICAgY2VsbFRvLmFwcGVuZENoaWxkKGNlbGxUby5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JyJykpXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHdoaWxlIChjaGlsZCA9IGNlbGxGcm9tLmZpcnN0Q2hpbGQpIHtcclxuXHQgICAgICAgICAgICAgICAgY2VsbFRvLmFwcGVuZENoaWxkKGNoaWxkKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlkJHlj7PlkIjlubbljZXlhYPmoLxcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgbWVyZ2VSaWdodDpmdW5jdGlvbiAoY2VsbCkge1xyXG5cdCAgICAgICAgICAgIHZhciBjZWxsSW5mbyA9IHRoaXMuZ2V0Q2VsbEluZm8oY2VsbCksXHJcblx0ICAgICAgICAgICAgICAgIHJpZ2h0Q29sSW5kZXggPSBjZWxsSW5mby5jb2xJbmRleCArIGNlbGxJbmZvLmNvbFNwYW4sXHJcblx0ICAgICAgICAgICAgICAgIHJpZ2h0Q2VsbEluZm8gPSB0aGlzLmluZGV4VGFibGVbY2VsbEluZm8ucm93SW5kZXhdW3JpZ2h0Q29sSW5kZXhdLFxyXG5cdCAgICAgICAgICAgICAgICByaWdodENlbGwgPSB0aGlzLmdldENlbGwocmlnaHRDZWxsSW5mby5yb3dJbmRleCwgcmlnaHRDZWxsSW5mby5jZWxsSW5kZXgpO1xyXG5cdCAgICAgICAgICAgIC8v5ZCI5bm2XHJcblx0ICAgICAgICAgICAgY2VsbC5jb2xTcGFuID0gY2VsbEluZm8uY29sU3BhbiArIHJpZ2h0Q2VsbEluZm8uY29sU3BhbjtcclxuXHQgICAgICAgICAgICAvL+iiq+WQiOW5tueahOWNleWFg+agvOS4jeW6lOWtmOWcqOWuveW6puWxnuaAp1xyXG5cdCAgICAgICAgICAgIGNlbGwucmVtb3ZlQXR0cmlidXRlKFwid2lkdGhcIik7XHJcblx0ICAgICAgICAgICAgLy/np7vliqjlhoXlrrlcclxuXHQgICAgICAgICAgICB0aGlzLm1vdmVDb250ZW50KGNlbGwsIHJpZ2h0Q2VsbCk7XHJcblx0ICAgICAgICAgICAgLy/liKDmjonooqvlkIjlubbnmoRDZWxsXHJcblx0ICAgICAgICAgICAgdGhpcy5kZWxldGVDZWxsKHJpZ2h0Q2VsbCwgcmlnaHRDZWxsSW5mby5yb3dJbmRleCk7XHJcblx0ICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOWQkeS4i+WQiOW5tuWNleWFg+agvFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBtZXJnZURvd246ZnVuY3Rpb24gKGNlbGwpIHtcclxuXHQgICAgICAgICAgICB2YXIgY2VsbEluZm8gPSB0aGlzLmdldENlbGxJbmZvKGNlbGwpLFxyXG5cdCAgICAgICAgICAgICAgICBkb3duUm93SW5kZXggPSBjZWxsSW5mby5yb3dJbmRleCArIGNlbGxJbmZvLnJvd1NwYW4sXHJcblx0ICAgICAgICAgICAgICAgIGRvd25DZWxsSW5mbyA9IHRoaXMuaW5kZXhUYWJsZVtkb3duUm93SW5kZXhdW2NlbGxJbmZvLmNvbEluZGV4XSxcclxuXHQgICAgICAgICAgICAgICAgZG93bkNlbGwgPSB0aGlzLmdldENlbGwoZG93bkNlbGxJbmZvLnJvd0luZGV4LCBkb3duQ2VsbEluZm8uY2VsbEluZGV4KTtcclxuXHQgICAgICAgICAgICBjZWxsLnJvd1NwYW4gPSBjZWxsSW5mby5yb3dTcGFuICsgZG93bkNlbGxJbmZvLnJvd1NwYW47XHJcblx0ICAgICAgICAgICAgY2VsbC5yZW1vdmVBdHRyaWJ1dGUoXCJoZWlnaHRcIik7XHJcblx0ICAgICAgICAgICAgdGhpcy5tb3ZlQ29udGVudChjZWxsLCBkb3duQ2VsbCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5kZWxldGVDZWxsKGRvd25DZWxsLCBkb3duQ2VsbEluZm8ucm93SW5kZXgpO1xyXG5cdCAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDlkIjlubbmlbTkuKpyYW5nZeS4reeahOWGheWuuVxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBtZXJnZVJhbmdlOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAvL+eUseS6juWQiOW5tuaTjeS9nOWPr+S7peWcqOS7u+aEj+aXtuWIu+i/m+ihjO+8jOaJgOS7peaXoOazlemAmui/h+m8oOagh+S9jee9ruetieS/oeaBr+WunuaXtueUn+aIkHJhbmdl77yM5Y+q6IO96YCa6L+H57yT5a2Y5a6e5L6L5Lit55qEY2VsbHNSYW5nZeWvueixoeadpeiuv+mXrlxyXG5cdCAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuY2VsbHNSYW5nZSxcclxuXHQgICAgICAgICAgICAgICAgbGVmdFRvcENlbGwgPSB0aGlzLmdldENlbGwocmFuZ2UuYmVnaW5Sb3dJbmRleCwgdGhpcy5pbmRleFRhYmxlW3JhbmdlLmJlZ2luUm93SW5kZXhdW3JhbmdlLmJlZ2luQ29sSW5kZXhdLmNlbGxJbmRleCk7XHJcblxyXG5cdCAgICAgICAgICAgIGlmIChsZWZ0VG9wQ2VsbC50YWdOYW1lID09IFwiVEhcIiAmJiByYW5nZS5lbmRSb3dJbmRleCAhPT0gcmFuZ2UuYmVnaW5Sb3dJbmRleCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4VGFibGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICBpbmZvID0gdGhpcy5nZXRDZWxsSW5mbyhsZWZ0VG9wQ2VsbCk7XHJcblx0ICAgICAgICAgICAgICAgIGxlZnRUb3BDZWxsID0gdGhpcy5nZXRDZWxsKDEsIGluZGV4WzFdW2luZm8uY29sSW5kZXhdLmNlbGxJbmRleCk7XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRDZWxsc1JhbmdlKGxlZnRUb3BDZWxsLCB0aGlzLmdldENlbGwoaW5kZXhbdGhpcy5yb3dzTnVtIC0gMV1baW5mby5jb2xJbmRleF0ucm93SW5kZXgsIGluZGV4W3RoaXMucm93c051bSAtIDFdW2luZm8uY29sSW5kZXhdLmNlbGxJbmRleCkpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgLy8g5Yig6Zmk5Ymp5L2Z55qEQ2VsbHNcclxuXHQgICAgICAgICAgICB2YXIgY2VsbHMgPSB0aGlzLmdldENlbGxzKHJhbmdlKTtcclxuXHQgICAgICAgICAgICBmb3IodmFyIGk9IDAsY2k7Y2k9Y2VsbHNbaSsrXTspe1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2kgIT09IGxlZnRUb3BDZWxsKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVDb250ZW50KGxlZnRUb3BDZWxsLCBjaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZUNlbGwoY2kpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIC8vIOS/ruaUueW3puS4iuinkkNlbGznmoRyb3dTcGFu5ZKMY29sU3Bhbu+8jOW5tuiwg+aVtOWuveW6puWxnuaAp+iuvue9rlxyXG5cdCAgICAgICAgICAgIGxlZnRUb3BDZWxsLnJvd1NwYW4gPSByYW5nZS5lbmRSb3dJbmRleCAtIHJhbmdlLmJlZ2luUm93SW5kZXggKyAxO1xyXG5cdCAgICAgICAgICAgIGxlZnRUb3BDZWxsLnJvd1NwYW4gPiAxICYmIGxlZnRUb3BDZWxsLnJlbW92ZUF0dHJpYnV0ZShcImhlaWdodFwiKTtcclxuXHQgICAgICAgICAgICBsZWZ0VG9wQ2VsbC5jb2xTcGFuID0gcmFuZ2UuZW5kQ29sSW5kZXggLSByYW5nZS5iZWdpbkNvbEluZGV4ICsgMTtcclxuXHQgICAgICAgICAgICBsZWZ0VG9wQ2VsbC5jb2xTcGFuID4gMSAmJiBsZWZ0VG9wQ2VsbC5yZW1vdmVBdHRyaWJ1dGUoXCJ3aWR0aFwiKTtcclxuXHQgICAgICAgICAgICBpZiAobGVmdFRvcENlbGwucm93U3BhbiA9PSB0aGlzLnJvd3NOdW0gJiYgbGVmdFRvcENlbGwuY29sU3BhbiAhPSAxKSB7XHJcblx0ICAgICAgICAgICAgICAgIGxlZnRUb3BDZWxsLmNvbFNwYW4gPSAxO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgaWYgKGxlZnRUb3BDZWxsLmNvbFNwYW4gPT0gdGhpcy5jb2xzTnVtICYmIGxlZnRUb3BDZWxsLnJvd1NwYW4gIT0gMSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcm93SW5kZXggPSBsZWZ0VG9wQ2VsbC5wYXJlbnROb2RlLnJvd0luZGV4O1xyXG5cdCAgICAgICAgICAgICAgICAvL+ino+WGs0lF5LiL55qE6KGo5qC85pON5L2c6Zeu6aKYXHJcblx0ICAgICAgICAgICAgICAgIGlmKCB0aGlzLnRhYmxlLmRlbGV0ZVJvdyApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSByb3dJbmRleCsgMSwgY3VySW5kZXg9cm93SW5kZXgrIDEsIGxlbj1sZWZ0VG9wQ2VsbC5yb3dTcGFuOyBpIDwgbGVuOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRhYmxlLmRlbGV0ZVJvdyhjdXJJbmRleCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuPWxlZnRUb3BDZWxsLnJvd1NwYW4gLSAxOyBpIDwgbGVuOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm93ID0gdGhpcy50YWJsZS5yb3dzW3Jvd0luZGV4ICsgMV07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcm93LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocm93KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBsZWZ0VG9wQ2VsbC5yb3dTcGFuID0gMTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOaPkuWFpeS4gOihjOWNleWFg+agvFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBpbnNlcnRSb3c6ZnVuY3Rpb24gKHJvd0luZGV4LCBzb3VyY2VDZWxsKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG51bUNvbHMgPSB0aGlzLmNvbHNOdW0sXHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlID0gdGhpcy50YWJsZSxcclxuXHQgICAgICAgICAgICAgICAgcm93ID0gdGFibGUuaW5zZXJ0Um93KHJvd0luZGV4KSwgY2VsbCxcclxuXHQgICAgICAgICAgICAgICAgaXNJbnNlcnRUaXRsZSA9IHR5cGVvZiBzb3VyY2VDZWxsID09ICdzdHJpbmcnICYmIHNvdXJjZUNlbGwudG9VcHBlckNhc2UoKSA9PSAnVEgnO1xyXG5cclxuXHQgICAgICAgICAgICBmdW5jdGlvbiByZXBsYWNlVGRUb1RoKGNvbEluZGV4LCBjZWxsLCB0YWJsZVJvdykge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoY29sSW5kZXggPT0gMCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRyID0gdGFibGVSb3cubmV4dFNpYmxpbmcgfHwgdGFibGVSb3cucHJldmlvdXNTaWJsaW5nLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoID0gdHIuY2VsbHNbY29sSW5kZXhdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoLnRhZ05hbWUgPT0gJ1RIJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoID0gY2VsbC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aC5hcHBlbmRDaGlsZChjZWxsLmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlUm93Lmluc2VydEJlZm9yZSh0aCwgY2VsbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGNlbGwpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGwudGFnTmFtZSA9PSAnVEgnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRkID0gY2VsbC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZFwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0ZC5hcHBlbmRDaGlsZChjZWxsLmZpcnN0Q2hpbGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlUm93Lmluc2VydEJlZm9yZSh0ZCwgY2VsbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGNlbGwpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIC8v6aaW6KGM55u05o6l5o+S5YWlLOaXoOmcgOiAg+iZkemDqOWIhuWNleWFg+agvOiiq3Jvd3NwYW7nmoTmg4XlhrVcclxuXHQgICAgICAgICAgICBpZiAocm93SW5kZXggPT0gMCB8fCByb3dJbmRleCA9PSB0aGlzLnJvd3NOdW0pIHtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgY29sSW5kZXggPSAwOyBjb2xJbmRleCA8IG51bUNvbHM7IGNvbEluZGV4KyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGwgPSB0aGlzLmNsb25lQ2VsbChzb3VyY2VDZWxsLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2VsbENvbnRlbnQoY2VsbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjZWxsLmdldEF0dHJpYnV0ZSgndkFsaWduJykgJiYgY2VsbC5zZXRBdHRyaWJ1dGUoJ3ZBbGlnbicsIGNlbGwuZ2V0QXR0cmlidXRlKCd2QWxpZ24nKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZighaXNJbnNlcnRUaXRsZSkgcmVwbGFjZVRkVG9UaChjb2xJbmRleCwgY2VsbCwgcm93KTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBpbmZvUm93ID0gdGhpcy5pbmRleFRhYmxlW3Jvd0luZGV4XSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGxJbmRleCA9IDA7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAoY29sSW5kZXggPSAwOyBjb2xJbmRleCA8IG51bUNvbHM7IGNvbEluZGV4KyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjZWxsSW5mbyA9IGluZm9Sb3dbY29sSW5kZXhdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/lpoLmnpzlrZjlnKjmn5DkuKrljZXlhYPmoLznmoRyb3dzcGFu56m/6L+H5b6F5o+S5YWl6KGM55qE5L2N572u77yM5YiZ5L+u5pS56K+l5Y2V5YWD5qC855qEcm93c3BhbuWNs+WPr++8jOaXoOmcgOaPkuWFpeWNleWFg+agvFxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGxJbmZvLnJvd0luZGV4IDwgcm93SW5kZXgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjZWxsID0gdGhpcy5nZXRDZWxsKGNlbGxJbmZvLnJvd0luZGV4LCBjZWxsSW5mby5jZWxsSW5kZXgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwucm93U3BhbiA9IGNlbGxJbmZvLnJvd1NwYW4gKyAxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjZWxsID0gdGhpcy5jbG9uZUNlbGwoc291cmNlQ2VsbCwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDZWxsQ29udGVudChjZWxsKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZighaXNJbnNlcnRUaXRsZSkgcmVwbGFjZVRkVG9UaChjb2xJbmRleCwgY2VsbCwgcm93KTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAvL+ahhumAieaXtuaPkuWFpeS4jeinpuWPkWNvbnRlbnRjaGFuZ2XvvIzpnIDopoHmiYvliqjmm7TmlrDntKLlvJXjgIJcclxuXHQgICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiByb3c7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDliKDpmaTkuIDooYzljZXlhYPmoLxcclxuXHQgICAgICAgICAqIEBwYXJhbSByb3dJbmRleFxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBkZWxldGVSb3c6ZnVuY3Rpb24gKHJvd0luZGV4KSB7XHJcblx0ICAgICAgICAgICAgdmFyIHJvdyA9IHRoaXMudGFibGUucm93c1tyb3dJbmRleF0sXHJcblx0ICAgICAgICAgICAgICAgIGluZm9Sb3cgPSB0aGlzLmluZGV4VGFibGVbcm93SW5kZXhdLFxyXG5cdCAgICAgICAgICAgICAgICBjb2xzTnVtID0gdGhpcy5jb2xzTnVtLFxyXG5cdCAgICAgICAgICAgICAgICBjb3VudCA9IDA7ICAgICAvL+WkhOeQhuiuoeaVsFxyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGNvbEluZGV4ID0gMDsgY29sSW5kZXggPCBjb2xzTnVtOykge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgY2VsbEluZm8gPSBpbmZvUm93W2NvbEluZGV4XSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGwgPSB0aGlzLmdldENlbGwoY2VsbEluZm8ucm93SW5kZXgsIGNlbGxJbmZvLmNlbGxJbmRleCk7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjZWxsLnJvd1NwYW4gPiAxKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbEluZm8ucm93SW5kZXggPT0gcm93SW5kZXgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xvbmUgPSBjZWxsLmNsb25lTm9kZSh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZS5yb3dTcGFuID0gY2VsbC5yb3dTcGFuIC0gMTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjbG9uZS5pbm5lckhUTUwgPSBcIlwiO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwucm93U3BhbiA9IDE7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRSb3dJbmRleCA9IHJvd0luZGV4ICsgMSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dFJvdyA9IHRoaXMudGFibGUucm93c1tuZXh0Um93SW5kZXhdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRDZWxsSW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZU1lcmdlZCA9IHRoaXMuZ2V0UHJldmlld01lcmdlZENlbGxzTnVtKG5leHRSb3dJbmRleCwgY29sSW5kZXgpIC0gY291bnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZU1lcmdlZCA8IGNvbEluZGV4KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydENlbGxJbmRleCA9IGNvbEluZGV4IC0gcHJlTWVyZ2VkIC0gMTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZXh0Um93Lmluc2VydENlbGwoaW5zZXJ0Q2VsbEluZGV4KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuaW5zZXJ0QWZ0ZXIobmV4dFJvdy5jZWxsc1tpbnNlcnRDZWxsSW5kZXhdLCBjbG9uZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRSb3cuY2VsbHMubGVuZ3RoKSBuZXh0Um93Lmluc2VydEJlZm9yZShjbG9uZSwgbmV4dFJvdy5jZWxsc1swXSlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gMTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL2NlbGwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjZWxsKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBjb2xJbmRleCArPSBjZWxsLmNvbFNwYW4gfHwgMTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdmFyIGRlbGV0ZVRkcyA9IFtdLCBjYWNoZU1hcCA9IHt9O1xyXG5cdCAgICAgICAgICAgIGZvciAoY29sSW5kZXggPSAwOyBjb2xJbmRleCA8IGNvbHNOdW07IGNvbEluZGV4KyspIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRtcFJvd0luZGV4ID0gaW5mb1Jvd1tjb2xJbmRleF0ucm93SW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgICAgICB0bXBDZWxsSW5kZXggPSBpbmZvUm93W2NvbEluZGV4XS5jZWxsSW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgICAgICBrZXkgPSB0bXBSb3dJbmRleCArIFwiX1wiICsgdG1wQ2VsbEluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2FjaGVNYXBba2V5XSljb250aW51ZTtcclxuXHQgICAgICAgICAgICAgICAgY2FjaGVNYXBba2V5XSA9IDE7XHJcblx0ICAgICAgICAgICAgICAgIGNlbGwgPSB0aGlzLmdldENlbGwodG1wUm93SW5kZXgsIHRtcENlbGxJbmRleCk7XHJcblx0ICAgICAgICAgICAgICAgIGRlbGV0ZVRkcy5wdXNoKGNlbGwpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgbWVyZ2VUZHMgPSBbXTtcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKGRlbGV0ZVRkcywgZnVuY3Rpb24gKHRkKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0ZC5yb3dTcGFuID09IDEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRkLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGQpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWVyZ2VUZHMucHVzaCh0ZCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKG1lcmdlVGRzLCBmdW5jdGlvbiAodGQpIHtcclxuXHQgICAgICAgICAgICAgICAgdGQucm93U3Bhbi0tO1xyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIHJvdy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHJvdyk7XHJcblx0ICAgICAgICAgICAgLy/mtY/op4jlmajmlrnms5XmnKzouqvlrZjlnKhidWcs6YeH55So6Ieq5a6a5LmJ5pa55rOV5Yig6ZmkXHJcblx0ICAgICAgICAgICAgLy90aGlzLnRhYmxlLmRlbGV0ZVJvdyhyb3dJbmRleCk7XHJcblx0ICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBpbnNlcnRDb2w6ZnVuY3Rpb24gKGNvbEluZGV4LCBzb3VyY2VDZWxsLCBkZWZhdWx0VmFsdWUpIHtcclxuXHQgICAgICAgICAgICB2YXIgcm93c051bSA9IHRoaXMucm93c051bSxcclxuXHQgICAgICAgICAgICAgICAgcm93SW5kZXggPSAwLFxyXG5cdCAgICAgICAgICAgICAgICB0YWJsZVJvdywgY2VsbCxcclxuXHQgICAgICAgICAgICAgICAgYmFja1dpZHRoID0gcGFyc2VJbnQoKHRoaXMudGFibGUub2Zmc2V0V2lkdGggLSAodGhpcy5jb2xzTnVtICsgMSkgKiAyMCAtICh0aGlzLmNvbHNOdW0gKyAxKSkgLyAodGhpcy5jb2xzTnVtICsgMSksIDEwKSxcclxuXHQgICAgICAgICAgICAgICAgaXNJbnNlcnRUaXRsZUNvbCA9IHR5cGVvZiBzb3VyY2VDZWxsID09ICdzdHJpbmcnICYmIHNvdXJjZUNlbGwudG9VcHBlckNhc2UoKSA9PSAnVEgnO1xyXG5cclxuXHQgICAgICAgICAgICBmdW5jdGlvbiByZXBsYWNlVGRUb1RoKHJvd0luZGV4LCBjZWxsLCB0YWJsZVJvdykge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAocm93SW5kZXggPT0gMCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRoID0gY2VsbC5uZXh0U2libGluZyB8fCBjZWxsLnByZXZpb3VzU2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0aC50YWdOYW1lID09ICdUSCcpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aCA9IGNlbGwub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGhcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGguYXBwZW5kQ2hpbGQoY2VsbC5maXJzdENoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVJvdy5pbnNlcnRCZWZvcmUodGgsIGNlbGwpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShjZWxsKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsLnRhZ05hbWUgPT0gJ1RIJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZCA9IGNlbGwub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGQuYXBwZW5kQ2hpbGQoY2VsbC5maXJzdENoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZVJvdy5pbnNlcnRCZWZvcmUodGQsIGNlbGwpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShjZWxsKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB2YXIgcHJlQ2VsbDtcclxuXHQgICAgICAgICAgICBpZiAoY29sSW5kZXggPT0gMCB8fCBjb2xJbmRleCA9PSB0aGlzLmNvbHNOdW0pIHtcclxuXHQgICAgICAgICAgICAgICAgZm9yICg7IHJvd0luZGV4IDwgcm93c051bTsgcm93SW5kZXgrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGFibGVSb3cgPSB0aGlzLnRhYmxlLnJvd3Nbcm93SW5kZXhdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcHJlQ2VsbCA9IHRhYmxlUm93LmNlbGxzW2NvbEluZGV4ID09IDAgPyBjb2xJbmRleCA6IHRhYmxlUm93LmNlbGxzLmxlbmd0aF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBjZWxsID0gdGhpcy5jbG9uZUNlbGwoc291cmNlQ2VsbCwgdHJ1ZSk7IC8vdGFibGVSb3cuaW5zZXJ0Q2VsbChjb2xJbmRleCA9PSAwID8gY29sSW5kZXggOiB0YWJsZVJvdy5jZWxscy5sZW5ndGgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDZWxsQ29udGVudChjZWxsKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGwuc2V0QXR0cmlidXRlKCd2QWxpZ24nLCBjZWxsLmdldEF0dHJpYnV0ZSgndkFsaWduJykpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcHJlQ2VsbCAmJiBjZWxsLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBwcmVDZWxsLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbEluZGV4KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVSb3cuaW5zZXJ0QmVmb3JlKGNlbGwsIHRhYmxlUm93LmNlbGxzWzBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuaW5zZXJ0QWZ0ZXIodGFibGVSb3cuY2VsbHNbdGFibGVSb3cuY2VsbHMubGVuZ3RoIC0gMV0sIGNlbGwpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoIWlzSW5zZXJ0VGl0bGVDb2wpIHJlcGxhY2VUZFRvVGgocm93SW5kZXgsIGNlbGwsIHRhYmxlUm93KVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgZm9yICg7IHJvd0luZGV4IDwgcm93c051bTsgcm93SW5kZXgrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNlbGxJbmZvID0gdGhpcy5pbmRleFRhYmxlW3Jvd0luZGV4XVtjb2xJbmRleF07XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbEluZm8uY29sSW5kZXggPCBjb2xJbmRleCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwgPSB0aGlzLmdldENlbGwoY2VsbEluZm8ucm93SW5kZXgsIGNlbGxJbmZvLmNlbGxJbmRleCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5jb2xTcGFuID0gY2VsbEluZm8uY29sU3BhbiArIDE7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlUm93ID0gdGhpcy50YWJsZS5yb3dzW3Jvd0luZGV4XTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwcmVDZWxsID0gdGFibGVSb3cuY2VsbHNbY2VsbEluZm8uY2VsbEluZGV4XTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2VsbCA9IHRoaXMuY2xvbmVDZWxsKHNvdXJjZUNlbGwsIHRydWUpOy8vdGFibGVSb3cuaW5zZXJ0Q2VsbChjZWxsSW5mby5jZWxsSW5kZXgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2VsbENvbnRlbnQoY2VsbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoJ3ZBbGlnbicsIGNlbGwuZ2V0QXR0cmlidXRlKCd2QWxpZ24nKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcHJlQ2VsbCAmJiBjZWxsLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBwcmVDZWxsLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy/pmLLmraJJReS4i+aKpemUmVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHByZUNlbGwgPyB0YWJsZVJvdy5pbnNlcnRCZWZvcmUoY2VsbCwgcHJlQ2VsbCkgOiB0YWJsZVJvdy5hcHBlbmRDaGlsZChjZWxsKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKCFpc0luc2VydFRpdGxlQ29sKSByZXBsYWNlVGRUb1RoKHJvd0luZGV4LCBjZWxsLCB0YWJsZVJvdyk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgLy/moYbpgInml7bmj5LlhaXkuI3op6blj5Fjb250ZW50Y2hhbmdl77yM6ZyA6KaB5omL5Yqo5pu05paw57Si5byVXHJcblx0ICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHQgICAgICAgICAgICB0aGlzLnVwZGF0ZVdpZHRoKGJhY2tXaWR0aCwgZGVmYXVsdFZhbHVlIHx8IHt0ZFBhZGRpbmc6MTAsIHRkQm9yZGVyOjF9KTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICB1cGRhdGVXaWR0aDpmdW5jdGlvbiAod2lkdGgsIGRlZmF1bHRWYWx1ZSkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZSA9IHRoaXMudGFibGUsXHJcblx0ICAgICAgICAgICAgICAgIHRtcFdpZHRoID0gVUVUYWJsZS5nZXRXaWR0aCh0YWJsZSkgLSBkZWZhdWx0VmFsdWUudGRQYWRkaW5nICogMiAtIGRlZmF1bHRWYWx1ZS50ZEJvcmRlciArIHdpZHRoO1xyXG5cdCAgICAgICAgICAgIGlmICh0bXBXaWR0aCA8IHRhYmxlLm93bmVyRG9jdW1lbnQuYm9keS5vZmZzZXRXaWR0aCkge1xyXG5cdCAgICAgICAgICAgICAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB0bXBXaWR0aCk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdmFyIHRkcyA9IGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRoaXMudGFibGUsIFwidGQgdGhcIik7XHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaCh0ZHMsIGZ1bmN0aW9uICh0ZCkge1xyXG5cdCAgICAgICAgICAgICAgICB0ZC5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB3aWR0aCk7XHJcblx0ICAgICAgICAgICAgfSlcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBkZWxldGVDb2w6ZnVuY3Rpb24gKGNvbEluZGV4KSB7XHJcblx0ICAgICAgICAgICAgdmFyIGluZGV4VGFibGUgPSB0aGlzLmluZGV4VGFibGUsXHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlUm93cyA9IHRoaXMudGFibGUucm93cyxcclxuXHQgICAgICAgICAgICAgICAgYmFja1RhYmxlV2lkdGggPSB0aGlzLnRhYmxlLmdldEF0dHJpYnV0ZShcIndpZHRoXCIpLFxyXG5cdCAgICAgICAgICAgICAgICBiYWNrVGRXaWR0aCA9IDAsXHJcblx0ICAgICAgICAgICAgICAgIHJvd3NOdW0gPSB0aGlzLnJvd3NOdW0sXHJcblx0ICAgICAgICAgICAgICAgIGNhY2hlTWFwID0ge307XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgcm93SW5kZXggPSAwOyByb3dJbmRleCA8IHJvd3NOdW07KSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBpbmZvUm93ID0gaW5kZXhUYWJsZVtyb3dJbmRleF0sXHJcblx0ICAgICAgICAgICAgICAgICAgICBjZWxsSW5mbyA9IGluZm9Sb3dbY29sSW5kZXhdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAga2V5ID0gY2VsbEluZm8ucm93SW5kZXggKyAnXycgKyBjZWxsSW5mby5jb2xJbmRleDtcclxuXHQgICAgICAgICAgICAgICAgLy8g6Lez6L+H5bey57uP5aSE55CG6L+H55qEQ2VsbFxyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2FjaGVNYXBba2V5XSljb250aW51ZTtcclxuXHQgICAgICAgICAgICAgICAgY2FjaGVNYXBba2V5XSA9IDE7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjZWxsID0gdGhpcy5nZXRDZWxsKGNlbGxJbmZvLnJvd0luZGV4LCBjZWxsSW5mby5jZWxsSW5kZXgpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIWJhY2tUZFdpZHRoKSBiYWNrVGRXaWR0aCA9IGNlbGwgJiYgcGFyc2VJbnQoY2VsbC5vZmZzZXRXaWR0aCAvIGNlbGwuY29sU3BhbiwgMTApLnRvRml4ZWQoMCk7XHJcblx0ICAgICAgICAgICAgICAgIC8vIOWmguaenENlbGznmoRjb2xTcGFu5aSn5LqOMSwg5bCx5L+u5pS5Y29sU3Bhbiwg5ZCm5YiZ5bCx5Yig5o6J6L+Z5LiqQ2VsbFxyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2VsbC5jb2xTcGFuID4gMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2VsbC5jb2xTcGFuLS07XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0YWJsZVJvd3Nbcm93SW5kZXhdLmRlbGV0ZUNlbGwoY2VsbEluZm8uY2VsbEluZGV4KTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByb3dJbmRleCArPSBjZWxsSW5mby5yb3dTcGFuIHx8IDE7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMudGFibGUuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgYmFja1RhYmxlV2lkdGggLSBiYWNrVGRXaWR0aCk7XHJcblx0ICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzcGxpdFRvQ2VsbHM6ZnVuY3Rpb24gKGNlbGwpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICBjZWxscyA9IHRoaXMuc3BsaXRUb1Jvd3MoY2VsbCk7XHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaChjZWxscywgZnVuY3Rpb24gKGNlbGwpIHtcclxuXHQgICAgICAgICAgICAgICAgbWUuc3BsaXRUb0NvbHMoY2VsbCk7XHJcblx0ICAgICAgICAgICAgfSlcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzcGxpdFRvUm93czpmdW5jdGlvbiAoY2VsbCkge1xyXG5cdCAgICAgICAgICAgIHZhciBjZWxsSW5mbyA9IHRoaXMuZ2V0Q2VsbEluZm8oY2VsbCksXHJcblx0ICAgICAgICAgICAgICAgIHJvd0luZGV4ID0gY2VsbEluZm8ucm93SW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgIGNvbEluZGV4ID0gY2VsbEluZm8uY29sSW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcclxuXHQgICAgICAgICAgICAvLyDkv67mlLlDZWxs55qEcm93U3BhblxyXG5cdCAgICAgICAgICAgIGNlbGwucm93U3BhbiA9IDE7XHJcblx0ICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGNlbGwpO1xyXG5cdCAgICAgICAgICAgIC8vIOihpem9kOWNleWFg+agvFxyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSByb3dJbmRleCwgZW5kUm93ID0gcm93SW5kZXggKyBjZWxsSW5mby5yb3dTcGFuOyBpIDwgZW5kUm93OyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGkgPT0gcm93SW5kZXgpY29udGludWU7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB0YWJsZVJvdyA9IHRoaXMudGFibGUucm93c1tpXSxcclxuXHQgICAgICAgICAgICAgICAgICAgIHRtcENlbGwgPSB0YWJsZVJvdy5pbnNlcnRDZWxsKGNvbEluZGV4IC0gdGhpcy5nZXRQcmV2aWV3TWVyZ2VkQ2VsbHNOdW0oaSwgY29sSW5kZXgpKTtcclxuXHQgICAgICAgICAgICAgICAgdG1wQ2VsbC5jb2xTcGFuID0gY2VsbEluZm8uY29sU3BhbjtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zZXRDZWxsQ29udGVudCh0bXBDZWxsKTtcclxuXHQgICAgICAgICAgICAgICAgdG1wQ2VsbC5zZXRBdHRyaWJ1dGUoJ3ZBbGlnbicsIGNlbGwuZ2V0QXR0cmlidXRlKCd2QWxpZ24nKSk7XHJcblx0ICAgICAgICAgICAgICAgIHRtcENlbGwuc2V0QXR0cmlidXRlKCdhbGlnbicsIGNlbGwuZ2V0QXR0cmlidXRlKCdhbGlnbicpKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNlbGwuc3R5bGUuY3NzVGV4dCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wQ2VsbC5zdHlsZS5jc3NUZXh0ID0gY2VsbC5zdHlsZS5jc3NUZXh0O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaCh0bXBDZWxsKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuXHQgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRQcmV2aWV3TWVyZ2VkQ2VsbHNOdW06ZnVuY3Rpb24gKHJvd0luZGV4LCBjb2xJbmRleCkge1xyXG5cdCAgICAgICAgICAgIHZhciBpbmRleFJvdyA9IHRoaXMuaW5kZXhUYWJsZVtyb3dJbmRleF0sXHJcblx0ICAgICAgICAgICAgICAgIG51bSA9IDA7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xJbmRleDspIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGNvbFNwYW4gPSBpbmRleFJvd1tpXS5jb2xTcGFuLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wUm93SW5kZXggPSBpbmRleFJvd1tpXS5yb3dJbmRleDtcclxuXHQgICAgICAgICAgICAgICAgbnVtICs9IChjb2xTcGFuIC0gKHRtcFJvd0luZGV4ID09IHJvd0luZGV4ID8gMSA6IDApKTtcclxuXHQgICAgICAgICAgICAgICAgaSArPSBjb2xTcGFuO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gbnVtO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNwbGl0VG9Db2xzOmZ1bmN0aW9uIChjZWxsKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGJhY2tXaWR0aCA9IChjZWxsLm9mZnNldFdpZHRoIC8gY2VsbC5jb2xTcGFuIC0gMjIpLnRvRml4ZWQoMCksXHJcblxyXG5cdCAgICAgICAgICAgICAgICBjZWxsSW5mbyA9IHRoaXMuZ2V0Q2VsbEluZm8oY2VsbCksXHJcblx0ICAgICAgICAgICAgICAgIHJvd0luZGV4ID0gY2VsbEluZm8ucm93SW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgIGNvbEluZGV4ID0gY2VsbEluZm8uY29sSW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcclxuXHQgICAgICAgICAgICAvLyDkv67mlLlDZWxs55qEcm93U3BhblxyXG5cdCAgICAgICAgICAgIGNlbGwuY29sU3BhbiA9IDE7XHJcblx0ICAgICAgICAgICAgY2VsbC5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBiYWNrV2lkdGgpO1xyXG5cdCAgICAgICAgICAgIHJlc3VsdHMucHVzaChjZWxsKTtcclxuXHQgICAgICAgICAgICAvLyDooaXpvZDljZXlhYPmoLxcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBqID0gY29sSW5kZXgsIGVuZENvbCA9IGNvbEluZGV4ICsgY2VsbEluZm8uY29sU3BhbjsgaiA8IGVuZENvbDsgaisrKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChqID09IGNvbEluZGV4KWNvbnRpbnVlO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgdGFibGVSb3cgPSB0aGlzLnRhYmxlLnJvd3Nbcm93SW5kZXhdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wQ2VsbCA9IHRhYmxlUm93Lmluc2VydENlbGwodGhpcy5pbmRleFRhYmxlW3Jvd0luZGV4XVtqXS5jZWxsSW5kZXggKyAxKTtcclxuXHQgICAgICAgICAgICAgICAgdG1wQ2VsbC5yb3dTcGFuID0gY2VsbEluZm8ucm93U3BhbjtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zZXRDZWxsQ29udGVudCh0bXBDZWxsKTtcclxuXHQgICAgICAgICAgICAgICAgdG1wQ2VsbC5zZXRBdHRyaWJ1dGUoJ3ZBbGlnbicsIGNlbGwuZ2V0QXR0cmlidXRlKCd2QWxpZ24nKSk7XHJcblx0ICAgICAgICAgICAgICAgIHRtcENlbGwuc2V0QXR0cmlidXRlKCdhbGlnbicsIGNlbGwuZ2V0QXR0cmlidXRlKCdhbGlnbicpKTtcclxuXHQgICAgICAgICAgICAgICAgdG1wQ2VsbC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYmFja1dpZHRoKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNlbGwuc3R5bGUuY3NzVGV4dCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdG1wQ2VsbC5zdHlsZS5jc3NUZXh0ID0gY2VsbC5zdHlsZS5jc3NUZXh0O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIC8v5aSE55CGdGjnmoTmg4XlhrVcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNlbGwudGFnTmFtZSA9PSAnVEgnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdGggPSBjZWxsLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGgnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoLmFwcGVuZENoaWxkKHRtcENlbGwuZmlyc3RDaGlsZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aC5zZXRBdHRyaWJ1dGUoJ3ZBbGlnbicsIGNlbGwuZ2V0QXR0cmlidXRlKCd2QWxpZ24nKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aC5yb3dTcGFuID0gdG1wQ2VsbC5yb3dTcGFuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGFibGVSb3cuaW5zZXJ0QmVmb3JlKHRoLCB0bXBDZWxsKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSh0bXBDZWxsKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2godG1wQ2VsbCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHM7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgaXNMYXN0Q2VsbDpmdW5jdGlvbiAoY2VsbCwgcm93c051bSwgY29sc051bSkge1xyXG5cdCAgICAgICAgICAgIHJvd3NOdW0gPSByb3dzTnVtIHx8IHRoaXMucm93c051bTtcclxuXHQgICAgICAgICAgICBjb2xzTnVtID0gY29sc051bSB8fCB0aGlzLmNvbHNOdW07XHJcblx0ICAgICAgICAgICAgdmFyIGNlbGxJbmZvID0gdGhpcy5nZXRDZWxsSW5mbyhjZWxsKTtcclxuXHQgICAgICAgICAgICByZXR1cm4gKChjZWxsSW5mby5yb3dJbmRleCArIGNlbGxJbmZvLnJvd1NwYW4pID09IHJvd3NOdW0pICYmXHJcblx0ICAgICAgICAgICAgICAgICgoY2VsbEluZm8uY29sSW5kZXggKyBjZWxsSW5mby5jb2xTcGFuKSA9PSBjb2xzTnVtKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRMYXN0Q2VsbDpmdW5jdGlvbiAoY2VsbHMpIHtcclxuXHQgICAgICAgICAgICBjZWxscyA9IGNlbGxzIHx8IHRoaXMudGFibGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZFwiKTtcclxuXHQgICAgICAgICAgICB2YXIgZmlyc3RJbmZvID0gdGhpcy5nZXRDZWxsSW5mbyhjZWxsc1swXSk7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcywgbGFzdCA9IGNlbGxzWzBdLFxyXG5cdCAgICAgICAgICAgICAgICB0ciA9IGxhc3QucGFyZW50Tm9kZSxcclxuXHQgICAgICAgICAgICAgICAgY2VsbHNOdW0gPSAwLCBjb2xzID0gMCwgcm93cztcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKGNlbGxzLCBmdW5jdGlvbiAoY2VsbCkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2VsbC5wYXJlbnROb2RlID09IHRyKWNvbHMgKz0gY2VsbC5jb2xTcGFuIHx8IDE7XHJcblx0ICAgICAgICAgICAgICAgIGNlbGxzTnVtICs9IGNlbGwucm93U3BhbiAqIGNlbGwuY29sU3BhbiB8fCAxO1xyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIHJvd3MgPSBjZWxsc051bSAvIGNvbHM7XHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaChjZWxscywgZnVuY3Rpb24gKGNlbGwpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG1lLmlzTGFzdENlbGwoY2VsbCwgcm93cywgY29scykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBjZWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGxhc3Q7XHJcblxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNlbGVjdFJvdzpmdW5jdGlvbiAocm93SW5kZXgpIHtcclxuXHQgICAgICAgICAgICB2YXIgaW5kZXhSb3cgPSB0aGlzLmluZGV4VGFibGVbcm93SW5kZXhdLFxyXG5cdCAgICAgICAgICAgICAgICBzdGFydCA9IHRoaXMuZ2V0Q2VsbChpbmRleFJvd1swXS5yb3dJbmRleCwgaW5kZXhSb3dbMF0uY2VsbEluZGV4KSxcclxuXHQgICAgICAgICAgICAgICAgZW5kID0gdGhpcy5nZXRDZWxsKGluZGV4Um93W3RoaXMuY29sc051bSAtIDFdLnJvd0luZGV4LCBpbmRleFJvd1t0aGlzLmNvbHNOdW0gLSAxXS5jZWxsSW5kZXgpLFxyXG5cdCAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuZ2V0Q2VsbHNSYW5nZShzdGFydCwgZW5kKTtcclxuXHQgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkKHJhbmdlKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzZWxlY3RUYWJsZTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRkcyA9IHRoaXMudGFibGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZFwiKSxcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLmdldENlbGxzUmFuZ2UodGRzWzBdLCB0ZHNbdGRzLmxlbmd0aCAtIDFdKTtcclxuXHQgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkKHJhbmdlKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzZXRCYWNrZ3JvdW5kOmZ1bmN0aW9uIChjZWxscywgdmFsdWUpIHtcclxuXHQgICAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XHJcblx0ICAgICAgICAgICAgICAgIHV0aWxzLmVhY2goY2VsbHMsIGZ1bmN0aW9uIChjZWxsKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gdXRpbHMuZXh0ZW5kKHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJlcGVhdDp0cnVlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgY29sb3JMaXN0OltcIiNkZGRcIiwgXCIjZmZmXCJdXHJcblx0ICAgICAgICAgICAgICAgIH0sIHZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHJvd0luZGV4ID0gdGhpcy5nZXRDZWxsSW5mbyhjZWxsc1swXSkucm93SW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgICAgICBjb3VudCA9IDAsXHJcblx0ICAgICAgICAgICAgICAgICAgICBjb2xvcnMgPSB2YWx1ZS5jb2xvckxpc3QsXHJcblx0ICAgICAgICAgICAgICAgICAgICBnZXRDb2xvciA9IGZ1bmN0aW9uIChsaXN0LCBpbmRleCwgcmVwZWF0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpc3RbaW5kZXhdID8gbGlzdFtpbmRleF0gOiByZXBlYXQgPyBsaXN0W2luZGV4ICUgbGlzdC5sZW5ndGhdIDogXCJcIjtcclxuXHQgICAgICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjZWxsOyBjZWxsID0gY2VsbHNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjZWxsSW5mbyA9IHRoaXMuZ2V0Q2VsbEluZm8oY2VsbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGdldENvbG9yKGNvbG9ycywgKChyb3dJbmRleCArIGNvdW50KSA9PSBjZWxsSW5mby5yb3dJbmRleCkgPyBjb3VudCA6ICsrY291bnQsIHZhbHVlLnJlcGVhdCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcmVtb3ZlQmFja2dyb3VuZDpmdW5jdGlvbiAoY2VsbHMpIHtcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKGNlbGxzLCBmdW5jdGlvbiAoY2VsbCkge1xyXG5cdCAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiXCI7XHJcblx0ICAgICAgICAgICAgfSlcclxuXHQgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICB9O1xyXG5cdCAgICBmdW5jdGlvbiBzaG93RXJyb3IoZSkge1xyXG5cdCAgICB9XHJcblx0fSkoKTtcclxuXHJcblx0Ly8gcGx1Z2lucy90YWJsZS5jbWRzLmpzXHJcblx0LyoqXHJcblx0ICogQ3JlYXRlZCB3aXRoIEpldEJyYWlucyBQaHBTdG9ybS5cclxuXHQgKiBVc2VyOiB0YW9xaWxpXHJcblx0ICogRGF0ZTogMTMtMi0yMFxyXG5cdCAqIFRpbWU6IOS4i+WNiDY6MjVcclxuXHQgKiBUbyBjaGFuZ2UgdGhpcyB0ZW1wbGF0ZSB1c2UgRmlsZSB8IFNldHRpbmdzIHwgRmlsZSBUZW1wbGF0ZXMuXHJcblx0ICovXHJcblx0O1xyXG5cdChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciBVVCA9IFVFLlVFVGFibGUsXHJcblx0ICAgICAgICBnZXRUYWJsZUl0ZW1zQnlSYW5nZSA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gVVQuZ2V0VGFibGVJdGVtc0J5UmFuZ2UoZWRpdG9yKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRVRVRhYmxlQnlTZWxlY3RlZCA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gVVQuZ2V0VUVUYWJsZUJ5U2VsZWN0ZWQoZWRpdG9yKVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldERlZmF1bHRWYWx1ZSA9IGZ1bmN0aW9uIChlZGl0b3IsIHRhYmxlKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIFVULmdldERlZmF1bHRWYWx1ZShlZGl0b3IsIHRhYmxlKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRVRVRhYmxlID0gZnVuY3Rpb24gKHRkT3JUYWJsZSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBVVC5nZXRVRVRhYmxlKHRkT3JUYWJsZSk7XHJcblx0ICAgICAgICB9O1xyXG5cclxuXHJcblx0ICAgIFVFLmNvbW1hbmRzWydpbnNlcnR0YWJsZSddID0ge1xyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcykudGFibGUgPyAtMSA6IDA7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjbWQsIG9wdCkge1xyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVRhYmxlKG9wdCwgdGRXaWR0aCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgaHRtbCA9IFtdLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcm93c051bSA9IG9wdC5udW1Sb3dzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgY29sc051bSA9IG9wdC5udW1Db2xzO1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IHJvd3NOdW07IHIrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaHRtbC5wdXNoKCc8dHInICsgKHIgPT0gMCA/ICcgY2xhc3M9XCJmaXJzdFJvd1wiJzonJykgKyAnPicpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYyA9IDA7IGMgPCBjb2xzTnVtOyBjKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBodG1sLnB1c2goJzx0ZCB3aWR0aD1cIicgKyB0ZFdpZHRoICsgJ1wiICB2QWxpZ249XCInICsgb3B0LnRkdmFsaWduICsgJ1wiID4nICsgKGJyb3dzZXIuaWUgJiYgYnJvd3Nlci52ZXJzaW9uIDwgMTEgPyBkb21VdGlscy5maWxsQ2hhciA6ICc8YnIvPicpICsgJzwvdGQ+JylcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGh0bWwucHVzaCgnPC90cj4nKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIC8v56aB5q2i5oyH5a6adGFibGUtd2lkdGhcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuICc8dGFibGU+PHRib2R5PicgKyBodG1sLmpvaW4oJycpICsgJzwvdGJvZHk+PC90YWJsZT4nXHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICBpZiAoIW9wdCkge1xyXG5cdCAgICAgICAgICAgICAgICBvcHQgPSB1dGlscy5leHRlbmQoe30sIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG51bUNvbHM6IHRoaXMub3B0aW9ucy5kZWZhdWx0Q29scyxcclxuXHQgICAgICAgICAgICAgICAgICAgIG51bVJvd3M6IHRoaXMub3B0aW9ucy5kZWZhdWx0Um93cyxcclxuXHQgICAgICAgICAgICAgICAgICAgIHRkdmFsaWduOiB0aGlzLm9wdGlvbnMudGR2YWxpZ25cclxuXHQgICAgICAgICAgICAgICAgfSlcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICBzdGFydCA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyLFxyXG5cdCAgICAgICAgICAgICAgICBmaXJzdFBhcmVudEJsb2NrID0gZG9tVXRpbHMuZmluZFBhcmVudChzdGFydCwgZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb21VdGlscy5pc0Jsb2NrRWxtKG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICB9LCB0cnVlKSB8fCBtZS5ib2R5O1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgZGVmYXVsdFZhbHVlID0gZ2V0RGVmYXVsdFZhbHVlKG1lKSxcclxuXHQgICAgICAgICAgICAgICAgdGFibGVXaWR0aCA9IGZpcnN0UGFyZW50QmxvY2sub2Zmc2V0V2lkdGgsXHJcblx0ICAgICAgICAgICAgICAgIHRkV2lkdGggPSBNYXRoLmZsb29yKHRhYmxlV2lkdGggLyBvcHQubnVtQ29scyAtIGRlZmF1bHRWYWx1ZS50ZFBhZGRpbmcgKiAyIC0gZGVmYXVsdFZhbHVlLnRkQm9yZGVyKTtcclxuXHJcblx0ICAgICAgICAgICAgLy90b2Rv5YW25LuW5bGe5oCnXHJcblx0ICAgICAgICAgICAgIW9wdC50ZHZhbGlnbiAmJiAob3B0LnRkdmFsaWduID0gbWUub3B0aW9ucy50ZHZhbGlnbik7XHJcblx0ICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoXCJpbnNlcnRodG1sXCIsIGNyZWF0ZVRhYmxlKG9wdCwgdGRXaWR0aCkpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgVUUuY29tbWFuZHNbJ2luc2VydHBhcmFncmFwaGJlZm9yZXRhYmxlJ10gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKS5jZWxsID8gMCA6IC0xO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcykudGFibGU7XHJcblx0ICAgICAgICAgICAgaWYgKHRhYmxlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBwID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcclxuXHQgICAgICAgICAgICAgICAgcC5pbm5lckhUTUwgPSBicm93c2VyLmllID8gJyZuYnNwOycgOiAnPGJyIC8+JztcclxuXHQgICAgICAgICAgICAgICAgdGFibGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocCwgdGFibGUpO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLnNldFN0YXJ0KHAsIDApLnNldEN1cnNvcigpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHJcblx0ICAgIFVFLmNvbW1hbmRzWydkZWxldGV0YWJsZSddID0ge1xyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgcm5nID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICByZXR1cm4gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuc3RhcnRDb250YWluZXIsICd0YWJsZScsIHRydWUpID8gMCA6IC0xO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoY21kLCB0YWJsZSkge1xyXG5cdCAgICAgICAgICAgIHZhciBybmcgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgIHRhYmxlID0gdGFibGUgfHwgZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuc3RhcnRDb250YWluZXIsICd0YWJsZScsIHRydWUpO1xyXG5cdCAgICAgICAgICAgIGlmICh0YWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IHRhYmxlLm5leHRTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIW5leHQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5leHQgPSBkb21VdGlscy5jcmVhdGVFbGVtZW50KHRoaXMuZG9jdW1lbnQsICdwJywge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICdpbm5lckhUTUwnOiBicm93c2VyLmllID8gZG9tVXRpbHMuZmlsbENoYXIgOiAnPGJyLz4nXHJcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRhYmxlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5leHQsIHRhYmxlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUodGFibGUpO1xyXG5cdCAgICAgICAgICAgICAgICBybmcgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobmV4dC5ub2RlVHlwZSA9PSAzKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuc2V0U3RhcnRCZWZvcmUobmV4dClcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJuZy5zZXRTdGFydChuZXh0LCAwKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJuZy5zZXRDdXJzb3IoZmFsc2UsIHRydWUpXHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KFwidGFibGVoYXNkZWxldGVkXCIpXHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIFVFLmNvbW1hbmRzWydjZWxsYWxpZ24nXSA9IHtcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGdldFNlbGVjdGVkQXJyKHRoaXMpLmxlbmd0aCA/IDAgOiAtMVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoY21kLCBhbGlnbikge1xyXG5cdCAgICAgICAgICAgIHZhciBzZWxlY3RlZFRkcyA9IGdldFNlbGVjdGVkQXJyKHRoaXMpO1xyXG5cdCAgICAgICAgICAgIGlmIChzZWxlY3RlZFRkcy5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHNlbGVjdGVkVGRzW2krK107KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjaS5zZXRBdHRyaWJ1dGUoJ2FsaWduJywgYWxpZ24pO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBVRS5jb21tYW5kc1snY2VsbHZhbGlnbiddID0ge1xyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gZ2V0U2VsZWN0ZWRBcnIodGhpcykubGVuZ3RoID8gMCA6IC0xO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoY21kLCB2YWxpZ24pIHtcclxuXHQgICAgICAgICAgICB2YXIgc2VsZWN0ZWRUZHMgPSBnZXRTZWxlY3RlZEFycih0aGlzKTtcclxuXHQgICAgICAgICAgICBpZiAoc2VsZWN0ZWRUZHMubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSBzZWxlY3RlZFRkc1tpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2kuc2V0QXR0cmlidXRlKCd2QWxpZ24nLCB2YWxpZ24pO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBVRS5jb21tYW5kc1snaW5zZXJ0Y2FwdGlvbiddID0ge1xyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgdGFibGUgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKS50YWJsZTtcclxuXHQgICAgICAgICAgICBpZiAodGFibGUpIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRhYmxlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdjYXB0aW9uJykubGVuZ3RoID09IDAgPyAxIDogLTE7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiAtMTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZSA9IGdldFRhYmxlSXRlbXNCeVJhbmdlKHRoaXMpLnRhYmxlO1xyXG5cdCAgICAgICAgICAgIGlmICh0YWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgY2FwdGlvbiA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FwdGlvbicpO1xyXG5cdCAgICAgICAgICAgICAgICBjYXB0aW9uLmlubmVySFRNTCA9IGJyb3dzZXIuaWUgPyBkb21VdGlscy5maWxsQ2hhciA6ICc8YnIvPic7XHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlLmluc2VydEJlZm9yZShjYXB0aW9uLCB0YWJsZS5maXJzdENoaWxkKTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoY2FwdGlvbiwgMCkuc2V0Q3Vyc29yKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgVUUuY29tbWFuZHNbJ2RlbGV0ZWNhcHRpb24nXSA9IHtcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHJuZyA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuc3RhcnRDb250YWluZXIsICd0YWJsZScpO1xyXG5cdCAgICAgICAgICAgIGlmICh0YWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGFibGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2NhcHRpb24nKS5sZW5ndGggPT0gMCA/IC0xIDogMTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHJuZyA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuc3RhcnRDb250YWluZXIsICd0YWJsZScpO1xyXG5cdCAgICAgICAgICAgIGlmICh0YWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUodGFibGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2NhcHRpb24nKVswXSk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHRhYmxlLnJvd3NbMF0uY2VsbHNbMF0sIDApLnNldEN1cnNvcigpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIFVFLmNvbW1hbmRzWydpbnNlcnR0aXRsZSddID0ge1xyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgdGFibGUgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKS50YWJsZTtcclxuXHQgICAgICAgICAgICBpZiAodGFibGUpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGZpcnN0Um93ID0gdGFibGUucm93c1swXTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZpcnN0Um93LmNlbGxzW2ZpcnN0Um93LmNlbGxzLmxlbmd0aC0xXS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT0gJ3RoJyA/IDAgOiAtMVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gLTE7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgdGFibGUgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKS50YWJsZTtcclxuXHQgICAgICAgICAgICBpZiAodGFibGUpIHtcclxuXHQgICAgICAgICAgICAgICAgZ2V0VUVUYWJsZSh0YWJsZSkuaW5zZXJ0Um93KDAsICd0aCcpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgdGggPSB0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGgnKVswXTtcclxuXHQgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLnNldFN0YXJ0KHRoLCAwKS5zZXRDdXJzb3IoZmFsc2UsIHRydWUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBVRS5jb21tYW5kc1snZGVsZXRldGl0bGUnXSA9IHtcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcykudGFibGU7XHJcblx0ICAgICAgICAgICAgaWYgKHRhYmxlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBmaXJzdFJvdyA9IHRhYmxlLnJvd3NbMF07XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmaXJzdFJvdy5jZWxsc1tmaXJzdFJvdy5jZWxscy5sZW5ndGgtMV0udGFnTmFtZS50b0xvd2VyQ2FzZSgpID09ICd0aCcgPyAwIDogLTFcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcykudGFibGU7XHJcblx0ICAgICAgICAgICAgaWYgKHRhYmxlKSB7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSh0YWJsZS5yb3dzWzBdKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgdGQgPSB0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGQnKVswXTtcclxuXHQgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLnNldFN0YXJ0KHRkLCAwKS5zZXRDdXJzb3IoZmFsc2UsIHRydWUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBVRS5jb21tYW5kc1snaW5zZXJ0dGl0bGVjb2wnXSA9IHtcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcykudGFibGU7XHJcblx0ICAgICAgICAgICAgaWYgKHRhYmxlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBsYXN0Um93ID0gdGFibGUucm93c1t0YWJsZS5yb3dzLmxlbmd0aC0xXTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGxhc3RSb3cuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RoJykubGVuZ3RoID8gLTEgOiAwO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gLTE7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjbWQpIHtcclxuXHQgICAgICAgICAgICB2YXIgdGFibGUgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKS50YWJsZTtcclxuXHQgICAgICAgICAgICBpZiAodGFibGUpIHtcclxuXHQgICAgICAgICAgICAgICAgZ2V0VUVUYWJsZSh0YWJsZSkuaW5zZXJ0Q29sKDAsICd0aCcpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXNldFRkV2lkdGgodGFibGUsIHRoaXMpO1xyXG5cdCAgICAgICAgICAgIHZhciB0aCA9IHRhYmxlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0aCcpWzBdO1xyXG5cdCAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCkuc2V0U3RhcnQodGgsIDApLnNldEN1cnNvcihmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIFVFLmNvbW1hbmRzWydkZWxldGV0aXRsZWNvbCddID0ge1xyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgdGFibGUgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKS50YWJsZTtcclxuXHQgICAgICAgICAgICBpZiAodGFibGUpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGxhc3RSb3cgPSB0YWJsZS5yb3dzW3RhYmxlLnJvd3MubGVuZ3RoLTFdO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbGFzdFJvdy5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGgnKS5sZW5ndGggPyAwIDogLTE7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiAtMTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZSA9IGdldFRhYmxlSXRlbXNCeVJhbmdlKHRoaXMpLnRhYmxlO1xyXG5cdCAgICAgICAgICAgIGlmICh0YWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpPCB0YWJsZS5yb3dzLmxlbmd0aDsgaSsrICl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUodGFibGUucm93c1tpXS5jaGlsZHJlblswXSlcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXNldFRkV2lkdGgodGFibGUsIHRoaXMpO1xyXG5cdCAgICAgICAgICAgIHZhciB0ZCA9IHRhYmxlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZCcpWzBdO1xyXG5cdCAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCkuc2V0U3RhcnQodGQsIDApLnNldEN1cnNvcihmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICBVRS5jb21tYW5kc1tcIm1lcmdlcmlnaHRcIl0gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKGNtZCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZUl0ZW1zID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcyksXHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlID0gdGFibGVJdGVtcy50YWJsZSxcclxuXHQgICAgICAgICAgICAgICAgY2VsbCA9IHRhYmxlSXRlbXMuY2VsbDtcclxuXHJcblx0ICAgICAgICAgICAgaWYgKCF0YWJsZSB8fCAhY2VsbCkgcmV0dXJuIC0xO1xyXG5cdCAgICAgICAgICAgIHZhciB1dCA9IGdldFVFVGFibGUodGFibGUpO1xyXG5cdCAgICAgICAgICAgIGlmICh1dC5zZWxlY3RlZFRkcy5sZW5ndGgpIHJldHVybiAtMTtcclxuXHJcblx0ICAgICAgICAgICAgdmFyIGNlbGxJbmZvID0gdXQuZ2V0Q2VsbEluZm8oY2VsbCksXHJcblx0ICAgICAgICAgICAgICAgIHJpZ2h0Q29sSW5kZXggPSBjZWxsSW5mby5jb2xJbmRleCArIGNlbGxJbmZvLmNvbFNwYW47XHJcblx0ICAgICAgICAgICAgaWYgKHJpZ2h0Q29sSW5kZXggPj0gdXQuY29sc051bSkgcmV0dXJuIC0xOyAvLyDlpoLmnpzlpITkuo7mnIDlj7PovrnliJnkuI3og73lkJHlj7PlkIjlubZcclxuXHJcblx0ICAgICAgICAgICAgdmFyIHJpZ2h0Q2VsbEluZm8gPSB1dC5pbmRleFRhYmxlW2NlbGxJbmZvLnJvd0luZGV4XVtyaWdodENvbEluZGV4XSxcclxuXHQgICAgICAgICAgICAgICAgcmlnaHRDZWxsID0gdGFibGUucm93c1tyaWdodENlbGxJbmZvLnJvd0luZGV4XS5jZWxsc1tyaWdodENlbGxJbmZvLmNlbGxJbmRleF07XHJcblx0ICAgICAgICAgICAgaWYgKCFyaWdodENlbGwgfHwgY2VsbC50YWdOYW1lICE9IHJpZ2h0Q2VsbC50YWdOYW1lKSByZXR1cm4gLTE7IC8vIFRI5ZKMVETkuI3og73nm7jkupLlkIjlubZcclxuXHJcblx0ICAgICAgICAgICAgLy8g5b2T5LiU5LuF5b2T5Lik5LiqQ2VsbOeahOW8gOWni+WIl+WPt+WSjOe7k+adn+WIl+WPt+S4gOiHtOaXtuiDvei/m+ihjOWQiOW5tlxyXG5cdCAgICAgICAgICAgIHJldHVybiAocmlnaHRDZWxsSW5mby5yb3dJbmRleCA9PSBjZWxsSW5mby5yb3dJbmRleCAmJiByaWdodENlbGxJbmZvLnJvd1NwYW4gPT0gY2VsbEluZm8ucm93U3BhbikgPyAwIDogLTE7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjbWQpIHtcclxuXHQgICAgICAgICAgICB2YXIgcm5nID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICAgICAgYmsgPSBybmcuY3JlYXRlQm9va21hcmsodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgdmFyIGNlbGwgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKS5jZWxsLFxyXG5cdCAgICAgICAgICAgICAgICB1dCA9IGdldFVFVGFibGUoY2VsbCk7XHJcblx0ICAgICAgICAgICAgdXQubWVyZ2VSaWdodChjZWxsKTtcclxuXHQgICAgICAgICAgICBybmcubW92ZVRvQm9va21hcmsoYmspLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBVRS5jb21tYW5kc1tcIm1lcmdlZG93blwiXSA9IHtcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoY21kKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlSXRlbXMgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKSxcclxuXHQgICAgICAgICAgICAgICAgdGFibGUgPSB0YWJsZUl0ZW1zLnRhYmxlLFxyXG5cdCAgICAgICAgICAgICAgICBjZWxsID0gdGFibGVJdGVtcy5jZWxsO1xyXG5cclxuXHQgICAgICAgICAgICBpZiAoIXRhYmxlIHx8ICFjZWxsKSByZXR1cm4gLTE7XHJcblx0ICAgICAgICAgICAgdmFyIHV0ID0gZ2V0VUVUYWJsZSh0YWJsZSk7XHJcblx0ICAgICAgICAgICAgaWYgKHV0LnNlbGVjdGVkVGRzLmxlbmd0aClyZXR1cm4gLTE7XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBjZWxsSW5mbyA9IHV0LmdldENlbGxJbmZvKGNlbGwpLFxyXG5cdCAgICAgICAgICAgICAgICBkb3duUm93SW5kZXggPSBjZWxsSW5mby5yb3dJbmRleCArIGNlbGxJbmZvLnJvd1NwYW47XHJcblx0ICAgICAgICAgICAgaWYgKGRvd25Sb3dJbmRleCA+PSB1dC5yb3dzTnVtKSByZXR1cm4gLTE7IC8vIOWmguaenOWkhOS6juacgOS4i+i+ueWImeS4jeiDveWQkeS4i+WQiOW5tlxyXG5cclxuXHQgICAgICAgICAgICB2YXIgZG93bkNlbGxJbmZvID0gdXQuaW5kZXhUYWJsZVtkb3duUm93SW5kZXhdW2NlbGxJbmZvLmNvbEluZGV4XSxcclxuXHQgICAgICAgICAgICAgICAgZG93bkNlbGwgPSB0YWJsZS5yb3dzW2Rvd25DZWxsSW5mby5yb3dJbmRleF0uY2VsbHNbZG93bkNlbGxJbmZvLmNlbGxJbmRleF07XHJcblx0ICAgICAgICAgICAgaWYgKCFkb3duQ2VsbCB8fCBjZWxsLnRhZ05hbWUgIT0gZG93bkNlbGwudGFnTmFtZSkgcmV0dXJuIC0xOyAvLyBUSOWSjFRE5LiN6IO955u45LqS5ZCI5bm2XHJcblxyXG5cdCAgICAgICAgICAgIC8vIOW9k+S4lOS7heW9k+S4pOS4qkNlbGznmoTlvIDlp4vliJflj7flkoznu5PmnZ/liJflj7fkuIDoh7Tml7bog73ov5vooYzlkIjlubZcclxuXHQgICAgICAgICAgICByZXR1cm4gKGRvd25DZWxsSW5mby5jb2xJbmRleCA9PSBjZWxsSW5mby5jb2xJbmRleCAmJiBkb3duQ2VsbEluZm8uY29sU3BhbiA9PSBjZWxsSW5mby5jb2xTcGFuKSA/IDAgOiAtMTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBybmcgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICBiayA9IHJuZy5jcmVhdGVCb29rbWFyayh0cnVlKTtcclxuXHQgICAgICAgICAgICB2YXIgY2VsbCA9IGdldFRhYmxlSXRlbXNCeVJhbmdlKHRoaXMpLmNlbGwsXHJcblx0ICAgICAgICAgICAgICAgIHV0ID0gZ2V0VUVUYWJsZShjZWxsKTtcclxuXHQgICAgICAgICAgICB1dC5tZXJnZURvd24oY2VsbCk7XHJcblx0ICAgICAgICAgICAgcm5nLm1vdmVUb0Jvb2ttYXJrKGJrKS5zZWxlY3QoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgVUUuY29tbWFuZHNbXCJtZXJnZWNlbGxzXCJdID0ge1xyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gZ2V0VUVUYWJsZUJ5U2VsZWN0ZWQodGhpcykgPyAwIDogLTE7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgdXQgPSBnZXRVRVRhYmxlQnlTZWxlY3RlZCh0aGlzKTtcclxuXHQgICAgICAgICAgICBpZiAodXQgJiYgdXQuc2VsZWN0ZWRUZHMubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjZWxsID0gdXQuc2VsZWN0ZWRUZHNbMF07XHJcblx0ICAgICAgICAgICAgICAgIHV0Lm1lcmdlUmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHJuZyA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5pc0VtcHR5QmxvY2soY2VsbCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJuZy5zZXRTdGFydChjZWxsLCAwKS5jb2xsYXBzZSh0cnVlKVxyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcm5nLnNlbGVjdE5vZGVDb250ZW50cyhjZWxsKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJuZy5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgVUUuY29tbWFuZHNbXCJpbnNlcnRyb3dcIl0gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZUl0ZW1zID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcyksXHJcblx0ICAgICAgICAgICAgICAgIGNlbGwgPSB0YWJsZUl0ZW1zLmNlbGw7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGNlbGwgJiYgKGNlbGwudGFnTmFtZSA9PSBcIlREXCIgfHwgKGNlbGwudGFnTmFtZSA9PSAnVEgnICYmIHRhYmxlSXRlbXMudHIgIT09IHRhYmxlSXRlbXMudGFibGUucm93c1swXSkpICYmXHJcblx0ICAgICAgICAgICAgICAgIGdldFVFVGFibGUodGFibGVJdGVtcy50YWJsZSkucm93c051bSA8IHRoaXMub3B0aW9ucy5tYXhSb3dOdW0gPyAwIDogLTE7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgcm5nID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICAgICAgYmsgPSBybmcuY3JlYXRlQm9va21hcmsodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlSXRlbXMgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKSxcclxuXHQgICAgICAgICAgICAgICAgY2VsbCA9IHRhYmxlSXRlbXMuY2VsbCxcclxuXHQgICAgICAgICAgICAgICAgdGFibGUgPSB0YWJsZUl0ZW1zLnRhYmxlLFxyXG5cdCAgICAgICAgICAgICAgICB1dCA9IGdldFVFVGFibGUodGFibGUpLFxyXG5cdCAgICAgICAgICAgICAgICBjZWxsSW5mbyA9IHV0LmdldENlbGxJbmZvKGNlbGwpO1xyXG5cdCAgICAgICAgICAgIC8vdXQuaW5zZXJ0Um93KCF1dC5zZWxlY3RlZFRkcy5sZW5ndGggPyBjZWxsSW5mby5yb3dJbmRleDp1dC5jZWxsc1JhbmdlLmJlZ2luUm93SW5kZXgsJycpO1xyXG5cdCAgICAgICAgICAgIGlmICghdXQuc2VsZWN0ZWRUZHMubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHV0Lmluc2VydFJvdyhjZWxsSW5mby5yb3dJbmRleCwgY2VsbCk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gdXQuY2VsbHNSYW5nZTtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJhbmdlLmVuZFJvd0luZGV4IC0gcmFuZ2UuYmVnaW5Sb3dJbmRleCArIDE7IGkgPCBsZW47IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdXQuaW5zZXJ0Um93KHJhbmdlLmJlZ2luUm93SW5kZXgsIGNlbGwpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJuZy5tb3ZlVG9Cb29rbWFyayhiaykuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgaWYgKHRhYmxlLmdldEF0dHJpYnV0ZShcImludGVybGFjZWRcIikgPT09IFwiZW5hYmxlZFwiKXRoaXMuZmlyZUV2ZW50KFwiaW50ZXJsYWNldGFibGVcIiwgdGFibGUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICAvL+WQjuaPkuWFpeihjFxyXG5cdCAgICBVRS5jb21tYW5kc1tcImluc2VydHJvd25leHRcIl0gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZUl0ZW1zID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcyksXHJcblx0ICAgICAgICAgICAgICAgIGNlbGwgPSB0YWJsZUl0ZW1zLmNlbGw7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGNlbGwgJiYgKGNlbGwudGFnTmFtZSA9PSBcIlREXCIpICYmIGdldFVFVGFibGUodGFibGVJdGVtcy50YWJsZSkucm93c051bSA8IHRoaXMub3B0aW9ucy5tYXhSb3dOdW0gPyAwIDogLTE7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgcm5nID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICAgICAgYmsgPSBybmcuY3JlYXRlQm9va21hcmsodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlSXRlbXMgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKSxcclxuXHQgICAgICAgICAgICAgICAgY2VsbCA9IHRhYmxlSXRlbXMuY2VsbCxcclxuXHQgICAgICAgICAgICAgICAgdGFibGUgPSB0YWJsZUl0ZW1zLnRhYmxlLFxyXG5cdCAgICAgICAgICAgICAgICB1dCA9IGdldFVFVGFibGUodGFibGUpLFxyXG5cdCAgICAgICAgICAgICAgICBjZWxsSW5mbyA9IHV0LmdldENlbGxJbmZvKGNlbGwpO1xyXG5cdCAgICAgICAgICAgIC8vdXQuaW5zZXJ0Um93KCF1dC5zZWxlY3RlZFRkcy5sZW5ndGg/IGNlbGxJbmZvLnJvd0luZGV4ICsgY2VsbEluZm8ucm93U3BhbiA6IHV0LmNlbGxzUmFuZ2UuZW5kUm93SW5kZXggKyAxLCcnKTtcclxuXHQgICAgICAgICAgICBpZiAoIXV0LnNlbGVjdGVkVGRzLmxlbmd0aCkge1xyXG5cdCAgICAgICAgICAgICAgICB1dC5pbnNlcnRSb3coY2VsbEluZm8ucm93SW5kZXggKyBjZWxsSW5mby5yb3dTcGFuLCBjZWxsKTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcmFuZ2UgPSB1dC5jZWxsc1JhbmdlO1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gcmFuZ2UuZW5kUm93SW5kZXggLSByYW5nZS5iZWdpblJvd0luZGV4ICsgMTsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB1dC5pbnNlcnRSb3cocmFuZ2UuZW5kUm93SW5kZXggKyAxLCBjZWxsKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBybmcubW92ZVRvQm9va21hcmsoYmspLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgIGlmICh0YWJsZS5nZXRBdHRyaWJ1dGUoXCJpbnRlcmxhY2VkXCIpID09PSBcImVuYWJsZWRcIil0aGlzLmZpcmVFdmVudChcImludGVybGFjZXRhYmxlXCIsIHRhYmxlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgVUUuY29tbWFuZHNbXCJkZWxldGVyb3dcIl0gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZUl0ZW1zID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcyk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRhYmxlSXRlbXMuY2VsbCA/IDAgOiAtMTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBjZWxsID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcykuY2VsbCxcclxuXHQgICAgICAgICAgICAgICAgdXQgPSBnZXRVRVRhYmxlKGNlbGwpLFxyXG5cdCAgICAgICAgICAgICAgICBjZWxsc1JhbmdlID0gdXQuY2VsbHNSYW5nZSxcclxuXHQgICAgICAgICAgICAgICAgY2VsbEluZm8gPSB1dC5nZXRDZWxsSW5mbyhjZWxsKSxcclxuXHQgICAgICAgICAgICAgICAgcHJlQ2VsbCA9IHV0LmdldFZTaWRlQ2VsbChjZWxsKSxcclxuXHQgICAgICAgICAgICAgICAgbmV4dENlbGwgPSB1dC5nZXRWU2lkZUNlbGwoY2VsbCwgdHJ1ZSksXHJcblx0ICAgICAgICAgICAgICAgIHJuZyA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgaWYgKHV0aWxzLmlzRW1wdHlPYmplY3QoY2VsbHNSYW5nZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgdXQuZGVsZXRlUm93KGNlbGxJbmZvLnJvd0luZGV4KTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gY2VsbHNSYW5nZS5iZWdpblJvd0luZGV4OyBpIDwgY2VsbHNSYW5nZS5lbmRSb3dJbmRleCArIDE7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdXQuZGVsZXRlUm93KGNlbGxzUmFuZ2UuYmVnaW5Sb3dJbmRleCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlID0gdXQudGFibGU7XHJcblx0ICAgICAgICAgICAgaWYgKCF0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGQnKS5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG5leHRTaWJsaW5nID0gdGFibGUubmV4dFNpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZSh0YWJsZSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChuZXh0U2libGluZykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcm5nLnNldFN0YXJ0KG5leHRTaWJsaW5nLCAwKS5zZXRDdXJzb3IoZmFsc2UsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNlbGxJbmZvLnJvd1NwYW4gPT0gMSB8fCBjZWxsSW5mby5yb3dTcGFuID09IGNlbGxzUmFuZ2UuZW5kUm93SW5kZXggLSBjZWxsc1JhbmdlLmJlZ2luUm93SW5kZXggKyAxKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobmV4dENlbGwgfHwgcHJlQ2VsbCkgcm5nLnNlbGVjdE5vZGVDb250ZW50cyhuZXh0Q2VsbCB8fCBwcmVDZWxsKS5zZXRDdXJzb3IoZmFsc2UsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0NlbGwgPSB1dC5nZXRDZWxsKGNlbGxJbmZvLnJvd0luZGV4LCB1dC5pbmRleFRhYmxlW2NlbGxJbmZvLnJvd0luZGV4XVtjZWxsSW5mby5jb2xJbmRleF0uY2VsbEluZGV4KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChuZXdDZWxsKSBybmcuc2VsZWN0Tm9kZUNvbnRlbnRzKG5ld0NlbGwpLnNldEN1cnNvcihmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKHRhYmxlLmdldEF0dHJpYnV0ZShcImludGVybGFjZWRcIikgPT09IFwiZW5hYmxlZFwiKXRoaXMuZmlyZUV2ZW50KFwiaW50ZXJsYWNldGFibGVcIiwgdGFibGUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBVRS5jb21tYW5kc1tcImluc2VydGNvbFwiXSA9IHtcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoY21kKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlSXRlbXMgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKSxcclxuXHQgICAgICAgICAgICAgICAgY2VsbCA9IHRhYmxlSXRlbXMuY2VsbDtcclxuXHQgICAgICAgICAgICByZXR1cm4gY2VsbCAmJiAoY2VsbC50YWdOYW1lID09IFwiVERcIiB8fCAoY2VsbC50YWdOYW1lID09ICdUSCcgJiYgY2VsbCAhPT0gdGFibGVJdGVtcy50ci5jZWxsc1swXSkpICYmXHJcblx0ICAgICAgICAgICAgICAgIGdldFVFVGFibGUodGFibGVJdGVtcy50YWJsZSkuY29sc051bSA8IHRoaXMub3B0aW9ucy5tYXhDb2xOdW0gPyAwIDogLTE7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjbWQpIHtcclxuXHQgICAgICAgICAgICB2YXIgcm5nID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICAgICAgYmsgPSBybmcuY3JlYXRlQm9va21hcmsodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMucXVlcnlDb21tYW5kU3RhdGUoY21kKSA9PSAtMSlyZXR1cm47XHJcblx0ICAgICAgICAgICAgdmFyIGNlbGwgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKS5jZWxsLFxyXG5cdCAgICAgICAgICAgICAgICB1dCA9IGdldFVFVGFibGUoY2VsbCksXHJcblx0ICAgICAgICAgICAgICAgIGNlbGxJbmZvID0gdXQuZ2V0Q2VsbEluZm8oY2VsbCk7XHJcblxyXG5cdCAgICAgICAgICAgIC8vdXQuaW5zZXJ0Q29sKCF1dC5zZWxlY3RlZFRkcy5sZW5ndGggPyBjZWxsSW5mby5jb2xJbmRleDp1dC5jZWxsc1JhbmdlLmJlZ2luQ29sSW5kZXgpO1xyXG5cdCAgICAgICAgICAgIGlmICghdXQuc2VsZWN0ZWRUZHMubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHV0Lmluc2VydENvbChjZWxsSW5mby5jb2xJbmRleCwgY2VsbCk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gdXQuY2VsbHNSYW5nZTtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHJhbmdlLmVuZENvbEluZGV4IC0gcmFuZ2UuYmVnaW5Db2xJbmRleCArIDE7IGkgPCBsZW47IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdXQuaW5zZXJ0Q29sKHJhbmdlLmJlZ2luQ29sSW5kZXgsIGNlbGwpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJuZy5tb3ZlVG9Cb29rbWFyayhiaykuc2VsZWN0KHRydWUpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBVRS5jb21tYW5kc1tcImluc2VydGNvbG5leHRcIl0gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZUl0ZW1zID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcyksXHJcblx0ICAgICAgICAgICAgICAgIGNlbGwgPSB0YWJsZUl0ZW1zLmNlbGw7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGNlbGwgJiYgZ2V0VUVUYWJsZSh0YWJsZUl0ZW1zLnRhYmxlKS5jb2xzTnVtIDwgdGhpcy5vcHRpb25zLm1heENvbE51bSA/IDAgOiAtMTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBybmcgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICBiayA9IHJuZy5jcmVhdGVCb29rbWFyayh0cnVlKTtcclxuXHQgICAgICAgICAgICB2YXIgY2VsbCA9IGdldFRhYmxlSXRlbXNCeVJhbmdlKHRoaXMpLmNlbGwsXHJcblx0ICAgICAgICAgICAgICAgIHV0ID0gZ2V0VUVUYWJsZShjZWxsKSxcclxuXHQgICAgICAgICAgICAgICAgY2VsbEluZm8gPSB1dC5nZXRDZWxsSW5mbyhjZWxsKTtcclxuXHQgICAgICAgICAgICAvL3V0Lmluc2VydENvbCghdXQuc2VsZWN0ZWRUZHMubGVuZ3RoID8gY2VsbEluZm8uY29sSW5kZXggKyBjZWxsSW5mby5jb2xTcGFuOnV0LmNlbGxzUmFuZ2UuZW5kQ29sSW5kZXggKzEpO1xyXG5cdCAgICAgICAgICAgIGlmICghdXQuc2VsZWN0ZWRUZHMubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHV0Lmluc2VydENvbChjZWxsSW5mby5jb2xJbmRleCArIGNlbGxJbmZvLmNvbFNwYW4sIGNlbGwpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHV0LmNlbGxzUmFuZ2U7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByYW5nZS5lbmRDb2xJbmRleCAtIHJhbmdlLmJlZ2luQ29sSW5kZXggKyAxOyBpIDwgbGVuOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHV0Lmluc2VydENvbChyYW5nZS5lbmRDb2xJbmRleCArIDEsIGNlbGwpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJuZy5tb3ZlVG9Cb29rbWFyayhiaykuc2VsZWN0KCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICBVRS5jb21tYW5kc1tcImRlbGV0ZWNvbFwiXSA9IHtcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlSXRlbXMgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKTtcclxuXHQgICAgICAgICAgICByZXR1cm4gdGFibGVJdGVtcy5jZWxsID8gMCA6IC0xO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNlbGwgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKS5jZWxsLFxyXG5cdCAgICAgICAgICAgICAgICB1dCA9IGdldFVFVGFibGUoY2VsbCksXHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlID0gdXQuY2VsbHNSYW5nZSxcclxuXHQgICAgICAgICAgICAgICAgY2VsbEluZm8gPSB1dC5nZXRDZWxsSW5mbyhjZWxsKSxcclxuXHQgICAgICAgICAgICAgICAgcHJlQ2VsbCA9IHV0LmdldEhTaWRlQ2VsbChjZWxsKSxcclxuXHQgICAgICAgICAgICAgICAgbmV4dENlbGwgPSB1dC5nZXRIU2lkZUNlbGwoY2VsbCwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgaWYgKHV0aWxzLmlzRW1wdHlPYmplY3QocmFuZ2UpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHV0LmRlbGV0ZUNvbChjZWxsSW5mby5jb2xJbmRleCk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHJhbmdlLmJlZ2luQ29sSW5kZXg7IGkgPCByYW5nZS5lbmRDb2xJbmRleCArIDE7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdXQuZGVsZXRlQ29sKHJhbmdlLmJlZ2luQ29sSW5kZXgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZSA9IHV0LnRhYmxlLFxyXG5cdCAgICAgICAgICAgICAgICBybmcgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cclxuXHQgICAgICAgICAgICBpZiAoIXRhYmxlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZCcpLmxlbmd0aCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbmV4dFNpYmxpbmcgPSB0YWJsZS5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHRhYmxlKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG5leHRTaWJsaW5nKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuc2V0U3RhcnQobmV4dFNpYmxpbmcsIDApLnNldEN1cnNvcihmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoZG9tVXRpbHMuaW5Eb2MoY2VsbCwgdGhpcy5kb2N1bWVudCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJuZy5zZXRTdGFydChjZWxsLCAwKS5zZXRDdXJzb3IoZmFsc2UsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRDZWxsICYmIGRvbVV0aWxzLmluRG9jKG5leHRDZWxsLCB0aGlzLmRvY3VtZW50KSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJuZy5zZWxlY3ROb2RlQ29udGVudHMobmV4dENlbGwpLnNldEN1cnNvcihmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmVDZWxsICYmIGRvbVV0aWxzLmluRG9jKHByZUNlbGwsIHRoaXMuZG9jdW1lbnQpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJuZy5zZWxlY3ROb2RlQ29udGVudHMocHJlQ2VsbCkuc2V0Q3Vyc29yKHRydWUsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgVUUuY29tbWFuZHNbXCJzcGxpdHRvY2VsbHNcIl0gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZUl0ZW1zID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcyksXHJcblx0ICAgICAgICAgICAgICAgIGNlbGwgPSB0YWJsZUl0ZW1zLmNlbGw7XHJcblx0ICAgICAgICAgICAgaWYgKCFjZWxsKSByZXR1cm4gLTE7XHJcblx0ICAgICAgICAgICAgdmFyIHV0ID0gZ2V0VUVUYWJsZSh0YWJsZUl0ZW1zLnRhYmxlKTtcclxuXHQgICAgICAgICAgICBpZiAodXQuc2VsZWN0ZWRUZHMubGVuZ3RoID4gMCkgcmV0dXJuIC0xO1xyXG5cdCAgICAgICAgICAgIHJldHVybiBjZWxsICYmIChjZWxsLmNvbFNwYW4gPiAxIHx8IGNlbGwucm93U3BhbiA+IDEpID8gMCA6IC0xO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHJuZyA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgIGJrID0gcm5nLmNyZWF0ZUJvb2ttYXJrKHRydWUpO1xyXG5cdCAgICAgICAgICAgIHZhciBjZWxsID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcykuY2VsbCxcclxuXHQgICAgICAgICAgICAgICAgdXQgPSBnZXRVRVRhYmxlKGNlbGwpO1xyXG5cdCAgICAgICAgICAgIHV0LnNwbGl0VG9DZWxscyhjZWxsKTtcclxuXHQgICAgICAgICAgICBybmcubW92ZVRvQm9va21hcmsoYmspLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBVRS5jb21tYW5kc1tcInNwbGl0dG9yb3dzXCJdID0ge1xyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgdGFibGVJdGVtcyA9IGdldFRhYmxlSXRlbXNCeVJhbmdlKHRoaXMpLFxyXG5cdCAgICAgICAgICAgICAgICBjZWxsID0gdGFibGVJdGVtcy5jZWxsO1xyXG5cdCAgICAgICAgICAgIGlmICghY2VsbCkgcmV0dXJuIC0xO1xyXG5cdCAgICAgICAgICAgIHZhciB1dCA9IGdldFVFVGFibGUodGFibGVJdGVtcy50YWJsZSk7XHJcblx0ICAgICAgICAgICAgaWYgKHV0LnNlbGVjdGVkVGRzLmxlbmd0aCA+IDApIHJldHVybiAtMTtcclxuXHQgICAgICAgICAgICByZXR1cm4gY2VsbCAmJiBjZWxsLnJvd1NwYW4gPiAxID8gMCA6IC0xO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHJuZyA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgIGJrID0gcm5nLmNyZWF0ZUJvb2ttYXJrKHRydWUpO1xyXG5cdCAgICAgICAgICAgIHZhciBjZWxsID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcykuY2VsbCxcclxuXHQgICAgICAgICAgICAgICAgdXQgPSBnZXRVRVRhYmxlKGNlbGwpO1xyXG5cdCAgICAgICAgICAgIHV0LnNwbGl0VG9Sb3dzKGNlbGwpO1xyXG5cdCAgICAgICAgICAgIHJuZy5tb3ZlVG9Cb29rbWFyayhiaykuc2VsZWN0KCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIFVFLmNvbW1hbmRzW1wic3BsaXR0b2NvbHNcIl0gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZUl0ZW1zID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcyksXHJcblx0ICAgICAgICAgICAgICAgIGNlbGwgPSB0YWJsZUl0ZW1zLmNlbGw7XHJcblx0ICAgICAgICAgICAgaWYgKCFjZWxsKSByZXR1cm4gLTE7XHJcblx0ICAgICAgICAgICAgdmFyIHV0ID0gZ2V0VUVUYWJsZSh0YWJsZUl0ZW1zLnRhYmxlKTtcclxuXHQgICAgICAgICAgICBpZiAodXQuc2VsZWN0ZWRUZHMubGVuZ3RoID4gMCkgcmV0dXJuIC0xO1xyXG5cdCAgICAgICAgICAgIHJldHVybiBjZWxsICYmIGNlbGwuY29sU3BhbiA+IDEgPyAwIDogLTE7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgcm5nID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICAgICAgYmsgPSBybmcuY3JlYXRlQm9va21hcmsodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgdmFyIGNlbGwgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKS5jZWxsLFxyXG5cdCAgICAgICAgICAgICAgICB1dCA9IGdldFVFVGFibGUoY2VsbCk7XHJcblx0ICAgICAgICAgICAgdXQuc3BsaXRUb0NvbHMoY2VsbCk7XHJcblx0ICAgICAgICAgICAgcm5nLm1vdmVUb0Jvb2ttYXJrKGJrKS5zZWxlY3QoKTtcclxuXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICBVRS5jb21tYW5kc1tcImFkYXB0Ynl0ZXh0XCJdID1cclxuXHQgICAgICAgIFVFLmNvbW1hbmRzW1wiYWRhcHRieXdpbmRvd1wiXSA9IHtcclxuXHQgICAgICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcykudGFibGUgPyAwIDogLTFcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoY21kKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB0YWJsZUl0ZW1zID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcyksXHJcblx0ICAgICAgICAgICAgICAgICAgICB0YWJsZSA9IHRhYmxlSXRlbXMudGFibGU7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0YWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGNtZCA9PSAnYWRhcHRieXdpbmRvdycpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXNldFRkV2lkdGgodGFibGUsIHRoaXMpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbHMgPSBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWJsZSwgXCJ0ZCB0aFwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5lYWNoKGNlbGxzLCBmdW5jdGlvbiAoY2VsbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnJlbW92ZUF0dHJpYnV0ZShcIndpZHRoXCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlLnJlbW92ZUF0dHJpYnV0ZShcIndpZHRoXCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfTtcclxuXHJcblx0ICAgIC8v5bmz5Z2H5YiG6YWN5ZCE5YiXXHJcblx0ICAgIFVFLmNvbW1hbmRzWydhdmVyYWdlZGlzdHJpYnV0ZWNvbCddID0ge1xyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgdXQgPSBnZXRVRVRhYmxlQnlTZWxlY3RlZCh0aGlzKTtcclxuXHQgICAgICAgICAgICBpZiAoIXV0KSByZXR1cm4gLTE7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHV0LmlzRnVsbFJvdygpIHx8IHV0LmlzRnVsbENvbCgpID8gMCA6IC0xO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoY21kKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgdXQgPSBnZXRVRVRhYmxlQnlTZWxlY3RlZChtZSk7XHJcblxyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGdldEF2ZXJhZ2VXaWR0aCgpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRiID0gdXQudGFibGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICBhdmVyYWdlV2lkdGgsIHN1bVdpZHRoID0gMCwgY29sc051bSA9IDAsXHJcblx0ICAgICAgICAgICAgICAgICAgICB0YkF0dHIgPSBnZXREZWZhdWx0VmFsdWUobWUsIHRiKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmICh1dC5pc0Z1bGxSb3coKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc3VtV2lkdGggPSB0Yi5vZmZzZXRXaWR0aDtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbHNOdW0gPSB1dC5jb2xzTnVtO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGJlZ2luID0gdXQuY2VsbHNSYW5nZS5iZWdpbkNvbEluZGV4LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IHV0LmNlbGxzUmFuZ2UuZW5kQ29sSW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSBiZWdpbjsgaSA8PSBlbmQ7KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHV0LnNlbGVjdGVkVGRzW2ldO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN1bVdpZHRoICs9IG5vZGUub2Zmc2V0V2lkdGg7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaSArPSBub2RlLmNvbFNwYW47XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29sc051bSArPSAxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGF2ZXJhZ2VXaWR0aCA9IE1hdGguY2VpbChzdW1XaWR0aCAvIGNvbHNOdW0pIC0gdGJBdHRyLnRkQm9yZGVyICogMiAtIHRiQXR0ci50ZFBhZGRpbmcgKiAyO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gYXZlcmFnZVdpZHRoO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gc2V0QXZlcmFnZVdpZHRoKGF2ZXJhZ2VXaWR0aCkge1xyXG5cdCAgICAgICAgICAgICAgICB1dGlscy5lYWNoKGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHV0LnRhYmxlLCBcInRoXCIpLCBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBcIlwiKTtcclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjZWxscyA9IHV0LmlzRnVsbFJvdygpID8gZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUodXQudGFibGUsIFwidGRcIikgOiB1dC5zZWxlY3RlZFRkcztcclxuXHJcblx0ICAgICAgICAgICAgICAgIHV0aWxzLmVhY2goY2VsbHMsIGZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5jb2xTcGFuID09IDEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIGF2ZXJhZ2VXaWR0aCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgaWYgKHV0ICYmIHV0LnNlbGVjdGVkVGRzLmxlbmd0aCkge1xyXG5cdCAgICAgICAgICAgICAgICBzZXRBdmVyYWdlV2lkdGgoZ2V0QXZlcmFnZVdpZHRoKCkpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgLy/lubPlnYfliIbphY3lkITooYxcclxuXHQgICAgVUUuY29tbWFuZHNbJ2F2ZXJhZ2VkaXN0cmlidXRlcm93J10gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciB1dCA9IGdldFVFVGFibGVCeVNlbGVjdGVkKHRoaXMpO1xyXG5cdCAgICAgICAgICAgIGlmICghdXQpIHJldHVybiAtMTtcclxuXHQgICAgICAgICAgICBpZiAodXQuc2VsZWN0ZWRUZHMgJiYgL3RoL2lnLnRlc3QodXQuc2VsZWN0ZWRUZHNbMF0udGFnTmFtZSkpIHJldHVybiAtMTtcclxuXHQgICAgICAgICAgICByZXR1cm4gdXQuaXNGdWxsUm93KCkgfHwgdXQuaXNGdWxsQ29sKCkgPyAwIDogLTE7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjbWQpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICB1dCA9IGdldFVFVGFibGVCeVNlbGVjdGVkKG1lKTtcclxuXHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gZ2V0QXZlcmFnZUhlaWdodCgpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGF2ZXJhZ2VIZWlnaHQsIHJvd051bSwgc3VtSGVpZ2h0ID0gMCxcclxuXHQgICAgICAgICAgICAgICAgICAgIHRiID0gdXQudGFibGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICB0YkF0dHIgPSBnZXREZWZhdWx0VmFsdWUobWUsIHRiKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIHRkcGFkZGluZyA9IHBhcnNlSW50KGRvbVV0aWxzLmdldENvbXB1dGVkU3R5bGUodGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3RkJylbMF0sIFwicGFkZGluZy10b3BcIikpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYgKHV0LmlzRnVsbENvbCgpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY2FwdGlvbkFyciA9IGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRiLCBcImNhcHRpb25cIiksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhBcnIgPSBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YiwgXCJ0aFwiKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9uSGVpZ2h0LCB0aEhlaWdodDtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY2FwdGlvbkFyci5sZW5ndGggPiAwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2FwdGlvbkhlaWdodCA9IGNhcHRpb25BcnJbMF0ub2Zmc2V0SGVpZ2h0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoQXJyLmxlbmd0aCA+IDApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aEhlaWdodCA9IHRoQXJyWzBdLm9mZnNldEhlaWdodDtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBzdW1IZWlnaHQgPSB0Yi5vZmZzZXRIZWlnaHQgLSAoY2FwdGlvbkhlaWdodCB8fCAwKSAtICh0aEhlaWdodCB8fCAwKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJvd051bSA9IHRoQXJyLmxlbmd0aCA9PSAwID8gdXQucm93c051bSA6ICh1dC5yb3dzTnVtIC0gMSk7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgYmVnaW4gPSB1dC5jZWxsc1JhbmdlLmJlZ2luUm93SW5kZXgsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gdXQuY2VsbHNSYW5nZS5lbmRSb3dJbmRleCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCA9IDAsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdHJzID0gZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGIsIFwidHJcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gYmVnaW47IGkgPD0gZW5kOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdW1IZWlnaHQgKz0gdHJzW2ldLm9mZnNldEhlaWdodDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCArPSAxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcm93TnVtID0gY291bnQ7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgLy9pZTjkuIvmmK/mt7fmnYLmqKHlvI9cclxuXHQgICAgICAgICAgICAgICAgaWYgKGJyb3dzZXIuaWUgJiYgYnJvd3Nlci52ZXJzaW9uIDwgOSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYXZlcmFnZUhlaWdodCA9IE1hdGguY2VpbChzdW1IZWlnaHQgLyByb3dOdW0pO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYXZlcmFnZUhlaWdodCA9IE1hdGguY2VpbChzdW1IZWlnaHQgLyByb3dOdW0pIC0gdGJBdHRyLnRkQm9yZGVyICogMiAtIHRkcGFkZGluZyAqIDI7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGF2ZXJhZ2VIZWlnaHQ7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICBmdW5jdGlvbiBzZXRBdmVyYWdlSGVpZ2h0KGF2ZXJhZ2VIZWlnaHQpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGNlbGxzID0gdXQuaXNGdWxsQ29sKCkgPyBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh1dC50YWJsZSwgXCJ0ZFwiKSA6IHV0LnNlbGVjdGVkVGRzO1xyXG5cdCAgICAgICAgICAgICAgICB1dGlscy5lYWNoKGNlbGxzLCBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUucm93U3BhbiA9PSAxKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgYXZlcmFnZUhlaWdodCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgaWYgKHV0ICYmIHV0LnNlbGVjdGVkVGRzLmxlbmd0aCkge1xyXG5cdCAgICAgICAgICAgICAgICBzZXRBdmVyYWdlSGVpZ2h0KGdldEF2ZXJhZ2VIZWlnaHQoKSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgLy/ljZXlhYPmoLzlr7npvZDmlrnlvI9cclxuXHQgICAgVUUuY29tbWFuZHNbJ2NlbGxhbGlnbm1lbnQnXSA9IHtcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGdldFRhYmxlSXRlbXNCeVJhbmdlKHRoaXMpLnRhYmxlID8gMCA6IC0xXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjbWQsIGRhdGEpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICB1dCA9IGdldFVFVGFibGVCeVNlbGVjdGVkKG1lKTtcclxuXHJcblx0ICAgICAgICAgICAgaWYgKCF1dCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBtZS5zZWxlY3Rpb24uZ2V0U3RhcnQoKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGwgPSBzdGFydCAmJiBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHN0YXJ0LCBbXCJ0ZFwiLCBcInRoXCIsIFwiY2FwdGlvblwiXSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghL2NhcHRpb24vaWcudGVzdChjZWxsLnRhZ05hbWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5zZXRBdHRyaWJ1dGVzKGNlbGwsIGRhdGEpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS50ZXh0QWxpZ24gPSBkYXRhLmFsaWduO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS52ZXJ0aWNhbEFsaWduID0gZGF0YS52QWxpZ247XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgbWUuc2VsZWN0aW9uLmdldFJhbmdlKCkuc2V0Q3Vyc29yKHRydWUpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHV0aWxzLmVhY2godXQuc2VsZWN0ZWRUZHMsIGZ1bmN0aW9uIChjZWxsKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5zZXRBdHRyaWJ1dGVzKGNlbGwsIGRhdGEpO1xyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgLyoqXHJcblx0ICAgICAgICAgKiDmn6Xor6LlvZPliY3ngrnlh7vnmoTljZXlhYPmoLznmoTlr7npvZDnirbmgIHvvIwg5aaC5p6c5b2T5YmN5bey57uP6YCJ5oup5LqG5aSa5Liq5Y2V5YWD5qC877yMIOWImeS8mui/lOWbnuaJgOacieWNleWFg+agvOe7j+i/h+e7n+S4gOWNj+iwg+i/h+WQjueahOeKtuaAgVxyXG5cdCAgICAgICAgICogQHNlZSBVRS5VRVRhYmxlLmdldFRhYmxlQ2VsbEFsaWduU3RhdGVcclxuXHQgICAgICAgICAqL1xyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kVmFsdWU6IGZ1bmN0aW9uIChjbWQpIHtcclxuXHJcblx0ICAgICAgICAgICAgdmFyIGFjdGl2ZU1lbnVDZWxsID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UoIHRoaXMpLmNlbGw7XHJcblxyXG5cdCAgICAgICAgICAgIGlmKCAhYWN0aXZlTWVudUNlbGwgKSB7XHJcblx0ICAgICAgICAgICAgICAgIGFjdGl2ZU1lbnVDZWxsID0gZ2V0U2VsZWN0ZWRBcnIodGhpcylbMF07XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICBpZiAoIWFjdGl2ZU1lbnVDZWxsKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuXHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgIC8v6I635Y+W5ZCM5pe26YCJ5Lit55qE5YW25LuW5Y2V5YWD5qC8XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjZWxscyA9IFVFLlVFVGFibGUuZ2V0VUVUYWJsZShhY3RpdmVNZW51Q2VsbCkuc2VsZWN0ZWRUZHM7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAhY2VsbHMubGVuZ3RoICYmICggY2VsbHMgPSBhY3RpdmVNZW51Q2VsbCApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIFVFLlVFVGFibGUuZ2V0VGFibGVDZWxsQWxpZ25TdGF0ZShjZWxscyk7XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIC8v6KGo5qC85a+56b2Q5pa55byPXHJcblx0ICAgIFVFLmNvbW1hbmRzWyd0YWJsZWFsaWdubWVudCddID0ge1xyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICBpZiAoYnJvd3Nlci5pZSAmJiBicm93c2VyLnZlcnNpb24gPCA4KSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGdldFRhYmxlSXRlbXNCeVJhbmdlKHRoaXMpLnRhYmxlID8gMCA6IC0xXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjbWQsIHZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQgPSBtZS5zZWxlY3Rpb24uZ2V0U3RhcnQoKSxcclxuXHQgICAgICAgICAgICAgICAgdGFibGUgPSBzdGFydCAmJiBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHN0YXJ0LCBbXCJ0YWJsZVwiXSwgdHJ1ZSk7XHJcblxyXG5cdCAgICAgICAgICAgIGlmICh0YWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoXCJhbGlnblwiLHZhbHVlKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICAvL+ihqOagvOWxnuaAp1xyXG5cdCAgICBVRS5jb21tYW5kc1snZWRpdHRhYmxlJ10gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKS50YWJsZSA/IDAgOiAtMVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoY21kLCBjb2xvcikge1xyXG5cdCAgICAgICAgICAgIHZhciBybmcgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICB0YWJsZSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocm5nLnN0YXJ0Q29udGFpbmVyLCAndGFibGUnKTtcclxuXHQgICAgICAgICAgICBpZiAodGFibGUpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGFyciA9IGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhYmxlLCBcInRkXCIpLmNvbmNhdChcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhYmxlLCBcInRoXCIpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFibGUsIFwiY2FwdGlvblwiKVxyXG5cdCAgICAgICAgICAgICAgICApO1xyXG5cdCAgICAgICAgICAgICAgICB1dGlscy5lYWNoKGFyciwgZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUuYm9yZGVyQ29sb3IgPSBjb2xvcjtcclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICAvL+WNleWFg+agvOWxnuaAp1xyXG5cdCAgICBVRS5jb21tYW5kc1snZWRpdHRkJ10gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBnZXRUYWJsZUl0ZW1zQnlSYW5nZSh0aGlzKS50YWJsZSA/IDAgOiAtMVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoY21kLCBia0NvbG9yKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgdXQgPSBnZXRVRVRhYmxlQnlTZWxlY3RlZChtZSk7XHJcblxyXG5cdCAgICAgICAgICAgIGlmICghdXQpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHN0YXJ0ID0gbWUuc2VsZWN0aW9uLmdldFN0YXJ0KCksXHJcblx0ICAgICAgICAgICAgICAgICAgICBjZWxsID0gc3RhcnQgJiYgZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShzdGFydCwgW1widGRcIiwgXCJ0aFwiLCBcImNhcHRpb25cIl0sIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2VsbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBia0NvbG9yO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdXRpbHMuZWFjaCh1dC5zZWxlY3RlZFRkcywgZnVuY3Rpb24gKGNlbGwpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gYmtDb2xvcjtcclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgVUUuY29tbWFuZHNbXCJzZXR0YWJsZWJhY2tncm91bmRcIl0gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBnZXRTZWxlY3RlZEFycih0aGlzKS5sZW5ndGggPiAxID8gMCA6IC0xO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoY21kLCB2YWx1ZSkge1xyXG5cdCAgICAgICAgICAgIHZhciBjZWxscywgdXQ7XHJcblx0ICAgICAgICAgICAgY2VsbHMgPSBnZXRTZWxlY3RlZEFycih0aGlzKTtcclxuXHQgICAgICAgICAgICB1dCA9IGdldFVFVGFibGUoY2VsbHNbMF0pO1xyXG5cdCAgICAgICAgICAgIHV0LnNldEJhY2tncm91bmQoY2VsbHMsIHZhbHVlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHJcblx0ICAgIFVFLmNvbW1hbmRzW1wiY2xlYXJ0YWJsZWJhY2tncm91bmRcIl0gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBjZWxscyA9IGdldFNlbGVjdGVkQXJyKHRoaXMpO1xyXG5cdCAgICAgICAgICAgIGlmICghY2VsbHMubGVuZ3RoKXJldHVybiAtMTtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2VsbDsgY2VsbCA9IGNlbGxzW2krK107KSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjZWxsLnN0eWxlLmJhY2tncm91bmRDb2xvciAhPT0gXCJcIikgcmV0dXJuIDA7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiAtMTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBjZWxscyA9IGdldFNlbGVjdGVkQXJyKHRoaXMpLFxyXG5cdCAgICAgICAgICAgICAgICB1dCA9IGdldFVFVGFibGUoY2VsbHNbMF0pO1xyXG5cdCAgICAgICAgICAgIHV0LnJlbW92ZUJhY2tncm91bmQoY2VsbHMpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgVUUuY29tbWFuZHNbXCJpbnRlcmxhY2V0YWJsZVwiXSA9IFVFLmNvbW1hbmRzW1widW5pbnRlcmxhY2V0YWJsZVwiXSA9IHtcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoY21kKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcykudGFibGU7XHJcblx0ICAgICAgICAgICAgaWYgKCF0YWJsZSkgcmV0dXJuIC0xO1xyXG5cdCAgICAgICAgICAgIHZhciBpbnRlcmxhY2VkID0gdGFibGUuZ2V0QXR0cmlidXRlKFwiaW50ZXJsYWNlZFwiKTtcclxuXHQgICAgICAgICAgICBpZiAoY21kID09IFwiaW50ZXJsYWNldGFibGVcIikge1xyXG5cdCAgICAgICAgICAgICAgICAvL1RPRE8g5b6F5a6aXHJcblx0ICAgICAgICAgICAgICAgIC8v5piv5ZCm6ZyA6KaB5b6F5a6a77yM5aaC5p6c6K6+572u77yM5YiZ5ZG95Luk5Y+q6IO95Y2V5qyh5omn6KGM5oiQ5Yqf77yM5L2G5Y+N5bCE5YW35aSHdG9nZ2xl5pWI5p6c77yb5ZCm5YiZ5Y+v5Lul6KaG55uW5YmN5qyh5ZG95Luk77yM5L2G5Y+N5bCE5bCG5LiN5a2Y5ZyodG9nZ2xl5pWI5p6cXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAoaW50ZXJsYWNlZCA9PT0gXCJlbmFibGVkXCIpID8gLTEgOiAwO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAoIWludGVybGFjZWQgfHwgaW50ZXJsYWNlZCA9PT0gXCJkaXNhYmxlZFwiKSA/IC0xIDogMDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjbWQsIGNsYXNzTGlzdCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZSA9IGdldFRhYmxlSXRlbXNCeVJhbmdlKHRoaXMpLnRhYmxlO1xyXG5cdCAgICAgICAgICAgIGlmIChjbWQgPT0gXCJpbnRlcmxhY2V0YWJsZVwiKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZShcImludGVybGFjZWRcIiwgXCJlbmFibGVkXCIpO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudChcImludGVybGFjZXRhYmxlXCIsIHRhYmxlLCBjbGFzc0xpc3QpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZShcImludGVybGFjZWRcIiwgXCJkaXNhYmxlZFwiKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoXCJ1bmludGVybGFjZXRhYmxlXCIsIHRhYmxlKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIFVFLmNvbW1hbmRzW1wic2V0Ym9yZGVydmlzaWJsZVwiXSA9IHtcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoY21kKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcykudGFibGU7XHJcblx0ICAgICAgICAgICAgaWYgKCF0YWJsZSkgcmV0dXJuIC0xO1xyXG5cdCAgICAgICAgICAgIHJldHVybiAwO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlID0gZ2V0VGFibGVJdGVtc0J5UmFuZ2UodGhpcykudGFibGU7XHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaChkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWJsZSwndGQnKSxmdW5jdGlvbih0ZCl7XHJcblx0ICAgICAgICAgICAgICAgIHRkLnN0eWxlLmJvcmRlcldpZHRoID0gJzFweCc7XHJcblx0ICAgICAgICAgICAgICAgIHRkLnN0eWxlLmJvcmRlclN0eWxlID0gJ3NvbGlkJztcclxuXHQgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICBmdW5jdGlvbiByZXNldFRkV2lkdGgodGFibGUsIGVkaXRvcikge1xyXG5cdCAgICAgICAgdmFyIHRkcyA9IGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhYmxlLCd0ZCB0aCcpO1xyXG5cdCAgICAgICAgdXRpbHMuZWFjaCh0ZHMsIGZ1bmN0aW9uICh0ZCkge1xyXG5cdCAgICAgICAgICAgIHRkLnJlbW92ZUF0dHJpYnV0ZShcIndpZHRoXCIpO1xyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgZ2V0VGFibGVXaWR0aChlZGl0b3IsIHRydWUsIGdldERlZmF1bHRWYWx1ZShlZGl0b3IsIHRhYmxlKSkpO1xyXG5cdCAgICAgICAgdmFyIHRkc1dpZHRocyA9IFtdO1xyXG5cdCAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaCh0ZHMsIGZ1bmN0aW9uICh0ZCkge1xyXG5cdCAgICAgICAgICAgICAgICAodGQuY29sU3BhbiA9PSAxKSAmJiB0ZHNXaWR0aHMucHVzaCh0ZC5vZmZzZXRXaWR0aClcclxuXHQgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2godGRzLCBmdW5jdGlvbiAodGQsaSkge1xyXG5cdCAgICAgICAgICAgICAgICAodGQuY29sU3BhbiA9PSAxKSAmJiB0ZC5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB0ZHNXaWR0aHNbaV0gKyBcIlwiKTtcclxuXHQgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgfSwgMCk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIGdldFRhYmxlV2lkdGgoZWRpdG9yLCBuZWVkSUVIYWNrLCBkZWZhdWx0VmFsdWUpIHtcclxuXHQgICAgICAgIHZhciBib2R5ID0gZWRpdG9yLmJvZHk7XHJcblx0ICAgICAgICByZXR1cm4gYm9keS5vZmZzZXRXaWR0aCAtIChuZWVkSUVIYWNrID8gcGFyc2VJbnQoZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShib2R5LCAnbWFyZ2luLWxlZnQnKSwgMTApICogMiA6IDApIC0gZGVmYXVsdFZhbHVlLnRhYmxlQm9yZGVyICogMiAtIChlZGl0b3Iub3B0aW9ucy5vZmZzZXRXaWR0aCB8fCAwKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gZ2V0U2VsZWN0ZWRBcnIoZWRpdG9yKSB7XHJcblx0ICAgICAgICB2YXIgY2VsbCA9IGdldFRhYmxlSXRlbXNCeVJhbmdlKGVkaXRvcikuY2VsbDtcclxuXHQgICAgICAgIGlmIChjZWxsKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHV0ID0gZ2V0VUVUYWJsZShjZWxsKTtcclxuXHQgICAgICAgICAgICByZXR1cm4gdXQuc2VsZWN0ZWRUZHMubGVuZ3RoID8gdXQuc2VsZWN0ZWRUZHMgOiBbY2VsbF07XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBbXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdH0pKCk7XHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL3RhYmxlLmFjdGlvbi5qc1xyXG5cdC8qKlxyXG5cdCAqIENyZWF0ZWQgd2l0aCBKZXRCcmFpbnMgUGhwU3Rvcm0uXHJcblx0ICogVXNlcjogdGFvcWlsaVxyXG5cdCAqIERhdGU6IDEyLTEwLTEyXHJcblx0ICogVGltZTog5LiK5Y2IMTA6MDVcclxuXHQgKiBUbyBjaGFuZ2UgdGhpcyB0ZW1wbGF0ZSB1c2UgRmlsZSB8IFNldHRpbmdzIHwgRmlsZSBUZW1wbGF0ZXMuXHJcblx0ICovXHJcblx0VUUucGx1Z2luc1sndGFibGUnXSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgIHRhYlRpbWVyID0gbnVsbCxcclxuXHQgICAgICAgIC8v5ouW5Yqo6K6h5pe25ZmoXHJcblx0ICAgICAgICB0YWJsZURyYWdUaW1lciA9IG51bGwsXHJcblx0ICAgICAgICAvL+WPjOWHu+iuoeaXtuWZqFxyXG5cdCAgICAgICAgdGFibGVSZXNpemVUaW1lciA9IG51bGwsXHJcblx0ICAgICAgICAvL+WNleWFg+agvOacgOWwj+WuveW6plxyXG5cdCAgICAgICAgY2VsbE1pbldpZHRoID0gNSxcclxuXHQgICAgICAgIGlzSW5SZXNpemVCdWZmZXIgPSBmYWxzZSxcclxuXHQgICAgICAgIC8v5Y2V5YWD5qC86L655qGG5aSn5bCPXHJcblx0ICAgICAgICBjZWxsQm9yZGVyV2lkdGggPSA1LFxyXG5cdCAgICAgICAgLy/pvKDmoIflgY/np7vot53nprtcclxuXHQgICAgICAgIG9mZnNldE9mVGFibGVDZWxsID0gMTAsXHJcblx0ICAgICAgICAvL+iusOW9leWcqOaciemZkOaXtumXtOWGheeahOeCueWHu+eKtuaAge+8jCDlhbHmnIkz5Liq5Y+W5YC877yMIDAsIDEsIDLjgIIgMOS7o+ihqOacquWIneWni+WMlu+8jCAx5Luj6KGo5Y2V5Ye75LqGMeasoe+8jDLku6Pooagy5qyhXHJcblx0ICAgICAgICBzaW5nbGVDbGlja1N0YXRlID0gMCxcclxuXHQgICAgICAgIHVzZXJBY3Rpb25TdGF0dXMgPSBudWxsLFxyXG5cdCAgICAgICAgLy/lj4zlh7vlhYHorrjnmoTml7bpl7TojIPlm7RcclxuXHQgICAgICAgIGRibGNsaWNrVGltZSA9IDM2MCxcclxuXHQgICAgICAgIFVUID0gVUUuVUVUYWJsZSxcclxuXHQgICAgICAgIGdldFVFVGFibGUgPSBmdW5jdGlvbiAodGRPclRhYmxlKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIFVULmdldFVFVGFibGUodGRPclRhYmxlKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRVRVRhYmxlQnlTZWxlY3RlZCA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gVVQuZ2V0VUVUYWJsZUJ5U2VsZWN0ZWQoZWRpdG9yKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXREZWZhdWx0VmFsdWUgPSBmdW5jdGlvbiAoZWRpdG9yLCB0YWJsZSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBVVC5nZXREZWZhdWx0VmFsdWUoZWRpdG9yLCB0YWJsZSk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcmVtb3ZlU2VsZWN0ZWRDbGFzcyA9IGZ1bmN0aW9uIChjZWxscykge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBVVC5yZW1vdmVTZWxlY3RlZENsYXNzKGNlbGxzKTtcclxuXHQgICAgICAgIH07XHJcblxyXG5cdCAgICBmdW5jdGlvbiBzaG93RXJyb3IoZSkge1xyXG4vL1x0ICAgICAgICB0aHJvdyBlO1xyXG5cdCAgICB9XHJcblx0ICAgIG1lLnJlYWR5KGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgdmFyIG9yZ0dldFRleHQgPSBtZS5zZWxlY3Rpb24uZ2V0VGV4dDtcclxuXHQgICAgICAgIG1lLnNlbGVjdGlvbi5nZXRUZXh0ID0gZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICB2YXIgdGFibGUgPSBnZXRVRVRhYmxlQnlTZWxlY3RlZChtZSk7XHJcblx0ICAgICAgICAgICAgaWYodGFibGUpe1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgc3RyID0gJyc7XHJcblx0ICAgICAgICAgICAgICAgIHV0aWxzLmVhY2godGFibGUuc2VsZWN0ZWRUZHMsZnVuY3Rpb24odGQpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc3RyICs9IHRkW2Jyb3dzZXIuaWU/J2lubmVyVGV4dCc6J3RleHRDb250ZW50J107XHJcblx0ICAgICAgICAgICAgICAgIH0pXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBzdHI7XHJcblx0ICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBvcmdHZXRUZXh0LmNhbGwobWUuc2VsZWN0aW9uKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0pXHJcblxyXG5cdCAgICAvL+WkhOeQhuaLluWKqOWPiuahhumAieebuOWFs+aWueazlVxyXG5cdCAgICB2YXIgc3RhcnRUZCA9IG51bGwsIC8v6byg5qCH5oyJ5LiL5pe255qE6ZSa54K5dGRcclxuXHQgICAgICAgIGN1cnJlbnRUZCA9IG51bGwsIC8v5b2T5YmN6byg5qCH57uP6L+H5pe255qEdGRcclxuXHQgICAgICAgIG9uRHJhZyA9IFwiXCIsIC8v5oyH56S65b2T5YmN5ouW5Yqo54q25oCB77yM5YW25YC85Y+v5Li6XCJcIixcImhcIixcInZcIiAs5YiG5Yir6KGo56S65pyq5ouW5Yqo54q25oCB77yM5qiq5ZCR5ouW5Yqo54q25oCB77yM57q15ZCR5ouW5Yqo54q25oCB77yM55So5LqO6byg5qCH56e75Yqo6L+H56iL5Lit55qE5Yik5patXHJcblx0ICAgICAgICBvbkJvcmRlciA9IGZhbHNlLCAvL+ajgOa1i+m8oOagh+aMieS4i+aXtuaYr+WQpuWkhOWcqOWNleWFg+agvOi+uee8mOS9jee9rlxyXG5cdCAgICAgICAgZHJhZ0J1dHRvbiA9IG51bGwsXHJcblx0ICAgICAgICBkcmFnT3ZlciA9IGZhbHNlLFxyXG5cdCAgICAgICAgZHJhZ0xpbmUgPSBudWxsLCAvL+aooeaLn+eahOaLluWKqOe6v1xyXG5cdCAgICAgICAgZHJhZ1RkID0gbnVsbDsgICAgLy/lj5HnlJ/mi5bliqjnmoTnm67moId0ZFxyXG5cclxuXHQgICAgdmFyIG1vdXNlZG93biA9IGZhbHNlLFxyXG5cdCAgICAvL3RvZG8g5Yik5pat5re35Lmx5qih5byPXHJcblx0ICAgICAgICBuZWVkSUVIYWNrID0gdHJ1ZTtcclxuXHJcblx0ICAgIG1lLnNldE9wdCh7XHJcblx0ICAgICAgICAnbWF4Q29sTnVtJzoyMCxcclxuXHQgICAgICAgICdtYXhSb3dOdW0nOjEwMCxcclxuXHQgICAgICAgICdkZWZhdWx0Q29scyc6NSxcclxuXHQgICAgICAgICdkZWZhdWx0Um93cyc6NSxcclxuXHQgICAgICAgICd0ZHZhbGlnbic6J3RvcCcsXHJcblx0ICAgICAgICAnY3Vyc29ycGF0aCc6bWUub3B0aW9ucy5VRURJVE9SX0hPTUVfVVJMICsgXCJ0aGVtZXMvZGVmYXVsdC9pbWFnZXMvY3Vyc29yX1wiLFxyXG5cdCAgICAgICAgJ3RhYmxlRHJhZ2FibGUnOmZhbHNlLFxyXG5cdCAgICAgICAgJ2NsYXNzTGlzdCc6W1widWUtdGFibGUtaW50ZXJsYWNlLWNvbG9yLXNpbmdsZVwiLFwidWUtdGFibGUtaW50ZXJsYWNlLWNvbG9yLWRvdWJsZVwiXVxyXG5cdCAgICB9KTtcclxuXHQgICAgbWUuZ2V0VUVUYWJsZSA9IGdldFVFVGFibGU7XHJcblx0ICAgIHZhciBjb21tYW5kcyA9IHtcclxuXHQgICAgICAgICdkZWxldGV0YWJsZSc6MSxcclxuXHQgICAgICAgICdpbnNlcnR0YWJsZSc6MSxcclxuXHQgICAgICAgICdjZWxsdmFsaWduJzoxLFxyXG5cdCAgICAgICAgJ2luc2VydGNhcHRpb24nOjEsXHJcblx0ICAgICAgICAnZGVsZXRlY2FwdGlvbic6MSxcclxuXHQgICAgICAgICdpbnNlcnR0aXRsZSc6MSxcclxuXHQgICAgICAgICdkZWxldGV0aXRsZSc6MSxcclxuXHQgICAgICAgIFwibWVyZ2VyaWdodFwiOjEsXHJcblx0ICAgICAgICBcIm1lcmdlZG93blwiOjEsXHJcblx0ICAgICAgICBcIm1lcmdlY2VsbHNcIjoxLFxyXG5cdCAgICAgICAgXCJpbnNlcnRyb3dcIjoxLFxyXG5cdCAgICAgICAgXCJpbnNlcnRyb3duZXh0XCI6MSxcclxuXHQgICAgICAgIFwiZGVsZXRlcm93XCI6MSxcclxuXHQgICAgICAgIFwiaW5zZXJ0Y29sXCI6MSxcclxuXHQgICAgICAgIFwiaW5zZXJ0Y29sbmV4dFwiOjEsXHJcblx0ICAgICAgICBcImRlbGV0ZWNvbFwiOjEsXHJcblx0ICAgICAgICBcInNwbGl0dG9jZWxsc1wiOjEsXHJcblx0ICAgICAgICBcInNwbGl0dG9yb3dzXCI6MSxcclxuXHQgICAgICAgIFwic3BsaXR0b2NvbHNcIjoxLFxyXG5cdCAgICAgICAgXCJhZGFwdGJ5dGV4dFwiOjEsXHJcblx0ICAgICAgICBcImFkYXB0Ynl3aW5kb3dcIjoxLFxyXG5cdCAgICAgICAgXCJhZGFwdGJ5Y3VzdG9tZXJcIjoxLFxyXG5cdCAgICAgICAgXCJpbnNlcnRwYXJhZ3JhcGhcIjoxLFxyXG5cdCAgICAgICAgXCJpbnNlcnRwYXJhZ3JhcGhiZWZvcmV0YWJsZVwiOjEsXHJcblx0ICAgICAgICBcImF2ZXJhZ2VkaXN0cmlidXRlY29sXCI6MSxcclxuXHQgICAgICAgIFwiYXZlcmFnZWRpc3RyaWJ1dGVyb3dcIjoxXHJcblx0ICAgIH07XHJcblx0ICAgIG1lLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIHV0aWxzLmNzc1J1bGUoJ3RhYmxlJyxcclxuXHQgICAgICAgICAgICAvL+mAieS4reeahHRk5LiK55qE5qC35byPXHJcblx0ICAgICAgICAgICAgJy5zZWxlY3RUZENsYXNze2JhY2tncm91bmQtY29sb3I6I2VkZjVmYSAhaW1wb3J0YW50fScgK1xyXG5cdCAgICAgICAgICAgICAgICAndGFibGUubm9Cb3JkZXJUYWJsZSB0ZCx0YWJsZS5ub0JvcmRlclRhYmxlIHRoLHRhYmxlLm5vQm9yZGVyVGFibGUgY2FwdGlvbntib3JkZXI6MXB4IGRhc2hlZCAjZGRkICFpbXBvcnRhbnR9JyArXHJcblx0ICAgICAgICAgICAgICAgIC8v5o+S5YWl55qE6KGo5qC855qE6buY6K6k5qC35byPXHJcblx0ICAgICAgICAgICAgICAgICd0YWJsZXttYXJnaW4tYm90dG9tOjEwcHg7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2Rpc3BsYXk6dGFibGU7fScgK1xyXG5cdCAgICAgICAgICAgICAgICAndGQsdGh7cGFkZGluZzogNXB4IDEwcHg7Ym9yZGVyOiAxcHggc29saWQgI0RERDt9JyArXHJcblx0ICAgICAgICAgICAgICAgICdjYXB0aW9ue2JvcmRlcjoxcHggZGFzaGVkICNEREQ7Ym9yZGVyLWJvdHRvbTowO3BhZGRpbmc6M3B4O3RleHQtYWxpZ246Y2VudGVyO30nICtcclxuXHQgICAgICAgICAgICAgICAgJ3Roe2JvcmRlci10b3A6MXB4IHNvbGlkICNCQkI7YmFja2dyb3VuZC1jb2xvcjojRjdGN0Y3O30nICtcclxuXHQgICAgICAgICAgICAgICAgJ3RhYmxlIHRyLmZpcnN0Um93IHRoe2JvcmRlci10b3Atd2lkdGg6MnB4O30nICtcclxuXHQgICAgICAgICAgICAgICAgJy51ZS10YWJsZS1pbnRlcmxhY2UtY29sb3Itc2luZ2xleyBiYWNrZ3JvdW5kLWNvbG9yOiAjZmNmY2ZjOyB9IC51ZS10YWJsZS1pbnRlcmxhY2UtY29sb3ItZG91YmxleyBiYWNrZ3JvdW5kLWNvbG9yOiAjZjdmYWZmOyB9JyArXHJcblx0ICAgICAgICAgICAgICAgICd0ZCBwe21hcmdpbjowO3BhZGRpbmc6MDt9JywgbWUuZG9jdW1lbnQpO1xyXG5cclxuXHQgICAgICAgIHZhciB0YWJsZUNvcHlMaXN0LCBpc0Z1bGxDb2wsIGlzRnVsbFJvdztcclxuXHQgICAgICAgIC8v5rOo5YaMZGVsL2JhY2tzcGFjZeS6i+S7tlxyXG5cdCAgICAgICAgbWUuYWRkTGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoY21kLCBldnQpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZXZ0LmtleUNvZGUgfHwgZXZ0LndoaWNoO1xyXG5cclxuXHQgICAgICAgICAgICBpZiAoa2V5Q29kZSA9PSA4KSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB2YXIgdXQgPSBnZXRVRVRhYmxlQnlTZWxlY3RlZChtZSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh1dCAmJiB1dC5zZWxlY3RlZFRkcy5sZW5ndGgpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodXQuaXNGdWxsQ29sKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5leGVjQ29tbWFuZCgnZGVsZXRlY29sJylcclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXQuaXNGdWxsUm93KCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5leGVjQ29tbWFuZCgnZGVsZXRlcm93JylcclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdkZWxjZWxscycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucHJldmVudERlZmF1bHQoZXZ0KTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgdmFyIGNhcHRpb24gPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKG1lLnNlbGVjdGlvbi5nZXRTdGFydCgpLCAnY2FwdGlvbicsIHRydWUpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCAmJiBjYXB0aW9uICYmIGlzRW1wdHlCbG9jayhjYXB0aW9uKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdzYXZlU2NlbmUnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IGNhcHRpb24ucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShjYXB0aW9uKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHRhYmxlLnJvd3NbMF0uY2VsbHNbMF0sIDApLnNldEN1cnNvcihmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgaWYgKGtleUNvZGUgPT0gNDYpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHV0ID0gZ2V0VUVUYWJsZUJ5U2VsZWN0ZWQobWUpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodXQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnc2F2ZVNjZW5lJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gdXQuc2VsZWN0ZWRUZHNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5maWxsTm9kZShtZS5kb2N1bWVudCwgY2kpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucHJldmVudERlZmF1bHQoZXZ0KTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmIChrZXlDb2RlID09IDEzKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB2YXIgcm5nID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXB0aW9uID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuc3RhcnRDb250YWluZXIsICdjYXB0aW9uJywgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjYXB0aW9uKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKGNhcHRpb24sICd0YWJsZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFybmcuY29sbGFwc2VkKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJuZy5kZWxldGVDb250ZW50cygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnc2F2ZVNjZW5lJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYXB0aW9uKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJuZy5zZXRTdGFydCh0YWJsZS5yb3dzWzBdLmNlbGxzWzBdLCAwKS5zZXRDdXJzb3IoZmFsc2UsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnByZXZlbnREZWZhdWx0KGV2dCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKHJuZy5jb2xsYXBzZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocm5nLnN0YXJ0Q29udGFpbmVyLCAndGFibGUnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjZWxsID0gdGFibGUucm93c1swXS5jZWxsc1swXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKG1lLnNlbGVjdGlvbi5nZXRTdGFydCgpLCBbJ3RkJywgJ3RoJ10sIHRydWUpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVOb2RlID0gdGFibGUucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjZWxsID09PSBzdGFydCAmJiAoIXByZU5vZGUgfHwgcHJlTm9kZS5ub2RlVHlwZSA9PSAxICYmIHByZU5vZGUudGFnTmFtZSA9PSAnVEFCTEUnICkgJiYgZG9tVXRpbHMuaXNTdGFydEluYmxvY2socm5nKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlyc3QgPSBkb21VdGlscy5maW5kUGFyZW50KG1lLnNlbGVjdGlvbi5nZXRTdGFydCgpLCBmdW5jdGlvbihuKXtyZXR1cm4gZG9tVXRpbHMuaXNCbG9ja0VsbShuKX0sIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihmaXJzdCAmJiAoIC90KGh8ZCkvaS50ZXN0KGZpcnN0LnRhZ05hbWUpIHx8IGZpcnN0ID09PSAgc3RhcnQuZmlyc3RDaGlsZCApKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmV4ZWNDb21tYW5kKCdpbnNlcnRwYXJhZ3JhcGhiZWZvcmV0YWJsZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucHJldmVudERlZmF1bHQoZXZ0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIGlmICgoZXZ0LmN0cmxLZXkgfHwgZXZ0Lm1ldGFLZXkpICYmIGV2dC5rZXlDb2RlID09ICc2NycpIHtcclxuXHQgICAgICAgICAgICAgICAgdGFibGVDb3B5TGlzdCA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB1dCA9IGdldFVFVGFibGVCeVNlbGVjdGVkKG1lKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHV0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdGRzID0gdXQuc2VsZWN0ZWRUZHM7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpc0Z1bGxDb2wgPSB1dC5pc0Z1bGxDb2woKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlzRnVsbFJvdyA9IHV0LmlzRnVsbFJvdygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGFibGVDb3B5TGlzdCA9IFtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBbdXQuY2xvbmVDZWxsKHRkc1swXSxudWxsLHRydWUpXVxyXG5cdCAgICAgICAgICAgICAgICAgICAgXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxLCBjaTsgY2kgPSB0ZHNbaV07IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaS5wYXJlbnROb2RlICE9PSB0ZHNbaSAtIDFdLnBhcmVudE5vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFibGVDb3B5TGlzdC5wdXNoKFt1dC5jbG9uZUNlbGwoY2ksbnVsbCx0cnVlKV0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlQ29weUxpc3RbdGFibGVDb3B5TGlzdC5sZW5ndGggLSAxXS5wdXNoKHV0LmNsb25lQ2VsbChjaSxudWxsLHRydWUpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICBtZS5hZGRMaXN0ZW5lcihcInRhYmxlaGFzZGVsZXRlZFwiLGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgdG9nZ2xlRHJhZ2dhYmxlU3RhdGUodGhpcywgZmFsc2UsIFwiXCIsIG51bGwpO1xyXG5cdCAgICAgICAgICAgIGlmIChkcmFnQnV0dG9uKWRvbVV0aWxzLnJlbW92ZShkcmFnQnV0dG9uKTtcclxuXHQgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgIG1lLmFkZExpc3RlbmVyKCdiZWZvcmVwYXN0ZScsIGZ1bmN0aW9uIChjbWQsIGh0bWwpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgIHZhciBybmcgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICBpZiAoZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuc3RhcnRDb250YWluZXIsICdjYXB0aW9uJywgdHJ1ZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGRpdiA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0ICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sLmh0bWw7XHJcblx0ICAgICAgICAgICAgICAgIC8vdHJhY2U6MzcyOVxyXG5cdCAgICAgICAgICAgICAgICBodG1sLmh0bWwgPSBkaXZbYnJvd3Nlci5pZTliZWxvdyA/ICdpbm5lclRleHQnIDogJ3RleHRDb250ZW50J107XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdmFyIHRhYmxlID0gZ2V0VUVUYWJsZUJ5U2VsZWN0ZWQobWUpO1xyXG5cdCAgICAgICAgICAgIGlmICh0YWJsZUNvcHlMaXN0KSB7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnc2F2ZVNjZW5lJyk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBybmcgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRkID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuc3RhcnRDb250YWluZXIsIFsndGQnLCAndGgnXSwgdHJ1ZSksIHRtcE5vZGUsIHByZU5vZGU7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0ZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHV0ID0gZ2V0VUVUYWJsZSh0ZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaXNGdWxsUm93KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvd0luZGV4ID0gdXQuZ2V0Q2VsbEluZm8odGQpLnJvd0luZGV4O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZC50YWdOYW1lID09ICdUSCcpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93SW5kZXgrKztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHRhYmxlQ29weUxpc3RbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRyID0gdXQuaW5zZXJ0Um93KHJvd0luZGV4KyssIFwidGRcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBjajsgY2ogPSBjaVtqXTsgaisrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbCA9IHRyLmNlbGxzW2pdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjZWxsKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbCA9IHRyLmluc2VydENlbGwoailcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuaW5uZXJIVE1MID0gY2ouaW5uZXJIVE1MO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2ouZ2V0QXR0cmlidXRlKCd3aWR0aCcpICYmIGNlbGwuc2V0QXR0cmlidXRlKCd3aWR0aCcsIGNqLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjai5nZXRBdHRyaWJ1dGUoJ3ZBbGlnbicpICYmIGNlbGwuc2V0QXR0cmlidXRlKCd2QWxpZ24nLCBjai5nZXRBdHRyaWJ1dGUoJ3ZBbGlnbicpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNqLmdldEF0dHJpYnV0ZSgnYWxpZ24nKSAmJiBjZWxsLnNldEF0dHJpYnV0ZSgnYWxpZ24nLCBjai5nZXRBdHRyaWJ1dGUoJ2FsaWduJykpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2ouc3R5bGUuY3NzVGV4dCAmJiAoY2VsbC5zdHlsZS5jc3NUZXh0ID0gY2ouc3R5bGUuY3NzVGV4dClcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMCwgY2o7IGNqID0gdHIuY2VsbHNbal07IGorKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFjaVtqXSlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNqLmlubmVySFRNTCA9IGNpW2pdLmlubmVySFRNTDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpW2pdLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSAmJiBjai5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgY2lbal0uZ2V0QXR0cmlidXRlKCd3aWR0aCcpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpW2pdLmdldEF0dHJpYnV0ZSgndkFsaWduJykgJiYgY2ouc2V0QXR0cmlidXRlKCd2QWxpZ24nLCBjaVtqXS5nZXRBdHRyaWJ1dGUoJ3ZBbGlnbicpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpW2pdLmdldEF0dHJpYnV0ZSgnYWxpZ24nKSAmJiBjai5zZXRBdHRyaWJ1dGUoJ2FsaWduJywgY2lbal0uZ2V0QXR0cmlidXRlKCdhbGlnbicpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpW2pdLnN0eWxlLmNzc1RleHQgJiYgKGNqLnN0eWxlLmNzc1RleHQgPSBjaVtqXS5zdHlsZS5jc3NUZXh0KVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGdWxsQ29sKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxJbmZvID0gdXQuZ2V0Q2VsbEluZm8odGQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF4Q29sTnVtID0gMDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGNpID0gdGFibGVDb3B5TGlzdFswXSwgY2o7IGNqID0gY2lbaisrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heENvbE51bSArPSBjai5jb2xTcGFuIHx8IDE7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuX19oYXNFbnRlckV4ZWNDb21tYW5kID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG1heENvbE51bTsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5leGVjQ29tbWFuZCgnaW5zZXJ0Y29sJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuX19oYXNFbnRlckV4ZWNDb21tYW5kID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkID0gdXQudGFibGUucm93c1swXS5jZWxsc1tjZWxsSW5mby5jZWxsSW5kZXhdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGQudGFnTmFtZSA9PSAnVEgnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZCA9IHV0LnRhYmxlLnJvd3NbMV0uY2VsbHNbY2VsbEluZm8uY2VsbEluZGV4XTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gdGFibGVDb3B5TGlzdFtpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBOb2RlID0gdGQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBjajsgY2ogPSBjaVtqKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGQuaW5uZXJIVE1MID0gY2ouaW5uZXJIVE1MO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdG9kbyDlrprliLblpITnkIZcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjai5nZXRBdHRyaWJ1dGUoJ3dpZHRoJykgJiYgdGQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIGNqLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2ouZ2V0QXR0cmlidXRlKCd2QWxpZ24nKSAmJiB0ZC5zZXRBdHRyaWJ1dGUoJ3ZBbGlnbicsIGNqLmdldEF0dHJpYnV0ZSgndkFsaWduJykpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNqLmdldEF0dHJpYnV0ZSgnYWxpZ24nKSAmJiB0ZC5zZXRBdHRyaWJ1dGUoJ2FsaWduJywgY2ouZ2V0QXR0cmlidXRlKCdhbGlnbicpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjai5zdHlsZS5jc3NUZXh0ICYmICh0ZC5zdHlsZS5jc3NUZXh0ID0gY2ouc3R5bGUuY3NzVGV4dCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlTm9kZSA9IHRkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkID0gdGQubmV4dFNpYmxpbmc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjbG9uZVRkID0gY2ouY2xvbmVOb2RlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZUF0dHJpYnV0ZXMoY2xvbmVUZCwgWydjbGFzcycsICdyb3dTcGFuJywgJ2NvbFNwYW4nXSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZU5vZGUucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChjbG9uZVRkKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkID0gdXQuZ2V0TmV4dENlbGwodG1wTm9kZSwgdHJ1ZSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGFibGVDb3B5TGlzdFtpXSlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbEluZm8gPSB1dC5nZXRDZWxsSW5mbyh0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0LnRhYmxlLmluc2VydFJvdyh1dC50YWJsZS5yb3dzLmxlbmd0aCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dC51cGRhdGUoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRkID0gdXQuZ2V0VlNpZGVDZWxsKHRtcE5vZGUsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgdXQudXBkYXRlKCk7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0YWJsZSA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gdGFibGVDb3B5TGlzdFtpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ciA9IHRhYmxlLmluc2VydFJvdyh0YWJsZS5yb3dzLmxlbmd0aCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGNqOyBjaiA9IGNpW2orK107KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsb25lVGQgPSBVVC5jbG9uZUNlbGwoY2osbnVsbCx0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlQXR0cmlidXRlcyhjbG9uZVRkLCBbJ2NsYXNzJ10pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ci5hcHBlbmRDaGlsZChjbG9uZVRkKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaiA9PSAyICYmIGNsb25lVGQucm93U3BhbiA+IDEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xvbmVUZC5yb3dTcGFuID0gMTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IGdldERlZmF1bHRWYWx1ZShtZSksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBtZS5ib2R5Lm9mZnNldFdpZHRoIC1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG5lZWRJRUhhY2sgPyBwYXJzZUludChkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKG1lLmJvZHksICdtYXJnaW4tbGVmdCcpLCAxMCkgKiAyIDogMCkgLSBkZWZhdWx0VmFsdWUudGFibGVCb3JkZXIgKiAyIC0gKG1lLm9wdGlvbnMub2Zmc2V0V2lkdGggfHwgMCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5leGVjQ29tbWFuZCgnaW5zZXJ0SFRNTCcsICc8dGFibGUgICcgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICggaXNGdWxsQ29sICYmIGlzRnVsbFJvdyA/ICd3aWR0aD1cIicgKyB3aWR0aCArICdcIicgOiAnJykgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICc+JyArIHRhYmxlLmlubmVySFRNTC5yZXBsYWNlKC8+XFxzKjwvZywgJz48JykucmVwbGFjZSgvXFxidGhcXGIvZ2ksIFwidGRcIikgKyAnPC90YWJsZT4nKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnY29udGVudGNoYW5nZScpO1xyXG5cdCAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgICAgICBodG1sLmh0bWwgPSAnJztcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGRpdiA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksIHRhYmxlcztcclxuXHQgICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCA9IGh0bWwuaHRtbDtcclxuXHQgICAgICAgICAgICAgICAgdGFibGVzID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGFibGVcIik7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKG1lLnNlbGVjdGlvbi5nZXRTdGFydCgpLCAndGFibGUnKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdXRpbHMuZWFjaCh0YWJsZXMsIGZ1bmN0aW9uICh0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHQpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKG1lLnNlbGVjdGlvbi5nZXRTdGFydCgpLCAnY2FwdGlvbicsIHRydWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZGl2LmlubmVySFRNTCA9IGRpdlticm93c2VyLmllID8gJ2lubmVyVGV4dCcgOiAndGV4dENvbnRlbnQnXTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHV0aWxzLmVhY2godGFibGVzLCBmdW5jdGlvbiAodGFibGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVTdHlsZVNpemUodGFibGUsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZUF0dHJpYnV0ZXModGFibGUsIFsnc3R5bGUnLCAnYm9yZGVyJ10pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmVhY2goZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFibGUsIFwidGRcIiksIGZ1bmN0aW9uICh0ZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eUJsb2NrKHRkKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuZmlsbE5vZGUobWUuZG9jdW1lbnQsIHRkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVTdHlsZVNpemUodGQsIHRydWUpO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZUF0dHJpYnV0ZXModGQsIFsnc3R5bGUnXSlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGh0bWwuaHRtbCA9IGRpdi5pbm5lckhUTUw7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgbWUuYWRkTGlzdGVuZXIoJ2FmdGVycGFzdGUnLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaChkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZShtZS5ib2R5LCBcInRhYmxlXCIpLCBmdW5jdGlvbiAodGFibGUpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRhYmxlLm9mZnNldFdpZHRoID4gbWUuYm9keS5vZmZzZXRXaWR0aCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IGdldERlZmF1bHRWYWx1ZShtZSwgdGFibGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGFibGUuc3R5bGUud2lkdGggPSBtZS5ib2R5Lm9mZnNldFdpZHRoIC0gKG5lZWRJRUhhY2sgPyBwYXJzZUludChkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKG1lLmJvZHksICdtYXJnaW4tbGVmdCcpLCAxMCkgKiAyIDogMCkgLSBkZWZhdWx0VmFsdWUudGFibGVCb3JkZXIgKiAyIC0gKG1lLm9wdGlvbnMub2Zmc2V0V2lkdGggfHwgMCkgKyAncHgnXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICBtZS5hZGRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB0YWJsZUNvcHlMaXN0ID0gbnVsbDtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgdmFyIHRpbWVyO1xyXG5cdCAgICAgICAgbWUuYWRkTGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcclxuXHQgICAgICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcm5nID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgICAgICBjZWxsID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShybmcuc3RhcnRDb250YWluZXIsIFsndGgnLCAndGQnXSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChjZWxsKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGUgPSBjZWxsLnBhcmVudE5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRhYmxlLm9mZnNldFdpZHRoID4gdGFibGUuZ2V0QXR0cmlidXRlKFwid2lkdGhcIikpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLndvcmRCcmVhayA9IFwiYnJlYWstYWxsXCI7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgfSwgMTAwKTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgbWUuYWRkTGlzdGVuZXIoXCJzZWxlY3Rpb25jaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHRvZ2dsZURyYWdnYWJsZVN0YXRlKG1lLCBmYWxzZSwgXCJcIiwgbnVsbCk7XHJcblx0ICAgICAgICB9KTtcclxuXHJcblxyXG5cdCAgICAgICAgLy/lhoXlrrnlj5jljJbml7bop6blj5HntKLlvJXmm7TmlrBcclxuXHQgICAgICAgIC8vdG9kbyDlj6/lkKbogIPomZHmoIforrDmo4DmtYvvvIzlpoLmnpzkuI3mtonlj4rooajmoLznmoTlj5jljJblsLHkuI3ov5vooYzntKLlvJXph43lu7rlkozmm7TmlrBcclxuXHQgICAgICAgIG1lLmFkZExpc3RlbmVyKFwiY29udGVudGNoYW5nZVwiLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICAvL+WwveWPr+iDveaOkumZpOS4gOS6m+S4jemcgOimgeabtOaWsOeahOeKtuWGtVxyXG5cdCAgICAgICAgICAgIGhpZGVEcmFnTGluZShtZSk7XHJcblx0ICAgICAgICAgICAgaWYgKGdldFVFVGFibGVCeVNlbGVjdGVkKG1lKSlyZXR1cm47XHJcblx0ICAgICAgICAgICAgdmFyIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgIHZhciBzdGFydCA9IHJuZy5zdGFydENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICBzdGFydCA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUoc3RhcnQsIFsndGQnLCAndGgnXSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaChkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZShtZS5kb2N1bWVudCwgJ3RhYmxlJyksIGZ1bmN0aW9uICh0YWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobWUuZmlyZUV2ZW50KFwiZXhjbHVkZXRhYmxlXCIsIHRhYmxlKSA9PT0gdHJ1ZSkgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICB0YWJsZS51ZVRhYmxlID0gbmV3IFVUKHRhYmxlKTtcclxuXHQgICAgICAgICAgICAgICAgLy90cmFjZTozNzQyXHJcbi8vXHQgICAgICAgICAgICAgICAgdXRpbHMuZWFjaChkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZShtZS5kb2N1bWVudCwgJ3RkJyksIGZ1bmN0aW9uICh0ZCkge1xyXG5cdC8vXHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5pc0VtcHR5QmxvY2sodGQpICYmIHRkICE9PSBzdGFydCkge1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuZmlsbE5vZGUobWUuZG9jdW1lbnQsIHRkKTtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChicm93c2VyLmllICYmIGJyb3dzZXIudmVyc2lvbiA9PSA2KSB7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGQuaW5uZXJIVE1MID0gJyZuYnNwOydcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuLy9cdCAgICAgICAgICAgICAgICAgICAgfVxyXG4vL1x0ICAgICAgICAgICAgICAgIH0pO1xyXG4vL1x0ICAgICAgICAgICAgICAgIHV0aWxzLmVhY2goZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUobWUuZG9jdW1lbnQsICd0aCcpLCBmdW5jdGlvbiAodGgpIHtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzRW1wdHlCbG9jayh0aCkgJiYgdGggIT09IHN0YXJ0KSB7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5maWxsTm9kZShtZS5kb2N1bWVudCwgdGgpO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJyb3dzZXIuaWUgJiYgYnJvd3Nlci52ZXJzaW9uID09IDYpIHtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aC5pbm5lckhUTUwgPSAnJm5ic3A7J1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4vL1x0ICAgICAgICAgICAgICAgICAgICB9XHJcbi8vXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlLm9ubW91c2VvdmVyID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCd0YWJsZW1vdXNlb3ZlcicsIHRhYmxlKTtcclxuXHQgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgdGFibGUub25tb3VzZW1vdmUgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3RhYmxlbW91c2Vtb3ZlJywgdGFibGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUub3B0aW9ucy50YWJsZURyYWdhYmxlICYmIHRvZ2dsZURyYWdCdXR0b24odHJ1ZSwgdGhpcywgbWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdXRpbHMuZGVmZXIoZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ2NvbnRlbnRjaGFuZ2UnLDUwKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSx0cnVlKVxyXG5cdCAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICB0YWJsZS5vbm1vdXNlb3V0ID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCd0YWJsZW1vdXNlb3V0JywgdGFibGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdG9nZ2xlRHJhZ2dhYmxlU3RhdGUobWUsIGZhbHNlLCBcIlwiLCBudWxsKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGhpZGVEcmFnTGluZShtZSk7XHJcblx0ICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlLm9uY2xpY2sgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBldnQgPSBtZS53aW5kb3cuZXZlbnQgfHwgZXZ0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGdldFBhcmVudFRkT3JUaChldnQudGFyZ2V0IHx8IGV2dC5zcmNFbGVtZW50KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0KXJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB1dCA9IGdldFVFVGFibGUodGFyZ2V0KSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0YWJsZSA9IHV0LnRhYmxlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxJbmZvID0gdXQuZ2V0Q2VsbEluZm8odGFyZ2V0KSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjZWxsc1JhbmdlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICBpZiAoXCJ0b3BMZWZ0XCIgPT0gaW5Qb3NpdGlvbih0YWJsZSwgbW91c2VDb29yZHMoZXZ0KSkpIHtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzUmFuZ2UgPSB1dC5nZXRDZWxsc1JhbmdlKHV0LnRhYmxlLnJvd3NbMF0uY2VsbHNbMF0sIHV0LmdldExhc3RDZWxsKCkpO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgdXQuc2V0U2VsZWN0ZWQoY2VsbHNSYW5nZSk7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIH1cclxuLy9cdCAgICAgICAgICAgICAgICAgICAgaWYgKFwiYm90dG9tUmlnaHRcIiA9PSBpblBvc2l0aW9uKHRhYmxlLCBtb3VzZUNvb3JkcyhldnQpKSkge1xyXG5cdC8vXHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChpblRhYmxlU2lkZSh0YWJsZSwgdGFyZ2V0LCBldnQsIHRydWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuZFRkQ29sID0gdXQuZ2V0Q2VsbCh1dC5pbmRleFRhYmxlW3V0LnJvd3NOdW0gLSAxXVtjZWxsSW5mby5jb2xJbmRleF0ucm93SW5kZXgsIHV0LmluZGV4VGFibGVbdXQucm93c051bSAtIDFdW2NlbGxJbmZvLmNvbEluZGV4XS5jZWxsSW5kZXgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldnQuc2hpZnRLZXkgJiYgdXQuc2VsZWN0ZWRUZHMubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dC5zZWxlY3RlZFRkc1swXSAhPT0gZW5kVGRDb2wpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzUmFuZ2UgPSB1dC5nZXRDZWxsc1JhbmdlKHV0LnNlbGVjdGVkVGRzWzBdLCBlbmRUZENvbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dC5zZXRTZWxlY3RlZChjZWxsc1JhbmdlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJuZyAmJiBybmcuc2VsZWN0Tm9kZUNvbnRlbnRzKGVuZFRkQ29sKS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgIT09IGVuZFRkQ29sKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsc1JhbmdlID0gdXQuZ2V0Q2VsbHNSYW5nZSh0YXJnZXQsIGVuZFRkQ29sKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0LnNldFNlbGVjdGVkKGNlbGxzUmFuZ2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm5nICYmIHJuZy5zZWxlY3ROb2RlQ29udGVudHMoZW5kVGRDb2wpLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChpblRhYmxlU2lkZSh0YWJsZSwgdGFyZ2V0LCBldnQpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuZFRkUm93ID0gdXQuZ2V0Q2VsbCh1dC5pbmRleFRhYmxlW2NlbGxJbmZvLnJvd0luZGV4XVt1dC5jb2xzTnVtIC0gMV0ucm93SW5kZXgsIHV0LmluZGV4VGFibGVbY2VsbEluZm8ucm93SW5kZXhdW3V0LmNvbHNOdW0gLSAxXS5jZWxsSW5kZXgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldnQuc2hpZnRLZXkgJiYgdXQuc2VsZWN0ZWRUZHMubGVuZ3RoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dC5zZWxlY3RlZFRkc1swXSAhPT0gZW5kVGRSb3cpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxzUmFuZ2UgPSB1dC5nZXRDZWxsc1JhbmdlKHV0LnNlbGVjdGVkVGRzWzBdLCBlbmRUZFJvdyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1dC5zZXRTZWxlY3RlZChjZWxsc1JhbmdlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJuZyAmJiBybmcuc2VsZWN0Tm9kZUNvbnRlbnRzKGVuZFRkUm93KS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQgIT09IGVuZFRkUm93KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsc1JhbmdlID0gdXQuZ2V0Q2VsbHNSYW5nZSh0YXJnZXQsIGVuZFRkUm93KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0LnNldFNlbGVjdGVkKGNlbGxzUmFuZ2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm5nICYmIHJuZy5zZWxlY3ROb2RlQ29udGVudHMoZW5kVGRSb3cpLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgICAgICBzd2l0Y2hCb3JkZXJDb2xvcihtZSwgdHJ1ZSk7XHJcblx0ICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICBkb21VdGlscy5vbihtZS5kb2N1bWVudCwgXCJtb3VzZW1vdmVcIiwgbW91c2VNb3ZlRXZlbnQpO1xyXG5cclxuXHQgICAgICAgIGRvbVV0aWxzLm9uKG1lLmRvY3VtZW50LCBcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uIChldnQpIHtcclxuXHQgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudDtcclxuXHQgICAgICAgICAgICBpZiAodGFyZ2V0LnRhZ05hbWUgPT0gXCJUQUJMRVwiKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRvZ2dsZURyYWdnYWJsZVN0YXRlKG1lLCBmYWxzZSwgXCJcIiwgbnVsbCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICAvKipcclxuXHQgICAgICAgICAqIOihqOagvOmalOihjOWPmOiJslxyXG5cdCAgICAgICAgICovXHJcblx0ICAgICAgICBtZS5hZGRMaXN0ZW5lcihcImludGVybGFjZXRhYmxlXCIsZnVuY3Rpb24odHlwZSx0YWJsZSxjbGFzc0xpc3Qpe1xyXG5cdCAgICAgICAgICAgIGlmKCF0YWJsZSkgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgIHJvd3MgPSB0YWJsZS5yb3dzLFxyXG5cdCAgICAgICAgICAgICAgICBsZW4gPSByb3dzLmxlbmd0aCxcclxuXHQgICAgICAgICAgICAgICAgZ2V0Q2xhc3MgPSBmdW5jdGlvbihsaXN0LGluZGV4LHJlcGVhdCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGlzdFtpbmRleF0gPyBsaXN0W2luZGV4XSA6IHJlcGVhdCA/IGxpc3RbaW5kZXggJSBsaXN0Lmxlbmd0aF06IFwiXCI7XHJcblx0ICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgZm9yKHZhciBpID0gMDtpPGxlbjtpKyspe1xyXG5cdCAgICAgICAgICAgICAgICByb3dzW2ldLmNsYXNzTmFtZSA9IGdldENsYXNzKCBjbGFzc0xpc3R8fCBtZS5vcHRpb25zLmNsYXNzTGlzdCxpLHRydWUpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgbWUuYWRkTGlzdGVuZXIoXCJ1bmludGVybGFjZXRhYmxlXCIsZnVuY3Rpb24odHlwZSx0YWJsZSl7XHJcblx0ICAgICAgICAgICAgaWYoIXRhYmxlKSByZXR1cm47XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgcm93cyA9IHRhYmxlLnJvd3MsXHJcblx0ICAgICAgICAgICAgICAgIGNsYXNzTGlzdCA9IG1lLm9wdGlvbnMuY2xhc3NMaXN0LFxyXG5cdCAgICAgICAgICAgICAgICBsZW4gPSByb3dzLmxlbmd0aDtcclxuXHQgICAgICAgICAgICBmb3IodmFyIGkgPSAwO2k8bGVuO2krKyl7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZUNsYXNzZXMoIHJvd3NbaV0sIGNsYXNzTGlzdCApO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgIG1lLmFkZExpc3RlbmVyKFwibW91c2Vkb3duXCIsIG1vdXNlRG93bkV2ZW50KTtcclxuXHQgICAgICAgIG1lLmFkZExpc3RlbmVyKFwibW91c2V1cFwiLCBtb3VzZVVwRXZlbnQpO1xyXG5cdCAgICAgICAgLy/mi5bliqjnmoTml7blgJnop6blj5Ftb3VzZXVwXHJcblx0ICAgICAgICBkb21VdGlscy5vbiggbWUuYm9keSwgJ2RyYWdzdGFydCcsIGZ1bmN0aW9uKCBldnQgKXtcclxuXHQgICAgICAgICAgICBtb3VzZVVwRXZlbnQuY2FsbCggbWUsICdkcmFnc3RhcnQnLCBldnQgKTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgbWUuYWRkT3V0cHV0UnVsZShmdW5jdGlvbihyb290KXtcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKHJvb3QuZ2V0Tm9kZXNCeVRhZ05hbWUoJ2RpdicpLGZ1bmN0aW9uKG4pe1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobi5nZXRBdHRyKCdpZCcpID09ICd1ZV90YWJsZURyYWdMaW5lJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG4pO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICB2YXIgY3VycmVudFJvd0luZGV4ID0gMDtcclxuXHQgICAgICAgIG1lLmFkZExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICBjdXJyZW50Um93SW5kZXggPSAwO1xyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICBtZS5hZGRMaXN0ZW5lcigndGFia2V5ZG93bicsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICBjb21tb24gPSByYW5nZS5nZXRDb21tb25BbmNlc3Rvcih0cnVlLCB0cnVlKSxcclxuXHQgICAgICAgICAgICAgICAgdGFibGUgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKGNvbW1vbiwgJ3RhYmxlJyk7XHJcblx0ICAgICAgICAgICAgaWYgKHRhYmxlKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKGNvbW1vbiwgJ2NhcHRpb24nLCB0cnVlKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNlbGwgPSBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWJsZSwgJ3RoIHRkJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoY2VsbCAmJiBjZWxsLmxlbmd0aCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KGNlbGxbMF0sIDApLnNldEN1cnNvcihmYWxzZSwgdHJ1ZSlcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBjZWxsID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShjb21tb24sIFsndGQnLCAndGgnXSwgdHJ1ZSksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdWEgPSBnZXRVRVRhYmxlKGNlbGwpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY3VycmVudFJvd0luZGV4ID0gY2VsbC5yb3dTcGFuID4gMSA/IGN1cnJlbnRSb3dJbmRleCA6IHVhLmdldENlbGxJbmZvKGNlbGwpLnJvd0luZGV4O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRDZWxsID0gdWEuZ2V0VGFiTmV4dENlbGwoY2VsbCwgY3VycmVudFJvd0luZGV4KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0Q2VsbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc0VtcHR5QmxvY2sobmV4dENlbGwpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KG5leHRDZWxsLCAwKS5zZXRDdXJzb3IoZmFsc2UsIHRydWUpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0Tm9kZUNvbnRlbnRzKG5leHRDZWxsKS5zZWxlY3QoKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdzYXZlU2NlbmUnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5fX2hhc0VudGVyRXhlY0NvbW1hbmQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhlY0NvbW1hbmQoJ2luc2VydHJvd25leHQnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5fX2hhc0VudGVyRXhlY0NvbW1hbmQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQodGFibGUucm93c1t0YWJsZS5yb3dzLmxlbmd0aCAtIDFdLmNlbGxzWzBdLCAwKS5zZXRDdXJzb3IoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIGJyb3dzZXIuaWUgJiYgbWUuYWRkTGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB0b2dnbGVEcmFnZ2FibGVTdGF0ZSh0aGlzLCBmYWxzZSwgXCJcIiwgbnVsbCk7XHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIG1lLmFkZExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbiAodHlwZSwgZXZ0KSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICAvL+WkhOeQhuWcqOihqOagvOeahOacgOWQjuS4gOS4qui+k+WFpXRhYuS6p+eUn+aWsOeahOihqOagvFxyXG5cdCAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZXZ0LmtleUNvZGUgfHwgZXZ0LndoaWNoO1xyXG5cdCAgICAgICAgICAgIGlmIChrZXlDb2RlID09IDggfHwga2V5Q29kZSA9PSA0Nikge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHZhciBub3RDdHJsS2V5ID0gIWV2dC5jdHJsS2V5ICYmICFldnQubWV0YUtleSAmJiAhZXZ0LnNoaWZ0S2V5ICYmICFldnQuYWx0S2V5O1xyXG5cdCAgICAgICAgICAgIG5vdEN0cmxLZXkgJiYgcmVtb3ZlU2VsZWN0ZWRDbGFzcyhkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZShtZS5ib2R5LCBcInRkXCIpKTtcclxuXHQgICAgICAgICAgICB2YXIgdXQgPSBnZXRVRVRhYmxlQnlTZWxlY3RlZChtZSk7XHJcblx0ICAgICAgICAgICAgaWYgKCF1dCkgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgIG5vdEN0cmxLZXkgJiYgdXQuY2xlYXJTZWxlY3RlZCgpO1xyXG5cdCAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgbWUuYWRkTGlzdGVuZXIoXCJiZWZvcmVnZXRjb250ZW50XCIsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICBzd2l0Y2hCb3JkZXJDb2xvcih0aGlzLCBmYWxzZSk7XHJcblx0ICAgICAgICAgICAgYnJvd3Nlci5pZSAmJiB1dGlscy5lYWNoKHRoaXMuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2NhcHRpb24nKSwgZnVuY3Rpb24gKGNpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChkb21VdGlscy5pc0VtcHR5Tm9kZShjaSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNpLmlubmVySFRNTCA9ICcmbmJzcDsnXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgbWUuYWRkTGlzdGVuZXIoXCJhZnRlcmdldGNvbnRlbnRcIiwgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHN3aXRjaEJvcmRlckNvbG9yKHRoaXMsIHRydWUpO1xyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICBtZS5hZGRMaXN0ZW5lcihcImdldEFsbEh0bWxcIiwgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJlbW92ZVNlbGVjdGVkQ2xhc3MobWUuZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJ0ZFwiKSk7XHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIC8v5L+u5q2j5YWo5bGP54q25oCB5LiL5o+S5YWl55qE6KGo5qC85a695bqm5Zyo6Z2e5YWo5bGP54q25oCB5LiL5pKR5byA57yW6L6R5Zmo55qE5oOF5Ya1XHJcblx0ICAgICAgICBtZS5hZGRMaXN0ZW5lcihcImZ1bGxzY3JlZW5jaGFuZ2VkXCIsIGZ1bmN0aW9uICh0eXBlLCBmdWxsc2NyZWVuKSB7XHJcblx0ICAgICAgICAgICAgaWYgKCFmdWxsc2NyZWVuKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciByYXRpbyA9IHRoaXMuYm9keS5vZmZzZXRXaWR0aCAvIGRvY3VtZW50LmJvZHkub2Zmc2V0V2lkdGgsXHJcblx0ICAgICAgICAgICAgICAgICAgICB0YWJsZXMgPSBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh0aGlzLmJvZHksIFwidGFibGVcIik7XHJcblx0ICAgICAgICAgICAgICAgIHV0aWxzLmVhY2godGFibGVzLCBmdW5jdGlvbiAodGFibGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICh0YWJsZS5vZmZzZXRXaWR0aCA8IG1lLmJvZHkub2Zmc2V0V2lkdGgpIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0ZHMgPSBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWJsZSwgXCJ0ZFwiKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBiYWNrV2lkdGhzID0gW107XHJcblx0ICAgICAgICAgICAgICAgICAgICB1dGlscy5lYWNoKHRkcywgZnVuY3Rpb24gKHRkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYmFja1dpZHRocy5wdXNoKHRkLm9mZnNldFdpZHRoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRkOyB0ZCA9IHRkc1tpXTsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGQuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgTWF0aC5mbG9vcihiYWNrV2lkdGhzW2ldICogcmF0aW8pKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIE1hdGguZmxvb3IoZ2V0VGFibGVXaWR0aChtZSwgbmVlZElFSGFjaywgZ2V0RGVmYXVsdFZhbHVlKG1lKSkpKVxyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICAvL+mHjeWGmWV4ZWNDb21tYW5k5ZG95Luk77yM55So5LqO5aSE55CG5qGG6YCJ5pe255qE5aSE55CGXHJcblx0ICAgICAgICB2YXIgb2xkRXhlY0NvbW1hbmQgPSBtZS5leGVjQ29tbWFuZDtcclxuXHQgICAgICAgIG1lLmV4ZWNDb21tYW5kID0gZnVuY3Rpb24gKGNtZCwgZGF0YXRhdCkge1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICBhcmdzID0gYXJndW1lbnRzO1xyXG5cclxuXHQgICAgICAgICAgICBjbWQgPSBjbWQudG9Mb3dlckNhc2UoKTtcclxuXHQgICAgICAgICAgICB2YXIgdXQgPSBnZXRVRVRhYmxlQnlTZWxlY3RlZChtZSksIHRkcyxcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UgPSBuZXcgZG9tLlJhbmdlKG1lLmRvY3VtZW50KSxcclxuXHQgICAgICAgICAgICAgICAgY21kRnVuID0gbWUuY29tbWFuZHNbY21kXSB8fCBVRS5jb21tYW5kc1tjbWRdLFxyXG5cdCAgICAgICAgICAgICAgICByZXN1bHQ7XHJcblx0ICAgICAgICAgICAgaWYgKCFjbWRGdW4pIHJldHVybjtcclxuXHQgICAgICAgICAgICBpZiAodXQgJiYgIWNvbW1hbmRzW2NtZF0gJiYgIWNtZEZ1bi5ub3ROZWVkVW5kbyAmJiAhbWUuX19oYXNFbnRlckV4ZWNDb21tYW5kKSB7XHJcblx0ICAgICAgICAgICAgICAgIG1lLl9faGFzRW50ZXJFeGVjQ29tbWFuZCA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudChcImJlZm9yZWV4ZWNjb21tYW5kXCIsIGNtZCk7XHJcblx0ICAgICAgICAgICAgICAgIHRkcyA9IHV0LnNlbGVjdGVkVGRzO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbGFzdFN0YXRlID0gLTIsIGxhc3RWYWx1ZSA9IC0yLCB2YWx1ZSwgc3RhdGU7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0ZDsgdGQgPSB0ZHNbaV07IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGlzRW1wdHlCbG9jayh0ZCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydCh0ZCwgMCkuc2V0Q3Vyc29yKGZhbHNlLCB0cnVlKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlKHRkKS5zZWxlY3QodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IG1lLnF1ZXJ5Q29tbWFuZFN0YXRlKGNtZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG1lLnF1ZXJ5Q29tbWFuZFZhbHVlKGNtZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUgIT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFzdFN0YXRlICE9PSBzdGF0ZSB8fCBsYXN0VmFsdWUgIT09IHZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLl9pZ25vcmVDb250ZW50Q2hhbmdlID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gb2xkRXhlY0NvbW1hbmQuYXBwbHkobWUsIGFyZ3VtZW50cyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLl9pZ25vcmVDb250ZW50Q2hhbmdlID0gZmFsc2U7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYXN0U3RhdGUgPSBtZS5xdWVyeUNvbW1hbmRTdGF0ZShjbWQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RWYWx1ZSA9IG1lLnF1ZXJ5Q29tbWFuZFZhbHVlKGNtZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzRW1wdHlCbG9jayh0ZCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuZmlsbE5vZGUobWUuZG9jdW1lbnQsIHRkKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydCh0ZHNbMF0sIDApLnNocmlua0JvdW5kYXJ5KHRydWUpLnNldEN1cnNvcihmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnY29udGVudGNoYW5nZScpO1xyXG5cdCAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoXCJhZnRlcmV4ZWNjb21tYW5kXCIsIGNtZCk7XHJcblx0ICAgICAgICAgICAgICAgIG1lLl9faGFzRW50ZXJFeGVjQ29tbWFuZCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICBtZS5fc2VsZWN0aW9uQ2hhbmdlKCk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgcmVzdWx0ID0gb2xkRXhlY0NvbW1hbmQuYXBwbHkobWUsIGFyZ3VtZW50cyk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcblx0ICAgICAgICB9O1xyXG5cclxuXHJcblx0ICAgIH0pO1xyXG5cdCAgICAvKipcclxuXHQgICAgICog5Yig6Zmkb2Jq55qE5a696auYc3R5bGXvvIzmlLnmiJDlsZ7mgKflrr3pq5hcclxuXHQgICAgICogQHBhcmFtIG9ialxyXG5cdCAgICAgKiBAcGFyYW0gcmVwbGFjZVRvUHJvcGVydHlcclxuXHQgICAgICovXHJcblx0ICAgIGZ1bmN0aW9uIHJlbW92ZVN0eWxlU2l6ZShvYmosIHJlcGxhY2VUb1Byb3BlcnR5KSB7XHJcblx0ICAgICAgICByZW1vdmVTdHlsZShvYmosIFwid2lkdGhcIiwgdHJ1ZSk7XHJcblx0ICAgICAgICByZW1vdmVTdHlsZShvYmosIFwiaGVpZ2h0XCIsIHRydWUpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiByZW1vdmVTdHlsZShvYmosIHN0eWxlTmFtZSwgcmVwbGFjZVRvUHJvcGVydHkpIHtcclxuXHQgICAgICAgIGlmIChvYmouc3R5bGVbc3R5bGVOYW1lXSkge1xyXG5cdCAgICAgICAgICAgIHJlcGxhY2VUb1Byb3BlcnR5ICYmIG9iai5zZXRBdHRyaWJ1dGUoc3R5bGVOYW1lLCBwYXJzZUludChvYmouc3R5bGVbc3R5bGVOYW1lXSwgMTApKTtcclxuXHQgICAgICAgICAgICBvYmouc3R5bGVbc3R5bGVOYW1lXSA9IFwiXCI7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIGdldFBhcmVudFRkT3JUaChlbGUpIHtcclxuXHQgICAgICAgIGlmIChlbGUudGFnTmFtZSA9PSBcIlREXCIgfHwgZWxlLnRhZ05hbWUgPT0gXCJUSFwiKSByZXR1cm4gZWxlO1xyXG5cdCAgICAgICAgdmFyIHRkO1xyXG5cdCAgICAgICAgaWYgKHRkID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShlbGUsIFwidGRcIiwgdHJ1ZSkgfHwgZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShlbGUsIFwidGhcIiwgdHJ1ZSkpIHJldHVybiB0ZDtcclxuXHQgICAgICAgIHJldHVybiBudWxsO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBpc0VtcHR5QmxvY2sobm9kZSkge1xyXG5cdCAgICAgICAgdmFyIHJlZyA9IG5ldyBSZWdFeHAoZG9tVXRpbHMuZmlsbENoYXIsICdnJyk7XHJcblx0ICAgICAgICBpZiAobm9kZVticm93c2VyLmllID8gJ2lubmVyVGV4dCcgOiAndGV4dENvbnRlbnQnXS5yZXBsYWNlKC9eXFxzKiQvLCAnJykucmVwbGFjZShyZWcsICcnKS5sZW5ndGggPiAwKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBmb3IgKHZhciBuIGluIGR0ZC4kaXNOb3RFbXB0eSkge1xyXG5cdCAgICAgICAgICAgIGlmIChub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKG4pLmxlbmd0aCkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gMTtcclxuXHQgICAgfVxyXG5cclxuXHJcblx0ICAgIGZ1bmN0aW9uIG1vdXNlQ29vcmRzKGV2dCkge1xyXG5cdCAgICAgICAgaWYgKGV2dC5wYWdlWCB8fCBldnQucGFnZVkpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4geyB4OmV2dC5wYWdlWCwgeTpldnQucGFnZVkgfTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgeDpldnQuY2xpZW50WCArIG1lLmRvY3VtZW50LmJvZHkuc2Nyb2xsTGVmdCAtIG1lLmRvY3VtZW50LmJvZHkuY2xpZW50TGVmdCxcclxuXHQgICAgICAgICAgICB5OmV2dC5jbGllbnRZICsgbWUuZG9jdW1lbnQuYm9keS5zY3JvbGxUb3AgLSBtZS5kb2N1bWVudC5ib2R5LmNsaWVudFRvcFxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gbW91c2VNb3ZlRXZlbnQoZXZ0KSB7XHJcblxyXG5cdCAgICAgICAgaWYoIGlzRWRpdG9yRGlzYWJsZWQoKSApIHtcclxuXHQgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgdHJ5IHtcclxuXHJcblx0ICAgICAgICAgICAgLy/mma7pgJrnirbmgIHkuIvpvKDmoIfnp7vliqhcclxuXHQgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZ2V0UGFyZW50VGRPclRoKGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQpLFxyXG5cdCAgICAgICAgICAgICAgICBwb3M7XHJcblxyXG5cdCAgICAgICAgICAgIC8v5Yy65YiG55So5oi355qE6KGM5Li65piv5ouW5Yqo6L+Y5piv5Y+M5Ye7XHJcblx0ICAgICAgICAgICAgaWYoIGlzSW5SZXNpemVCdWZmZXIgICkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgbWUuYm9keS5zdHlsZS53ZWJraXRVc2VyU2VsZWN0ID0gJ25vbmUnO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYoIE1hdGguYWJzKCB1c2VyQWN0aW9uU3RhdHVzLnggLSBldnQuY2xpZW50WCApID4gb2Zmc2V0T2ZUYWJsZUNlbGwgfHwgTWF0aC5hYnMoIHVzZXJBY3Rpb25TdGF0dXMueSAtIGV2dC5jbGllbnRZICkgPiBvZmZzZXRPZlRhYmxlQ2VsbCApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNsZWFyVGFibGVEcmFnVGltZXIoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlzSW5SZXNpemVCdWZmZXIgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHNpbmdsZUNsaWNrU3RhdGUgPSAwO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy9kcmFnIGFjdGlvblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGFibGVCb3JkZXJEcmFnKGV2dCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIC8v5L+u5pS55Y2V5YWD5qC85aSn5bCP5pe255qE6byg5qCH56e75YqoXHJcblx0ICAgICAgICAgICAgaWYgKG9uRHJhZyAmJiBkcmFnVGQpIHtcclxuXHQgICAgICAgICAgICAgICAgc2luZ2xlQ2xpY2tTdGF0ZSA9IDA7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmJvZHkuc3R5bGUud2Via2l0VXNlclNlbGVjdCA9ICdub25lJztcclxuXHQgICAgICAgICAgICAgICAgbWUuc2VsZWN0aW9uLmdldE5hdGl2ZSgpW2Jyb3dzZXIuaWU5YmVsb3cgPyAnZW1wdHknIDogJ3JlbW92ZUFsbFJhbmdlcyddKCk7XHJcblx0ICAgICAgICAgICAgICAgIHBvcyA9IG1vdXNlQ29vcmRzKGV2dCk7XHJcblx0ICAgICAgICAgICAgICAgIHRvZ2dsZURyYWdnYWJsZVN0YXRlKG1lLCB0cnVlLCBvbkRyYWcsIHBvcywgdGFyZ2V0KTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG9uRHJhZyA9PSBcImhcIikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZHJhZ0xpbmUuc3R5bGUubGVmdCA9IGdldFBlcm1pc3Npb25YKGRyYWdUZCwgZXZ0KSArIFwicHhcIjtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvbkRyYWcgPT0gXCJ2XCIpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRyYWdMaW5lLnN0eWxlLnRvcCA9IGdldFBlcm1pc3Npb25ZKGRyYWdUZCwgZXZ0KSArIFwicHhcIjtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIC8v5b2T6byg5qCH5aSE5LqOdGFibGXkuIrml7bvvIzkv67mlLnnp7vliqjov4fnqIvkuK3nmoTlhYnmoIfnirbmgIFcclxuXHQgICAgICAgICAgICBpZiAodGFyZ2V0KSB7XHJcblx0ICAgICAgICAgICAgICAgIC8v6ZKI5a+55L2/55SodGFibGXkvZzkuLrlrrnlmajnmoTnu4Tku7bkuI3op6blj5Hmi5bmi73mlYjmnpxcclxuXHQgICAgICAgICAgICAgICAgaWYgKG1lLmZpcmVFdmVudCgnZXhjbHVkZXRhYmxlJywgdGFyZ2V0KSA9PT0gdHJ1ZSlcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgcG9zID0gbW91c2VDb29yZHMoZXZ0KTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gZ2V0UmVsYXRpb24odGFyZ2V0LCBwb3MpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGFibGUgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHRhcmdldCwgXCJ0YWJsZVwiLCB0cnVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmIChpblRhYmxlU2lkZSh0YWJsZSwgdGFyZ2V0LCBldnQsIHRydWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobWUuZmlyZUV2ZW50KFwiZXhjbHVkZXRhYmxlXCIsIHRhYmxlKSA9PT0gdHJ1ZSkgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuYm9keS5zdHlsZS5jdXJzb3IgPSBcInVybChcIiArIG1lLm9wdGlvbnMuY3Vyc29ycGF0aCArIFwiaC5wbmcpLHBvaW50ZXJcIjtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpblRhYmxlU2lkZSh0YWJsZSwgdGFyZ2V0LCBldnQpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobWUuZmlyZUV2ZW50KFwiZXhjbHVkZXRhYmxlXCIsIHRhYmxlKSA9PT0gdHJ1ZSkgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuYm9keS5zdHlsZS5jdXJzb3IgPSBcInVybChcIiArIG1lLm9wdGlvbnMuY3Vyc29ycGF0aCArIFwidi5wbmcpLHBvaW50ZXJcIjtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmJvZHkuc3R5bGUuY3Vyc29yID0gXCJ0ZXh0XCI7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgY3VyQ2VsbCA9IHRhcmdldDtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICgvXFxkLy50ZXN0KHN0YXRlKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhdGUucmVwbGFjZSgvXFxkLywgJycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IGdldFVFVGFibGUodGFyZ2V0KS5nZXRQcmV2aWV3Q2VsbCh0YXJnZXQsIHN0YXRlID09IFwidlwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIC8v5L2N5LqO56ys5LiA6KGM55qE6aG26YOo5oiW6ICF56ys5LiA5YiX55qE5bem6L655pe25LiN5Y+v5ouW5YqoXHJcblx0ICAgICAgICAgICAgICAgICAgICB0b2dnbGVEcmFnZ2FibGVTdGF0ZShtZSwgdGFyZ2V0ID8gISFzdGF0ZSA6IGZhbHNlLCB0YXJnZXQgPyBzdGF0ZSA6ICcnLCBwb3MsIHRhcmdldCk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdG9nZ2xlRHJhZ0J1dHRvbihmYWxzZSwgdGFibGUsIG1lKTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgIHNob3dFcnJvcihlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIGRyYWdCdXR0b25UaW1lcjtcclxuXHJcblx0ICAgIGZ1bmN0aW9uIHRvZ2dsZURyYWdCdXR0b24oc2hvdywgdGFibGUsIGVkaXRvcikge1xyXG5cdCAgICAgICAgaWYgKCFzaG93KSB7XHJcblx0ICAgICAgICAgICAgaWYgKGRyYWdPdmVyKXJldHVybjtcclxuXHQgICAgICAgICAgICBkcmFnQnV0dG9uVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgIWRyYWdPdmVyICYmIGRyYWdCdXR0b24gJiYgZHJhZ0J1dHRvbi5wYXJlbnROb2RlICYmIGRyYWdCdXR0b24ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkcmFnQnV0dG9uKTtcclxuXHQgICAgICAgICAgICB9LCAyMDAwKTtcclxuXHQgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgY3JlYXRlRHJhZ0J1dHRvbih0YWJsZSwgZWRpdG9yKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gY3JlYXRlRHJhZ0J1dHRvbih0YWJsZSwgZWRpdG9yKSB7XHJcblx0ICAgICAgICB2YXIgcG9zID0gZG9tVXRpbHMuZ2V0WFkodGFibGUpLFxyXG5cdCAgICAgICAgICAgIGRvYyA9IHRhYmxlLm93bmVyRG9jdW1lbnQ7XHJcblx0ICAgICAgICBpZiAoZHJhZ0J1dHRvbiAmJiBkcmFnQnV0dG9uLnBhcmVudE5vZGUpcmV0dXJuIGRyYWdCdXR0b247XHJcblx0ICAgICAgICBkcmFnQnV0dG9uID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0ICAgICAgICBkcmFnQnV0dG9uLmNvbnRlbnRFZGl0YWJsZSA9IGZhbHNlO1xyXG5cdCAgICAgICAgZHJhZ0J1dHRvbi5pbm5lckhUTUwgPSBcIlwiO1xyXG5cdCAgICAgICAgZHJhZ0J1dHRvbi5zdHlsZS5jc3NUZXh0ID0gXCJ3aWR0aDoxNXB4O2hlaWdodDoxNXB4O2JhY2tncm91bmQtaW1hZ2U6dXJsKFwiICsgZWRpdG9yLm9wdGlvbnMuVUVESVRPUl9IT01FX1VSTCArIFwiZGlhbG9ncy90YWJsZS9kcmFnaWNvbi5wbmcpO3Bvc2l0aW9uOiBhYnNvbHV0ZTtjdXJzb3I6bW92ZTt0b3A6XCIgKyAocG9zLnkgLSAxNSkgKyBcInB4O2xlZnQ6XCIgKyAocG9zLngpICsgXCJweDtcIjtcclxuXHQgICAgICAgIGRvbVV0aWxzLnVuU2VsZWN0YWJsZShkcmFnQnV0dG9uKTtcclxuXHQgICAgICAgIGRyYWdCdXR0b24ub25tb3VzZW92ZXIgPSBmdW5jdGlvbiAoZXZ0KSB7XHJcblx0ICAgICAgICAgICAgZHJhZ092ZXIgPSB0cnVlO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIGRyYWdCdXR0b24ub25tb3VzZW91dCA9IGZ1bmN0aW9uIChldnQpIHtcclxuXHQgICAgICAgICAgICBkcmFnT3ZlciA9IGZhbHNlO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIGRvbVV0aWxzLm9uKGRyYWdCdXR0b24sICdjbGljaycsIGZ1bmN0aW9uICh0eXBlLCBldnQpIHtcclxuXHQgICAgICAgICAgICBkb0NsaWNrKGV2dCwgdGhpcyk7XHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIGRvbVV0aWxzLm9uKGRyYWdCdXR0b24sICdkYmxjbGljaycsIGZ1bmN0aW9uICh0eXBlLCBldnQpIHtcclxuXHQgICAgICAgICAgICBkb0RibENsaWNrKGV2dCk7XHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIGRvbVV0aWxzLm9uKGRyYWdCdXR0b24sICdkcmFnc3RhcnQnLCBmdW5jdGlvbiAodHlwZSwgZXZ0KSB7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMucHJldmVudERlZmF1bHQoZXZ0KTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgdmFyIHRpbWVyO1xyXG5cclxuXHQgICAgICAgIGZ1bmN0aW9uIGRvQ2xpY2soZXZ0LCBidXR0b24pIHtcclxuXHQgICAgICAgICAgICAvLyDpg6jliIbmtY/op4jlmajkuIvpnIDopoHmuIXnkIZcclxuXHQgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xyXG5cdCAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgIGVkaXRvci5maXJlRXZlbnQoXCJ0YWJsZUNsaWNrZWRcIiwgdGFibGUsIGJ1dHRvbik7XHJcblx0ICAgICAgICAgICAgfSwgMzAwKTtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBmdW5jdGlvbiBkb0RibENsaWNrKGV2dCkge1xyXG5cdCAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XHJcblx0ICAgICAgICAgICAgdmFyIHV0ID0gZ2V0VUVUYWJsZSh0YWJsZSksXHJcblx0ICAgICAgICAgICAgICAgIHN0YXJ0ID0gdGFibGUucm93c1swXS5jZWxsc1swXSxcclxuXHQgICAgICAgICAgICAgICAgZW5kID0gdXQuZ2V0TGFzdENlbGwoKSxcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UgPSB1dC5nZXRDZWxsc1JhbmdlKHN0YXJ0LCBlbmQpO1xyXG5cdCAgICAgICAgICAgIGVkaXRvci5zZWxlY3Rpb24uZ2V0UmFuZ2UoKS5zZXRTdGFydChzdGFydCwgMCkuc2V0Q3Vyc29yKGZhbHNlLCB0cnVlKTtcclxuXHQgICAgICAgICAgICB1dC5zZXRTZWxlY3RlZChyYW5nZSk7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoZHJhZ0J1dHRvbik7XHJcblx0ICAgIH1cclxuXHJcblxyXG4vL1x0ICAgIGZ1bmN0aW9uIGluUG9zaXRpb24odGFibGUsIHBvcykge1xyXG4vL1x0ICAgICAgICB2YXIgdGFibGVQb3MgPSBkb21VdGlscy5nZXRYWSh0YWJsZSksXHJcbi8vXHQgICAgICAgICAgICB3aWR0aCA9IHRhYmxlLm9mZnNldFdpZHRoLFxyXG4vL1x0ICAgICAgICAgICAgaGVpZ2h0ID0gdGFibGUub2Zmc2V0SGVpZ2h0O1xyXG4vL1x0ICAgICAgICBpZiAocG9zLnggLSB0YWJsZVBvcy54IDwgNSAmJiBwb3MueSAtIHRhYmxlUG9zLnkgPCA1KSB7XHJcbi8vXHQgICAgICAgICAgICByZXR1cm4gXCJ0b3BMZWZ0XCI7XHJcbi8vXHQgICAgICAgIH0gZWxzZSBpZiAodGFibGVQb3MueCArIHdpZHRoIC0gcG9zLnggPCA1ICYmIHRhYmxlUG9zLnkgKyBoZWlnaHQgLSBwb3MueSA8IDUpIHtcclxuLy9cdCAgICAgICAgICAgIHJldHVybiBcImJvdHRvbVJpZ2h0XCI7XHJcbi8vXHQgICAgICAgIH1cclxuLy9cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBpblRhYmxlU2lkZSh0YWJsZSwgY2VsbCwgZXZ0LCB0b3ApIHtcclxuXHQgICAgICAgIHZhciBwb3MgPSBtb3VzZUNvb3JkcyhldnQpLFxyXG5cdCAgICAgICAgICAgIHN0YXRlID0gZ2V0UmVsYXRpb24oY2VsbCwgcG9zKTtcclxuXHJcblx0ICAgICAgICBpZiAodG9wKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGNhcHRpb24gPSB0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImNhcHRpb25cIilbMF0sXHJcblx0ICAgICAgICAgICAgICAgIGNhcEhlaWdodCA9IGNhcHRpb24gPyBjYXB0aW9uLm9mZnNldEhlaWdodCA6IDA7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIChzdGF0ZSA9PSBcInYxXCIpICYmICgocG9zLnkgLSBkb21VdGlscy5nZXRYWSh0YWJsZSkueSAtIGNhcEhlaWdodCkgPCA4KTtcclxuXHQgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIChzdGF0ZSA9PSBcImgxXCIpICYmICgocG9zLnggLSBkb21VdGlscy5nZXRYWSh0YWJsZSkueCkgPCA4KTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOiOt+WPluaLluWKqOaXtuWFgeiuuOeahFjovbTlnZDmoIdcclxuXHQgICAgICogQHBhcmFtIGRyYWdUZFxyXG5cdCAgICAgKiBAcGFyYW0gZXZ0XHJcblx0ICAgICAqL1xyXG5cdCAgICBmdW5jdGlvbiBnZXRQZXJtaXNzaW9uWChkcmFnVGQsIGV2dCkge1xyXG5cdCAgICAgICAgdmFyIHV0ID0gZ2V0VUVUYWJsZShkcmFnVGQpO1xyXG5cdCAgICAgICAgaWYgKHV0KSB7XHJcblx0ICAgICAgICAgICAgdmFyIHByZVRkID0gdXQuZ2V0U2FtZUVuZFBvc0NlbGxzKGRyYWdUZCwgXCJ4XCIpWzBdLFxyXG5cdCAgICAgICAgICAgICAgICBuZXh0VGQgPSB1dC5nZXRTYW1lU3RhcnRQb3NYQ2VsbHMoZHJhZ1RkKVswXSxcclxuXHQgICAgICAgICAgICAgICAgbW91c2VYID0gbW91c2VDb29yZHMoZXZ0KS54LFxyXG5cdCAgICAgICAgICAgICAgICBsZWZ0ID0gKHByZVRkID8gZG9tVXRpbHMuZ2V0WFkocHJlVGQpLnggOiBkb21VdGlscy5nZXRYWSh1dC50YWJsZSkueCkgKyAyMCAsXHJcblx0ICAgICAgICAgICAgICAgIHJpZ2h0ID0gbmV4dFRkID8gZG9tVXRpbHMuZ2V0WFkobmV4dFRkKS54ICsgbmV4dFRkLm9mZnNldFdpZHRoIC0gMjAgOiAobWUuYm9keS5vZmZzZXRXaWR0aCArIDUgfHwgcGFyc2VJbnQoZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShtZS5ib2R5LCBcIndpZHRoXCIpLCAxMCkpO1xyXG5cclxuXHQgICAgICAgICAgICBsZWZ0ICs9IGNlbGxNaW5XaWR0aDtcclxuXHQgICAgICAgICAgICByaWdodCAtPSBjZWxsTWluV2lkdGg7XHJcblxyXG5cdCAgICAgICAgICAgIHJldHVybiBtb3VzZVggPCBsZWZ0ID8gbGVmdCA6IG1vdXNlWCA+IHJpZ2h0ID8gcmlnaHQgOiBtb3VzZVg7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDojrflj5bmi5bliqjml7blhYHorrjnmoRZ6L205Z2Q5qCHXHJcblx0ICAgICAqL1xyXG5cdCAgICBmdW5jdGlvbiBnZXRQZXJtaXNzaW9uWShkcmFnVGQsIGV2dCkge1xyXG5cdCAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICB2YXIgdG9wID0gZG9tVXRpbHMuZ2V0WFkoZHJhZ1RkKS55LFxyXG5cdCAgICAgICAgICAgICAgICBtb3VzZVBvc1kgPSBtb3VzZUNvb3JkcyhldnQpLnk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG1vdXNlUG9zWSA8IHRvcCA/IHRvcCA6IG1vdXNlUG9zWTtcclxuXHQgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuXHQgICAgICAgICAgICBzaG93RXJyb3IoZSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDnp7vliqjnirbmgIHliIfmjaJcclxuXHQgICAgICovXHJcblx0ICAgIGZ1bmN0aW9uIHRvZ2dsZURyYWdnYWJsZVN0YXRlKGVkaXRvciwgZHJhZ2dhYmxlLCBkaXIsIG1vdXNlUG9zLCBjZWxsKSB7XHJcblx0ICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgIGVkaXRvci5ib2R5LnN0eWxlLmN1cnNvciA9IGRpciA9PSBcImhcIiA/IFwiY29sLXJlc2l6ZVwiIDogZGlyID09IFwidlwiID8gXCJyb3ctcmVzaXplXCIgOiBcInRleHRcIjtcclxuXHQgICAgICAgICAgICBpZiAoYnJvd3Nlci5pZSkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoZGlyICYmICFtb3VzZWRvd24gJiYgIWdldFVFVGFibGVCeVNlbGVjdGVkKGVkaXRvcikpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGdldERyYWdMaW5lKGVkaXRvciwgZWRpdG9yLmRvY3VtZW50KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHNob3dEcmFnTGluZUF0KGRpciwgY2VsbCk7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBoaWRlRHJhZ0xpbmUoZWRpdG9yKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIG9uQm9yZGVyID0gZHJhZ2dhYmxlO1xyXG5cdCAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgIHNob3dFcnJvcihlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOiOt+WPluS4jlVFVGFibGXnm7jlhbPnmoRyZXNpemUgbGluZVxyXG5cdCAgICAgKiBAcGFyYW0gdWV0YWJsZSBVRVRhYmxl5a+56LGhXHJcblx0ICAgICAqL1xyXG5cdCAgICBmdW5jdGlvbiBnZXRSZXNpemVMaW5lQnlVRVRhYmxlKCkge1xyXG5cclxuXHQgICAgICAgIHZhciBsaW5lSWQgPSAnX1VFVGFibGVSZXNpemVMaW5lJyxcclxuXHQgICAgICAgICAgICBsaW5lID0gdGhpcy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbGluZUlkICk7XHJcblxyXG5cdCAgICAgICAgaWYoICFsaW5lICkge1xyXG5cdCAgICAgICAgICAgIGxpbmUgPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblx0ICAgICAgICAgICAgbGluZS5pZCA9IGxpbmVJZDtcclxuXHQgICAgICAgICAgICBsaW5lLmNvbnRuZXRFZGl0YWJsZSA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgIGxpbmUuc2V0QXR0cmlidXRlKFwidW5zZWxlY3RhYmxlXCIsIFwib25cIik7XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBzdHlsZXMgPSB7XHJcblx0ICAgICAgICAgICAgICAgIHdpZHRoOiAyKmNlbGxCb3JkZXJXaWR0aCArIDEgKyAncHgnLFxyXG5cdCAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcclxuXHQgICAgICAgICAgICAgICAgJ3otaW5kZXgnOiAxMDAwMDAsXHJcblx0ICAgICAgICAgICAgICAgIGN1cnNvcjogJ2NvbC1yZXNpemUnLFxyXG5cdCAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAncmVkJyxcclxuXHQgICAgICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXHJcblx0ICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICAgICAgLy/liIfmjaLnirbmgIFcclxuXHQgICAgICAgICAgICBsaW5lLm9ubW91c2VvdXQgPSBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblx0ICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICAgICAgdXRpbHMuZXh0ZW5kKCBsaW5lLnN0eWxlLCBzdHlsZXMgKTtcclxuXHJcblx0ICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKCBsaW5lICk7XHJcblxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIHJldHVybiBsaW5lO1xyXG5cclxuXHQgICAgfVxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOabtOaWsHJlc2l6ZS1saW5lXHJcblx0ICAgICAqL1xyXG5cdCAgICBmdW5jdGlvbiB1cGRhdGVSZXNpemVMaW5lKCBjZWxsLCB1ZXRhYmxlICkge1xyXG5cclxuXHQgICAgICAgIHZhciBsaW5lID0gZ2V0UmVzaXplTGluZUJ5VUVUYWJsZS5jYWxsKCB0aGlzICksXHJcblx0ICAgICAgICAgICAgdGFibGUgPSB1ZXRhYmxlLnRhYmxlLFxyXG5cdCAgICAgICAgICAgIHN0eWxlcyA9IHtcclxuXHQgICAgICAgICAgICAgICAgdG9wOiBkb21VdGlscy5nZXRYWSggdGFibGUgKS55ICsgJ3B4JyxcclxuXHQgICAgICAgICAgICAgICAgbGVmdDogZG9tVXRpbHMuZ2V0WFkoIGNlbGwpLnggKyBjZWxsLm9mZnNldFdpZHRoIC0gY2VsbEJvcmRlcldpZHRoICsgJ3B4JyxcclxuXHQgICAgICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcclxuXHQgICAgICAgICAgICAgICAgaGVpZ2h0OiB0YWJsZS5vZmZzZXRIZWlnaHQgKyAncHgnXHJcblx0ICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICB1dGlscy5leHRlbmQoIGxpbmUuc3R5bGUsIHN0eWxlcyApO1xyXG5cclxuXHQgICAgfVxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOaYvuekunJlc2l6ZS1saW5lXHJcblx0ICAgICAqL1xyXG5cdCAgICBmdW5jdGlvbiBzaG93UmVzaXplTGluZSggY2VsbCApIHtcclxuXHJcblx0ICAgICAgICB2YXIgdWV0YWJsZSA9IGdldFVFVGFibGUoIGNlbGwgKTtcclxuXHJcblx0ICAgICAgICB1cGRhdGVSZXNpemVMaW5lLmNhbGwoIHRoaXMsIGNlbGwsIHVldGFibGUgKTtcclxuXHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDojrflj5bpvKDmoIfkuI7lvZPliY3ljZXlhYPmoLznmoTnm7jlr7nkvY3nva5cclxuXHQgICAgICogQHBhcmFtIGVsZVxyXG5cdCAgICAgKiBAcGFyYW0gbW91c2VQb3NcclxuXHQgICAgICovXHJcblx0ICAgIGZ1bmN0aW9uIGdldFJlbGF0aW9uKGVsZSwgbW91c2VQb3MpIHtcclxuXHQgICAgICAgIHZhciBlbGVQb3MgPSBkb21VdGlscy5nZXRYWShlbGUpO1xyXG5cclxuXHQgICAgICAgIGlmKCAhZWxlUG9zICkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiAnJztcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBpZiAoZWxlUG9zLnggKyBlbGUub2Zmc2V0V2lkdGggLSBtb3VzZVBvcy54IDwgY2VsbEJvcmRlcldpZHRoKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIFwiaFwiO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaWYgKG1vdXNlUG9zLnggLSBlbGVQb3MueCA8IGNlbGxCb3JkZXJXaWR0aCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiAnaDEnXHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoZWxlUG9zLnkgKyBlbGUub2Zmc2V0SGVpZ2h0IC0gbW91c2VQb3MueSA8IGNlbGxCb3JkZXJXaWR0aCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBcInZcIjtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmIChtb3VzZVBvcy55IC0gZWxlUG9zLnkgPCBjZWxsQm9yZGVyV2lkdGgpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gJ3YxJ1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuICcnO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBtb3VzZURvd25FdmVudCh0eXBlLCBldnQpIHtcclxuXHJcblx0ICAgICAgICBpZiggaXNFZGl0b3JEaXNhYmxlZCgpICkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiA7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgdXNlckFjdGlvblN0YXR1cyA9IHtcclxuXHQgICAgICAgICAgICB4OiBldnQuY2xpZW50WCxcclxuXHQgICAgICAgICAgICB5OiBldnQuY2xpZW50WVxyXG5cdCAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICAvL+WPs+mUruiPnOWNleWNleeLrOWkhOeQhlxyXG5cdCAgICAgICAgaWYgKGV2dC5idXR0b24gPT0gMikge1xyXG5cdCAgICAgICAgICAgIHZhciB1dCA9IGdldFVFVGFibGVCeVNlbGVjdGVkKG1lKSxcclxuXHQgICAgICAgICAgICAgICAgZmxhZyA9IGZhbHNlO1xyXG5cclxuXHQgICAgICAgICAgICBpZiAodXQpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRkID0gZ2V0VGFyZ2V0VGQobWUsIGV2dCk7XHJcblx0ICAgICAgICAgICAgICAgIHV0aWxzLmVhY2godXQuc2VsZWN0ZWRUZHMsIGZ1bmN0aW9uICh0aSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRpID09PSB0ZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZsYWcgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCFmbGFnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZW1vdmVTZWxlY3RlZENsYXNzKGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKG1lLmJvZHksIFwidGggdGRcIikpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdXQuY2xlYXJTZWxlY3RlZCgpXHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0ZCA9IHV0LnNlbGVjdGVkVGRzWzBdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuc2VsZWN0aW9uLmdldFJhbmdlKCkuc2V0U3RhcnQodGQsIDApLnNldEN1cnNvcihmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9LCAwKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHRhYmxlQ2xpY2tIYW5kZXIoIGV2dCApO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgfVxyXG5cclxuXHQgICAgLy/muIXpmaTooajmoLznmoTorqHml7blmahcclxuXHQgICAgZnVuY3Rpb24gY2xlYXJUYWJsZVRpbWVyKCkge1xyXG5cdCAgICAgICAgdGFiVGltZXIgJiYgY2xlYXJUaW1lb3V0KCB0YWJUaW1lciApO1xyXG5cdCAgICAgICAgdGFiVGltZXIgPSBudWxsO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvL+WPjOWHu+aUtue8qVxyXG5cdCAgICBmdW5jdGlvbiB0YWJsZURiY2xpY2tIYW5kbGVyKGV2dCkge1xyXG5cdCAgICAgICAgc2luZ2xlQ2xpY2tTdGF0ZSA9IDA7XHJcblx0ICAgICAgICBldnQgPSBldnQgfHwgbWUud2luZG93LmV2ZW50O1xyXG5cdCAgICAgICAgdmFyIHRhcmdldCA9IGdldFBhcmVudFRkT3JUaChldnQudGFyZ2V0IHx8IGV2dC5zcmNFbGVtZW50KTtcclxuXHQgICAgICAgIGlmICh0YXJnZXQpIHtcclxuXHQgICAgICAgICAgICB2YXIgaDtcclxuXHQgICAgICAgICAgICBpZiAoaCA9IGdldFJlbGF0aW9uKHRhcmdldCwgbW91c2VDb29yZHMoZXZ0KSkpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGhpZGVEcmFnTGluZSggbWUgKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmIChoID09ICdoMScpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGggPSAnaCc7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaW5UYWJsZVNpZGUoZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZSh0YXJnZXQsIFwidGFibGVcIiksIHRhcmdldCwgZXZ0KSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmV4ZWNDb21tYW5kKCdhZGFwdGJ5d2luZG93Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IGdldFVFVGFibGUodGFyZ2V0KS5nZXRQcmV2aWV3Q2VsbCh0YXJnZXQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBybmcuc2VsZWN0Tm9kZUNvbnRlbnRzKHRhcmdldCkuc2V0Q3Vyc29yKHRydWUsIHRydWUpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChoID09ICdoJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHV0ID0gZ2V0VUVUYWJsZSh0YXJnZXQpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlID0gdXQudGFibGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2VsbHMgPSBnZXRDZWxsc0J5TW92ZUJvcmRlciggdGFyZ2V0LCB0YWJsZSwgdHJ1ZSApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGxzID0gZXh0cmFjdEFycmF5KCBjZWxscywgJ2xlZnQnICk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdXQud2lkdGggPSB1dC5vZmZzZXRXaWR0aDtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgb2xkV2lkdGggPSBbXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBuZXdXaWR0aCA9IFtdO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHV0aWxzLmVhY2goIGNlbGxzLCBmdW5jdGlvbiggY2VsbCApe1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBvbGRXaWR0aC5wdXNoKCBjZWxsLm9mZnNldFdpZHRoICk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHV0aWxzLmVhY2goIGNlbGxzLCBmdW5jdGlvbiggY2VsbCApe1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLnJlbW92ZUF0dHJpYnV0ZShcIndpZHRoXCIpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy/mmK/lkKblhYHorrjmlLnlj5hcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlYWJsZSA9IHRydWU7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmVhY2goIGNlbGxzLCBmdW5jdGlvbiggY2VsbCwgaW5kZXggKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IGNlbGwub2Zmc2V0V2lkdGg7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggd2lkdGggPiBvbGRXaWR0aFtpbmRleF0gKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VhYmxlID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1dpZHRoLnB1c2goIHdpZHRoICk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoYW5nZSA9IGNoYW5nZWFibGUgPyBuZXdXaWR0aCA6IG9sZFdpZHRoO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1dGlscy5lYWNoKCBjZWxscywgZnVuY3Rpb24oIGNlbGwsIGluZGV4ICl7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLndpZHRoID0gY2hhbmdlW2luZGV4XSAtIGdldFRhYmNlbGxTcGFjZSgpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcblxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH0sIDAgKTtcclxuXHJcbi8vXHQgICAgICAgICAgICAgICAgICAgIG1pbldpZHRoIC09IGNlbGxNaW5XaWR0aDtcclxuXHQvL1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICB0YWJsZS5yZW1vdmVBdHRyaWJ1dGUoXCJ3aWR0aFwiKTtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgdXRpbHMuZWFjaChjZWxscywgZnVuY3Rpb24gKGNlbGwpIHtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUud2lkdGggPSBcIlwiO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC53aWR0aCAtPSBtaW5XaWR0aDtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiB0YWJsZUNsaWNrSGFuZGVyKCBldnQgKSB7XHJcblxyXG5cdCAgICAgICAgcmVtb3ZlU2VsZWN0ZWRDbGFzcyhkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZShtZS5ib2R5LCBcInRkIHRoXCIpKTtcclxuXHQgICAgICAgIC8vdHJhY2U6MzExM1xyXG5cdCAgICAgICAgLy/pgInkuK3ljZXlhYPmoLzvvIzngrnlh7t0YWJsZeWklumDqO+8jOS4jeS8mua4heaOiXRhYmxl5LiK5oyC55qEdWVUYWJsZSzkvJrlvJXotbdnZXRVRVRhYmxlQnlTZWxlY3RlZOaWueazlei/lOWbnuWAvFxyXG5cdCAgICAgICAgdXRpbHMuZWFjaChtZS5kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgndGFibGUnKSwgZnVuY3Rpb24gKHQpIHtcclxuXHQgICAgICAgICAgICB0LnVlVGFibGUgPSBudWxsO1xyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICBzdGFydFRkID0gZ2V0VGFyZ2V0VGQobWUsIGV2dCk7XHJcblx0ICAgICAgICBpZiggIXN0YXJ0VGQgKSByZXR1cm47XHJcblx0ICAgICAgICB2YXIgdGFibGUgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHN0YXJ0VGQsIFwidGFibGVcIiwgdHJ1ZSk7XHJcblx0ICAgICAgICB1dCA9IGdldFVFVGFibGUodGFibGUpO1xyXG5cdCAgICAgICAgdXQgJiYgdXQuY2xlYXJTZWxlY3RlZCgpO1xyXG5cclxuXHQgICAgICAgIC8v5Yik5pat5b2T5YmN6byg5qCH54q25oCBXHJcblx0ICAgICAgICBpZiAoIW9uQm9yZGVyKSB7XHJcblx0ICAgICAgICAgICAgbWUuZG9jdW1lbnQuYm9keS5zdHlsZS53ZWJraXRVc2VyU2VsZWN0ID0gJyc7XHJcblx0ICAgICAgICAgICAgbW91c2Vkb3duID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICBtZS5hZGRMaXN0ZW5lcignbW91c2VvdmVyJywgbW91c2VPdmVyRXZlbnQpO1xyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAvL+i+ueahhuS4iueahOWKqOS9nOWkhOeQhlxyXG5cdCAgICAgICAgICAgIGJvcmRlckFjdGlvbkhhbmRsZXIoIGV2dCApO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8v5aSE55CG6KGo5qC86L655qGG5LiK55qE5Yqo5L2cLCDov5nph4zlgZrlu7bml7blpITnkIbvvIzpgb/lhY3kuKTnp43liqjkvZzkupLnm7jlvbHlk41cclxuXHQgICAgZnVuY3Rpb24gYm9yZGVyQWN0aW9uSGFuZGxlciggZXZ0ICkge1xyXG5cclxuXHQgICAgICAgIGlmICggYnJvd3Nlci5pZSApIHtcclxuXHQgICAgICAgICAgICBldnQgPSByZWNvbnN0cnVjdChldnQgKTtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBjbGVhclRhYmxlRHJhZ1RpbWVyKCk7XHJcblxyXG5cdCAgICAgICAgLy/mmK/lkKbmraPlnKjnrYnlvoVyZXNpemXnmoTnvJPlhrLkuK1cclxuXHQgICAgICAgIGlzSW5SZXNpemVCdWZmZXIgPSB0cnVlO1xyXG5cclxuXHQgICAgICAgIHRhYmxlRHJhZ1RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgIHRhYmxlQm9yZGVyRHJhZyggZXZ0ICk7XHJcblx0ICAgICAgICB9LCBkYmxjbGlja1RpbWUpO1xyXG5cclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gZXh0cmFjdEFycmF5KCBvcmlnaW5BcnIsIGtleSApIHtcclxuXHJcblx0ICAgICAgICB2YXIgcmVzdWx0ID0gW10sXHJcblx0ICAgICAgICAgICAgdG1wID0gbnVsbDtcclxuXHJcblx0ICAgICAgICBmb3IoIHZhciBpID0gMCwgbGVuID0gb3JpZ2luQXJyLmxlbmd0aDsgaTxsZW47IGkrKyApIHtcclxuXHJcblx0ICAgICAgICAgICAgdG1wID0gb3JpZ2luQXJyWyBpIF1bIGtleSBdO1xyXG5cclxuXHQgICAgICAgICAgICBpZiggdG1wICkge1xyXG5cdCAgICAgICAgICAgICAgICByZXN1bHQucHVzaCggdG1wICk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG5cclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gY2xlYXJUYWJsZURyYWdUaW1lcigpIHtcclxuXHQgICAgICAgIHRhYmxlRHJhZ1RpbWVyICYmIGNsZWFyVGltZW91dCh0YWJsZURyYWdUaW1lcik7XHJcblx0ICAgICAgICB0YWJsZURyYWdUaW1lciA9IG51bGw7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIHJlY29uc3RydWN0KCBvYmogKSB7XHJcblxyXG5cdCAgICAgICAgdmFyIGF0dHJzID0gWydwYWdlWCcsICdwYWdlWScsICdjbGllbnRYJywgJ2NsaWVudFknLCAnc3JjRWxlbWVudCcsICd0YXJnZXQnXSxcclxuXHQgICAgICAgICAgICBuZXdPYmogPSB7fTtcclxuXHJcblx0ICAgICAgICBpZiggb2JqICkge1xyXG5cclxuXHQgICAgICAgICAgICBmb3IoIHZhciBpID0gMCwga2V5LCB2YWw7IGtleSA9IGF0dHJzW2ldOyBpKysgKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhbD1vYmpbIGtleSBdO1xyXG5cdCAgICAgICAgICAgICAgICB2YWwgJiYgKG5ld09ialsga2V5IF0gPSB2YWwpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgcmV0dXJuIG5ld09iajtcclxuXHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8v6L655qGG5ouW5YqoXHJcblx0ICAgIGZ1bmN0aW9uIHRhYmxlQm9yZGVyRHJhZyggZXZ0ICkge1xyXG5cclxuXHQgICAgICAgIGlzSW5SZXNpemVCdWZmZXIgPSBmYWxzZTtcclxuXHJcblx0ICAgICAgICBzdGFydFRkID0gZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudDtcclxuXHQgICAgICAgIGlmKCAhc3RhcnRUZCApIHJldHVybjtcclxuXHQgICAgICAgIHZhciBzdGF0ZSA9IGdldFJlbGF0aW9uKHN0YXJ0VGQsIG1vdXNlQ29vcmRzKGV2dCkpO1xyXG5cdCAgICAgICAgaWYgKC9cXGQvLnRlc3Qoc3RhdGUpKSB7XHJcblx0ICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZS5yZXBsYWNlKC9cXGQvLCAnJyk7XHJcblx0ICAgICAgICAgICAgc3RhcnRUZCA9IGdldFVFVGFibGUoc3RhcnRUZCkuZ2V0UHJldmlld0NlbGwoc3RhcnRUZCwgc3RhdGUgPT0gJ3YnKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGhpZGVEcmFnTGluZShtZSk7XHJcblx0ICAgICAgICBnZXREcmFnTGluZShtZSwgbWUuZG9jdW1lbnQpO1xyXG5cdCAgICAgICAgbWUuZmlyZUV2ZW50KCdzYXZlU2NlbmUnKTtcclxuXHQgICAgICAgIHNob3dEcmFnTGluZUF0KHN0YXRlLCBzdGFydFRkKTtcclxuXHQgICAgICAgIG1vdXNlZG93biA9IHRydWU7XHJcblx0ICAgICAgICAvL+aLluWKqOW8gOWni1xyXG5cdCAgICAgICAgb25EcmFnID0gc3RhdGU7XHJcblx0ICAgICAgICBkcmFnVGQgPSBzdGFydFRkO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBtb3VzZVVwRXZlbnQodHlwZSwgZXZ0KSB7XHJcblxyXG5cdCAgICAgICAgaWYoIGlzRWRpdG9yRGlzYWJsZWQoKSApIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIGNsZWFyVGFibGVEcmFnVGltZXIoKTtcclxuXHJcblx0ICAgICAgICBpc0luUmVzaXplQnVmZmVyID0gZmFsc2U7XHJcblxyXG5cdCAgICAgICAgaWYoIG9uQm9yZGVyICkge1xyXG5cdCAgICAgICAgICAgIHNpbmdsZUNsaWNrU3RhdGUgPSArK3NpbmdsZUNsaWNrU3RhdGUgJSAzO1xyXG5cclxuXHQgICAgICAgICAgICB1c2VyQWN0aW9uU3RhdHVzID0ge1xyXG5cdCAgICAgICAgICAgICAgICB4OiBldnQuY2xpZW50WCxcclxuXHQgICAgICAgICAgICAgICAgeTogZXZ0LmNsaWVudFlcclxuXHQgICAgICAgICAgICB9O1xyXG5cclxuXHQgICAgICAgICAgICB0YWJsZVJlc2l6ZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgICAgICBzaW5nbGVDbGlja1N0YXRlID4gMCAmJiBzaW5nbGVDbGlja1N0YXRlLS07XHJcblx0ICAgICAgICAgICAgfSwgZGJsY2xpY2tUaW1lICk7XHJcblxyXG5cdCAgICAgICAgICAgIGlmKCBzaW5nbGVDbGlja1N0YXRlID09PSAyICkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgc2luZ2xlQ2xpY2tTdGF0ZSA9IDA7XHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlRGJjbGlja0hhbmRsZXIoZXZ0KTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIGlmIChldnQuYnV0dG9uID09IDIpcmV0dXJuO1xyXG5cdCAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgIC8v5riF6Zmk6KGo5qC85LiK5Y6f55Sf6Leo6YCJ6Zeu6aKYXHJcblx0ICAgICAgICB2YXIgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICBzdGFydCA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocmFuZ2Uuc3RhcnRDb250YWluZXIsICd0YWJsZScsIHRydWUpLFxyXG5cdCAgICAgICAgICAgIGVuZCA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocmFuZ2UuZW5kQ29udGFpbmVyLCAndGFibGUnLCB0cnVlKTtcclxuXHJcblx0ICAgICAgICBpZiAoc3RhcnQgfHwgZW5kKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSBlbmQpIHtcclxuXHQgICAgICAgICAgICAgICAgc3RhcnQgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBbJ3RkJywgJ3RoJywgJ2NhcHRpb24nXSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGVuZCA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocmFuZ2UuZW5kQ29udGFpbmVyLCBbJ3RkJywgJ3RoJywgJ2NhcHRpb24nXSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChzdGFydCAhPT0gZW5kKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5zZWxlY3Rpb24uY2xlYXJSYW5nZSgpXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBtZS5zZWxlY3Rpb24uY2xlYXJSYW5nZSgpXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgbW91c2Vkb3duID0gZmFsc2U7XHJcblx0ICAgICAgICBtZS5kb2N1bWVudC5ib2R5LnN0eWxlLndlYmtpdFVzZXJTZWxlY3QgPSAnJztcclxuXHQgICAgICAgIC8v5ouW5ou954q25oCB5LiL55qEbW91c2VVUFxyXG5cdCAgICAgICAgaWYgKCBvbkRyYWcgJiYgZHJhZ1RkICkge1xyXG5cclxuXHQgICAgICAgICAgICBtZS5zZWxlY3Rpb24uZ2V0TmF0aXZlKClbYnJvd3Nlci5pZTliZWxvdyA/ICdlbXB0eScgOiAncmVtb3ZlQWxsUmFuZ2VzJ10oKTtcclxuXHJcblx0ICAgICAgICAgICAgc2luZ2xlQ2xpY2tTdGF0ZSA9IDA7XHJcblx0ICAgICAgICAgICAgZHJhZ0xpbmUgPSBtZS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndWVfdGFibGVEcmFnTGluZScpO1xyXG5cclxuXHQgICAgICAgICAgICAvLyB0cmFjZSAzOTczXHJcblx0ICAgICAgICAgICAgaWYgKGRyYWdMaW5lKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBkcmFnVGRQb3MgPSBkb21VdGlscy5nZXRYWShkcmFnVGQpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgZHJhZ0xpbmVQb3MgPSBkb21VdGlscy5nZXRYWShkcmFnTGluZSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBzd2l0Y2ggKG9uRHJhZykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FzZSBcImhcIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2VDb2xXaWR0aChkcmFnVGQsIGRyYWdMaW5lUG9zLnggLSBkcmFnVGRQb3MueCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjYXNlIFwidlwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZVJvd0hlaWdodChkcmFnVGQsIGRyYWdMaW5lUG9zLnkgLSBkcmFnVGRQb3MueSAtIGRyYWdUZC5vZmZzZXRIZWlnaHQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBvbkRyYWcgPSBcIlwiO1xyXG5cdCAgICAgICAgICAgICAgICBkcmFnVGQgPSBudWxsO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaGlkZURyYWdMaW5lKG1lKTtcclxuXHQgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdzYXZlU2NlbmUnKTtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIC8v5q2j5bi454q25oCB5LiL55qEbW91c2V1cFxyXG5cdCAgICAgICAgaWYgKCFzdGFydFRkKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHRhcmdldCA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUoZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudCwgXCJ0ZFwiLCB0cnVlKTtcclxuXHQgICAgICAgICAgICBpZiAoIXRhcmdldCkgdGFyZ2V0ID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShldnQudGFyZ2V0IHx8IGV2dC5zcmNFbGVtZW50LCBcInRoXCIsIHRydWUpO1xyXG5cdCAgICAgICAgICAgIGlmICh0YXJnZXQgJiYgKHRhcmdldC50YWdOYW1lID09IFwiVERcIiB8fCB0YXJnZXQudGFnTmFtZSA9PSBcIlRIXCIpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChtZS5maXJlRXZlbnQoXCJleGNsdWRldGFibGVcIiwgdGFyZ2V0KSA9PT0gdHJ1ZSkgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICByYW5nZSA9IG5ldyBkb20uUmFuZ2UobWUuZG9jdW1lbnQpO1xyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydCh0YXJnZXQsIDApLnNldEN1cnNvcihmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICB2YXIgdXQgPSBnZXRVRVRhYmxlKHN0YXJ0VGQpLFxyXG5cdCAgICAgICAgICAgICAgICBjZWxsID0gdXQgPyB1dC5zZWxlY3RlZFRkc1swXSA6IG51bGw7XHJcblx0ICAgICAgICAgICAgaWYgKGNlbGwpIHtcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UgPSBuZXcgZG9tLlJhbmdlKG1lLmRvY3VtZW50KTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGRvbVV0aWxzLmlzRW1wdHlCbG9jayhjZWxsKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2V0U3RhcnQoY2VsbCwgMCkuc2V0Q3Vyc29yKGZhbHNlLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyhjZWxsKS5zaHJpbmtCb3VuZGFyeSgpLnNldEN1cnNvcihmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICByYW5nZSA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpLnNocmlua0JvdW5kYXJ5KCk7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghcmFuZ2UuY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHJhbmdlLnN0YXJ0Q29udGFpbmVyLCBbJ3RkJywgJ3RoJ10sIHRydWUpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUocmFuZ2UuZW5kQ29udGFpbmVyLCBbJ3RkJywgJ3RoJ10sIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/lnKh0YWJsZemHjOi+ueeahOS4jeiDvea4hemZpFxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0ICYmICFlbmQgfHwgIXN0YXJ0ICYmIGVuZCB8fCBzdGFydCAmJiBlbmQgJiYgc3RhcnQgIT09IGVuZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldEN1cnNvcihmYWxzZSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgc3RhcnRUZCA9IG51bGw7XHJcblx0ICAgICAgICAgICAgbWUucmVtb3ZlTGlzdGVuZXIoJ21vdXNlb3ZlcicsIG1vdXNlT3ZlckV2ZW50KTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIG1lLl9zZWxlY3Rpb25DaGFuZ2UoMjUwLCBldnQpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBtb3VzZU92ZXJFdmVudCh0eXBlLCBldnQpIHtcclxuXHJcblx0ICAgICAgICBpZiggaXNFZGl0b3JEaXNhYmxlZCgpICkge1xyXG5cdCAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgIHRhciA9IGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQ7XHJcblx0ICAgICAgICBjdXJyZW50VGQgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHRhciwgXCJ0ZFwiLCB0cnVlKSB8fCBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKHRhciwgXCJ0aFwiLCB0cnVlKTtcclxuXHQgICAgICAgIC8v6ZyA6KaB5Yik5pat5Lik5LiqVETmmK/lkKbkvY3kuo7lkIzkuIDkuKrooajmoLzlhoVcclxuXHQgICAgICAgIGlmIChzdGFydFRkICYmIGN1cnJlbnRUZCAmJlxyXG5cdCAgICAgICAgICAgICgoc3RhcnRUZC50YWdOYW1lID09IFwiVERcIiAmJiBjdXJyZW50VGQudGFnTmFtZSA9PSBcIlREXCIpIHx8IChzdGFydFRkLnRhZ05hbWUgPT0gXCJUSFwiICYmIGN1cnJlbnRUZC50YWdOYW1lID09IFwiVEhcIikpICYmXHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZShzdGFydFRkLCAndGFibGUnKSA9PSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKGN1cnJlbnRUZCwgJ3RhYmxlJykpIHtcclxuXHQgICAgICAgICAgICB2YXIgdXQgPSBnZXRVRVRhYmxlKGN1cnJlbnRUZCk7XHJcblx0ICAgICAgICAgICAgaWYgKHN0YXJ0VGQgIT0gY3VycmVudFRkKSB7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmRvY3VtZW50LmJvZHkuc3R5bGUud2Via2l0VXNlclNlbGVjdCA9ICdub25lJztcclxuXHQgICAgICAgICAgICAgICAgbWUuc2VsZWN0aW9uLmdldE5hdGl2ZSgpW2Jyb3dzZXIuaWU5YmVsb3cgPyAnZW1wdHknIDogJ3JlbW92ZUFsbFJhbmdlcyddKCk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IHV0LmdldENlbGxzUmFuZ2Uoc3RhcnRUZCwgY3VycmVudFRkKTtcclxuXHQgICAgICAgICAgICAgICAgdXQuc2V0U2VsZWN0ZWQocmFuZ2UpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmRvY3VtZW50LmJvZHkuc3R5bGUud2Via2l0VXNlclNlbGVjdCA9ICcnO1xyXG5cdCAgICAgICAgICAgICAgICB1dC5jbGVhclNlbGVjdGVkKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCA/IGV2dC5wcmV2ZW50RGVmYXVsdCgpIDogKGV2dC5yZXR1cm5WYWx1ZSA9IGZhbHNlKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gc2V0Q2VsbEhlaWdodChjZWxsLCBoZWlnaHQsIGJhY2tIZWlnaHQpIHtcclxuXHQgICAgICAgIHZhciBsaW5lSGlnaHQgPSBwYXJzZUludChkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKGNlbGwsIFwibGluZS1oZWlnaHRcIiksIDEwKSxcclxuXHQgICAgICAgICAgICB0bXBIZWlnaHQgPSBiYWNrSGVpZ2h0ICsgaGVpZ2h0O1xyXG5cdCAgICAgICAgaGVpZ2h0ID0gdG1wSGVpZ2h0IDwgbGluZUhpZ2h0ID8gbGluZUhpZ2h0IDogdG1wSGVpZ2h0O1xyXG5cdCAgICAgICAgaWYgKGNlbGwuc3R5bGUuaGVpZ2h0KSBjZWxsLnN0eWxlLmhlaWdodCA9IFwiXCI7XHJcblx0ICAgICAgICBjZWxsLnJvd1NwYW4gPT0gMSA/IGNlbGwuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIGhlaWdodCkgOiAoY2VsbC5yZW1vdmVBdHRyaWJ1dGUgJiYgY2VsbC5yZW1vdmVBdHRyaWJ1dGUoXCJoZWlnaHRcIikpO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBnZXRXaWR0aChjZWxsKSB7XHJcblx0ICAgICAgICBpZiAoIWNlbGwpcmV0dXJuIDA7XHJcblx0ICAgICAgICByZXR1cm4gcGFyc2VJbnQoZG9tVXRpbHMuZ2V0Q29tcHV0ZWRTdHlsZShjZWxsLCBcIndpZHRoXCIpLCAxMCk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIGNoYW5nZUNvbFdpZHRoKGNlbGwsIGNoYW5nZVZhbHVlKSB7XHJcblxyXG5cdCAgICAgICAgdmFyIHV0ID0gZ2V0VUVUYWJsZShjZWxsKTtcclxuXHQgICAgICAgIGlmICh1dCkge1xyXG5cclxuXHQgICAgICAgICAgICAvL+agueaNruW9k+WJjeenu+WKqOeahOi+ueahhuiOt+WPluebuOWFs+eahOWNleWFg+agvFxyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZSA9IHV0LnRhYmxlLFxyXG5cdCAgICAgICAgICAgICAgICBjZWxscyA9IGdldENlbGxzQnlNb3ZlQm9yZGVyKCBjZWxsLCB0YWJsZSApO1xyXG5cclxuXHQgICAgICAgICAgICB0YWJsZS5zdHlsZS53aWR0aCA9IFwiXCI7XHJcblx0ICAgICAgICAgICAgdGFibGUucmVtb3ZlQXR0cmlidXRlKFwid2lkdGhcIik7XHJcblxyXG5cdCAgICAgICAgICAgIC8v5L+u5q2j5pS55Y+Y6YePXHJcblx0ICAgICAgICAgICAgY2hhbmdlVmFsdWUgPSBjb3JyZWN0Q2hhbmdlVmFsdWUoIGNoYW5nZVZhbHVlLCBjZWxsLCBjZWxscyApO1xyXG5cclxuXHQgICAgICAgICAgICBpZiAoY2VsbC5uZXh0U2libGluZykge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdmFyIGk9MDtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHV0aWxzLmVhY2goIGNlbGxzLCBmdW5jdGlvbiggY2VsbEdyb3VwICl7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgY2VsbEdyb3VwLmxlZnQud2lkdGggPSAoK2NlbGxHcm91cC5sZWZ0LndpZHRoKStjaGFuZ2VWYWx1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGxHcm91cC5yaWdodCAmJiAoIGNlbGxHcm91cC5yaWdodC53aWR0aCA9ICgrY2VsbEdyb3VwLnJpZ2h0LndpZHRoKS1jaGFuZ2VWYWx1ZSApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdXRpbHMuZWFjaCggY2VsbHMsIGZ1bmN0aW9uKCBjZWxsR3JvdXAgKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNlbGxHcm91cC5sZWZ0LndpZHRoIC09IC1jaGFuZ2VWYWx1ZTtcclxuXHQgICAgICAgICAgICAgICAgfSApO1xyXG5cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBpc0VkaXRvckRpc2FibGVkKCkge1xyXG5cdCAgICAgICAgcmV0dXJuIG1lLmJvZHkuY29udGVudEVkaXRhYmxlID09PSBcImZhbHNlXCI7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGZ1bmN0aW9uIGNoYW5nZVJvd0hlaWdodCh0ZCwgY2hhbmdlVmFsdWUpIHtcclxuXHQgICAgICAgIGlmIChNYXRoLmFicyhjaGFuZ2VWYWx1ZSkgPCAxMCkgcmV0dXJuO1xyXG5cdCAgICAgICAgdmFyIHV0ID0gZ2V0VUVUYWJsZSh0ZCk7XHJcblx0ICAgICAgICBpZiAodXQpIHtcclxuXHQgICAgICAgICAgICB2YXIgY2VsbHMgPSB1dC5nZXRTYW1lRW5kUG9zQ2VsbHModGQsIFwieVwiKSxcclxuXHQgICAgICAgICAgICAvL+Wkh+S7vemcgOimgei/nuW4puWPmOWMlueahHRk55qE5Y6f5aeL6auY5bqm77yM5ZCm5YiZ5ZCO5pyf5peg5rOV6I635Y+W5q2j56Gu55qE5YC8XHJcblx0ICAgICAgICAgICAgICAgIGJhY2tIZWlnaHQgPSBjZWxsc1swXSA/IGNlbGxzWzBdLm9mZnNldEhlaWdodCA6IDA7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNlbGw7IGNlbGwgPSBjZWxsc1tpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICBzZXRDZWxsSGVpZ2h0KGNlbGwsIGNoYW5nZVZhbHVlLCBiYWNrSGVpZ2h0KTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog6I635Y+W6LCD5pW05Y2V5YWD5qC85aSn5bCP55qE55u45YWz5Y2V5YWD5qC8XHJcblx0ICAgICAqIEBpc0NvbnRhaW5NZXJnZUNlbGwg6L+U5Zue55qE57uT5p6c5Lit5piv5ZCm5YyF5ZCr5Y+R55Sf5ZCI5bm25ZCO55qE5Y2V5YWD5qC8XHJcblx0ICAgICAqL1xyXG5cdCAgICBmdW5jdGlvbiBnZXRDZWxsc0J5TW92ZUJvcmRlciggY2VsbCwgdGFibGUsIGlzQ29udGFpbk1lcmdlQ2VsbCApIHtcclxuXHJcblx0ICAgICAgICBpZiggIXRhYmxlICkge1xyXG5cdCAgICAgICAgICAgIHRhYmxlID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZSggY2VsbCwgJ3RhYmxlJyApO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIGlmKCAhdGFibGUgKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgLy/ojrflj5bliLDor6XljZXlhYPmoLzmiYDlnKjooYznmoTluo/liJflj7dcclxuXHQgICAgICAgIHZhciBpbmRleCA9IGRvbVV0aWxzLmdldE5vZGVJbmRleCggY2VsbCApLFxyXG5cdCAgICAgICAgICAgIHRlbXAgPSBjZWxsLFxyXG5cdCAgICAgICAgICAgIHJvd3MgPSB0YWJsZS5yb3dzLFxyXG5cdCAgICAgICAgICAgIGNvbEluZGV4ID0gMDtcclxuXHJcblx0ICAgICAgICB3aGlsZSggdGVtcCApIHtcclxuXHQgICAgICAgICAgICAvL+iOt+WPluWIsOW9k+WJjeWNleWFg+agvOWcqOacquWPkeeUn+WNleWFg+agvOWQiOW5tuaXtueahOW6j+WIl1xyXG5cdCAgICAgICAgICAgIGlmKCB0ZW1wLm5vZGVUeXBlID09PSAxICkge1xyXG5cdCAgICAgICAgICAgICAgICBjb2xJbmRleCArPSAodGVtcC5jb2xTcGFuIHx8IDEpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0ZW1wID0gdGVtcC5wcmV2aW91c1NpYmxpbmc7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgdGVtcCA9IG51bGw7XHJcblxyXG5cdCAgICAgICAgLy/orrDlvZXmg7PlhbPnmoTljZXlhYPmoLxcclxuXHQgICAgICAgIHZhciBib3JkZXJDZWxscyA9IFtdO1xyXG5cclxuXHQgICAgICAgIHV0aWxzLmVhY2gocm93cywgZnVuY3Rpb24oIHRhYlJvdyApe1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgY2VsbHMgPSB0YWJSb3cuY2VsbHMsXHJcblx0ICAgICAgICAgICAgICAgIGN1cnJJbmRleCA9IDA7XHJcblxyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2goIGNlbGxzLCBmdW5jdGlvbiggdGFiQ2VsbCApe1xyXG5cclxuXHQgICAgICAgICAgICAgICAgY3VyckluZGV4ICs9ICh0YWJDZWxsLmNvbFNwYW4gfHwgMSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZiggY3VyckluZGV4ID09PSBjb2xJbmRleCApIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBib3JkZXJDZWxscy5wdXNoKHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YWJDZWxsLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiB0YWJDZWxsLm5leHRTaWJsaW5nIHx8IG51bGxcclxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggY3VyckluZGV4ID4gY29sSW5kZXggKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoIGlzQ29udGFpbk1lcmdlQ2VsbCApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBib3JkZXJDZWxscy5wdXNoKHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogdGFiQ2VsbFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgfSApO1xyXG5cclxuXHQgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgIHJldHVybiBib3JkZXJDZWxscztcclxuXHJcblx0ICAgIH1cclxuXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog6YCa6L+H57uZ5a6a55qE5Y2V5YWD5qC86ZuG5ZCI6I635Y+W5pyA5bCP55qE5Y2V5YWD5qC8d2lkdGhcclxuXHQgICAgICovXHJcblx0ICAgIGZ1bmN0aW9uIGdldE1pbldpZHRoQnlUYWJsZUNlbGxzKCBjZWxscyApIHtcclxuXHJcblx0ICAgICAgICB2YXIgbWluV2lkdGggPSBOdW1iZXIuTUFYX1ZBTFVFO1xyXG5cclxuXHQgICAgICAgIGZvciggdmFyIGkgPSAwLCBjdXJDZWxsOyBjdXJDZWxsID0gY2VsbHNbIGkgXSA7IGkrKyApIHtcclxuXHJcblx0ICAgICAgICAgICAgbWluV2lkdGggPSBNYXRoLm1pbiggbWluV2lkdGgsIGN1ckNlbGwud2lkdGggfHwgZ2V0VGFibGVDZWxsV2lkdGgoIGN1ckNlbGwgKSApO1xyXG5cclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICByZXR1cm4gbWluV2lkdGg7XHJcblxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBjb3JyZWN0Q2hhbmdlVmFsdWUoIGNoYW5nZVZhbHVlLCByZWxhdGVkQ2VsbCwgY2VsbHMgKSB7XHJcblxyXG5cdCAgICAgICAgLy/kuLrljZXlhYPmoLznmoRwYWFkaW5n6aKE55WZ56m66Ze0XHJcblx0ICAgICAgICBjaGFuZ2VWYWx1ZSAtPSBnZXRUYWJjZWxsU3BhY2UoKTtcclxuXHJcblx0ICAgICAgICBpZiggY2hhbmdlVmFsdWUgPCAwICkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiAwO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIGNoYW5nZVZhbHVlIC09IGdldFRhYmxlQ2VsbFdpZHRoKCByZWxhdGVkQ2VsbCApO1xyXG5cclxuXHQgICAgICAgIC8v56Gu5a6a5pa55ZCRXHJcblx0ICAgICAgICB2YXIgZGlyZWN0aW9uID0gY2hhbmdlVmFsdWUgPCAwID8gJ2xlZnQnOidyaWdodCc7XHJcblxyXG5cdCAgICAgICAgY2hhbmdlVmFsdWUgPSBNYXRoLmFicyhjaGFuZ2VWYWx1ZSk7XHJcblxyXG5cdCAgICAgICAgLy/lj6rlhbPlv4PpnZ7mnIDlkI7kuIDkuKrljZXlhYPmoLzlsLHlj6/ku6VcclxuXHQgICAgICAgIHV0aWxzLmVhY2goIGNlbGxzLCBmdW5jdGlvbiggY2VsbEdyb3VwICl7XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBjdXJDZWxsID0gY2VsbEdyb3VwW2RpcmVjdGlvbl07XHJcblxyXG5cdCAgICAgICAgICAgIC8v5Li65Y2V5YWD5qC85L+d55WZ5pyA5bCP56m66Ze0XHJcblx0ICAgICAgICAgICAgaWYoIGN1ckNlbGwgKSB7XHJcblx0ICAgICAgICAgICAgICAgIGNoYW5nZVZhbHVlID0gTWF0aC5taW4oIGNoYW5nZVZhbHVlLCBnZXRUYWJsZUNlbGxXaWR0aCggY3VyQ2VsbCApLWNlbGxNaW5XaWR0aCApO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgfSApO1xyXG5cclxuXHJcblx0ICAgICAgICAvL+S/ruato+i2iueVjFxyXG5cdCAgICAgICAgY2hhbmdlVmFsdWUgPSBjaGFuZ2VWYWx1ZSA8IDAgPyAwIDogY2hhbmdlVmFsdWU7XHJcblxyXG5cdCAgICAgICAgcmV0dXJuIGRpcmVjdGlvbiA9PT0gJ2xlZnQnID8gLWNoYW5nZVZhbHVlIDogY2hhbmdlVmFsdWU7XHJcblxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiBnZXRUYWJsZUNlbGxXaWR0aCggY2VsbCApIHtcclxuXHJcblx0ICAgICAgICB2YXIgd2lkdGggPSAwLFxyXG5cdCAgICAgICAgICAgIC8v5YGP56e757qg5q2j6YePXHJcblx0ICAgICAgICAgICAgb2Zmc2V0ID0gMCxcclxuXHQgICAgICAgICAgICB3aWR0aCA9IGNlbGwub2Zmc2V0V2lkdGggLSBnZXRUYWJjZWxsU3BhY2UoKTtcclxuXHJcblx0ICAgICAgICAvL+acgOWQjuS4gOS4quiKgueCuee6oOato+S4gOS4i1xyXG5cdCAgICAgICAgaWYoICFjZWxsLm5leHRTaWJsaW5nICkge1xyXG5cclxuXHQgICAgICAgICAgICB3aWR0aCAtPSBnZXRUYWJsZUNlbGxPZmZzZXQoIGNlbGwgKTtcclxuXHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgd2lkdGggPSB3aWR0aCA8IDAgPyAwIDogd2lkdGg7XHJcblxyXG5cdCAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICBjZWxsLndpZHRoID0gd2lkdGg7XHJcblx0ICAgICAgICB9IGNhdGNoKGUpIHtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICByZXR1cm4gd2lkdGg7XHJcblxyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog6I635Y+W5Y2V5YWD5qC85omA5Zyo6KGo5qC855qE5pyA5pyr5Y2V5YWD5qC855qE5YGP56e76YePXHJcblx0ICAgICAqL1xyXG5cdCAgICBmdW5jdGlvbiBnZXRUYWJsZUNlbGxPZmZzZXQoIGNlbGwgKSB7XHJcblxyXG5cdCAgICAgICAgdGFiID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZSggY2VsbCwgXCJ0YWJsZVwiLCBmYWxzZSk7XHJcblxyXG5cdCAgICAgICAgaWYoIHRhYi5vZmZzZXRWYWwgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0ICAgICAgICAgICAgdmFyIHByZXYgPSBjZWxsLnByZXZpb3VzU2libGluZztcclxuXHJcblx0ICAgICAgICAgICAgaWYoIHByZXYgKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAvL+acgOWQjuS4gOS4quWNleWFg+agvOWSjOWJjeS4gOS4quWNleWFg+agvOeahHdpZHRoIGRpZmbnu5Pmnpwg5aaC5p6c5oGw5aW95Li65LiA5LiqYm9yZGVyIHdpZHRo77yMIOWImeadoeS7tuaIkOeri1xyXG5cdCAgICAgICAgICAgICAgICB0YWIub2Zmc2V0VmFsID0gY2VsbC5vZmZzZXRXaWR0aCAtIHByZXYub2Zmc2V0V2lkdGggPT09IFVULmJvcmRlcldpZHRoID8gVVQuYm9yZGVyV2lkdGggOiAwO1xyXG5cclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICB0YWIub2Zmc2V0VmFsID0gMDtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIHJldHVybiB0YWIub2Zmc2V0VmFsO1xyXG5cclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gZ2V0VGFiY2VsbFNwYWNlKCkge1xyXG5cclxuXHQgICAgICAgIGlmKCBVVC50YWJjZWxsU3BhY2UgPT09IHVuZGVmaW5lZCApIHtcclxuXHJcblx0ICAgICAgICAgICAgdmFyIGNlbGwgPSBudWxsLFxyXG5cdCAgICAgICAgICAgICAgICB0YWIgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGFibGVcIiksXHJcblx0ICAgICAgICAgICAgICAgIHRib2R5ID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRib2R5XCIpLFxyXG5cdCAgICAgICAgICAgICAgICB0cm93ID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpLFxyXG5cdCAgICAgICAgICAgICAgICB0YWJjZWxsID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpLFxyXG5cdCAgICAgICAgICAgICAgICBtaXJyb3IgPSBudWxsO1xyXG5cclxuXHQgICAgICAgICAgICB0YWJjZWxsLnN0eWxlLmNzc1RleHQgPSAnYm9yZGVyOiAwOyc7XHJcblx0ICAgICAgICAgICAgdGFiY2VsbC53aWR0aCA9IDE7XHJcblxyXG5cdCAgICAgICAgICAgIHRyb3cuYXBwZW5kQ2hpbGQoIHRhYmNlbGwgKTtcclxuXHQgICAgICAgICAgICB0cm93LmFwcGVuZENoaWxkKCBtaXJyb3IgPSB0YWJjZWxsLmNsb25lTm9kZSggZmFsc2UgKSApO1xyXG5cclxuXHQgICAgICAgICAgICB0Ym9keS5hcHBlbmRDaGlsZCggdHJvdyApO1xyXG5cclxuXHQgICAgICAgICAgICB0YWIuYXBwZW5kQ2hpbGQoIHRib2R5ICk7XHJcblxyXG5cdCAgICAgICAgICAgIHRhYi5zdHlsZS5jc3NUZXh0ID0gXCJ2aXNpYmlsaXR5OiBoaWRkZW47XCI7XHJcblxyXG5cdCAgICAgICAgICAgIG1lLmJvZHkuYXBwZW5kQ2hpbGQoIHRhYiApO1xyXG5cclxuXHQgICAgICAgICAgICBVVC5wYWRkaW5nU3BhY2UgPSB0YWJjZWxsLm9mZnNldFdpZHRoIC0gMTtcclxuXHJcblx0ICAgICAgICAgICAgdmFyIHRtcFRhYldpZHRoID0gdGFiLm9mZnNldFdpZHRoO1xyXG5cclxuXHQgICAgICAgICAgICB0YWJjZWxsLnN0eWxlLmNzc1RleHQgPSAnJztcclxuXHQgICAgICAgICAgICBtaXJyb3Iuc3R5bGUuY3NzVGV4dCA9ICcnO1xyXG5cclxuXHQgICAgICAgICAgICBVVC5ib3JkZXJXaWR0aCA9ICggdGFiLm9mZnNldFdpZHRoIC0gdG1wVGFiV2lkdGggKSAvIDM7XHJcblxyXG5cdCAgICAgICAgICAgIFVULnRhYmNlbGxTcGFjZSA9IFVULnBhZGRpbmdTcGFjZSArIFVULmJvcmRlcldpZHRoO1xyXG5cclxuXHQgICAgICAgICAgICBtZS5ib2R5LnJlbW92ZUNoaWxkKCB0YWIgKTtcclxuXHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgZ2V0VGFiY2VsbFNwYWNlID0gZnVuY3Rpb24oKXsgcmV0dXJuIFVULnRhYmNlbGxTcGFjZTsgfTtcclxuXHJcblx0ICAgICAgICByZXR1cm4gVVQudGFiY2VsbFNwYWNlO1xyXG5cclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gZ2V0RHJhZ0xpbmUoZWRpdG9yLCBkb2MpIHtcclxuXHQgICAgICAgIGlmIChtb3VzZWRvd24pcmV0dXJuO1xyXG5cdCAgICAgICAgZHJhZ0xpbmUgPSBlZGl0b3IuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuXHQgICAgICAgIGRvbVV0aWxzLnNldEF0dHJpYnV0ZXMoZHJhZ0xpbmUsIHtcclxuXHQgICAgICAgICAgICBpZDpcInVlX3RhYmxlRHJhZ0xpbmVcIixcclxuXHQgICAgICAgICAgICB1bnNlbGVjdGFibGU6J29uJyxcclxuXHQgICAgICAgICAgICBjb250ZW50ZWRpdGFibGU6ZmFsc2UsXHJcblx0ICAgICAgICAgICAgJ29ucmVzaXplc3RhcnQnOidyZXR1cm4gZmFsc2UnLFxyXG5cdCAgICAgICAgICAgICdvbmRyYWdzdGFydCc6J3JldHVybiBmYWxzZScsXHJcblx0ICAgICAgICAgICAgJ29uc2VsZWN0c3RhcnQnOidyZXR1cm4gZmFsc2UnLFxyXG5cdCAgICAgICAgICAgIHN0eWxlOlwiYmFja2dyb3VuZC1jb2xvcjpibHVlO3Bvc2l0aW9uOmFic29sdXRlO3BhZGRpbmc6MDttYXJnaW46MDtiYWNrZ3JvdW5kLWltYWdlOm5vbmU7Ym9yZGVyOjBweCBub25lO29wYWNpdHk6MDtmaWx0ZXI6YWxwaGEob3BhY2l0eT0wKVwiXHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIGVkaXRvci5ib2R5LmFwcGVuZENoaWxkKGRyYWdMaW5lKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gaGlkZURyYWdMaW5lKGVkaXRvcikge1xyXG5cdCAgICAgICAgaWYgKG1vdXNlZG93bilyZXR1cm47XHJcblx0ICAgICAgICB2YXIgbGluZTtcclxuXHQgICAgICAgIHdoaWxlIChsaW5lID0gZWRpdG9yLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd1ZV90YWJsZURyYWdMaW5lJykpIHtcclxuXHQgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobGluZSlcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOS+neaNrnN0YXRl77yIdnxo77yJ5ZyoY2VsbOS9jee9ruaYvuekuuaoque6v1xyXG5cdCAgICAgKiBAcGFyYW0gc3RhdGVcclxuXHQgICAgICogQHBhcmFtIGNlbGxcclxuXHQgICAgICovXHJcblx0ICAgIGZ1bmN0aW9uIHNob3dEcmFnTGluZUF0KHN0YXRlLCBjZWxsKSB7XHJcblx0ICAgICAgICBpZiAoIWNlbGwpIHJldHVybjtcclxuXHQgICAgICAgIHZhciB0YWJsZSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUoY2VsbCwgXCJ0YWJsZVwiKSxcclxuXHQgICAgICAgICAgICBjYXB0aW9uID0gdGFibGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2NhcHRpb24nKSxcclxuXHQgICAgICAgICAgICB3aWR0aCA9IHRhYmxlLm9mZnNldFdpZHRoLFxyXG5cdCAgICAgICAgICAgIGhlaWdodCA9IHRhYmxlLm9mZnNldEhlaWdodCAtIChjYXB0aW9uLmxlbmd0aCA+IDAgPyBjYXB0aW9uWzBdLm9mZnNldEhlaWdodCA6IDApLFxyXG5cdCAgICAgICAgICAgIHRhYmxlUG9zID0gZG9tVXRpbHMuZ2V0WFkodGFibGUpLFxyXG5cdCAgICAgICAgICAgIGNlbGxQb3MgPSBkb21VdGlscy5nZXRYWShjZWxsKSwgY3NzO1xyXG5cdCAgICAgICAgc3dpdGNoIChzdGF0ZSkge1xyXG5cdCAgICAgICAgICAgIGNhc2UgXCJoXCI6XHJcblx0ICAgICAgICAgICAgICAgIGNzcyA9ICdoZWlnaHQ6JyArIGhlaWdodCArICdweDt0b3A6JyArICh0YWJsZVBvcy55ICsgKGNhcHRpb24ubGVuZ3RoID4gMCA/IGNhcHRpb25bMF0ub2Zmc2V0SGVpZ2h0IDogMCkpICsgJ3B4O2xlZnQ6JyArIChjZWxsUG9zLnggKyBjZWxsLm9mZnNldFdpZHRoKTtcclxuXHQgICAgICAgICAgICAgICAgZHJhZ0xpbmUuc3R5bGUuY3NzVGV4dCA9IGNzcyArICdweDtwb3NpdGlvbjogYWJzb2x1dGU7ZGlzcGxheTpibG9jaztiYWNrZ3JvdW5kLWNvbG9yOmJsdWU7d2lkdGg6MXB4O2JvcmRlcjowOyBjb2xvcjpibHVlO29wYWNpdHk6LjM7ZmlsdGVyOmFscGhhKG9wYWNpdHk9MzApJztcclxuXHQgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgY2FzZSBcInZcIjpcclxuXHQgICAgICAgICAgICAgICAgY3NzID0gJ3dpZHRoOicgKyB3aWR0aCArICdweDtsZWZ0OicgKyB0YWJsZVBvcy54ICsgJ3B4O3RvcDonICsgKGNlbGxQb3MueSArIGNlbGwub2Zmc2V0SGVpZ2h0ICk7XHJcblx0ICAgICAgICAgICAgICAgIC8v5b+F6aG75Yqg5LiKYm9yZGVyOjDlkoxjb2xvcjpibHVl77yM5ZCm5YiZ5L2O54mIaWXkuI3mlK/mjIHog4zmma/oibLmmL7npLpcclxuXHQgICAgICAgICAgICAgICAgZHJhZ0xpbmUuc3R5bGUuY3NzVGV4dCA9IGNzcyArICdweDtvdmVyZmxvdzpoaWRkZW47cG9zaXRpb246IGFic29sdXRlO2Rpc3BsYXk6YmxvY2s7YmFja2dyb3VuZC1jb2xvcjpibHVlO2hlaWdodDoxcHg7Ym9yZGVyOjA7Y29sb3I6Ymx1ZTtvcGFjaXR5Oi4yO2ZpbHRlcjphbHBoYShvcGFjaXR5PTIwKSc7XHJcblx0ICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgIGRlZmF1bHQ6XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDlvZPooajmoLzovrnmoYbpopzoibLkuLrnmb3oibLml7borr7nva7kuLromZrnur8sdHJ1ZeS4uua3u+WKoOiZmue6v1xyXG5cdCAgICAgKiBAcGFyYW0gZWRpdG9yXHJcblx0ICAgICAqIEBwYXJhbSBmbGFnXHJcblx0ICAgICAqL1xyXG5cdCAgICBmdW5jdGlvbiBzd2l0Y2hCb3JkZXJDb2xvcihlZGl0b3IsIGZsYWcpIHtcclxuXHQgICAgICAgIHZhciB0YWJsZUFyciA9IGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKGVkaXRvci5ib2R5LCBcInRhYmxlXCIpLCBjb2xvcjtcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBub2RlOyBub2RlID0gdGFibGVBcnJbaSsrXTspIHtcclxuXHQgICAgICAgICAgICB2YXIgdGQgPSBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZShub2RlLCBcInRkXCIpO1xyXG5cdCAgICAgICAgICAgIGlmICh0ZFswXSkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoZmxhZykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY29sb3IgPSAodGRbMF0uc3R5bGUuYm9yZGVyQ29sb3IpLnJlcGxhY2UoL1xccy9nLCBcIlwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICgvKCNmZmZmZmYpfChyZ2JcXCgyNTUsMjU1LDI1NVxcKSkvaWcudGVzdChjb2xvcikpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuYWRkQ2xhc3Mobm9kZSwgXCJub0JvcmRlclRhYmxlXCIpXHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmVDbGFzc2VzKG5vZGUsIFwibm9Cb3JkZXJUYWJsZVwiKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gZ2V0VGFibGVXaWR0aChlZGl0b3IsIG5lZWRJRUhhY2ssIGRlZmF1bHRWYWx1ZSkge1xyXG5cdCAgICAgICAgdmFyIGJvZHkgPSBlZGl0b3IuYm9keTtcclxuXHQgICAgICAgIHJldHVybiBib2R5Lm9mZnNldFdpZHRoIC0gKG5lZWRJRUhhY2sgPyBwYXJzZUludChkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKGJvZHksICdtYXJnaW4tbGVmdCcpLCAxMCkgKiAyIDogMCkgLSBkZWZhdWx0VmFsdWUudGFibGVCb3JkZXIgKiAyIC0gKGVkaXRvci5vcHRpb25zLm9mZnNldFdpZHRoIHx8IDApO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog6I635Y+W5b2T5YmN5ouW5Yqo55qE5Y2V5YWD5qC8XHJcblx0ICAgICAqL1xyXG5cdCAgICBmdW5jdGlvbiBnZXRUYXJnZXRUZChlZGl0b3IsIGV2dCkge1xyXG5cclxuXHQgICAgICAgIHZhciB0YXJnZXQgPSBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQsIFtcInRkXCIsIFwidGhcIl0sIHRydWUpLFxyXG5cdCAgICAgICAgICAgIGRpciA9IG51bGw7XHJcblxyXG5cdCAgICAgICAgaWYoICF0YXJnZXQgKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgZGlyID0gZ2V0UmVsYXRpb24oIHRhcmdldCwgbW91c2VDb29yZHMoIGV2dCApICk7XHJcblxyXG5cdCAgICAgICAgLy/lpoLmnpzmnInliY3kuIDkuKroioLngrnvvIwg6ZyA6KaB5YGa5LiA5Liq5L+u5q2j77yMIOWQpuWImeWPr+iDveS8muW+l+WIsOS4gOS4qumUmeivr+eahHRkXHJcblxyXG5cdCAgICAgICAgaWYoICF0YXJnZXQgKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgaWYoIGRpciA9PT0gJ2gxJyAmJiB0YXJnZXQucHJldmlvdXNTaWJsaW5nICkge1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBkb21VdGlscy5nZXRYWSggdGFyZ2V0KSxcclxuXHQgICAgICAgICAgICAgICAgY2VsbFdpZHRoID0gdGFyZ2V0Lm9mZnNldFdpZHRoO1xyXG5cclxuXHQgICAgICAgICAgICBpZiggTWF0aC5hYnMoIHBvc2l0aW9uLnggKyBjZWxsV2lkdGggLSBldnQuY2xpZW50WCApID4gY2VsbFdpZHRoIC8gMyApIHtcclxuXHQgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdGFyZ2V0LnByZXZpb3VzU2libGluZztcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfSBlbHNlIGlmKCBkaXIgPT09ICd2MScgJiYgdGFyZ2V0LnBhcmVudE5vZGUucHJldmlvdXNTaWJsaW5nICkge1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBkb21VdGlscy5nZXRYWSggdGFyZ2V0KSxcclxuXHQgICAgICAgICAgICAgICAgY2VsbEhlaWdodCA9IHRhcmdldC5vZmZzZXRIZWlnaHQ7XHJcblxyXG5cdCAgICAgICAgICAgIGlmKCBNYXRoLmFicyggcG9zaXRpb24ueSArIGNlbGxIZWlnaHQgLSBldnQuY2xpZW50WSApID4gY2VsbEhlaWdodCAvIDMgKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRhcmdldCA9IHRhcmdldC5wYXJlbnROb2RlLnByZXZpb3VzU2libGluZy5maXJzdENoaWxkO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgIC8v5o6S6Zmk5LqG6Z2edGTlhoXpg6jku6Xlj4rnlKjkuo7ku6PnoIHpq5jkuq7pg6jliIbnmoR0ZFxyXG5cdCAgICAgICAgcmV0dXJuIHRhcmdldCAmJiAhKGVkaXRvci5maXJlRXZlbnQoXCJleGNsdWRldGFibGVcIiwgdGFyZ2V0KSA9PT0gdHJ1ZSkgPyB0YXJnZXQgOiBudWxsO1xyXG5cdCAgICB9XHJcblxyXG5cdH07XHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL3RhYmxlLnNvcnQuanNcclxuXHQvKipcclxuXHQgKiBDcmVhdGVkIHdpdGggSmV0QnJhaW5zIFBocFN0b3JtLlxyXG5cdCAqIFVzZXI6IEppbnFuXHJcblx0ICogRGF0ZTogMTMtMTAtMTJcclxuXHQgKiBUaW1lOiDkuIrljYgxMDoyMFxyXG5cdCAqIFRvIGNoYW5nZSB0aGlzIHRlbXBsYXRlIHVzZSBGaWxlIHwgU2V0dGluZ3MgfCBGaWxlIFRlbXBsYXRlcy5cclxuXHQgKi9cclxuXHJcblx0VUUuVUVUYWJsZS5wcm90b3R5cGUuc29ydFRhYmxlID0gZnVuY3Rpb24gKHNvcnRCeUNlbGxJbmRleCwgY29tcGFyZUZuKSB7XHJcblx0ICAgIHZhciB0YWJsZSA9IHRoaXMudGFibGUsXHJcblx0ICAgICAgICByb3dzID0gdGFibGUucm93cyxcclxuXHQgICAgICAgIHRyQXJyYXkgPSBbXSxcclxuXHQgICAgICAgIGZsYWcgPSByb3dzWzBdLmNlbGxzWzBdLnRhZ05hbWUgPT09IFwiVEhcIixcclxuXHQgICAgICAgIGxhc3RSb3dJbmRleCA9IDA7XHJcblx0ICAgIGlmKHRoaXMuc2VsZWN0ZWRUZHMubGVuZ3RoKXtcclxuXHQgICAgICAgIHZhciByYW5nZSA9IHRoaXMuY2VsbHNSYW5nZSxcclxuXHQgICAgICAgICAgICBsZW4gPSByYW5nZS5lbmRSb3dJbmRleCArIDE7XHJcblx0ICAgICAgICBmb3IgKHZhciBpID0gcmFuZ2UuYmVnaW5Sb3dJbmRleDsgaSA8IGxlbjsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgdHJBcnJheVtpXSA9IHJvd3NbaV07XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0ckFycmF5LnNwbGljZSgwLHJhbmdlLmJlZ2luUm93SW5kZXgpO1xyXG5cdCAgICAgICAgbGFzdFJvd0luZGV4ID0gKHJhbmdlLmVuZFJvd0luZGV4ICsxKSA9PT0gdGhpcy5yb3dzTnVtID8gMCA6IHJhbmdlLmVuZFJvd0luZGV4ICsxO1xyXG5cdCAgICB9ZWxzZXtcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLGxlbiA9IHJvd3MubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuXHQgICAgICAgICAgICB0ckFycmF5W2ldID0gcm93c1tpXTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgdmFyIEZuID0ge1xyXG5cdCAgICAgICAgJ3JldmVyc2VjdXJyZW50JzogZnVuY3Rpb24odGQxLHRkMil7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIDE7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgJ29yZGVyYnlhc2MnOiBmdW5jdGlvbih0ZDEsdGQyKXtcclxuXHQgICAgICAgICAgICB2YXIgdmFsdWUxID0gdGQxLmlubmVyVGV4dHx8dGQxLnRleHRDb250ZW50LFxyXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTIgPSB0ZDIuaW5uZXJUZXh0fHx0ZDIudGV4dENvbnRlbnQ7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHZhbHVlMS5sb2NhbGVDb21wYXJlKHZhbHVlMik7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgJ3JldmVyc2VieWFzYyc6IGZ1bmN0aW9uKHRkMSx0ZDIpe1xyXG5cdCAgICAgICAgICAgIHZhciB2YWx1ZTEgPSB0ZDEuaW5uZXJIVE1MLFxyXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTIgPSB0ZDIuaW5uZXJIVE1MO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB2YWx1ZTIubG9jYWxlQ29tcGFyZSh2YWx1ZTEpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgICdvcmRlcmJ5bnVtJzogZnVuY3Rpb24odGQxLHRkMil7XHJcblx0ICAgICAgICAgICAgdmFyIHZhbHVlMSA9IHRkMVticm93c2VyLmllID8gJ2lubmVyVGV4dCc6J3RleHRDb250ZW50J10ubWF0Y2goL1xcZCsvKSxcclxuXHQgICAgICAgICAgICAgICAgdmFsdWUyID0gdGQyW2Jyb3dzZXIuaWUgPyAnaW5uZXJUZXh0JzondGV4dENvbnRlbnQnXS5tYXRjaCgvXFxkKy8pO1xyXG5cdCAgICAgICAgICAgIGlmKHZhbHVlMSkgdmFsdWUxID0gK3ZhbHVlMVswXTtcclxuXHQgICAgICAgICAgICBpZih2YWx1ZTIpIHZhbHVlMiA9ICt2YWx1ZTJbMF07XHJcblx0ICAgICAgICAgICAgcmV0dXJuICh2YWx1ZTF8fDApIC0gKHZhbHVlMnx8MCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgJ3JldmVyc2VieW51bSc6IGZ1bmN0aW9uKHRkMSx0ZDIpe1xyXG5cdCAgICAgICAgICAgIHZhciB2YWx1ZTEgPSB0ZDFbYnJvd3Nlci5pZSA/ICdpbm5lclRleHQnOid0ZXh0Q29udGVudCddLm1hdGNoKC9cXGQrLyksXHJcblx0ICAgICAgICAgICAgICAgIHZhbHVlMiA9IHRkMlticm93c2VyLmllID8gJ2lubmVyVGV4dCc6J3RleHRDb250ZW50J10ubWF0Y2goL1xcZCsvKTtcclxuXHQgICAgICAgICAgICBpZih2YWx1ZTEpIHZhbHVlMSA9ICt2YWx1ZTFbMF07XHJcblx0ICAgICAgICAgICAgaWYodmFsdWUyKSB2YWx1ZTIgPSArdmFsdWUyWzBdO1xyXG5cdCAgICAgICAgICAgIHJldHVybiAodmFsdWUyfHwwKSAtICh2YWx1ZTF8fDApO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgLy/lr7nooajmoLzorr7nva7mjpLluo/nmoTmoIforrBkYXRhLXNvcnQtdHlwZVxyXG5cdCAgICB0YWJsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc29ydC10eXBlJywgY29tcGFyZUZuICYmIHR5cGVvZiBjb21wYXJlRm4gPT09IFwic3RyaW5nXCIgJiYgRm5bY29tcGFyZUZuXSA/IGNvbXBhcmVGbjonJyk7XHJcblxyXG5cdCAgICAvL3Ro5LiN5Y+C5LiO5o6S5bqPXHJcblx0ICAgIGZsYWcgJiYgdHJBcnJheS5zcGxpY2UoMCwgMSk7XHJcblx0ICAgIHRyQXJyYXkgPSB1dGlscy5zb3J0KHRyQXJyYXksZnVuY3Rpb24gKHRyMSwgdHIyKSB7XHJcblx0ICAgICAgICB2YXIgcmVzdWx0O1xyXG5cdCAgICAgICAgaWYgKGNvbXBhcmVGbiAmJiB0eXBlb2YgY29tcGFyZUZuID09PSBcImZ1bmN0aW9uXCIpIHtcclxuXHQgICAgICAgICAgICByZXN1bHQgPSBjb21wYXJlRm4uY2FsbCh0aGlzLCB0cjEuY2VsbHNbc29ydEJ5Q2VsbEluZGV4XSwgdHIyLmNlbGxzW3NvcnRCeUNlbGxJbmRleF0pO1xyXG5cdCAgICAgICAgfSBlbHNlIGlmIChjb21wYXJlRm4gJiYgdHlwZW9mIGNvbXBhcmVGbiA9PT0gXCJudW1iZXJcIikge1xyXG5cdCAgICAgICAgICAgIHJlc3VsdCA9IDE7XHJcblx0ICAgICAgICB9IGVsc2UgaWYgKGNvbXBhcmVGbiAmJiB0eXBlb2YgY29tcGFyZUZuID09PSBcInN0cmluZ1wiICYmIEZuW2NvbXBhcmVGbl0pIHtcclxuXHQgICAgICAgICAgICByZXN1bHQgPSBGbltjb21wYXJlRm5dLmNhbGwodGhpcywgdHIxLmNlbGxzW3NvcnRCeUNlbGxJbmRleF0sIHRyMi5jZWxsc1tzb3J0QnlDZWxsSW5kZXhdKTtcclxuXHQgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgcmVzdWx0ID0gRm5bJ29yZGVyYnlhc2MnXS5jYWxsKHRoaXMsIHRyMS5jZWxsc1tzb3J0QnlDZWxsSW5kZXhdLCB0cjIuY2VsbHNbc29ydEJ5Q2VsbEluZGV4XSk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG5cdCAgICB9KTtcclxuXHQgICAgdmFyIGZyYWdtZW50ID0gdGFibGUub3duZXJEb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcblx0ICAgIGZvciAodmFyIGogPSAwLCBsZW4gPSB0ckFycmF5Lmxlbmd0aDsgaiA8IGxlbjsgaisrKSB7XHJcblx0ICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCh0ckFycmF5W2pdKTtcclxuXHQgICAgfVxyXG5cdCAgICB2YXIgdGJvZHkgPSB0YWJsZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdO1xyXG5cdCAgICBpZighbGFzdFJvd0luZGV4KXtcclxuXHQgICAgICAgIHRib2R5LmFwcGVuZENoaWxkKGZyYWdtZW50KTtcclxuXHQgICAgfWVsc2V7XHJcblx0ICAgICAgICB0Ym9keS5pbnNlcnRCZWZvcmUoZnJhZ21lbnQscm93c1tsYXN0Um93SW5kZXgtIHJhbmdlLmVuZFJvd0luZGV4ICsgcmFuZ2UuYmVnaW5Sb3dJbmRleCAtIDFdKVxyXG5cdCAgICB9XHJcblx0fTtcclxuXHJcblx0VUUucGx1Z2luc1sndGFibGVzb3J0J10gPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICBVVCA9IFVFLlVFVGFibGUsXHJcblx0ICAgICAgICBnZXRVRVRhYmxlID0gZnVuY3Rpb24gKHRkT3JUYWJsZSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBVVC5nZXRVRVRhYmxlKHRkT3JUYWJsZSk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0VGFibGVJdGVtc0J5UmFuZ2UgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIFVULmdldFRhYmxlSXRlbXNCeVJhbmdlKGVkaXRvcik7XHJcblx0ICAgICAgICB9O1xyXG5cclxuXHJcblx0ICAgIG1lLnJlYWR5KGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIC8v5re75Yqg6KGo5qC85Y+v5o6S5bqP55qE5qC35byPXHJcblx0ICAgICAgICB1dGlscy5jc3NSdWxlKCd0YWJsZXNvcnQnLFxyXG5cdCAgICAgICAgICAgICd0YWJsZS5zb3J0RW5hYmxlZCB0ci5maXJzdFJvdyB0aCx0YWJsZS5zb3J0RW5hYmxlZCB0ci5maXJzdFJvdyB0ZHtwYWRkaW5nLXJpZ2h0OjIwcHg7YmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXIgcmlnaHQ7JyArXHJcblx0ICAgICAgICAgICAgICAgICcgICBiYWNrZ3JvdW5kLWltYWdlOnVybCgnICsgbWUub3B0aW9ucy50aGVtZVBhdGggKyBtZS5vcHRpb25zLnRoZW1lICsgJy9pbWFnZXMvc29ydGFibGUucG5nKTt9JyxcclxuXHQgICAgICAgICAgICBtZS5kb2N1bWVudCk7XHJcblxyXG5cdCAgICAgICAgLy/lgZrljZXlhYPmoLzlkIjlubbmk43kvZzml7Ys5riF6Zmk5Y+v5o6S5bqP5qCH6K+GXHJcblx0ICAgICAgICBtZS5hZGRMaXN0ZW5lcihcImFmdGVyZXhlY2NvbW1hbmRcIiwgZnVuY3Rpb24gKHR5cGUsIGNtZCkge1xyXG5cdCAgICAgICAgICAgIGlmKCBjbWQgPT0gJ21lcmdlcmlnaHQnIHx8IGNtZCA9PSAnbWVyZ2Vkb3duJyB8fCBjbWQgPT0gJ21lcmdlY2VsbHMnKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZXhlY0NvbW1hbmQoJ2Rpc2FibGVzb3J0Jyk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgIH0pO1xyXG5cclxuXHJcblxyXG5cdCAgICAvL+ihqOagvOaOkuW6j1xyXG5cdCAgICBVRS5jb21tYW5kc1snc29ydHRhYmxlJ10gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgIHRhYmxlSXRlbXMgPSBnZXRUYWJsZUl0ZW1zQnlSYW5nZShtZSk7XHJcblx0ICAgICAgICAgICAgaWYgKCF0YWJsZUl0ZW1zLmNlbGwpIHJldHVybiAtMTtcclxuXHQgICAgICAgICAgICB2YXIgdGFibGUgPSB0YWJsZUl0ZW1zLnRhYmxlLFxyXG5cdCAgICAgICAgICAgICAgICBjZWxscyA9IHRhYmxlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidGRcIik7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNlbGw7IGNlbGwgPSBjZWxsc1tpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoY2VsbC5yb3dTcGFuICE9IDEgfHwgY2VsbC5jb2xTcGFuICE9IDEpIHJldHVybiAtMTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIDA7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjbWQsIGZuKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICAgICAgYmsgPSByYW5nZS5jcmVhdGVCb29rbWFyayh0cnVlKSxcclxuXHQgICAgICAgICAgICAgICAgdGFibGVJdGVtcyA9IGdldFRhYmxlSXRlbXNCeVJhbmdlKG1lKSxcclxuXHQgICAgICAgICAgICAgICAgY2VsbCA9IHRhYmxlSXRlbXMuY2VsbCxcclxuXHQgICAgICAgICAgICAgICAgdXQgPSBnZXRVRVRhYmxlKHRhYmxlSXRlbXMudGFibGUpLFxyXG5cdCAgICAgICAgICAgICAgICBjZWxsSW5mbyA9IHV0LmdldENlbGxJbmZvKGNlbGwpO1xyXG5cdCAgICAgICAgICAgIHV0LnNvcnRUYWJsZShjZWxsSW5mby5jZWxsSW5kZXgsIGZuKTtcclxuXHQgICAgICAgICAgICByYW5nZS5tb3ZlVG9Cb29rbWFyayhiayk7XHJcblx0ICAgICAgICAgICAgdHJ5e1xyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICB9Y2F0Y2goZSl7fVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgLy/orr7nva7ooajmoLzlj6/mjpLluo8s5riF6Zmk6KGo5qC85Y+v5o6S5bqPXHJcblx0ICAgIFVFLmNvbW1hbmRzW1wiZW5hYmxlc29ydFwiXSA9IFVFLmNvbW1hbmRzW1wiZGlzYWJsZXNvcnRcIl0gPSB7XHJcblx0ICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKGNtZCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZSA9IGdldFRhYmxlSXRlbXNCeVJhbmdlKHRoaXMpLnRhYmxlO1xyXG5cdCAgICAgICAgICAgIGlmKHRhYmxlICYmIGNtZD09J2VuYWJsZXNvcnQnKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjZWxscyA9IGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhYmxlLCAndGggdGQnKTtcclxuXHQgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDsgaTxjZWxscy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoY2VsbHNbaV0uZ2V0QXR0cmlidXRlKCdjb2xzcGFuJyk+MSB8fCBjZWxsc1tpXS5nZXRBdHRyaWJ1dGUoJ3Jvd3NwYW4nKT4xKSByZXR1cm4gLTE7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIHJldHVybiAhdGFibGUgPyAtMTogY21kPT0nZW5hYmxlc29ydCcgXiB0YWJsZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc29ydCcpIT0nc29ydEVuYWJsZWQnID8gLTE6MDtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKGNtZCkge1xyXG5cdCAgICAgICAgICAgIHZhciB0YWJsZSA9IGdldFRhYmxlSXRlbXNCeVJhbmdlKHRoaXMpLnRhYmxlO1xyXG5cdCAgICAgICAgICAgIHRhYmxlLnNldEF0dHJpYnV0ZShcImRhdGEtc29ydFwiLCBjbWQgPT0gXCJlbmFibGVzb3J0XCIgPyBcInNvcnRFbmFibGVkXCIgOiBcInNvcnREaXNhYmxlZFwiKTtcclxuXHQgICAgICAgICAgICBjbWQgPT0gXCJlbmFibGVzb3J0XCIgPyBkb21VdGlscy5hZGRDbGFzcyh0YWJsZSxcInNvcnRFbmFibGVkXCIpOmRvbVV0aWxzLnJlbW92ZUNsYXNzZXModGFibGUsXCJzb3J0RW5hYmxlZFwiKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHR9O1xyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9jb250ZXh0bWVudS5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vY29tbWFuZHMg5Y+z6ZSu6I+c5Y2VXHJcblx0Ly8vY29tbWFuZHNOYW1lICBDb250ZXh0TWVudVxyXG5cdC8vL2NvbW1hbmRzVGl0bGUgIOWPs+mUruiPnOWNlVxyXG5cdC8qKlxyXG5cdCAqIOWPs+mUruiPnOWNlVxyXG5cdCAqIEBmdW5jdGlvblxyXG5cdCAqIEBuYW1lIGJhaWR1LmVkaXRvci5wbHVnaW5zLmNvbnRleHRtZW51XHJcblx0ICogQGF1dGhvciB6aGFueWlcclxuXHQgKi9cclxuXHJcblx0VUUucGx1Z2luc1snY29udGV4dG1lbnUnXSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgbWUuc2V0T3B0KCdlbmFibGVDb250ZXh0TWVudScsdHJ1ZSk7XHJcblx0ICAgIGlmKG1lLmdldE9wdCgnZW5hYmxlQ29udGV4dE1lbnUnKSA9PT0gZmFsc2Upe1xyXG5cdCAgICAgICAgcmV0dXJuO1xyXG5cdCAgICB9XHJcblx0ICAgIHZhciBsYW5nID0gbWUuZ2V0TGFuZyggXCJjb250ZXh0TWVudVwiICksXHJcblx0ICAgICAgICAgICAgbWVudSxcclxuXHQgICAgICAgICAgICBpdGVtcyA9IG1lLm9wdGlvbnMuY29udGV4dE1lbnUgfHwgW1xyXG5cdCAgICAgICAgICAgICAgICB7bGFiZWw6bGFuZ1snc2VsZWN0YWxsJ10sIGNtZE5hbWU6J3NlbGVjdGFsbCd9LFxyXG5cdCAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLmNsZWFyZG9jLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgY21kTmFtZTonY2xlYXJkb2MnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgZXhlYzpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBjb25maXJtKCBsYW5nLmNvbmZpcm1jbGVhciApICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWNDb21tYW5kKCAnY2xlYXJkb2MnICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAnLScsXHJcblx0ICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcudW5saW5rLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgY21kTmFtZTondW5saW5rJ1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAnLScsXHJcblx0ICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGdyb3VwOmxhbmcucGFyYWdyYXBoLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWNvbjonanVzdGlmeWp1c3RpZnknLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgc3ViTWVudTpbXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLmp1c3RpZnlsZWZ0LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidqdXN0aWZ5JyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6J2xlZnQnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcuanVzdGlmeXJpZ2h0LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidqdXN0aWZ5JyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6J3JpZ2h0J1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLmp1c3RpZnljZW50ZXIsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2p1c3RpZnknLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTonY2VudGVyJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLmp1c3RpZnlqdXN0aWZ5LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidqdXN0aWZ5JyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6J2p1c3RpZnknXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgXVxyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAnLScsXHJcblx0ICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGdyb3VwOmxhbmcudGFibGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICBpY29uOid0YWJsZScsXHJcblx0ICAgICAgICAgICAgICAgICAgICBzdWJNZW51OltcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcuaW5zZXJ0dGFibGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2luc2VydHRhYmxlJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLmRlbGV0ZXRhYmxlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidkZWxldGV0YWJsZSdcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICctJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcuZGVsZXRlcm93LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidkZWxldGVyb3cnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcuZGVsZXRlY29sLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidkZWxldGVjb2wnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcuaW5zZXJ0Y29sLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidpbnNlcnRjb2wnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcuaW5zZXJ0Y29sbmV4dCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTonaW5zZXJ0Y29sbmV4dCdcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy5pbnNlcnRyb3csXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2luc2VydHJvdydcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy5pbnNlcnRyb3duZXh0LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidpbnNlcnRyb3duZXh0J1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJy0nLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy5pbnNlcnRjYXB0aW9uLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidpbnNlcnRjYXB0aW9uJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLmRlbGV0ZWNhcHRpb24sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2RlbGV0ZWNhcHRpb24nXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcuaW5zZXJ0dGl0bGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2luc2VydHRpdGxlJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLmRlbGV0ZXRpdGxlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidkZWxldGV0aXRsZSdcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy5pbnNlcnR0aXRsZWNvbCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTonaW5zZXJ0dGl0bGVjb2wnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcuZGVsZXRldGl0bGVjb2wsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2RlbGV0ZXRpdGxlY29sJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJy0nLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy5tZXJnZWNlbGxzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidtZXJnZWNlbGxzJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLm1lcmdlcmlnaHQsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J21lcmdlcmlnaHQnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcubWVyZ2Vkb3duLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidtZXJnZWRvd24nXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnLScsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLnNwbGl0dG9yb3dzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidzcGxpdHRvcm93cydcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy5zcGxpdHRvY29scyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTonc3BsaXR0b2NvbHMnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcuc3BsaXR0b2NlbGxzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidzcGxpdHRvY2VsbHMnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnLScsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLmF2ZXJhZ2VEaXNlUm93LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidhdmVyYWdlZGlzdHJpYnV0ZXJvdydcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy5hdmVyYWdlRGlzQ29sLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidhdmVyYWdlZGlzdHJpYnV0ZWNvbCdcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICctJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcuZWRpdHRkLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidlZGl0dGQnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggVUUudWlbJ2VkaXR0ZCddICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBVRS51aVsnZWRpdHRkJ10oIHRoaXMgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RGlhbG9nKCdlZGl0dGQnKS5vcGVuKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy5lZGl0dGFibGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2VkaXR0YWJsZScsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWM6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBVRS51aVsnZWRpdHRhYmxlJ10gKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFVFLnVpWydlZGl0dGFibGUnXSggdGhpcyApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXREaWFsb2coJ2VkaXR0YWJsZScpLm9wZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLnNldGJvcmRlcnZpc2libGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J3NldGJvcmRlcnZpc2libGUnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgXVxyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBncm91cDpsYW5nLnRhYmxlc29ydCxcclxuXHQgICAgICAgICAgICAgICAgICAgIGljb246J3RhYmxlc29ydCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICBzdWJNZW51OltcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcuZW5hYmxlc29ydCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTonZW5hYmxlc29ydCdcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy5kaXNhYmxlc29ydCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTonZGlzYWJsZXNvcnQnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnLScsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLnJldmVyc2VjdXJyZW50LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidzb3J0dGFibGUnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToncmV2ZXJzZWN1cnJlbnQnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcub3JkZXJieWFzYyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTonc29ydHRhYmxlJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6J29yZGVyYnlhc2MnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcucmV2ZXJzZWJ5YXNjLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidzb3J0dGFibGUnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZToncmV2ZXJzZWJ5YXNjJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLm9yZGVyYnludW0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J3NvcnR0YWJsZScsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOidvcmRlcmJ5bnVtJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLnJldmVyc2VieW51bSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTonc29ydHRhYmxlJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6J3JldmVyc2VieW51bSdcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBdXHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGdyb3VwOmxhbmcuYm9yZGVyYmssXHJcblx0ICAgICAgICAgICAgICAgICAgICBpY29uOidib3JkZXJCYWNrJyxcclxuXHQgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnU6W1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy5zZXRjb2xvcixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTpcImludGVybGFjZXRhYmxlXCIsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWM6ZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhlY0NvbW1hbmQoXCJpbnRlcmxhY2V0YWJsZVwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLnVuc2V0Y29sb3IsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6XCJ1bmludGVybGFjZXRhYmxlXCIsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWM6ZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhlY0NvbW1hbmQoXCJ1bmludGVybGFjZXRhYmxlXCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcuc2V0YmFja2dyb3VuZCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTpcInNldHRhYmxlYmFja2dyb3VuZFwiLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjOmZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWNDb21tYW5kKFwic2V0dGFibGViYWNrZ3JvdW5kXCIse3JlcGVhdDp0cnVlLGNvbG9yTGlzdDpbXCIjYmJiXCIsXCIjY2NjXCJdfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy51bnNldGJhY2tncm91bmQsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6XCJjbGVhcnRhYmxlYmFja2dyb3VuZFwiLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGVjOmZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWNDb21tYW5kKFwiY2xlYXJ0YWJsZWJhY2tncm91bmRcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy5yZWRhbmRibHVlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOlwic2V0dGFibGViYWNrZ3JvdW5kXCIsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWM6ZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhlY0NvbW1hbmQoXCJzZXR0YWJsZWJhY2tncm91bmRcIix7cmVwZWF0OnRydWUsY29sb3JMaXN0OltcInJlZFwiLFwiYmx1ZVwiXX0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmxhbmcudGhyZWVjb2xvcmdyYWRpZW50LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOlwic2V0dGFibGViYWNrZ3JvdW5kXCIsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWM6ZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZXhlY0NvbW1hbmQoXCJzZXR0YWJsZWJhY2tncm91bmRcIix7cmVwZWF0OnRydWUsY29sb3JMaXN0OltcIiNhYWFcIixcIiNiYmJcIixcIiNjY2NcIl19KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIF1cclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZ3JvdXA6bGFuZy5hbGlnbnRkLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWNvbjonYWxpZ250ZCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICBzdWJNZW51OltcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2NlbGxhbGlnbm1lbnQnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTp7YWxpZ246J2xlZnQnLHZBbGlnbjondG9wJ31cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTonY2VsbGFsaWdubWVudCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOnthbGlnbjonY2VudGVyJyx2QWxpZ246J3RvcCd9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2NlbGxhbGlnbm1lbnQnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTp7YWxpZ246J3JpZ2h0Jyx2QWxpZ246J3RvcCd9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2NlbGxhbGlnbm1lbnQnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTp7YWxpZ246J2xlZnQnLHZBbGlnbjonbWlkZGxlJ31cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTonY2VsbGFsaWdubWVudCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOnthbGlnbjonY2VudGVyJyx2QWxpZ246J21pZGRsZSd9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2NlbGxhbGlnbm1lbnQnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTp7YWxpZ246J3JpZ2h0Jyx2QWxpZ246J21pZGRsZSd9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2NlbGxhbGlnbm1lbnQnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTp7YWxpZ246J2xlZnQnLHZBbGlnbjonYm90dG9tJ31cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTonY2VsbGFsaWdubWVudCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOnthbGlnbjonY2VudGVyJyx2QWxpZ246J2JvdHRvbSd9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J2NlbGxhbGlnbm1lbnQnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTp7YWxpZ246J3JpZ2h0Jyx2QWxpZ246J2JvdHRvbSd9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgXVxyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBncm91cDpsYW5nLmFsaWdudGFibGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICBpY29uOidhbGlnbnRhYmxlJyxcclxuXHQgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnU6W1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY21kTmFtZTondGFibGVhbGlnbm1lbnQnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdsZWZ0JyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy50YWJsZWxlZnQsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOlwibGVmdFwiXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNtZE5hbWU6J3RhYmxlYWxpZ25tZW50JyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnY2VudGVyJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy50YWJsZWNlbnRlcixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6XCJjZW50ZXJcIlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWROYW1lOid0YWJsZWFsaWdubWVudCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3JpZ2h0JyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy50YWJsZXJpZ2h0LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTpcInJpZ2h0XCJcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBdXHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICctJyxcclxuXHQgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbGFiZWw6bGFuZy5pbnNlcnRwYXJhZ3JhcGhiZWZvcmUsXHJcblx0ICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidpbnNlcnRwYXJhZ3JhcGgnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWU6dHJ1ZVxyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nLmluc2VydHBhcmFncmFwaGFmdGVyLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgY21kTmFtZTonaW5zZXJ0cGFyYWdyYXBoJ1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nWydjb3B5J10sXHJcblx0ICAgICAgICAgICAgICAgICAgICBjbWROYW1lOidjb3B5J1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsYWJlbDpsYW5nWydwYXN0ZSddLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgY21kTmFtZToncGFzdGUnXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBdO1xyXG5cdCAgICBpZiAoICFpdGVtcy5sZW5ndGggKSB7XHJcblx0ICAgICAgICByZXR1cm47XHJcblx0ICAgIH1cclxuXHQgICAgdmFyIHVpVXRpbHMgPSBVRS51aS51aVV0aWxzO1xyXG5cclxuXHQgICAgbWUuYWRkTGlzdGVuZXIoICdjb250ZXh0bWVudScsIGZ1bmN0aW9uICggdHlwZSwgZXZ0ICkge1xyXG5cclxuXHQgICAgICAgIHZhciBvZmZzZXQgPSB1aVV0aWxzLmdldFZpZXdwb3J0T2Zmc2V0QnlFdmVudCggZXZ0ICk7XHJcblx0ICAgICAgICBtZS5maXJlRXZlbnQoICdiZWZvcmVzZWxlY3Rpb25jaGFuZ2UnICk7XHJcblx0ICAgICAgICBpZiAoIG1lbnUgKSB7XHJcblx0ICAgICAgICAgICAgbWVudS5kZXN0cm95KCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIHRpLCBjb250ZXh0SXRlbXMgPSBbXTsgdGkgPSBpdGVtc1tpXTsgaSsrICkge1xyXG5cdCAgICAgICAgICAgIHZhciBsYXN0O1xyXG5cdCAgICAgICAgICAgIChmdW5jdGlvbiAoIGl0ZW0gKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICggaXRlbSA9PSAnLScgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIChsYXN0ID0gY29udGV4dEl0ZW1zW2NvbnRleHRJdGVtcy5sZW5ndGggLSAxIF0gKSAmJiBsYXN0ICE9PSAnLScgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dEl0ZW1zLnB1c2goICctJyApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBpdGVtLmhhc093blByb3BlcnR5KCBcImdyb3VwXCIgKSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAoIHZhciBqID0gMCwgY2osIHN1Yk1lbnUgPSBbXTsgY2ogPSBpdGVtLnN1Yk1lbnVbal07IGorKyApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCBzdWJJdGVtICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIHN1Ykl0ZW0gPT0gJy0nICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAobGFzdCA9IHN1Yk1lbnVbc3ViTWVudS5sZW5ndGggLSAxIF0gKSAmJiBsYXN0ICE9PSAnLScgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViTWVudS5wdXNoKCAnLScgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUuc3BsaWNlKHN1Yk1lbnUubGVuZ3RoLTEpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAobWUuY29tbWFuZHNbc3ViSXRlbS5jbWROYW1lXSB8fCBVRS5jb21tYW5kc1tzdWJJdGVtLmNtZE5hbWVdIHx8IHN1Ykl0ZW0ucXVlcnkpICYmXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzdWJJdGVtLnF1ZXJ5ID8gc3ViSXRlbS5xdWVyeSgpIDogbWUucXVlcnlDb21tYW5kU3RhdGUoIHN1Ykl0ZW0uY21kTmFtZSApKSA+IC0xICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yk1lbnUucHVzaCgge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnOnN1Ykl0ZW0ubGFiZWwgfHwgbWUuZ2V0TGFuZyggXCJjb250ZXh0TWVudS5cIiArIHN1Ykl0ZW0uY21kTmFtZSArIChzdWJJdGVtLnZhbHVlIHx8ICcnKSApfHxcIlwiLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3NOYW1lJzonZWR1aS1mb3ItJyArc3ViSXRlbS5jbWROYW1lICsgKCBzdWJJdGVtLmNsYXNzTmFtZSA/ICggJyBlZHVpLWZvci0nICsgc3ViSXRlbS5jbWROYW1lICsgJy0nICsgc3ViSXRlbS5jbGFzc05hbWUgKSA6ICcnICksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6c3ViSXRlbS5leGVjID8gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Ykl0ZW0uZXhlYy5jYWxsKCBtZSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoIHN1Ykl0ZW0uY21kTmFtZSwgc3ViSXRlbS52YWx1ZSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSkoIGNqICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIHN1Yk1lbnUubGVuZ3RoICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldExhYmVsKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbS5pY29uKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ0YWJsZVwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtZS5nZXRMYW5nKCBcImNvbnRleHRNZW51LnRhYmxlXCIgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJqdXN0aWZ5anVzdGlmeVwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtZS5nZXRMYW5nKCBcImNvbnRleHRNZW51LnBhcmFncmFwaFwiICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiYWxpZ250ZFwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtZS5nZXRMYW5nKFwiY29udGV4dE1lbnUuYWxpZ250ZFwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJhbGlnbnRhYmxlXCI6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lLmdldExhbmcoXCJjb250ZXh0TWVudS5hbGlnbnRhYmxlXCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcInRhYmxlc29ydFwiOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsYW5nLnRhYmxlc29ydDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJib3JkZXJCYWNrXCI6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhbmcuYm9yZGVyYms7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dEl0ZW1zLnB1c2goIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90b2RvIOS/ruato+aIkOiHquWKqOiOt+WPluaWueW8j1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnOmdldExhYmVsKCksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTonZWR1aS1mb3ItJyArIGl0ZW0uaWNvbixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N1Yk1lbnUnOntcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOnN1Yk1lbnUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3I6bWVcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+acieWPr+iDvWNvbW1tYW5k5rKh5pyJ5Yqg6L295Y+z6ZSu5LiN6IO95Ye65p2l77yM5oiW6ICF5rKh5pyJY29tbWFuZOS5n+aDs+iDveWxleekuuWHuuadpea3u+WKoHF1ZXJ55pa55rOVXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIChtZS5jb21tYW5kc1tpdGVtLmNtZE5hbWVdIHx8IFVFLmNvbW1hbmRzW2l0ZW0uY21kTmFtZV0gfHwgaXRlbS5xdWVyeSkgJiZcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGl0ZW0ucXVlcnkgPyBpdGVtLnF1ZXJ5LmNhbGwobWUpIDogbWUucXVlcnlDb21tYW5kU3RhdGUoIGl0ZW0uY21kTmFtZSApKSA+IC0xICkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0SXRlbXMucHVzaCgge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFiZWwnOml0ZW0ubGFiZWwgfHwgbWUuZ2V0TGFuZyggXCJjb250ZXh0TWVudS5cIiArIGl0ZW0uY21kTmFtZSApLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6J2VkdWktZm9yLScgKyAoaXRlbS5pY29uID8gaXRlbS5pY29uIDogaXRlbS5jbWROYW1lICsgKGl0ZW0udmFsdWUgfHwgJycpKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazppdGVtLmV4ZWMgPyBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmV4ZWMuY2FsbCggbWUgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSA6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lLmV4ZWNDb21tYW5kKCBpdGVtLmNtZE5hbWUsIGl0ZW0udmFsdWUgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgfSkoIHRpICk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICBpZiAoIGNvbnRleHRJdGVtc1tjb250ZXh0SXRlbXMubGVuZ3RoIC0gMV0gPT0gJy0nICkge1xyXG5cdCAgICAgICAgICAgIGNvbnRleHRJdGVtcy5wb3AoKTtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBtZW51ID0gbmV3IFVFLnVpLk1lbnUoIHtcclxuXHQgICAgICAgICAgICBpdGVtczpjb250ZXh0SXRlbXMsXHJcblx0ICAgICAgICAgICAgY2xhc3NOYW1lOlwiZWR1aS1jb250ZXh0bWVudVwiLFxyXG5cdCAgICAgICAgICAgIGVkaXRvcjptZVxyXG5cdCAgICAgICAgfSApO1xyXG5cdCAgICAgICAgbWVudS5yZW5kZXIoKTtcclxuXHQgICAgICAgIG1lbnUuc2hvd0F0KCBvZmZzZXQgKTtcclxuXHJcblx0ICAgICAgICBtZS5maXJlRXZlbnQoXCJhZnRlcnNob3djb250ZXh0bWVudVwiLG1lbnUpO1xyXG5cclxuXHQgICAgICAgIGRvbVV0aWxzLnByZXZlbnREZWZhdWx0KCBldnQgKTtcclxuXHQgICAgICAgIGlmICggYnJvd3Nlci5pZSApIHtcclxuXHQgICAgICAgICAgICB2YXIgaWVSYW5nZTtcclxuXHQgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICBpZVJhbmdlID0gbWUuc2VsZWN0aW9uLmdldE5hdGl2ZSgpLmNyZWF0ZVJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgfSBjYXRjaCAoIGUgKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKCBpZVJhbmdlLml0ZW0gKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IG5ldyBkb20uUmFuZ2UoIG1lLmRvY3VtZW50ICk7XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdE5vZGUoIGllUmFuZ2UuaXRlbSggMCApICkuc2VsZWN0KCB0cnVlLCB0cnVlICk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9KTtcclxuXHJcblx0ICAgIC8vIOa3u+WKoOWkjeWItueahGZsYXNo5oyJ6ZKuXHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdhZnRlcnNob3djb250ZXh0bWVudScsIGZ1bmN0aW9uKHR5cGUsIG1lbnUpIHtcclxuXHQgICAgICAgIGlmIChtZS56ZXJvY2xpcGJvYXJkKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGl0ZW1zID0gbWVudS5pdGVtcztcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gaXRlbXMpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGl0ZW1zW2tleV0uY2xhc3NOYW1lID09ICdlZHVpLWZvci1jb3B5Jykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuemVyb2NsaXBib2FyZC5jbGlwKGl0ZW1zW2tleV0uZ2V0RG9tKCkpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9KTtcclxuXHJcblx0fTtcclxuXHJcblxyXG5cdC8vIHBsdWdpbnMvc2hvcnRjdXRtZW51LmpzXHJcblx0Ly8vaW1wb3J0IGNvcmVcclxuXHQvLy9jb21tYW5kcyAgICAgICDlvLnlh7roj5zljZVcclxuXHQvLyBjb21tYW5kc05hbWUgIHBvcHVwbWVudVxyXG5cdC8vL2NvbW1hbmRzVGl0bGUgIOW8ueWHuuiPnOWNlVxyXG5cdC8qKlxyXG5cdCAqIOW8ueWHuuiPnOWNlVxyXG5cdCAqIEBmdW5jdGlvblxyXG5cdCAqIEBuYW1lIGJhaWR1LmVkaXRvci5wbHVnaW5zLnBvcHVwbWVudVxyXG5cdCAqIEBhdXRob3IgeHVoZW5nXHJcblx0ICovXHJcblxyXG5cdFVFLnBsdWdpbnNbJ3Nob3J0Y3V0bWVudSddID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgbWVudSxcclxuXHQgICAgICAgIGl0ZW1zID0gbWUub3B0aW9ucy5zaG9ydGN1dE1lbnUgfHwgW107XHJcblxyXG5cdCAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xyXG5cdCAgICAgICAgcmV0dXJuO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBtZS5hZGRMaXN0ZW5lciAoJ2NvbnRleHRtZW51IG1vdXNldXAnICwgZnVuY3Rpb24gKHR5cGUgLCBlKSB7XHJcblx0ICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgIGN1c3RvbUV2dCA9IHtcclxuXHQgICAgICAgICAgICAgICAgdHlwZSA6IHR5cGUgLFxyXG5cdCAgICAgICAgICAgICAgICB0YXJnZXQgOiBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQgLFxyXG5cdCAgICAgICAgICAgICAgICBzY3JlZW5YIDogZS5zY3JlZW5YICxcclxuXHQgICAgICAgICAgICAgICAgc2NyZWVuWSA6IGUuc2NyZWVuWSAsXHJcblx0ICAgICAgICAgICAgICAgIGNsaWVudFggOiBlLmNsaWVudFggLFxyXG5cdCAgICAgICAgICAgICAgICBjbGllbnRZIDogZS5jbGllbnRZXHJcblx0ICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICBzZXRUaW1lb3V0IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSAoKTtcclxuXHQgICAgICAgICAgICBpZiAocm5nLmNvbGxhcHNlZCA9PT0gZmFsc2UgfHwgdHlwZSA9PSBcImNvbnRleHRtZW51XCIpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmICghbWVudSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWVudSA9IG5ldyBiYWlkdS5lZGl0b3IudWkuU2hvcnRDdXRNZW51ICh7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yIDogbWUgLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zIDogaXRlbXMgLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lIDogbWUub3B0aW9ucy50aGVtZSAsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lIDogJ2VkdWktc2hvcnRjdXRtZW51J1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgbWVudS5yZW5kZXIgKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQgKFwiYWZ0ZXJyZW5kZXJzaG9ydGN1dG1lbnVcIiAsIG1lbnUpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICBtZW51LnNob3cgKGN1c3RvbUV2dCAsICEhVUUucGx1Z2luc1snY29udGV4dG1lbnUnXSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgaWYgKHR5cGUgPT0gJ2NvbnRleHRtZW51Jykge1xyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLnByZXZlbnREZWZhdWx0IChlKTtcclxuXHQgICAgICAgICAgICBpZiAoYnJvd3Nlci5pZTliZWxvdykge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgaWVSYW5nZTtcclxuXHQgICAgICAgICAgICAgICAgdHJ5IHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGllUmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0TmF0aXZlKCkuY3JlYXRlUmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChpZVJhbmdlLml0ZW0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IG5ldyBkb20uUmFuZ2UgKG1lLmRvY3VtZW50KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNlbGVjdE5vZGUgKGllUmFuZ2UuaXRlbSAoMCkpLnNlbGVjdCAodHJ1ZSAsIHRydWUpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICBtZS5hZGRMaXN0ZW5lciAoJ2tleWRvd24nICwgZnVuY3Rpb24gKHR5cGUpIHtcclxuXHQgICAgICAgIGlmICh0eXBlID09IFwia2V5ZG93blwiKSB7XHJcblx0ICAgICAgICAgICAgbWVudSAmJiAhbWVudS5pc0hpZGRlbiAmJiBtZW51LmhpZGUgKCk7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9KTtcclxuXHJcblx0fTtcclxuXHJcblxyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9iYXNlc3R5bGUuanNcclxuXHQvKipcclxuXHQgKiBC44CBSeOAgXN1YuOAgXN1cGVy5ZG95Luk5pSv5oyBXHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHRVRS5wbHVnaW5zWydiYXNlc3R5bGUnXSA9IGZ1bmN0aW9uKCl7XHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5a2X5L2T5Yqg57KXXHJcblx0ICAgICAqIEBjb21tYW5kIGJvbGRcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAgICAgKiBAcmVtaW5kIOWvueW3suWKoOeyl+eahOaWh+acrOWGheWuueaJp+ihjOivpeWRveS7pO+8jCDlsIblj5bmtojliqDnspdcclxuXHQgICAgICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIC8vZWRpdG9y5piv57yW6L6R5Zmo5a6e5L6LXHJcblx0ICAgICAqIC8v5a+55b2T5YmN6YCJ5Lit55qE5paH5pys5YaF5a655omn6KGM5Yqg57KX5pON5L2cXHJcblx0ICAgICAqIC8v56ys5LiA5qyh5omn6KGM77yMIOaWh+acrOWGheWuueWKoOeyl1xyXG5cdCAgICAgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdib2xkJyApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL+esrOS6jOasoeaJp+ihjO+8jCDmlofmnKzlhoXlrrnlj5bmtojliqDnspdcclxuXHQgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnYm9sZCcgKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDlrZfkvZPlgL7mlpxcclxuXHQgICAgICogQGNvbW1hbmQgaXRhbGljXHJcblx0ICAgICAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAgICAgKiBAcmVtaW5kIOWvueW3suWAvuaWnOeahOaWh+acrOWGheWuueaJp+ihjOivpeWRveS7pO+8jCDlsIblj5bmtojlgL7mlpxcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiAvL2VkaXRvcuaYr+e8lui+keWZqOWunuS+i1xyXG5cdCAgICAgKiAvL+WvueW9k+WJjemAieS4reeahOaWh+acrOWGheWuueaJp+ihjOaWnOS9k+aTjeS9nFxyXG5cdCAgICAgKiAvL+esrOS4gOasoeaTjeS9nO+8jCDmlofmnKzlhoXlrrnlsIblj5jmiJDmlpzkvZNcclxuXHQgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnaXRhbGljJyApO1xyXG5cdCAgICAgKlxyXG5cdCAgICAgKiAvL+WGjeasoeWvueWQjOS4gOaWh+acrOWGheWuueaJp+ihjO+8jCDliJnmlofmnKzlhoXlrrnlsIbmgaLlpI3mraPluLhcclxuXHQgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnaXRhbGljJyApO1xyXG5cdCAgICAgKiBgYGBcclxuXHQgICAgICovXHJcblxyXG5cdCAgICAvKipcclxuXHQgICAgICog5LiL5qCH5paH5pys77yM5LiO4oCcc3VwZXJzY3JpcHTigJ3lkb3ku6TkupLmlqVcclxuXHQgICAgICogQGNvbW1hbmQgc3Vic2NyaXB0XHJcblx0ICAgICAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgICAgICogQHJlbWluZCAg5oqK6YCJ5Lit55qE5paH5pys5YaF5a655YiH5o2i5oiQ5LiL5qCH5paH5pys77yMIOWmguaenOW9k+WJjemAieS4reeahOaWh+acrOW3sue7j+aYr+S4i+agh++8jCDliJnor6Xmk43kvZzkvJrmiormlofmnKzlhoXlrrnov5jljp/miJDmraPluLjmlofmnKxcclxuXHQgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAqIC8vZWRpdG9y5piv57yW6L6R5Zmo5a6e5L6LXHJcblx0ICAgICAqIC8v5a+55b2T5YmN6YCJ5Lit55qE5paH5pys5YaF5a655omn6KGM5LiL5qCH5pON5L2cXHJcblx0ICAgICAqIC8v56ys5LiA5qyh5pON5L2c77yMIOaWh+acrOWGheWuueWwhuWPmOaIkOS4i+agh+aWh+acrFxyXG5cdCAgICAgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdzdWJzY3JpcHQnICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8v5YaN5qyh5a+55ZCM5LiA5paH5pys5YaF5a655omn6KGM77yMIOWImeaWh+acrOWGheWuueWwhuaBouWkjeato+W4uFxyXG5cdCAgICAgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdzdWJzY3JpcHQnICk7XHJcblx0ICAgICAqIGBgYFxyXG5cdCAgICAgKi9cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiDkuIrmoIfmlofmnKzvvIzkuI7igJxzdWJzY3JpcHTigJ3lkb3ku6TkupLmlqVcclxuXHQgICAgICogQGNvbW1hbmQgc3VwZXJzY3JpcHRcclxuXHQgICAgICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAgICAgKiBAcmVtaW5kIOaKiumAieS4reeahOaWh+acrOWGheWuueWIh+aNouaIkOS4iuagh+aWh+acrO+8jCDlpoLmnpzlvZPliY3pgInkuK3nmoTmlofmnKzlt7Lnu4/mmK/kuIrmoIfvvIwg5YiZ6K+l5pON5L2c5Lya5oqK5paH5pys5YaF5a656L+Y5Y6f5oiQ5q2j5bi45paH5pysXHJcblx0ICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgKiAvL2VkaXRvcuaYr+e8lui+keWZqOWunuS+i1xyXG5cdCAgICAgKiAvL+WvueW9k+WJjemAieS4reeahOaWh+acrOWGheWuueaJp+ihjOS4iuagh+aTjeS9nFxyXG5cdCAgICAgKiAvL+esrOS4gOasoeaTjeS9nO+8jCDmlofmnKzlhoXlrrnlsIblj5jmiJDkuIrmoIfmlofmnKxcclxuXHQgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnc3VwZXJzY3JpcHQnICk7XHJcblx0ICAgICAqXHJcblx0ICAgICAqIC8v5YaN5qyh5a+55ZCM5LiA5paH5pys5YaF5a655omn6KGM77yMIOWImeaWh+acrOWGheWuueWwhuaBouWkjeato+W4uFxyXG5cdCAgICAgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdzdXBlcnNjcmlwdCcgKTtcclxuXHQgICAgICogYGBgXHJcblx0ICAgICAqL1xyXG5cdCAgICB2YXIgYmFzZXN0eWxlcyA9IHtcclxuXHQgICAgICAgICAgICAnYm9sZCc6WydzdHJvbmcnLCdiJ10sXHJcblx0ICAgICAgICAgICAgJ2l0YWxpYyc6WydlbScsJ2knXSxcclxuXHQgICAgICAgICAgICAnc3Vic2NyaXB0JzpbJ3N1YiddLFxyXG5cdCAgICAgICAgICAgICdzdXBlcnNjcmlwdCc6WydzdXAnXVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldE9iaiA9IGZ1bmN0aW9uKGVkaXRvcix0YWdOYW1lcyl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGRvbVV0aWxzLmZpbHRlck5vZGVMaXN0KGVkaXRvci5zZWxlY3Rpb24uZ2V0U3RhcnRFbGVtZW50UGF0aCgpLHRhZ05hbWVzKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBtZSA9IHRoaXM7XHJcblx0ICAgIC8v5re75Yqg5b+r5o236ZSuXHJcblx0ICAgIG1lLmFkZHNob3J0Y3V0a2V5KHtcclxuXHQgICAgICAgIFwiQm9sZFwiIDogXCJjdHJsKzY2XCIsLy9eQlxyXG5cdCAgICAgICAgXCJJdGFsaWNcIiA6IFwiY3RybCs3M1wiLCAvL15JXHJcblx0ICAgICAgICBcIlVuZGVybGluZVwiIDogXCJjdHJsKzg1XCIvL15VXHJcblx0ICAgIH0pO1xyXG5cdCAgICBtZS5hZGRJbnB1dFJ1bGUoZnVuY3Rpb24ocm9vdCl7XHJcblx0ICAgICAgICB1dGlscy5lYWNoKHJvb3QuZ2V0Tm9kZXNCeVRhZ05hbWUoJ2IgaScpLGZ1bmN0aW9uKG5vZGUpe1xyXG5cdCAgICAgICAgICAgIHN3aXRjaCAobm9kZS50YWdOYW1lKXtcclxuXHQgICAgICAgICAgICAgICAgY2FzZSAnYic6XHJcblx0ICAgICAgICAgICAgICAgICAgICBub2RlLnRhZ05hbWUgPSAnc3Ryb25nJztcclxuXHQgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICBjYXNlICdpJzpcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUudGFnTmFtZSA9ICdlbSc7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgIH0pO1xyXG5cdCAgICBmb3IgKCB2YXIgc3R5bGUgaW4gYmFzZXN0eWxlcyApIHtcclxuXHQgICAgICAgIChmdW5jdGlvbiggY21kLCB0YWdOYW1lcyApIHtcclxuXHQgICAgICAgICAgICBtZS5jb21tYW5kc1tjbWRdID0ge1xyXG5cdCAgICAgICAgICAgICAgICBleGVjQ29tbWFuZCA6IGZ1bmN0aW9uKCBjbWROYW1lICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCksb2JqID0gZ2V0T2JqKHRoaXMsdGFnTmFtZXMpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCByYW5nZS5jb2xsYXBzZWQgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBvYmogKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXBUZXh0ID0gIG1lLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZSggdG1wVGV4dCApLnJlbW92ZUlubGluZVN0eWxlKCB0YWdOYW1lcyApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZSh0bXBUZXh0KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHRtcFRleHQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXBOb2RlID0gcmFuZ2UuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggdGFnTmFtZXNbMF0gKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoY21kTmFtZSA9PSAnc3VwZXJzY3JpcHQnIHx8IGNtZE5hbWUgPT0gJ3N1YnNjcmlwdCcpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wVGV4dCA9IG1lLmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUodG1wVGV4dClcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlSW5saW5lU3R5bGUoWydzdWInLCdzdXAnXSlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0U3RhcnRCZWZvcmUodG1wVGV4dClcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY29sbGFwc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZSggdG1wTm9kZSApLnNldFN0YXJ0KCB0bXBOb2RlLCAwICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKCB0cnVlICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKGNtZE5hbWUgPT0gJ3N1cGVyc2NyaXB0JyB8fCBjbWROYW1lID09ICdzdWJzY3JpcHQnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIW9iaiB8fCBvYmoudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9IGNtZE5hbWUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UucmVtb3ZlSW5saW5lU3R5bGUoWydzdWInLCdzdXAnXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb2JqID8gcmFuZ2UucmVtb3ZlSW5saW5lU3R5bGUoIHRhZ05hbWVzICkgOiByYW5nZS5hcHBseUlubGluZVN0eWxlKCB0YWdOYW1lc1swXSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlIDogZnVuY3Rpb24oKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRPYmoodGhpcyx0YWdOYW1lcykgPyAxIDogMDtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9KSggc3R5bGUsIGJhc2VzdHlsZXNbc3R5bGVdICk7XHJcblx0ICAgIH1cclxuXHR9O1xyXG5cclxuXHJcblxyXG5cdC8vIHBsdWdpbnMvZWxlbWVudHBhdGguanNcclxuXHQvKipcclxuXHQgKiDpgInlj5bot6/lvoTlkb3ku6RcclxuXHQgKiBAZmlsZVxyXG5cdCAqL1xyXG5cdFVFLnBsdWdpbnNbJ2VsZW1lbnRwYXRoJ10gPSBmdW5jdGlvbigpe1xyXG5cdCAgICB2YXIgY3VycmVudExldmVsLFxyXG5cdCAgICAgICAgdGFnTmFtZXMsXHJcblx0ICAgICAgICBtZSA9IHRoaXM7XHJcblx0ICAgIG1lLnNldE9wdCgnZWxlbWVudFBhdGhFbmFibGVkJyx0cnVlKTtcclxuXHQgICAgaWYoIW1lLm9wdGlvbnMuZWxlbWVudFBhdGhFbmFibGVkKXtcclxuXHQgICAgICAgIHJldHVybjtcclxuXHQgICAgfVxyXG5cdCAgICBtZS5jb21tYW5kc1snZWxlbWVudHBhdGgnXSA9IHtcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kIDogZnVuY3Rpb24oIGNtZE5hbWUsIGxldmVsICkge1xyXG5cdCAgICAgICAgICAgIHZhciBzdGFydCA9IHRhZ05hbWVzW2xldmVsXSxcclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICBjdXJyZW50TGV2ZWwgPSBsZXZlbCoxO1xyXG5cdCAgICAgICAgICAgIHJhbmdlLnNlbGVjdE5vZGUoc3RhcnQpLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFZhbHVlIDogZnVuY3Rpb24oKSB7XHJcblx0ICAgICAgICAgICAgLy/kuqfnlJ/kuIDkuKrlia/mnKzvvIzkuI3og73kv67mlLnljp/mnaXnmoRzdGFydEVsZW1lbnRQYXRoO1xyXG5cdCAgICAgICAgICAgIHZhciBwYXJlbnRzID0gW10uY29uY2F0KHRoaXMuc2VsZWN0aW9uLmdldFN0YXJ0RWxlbWVudFBhdGgoKSkucmV2ZXJzZSgpLFxyXG5cdCAgICAgICAgICAgICAgICBuYW1lcyA9IFtdO1xyXG5cdCAgICAgICAgICAgIHRhZ05hbWVzID0gcGFyZW50cztcclxuXHQgICAgICAgICAgICBmb3IodmFyIGk9MCxjaTtjaT1wYXJlbnRzW2ldO2krKyl7XHJcblx0ICAgICAgICAgICAgICAgIGlmKGNpLm5vZGVUeXBlID09IDMpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHZhciBuYW1lID0gY2kudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdCAgICAgICAgICAgICAgICBpZihuYW1lID09ICdpbWcnICYmIGNpLmdldEF0dHJpYnV0ZSgnYW5jaG9ybmFtZScpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5hbWUgPSAnYW5jaG9yJztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBuYW1lc1tpXSA9IG5hbWU7XHJcblx0ICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRMZXZlbCA9PSBpKXtcclxuXHQgICAgICAgICAgICAgICAgICAgY3VycmVudExldmVsID0gLTE7XHJcblx0ICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gbmFtZXM7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0fTtcclxuXHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL2Zvcm1hdG1hdGNoLmpzXHJcblx0LyoqXHJcblx0ICog5qC85byP5Yi377yM5Y+q5qC85byPaW5saW5l55qEXHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDmoLzlvI/liLdcclxuXHQgKiBAY29tbWFuZCBmb3JtYXRtYXRjaFxyXG5cdCAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgKiBAcmVtaW5kIOivpeaTjeS9nOS4jeiDveWkjeWItuauteiQveagvOW8j1xyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiAvL2VkaXRvcuaYr+e8lui+keWZqOWunuS+i1xyXG5cdCAqIC8v6I635Y+W5qC85byP5Yi3XHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnZm9ybWF0bWF0Y2gnICk7XHJcblx0ICogYGBgXHJcblx0ICovXHJcblx0VUUucGx1Z2luc1snZm9ybWF0bWF0Y2gnXSA9IGZ1bmN0aW9uKCl7XHJcblxyXG5cdCAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgbGlzdCA9IFtdLGltZyxcclxuXHQgICAgICAgIGZsYWcgPSAwO1xyXG5cclxuXHQgICAgIG1lLmFkZExpc3RlbmVyKCdyZXNldCcsZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICBsaXN0ID0gW107XHJcblx0ICAgICAgICAgZmxhZyA9IDA7XHJcblx0ICAgICB9KTtcclxuXHJcblx0ICAgIGZ1bmN0aW9uIGFkZExpc3QodHlwZSxldnQpe1xyXG5cdCAgICAgICAgXHJcblx0ICAgICAgICBpZihicm93c2VyLndlYmtpdCl7XHJcblx0ICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2dC50YXJnZXQudGFnTmFtZSA9PSAnSU1HJyA/IGV2dC50YXJnZXQgOiBudWxsO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIGZ1bmN0aW9uIGFkZEZvcm1hdChyYW5nZSl7XHJcblxyXG5cdCAgICAgICAgICAgIGlmKHRleHQpe1xyXG5cdCAgICAgICAgICAgICAgICByYW5nZS5zZWxlY3ROb2RlKHRleHQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gcmFuZ2UuYXBwbHlJbmxpbmVTdHlsZShsaXN0W2xpc3QubGVuZ3RoLTFdLnRhZ05hbWUsbnVsbCxsaXN0KTtcclxuXHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgbWUudW5kb01hbmdlciAmJiBtZS51bmRvTWFuZ2VyLnNhdmUoKTtcclxuXHJcblx0ICAgICAgICB2YXIgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICBpbWdUID0gdGFyZ2V0IHx8IHJhbmdlLmdldENsb3NlZE5vZGUoKTtcclxuXHQgICAgICAgIGlmKGltZyAmJiBpbWdUICYmIGltZ1QudGFnTmFtZSA9PSAnSU1HJyl7XHJcblx0ICAgICAgICAgICAgLy90cmFjZTo5NjRcclxuXHJcblx0ICAgICAgICAgICAgaW1nVC5zdHlsZS5jc3NUZXh0ICs9ICc7ZmxvYXQ6JyArIChpbWcuc3R5bGUuY3NzRmxvYXQgfHwgaW1nLnN0eWxlLnN0eWxlRmxvYXQgfHwnbm9uZScpICsgJztkaXNwbGF5OicgKyAoaW1nLnN0eWxlLmRpc3BsYXl8fCdpbmxpbmUnKTtcclxuXHJcblx0ICAgICAgICAgICAgaW1nID0gbnVsbDtcclxuXHQgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgIGlmKCFpbWcpe1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgY29sbGFwc2VkID0gcmFuZ2UuY29sbGFwc2VkO1xyXG5cdCAgICAgICAgICAgICAgICBpZihjb2xsYXBzZWQpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRleHQgPSBtZS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnbWF0Y2gnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJhbmdlLmluc2VydE5vZGUodGV4dCkuc2VsZWN0KCk7XHJcblxyXG5cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBtZS5fX2hhc0VudGVyRXhlY0NvbW1hbmQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAvL+S4jeiDveaKimJsb2Nr5LiK55qE5bGe5oCn5bmy5o6JXHJcblx0ICAgICAgICAgICAgICAgIC8vdHJhY2U6MTU1M1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlRm9ybWF0QXR0cmlidXRlcyA9IG1lLm9wdGlvbnMucmVtb3ZlRm9ybWF0QXR0cmlidXRlcztcclxuXHQgICAgICAgICAgICAgICAgbWUub3B0aW9ucy5yZW1vdmVGb3JtYXRBdHRyaWJ1dGVzID0gJyc7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmV4ZWNDb21tYW5kKCdyZW1vdmVmb3JtYXQnKTtcclxuXHQgICAgICAgICAgICAgICAgbWUub3B0aW9ucy5yZW1vdmVGb3JtYXRBdHRyaWJ1dGVzID0gcmVtb3ZlRm9ybWF0QXR0cmlidXRlcztcclxuXHQgICAgICAgICAgICAgICAgbWUuX19oYXNFbnRlckV4ZWNDb21tYW5kID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIC8vdHJhY2U6OTY5XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICAgICAgICAgIGlmKGxpc3QubGVuZ3RoKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGFkZEZvcm1hdChyYW5nZSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYodGV4dCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZSh0ZXh0KS5jb2xsYXBzZSh0cnVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmFuZ2Uuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgIHRleHQgJiYgZG9tVXRpbHMucmVtb3ZlKHRleHQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9XHJcblxyXG5cclxuXHJcblxyXG5cdCAgICAgICAgbWUudW5kb01hbmdlciAmJiBtZS51bmRvTWFuZ2VyLnNhdmUoKTtcclxuXHQgICAgICAgIG1lLnJlbW92ZUxpc3RlbmVyKCdtb3VzZXVwJyxhZGRMaXN0KTtcclxuXHQgICAgICAgIGZsYWcgPSAwO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICBtZS5jb21tYW5kc1snZm9ybWF0bWF0Y2gnXSA9IHtcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kIDogZnVuY3Rpb24oIGNtZE5hbWUgKSB7XHJcblx0ICAgICAgICAgIFxyXG5cdCAgICAgICAgICAgIGlmKGZsYWcpe1xyXG5cdCAgICAgICAgICAgICAgICBmbGFnID0gMDtcclxuXHQgICAgICAgICAgICAgICAgbGlzdCA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICAgbWUucmVtb3ZlTGlzdGVuZXIoJ21vdXNldXAnLGFkZExpc3QpO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgICBcclxuXHQgICAgICAgICAgICB2YXIgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICBpbWcgPSByYW5nZS5nZXRDbG9zZWROb2RlKCk7XHJcblx0ICAgICAgICAgICAgaWYoIWltZyB8fCBpbWcudGFnTmFtZSAhPSAnSU1HJyl7XHJcblx0ICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UodHJ1ZSkuc2hyaW5rQm91bmRhcnkoKTtcclxuXHQgICAgICAgICAgICAgICB2YXIgc3RhcnQgPSByYW5nZS5zdGFydENvbnRhaW5lcjtcclxuXHQgICAgICAgICAgICAgICBsaXN0ID0gZG9tVXRpbHMuZmluZFBhcmVudHMoc3RhcnQsdHJ1ZSxmdW5jdGlvbihub2RlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgcmV0dXJuICFkb21VdGlscy5pc0Jsb2NrRWxtKG5vZGUpICYmIG5vZGUubm9kZVR5cGUgPT0gMTtcclxuXHQgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAvL2HkuI3og73liqDlhaXmoLzlvI/liLcsIOW5tuS4lOWFi+mahuiKgueCuVxyXG5cdCAgICAgICAgICAgICAgIGZvcih2YXIgaT0wLGNpO2NpPWxpc3RbaV07aSsrKXtcclxuXHQgICAgICAgICAgICAgICAgICAgaWYoY2kudGFnTmFtZSA9PSAnQScpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgbGlzdC5zcGxpY2UoaSwxKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIG1lLmFkZExpc3RlbmVyKCdtb3VzZXVwJyxhZGRMaXN0KTtcclxuXHQgICAgICAgICAgICBmbGFnID0gMTtcclxuXHJcblxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlIDogZnVuY3Rpb24oKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGZsYWc7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgbm90TmVlZFVuZG8gOiAxXHJcblx0ICAgIH07XHJcblx0fTtcclxuXHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL3NlYXJjaHJlcGxhY2UuanNcclxuXHQvLy9pbXBvcnQgY29yZVxyXG5cdC8vL2NvbW1hbmRzIOafpeaJvuabv+aNolxyXG5cdC8vL2NvbW1hbmRzTmFtZSAgU2VhcmNoUmVwbGFjZVxyXG5cdC8vL2NvbW1hbmRzVGl0bGUgIOafpeivouabv+aNolxyXG5cdC8vL2NvbW1hbmRzRGlhbG9nICBkaWFsb2dzXFxzZWFyY2hyZXBsYWNlXHJcblx0LyoqXHJcblx0ICogQGRlc2NyaXB0aW9uIOafpeaJvuabv+aNolxyXG5cdCAqIEBhdXRob3IgemhhbnlpXHJcblx0ICovXHJcblxyXG5cdFVFLnBsdWdpbi5yZWdpc3Rlcignc2VhcmNocmVwbGFjZScsZnVuY3Rpb24oKXtcclxuXHQgICAgdmFyIG1lID0gdGhpcztcclxuXHJcblx0ICAgIHZhciBfYmxvY2tFbG0gPSB7J3RhYmxlJzoxLCd0Ym9keSc6MSwndHInOjEsJ29sJzoxLCd1bCc6MX07XHJcblxyXG5cdCAgICBmdW5jdGlvbiBmaW5kVGV4dEluU3RyaW5nKHRleHRDb250ZW50LG9wdCxjdXJyZW50SW5kZXgpe1xyXG5cdCAgICAgICAgdmFyIHN0ciA9IG9wdC5zZWFyY2hTdHI7XHJcblx0ICAgICAgICBpZihvcHQuZGlyID09IC0xKXtcclxuXHQgICAgICAgICAgICB0ZXh0Q29udGVudCA9IHRleHRDb250ZW50LnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJyk7XHJcblx0ICAgICAgICAgICAgc3RyID0gc3RyLnNwbGl0KCcnKS5yZXZlcnNlKCkuam9pbignJyk7XHJcblx0ICAgICAgICAgICAgY3VycmVudEluZGV4ID0gdGV4dENvbnRlbnQubGVuZ3RoIC0gY3VycmVudEluZGV4O1xyXG5cclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHZhciByZWcgPSBuZXcgUmVnRXhwKHN0ciwnZycgKyAob3B0LmNhc2VzZW5zaXRpdmUgPyAnJyA6ICdpJykpLG1hdGNoO1xyXG5cclxuXHQgICAgICAgIHdoaWxlKG1hdGNoID0gcmVnLmV4ZWModGV4dENvbnRlbnQpKXtcclxuXHQgICAgICAgICAgICBpZihtYXRjaC5pbmRleCA+PSBjdXJyZW50SW5kZXgpe1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gb3B0LmRpciA9PSAtMSA/IHRleHRDb250ZW50Lmxlbmd0aCAtIG1hdGNoLmluZGV4IC0gb3B0LnNlYXJjaFN0ci5sZW5ndGggOiBtYXRjaC5pbmRleDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICByZXR1cm4gIC0xXHJcblx0ICAgIH1cclxuXHQgICAgZnVuY3Rpb24gZmluZFRleHRCbG9ja0VsbShub2RlLGN1cnJlbnRJbmRleCxvcHQpe1xyXG5cdCAgICAgICAgdmFyIHRleHRDb250ZW50LGluZGV4LG1ldGhvZE5hbWUgPSBvcHQuYWxsIHx8IG9wdC5kaXIgPT0gMSA/ICdnZXROZXh0RG9tTm9kZScgOiAnZ2V0UHJlRG9tTm9kZSc7XHJcblx0ICAgICAgICBpZihkb21VdGlscy5pc0JvZHkobm9kZSkpe1xyXG5cdCAgICAgICAgICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB2YXIgZmlyc3QgPSAxO1xyXG5cdCAgICAgICAgd2hpbGUobm9kZSl7XHJcblx0ICAgICAgICAgICAgdGV4dENvbnRlbnQgPSBub2RlLm5vZGVUeXBlID09IDMgPyBub2RlLm5vZGVWYWx1ZSA6IG5vZGVbYnJvd3Nlci5pZSA/ICdpbm5lclRleHQnIDogJ3RleHRDb250ZW50J107XHJcblx0ICAgICAgICAgICAgaW5kZXggPSBmaW5kVGV4dEluU3RyaW5nKHRleHRDb250ZW50LG9wdCxjdXJyZW50SW5kZXggKTtcclxuXHQgICAgICAgICAgICBmaXJzdCA9IDA7XHJcblx0ICAgICAgICAgICAgaWYoaW5kZXghPS0xKXtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICdub2RlJzpub2RlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgJ2luZGV4JzppbmRleFxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIG5vZGUgPSBkb21VdGlsc1ttZXRob2ROYW1lXShub2RlKTtcclxuXHQgICAgICAgICAgICB3aGlsZShub2RlICYmIF9ibG9ja0VsbVtub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKXtcclxuXHQgICAgICAgICAgICAgICAgbm9kZSA9IGRvbVV0aWxzW21ldGhvZE5hbWVdKG5vZGUsdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmKG5vZGUpe1xyXG5cdCAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggPSBvcHQuZGlyID09IC0xID8gKG5vZGUubm9kZVR5cGUgPT0gMyA/IG5vZGUubm9kZVZhbHVlIDogbm9kZVticm93c2VyLmllID8gJ2lubmVyVGV4dCcgOiAndGV4dENvbnRlbnQnXSkubGVuZ3RoIDogMDtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0ICAgIGZ1bmN0aW9uIGZpbmROVGV4dEluQmxvY2tFbG0obm9kZSxpbmRleCxzdHIpe1xyXG5cdCAgICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IDAsXHJcblx0ICAgICAgICAgICAgY3VycmVudE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQsXHJcblx0ICAgICAgICAgICAgY3VycmVudE5vZGVMZW5ndGggPSAwLFxyXG5cdCAgICAgICAgICAgIHJlc3VsdDtcclxuXHQgICAgICAgIHdoaWxlKGN1cnJlbnROb2RlKXtcclxuXHQgICAgICAgICAgICBpZihjdXJyZW50Tm9kZS5ub2RlVHlwZSA9PSAzKXtcclxuXHQgICAgICAgICAgICAgICAgY3VycmVudE5vZGVMZW5ndGggPSBjdXJyZW50Tm9kZS5ub2RlVmFsdWUucmVwbGFjZSgvKF5bXFx0XFxyXFxuXSspfChbXFx0XFxyXFxuXSskKS8sJycpLmxlbmd0aDtcclxuXHQgICAgICAgICAgICAgICAgY3VycmVudEluZGV4ICs9IGN1cnJlbnROb2RlTGVuZ3RoO1xyXG5cdCAgICAgICAgICAgICAgICBpZihjdXJyZW50SW5kZXggPj0gaW5kZXgpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnbm9kZSc6Y3VycmVudE5vZGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ2luZGV4JzogY3VycmVudE5vZGVMZW5ndGggLSAoY3VycmVudEluZGV4IC0gaW5kZXgpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9ZWxzZSBpZighZHRkLiRlbXB0eVtjdXJyZW50Tm9kZS50YWdOYW1lXSl7XHJcblx0ICAgICAgICAgICAgICAgIGN1cnJlbnROb2RlTGVuZ3RoID0gY3VycmVudE5vZGVbYnJvd3Nlci5pZSA/ICdpbm5lclRleHQnIDogJ3RleHRDb250ZW50J10ucmVwbGFjZSgvKF5bXFx0XFxyXFxuXSspfChbXFx0XFxyXFxuXSskKS8sJycpLmxlbmd0aFxyXG5cdCAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXggKz0gY3VycmVudE5vZGVMZW5ndGg7XHJcblx0ICAgICAgICAgICAgICAgIGlmKGN1cnJlbnRJbmRleCA+PSBpbmRleCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBmaW5kTlRleHRJbkJsb2NrRWxtKGN1cnJlbnROb2RlLGN1cnJlbnROb2RlTGVuZ3RoIC0gKGN1cnJlbnRJbmRleCAtIGluZGV4KSxzdHIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYocmVzdWx0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGN1cnJlbnROb2RlID0gZG9tVXRpbHMuZ2V0TmV4dERvbU5vZGUoY3VycmVudE5vZGUpO1xyXG5cclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gc2VhcmNoUmVwbGFjZShtZSxvcHQpe1xyXG5cclxuXHQgICAgICAgIHZhciBybmcgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICBzdGFydEJsb2NrTm9kZSxcclxuXHQgICAgICAgICAgICBzZWFyY2hTdHIgPSBvcHQuc2VhcmNoU3RyLFxyXG5cdCAgICAgICAgICAgIHNwYW4gPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcblx0ICAgICAgICBzcGFuLmlubmVySFRNTCA9ICckJHVlZGl0b3Jfc2VhcmNocmVwbGFjZV9rZXkkJCc7XHJcblxyXG5cdCAgICAgICAgcm5nLnNocmlua0JvdW5kYXJ5KHRydWUpO1xyXG5cclxuXHQgICAgICAgIC8v5Yik5pat5piv5LiN5piv56ys5LiA5qyh6YCJ5LitXHJcblx0ICAgICAgICBpZighcm5nLmNvbGxhcHNlZCl7XHJcblx0ICAgICAgICAgICAgcm5nLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgIHZhciBybmdUZXh0ID0gbWUuc2VsZWN0aW9uLmdldFRleHQoKTtcclxuXHQgICAgICAgICAgICBpZihuZXcgUmVnRXhwKCdeJyArIG9wdC5zZWFyY2hTdHIgKyAnJCcsKG9wdC5jYXNlc2Vuc2l0aXZlID8gJycgOiAnaScpKS50ZXN0KHJuZ1RleHQpKXtcclxuXHQgICAgICAgICAgICAgICAgaWYob3B0LnJlcGxhY2VTdHIgIT0gdW5kZWZpbmVkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VUZXh0KHJuZyxvcHQucmVwbGFjZVN0cik7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgICAgICBybmcuY29sbGFwc2Uob3B0LmRpciA9PSAtMSlcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgIHJuZy5pbnNlcnROb2RlKHNwYW4pO1xyXG5cdCAgICAgICAgcm5nLmVubGFyZ2VUb0Jsb2NrRWxtKHRydWUpO1xyXG5cdCAgICAgICAgc3RhcnRCbG9ja05vZGUgPSBybmcuc3RhcnRDb250YWluZXI7XHJcblx0ICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gc3RhcnRCbG9ja05vZGVbYnJvd3Nlci5pZSA/ICdpbm5lclRleHQnIDogJ3RleHRDb250ZW50J10uaW5kZXhPZignJCR1ZWRpdG9yX3NlYXJjaHJlcGxhY2Vfa2V5JCQnKTtcclxuXHQgICAgICAgIHJuZy5zZXRTdGFydEJlZm9yZShzcGFuKTtcclxuXHQgICAgICAgIGRvbVV0aWxzLnJlbW92ZShzcGFuKTtcclxuXHQgICAgICAgIHZhciByZXN1bHQgPSBmaW5kVGV4dEJsb2NrRWxtKHN0YXJ0QmxvY2tOb2RlLGN1cnJlbnRJbmRleCxvcHQpO1xyXG5cdCAgICAgICAgaWYocmVzdWx0KXtcclxuXHQgICAgICAgICAgICB2YXIgcm5nU3RhcnQgPSBmaW5kTlRleHRJbkJsb2NrRWxtKHJlc3VsdC5ub2RlLHJlc3VsdC5pbmRleCxzZWFyY2hTdHIpO1xyXG5cdCAgICAgICAgICAgIHZhciBybmdFbmQgPSBmaW5kTlRleHRJbkJsb2NrRWxtKHJlc3VsdC5ub2RlLHJlc3VsdC5pbmRleCArIHNlYXJjaFN0ci5sZW5ndGgsc2VhcmNoU3RyKTtcclxuXHQgICAgICAgICAgICBybmcuc2V0U3RhcnQocm5nU3RhcnQubm9kZSxybmdTdGFydC5pbmRleCkuc2V0RW5kKHJuZ0VuZC5ub2RlLHJuZ0VuZC5pbmRleCk7XHJcblxyXG5cdCAgICAgICAgICAgIGlmKG9wdC5yZXBsYWNlU3RyICE9PSB1bmRlZmluZWQpe1xyXG5cdCAgICAgICAgICAgICAgICByZXBsYWNlVGV4dChybmcsb3B0LnJlcGxhY2VTdHIpXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJuZy5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgIHJuZy5zZXRDdXJzb3IoKVxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgfVxyXG5cdCAgICBmdW5jdGlvbiByZXBsYWNlVGV4dChybmcsc3RyKXtcclxuXHJcblx0ICAgICAgICBzdHIgPSBtZS5kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShzdHIpO1xyXG5cdCAgICAgICAgcm5nLmRlbGV0ZUNvbnRlbnRzKCkuaW5zZXJ0Tm9kZShzdHIpO1xyXG5cclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgY29tbWFuZHM6e1xyXG5cdCAgICAgICAgICAgICdzZWFyY2hyZXBsYWNlJzp7XHJcblx0ICAgICAgICAgICAgICAgIGV4ZWNDb21tYW5kOmZ1bmN0aW9uKGNtZE5hbWUsb3B0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHV0aWxzLmV4dGVuZChvcHQse1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGFsbCA6IGZhbHNlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2VzZW5zaXRpdmUgOiBmYWxzZSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkaXIgOiAxXHJcblx0ICAgICAgICAgICAgICAgICAgICB9LHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG51bSA9IDA7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihvcHQuYWxsKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCA9IG1lLmJvZHkuZmlyc3RDaGlsZDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihmaXJzdCAmJiBmaXJzdC5ub2RlVHlwZSA9PSAxKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm5nLnNldFN0YXJ0KGZpcnN0LDApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBybmcuc2hyaW5rQm91bmRhcnkodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2UgaWYoZmlyc3Qubm9kZVR5cGUgPT0gMyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJuZy5zZXRTdGFydEJlZm9yZShmaXJzdClcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcm5nLmNvbGxhcHNlKHRydWUpLnNlbGVjdCh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihvcHQucmVwbGFjZVN0ciAhPT0gdW5kZWZpbmVkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdzYXZlU2NlbmUnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUoc2VhcmNoUmVwbGFjZSh0aGlzLG9wdCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW0rKztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYobnVtKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdzYXZlU2NlbmUnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihvcHQucmVwbGFjZVN0ciAhPT0gdW5kZWZpbmVkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdzYXZlU2NlbmUnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoc2VhcmNoUmVwbGFjZSh0aGlzLG9wdCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW0rK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihudW0pe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5maXJlRXZlbnQoJ3NhdmVTY2VuZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bTtcclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgbm90TmVlZFVuZG86MVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdH0pO1xyXG5cclxuXHQvLyBwbHVnaW5zL2N1c3RvbXN0eWxlLmpzXHJcblx0LyoqXHJcblx0ICog6Ieq5a6a5LmJ5qC35byPXHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4yLjYuMVxyXG5cdCAqL1xyXG5cclxuXHQvKipcclxuXHQgKiDmoLnmja5jb25maWfphY3nva7mlofku7bph4zigJxjdXN0b21zdHlsZeKAnemAiemhueeahOWAvOWvueWMuemFjeeahOagh+etvuaJp+ihjOagt+W8j+abv+aNouOAglxyXG5cdCAqIEBjb21tYW5kIGN1c3RvbXN0eWxlXHJcblx0ICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgKiBAZXhhbXBsZVxyXG5cdCAqIGBgYGphdmFzY3JpcHRcclxuXHQgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICdjdXN0b21zdHlsZScgKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHRVRS5wbHVnaW5zWydjdXN0b21zdHlsZSddID0gZnVuY3Rpb24oKSB7XHJcblx0ICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgIG1lLnNldE9wdCh7ICdjdXN0b21zdHlsZSc6W1xyXG5cdCAgICAgICAge3RhZzonaDEnLG5hbWU6J3RjJywgc3R5bGU6J2ZvbnQtc2l6ZTozMnB4O2ZvbnQtd2VpZ2h0OmJvbGQ7Ym9yZGVyLWJvdHRvbTojY2NjIDJweCBzb2xpZDtwYWRkaW5nOjAgNHB4IDAgMDt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW46MCAwIDIwcHggMDsnfSxcclxuXHQgICAgICAgIHt0YWc6J2gxJyxuYW1lOid0bCcsIHN0eWxlOidmb250LXNpemU6MzJweDtmb250LXdlaWdodDpib2xkO2JvcmRlci1ib3R0b206I2NjYyAycHggc29saWQ7cGFkZGluZzowIDRweCAwIDA7dGV4dC1hbGlnbjpsZWZ0O21hcmdpbjowIDAgMTBweCAwOyd9LFxyXG5cdCAgICAgICAge3RhZzonc3BhbicsbmFtZTonaW0nLCBzdHlsZTonZm9udC1zaXplOjE2cHg7Zm9udC1zdHlsZTppdGFsaWM7Zm9udC13ZWlnaHQ6Ym9sZDtsaW5lLWhlaWdodDoxOHB4Oyd9LFxyXG5cdCAgICAgICAge3RhZzonc3BhbicsbmFtZTonaGknLCBzdHlsZTonZm9udC1zaXplOjE2cHg7Zm9udC1zdHlsZTppdGFsaWM7Zm9udC13ZWlnaHQ6Ym9sZDtjb2xvcjpyZ2IoNTEsIDE1MywgMjA0KTtsaW5lLWhlaWdodDoxOHB4Oyd9XHJcblx0ICAgIF19KTtcclxuXHQgICAgbWUuY29tbWFuZHNbJ2N1c3RvbXN0eWxlJ10gPSB7XHJcblx0ICAgICAgICBleGVjQ29tbWFuZCA6IGZ1bmN0aW9uKGNtZE5hbWUsIG9iaikge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgICAgICB0YWdOYW1lID0gb2JqLnRhZyxcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBkb21VdGlscy5maW5kUGFyZW50KG1lLnNlbGVjdGlvbi5nZXRTdGFydCgpLCBmdW5jdGlvbihub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKCdsYWJlbCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSksXHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZSxiayx0bXBPYmogPSB7fTtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBwIGluIG9iaikge1xyXG5cdCAgICAgICAgICAgICAgIGlmKG9ialtwXSE9PXVuZGVmaW5lZClcclxuXHQgICAgICAgICAgICAgICAgICAgIHRtcE9ialtwXSA9IG9ialtwXTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZGVsZXRlIHRtcE9iai50YWc7XHJcblx0ICAgICAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS5nZXRBdHRyaWJ1dGUoJ2xhYmVsJykgPT0gb2JqLmxhYmVsKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgYmsgPSByYW5nZS5jcmVhdGVCb29rbWFyaygpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAocmFuZ2UuY29sbGFwc2VkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL3RyYWNlOjE3MzIg5Yig5o6J6Ieq5a6a5LmJ5qCH562+77yM6KaB5pyJcOadpeWbnuWhq+ermeS9jVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoZHRkLiRibG9ja1tub2RlLnRhZ05hbWVdKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsbE5vZGUgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMubW92ZUNoaWxkKG5vZGUsIGZpbGxOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZpbGxOb2RlLCBub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUobm9kZSx0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNvbW1vbiA9IGRvbVV0aWxzLmdldENvbW1vbkFuY2VzdG9yKGJrLnN0YXJ0LCBiay5lbmQpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlcyA9IGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKGNvbW1vbiwgdGFnTmFtZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihuZXcgUmVnRXhwKHRhZ05hbWUsJ2knKS50ZXN0KGNvbW1vbi50YWdOYW1lKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChjb21tb24pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsbmk7IG5pID0gbm9kZXNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmkuZ2V0QXR0cmlidXRlKCdsYWJlbCcpID09IG9iai5sYWJlbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHMgPSBkb21VdGlscy5nZXRQb3NpdGlvbihuaSwgYmsuc3RhcnQpLHBlID0gZG9tVXRpbHMuZ2V0UG9zaXRpb24obmksIGJrLmVuZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocHMgJiBkb21VdGlscy5QT1NJVElPTl9GT0xMT1dJTkcgfHwgcHMgJiBkb21VdGlscy5QT1NJVElPTl9DT05UQUlOUylcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwZSAmIGRvbVV0aWxzLlBPU0lUSU9OX1BSRUNFRElORyB8fCBwZSAmIGRvbVV0aWxzLlBPU0lUSU9OX0NPTlRBSU5TKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkdGQuJGJsb2NrW3RhZ05hbWVdKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGxOb2RlID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLm1vdmVDaGlsZChuaSwgZmlsbE5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5pLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGZpbGxOb2RlLCBuaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShuaSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGRvbVV0aWxzLmZpbmRQYXJlbnQoY29tbW9uLCBmdW5jdGlvbihub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKCdsYWJlbCcpID09IG9iai5sYWJlbDtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0sIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKG5vZGUsIHRydWUpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgcmFuZ2UubW92ZVRvQm9va21hcmsoYmspLnNlbGVjdCgpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChkdGQuJGJsb2NrW3RhZ05hbWVdKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmV4ZWNDb21tYW5kKCdwYXJhZ3JhcGgnLCB0YWdOYW1lLCB0bXBPYmosJ2N1c3RvbXN0eWxlJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZSA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFyYW5nZS5jb2xsYXBzZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5jb2xsYXBzZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBkb21VdGlscy5maW5kUGFyZW50KG1lLnNlbGVjdGlvbi5nZXRTdGFydCgpLCBmdW5jdGlvbihub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlLmdldEF0dHJpYnV0ZSgnbGFiZWwnKSA9PSBvYmoubGFiZWw7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBOb2RlID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmluc2VydEFmdGVyKG5vZGUsIHBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5maWxsTm9kZShtZS5kb2N1bWVudCwgcE5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHBOb2RlLCAwKS5zZXRDdXJzb3IoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZSA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmdlLmNvbGxhcHNlZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnNldEF0dHJpYnV0ZXMobm9kZSwgdG1wT2JqKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5pbnNlcnROb2RlKG5vZGUpLnNldFN0YXJ0KG5vZGUsIDApLnNldEN1cnNvcigpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgYmsgPSByYW5nZS5jcmVhdGVCb29rbWFyaygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2UuYXBwbHlJbmxpbmVTdHlsZSh0YWdOYW1lLCB0bXBPYmopLm1vdmVUb0Jvb2ttYXJrKGJrKS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcXVlcnlDb21tYW5kVmFsdWUgOiBmdW5jdGlvbigpIHtcclxuXHQgICAgICAgICAgICB2YXIgcGFyZW50ID0gZG9tVXRpbHMuZmlsdGVyTm9kZUxpc3QoXHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uLmdldFN0YXJ0RWxlbWVudFBhdGgoKSxcclxuXHQgICAgICAgICAgICAgICAgZnVuY3Rpb24obm9kZSl7cmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKCdsYWJlbCcpfVxyXG5cdCAgICAgICAgICAgICk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuICBwYXJlbnQgPyBwYXJlbnQuZ2V0QXR0cmlidXRlKCdsYWJlbCcpIDogJyc7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIC8v5b2T5Y675o6JY3VzdG9tc3R5bGXmmK/vvIzlpoLmnpzmmK/lnZflhYPntKDvvIznlKhw5Luj5pu/XHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdrZXl1cCcsIGZ1bmN0aW9uKHR5cGUsIGV2dCkge1xyXG5cdCAgICAgICAgdmFyIGtleUNvZGUgPSBldnQua2V5Q29kZSB8fCBldnQud2hpY2g7XHJcblxyXG5cdCAgICAgICAgaWYgKGtleUNvZGUgPT0gMzIgfHwga2V5Q29kZSA9PSAxMykge1xyXG5cdCAgICAgICAgICAgIHZhciByYW5nZSA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgICAgIGlmIChyYW5nZS5jb2xsYXBzZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBkb21VdGlscy5maW5kUGFyZW50KG1lLnNlbGVjdGlvbi5nZXRTdGFydCgpLCBmdW5jdGlvbihub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5nZXRBdHRyaWJ1dGUoJ2xhYmVsJyk7XHJcblx0ICAgICAgICAgICAgICAgIH0sIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobm9kZSAmJiBkdGQuJGJsb2NrW25vZGUudGFnTmFtZV0gJiYgZG9tVXRpbHMuaXNFbXB0eU5vZGUobm9kZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcCA9IG1lLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5pbnNlcnRBZnRlcihub2RlLCBwKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5maWxsTm9kZShtZS5kb2N1bWVudCwgcCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KHAsIDApLnNldEN1cnNvcigpO1xyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0pO1xyXG5cdH07XHJcblxyXG5cdC8vIHBsdWdpbnMvY2F0Y2hyZW1vdGVpbWFnZS5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vY29tbWFuZHMg6L+c56iL5Zu+54mH5oqT5Y+WXHJcblx0Ly8vY29tbWFuZHNOYW1lICBjYXRjaFJlbW90ZUltYWdlLGNhdGNocmVtb3RlaW1hZ2VlbmFibGVcclxuXHQvLy9jb21tYW5kc1RpdGxlICDov5znqIvlm77niYfmipPlj5ZcclxuXHQvKipcclxuXHQgKiDov5znqIvlm77niYfmipPlj5Ys5b2T5byA5ZCv5pys5o+S5Lu25pe25omA5pyJ5LiN56ym5ZCI5pys5Zyw5Z+f5ZCN55qE5Zu+54mH6YO95bCG6KKr5oqT5Y+W5oiQ5Li65pys5Zyw5pyN5Yqh5Zmo5LiK55qE5Zu+54mHXHJcblx0ICovXHJcblx0VUUucGx1Z2luc1snY2F0Y2hyZW1vdGVpbWFnZSddID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgYWpheCA9IFVFLmFqYXg7XHJcblxyXG5cdCAgICAvKiDorr7nva7pu5jorqTlgLwgKi9cclxuXHQgICAgaWYgKG1lLm9wdGlvbnMuY2F0Y2hSZW1vdGVJbWFnZUVuYWJsZSA9PT0gZmFsc2UpIHJldHVybjtcclxuXHQgICAgbWUuc2V0T3B0KHtcclxuXHQgICAgICAgIGNhdGNoUmVtb3RlSW1hZ2VFbmFibGU6IGZhbHNlXHJcblx0ICAgIH0pO1xyXG5cclxuXHQgICAgbWUuYWRkTGlzdGVuZXIoXCJhZnRlcnBhc3RlXCIsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIG1lLmZpcmVFdmVudChcImNhdGNoUmVtb3RlSW1hZ2VcIik7XHJcblx0ICAgIH0pO1xyXG5cclxuXHQgICAgbWUuYWRkTGlzdGVuZXIoXCJjYXRjaFJlbW90ZUltYWdlXCIsIGZ1bmN0aW9uICgpIHtcclxuXHJcblx0ICAgICAgICB2YXIgY2F0Y2hlckxvY2FsRG9tYWluID0gbWUuZ2V0T3B0KCdjYXRjaGVyTG9jYWxEb21haW4nKSxcclxuXHQgICAgICAgICAgICBjYXRjaGVyQWN0aW9uVXJsID0gbWUuZ2V0QWN0aW9uVXJsKG1lLmdldE9wdCgnY2F0Y2hlckFjdGlvbk5hbWUnKSksXHJcblx0ICAgICAgICAgICAgY2F0Y2hlclVybFByZWZpeCA9IG1lLmdldE9wdCgnY2F0Y2hlclVybFByZWZpeCcpLFxyXG5cdCAgICAgICAgICAgIGNhdGNoZXJGaWVsZE5hbWUgPSBtZS5nZXRPcHQoJ2NhdGNoZXJGaWVsZE5hbWUnKTtcclxuXHJcblx0ICAgICAgICB2YXIgcmVtb3RlSW1hZ2VzID0gW10sXHJcblx0ICAgICAgICAgICAgaW1ncyA9IGRvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKG1lLmRvY3VtZW50LCBcImltZ1wiKSxcclxuXHQgICAgICAgICAgICB0ZXN0ID0gZnVuY3Rpb24gKHNyYywgdXJscykge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoc3JjLmluZGV4T2YobG9jYXRpb24uaG9zdCkgIT0gLTEgfHwgLyheXFwuKXwoXlxcLykvLnRlc3Qoc3JjKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKHVybHMpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCB1cmw7IHVybCA9IHVybHNbaisrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3JjLmluZGV4T2YodXJsKSAhPT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICB9O1xyXG5cclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaTsgY2kgPSBpbWdzW2krK107KSB7XHJcblx0ICAgICAgICAgICAgaWYgKGNpLmdldEF0dHJpYnV0ZShcIndvcmRfaW1nXCIpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgc3JjID0gY2kuZ2V0QXR0cmlidXRlKFwiX3NyY1wiKSB8fCBjaS5zcmMgfHwgXCJcIjtcclxuXHQgICAgICAgICAgICBpZiAoL14oaHR0cHM/fGZ0cCk6L2kudGVzdChzcmMpICYmICF0ZXN0KHNyYywgY2F0Y2hlckxvY2FsRG9tYWluKSkge1xyXG5cdCAgICAgICAgICAgICAgICByZW1vdGVJbWFnZXMucHVzaChzcmMpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBpZiAocmVtb3RlSW1hZ2VzLmxlbmd0aCkge1xyXG5cdCAgICAgICAgICAgIGNhdGNocmVtb3RlaW1hZ2UocmVtb3RlSW1hZ2VzLCB7XHJcblx0ICAgICAgICAgICAgICAgIC8v5oiQ5Yqf5oqT5Y+WXHJcblx0ICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChyKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmZvID0gci5zdGF0ZSAhPT0gdW5kZWZpbmVkID8gcjpldmFsKFwiKFwiICsgci5yZXNwb25zZVRleHQgKyBcIilcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIC8qIOiOt+WPlua6kOi3r+W+hOWSjOaWsOi3r+W+hCAqL1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGksIGosIGNpLCBjaiwgb2xkU3JjLCBuZXdTcmMsIGxpc3QgPSBpbmZvLmxpc3Q7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgY2kgPSBpbWdzW2krK107KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb2xkU3JjID0gY2kuZ2V0QXR0cmlidXRlKFwiX3NyY1wiKSB8fCBjaS5zcmMgfHwgXCJcIjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBjaiA9IGxpc3RbaisrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9sZFNyYyA9PSBjai5zb3VyY2UgJiYgY2ouc3RhdGUgPT0gXCJTVUNDRVNTXCIpIHsgIC8v5oqT5Y+W5aSx6LSl5pe25LiN5YGa5pu/5o2i5aSE55CGXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTcmMgPSBjYXRjaGVyVXJsUHJlZml4ICsgY2oudXJsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuc2V0QXR0cmlidXRlcyhjaSwge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic3JjXCI6IG5ld1NyYyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIl9zcmNcIjogbmV3U3JjXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdjYXRjaHJlbW90ZXN1Y2Nlc3MnKVxyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAvL+Wbnuiwg+Wksei0pe+8jOacrOasoeivt+axgui2heaXtlxyXG5cdCAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KFwiY2F0Y2hyZW1vdGVlcnJvclwiKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIGZ1bmN0aW9uIGNhdGNocmVtb3RlaW1hZ2UoaW1ncywgY2FsbGJhY2tzKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHV0aWxzLnNlcmlhbGl6ZVBhcmFtKG1lLnF1ZXJ5Q29tbWFuZFZhbHVlKCdzZXJ2ZXJwYXJhbScpKSB8fCAnJyxcclxuXHQgICAgICAgICAgICAgICAgdXJsID0gdXRpbHMuZm9ybWF0VXJsKGNhdGNoZXJBY3Rpb25VcmwgKyAoY2F0Y2hlckFjdGlvblVybC5pbmRleE9mKCc/JykgPT0gLTEgPyAnPyc6JyYnKSArIHBhcmFtcyksXHJcblx0ICAgICAgICAgICAgICAgIGlzSnNvbnAgPSB1dGlscy5pc0Nyb3NzRG9tYWluVXJsKHVybCksXHJcblx0ICAgICAgICAgICAgICAgIG9wdCA9IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICdtZXRob2QnOiAnUE9TVCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAnZGF0YVR5cGUnOiBpc0pzb25wID8gJ2pzb25wJzonJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICd0aW1lb3V0JzogNjAwMDAsIC8v5Y2V5L2N77ya5q+r56eS77yM5Zue6LCD6K+35rGC6LaF5pe26K6+572u44CC55uu5qCH55So5oi35aaC5p6c572R6YCf5LiN5piv5b6I5b+r55qE6K+d5q2k5aSE5bu66K6u6K6+572u5LiA5Liq6L6D5aSn55qE5pWw5YC8XHJcblx0ICAgICAgICAgICAgICAgICAgICAnb25zdWNjZXNzJzogY2FsbGJhY2tzW1wic3VjY2Vzc1wiXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICdvbmVycm9yJzogY2FsbGJhY2tzW1wiZXJyb3JcIl1cclxuXHQgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICBvcHRbY2F0Y2hlckZpZWxkTmFtZV0gPSBpbWdzO1xyXG5cdCAgICAgICAgICAgIGFqYXgucmVxdWVzdCh1cmwsIG9wdCk7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICB9KTtcclxuXHR9O1xyXG5cclxuXHQvLyBwbHVnaW5zL3NuYXBzY3JlZW4uanNcclxuXHQvKipcclxuXHQgKiDmiKrlsY/mj5Lku7bvvIzkuLpVRWRpdG9y5o+Q5L6b5o+S5YWl5pSv5oyBXHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS40LjJcclxuXHQgKi9cclxuXHRVRS5wbHVnaW4ucmVnaXN0ZXIoJ3NuYXBzY3JlZW4nLCBmdW5jdGlvbiAoKXtcclxuXHJcblx0ICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgIHZhciBzbmFwcGx1Z2luO1xyXG5cclxuXHQgICAgZnVuY3Rpb24gZ2V0TG9jYXRpb24odXJsKXtcclxuXHQgICAgICAgIHZhciBzZWFyY2gsXHJcblx0ICAgICAgICAgICAgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKSxcclxuXHQgICAgICAgICAgICBwYXJhbXMgPSB1dGlscy5zZXJpYWxpemVQYXJhbShtZS5xdWVyeUNvbW1hbmRWYWx1ZSgnc2VydmVycGFyYW0nKSkgfHwgJyc7XHJcblxyXG5cdCAgICAgICAgYS5ocmVmID0gdXJsO1xyXG5cdCAgICAgICAgaWYgKGJyb3dzZXIuaWUpIHtcclxuXHQgICAgICAgICAgICBhLmhyZWYgPSBhLmhyZWY7XHJcblx0ICAgICAgICB9XHJcblxyXG5cclxuXHQgICAgICAgIHNlYXJjaCA9IGEuc2VhcmNoO1xyXG5cdCAgICAgICAgaWYgKHBhcmFtcykge1xyXG5cdCAgICAgICAgICAgIHNlYXJjaCA9IHNlYXJjaCArIChzZWFyY2guaW5kZXhPZignPycpID09IC0xID8gJz8nOicmJykrIHBhcmFtcztcclxuXHQgICAgICAgICAgICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZSgvWyZdKy9pZywgJyYnKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgJ3BvcnQnOiBhLnBvcnQsXHJcblx0ICAgICAgICAgICAgJ2hvc3RuYW1lJzogYS5ob3N0bmFtZSxcclxuXHQgICAgICAgICAgICAncGF0aCc6IGEucGF0aG5hbWUgKyBzZWFyY2ggfHwgICsgYS5oYXNoXHJcblx0ICAgICAgICB9XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHJldHVybiB7XHJcblx0ICAgICAgICBjb21tYW5kczp7XHJcblx0ICAgICAgICAgICAgLyoqXHJcblx0ICAgICAgICAgICAgICog5a2X5L2T6IOM5pmv6aKc6ImyXHJcblx0ICAgICAgICAgICAgICogQGNvbW1hbmQgc25hcHNjcmVlblxyXG5cdCAgICAgICAgICAgICAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgICAgICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCdzbmFwc2NyZWVuJyk7XHJcblx0ICAgICAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgICAgICovXHJcblx0ICAgICAgICAgICAgJ3NuYXBzY3JlZW4nOntcclxuXHQgICAgICAgICAgICAgICAgZXhlY0NvbW1hbmQ6ZnVuY3Rpb24gKGNtZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHVybCwgbG9jYWwsIHJlcztcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsYW5nID0gbWUuZ2V0TGFuZyhcInNuYXBTY3JlZW5fcGx1Z2luXCIpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKCFzbmFwcGx1Z2luKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0gbWUuY29udGFpbmVyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkb2MgPSBtZS5jb250YWluZXIub3duZXJEb2N1bWVudCB8fCBtZS5jb250YWluZXIuZG9jdW1lbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc25hcHBsdWdpbiA9IGRvYy5jcmVhdGVFbGVtZW50KFwib2JqZWN0XCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRyeXtzbmFwcGx1Z2luLnR5cGUgPSBcImFwcGxpY2F0aW9uL3gtcGx1Z2luYmFpZHVzbmFwXCI7fWNhdGNoKGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHNuYXBwbHVnaW4uc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotOTk5OXB4O3dpZHRoOjA7aGVpZ2h0OjA7XCI7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc25hcHBsdWdpbi5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLFwiMFwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzbmFwcGx1Z2luLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLFwiMFwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoc25hcHBsdWdpbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gb25TdWNjZXNzKHJzKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0cnl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJzID0gZXZhbChcIihcIisgcnMgK1wiKVwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYocnMuc3RhdGUgPT0gJ1NVQ0NFU1MnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcHQgPSBtZS5vcHRpb25zO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoJ2luc2VydGltYWdlJywge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogb3B0LnNuYXBzY3JlZW5VcmxQcmVmaXggKyBycy51cmwsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3NyYzogb3B0LnNuYXBzY3JlZW5VcmxQcmVmaXggKyBycy51cmwsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0OiBycy50aXRsZSB8fCAnJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdFN0eWxlOiBvcHQuc25hcHNjcmVlbkltZ0FsaWduXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KHJzLnN0YXRlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1jYXRjaChlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQobGFuZy5jYWxsQmFja0Vycm9yTXNnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB1cmwgPSBtZS5nZXRBY3Rpb25VcmwobWUuZ2V0T3B0KCdzbmFwc2NyZWVuQWN0aW9uTmFtZScpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxvY2FsID0gZ2V0TG9jYXRpb24odXJsKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRyeXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzID1zbmFwcGx1Z2luLnNhdmVTbmFwc2hvdChsb2NhbC5ob3N0bmFtZSwgbG9jYWwucGF0aCwgbG9jYWwucG9ydCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfWNhdGNoKGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS51aS5fZGlhbG9nc1snc25hcHNjcmVlbkRpYWxvZyddLm9wZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzKHJlcyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9LCA1MCk7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJXaW5kb3dzXCIsMCkgIT0gLTEpID8gMDotMTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdH1cclxuXHQpO1xyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy9pbnNlcnRwYXJhZ3JhcGguanNcclxuXHQvKipcclxuXHQgKiDmj5LlhaXmrrXokL1cclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cclxuXHQvKipcclxuXHQgKiDmj5LlhaXmrrXokL1cclxuXHQgKiBAY29tbWFuZCBpbnNlcnRwYXJhZ3JhcGhcclxuXHQgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogYGBgamF2YXNjcmlwdFxyXG5cdCAqIC8vZWRpdG9y5piv57yW6L6R5Zmo5a6e5L6LXHJcblx0ICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnaW5zZXJ0cGFyYWdyYXBoJyApO1xyXG5cdCAqIGBgYFxyXG5cdCAqL1xyXG5cclxuXHRVRS5jb21tYW5kc1snaW5zZXJ0cGFyYWdyYXBoJ10gPSB7XHJcblx0ICAgIGV4ZWNDb21tYW5kIDogZnVuY3Rpb24oIGNtZE5hbWUsZnJvbnQpIHtcclxuXHQgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKSxcclxuXHQgICAgICAgICAgICBzdGFydCA9IHJhbmdlLnN0YXJ0Q29udGFpbmVyLHRtcE5vZGU7XHJcblx0ICAgICAgICB3aGlsZShzdGFydCApe1xyXG5cdCAgICAgICAgICAgIGlmKGRvbVV0aWxzLmlzQm9keShzdGFydCkpe1xyXG5cdCAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdG1wTm9kZSA9IHN0YXJ0O1xyXG5cdCAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQucGFyZW50Tm9kZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmKHRtcE5vZGUpe1xyXG5cdCAgICAgICAgICAgIHZhciBwID0gbWUuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5cdCAgICAgICAgICAgIGlmKGZyb250KXtcclxuXHQgICAgICAgICAgICAgICAgdG1wTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShwLHRtcE5vZGUpXHJcblx0ICAgICAgICAgICAgfWVsc2V7XHJcblx0ICAgICAgICAgICAgICAgIHRtcE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocCx0bXBOb2RlLm5leHRTaWJsaW5nKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBkb21VdGlscy5maWxsTm9kZShtZS5kb2N1bWVudCxwKTtcclxuXHQgICAgICAgICAgICByYW5nZS5zZXRTdGFydChwLDApLnNldEN1cnNvcihmYWxzZSx0cnVlKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdH07XHJcblxyXG5cclxuXHJcblx0Ly8gcGx1Z2lucy93ZWJhcHAuanNcclxuXHQvKipcclxuXHQgKiDnmb7luqblupTnlKhcclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblxyXG5cclxuXHQvKipcclxuXHQgKiDmj5LlhaXnmb7luqblupTnlKhcclxuXHQgKiBAY29tbWFuZCB3ZWJhcHBcclxuXHQgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICogQHJlbWluZCDpnIDopoHnmb7luqZBUFBLZXlcclxuXHQgKiBAcmVtaW5kIOeZvuW6puW6lOeUqOS4u+mhte+8miA8YSBocmVmPVwiaHR0cDovL2FwcC5iYWlkdS5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL2FwcC5iYWlkdS5jb20vPC9hPlxyXG5cdCAqIEBwYXJhbSB7IE9iamVjdCB9IGFwcE9wdGlvbnMg5bqU55So5omA6ZyA55qE5Y+C5pWw6aG577yMIOaUr+aMgeeahGtleeacie+8miB0aXRsZT0+5bqU55So5qCH6aKY77yMIHdpZHRoPT7lupTnlKjlrrnlmajlrr3luqbvvIxcclxuXHQgKiBoZWlnaHQ9PuW6lOeUqOWuueWZqOmrmOW6pu+8jGxvZ289PuW6lOeUqGxvZ2/vvIx1cmw9PuW6lOeUqOWcsOWdgFxyXG5cdCAqIEBleGFtcGxlXHJcblx0ICogYGBgamF2YXNjcmlwdFxyXG5cdCAqIC8vZWRpdG9y5piv57yW6L6R5Zmo5a6e5L6LXHJcblx0ICogLy/lnKjnvJbovpHlmajph4zmj5LlhaXkuIDkuKrigJzmpI3nianlpKfmiJjlg7XlsLjigJ3nmoRBUFBcclxuXHQgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICd3ZWJhcHAnICwge1xyXG5cdCAqICAgICB0aXRsZTogJ+akjeeJqeWkp+aImOWDteWwuCcsXHJcblx0ICogICAgIHdpZHRoOiA1NjAsXHJcblx0ICogICAgIGhlaWdodDogNDY1LFxyXG5cdCAqICAgICBsb2dvOiAn5bqU55So5bGV56S655qE5Zu+54mHJyxcclxuXHQgKiAgICAgdXJsOiAn55m+5bqm5bqU55So55qE5Zyw5Z2AJ1xyXG5cdCAqIH0gKTtcclxuXHQgKiBgYGBcclxuXHQgKi9cclxuXHJcblx0Ly9VRS5wbHVnaW5zWyd3ZWJhcHAnXSA9IGZ1bmN0aW9uICgpIHtcclxuLy9cdCAgICB2YXIgbWUgPSB0aGlzO1xyXG4vL1x0ICAgIGZ1bmN0aW9uIGNyZWF0ZUluc2VydFN0ciggb2JqLCB0b0lmcmFtZSwgYWRkUGFyYWdyYXBoICkge1xyXG4vL1x0ICAgICAgICByZXR1cm4gIXRvSWZyYW1lID9cclxuLy9cdCAgICAgICAgICAgICAgICAoYWRkUGFyYWdyYXBoID8gJzxwPicgOiAnJykgKyAnPGltZyB0aXRsZT1cIicrb2JqLnRpdGxlKydcIiB3aWR0aD1cIicgKyBvYmoud2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIG9iai5oZWlnaHQgKyAnXCInICtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgICcgc3JjPVwiJyArIG1lLm9wdGlvbnMuVUVESVRPUl9IT01FX1VSTCArICd0aGVtZXMvZGVmYXVsdC9pbWFnZXMvc3BhY2VyLmdpZlwiIHN0eWxlPVwiYmFja2dyb3VuZDp1cmwoJyArIG9iai5sb2dvKycpIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyOyBib3JkZXI6MXB4IHNvbGlkIGdyYXk7XCIgY2xhc3M9XCJlZHVpLWZha2VkLXdlYmFwcFwiIF91cmw9XCInICsgb2JqLnVybCArICdcIiAvPicgK1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgKGFkZFBhcmFncmFwaCA/ICc8L3A+JyA6ICcnKVxyXG4vL1x0ICAgICAgICAgICAgICAgIDpcclxuLy9cdCAgICAgICAgICAgICAgICAnPGlmcmFtZSBjbGFzcz1cImVkdWktZmFrZWQtd2ViYXBwXCIgdGl0bGU9XCInK29iai50aXRsZSsnXCIgd2lkdGg9XCInICsgb2JqLndpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBvYmouaGVpZ2h0ICsgJ1wiICBzY3JvbGxpbmc9XCJub1wiIGZyYW1lYm9yZGVyPVwiMFwiIHNyYz1cIicgKyBvYmoudXJsICsgJ1wiIGxvZ29fdXJsID0gJytvYmoubG9nbysnPjwvaWZyYW1lPic7XHJcbi8vXHQgICAgfVxyXG5cdC8vXHJcbi8vXHQgICAgZnVuY3Rpb24gc3dpdGNoSW1nQW5kSWZyYW1lKCBpbWcyZnJhbWUgKSB7XHJcbi8vXHQgICAgICAgIHZhciB0bXBkaXYsXHJcbi8vXHQgICAgICAgICAgICAgICAgbm9kZXMgPSBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSggbWUuZG9jdW1lbnQsICFpbWcyZnJhbWUgPyBcImlmcmFtZVwiIDogXCJpbWdcIiApO1xyXG4vL1x0ICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIG5vZGU7IG5vZGUgPSBub2Rlc1tpKytdOyApIHtcclxuLy9cdCAgICAgICAgICAgIGlmICggbm9kZS5jbGFzc05hbWUgIT0gXCJlZHVpLWZha2VkLXdlYmFwcFwiICl7XHJcbi8vXHQgICAgICAgICAgICAgICAgY29udGludWU7XHJcbi8vXHQgICAgICAgICAgICB9XHJcbi8vXHQgICAgICAgICAgICB0bXBkaXYgPSBtZS5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XHJcbi8vXHQgICAgICAgICAgICB0bXBkaXYuaW5uZXJIVE1MID0gY3JlYXRlSW5zZXJ0U3RyKCBpbWcyZnJhbWUgPyB7dXJsOm5vZGUuZ2V0QXR0cmlidXRlKCBcIl91cmxcIiApLCB3aWR0aDpub2RlLndpZHRoLCBoZWlnaHQ6bm9kZS5oZWlnaHQsdGl0bGU6bm9kZS50aXRsZSxsb2dvOm5vZGUuc3R5bGUuYmFja2dyb3VuZEltYWdlLnJlcGxhY2UoXCJ1cmwoXCIsXCJcIikucmVwbGFjZShcIilcIixcIlwiKX0gOiB7dXJsOm5vZGUuZ2V0QXR0cmlidXRlKCBcInNyY1wiLCAyICksdGl0bGU6bm9kZS50aXRsZSwgd2lkdGg6bm9kZS53aWR0aCwgaGVpZ2h0Om5vZGUuaGVpZ2h0LGxvZ286bm9kZS5nZXRBdHRyaWJ1dGUoXCJsb2dvX3VybFwiKX0sIGltZzJmcmFtZSA/IHRydWUgOiBmYWxzZSxmYWxzZSApO1xyXG4vL1x0ICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCggdG1wZGl2LmZpcnN0Q2hpbGQsIG5vZGUgKTtcclxuLy9cdCAgICAgICAgfVxyXG4vL1x0ICAgIH1cclxuXHQvL1xyXG4vL1x0ICAgIG1lLmFkZExpc3RlbmVyKCBcImJlZm9yZWdldGNvbnRlbnRcIiwgZnVuY3Rpb24gKCkge1xyXG4vL1x0ICAgICAgICBzd2l0Y2hJbWdBbmRJZnJhbWUoIHRydWUgKTtcclxuLy9cdCAgICB9ICk7XHJcbi8vXHQgICAgbWUuYWRkTGlzdGVuZXIoICdhZnRlcnNldGNvbnRlbnQnLCBmdW5jdGlvbiAoKSB7XHJcbi8vXHQgICAgICAgIHN3aXRjaEltZ0FuZElmcmFtZSggZmFsc2UgKTtcclxuLy9cdCAgICB9ICk7XHJcbi8vXHQgICAgbWUuYWRkTGlzdGVuZXIoICdhZnRlcmdldGNvbnRlbnQnLCBmdW5jdGlvbiAoIGNtZE5hbWUgKSB7XHJcbi8vXHQgICAgICAgIGlmICggY21kTmFtZSA9PSAnYWZ0ZXJnZXRjb250ZW50JyAmJiBtZS5xdWVyeUNvbW1hbmRTdGF0ZSggJ3NvdXJjZScgKSApe1xyXG4vL1x0ICAgICAgICAgICAgcmV0dXJuO1xyXG4vL1x0ICAgICAgICB9XHJcbi8vXHQgICAgICAgIHN3aXRjaEltZ0FuZElmcmFtZSggZmFsc2UgKTtcclxuLy9cdCAgICB9ICk7XHJcblx0Ly9cclxuLy9cdCAgICBtZS5jb21tYW5kc1snd2ViYXBwJ10gPSB7XHJcbi8vXHQgICAgICAgIGV4ZWNDb21tYW5kOmZ1bmN0aW9uICggY21kLCBvYmogKSB7XHJcbi8vXHQgICAgICAgICAgICBtZS5leGVjQ29tbWFuZCggXCJpbnNlcnRodG1sXCIsIGNyZWF0ZUluc2VydFN0ciggb2JqLCBmYWxzZSx0cnVlICkgKTtcclxuLy9cdCAgICAgICAgfVxyXG4vL1x0ICAgIH07XHJcblx0Ly99O1xyXG5cclxuXHRVRS5wbHVnaW4ucmVnaXN0ZXIoJ3dlYmFwcCcsIGZ1bmN0aW9uICgpe1xyXG5cdCAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICBmdW5jdGlvbiBjcmVhdGVJbnNlcnRTdHIob2JqLHRvRW1iZWQpe1xyXG5cdCAgICAgICAgcmV0dXJuICAhdG9FbWJlZCA/XHJcblx0ICAgICAgICAgICAgJzxpbWcgdGl0bGU9XCInK29iai50aXRsZSsnXCIgd2lkdGg9XCInICsgb2JqLndpZHRoICsgJ1wiIGhlaWdodD1cIicgKyBvYmouaGVpZ2h0ICsgJ1wiJyArXHJcblx0ICAgICAgICAgICAgICAgICcgc3JjPVwiJyArIG1lLm9wdGlvbnMuVUVESVRPUl9IT01FX1VSTCArICd0aGVtZXMvZGVmYXVsdC9pbWFnZXMvc3BhY2VyLmdpZlwiIF9sb2dvX3VybD1cIicrb2JqLmxvZ28rJ1wiIHN0eWxlPVwiYmFja2dyb3VuZDp1cmwoJyArIG9iai5sb2dvXHJcblx0ICAgICAgICAgICAgICAgICsnKSBuby1yZXBlYXQgY2VudGVyIGNlbnRlcjsgYm9yZGVyOjFweCBzb2xpZCBncmF5O1wiIGNsYXNzPVwiZWR1aS1mYWtlZC13ZWJhcHBcIiBfdXJsPVwiJyArIG9iai51cmwgKyAnXCIgJyArXHJcblx0ICAgICAgICAgICAgICAgIChvYmouYWxpZ24gJiYgIW9iai5jc3NmbG9hdD8gJ2FsaWduPVwiJyArIG9iai5hbGlnbiArICdcIicgOiAnJykgK1xyXG5cdCAgICAgICAgICAgICAgICAob2JqLmNzc2Zsb2F0ID8gJ3N0eWxlPVwiZmxvYXQ6JyArIG9iai5jc3NmbG9hdCArICdcIicgOiAnJykgK1xyXG5cdCAgICAgICAgICAgICAgICAnLz4nXHJcblx0ICAgICAgICAgICAgOlxyXG5cdCAgICAgICAgICAgICc8aWZyYW1lIGNsYXNzPVwiZWR1aS1mYWtlZC13ZWJhcHBcIiB0aXRsZT1cIicrb2JqLnRpdGxlKydcIiAnICtcclxuXHQgICAgICAgICAgICAgICAgKG9iai5hbGlnbiAmJiAhb2JqLmNzc2Zsb2F0PyAnYWxpZ249XCInICsgb2JqLmFsaWduICsgJ1wiJyA6ICcnKSArXHJcblx0ICAgICAgICAgICAgICAgIChvYmouY3NzZmxvYXQgPyAnc3R5bGU9XCJmbG9hdDonICsgb2JqLmNzc2Zsb2F0ICsgJ1wiJyA6ICcnKSArXHJcblx0ICAgICAgICAgICAgICAgICd3aWR0aD1cIicgKyBvYmoud2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIG9iai5oZWlnaHQgKyAnXCIgIHNjcm9sbGluZz1cIm5vXCIgZnJhbWVib3JkZXI9XCIwXCIgc3JjPVwiJyArIG9iai51cmwgKyAnXCIgbG9nb191cmwgPSBcIicrb2JqLmxvZ28rJ1wiPjwvaWZyYW1lPidcclxuXHJcblx0ICAgIH1cclxuXHQgICAgcmV0dXJuIHtcclxuXHQgICAgICAgIG91dHB1dFJ1bGU6IGZ1bmN0aW9uKHJvb3Qpe1xyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgnaW1nJyksZnVuY3Rpb24obm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBodG1sO1xyXG5cdCAgICAgICAgICAgICAgICBpZihub2RlLmdldEF0dHIoJ2NsYXNzJykgPT0gJ2VkdWktZmFrZWQtd2ViYXBwJyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBodG1sID0gIGNyZWF0ZUluc2VydFN0cih7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6bm9kZS5nZXRBdHRyKCd0aXRsZScpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6bm9kZS5nZXRBdHRyKCd3aWR0aCcpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOm5vZGUuZ2V0QXR0cignaGVpZ2h0JyksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ2FsaWduJzpub2RlLmdldEF0dHIoJ2FsaWduJyksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ2Nzc2Zsb2F0Jzpub2RlLmdldFN0eWxlKCdmbG9hdCcpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICd1cmwnOm5vZGUuZ2V0QXR0cihcIl91cmxcIiksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ2xvZ28nOm5vZGUuZ2V0QXR0cignX2xvZ29fdXJsJylcclxuXHQgICAgICAgICAgICAgICAgICAgIH0sdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZW1iZWQgPSBVRS51Tm9kZS5jcmVhdGVFbGVtZW50KGh0bWwpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChlbWJlZCxub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgaW5wdXRSdWxlOmZ1bmN0aW9uKHJvb3Qpe1xyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgnaWZyYW1lJyksZnVuY3Rpb24obm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgIGlmKG5vZGUuZ2V0QXR0cignY2xhc3MnKSA9PSAnZWR1aS1mYWtlZC13ZWJhcHAnKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpbWcgPSBVRS51Tm9kZS5jcmVhdGVFbGVtZW50KGNyZWF0ZUluc2VydFN0cih7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6bm9kZS5nZXRBdHRyKCd0aXRsZScpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICd3aWR0aCc6bm9kZS5nZXRBdHRyKCd3aWR0aCcpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICdoZWlnaHQnOm5vZGUuZ2V0QXR0cignaGVpZ2h0JyksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ2FsaWduJzpub2RlLmdldEF0dHIoJ2FsaWduJyksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJ2Nzc2Zsb2F0Jzpub2RlLmdldFN0eWxlKCdmbG9hdCcpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICd1cmwnOm5vZGUuZ2V0QXR0cihcInNyY1wiKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnbG9nbyc6bm9kZS5nZXRBdHRyKCdsb2dvX3VybCcpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9KSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGltZyxub2RlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pXHJcblxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGNvbW1hbmRzOntcclxuXHQgICAgICAgICAgICAvKipcclxuXHQgICAgICAgICAgICAgKiDmj5LlhaXnmb7luqblupTnlKhcclxuXHQgICAgICAgICAgICAgKiBAY29tbWFuZCB3ZWJhcHBcclxuXHQgICAgICAgICAgICAgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICAgICAgICAgICAgICogQHJlbWluZCDpnIDopoHnmb7luqZBUFBLZXlcclxuXHQgICAgICAgICAgICAgKiBAcmVtaW5kIOeZvuW6puW6lOeUqOS4u+mhte+8miA8YSBocmVmPVwiaHR0cDovL2FwcC5iYWlkdS5jb20vXCIgdGFyZ2V0PVwiX2JsYW5rXCI+aHR0cDovL2FwcC5iYWlkdS5jb20vPC9hPlxyXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IGFwcE9wdGlvbnMg5bqU55So5omA6ZyA55qE5Y+C5pWw6aG577yMIOaUr+aMgeeahGtleeacie+8miB0aXRsZT0+5bqU55So5qCH6aKY77yMIHdpZHRoPT7lupTnlKjlrrnlmajlrr3luqbvvIxcclxuXHQgICAgICAgICAgICAgKiBoZWlnaHQ9PuW6lOeUqOWuueWZqOmrmOW6pu+8jGxvZ289PuW6lOeUqGxvZ2/vvIx1cmw9PuW6lOeUqOWcsOWdgFxyXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICAgICAqIC8vZWRpdG9y5piv57yW6L6R5Zmo5a6e5L6LXHJcblx0ICAgICAgICAgICAgICogLy/lnKjnvJbovpHlmajph4zmj5LlhaXkuIDkuKrigJzmpI3nianlpKfmiJjlg7XlsLjigJ3nmoRBUFBcclxuXHQgICAgICAgICAgICAgKiBlZGl0b3IuZXhlY0NvbW1hbmQoICd3ZWJhcHAnICwge1xyXG5cdCAgICAgICAgICAgICAqICAgICB0aXRsZTogJ+akjeeJqeWkp+aImOWDteWwuCcsXHJcblx0ICAgICAgICAgICAgICogICAgIHdpZHRoOiA1NjAsXHJcblx0ICAgICAgICAgICAgICogICAgIGhlaWdodDogNDY1LFxyXG5cdCAgICAgICAgICAgICAqICAgICBsb2dvOiAn5bqU55So5bGV56S655qE5Zu+54mHJyxcclxuXHQgICAgICAgICAgICAgKiAgICAgdXJsOiAn55m+5bqm5bqU55So55qE5Zyw5Z2AJ1xyXG5cdCAgICAgICAgICAgICAqIH0gKTtcclxuXHQgICAgICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAgICAgKi9cclxuXHQgICAgICAgICAgICAnd2ViYXBwJzp7XHJcblx0ICAgICAgICAgICAgICAgIGV4ZWNDb21tYW5kOmZ1bmN0aW9uIChjbWQsIG9iaikge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gY3JlYXRlSW5zZXJ0U3RyKHV0aWxzLmV4dGVuZChvYmose1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlnbjonbm9uZSdcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KSwgZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoXCJpbnNlcnRodG1sXCIsc3RyKTtcclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbWcgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKS5nZXRDbG9zZWROb2RlKCksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZmxhZyA9IGltZyAmJiAoaW1nLmNsYXNzTmFtZSA9PSBcImVkdWktZmFrZWQtd2ViYXBwXCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZsYWcgPyAxIDogMDtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdH0pO1xyXG5cclxuXHQvLyBwbHVnaW5zL3RlbXBsYXRlLmpzXHJcblx0Ly8vaW1wb3J0IGNvcmVcclxuXHQvLy9pbXBvcnQgcGx1Z2luc1xcaW5zZXJ0aHRtbC5qc1xyXG5cdC8vL2ltcG9ydCBwbHVnaW5zXFxjbGVhcmRvYy5qc1xyXG5cdC8vL2NvbW1hbmRzIOaooeadv1xyXG5cdC8vL2NvbW1hbmRzTmFtZSAgdGVtcGxhdGVcclxuXHQvLy9jb21tYW5kc1RpdGxlICDmqKHmnb9cclxuXHQvLy9jb21tYW5kc0RpYWxvZyAgZGlhbG9nc1xcdGVtcGxhdGVcclxuXHRVRS5wbHVnaW5zWyd0ZW1wbGF0ZSddID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICBVRS5jb21tYW5kc1sndGVtcGxhdGUnXSA9IHtcclxuXHQgICAgICAgIGV4ZWNDb21tYW5kOmZ1bmN0aW9uIChjbWQsIG9iaikge1xyXG5cdCAgICAgICAgICAgIG9iai5odG1sICYmIHRoaXMuZXhlY0NvbW1hbmQoXCJpbnNlcnRodG1sXCIsIG9iai5odG1sKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgdGhpcy5hZGRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICh0eXBlLCBldnQpIHtcclxuXHQgICAgICAgIHZhciBlbCA9IGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQsXHJcblx0ICAgICAgICAgICAgcmFuZ2UgPSB0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpO1xyXG5cdCAgICAgICAgdmFyIHRub2RlID0gZG9tVXRpbHMuZmluZFBhcmVudChlbCwgZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgICAgICBpZiAobm9kZS5jbGFzc05hbWUgJiYgZG9tVXRpbHMuaGFzQ2xhc3Mobm9kZSwgXCJ1ZV90XCIpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sIHRydWUpO1xyXG5cdCAgICAgICAgdG5vZGUgJiYgcmFuZ2Uuc2VsZWN0Tm9kZSh0bm9kZSkuc2hyaW5rQm91bmRhcnkoKS5zZWxlY3QoKTtcclxuXHQgICAgfSk7XHJcblx0ICAgIHRoaXMuYWRkTGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uICh0eXBlLCBldnQpIHtcclxuXHQgICAgICAgIHZhciByYW5nZSA9IHRoaXMuc2VsZWN0aW9uLmdldFJhbmdlKCk7XHJcblx0ICAgICAgICBpZiAoIXJhbmdlLmNvbGxhcHNlZCkge1xyXG5cdCAgICAgICAgICAgIGlmICghZXZ0LmN0cmxLZXkgJiYgIWV2dC5tZXRhS2V5ICYmICFldnQuc2hpZnRLZXkgJiYgIWV2dC5hbHRLZXkpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRub2RlID0gZG9tVXRpbHMuZmluZFBhcmVudChyYW5nZS5zdGFydENvbnRhaW5lciwgZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmNsYXNzTmFtZSAmJiBkb21VdGlscy5oYXNDbGFzcyhub2RlLCBcInVlX3RcIikpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0bm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlQ2xhc3Nlcyh0bm9kZSwgW1widWVfdFwiXSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH0pO1xyXG5cdH07XHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL211c2ljLmpzXHJcblx0LyoqXHJcblx0ICog5o+S5YWl6Z+z5LmQ5ZG95LukXHJcblx0ICogQGZpbGVcclxuXHQgKi9cclxuXHRVRS5wbHVnaW4ucmVnaXN0ZXIoJ211c2ljJywgZnVuY3Rpb24gKCl7XHJcblx0ICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgIGZ1bmN0aW9uIGNyZWF0SW5zZXJ0U3RyKHVybCx3aWR0aCxoZWlnaHQsYWxpZ24sY3NzZmxvYXQsdG9FbWJlZCl7XHJcblx0ICAgICAgICByZXR1cm4gICF0b0VtYmVkID9cclxuXHQgICAgICAgICAgICAgICAgJzxpbWcgJyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAoYWxpZ24gJiYgIWNzc2Zsb2F0PyAnYWxpZ249XCInICsgYWxpZ24gKyAnXCInIDogJycpICtcclxuXHQgICAgICAgICAgICAgICAgICAgIChjc3NmbG9hdCA/ICdzdHlsZT1cImZsb2F0OicgKyBjc3NmbG9hdCArICdcIicgOiAnJykgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgJyB3aWR0aD1cIicrIHdpZHRoICsnXCIgaGVpZ2h0PVwiJyArIGhlaWdodCArICdcIiBfdXJsPVwiJyt1cmwrJ1wiIGNsYXNzPVwiZWR1aS1mYWtlZC1tdXNpY1wiJyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAnIHNyYz1cIicrbWUub3B0aW9ucy5sYW5nUGF0aCttZS5vcHRpb25zLmxhbmcrJy9pbWFnZXMvbXVzaWMucG5nXCIgLz4nXHJcblx0ICAgICAgICAgICAgOlxyXG5cdCAgICAgICAgICAgICc8ZW1iZWQgdHlwZT1cImFwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoXCIgY2xhc3M9XCJlZHVpLWZha2VkLW11c2ljXCIgcGx1Z2luc3BhZ2U9XCJodHRwOi8vd3d3Lm1hY3JvbWVkaWEuY29tL2dvL2dldGZsYXNocGxheWVyXCInICtcclxuXHQgICAgICAgICAgICAgICAgJyBzcmM9XCInICsgdXJsICsgJ1wiIHdpZHRoPVwiJyArIHdpZHRoICArICdcIiBoZWlnaHQ9XCInICsgaGVpZ2h0ICArICdcIiAnKyAoYWxpZ24gJiYgIWNzc2Zsb2F0PyAnYWxpZ249XCInICsgYWxpZ24gKyAnXCInIDogJycpICtcclxuXHQgICAgICAgICAgICAgICAgKGNzc2Zsb2F0ID8gJ3N0eWxlPVwiZmxvYXQ6JyArIGNzc2Zsb2F0ICsgJ1wiJyA6ICcnKSArXHJcblx0ICAgICAgICAgICAgICAgICcgd21vZGU9XCJ0cmFuc3BhcmVudFwiIHBsYXk9XCJ0cnVlXCIgbG9vcD1cImZhbHNlXCIgbWVudT1cImZhbHNlXCIgYWxsb3dzY3JpcHRhY2Nlc3M9XCJuZXZlclwiIGFsbG93ZnVsbHNjcmVlbj1cInRydWVcIiA+JztcclxuXHQgICAgfVxyXG5cdCAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgb3V0cHV0UnVsZTogZnVuY3Rpb24ocm9vdCl7XHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaChyb290LmdldE5vZGVzQnlUYWdOYW1lKCdpbWcnKSxmdW5jdGlvbihub2RlKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGh0bWw7XHJcblx0ICAgICAgICAgICAgICAgIGlmKG5vZGUuZ2V0QXR0cignY2xhc3MnKSA9PSAnZWR1aS1mYWtlZC1tdXNpYycpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNzc2Zsb2F0ID0gbm9kZS5nZXRTdHlsZSgnZmxvYXQnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBhbGlnbiA9IG5vZGUuZ2V0QXR0cignYWxpZ24nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGh0bWwgPSAgY3JlYXRJbnNlcnRTdHIobm9kZS5nZXRBdHRyKFwiX3VybFwiKSwgbm9kZS5nZXRBdHRyKCd3aWR0aCcpLCBub2RlLmdldEF0dHIoJ2hlaWdodCcpLCBhbGlnbiwgY3NzZmxvYXQsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGVtYmVkID0gVUUudU5vZGUuY3JlYXRlRWxlbWVudChodG1sKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoZW1iZWQsbm9kZSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGlucHV0UnVsZTpmdW5jdGlvbihyb290KXtcclxuXHQgICAgICAgICAgICB1dGlscy5lYWNoKHJvb3QuZ2V0Tm9kZXNCeVRhZ05hbWUoJ2VtYmVkJyksZnVuY3Rpb24obm9kZSl7XHJcblx0ICAgICAgICAgICAgICAgIGlmKG5vZGUuZ2V0QXR0cignY2xhc3MnKSA9PSAnZWR1aS1mYWtlZC1tdXNpYycpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNzc2Zsb2F0ID0gbm9kZS5nZXRTdHlsZSgnZmxvYXQnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBhbGlnbiA9IG5vZGUuZ2V0QXR0cignYWxpZ24nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGh0bWwgPSAgY3JlYXRJbnNlcnRTdHIobm9kZS5nZXRBdHRyKFwic3JjXCIpLCBub2RlLmdldEF0dHIoJ3dpZHRoJyksIG5vZGUuZ2V0QXR0cignaGVpZ2h0JyksIGFsaWduLCBjc3NmbG9hdCxmYWxzZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW1nID0gVUUudU5vZGUuY3JlYXRlRWxlbWVudChodG1sKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoaW1nLG5vZGUpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSlcclxuXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgY29tbWFuZHM6e1xyXG5cdCAgICAgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICAgICAqIOaPkuWFpemfs+S5kFxyXG5cdCAgICAgICAgICAgICAqIEBjb21tYW5kIG11c2ljXHJcblx0ICAgICAgICAgICAgICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7IE9iamVjdCB9IG11c2ljT3B0aW9ucyDmj5LlhaXpn7PkuZDnmoTlj4LmlbDpobnvvIwg5pSv5oyB55qEa2V55pyJ77yaIHVybD0+6Z+z5LmQ5Zyw5Z2A77ybXHJcblx0ICAgICAgICAgICAgICogd2lkdGg9Pumfs+S5kOWuueWZqOWuveW6pu+8m2hlaWdodD0+6Z+z5LmQ5a655Zmo6auY5bqm77ybYWxpZ249Pumfs+S5kOaWh+S7tueahOWvuem9kOaWueW8j++8jCDlj6/pgInlgLzmnIk6IGxlZnQsIGNlbnRlciwgcmlnaHQsIG5vbmVcclxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAgICAgKiAvL2VkaXRvcuaYr+e8lui+keWZqOWunuS+i1xyXG5cdCAgICAgICAgICAgICAqIC8v5Zyo57yW6L6R5Zmo6YeM5o+S5YWl5LiA5Liq4oCc5qSN54mp5aSn5oiY5YO15bC44oCd55qEQVBQXHJcblx0ICAgICAgICAgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCAnbXVzaWMnICwge1xyXG5cdCAgICAgICAgICAgICAqICAgICB3aWR0aDogNDAwLFxyXG5cdCAgICAgICAgICAgICAqICAgICBoZWlnaHQ6IDk1LFxyXG5cdCAgICAgICAgICAgICAqICAgICBhbGlnbjogXCJjZW50ZXJcIixcclxuXHQgICAgICAgICAgICAgKiAgICAgdXJsOiBcIumfs+S5kOWcsOWdgFwiXHJcblx0ICAgICAgICAgICAgICogfSApO1xyXG5cdCAgICAgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICAgICAqL1xyXG5cdCAgICAgICAgICAgICdtdXNpYyc6e1xyXG5cdCAgICAgICAgICAgICAgICBleGVjQ29tbWFuZDpmdW5jdGlvbiAoY21kLCBtdXNpY09iaikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBjcmVhdEluc2VydFN0cihtdXNpY09iai51cmwsIG11c2ljT2JqLndpZHRoIHx8IDQwMCwgbXVzaWNPYmouaGVpZ2h0IHx8IDk1LCBcIm5vbmVcIiwgZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoXCJpbnNlcnRodG1sXCIsc3RyKTtcclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgcXVlcnlDb21tYW5kU3RhdGU6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbWcgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKS5nZXRDbG9zZWROb2RlKCksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZmxhZyA9IGltZyAmJiAoaW1nLmNsYXNzTmFtZSA9PSBcImVkdWktZmFrZWQtbXVzaWNcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmxhZyA/IDEgOiAwO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0fSk7XHJcblxyXG5cdC8vIHBsdWdpbnMvYXV0b3VwbG9hZC5qc1xyXG5cdC8qKlxyXG5cdCAqIEBkZXNjcmlwdGlvblxyXG5cdCAqIDEu5ouW5pS+5paH5Lu25Yiw57yW6L6R5Yy65Z+f77yM6Ieq5Yqo5LiK5Lyg5bm25o+S5YWl5Yiw6YCJ5Yy6XHJcblx0ICogMi7mj5LlhaXnspjotLTmnb/nmoTlm77niYfvvIzoh6rliqjkuIrkvKDlubbmj5LlhaXliLDpgInljLpcclxuXHQgKiBAYXV0aG9yIEppbnFuXHJcblx0ICogQGRhdGUgMjAxMy0xMC0xNFxyXG5cdCAqL1xyXG5cdFVFLnBsdWdpbi5yZWdpc3RlcignYXV0b3VwbG9hZCcsIGZ1bmN0aW9uICgpe1xyXG5cclxuXHQgICAgZnVuY3Rpb24gc2VuZEFuZEluc2VydEZpbGUoZmlsZSwgZWRpdG9yKSB7XHJcblx0ICAgICAgICB2YXIgbWUgID0gZWRpdG9yO1xyXG5cdCAgICAgICAgLy/mqKHmi5/mlbDmja5cclxuXHQgICAgICAgIHZhciBmaWVsZE5hbWUsIHVybFByZWZpeCwgbWF4U2l6ZSwgYWxsb3dGaWxlcywgYWN0aW9uVXJsLFxyXG5cdCAgICAgICAgICAgIGxvYWRpbmdIdG1sLCBlcnJvckhhbmRsZXIsIHN1Y2Nlc3NIYW5kbGVyLFxyXG5cdCAgICAgICAgICAgIGZpbGV0eXBlID0gL2ltYWdlXFwvXFx3Ky9pLnRlc3QoZmlsZS50eXBlKSA/ICdpbWFnZSc6J2ZpbGUnLFxyXG5cdCAgICAgICAgICAgIGxvYWRpbmdJZCA9ICdsb2FkaW5nXycgKyAoK25ldyBEYXRlKCkpLnRvU3RyaW5nKDM2KTtcclxuXHJcblx0ICAgICAgICBmaWVsZE5hbWUgPSBtZS5nZXRPcHQoZmlsZXR5cGUgKyAnRmllbGROYW1lJyk7XHJcblx0ICAgICAgICB1cmxQcmVmaXggPSBtZS5nZXRPcHQoZmlsZXR5cGUgKyAnVXJsUHJlZml4Jyk7XHJcblx0ICAgICAgICBtYXhTaXplID0gbWUuZ2V0T3B0KGZpbGV0eXBlICsgJ01heFNpemUnKTtcclxuXHQgICAgICAgIGFsbG93RmlsZXMgPSBtZS5nZXRPcHQoZmlsZXR5cGUgKyAnQWxsb3dGaWxlcycpO1xyXG5cdCAgICAgICAgYWN0aW9uVXJsID0gbWUuZ2V0QWN0aW9uVXJsKG1lLmdldE9wdChmaWxldHlwZSArICdBY3Rpb25OYW1lJykpO1xyXG5cdCAgICAgICAgZXJyb3JIYW5kbGVyID0gZnVuY3Rpb24odGl0bGUpIHtcclxuXHQgICAgICAgICAgICB2YXIgbG9hZGVyID0gbWUuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobG9hZGluZ0lkKTtcclxuXHQgICAgICAgICAgICBsb2FkZXIgJiYgZG9tVXRpbHMucmVtb3ZlKGxvYWRlcik7XHJcblx0ICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCdzaG93bWVzc2FnZScsIHtcclxuXHQgICAgICAgICAgICAgICAgJ2lkJzogbG9hZGluZ0lkLFxyXG5cdCAgICAgICAgICAgICAgICAnY29udGVudCc6IHRpdGxlLFxyXG5cdCAgICAgICAgICAgICAgICAndHlwZSc6ICdlcnJvcicsXHJcblx0ICAgICAgICAgICAgICAgICd0aW1lb3V0JzogNDAwMFxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICBpZiAoZmlsZXR5cGUgPT0gJ2ltYWdlJykge1xyXG5cdCAgICAgICAgICAgIGxvYWRpbmdIdG1sID0gJzxpbWcgY2xhc3M9XCJsb2FkaW5nY2xhc3NcIiBpZD1cIicgKyBsb2FkaW5nSWQgKyAnXCIgc3JjPVwiJyArXHJcblx0ICAgICAgICAgICAgICAgIG1lLm9wdGlvbnMudGhlbWVQYXRoICsgbWUub3B0aW9ucy50aGVtZSArXHJcblx0ICAgICAgICAgICAgICAgICcvaW1hZ2VzL3NwYWNlci5naWZcIiB0aXRsZT1cIicgKyAobWUuZ2V0TGFuZygnYXV0b3VwbG9hZC5sb2FkaW5nJykgfHwgJycpICsgJ1wiID4nO1xyXG5cdCAgICAgICAgICAgIHN1Y2Nlc3NIYW5kbGVyID0gZnVuY3Rpb24oZGF0YSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbGluayA9IHVybFByZWZpeCArIGRhdGEudXJsLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgbG9hZGVyID0gbWUuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobG9hZGluZ0lkKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGxvYWRlcikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbG9hZGVyLnNldEF0dHJpYnV0ZSgnc3JjJywgbGluayk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsb2FkZXIuc2V0QXR0cmlidXRlKCdfc3JjJywgbGluayk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsb2FkZXIuc2V0QXR0cmlidXRlKCd0aXRsZScsIGRhdGEudGl0bGUgfHwgJycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbG9hZGVyLnNldEF0dHJpYnV0ZSgnYWx0JywgZGF0YS5vcmlnaW5hbCB8fCAnJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsb2FkZXIucmVtb3ZlQXR0cmlidXRlKCdpZCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlQ2xhc3Nlcyhsb2FkZXIsICdsb2FkaW5nY2xhc3MnKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgIGxvYWRpbmdIdG1sID0gJzxwPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGltZyBjbGFzcz1cImxvYWRpbmdjbGFzc1wiIGlkPVwiJyArIGxvYWRpbmdJZCArICdcIiBzcmM9XCInICtcclxuXHQgICAgICAgICAgICAgICAgbWUub3B0aW9ucy50aGVtZVBhdGggKyBtZS5vcHRpb25zLnRoZW1lICtcclxuXHQgICAgICAgICAgICAgICAgJy9pbWFnZXMvc3BhY2VyLmdpZlwiIHRpdGxlPVwiJyArIChtZS5nZXRMYW5nKCdhdXRvdXBsb2FkLmxvYWRpbmcnKSB8fCAnJykgKyAnXCIgPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC9wPic7XHJcblx0ICAgICAgICAgICAgc3VjY2Vzc0hhbmRsZXIgPSBmdW5jdGlvbihkYXRhKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBsaW5rID0gdXJsUHJlZml4ICsgZGF0YS51cmwsXHJcblx0ICAgICAgICAgICAgICAgICAgICBsb2FkZXIgPSBtZS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChsb2FkaW5nSWQpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdmFyIHJuZyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgYmsgPSBybmcuY3JlYXRlQm9va21hcmsoKTtcclxuXHQgICAgICAgICAgICAgICAgcm5nLnNlbGVjdE5vZGUobG9hZGVyKS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgbWUuZXhlY0NvbW1hbmQoJ2luc2VydGZpbGUnLCB7J3VybCc6IGxpbmt9KTtcclxuXHQgICAgICAgICAgICAgICAgcm5nLm1vdmVUb0Jvb2ttYXJrKGJrKS5zZWxlY3QoKTtcclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIC8qIOaPkuWFpWxvYWRpbmfnmoTljaDkvY3nrKYgKi9cclxuXHQgICAgICAgIG1lLmV4ZWNDb21tYW5kKCdpbnNlcnRodG1sJywgbG9hZGluZ0h0bWwpO1xyXG5cclxuXHQgICAgICAgIC8qIOWIpOaWreWQjuerr+mFjee9ruaYr+WQpuayoeacieWKoOi9veaIkOWKnyAqL1xyXG5cdCAgICAgICAgaWYgKCFtZS5nZXRPcHQoZmlsZXR5cGUgKyAnQWN0aW9uTmFtZScpKSB7XHJcblx0ICAgICAgICAgICAgZXJyb3JIYW5kbGVyKG1lLmdldExhbmcoJ2F1dG91cGxvYWQuZXJyb3JMb2FkQ29uZmlnJykpO1xyXG5cdCAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIC8qIOWIpOaWreaWh+S7tuWkp+Wwj+aYr+WQpui2heWHuumZkOWItiAqL1xyXG5cdCAgICAgICAgaWYoZmlsZS5zaXplID4gbWF4U2l6ZSkge1xyXG5cdCAgICAgICAgICAgIGVycm9ySGFuZGxlcihtZS5nZXRMYW5nKCdhdXRvdXBsb2FkLmV4Y2VlZFNpemVFcnJvcicpKTtcclxuXHQgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICAvKiDliKTmlq3mlofku7bmoLzlvI/mmK/lkKbotoXlh7rlhYHorrggKi9cclxuXHQgICAgICAgIHZhciBmaWxlZXh0ID0gZmlsZS5uYW1lID8gZmlsZS5uYW1lLnN1YnN0cihmaWxlLm5hbWUubGFzdEluZGV4T2YoJy4nKSk6Jyc7XHJcblx0ICAgICAgICBpZiAoKGZpbGVleHQgJiYgZmlsZXR5cGUgIT0gJ2ltYWdlJykgfHwgKGFsbG93RmlsZXMgJiYgKGFsbG93RmlsZXMuam9pbignJykgKyAnLicpLmluZGV4T2YoZmlsZWV4dC50b0xvd2VyQ2FzZSgpICsgJy4nKSA9PSAtMSkpIHtcclxuXHQgICAgICAgICAgICBlcnJvckhhbmRsZXIobWUuZ2V0TGFuZygnYXV0b3VwbG9hZC5leGNlZWRUeXBlRXJyb3InKSk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIC8qIOWIm+W7ukFqYXjlubbmj5DkuqQgKi9cclxuXHQgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcclxuXHQgICAgICAgICAgICBmZCA9IG5ldyBGb3JtRGF0YSgpLFxyXG5cdCAgICAgICAgICAgIHBhcmFtcyA9IHV0aWxzLnNlcmlhbGl6ZVBhcmFtKG1lLnF1ZXJ5Q29tbWFuZFZhbHVlKCdzZXJ2ZXJwYXJhbScpKSB8fCAnJyxcclxuXHQgICAgICAgICAgICB1cmwgPSB1dGlscy5mb3JtYXRVcmwoYWN0aW9uVXJsICsgKGFjdGlvblVybC5pbmRleE9mKCc/JykgPT0gLTEgPyAnPyc6JyYnKSArIHBhcmFtcyk7XHJcblxyXG5cdCAgICAgICAgZmQuYXBwZW5kKGZpZWxkTmFtZSwgZmlsZSwgZmlsZS5uYW1lIHx8ICgnYmxvYi4nICsgZmlsZS50eXBlLnN1YnN0cignaW1hZ2UvJy5sZW5ndGgpKSk7XHJcblx0ICAgICAgICBmZC5hcHBlbmQoJ3R5cGUnLCAnYWpheCcpO1xyXG5cdCAgICAgICAgeGhyLm9wZW4oXCJwb3N0XCIsIHVybCwgdHJ1ZSk7XHJcblx0ICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIlgtUmVxdWVzdGVkLVdpdGhcIiwgXCJYTUxIdHRwUmVxdWVzdFwiKTtcclxuXHQgICAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24gKGUpIHtcclxuXHQgICAgICAgICAgICB0cnl7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBqc29uID0gKG5ldyBGdW5jdGlvbihcInJldHVybiBcIiArIHV0aWxzLnRyaW0oZS50YXJnZXQucmVzcG9uc2UpKSkoKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGpzb24uc3RhdGUgPT0gJ1NVQ0NFU1MnICYmIGpzb24udXJsKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzdWNjZXNzSGFuZGxlcihqc29uKTtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVycm9ySGFuZGxlcihqc29uLnN0YXRlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1jYXRjaChlcil7XHJcblx0ICAgICAgICAgICAgICAgIGVycm9ySGFuZGxlcihtZS5nZXRMYW5nKCdhdXRvdXBsb2FkLmxvYWRFcnJvcicpKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIHhoci5zZW5kKGZkKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgZnVuY3Rpb24gZ2V0UGFzdGVJbWFnZShlKXtcclxuXHQgICAgICAgIHJldHVybiBlLmNsaXBib2FyZERhdGEgJiYgZS5jbGlwYm9hcmREYXRhLml0ZW1zICYmIGUuY2xpcGJvYXJkRGF0YS5pdGVtcy5sZW5ndGggPT0gMSAmJiAvXmltYWdlXFwvLy50ZXN0KGUuY2xpcGJvYXJkRGF0YS5pdGVtc1swXS50eXBlKSA/IGUuY2xpcGJvYXJkRGF0YS5pdGVtczpudWxsO1xyXG5cdCAgICB9XHJcblx0ICAgIGZ1bmN0aW9uIGdldERyb3BJbWFnZShlKXtcclxuXHQgICAgICAgIHJldHVybiAgZS5kYXRhVHJhbnNmZXIgJiYgZS5kYXRhVHJhbnNmZXIuZmlsZXMgPyBlLmRhdGFUcmFuc2Zlci5maWxlczpudWxsO1xyXG5cdCAgICB9XHJcblxyXG5cdCAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgb3V0cHV0UnVsZTogZnVuY3Rpb24ocm9vdCl7XHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaChyb290LmdldE5vZGVzQnlUYWdOYW1lKCdpbWcnKSxmdW5jdGlvbihuKXtcclxuXHQgICAgICAgICAgICAgICAgaWYgKC9cXGIobG9hZGVycm9yY2xhc3MpfChibG9hZGVycm9yY2xhc3MpXFxiLy50ZXN0KG4uZ2V0QXR0cignY2xhc3MnKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgncCcpLGZ1bmN0aW9uKG4pe1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoL1xcYmxvYWRwYXJhXFxiLy50ZXN0KG4uZ2V0QXR0cignY2xhc3MnKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG4ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChuKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGJpbmRFdmVudHM6e1xyXG5cdCAgICAgICAgICAgIC8v5o+S5YWl57KY6LS05p2/55qE5Zu+54mH77yM5ouW5pS+5o+S5YWl5Zu+54mHXHJcblx0ICAgICAgICAgICAgJ3JlYWR5JzpmdW5jdGlvbihlKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICAgICAgaWYod2luZG93LkZvcm1EYXRhICYmIHdpbmRvdy5GaWxlUmVhZGVyKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5vbihtZS5ib2R5LCAncGFzdGUgZHJvcCcsIGZ1bmN0aW9uKGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNJbWcgPSBmYWxzZSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgLy/ojrflj5bnspjotLTmnb/mlofku7bliJfooajmiJbogIXmi5bmlL7mlofku7bliJfooahcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcyA9IGUudHlwZSA9PSAncGFzdGUnID8gZ2V0UGFzdGVJbWFnZShlKTpnZXREcm9wSW1hZ2UoZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbXMpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVuID0gaXRlbXMubGVuZ3RoLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGxlbi0tKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUgPSBpdGVtc1tsZW5dO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZmlsZS5nZXRBc0ZpbGUpIGZpbGUgPSBmaWxlLmdldEFzRmlsZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZmlsZSAmJiBmaWxlLnNpemUgPiAwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VuZEFuZEluc2VydEZpbGUoZmlsZSwgbWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0ltZyA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzSW1nICYmIGUucHJldmVudERlZmF1bHQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+WPlua2iOaLluaUvuWbvueJh+aXtuWHuueOsOeahOaWh+Wtl+WFieagh+S9jee9ruaPkOekulxyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMub24obWUuYm9keSwgJ2RyYWdvdmVyJywgZnVuY3Rpb24gKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihlLmRhdGFUcmFuc2Zlci50eXBlc1swXSA9PSAnRmlsZXMnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+iuvue9rmxvYWRpbmfnmoTmoLflvI9cclxuXHQgICAgICAgICAgICAgICAgICAgIHV0aWxzLmNzc1J1bGUoJ2xvYWRpbmcnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICcubG9hZGluZ2NsYXNze2Rpc3BsYXk6aW5saW5lLWJsb2NrO2N1cnNvcjpkZWZhdWx0O2JhY2tncm91bmQ6IHVybChcXCcnXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgdGhpcy5vcHRpb25zLnRoZW1lUGF0aFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHRoaXMub3B0aW9ucy50aGVtZSArJy9pbWFnZXMvbG9hZGluZy5naWZcXCcpIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyIHRyYW5zcGFyZW50O2JvcmRlcjoxcHggc29saWQgI2NjY2NjYzttYXJnaW4tbGVmdDoxcHg7aGVpZ2h0OiAyMnB4O3dpZHRoOiAyMnB4O31cXG4nICtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJy5sb2FkZXJyb3JjbGFzc3tkaXNwbGF5OmlubGluZS1ibG9jaztjdXJzb3I6ZGVmYXVsdDtiYWNrZ3JvdW5kOiB1cmwoXFwnJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICArIHRoaXMub3B0aW9ucy50aGVtZVBhdGhcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyB0aGlzLm9wdGlvbnMudGhlbWUgKycvaW1hZ2VzL2xvYWRlcnJvci5wbmdcXCcpIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyIHRyYW5zcGFyZW50O2JvcmRlcjoxcHggc29saWQgI2NjY2NjYzttYXJnaW4tcmlnaHQ6MXB4O2hlaWdodDogMjJweDt3aWR0aDogMjJweDsnICtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ30nLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0fSk7XHJcblxyXG5cdC8vIHBsdWdpbnMvYXV0b3NhdmUuanNcclxuXHRVRS5wbHVnaW4ucmVnaXN0ZXIoJ2F1dG9zYXZlJywgZnVuY3Rpb24gKCl7XHJcblxyXG5cdCAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgLy/ml6DpmZDlvqrnjq/kv53miqRcclxuXHQgICAgICAgIGxhc3RTYXZlVGltZSA9IG5ldyBEYXRlKCksXHJcblx0ICAgICAgICAvL+acgOWwj+S/neWtmOmXtOmalOaXtumXtFxyXG5cdCAgICAgICAgTUlOX1RJTUUgPSAyMCxcclxuXHQgICAgICAgIC8vYXV0byBzYXZlIGtleVxyXG5cdCAgICAgICAgc2F2ZUtleSA9IG51bGw7XHJcblxyXG5cdCAgICBmdW5jdGlvbiBzYXZlICggZWRpdG9yICkge1xyXG5cclxuXHQgICAgICAgIHZhciBzYXZlRGF0YTtcclxuXHJcblx0ICAgICAgICBpZiAoIG5ldyBEYXRlKCkgLSBsYXN0U2F2ZVRpbWUgPCBNSU5fVElNRSApIHtcclxuXHQgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgaWYgKCAhZWRpdG9yLmhhc0NvbnRlbnRzKCkgKSB7XHJcblx0ICAgICAgICAgICAgLy/ov5nph4zkuI3og73osIPnlKjlkb3ku6TmnaXliKDpmaTvvIwg5Lya6YCg5oiQ5LqL5Lu25q275b6q546vXHJcblx0ICAgICAgICAgICAgc2F2ZUtleSAmJiBtZS5yZW1vdmVQcmVmZXJlbmNlcyggc2F2ZUtleSApO1xyXG5cdCAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBsYXN0U2F2ZVRpbWUgPSBuZXcgRGF0ZSgpO1xyXG5cclxuXHQgICAgICAgIGVkaXRvci5fc2F2ZUZsYWcgPSBudWxsO1xyXG5cclxuXHQgICAgICAgIHNhdmVEYXRhID0gbWUuYm9keS5pbm5lckhUTUw7XHJcblxyXG5cdCAgICAgICAgaWYgKCBlZGl0b3IuZmlyZUV2ZW50KCBcImJlZm9yZWF1dG9zYXZlXCIsIHtcclxuXHQgICAgICAgICAgICBjb250ZW50OiBzYXZlRGF0YVxyXG5cdCAgICAgICAgfSApID09PSBmYWxzZSApIHtcclxuXHQgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgbWUuc2V0UHJlZmVyZW5jZXMoIHNhdmVLZXksIHNhdmVEYXRhICk7XHJcblxyXG5cdCAgICAgICAgZWRpdG9yLmZpcmVFdmVudCggXCJhZnRlcmF1dG9zYXZlXCIsIHtcclxuXHQgICAgICAgICAgICBjb250ZW50OiBzYXZlRGF0YVxyXG5cdCAgICAgICAgfSApO1xyXG5cclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIHtcclxuXHQgICAgICAgIGRlZmF1bHRPcHRpb25zOiB7XHJcblx0ICAgICAgICAgICAgLy/pu5jorqTpl7TpmpTml7bpl7RcclxuXHQgICAgICAgICAgICBzYXZlSW50ZXJ2YWw6IDUwMFxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGJpbmRFdmVudHM6e1xyXG5cdCAgICAgICAgICAgICdyZWFkeSc6ZnVuY3Rpb24oKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHZhciBfc3VmZml4ID0gXCItZHJhZnRzLWRhdGFcIixcclxuXHQgICAgICAgICAgICAgICAgICAgIGtleSA9IG51bGw7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIG1lLmtleSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGtleSA9IG1lLmtleSArIF9zdWZmaXg7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBrZXkgPSAoIG1lLmNvbnRhaW5lci5wYXJlbnROb2RlLmlkIHx8ICd1ZS1jb21tb24nICkgKyBfc3VmZml4O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAvL+mhtemdouWcsOWdgCvnvJbovpHlmahJRCDkv53mjIHllK/kuIBcclxuXHQgICAgICAgICAgICAgICAgc2F2ZUtleSA9ICggbG9jYXRpb24ucHJvdG9jb2wgKyBsb2NhdGlvbi5ob3N0ICsgbG9jYXRpb24ucGF0aG5hbWUgKS5yZXBsYWNlKCAvWy46XFwvXS9nLCAnXycgKSArIGtleTtcclxuXHJcblx0ICAgICAgICAgICAgfSxcclxuXHJcblx0ICAgICAgICAgICAgJ2NvbnRlbnRjaGFuZ2UnOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgXHRpZighbWUub3B0aW9ucy5lbmFibGVBdXRvU2F2ZSl7XHJcblx0ICAgICAgICAgICAgXHRcdHJldHVyblxyXG5cdCAgICAgICAgICAgIFx0fVxyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYgKCAhc2F2ZUtleSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYgKCBtZS5fc2F2ZUZsYWcgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KCBtZS5fc2F2ZUZsYWcgKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYgKCBtZS5vcHRpb25zLnNhdmVJbnRlcnZhbCA+IDAgKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuX3NhdmVGbGFnID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uICgpIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZSggbWUgKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB9LCBtZS5vcHRpb25zLnNhdmVJbnRlcnZhbCApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBzYXZlKG1lKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBjb21tYW5kczp7XHJcblx0ICAgICAgICAgICAgJ2NsZWFybG9jYWxkYXRhJzp7XHJcblx0ICAgICAgICAgICAgICAgIGV4ZWNDb21tYW5kOmZ1bmN0aW9uIChjbWQsIG5hbWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICggc2F2ZUtleSAmJiBtZS5nZXRQcmVmZXJlbmNlcyggc2F2ZUtleSApICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLnJlbW92ZVByZWZlcmVuY2VzKCBzYXZlS2V5IClcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgbm90TmVlZFVuZG86IHRydWUsXHJcblx0ICAgICAgICAgICAgICAgIGlnbm9yZUNvbnRlbnRDaGFuZ2U6dHJ1ZVxyXG5cdCAgICAgICAgICAgIH0sXHJcblxyXG5cdCAgICAgICAgICAgICdnZXRsb2NhbGRhdGEnOntcclxuXHQgICAgICAgICAgICAgICAgZXhlY0NvbW1hbmQ6ZnVuY3Rpb24gKGNtZCwgbmFtZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNhdmVLZXkgPyBtZS5nZXRQcmVmZXJlbmNlcyggc2F2ZUtleSApIHx8ICcnIDogJyc7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIG5vdE5lZWRVbmRvOiB0cnVlLFxyXG5cdCAgICAgICAgICAgICAgICBpZ25vcmVDb250ZW50Q2hhbmdlOnRydWVcclxuXHQgICAgICAgICAgICB9LFxyXG5cclxuXHQgICAgICAgICAgICAnZHJhZnRzJzp7XHJcblx0ICAgICAgICAgICAgICAgIGV4ZWNDb21tYW5kOmZ1bmN0aW9uIChjbWQsIG5hbWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICggc2F2ZUtleSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5ib2R5LmlubmVySFRNTCA9IG1lLmdldFByZWZlcmVuY2VzKCBzYXZlS2V5ICkgfHwgJzxwPicrZG9tVXRpbHMuZmlsbEh0bWwrJzwvcD4nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmZvY3VzKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICBxdWVyeUNvbW1hbmRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNhdmVLZXkgPyAoIG1lLmdldFByZWZlcmVuY2VzKCBzYXZlS2V5ICkgPT09IG51bGwgPyAtMSA6IDAgKSA6IC0xO1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICBub3ROZWVkVW5kbzogdHJ1ZSxcclxuXHQgICAgICAgICAgICAgICAgaWdub3JlQ29udGVudENoYW5nZTp0cnVlXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdH0pO1xyXG5cclxuXHQvLyBwbHVnaW5zL2NoYXJ0cy5qc1xyXG5cdFVFLnBsdWdpbi5yZWdpc3RlcignY2hhcnRzJywgZnVuY3Rpb24gKCl7XHJcblxyXG5cdCAgICB2YXIgbWUgPSB0aGlzO1xyXG5cclxuXHQgICAgcmV0dXJuIHtcclxuXHQgICAgICAgIGJpbmRFdmVudHM6IHtcclxuXHQgICAgICAgICAgICAnY2hhcnRzZXJyb3InOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGNvbW1hbmRzOntcclxuXHQgICAgICAgICAgICAnY2hhcnRzJzoge1xyXG5cdCAgICAgICAgICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKCBjbWQsIGRhdGEgKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRhYmxlTm9kZSA9IGRvbVV0aWxzLmZpbmRQYXJlbnRCeVRhZ05hbWUodGhpcy5zZWxlY3Rpb24uZ2V0UmFuZ2UoKS5zdGFydENvbnRhaW5lciwgJ3RhYmxlJywgdHJ1ZSksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZmxhZ1RleHQgPSBbXSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb25maWcgPSB7fTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoICF0YWJsZU5vZGUgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICggIXZhbGlkRGF0YSggdGFibGVOb2RlICkgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCBcImNoYXJ0c2Vycm9yXCIgKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgY29uZmlnLnRpdGxlID0gZGF0YS50aXRsZSB8fCAnJztcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbmZpZy5zdWJUaXRsZSA9IGRhdGEuc3ViVGl0bGUgfHwgJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjb25maWcueFRpdGxlID0gZGF0YS54VGl0bGUgfHwgJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjb25maWcueVRpdGxlID0gZGF0YS55VGl0bGUgfHwgJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjb25maWcuc3VmZml4ID0gZGF0YS5zdWZmaXggfHwgJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjb25maWcudGlwID0gZGF0YS50aXAgfHwgJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+aVsOaNruWvuem9kOaWueW8j1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY29uZmlnLmRhdGFGb3JtYXQgPSBkYXRhLnRhYmxlRGF0YUZvcm1hdCB8fCAnJztcclxuXHQgICAgICAgICAgICAgICAgICAgIC8v5Zu+6KGo57G75Z6LXHJcblx0ICAgICAgICAgICAgICAgICAgICBjb25maWcuY2hhcnRUeXBlID0gZGF0YS5jaGFydFR5cGUgfHwgMDtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIga2V5IGluIGNvbmZpZyApIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAhY29uZmlnLmhhc093blByb3BlcnR5KCBrZXkgKSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmbGFnVGV4dC5wdXNoKCBrZXkrXCI6XCIrY29uZmlnWyBrZXkgXSApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB0YWJsZU5vZGUuc2V0QXR0cmlidXRlKCBcImRhdGEtY2hhcnRcIiwgZmxhZ1RleHQuam9pbiggXCI7XCIgKSApO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMuYWRkQ2xhc3MoIHRhYmxlTm9kZSwgXCJlZHVpLWNoYXJ0cy10YWJsZVwiICk7XHJcblxyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoIGNtZCwgbmFtZSApIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdGFibGVOb2RlID0gZG9tVXRpbHMuZmluZFBhcmVudEJ5VGFnTmFtZSh0aGlzLnNlbGVjdGlvbi5nZXRSYW5nZSgpLnN0YXJ0Q29udGFpbmVyLCAndGFibGUnLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0YWJsZU5vZGUgJiYgdmFsaWREYXRhKCB0YWJsZU5vZGUgKSA/IDAgOiAtMTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgaW5wdXRSdWxlOmZ1bmN0aW9uKHJvb3Qpe1xyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgndGFibGUnKSxmdW5jdGlvbiggdGFibGVOb2RlICl7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIHRhYmxlTm9kZS5nZXRBdHRyKFwiZGF0YS1jaGFydFwiKSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGFibGVOb2RlLnNldEF0dHIoXCJzdHlsZVwiKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9KVxyXG5cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBvdXRwdXRSdWxlOmZ1bmN0aW9uKHJvb3Qpe1xyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgndGFibGUnKSxmdW5jdGlvbiggdGFibGVOb2RlICl7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIHRhYmxlTm9kZS5nZXRBdHRyKFwiZGF0YS1jaGFydFwiKSAhPT0gdW5kZWZpbmVkICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGFibGVOb2RlLnNldEF0dHIoXCJzdHlsZVwiLCBcImRpc3BsYXk6IG5vbmU7XCIpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIH0pXHJcblxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBmdW5jdGlvbiB2YWxpZERhdGEgKCB0YWJsZSApIHtcclxuXHJcblx0ICAgICAgICB2YXIgZmlyc3RSb3dzID0gbnVsbCxcclxuXHQgICAgICAgICAgICBjZWxsQ291bnQgPSAwO1xyXG5cclxuXHQgICAgICAgIC8v6KGM5pWw5LiN5aSfXHJcblx0ICAgICAgICBpZiAoIHRhYmxlLnJvd3MubGVuZ3RoIDwgMiApIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgLy/liJfmlbDkuI3lpJ9cclxuXHQgICAgICAgIGlmICggdGFibGUucm93c1swXS5jZWxscy5sZW5ndGggPCAyICkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAvL+esrOS4gOihjOaJgOaciWNlbGzlv4XpobvmmK90aFxyXG5cdCAgICAgICAgZmlyc3RSb3dzID0gdGFibGUucm93c1sgMCBdLmNlbGxzO1xyXG5cdCAgICAgICAgY2VsbENvdW50ID0gZmlyc3RSb3dzLmxlbmd0aDtcclxuXHJcblx0ICAgICAgICBmb3IgKCB2YXIgaSA9IDAsIGNlbGw7IGNlbGwgPSBmaXJzdFJvd3NbIGkgXTsgaSsrICkge1xyXG5cclxuXHQgICAgICAgICAgICBpZiAoIGNlbGwudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAndGgnICkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICBmb3IgKCB2YXIgaSA9IDEsIHJvdzsgcm93ID0gdGFibGUucm93c1sgaSBdOyBpKysgKSB7XHJcblxyXG5cdCAgICAgICAgICAgIC8v5q+P6KGM5Y2V5YWD5qC85pWw5LiN5Yy56YWN77yMIOi/lOWbnmZhbHNlXHJcblx0ICAgICAgICAgICAgaWYgKCByb3cuY2VsbHMubGVuZ3RoICE9IGNlbGxDb3VudCApIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgLy/nrKzkuIDliJfkuI3mmK90aOS5n+i/lOWbnmZhbHNlXHJcblx0ICAgICAgICAgICAgaWYgKCByb3cuY2VsbHNbMF0udGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAndGgnICkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICBmb3IgKCB2YXIgaiA9IDEsIGNlbGw7IGNlbGwgPSByb3cuY2VsbHNbIGogXTsgaisrICkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdXRpbHMudHJpbSggKCBjZWxsLmlubmVyVGV4dCB8fCBjZWxsLnRleHRDb250ZW50IHx8ICcnICkgKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSggbmV3IFJlZ0V4cCggVUUuZG9tLmRvbVV0aWxzLmZpbGxDaGFyLCAnZycgKSwgJycgKS5yZXBsYWNlKCAvXlxccyt8XFxzKyQvZywgJycgKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIC8v5b+F6aG75piv5pWw5a2XXHJcblx0ICAgICAgICAgICAgICAgIGlmICggIS9eXFxkKlxcLj9cXGQrJC8udGVzdCggdmFsdWUgKSApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIHJldHVybiB0cnVlO1xyXG5cclxuXHQgICAgfVxyXG5cclxuXHR9KTtcclxuXHJcblx0Ly8gcGx1Z2lucy9zZWN0aW9uLmpzXHJcblx0LyoqXHJcblx0ICog55uu5b2V5aSn57qy5pSv5oyB5o+S5Lu2XHJcblx0ICogQGZpbGVcclxuXHQgKiBAc2luY2UgMS4zLjBcclxuXHQgKi9cclxuXHRVRS5wbHVnaW4ucmVnaXN0ZXIoJ3NlY3Rpb24nLCBmdW5jdGlvbiAoKXtcclxuXHQgICAgLyog55uu5b2V6IqC54K55a+56LGhICovXHJcblx0ICAgIGZ1bmN0aW9uIFNlY3Rpb24ob3B0aW9uKXtcclxuXHQgICAgICAgIHRoaXMudGFnID0gJyc7XHJcblx0ICAgICAgICB0aGlzLmxldmVsID0gLTEsXHJcblx0ICAgICAgICAgICAgdGhpcy5kb20gPSBudWxsO1xyXG5cdCAgICAgICAgdGhpcy5uZXh0U2VjdGlvbiA9IG51bGw7XHJcblx0ICAgICAgICB0aGlzLnByZXZpb3VzU2VjdGlvbiA9IG51bGw7XHJcblx0ICAgICAgICB0aGlzLnBhcmVudFNlY3Rpb24gPSBudWxsO1xyXG5cdCAgICAgICAgdGhpcy5zdGFydEFkZHJlc3MgPSBbXTtcclxuXHQgICAgICAgIHRoaXMuZW5kQWRkcmVzcyA9IFtdO1xyXG5cdCAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xyXG5cdCAgICB9XHJcblx0ICAgIGZ1bmN0aW9uIGdldFNlY3Rpb24ob3B0aW9uKSB7XHJcblx0ICAgICAgICB2YXIgc2VjdGlvbiA9IG5ldyBTZWN0aW9uKCk7XHJcblx0ICAgICAgICByZXR1cm4gdXRpbHMuZXh0ZW5kKHNlY3Rpb24sIG9wdGlvbik7XHJcblx0ICAgIH1cclxuXHQgICAgZnVuY3Rpb24gZ2V0Tm9kZUZyb21BZGRyZXNzKHN0YXJ0QWRkcmVzcywgcm9vdCkge1xyXG5cdCAgICAgICAgdmFyIGN1cnJlbnQgPSByb290O1xyXG5cdCAgICAgICAgZm9yKHZhciBpID0gMDtpIDwgc3RhcnRBZGRyZXNzLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgaWYoIWN1cnJlbnQuY2hpbGROb2RlcykgcmV0dXJuIG51bGw7XHJcblx0ICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuY2hpbGROb2Rlc1tzdGFydEFkZHJlc3NbaV1dO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHZhciBtZSA9IHRoaXM7XHJcblxyXG5cdCAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgYmluZE11bHRpRXZlbnRzOntcclxuXHQgICAgICAgICAgICB0eXBlOiAnYWZ0ZXJzZXRjb250ZW50IGFmdGVyc2NlbmNlcmVzdG9yZScsXHJcblx0ICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCd1cGRhdGVTZWN0aW9ucycpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBiaW5kRXZlbnRzOntcclxuXHQgICAgICAgICAgICAvKiDliJ3lp4vljJbjgIHmi5bmi73jgIHnspjotLTjgIHmiafooYxzZXRjb250ZW505LmL5ZCOICovXHJcblx0ICAgICAgICAgICAgJ3JlYWR5JzogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgndXBkYXRlU2VjdGlvbnMnKTtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMub24obWUuYm9keSwgJ2Ryb3AgcGFzdGUnLCBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCd1cGRhdGVTZWN0aW9ucycpO1xyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIC8qIOaJp+ihjHBhcmFncmFwaOWRveS7pOS5i+WQjiAqL1xyXG5cdCAgICAgICAgICAgICdhZnRlcmV4ZWNjb21tYW5kJzogZnVuY3Rpb24gKHR5cGUsIGNtZCkge1xyXG5cdCAgICAgICAgICAgICAgICBpZihjbWQgPT0gJ3BhcmFncmFwaCcpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgndXBkYXRlU2VjdGlvbnMnKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgLyog6YOo5YiG6ZSu55uY5pON5L2c77yM6Kem5Y+RdXBkYXRlU2VjdGlvbnPkuovku7YgKi9cclxuXHQgICAgICAgICAgICAna2V5dXAnOiBmdW5jdGlvbiAodHlwZSwgZSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2UgPSBtZS5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgaWYocmFuZ2UuY29sbGFwc2VkICE9IHRydWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgndXBkYXRlU2VjdGlvbnMnKTtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZS5rZXlDb2RlIHx8IGUud2hpY2g7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihrZXlDb2RlID09IDEzIHx8IGtleUNvZGUgPT0gOCB8fCBrZXlDb2RlID09IDQ2KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCd1cGRhdGVTZWN0aW9ucycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGNvbW1hbmRzOntcclxuXHQgICAgICAgICAgICAnZ2V0c2VjdGlvbnMnOiB7XHJcblx0ICAgICAgICAgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoY21kLCBsZXZlbHMpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBsZXZlbEZuID0gbGV2ZWxzIHx8IFsnaDEnLCAnaDInLCAnaDMnLCAnaDQnLCAnaDUnLCAnaDYnXTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxldmVsRm4ubGVuZ3RoOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxldmVsRm5baV0gPT0gJ3N0cmluZycpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWxGbltpXSA9IGZ1bmN0aW9uKGZuKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihub2RlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS50YWdOYW1lID09IGZuLnRvVXBwZXJDYXNlKClcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0obGV2ZWxGbltpXSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGV2ZWxGbltpXSAhPSAnZnVuY3Rpb24nKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsRm5baV0gPSBmdW5jdGlvbiAobm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBnZXRTZWN0aW9uTGV2ZWwobm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGV2ZWxGbi5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGV2ZWxGbltpXShub2RlKSkgcmV0dXJuIGk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIERpcmVjdG9yeSA9IGdldFNlY3Rpb24oeydsZXZlbCc6LTEsICd0aXRsZSc6J3Jvb3QnfSksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcHJldmlvdXMgPSBEaXJlY3Rvcnk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdHJhdmVyc2FsKG5vZGUsIERpcmVjdG9yeSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZXZlbCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wU2VjdGlvbiA9IG51bGwsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuID0gbm9kZS5jaGlsZE5vZGVzO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbCA9IGdldFNlY3Rpb25MZXZlbChjaGlsZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZXZlbCA+PSAwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRkcmVzcyA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpLnNlbGVjdE5vZGUoY2hpbGQpLmNyZWF0ZUFkZHJlc3ModHJ1ZSkuc3RhcnRBZGRyZXNzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBnZXRTZWN0aW9uKHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RhZyc6IGNoaWxkLnRhZ05hbWUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6IGNoaWxkLmlubmVyVGV4dCB8fCBjaGlsZC50ZXh0Q29udGVudCB8fCAnJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2xldmVsJzogbGV2ZWwsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkb20nOiBjaGlsZCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXJ0QWRkcmVzcyc6IHV0aWxzLmNsb25lKGFkZHJlc3MsIFtdKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VuZEFkZHJlc3MnOiB1dGlscy5jbG9uZShhZGRyZXNzLCBbXSksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaGlsZHJlbic6IFtdXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2aW91cy5uZXh0U2VjdGlvbiA9IGN1cnJlbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LnByZXZpb3VzU2VjdGlvbiA9IHByZXZpb3VzO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50ID0gcHJldmlvdXM7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZShsZXZlbCA8PSBwYXJlbnQubGV2ZWwpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRTZWN0aW9uO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudC5wYXJlbnRTZWN0aW9uID0gcGFyZW50O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2goY3VycmVudCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBTZWN0aW9uID0gcHJldmlvdXMgPSBjdXJyZW50O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQubm9kZVR5cGUgPT09IDEgJiYgdHJhdmVyc2FsKGNoaWxkLCBEaXJlY3RvcnkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wU2VjdGlvbiAmJiB0bXBTZWN0aW9uLmVuZEFkZHJlc3NbdG1wU2VjdGlvbi5lbmRBZGRyZXNzLmxlbmd0aCAtIDFdICsrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgdHJhdmVyc2FsKG1lLmJvZHksIERpcmVjdG9yeSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGlyZWN0b3J5O1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICBub3ROZWVkVW5kbzogdHJ1ZVxyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgJ21vdmVzZWN0aW9uJzoge1xyXG5cdCAgICAgICAgICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKGNtZCwgc291cmNlU2VjdGlvbiwgdGFyZ2V0U2VjdGlvbiwgaXNBZnRlcikge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QWRkcmVzcyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoIXNvdXJjZVNlY3Rpb24gfHwgIXRhcmdldFNlY3Rpb24gfHwgdGFyZ2V0U2VjdGlvbi5sZXZlbCA9PSAtMSkgcmV0dXJuO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHRhcmdldEFkZHJlc3MgPSBpc0FmdGVyID8gdGFyZ2V0U2VjdGlvbi5lbmRBZGRyZXNzOnRhcmdldFNlY3Rpb24uc3RhcnRBZGRyZXNzO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gZ2V0Tm9kZUZyb21BZGRyZXNzKHRhcmdldEFkZHJlc3MsIG1lLmJvZHkpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIC8qIOWIpOaWreebruagh+WcsOWdgOaYr+WQpuiiq+a6kOeroOiKguWMheWQqyAqL1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoIXRhcmdldEFkZHJlc3MgfHwgIXRhcmdldCB8fCBpc0NvbnRhaW5zQWRkcmVzcyhzb3VyY2VTZWN0aW9uLnN0YXJ0QWRkcmVzcywgc291cmNlU2VjdGlvbi5lbmRBZGRyZXNzLCB0YXJnZXRBZGRyZXNzKSkgcmV0dXJuO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydE5vZGUgPSBnZXROb2RlRnJvbUFkZHJlc3Moc291cmNlU2VjdGlvbi5zdGFydEFkZHJlc3MsIG1lLmJvZHkpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuZE5vZGUgPSBnZXROb2RlRnJvbUFkZHJlc3Moc291cmNlU2VjdGlvbi5lbmRBZGRyZXNzLCBtZS5ib2R5KSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKGlzQWZ0ZXIpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gZW5kTm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIGN1cnJlbnQgJiYgIShkb21VdGlscy5nZXRQb3NpdGlvbiggc3RhcnROb2RlLCBjdXJyZW50ICkgJiBkb21VdGlscy5QT1NJVElPTl9GT0xMT1dJTkcpICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0Tm9kZSA9IGN1cnJlbnQucHJldmlvdXNTaWJsaW5nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5pbnNlcnRBZnRlcih0YXJnZXQsIGN1cnJlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50ID09IHN0YXJ0Tm9kZSkgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBuZXh0Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBzdGFydE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCBjdXJyZW50ICYmICEoZG9tVXRpbHMuZ2V0UG9zaXRpb24oIGN1cnJlbnQsIGVuZE5vZGUgKSAmIGRvbVV0aWxzLlBPU0lUSU9OX0ZPTExPV0lORykgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gY3VycmVudC5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGN1cnJlbnQsIHRhcmdldCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnQgPT0gZW5kTm9kZSkgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBuZXh0Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCd1cGRhdGVTZWN0aW9ucycpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIC8qIOiOt+WPluWcsOWdgOeahOWMheWQq+WFs+ezuyAqL1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gaXNDb250YWluc0FkZHJlc3Moc3RhcnRBZGRyZXNzLCBlbmRBZGRyZXNzLCBhZGRyZXNzVGFyZ2V0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNBZnRlclN0YXJ0QWRkcmVzcyA9IGZhbHNlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0JlZm9yZUVuZEFkZHJlc3MgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgPSAwOyBpPCBzdGFydEFkZHJlc3MubGVuZ3RoOyBpKyspe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpID49IGFkZHJlc3NUYXJnZXQubGVuZ3RoKSBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYWRkcmVzc1RhcmdldFtpXSA+IHN0YXJ0QWRkcmVzc1tpXSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNBZnRlclN0YXJ0QWRkcmVzcyA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKGFkZHJlc3NUYXJnZXRbaV0gPCBzdGFydEFkZHJlc3NbaV0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaSA9IDA7IGk8IGVuZEFkZHJlc3MubGVuZ3RoOyBpKyspe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpID49IGFkZHJlc3NUYXJnZXQubGVuZ3RoKSBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoYWRkcmVzc1RhcmdldFtpXSA8IHN0YXJ0QWRkcmVzc1tpXSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNCZWZvcmVFbmRBZGRyZXNzID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoYWRkcmVzc1RhcmdldFtpXSA+IHN0YXJ0QWRkcmVzc1tpXSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzQWZ0ZXJTdGFydEFkZHJlc3MgJiYgaXNCZWZvcmVFbmRBZGRyZXNzO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAnZGVsZXRlc2VjdGlvbic6IHtcclxuXHQgICAgICAgICAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjbWQsIHNlY3Rpb24sIGtlZXBDaGlsZHJlbikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZighc2VjdGlvbikgcmV0dXJuO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdldE5vZGVGcm9tQWRkcmVzcyhzdGFydEFkZHJlc3MpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudCA9IG1lLmJvZHk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMDtpIDwgc3RhcnRBZGRyZXNzLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCFjdXJyZW50LmNoaWxkTm9kZXMpIHJldHVybiBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5jaGlsZE5vZGVzW3N0YXJ0QWRkcmVzc1tpXV07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydE5vZGUgPSBnZXROb2RlRnJvbUFkZHJlc3Moc2VjdGlvbi5zdGFydEFkZHJlc3MpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVuZE5vZGUgPSBnZXROb2RlRnJvbUFkZHJlc3Moc2VjdGlvbi5lbmRBZGRyZXNzKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gc3RhcnROb2RlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKCFrZWVwQ2hpbGRyZW4pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIGN1cnJlbnQgJiYgZG9tVXRpbHMuaW5Eb2MoZW5kTm9kZSwgbWUuZG9jdW1lbnQpICYmICEoZG9tVXRpbHMuZ2V0UG9zaXRpb24oIGN1cnJlbnQsIGVuZE5vZGUgKSAmIGRvbVV0aWxzLlBPU0lUSU9OX0ZPTExPV0lORykgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHROb2RlID0gY3VycmVudC5uZXh0U2libGluZztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGN1cnJlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50ID0gbmV4dE5vZGU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY3VycmVudCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZmlyZUV2ZW50KCd1cGRhdGVTZWN0aW9ucycpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAnc2VsZWN0c2VjdGlvbic6IHtcclxuXHQgICAgICAgICAgICAgICAgZXhlY0NvbW1hbmQ6IGZ1bmN0aW9uIChjbWQsIHNlY3Rpb24pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmKCFzZWN0aW9uICYmICFzZWN0aW9uLmRvbSkgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IG1lLnNlbGVjdGlvbi5nZXRSYW5nZSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MgPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdGFydEFkZHJlc3MnOnV0aWxzLmNsb25lKHNlY3Rpb24uc3RhcnRBZGRyZXNzLCBbXSksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbmRBZGRyZXNzJzp1dGlscy5jbG9uZShzZWN0aW9uLmVuZEFkZHJlc3MsIFtdKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgICAgICAgICBhZGRyZXNzLmVuZEFkZHJlc3NbYWRkcmVzcy5lbmRBZGRyZXNzLmxlbmd0aCAtIDFdKys7XHJcblx0ICAgICAgICAgICAgICAgICAgICByYW5nZS5tb3ZlVG9BZGRyZXNzKGFkZHJlc3MpLnNlbGVjdCgpLnNjcm9sbFRvVmlldygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIG5vdE5lZWRVbmRvOiB0cnVlXHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAnc2Nyb2xsdG9zZWN0aW9uJzoge1xyXG5cdCAgICAgICAgICAgICAgICBleGVjQ29tbWFuZDogZnVuY3Rpb24gKGNtZCwgc2VjdGlvbikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoIXNlY3Rpb24gJiYgIXNlY3Rpb24uZG9tKSByZXR1cm4gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlID0gbWUuc2VsZWN0aW9uLmdldFJhbmdlKCksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzcyA9IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0YXJ0QWRkcmVzcyc6c2VjdGlvbi5zdGFydEFkZHJlc3MsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbmRBZGRyZXNzJzpzZWN0aW9uLmVuZEFkZHJlc3NcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYWRkcmVzcy5lbmRBZGRyZXNzW2FkZHJlc3MuZW5kQWRkcmVzcy5sZW5ndGggLSAxXSsrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmFuZ2UubW92ZVRvQWRkcmVzcyhhZGRyZXNzKS5zY3JvbGxUb1ZpZXcoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICBub3ROZWVkVW5kbzogdHJ1ZVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfVxyXG5cdH0pO1xyXG5cclxuXHQvLyBwbHVnaW5zL3NpbXBsZXVwbG9hZC5qc1xyXG5cdC8qKlxyXG5cdCAqIEBkZXNjcmlwdGlvblxyXG5cdCAqIOeugOWNleS4iuS8oDrngrnlh7vmjInpkq4s55u05o6l6YCJ5oup5paH5Lu25LiK5LygXHJcblx0ICogQGF1dGhvciBKaW5xblxyXG5cdCAqIEBkYXRlIDIwMTQtMDMtMzFcclxuXHQgKi9cclxuXHRVRS5wbHVnaW4ucmVnaXN0ZXIoJ3NpbXBsZXVwbG9hZCcsIGZ1bmN0aW9uICgpe1xyXG5cdCAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgaXNMb2FkZWQgPSBmYWxzZSxcclxuXHQgICAgICAgIGNvbnRhaW5lckJ0bjtcclxuXHJcblx0ICAgIGZ1bmN0aW9uIGluaXRVcGxvYWRCdG4oKXtcclxuXHQgICAgICAgIHZhciB3ID0gY29udGFpbmVyQnRuLm9mZnNldFdpZHRoIHx8IDIwLFxyXG5cdCAgICAgICAgICAgIGggPSBjb250YWluZXJCdG4ub2Zmc2V0SGVpZ2h0IHx8IDIwLFxyXG5cdCAgICAgICAgICAgIGJ0bklmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpLFxyXG5cdCAgICAgICAgICAgIGJ0blN0eWxlID0gJ2Rpc3BsYXk6YmxvY2s7d2lkdGg6JyArIHcgKyAncHg7aGVpZ2h0OicgKyBoICsgJ3B4O292ZXJmbG93OmhpZGRlbjtib3JkZXI6MDttYXJnaW46MDtwYWRkaW5nOjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO2ZpbHRlcjphbHBoYShvcGFjaXR5PTApOy1tb3otb3BhY2l0eTowOy1raHRtbC1vcGFjaXR5OiAwO29wYWNpdHk6IDA7Y3Vyc29yOnBvaW50ZXI7JztcclxuXHJcblx0ICAgICAgICBkb21VdGlscy5vbihidG5JZnJhbWUsICdsb2FkJywgZnVuY3Rpb24oKXtcclxuXHJcblx0ICAgICAgICAgICAgdmFyIHRpbWVzdHJhcCA9ICgrbmV3IERhdGUoKSkudG9TdHJpbmcoMzYpLFxyXG5cdCAgICAgICAgICAgICAgICB3cmFwcGVyLFxyXG5cdCAgICAgICAgICAgICAgICBidG5JZnJhbWVEb2MsXHJcblx0ICAgICAgICAgICAgICAgIGJ0bklmcmFtZUJvZHk7XHJcblxyXG5cdCAgICAgICAgICAgIGJ0bklmcmFtZURvYyA9IChidG5JZnJhbWUuY29udGVudERvY3VtZW50IHx8IGJ0bklmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50KTtcclxuXHQgICAgICAgICAgICBidG5JZnJhbWVCb2R5ID0gYnRuSWZyYW1lRG9jLmJvZHk7XHJcblx0ICAgICAgICAgICAgd3JhcHBlciA9IGJ0bklmcmFtZURvYy5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHJcblx0ICAgICAgICAgICAgd3JhcHBlci5pbm5lckhUTUwgPSAnPGZvcm0gaWQ9XCJlZHVpX2Zvcm1fJyArIHRpbWVzdHJhcCArICdcIiB0YXJnZXQ9XCJlZHVpX2lmcmFtZV8nICsgdGltZXN0cmFwICsgJ1wiIG1ldGhvZD1cIlBPU1RcIiBlbmN0eXBlPVwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiIGFjdGlvbj1cIicgKyBtZS5nZXRPcHQoJ3NlcnZlclVybCcpICsgJ1wiICcgK1xyXG5cdCAgICAgICAgICAgICdzdHlsZT1cIicgKyBidG5TdHlsZSArICdcIj4nICtcclxuXHQgICAgICAgICAgICAnPGlucHV0IGlkPVwiZWR1aV9pbnB1dF8nICsgdGltZXN0cmFwICsgJ1wiIHR5cGU9XCJmaWxlXCIgYWNjZXB0PVwiaW1hZ2UvKlwiIG5hbWU9XCInICsgbWUub3B0aW9ucy5pbWFnZUZpZWxkTmFtZSArICdcIiAnICtcclxuXHQgICAgICAgICAgICAnc3R5bGU9XCInICsgYnRuU3R5bGUgKyAnXCI+JyArXHJcblx0ICAgICAgICAgICAgJzwvZm9ybT4nICtcclxuXHQgICAgICAgICAgICAnPGlmcmFtZSBpZD1cImVkdWlfaWZyYW1lXycgKyB0aW1lc3RyYXAgKyAnXCIgbmFtZT1cImVkdWlfaWZyYW1lXycgKyB0aW1lc3RyYXAgKyAnXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmU7d2lkdGg6MDtoZWlnaHQ6MDtib3JkZXI6MDttYXJnaW46MDtwYWRkaW5nOjA7cG9zaXRpb246YWJzb2x1dGU7XCI+PC9pZnJhbWU+JztcclxuXHJcblx0ICAgICAgICAgICAgd3JhcHBlci5jbGFzc05hbWUgPSAnZWR1aS0nICsgbWUub3B0aW9ucy50aGVtZTtcclxuXHQgICAgICAgICAgICB3cmFwcGVyLmlkID0gbWUudWkuaWQgKyAnX2lmcmFtZXVwbG9hZCc7XHJcblx0ICAgICAgICAgICAgYnRuSWZyYW1lQm9keS5zdHlsZS5jc3NUZXh0ID0gYnRuU3R5bGU7XHJcblx0ICAgICAgICAgICAgYnRuSWZyYW1lQm9keS5zdHlsZS53aWR0aCA9IHcgKyAncHgnO1xyXG5cdCAgICAgICAgICAgIGJ0bklmcmFtZUJvZHkuc3R5bGUuaGVpZ2h0ID0gaCArICdweCc7XHJcblx0ICAgICAgICAgICAgYnRuSWZyYW1lQm9keS5hcHBlbmRDaGlsZCh3cmFwcGVyKTtcclxuXHJcblx0ICAgICAgICAgICAgaWYgKGJ0bklmcmFtZUJvZHkucGFyZW50Tm9kZSkge1xyXG5cdCAgICAgICAgICAgICAgICBidG5JZnJhbWVCb2R5LnBhcmVudE5vZGUuc3R5bGUud2lkdGggPSB3ICsgJ3B4JztcclxuXHQgICAgICAgICAgICAgICAgYnRuSWZyYW1lQm9keS5wYXJlbnROb2RlLnN0eWxlLmhlaWdodCA9IHcgKyAncHgnO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgdmFyIGZvcm0gPSBidG5JZnJhbWVEb2MuZ2V0RWxlbWVudEJ5SWQoJ2VkdWlfZm9ybV8nICsgdGltZXN0cmFwKTtcclxuXHQgICAgICAgICAgICB2YXIgaW5wdXQgPSBidG5JZnJhbWVEb2MuZ2V0RWxlbWVudEJ5SWQoJ2VkdWlfaW5wdXRfJyArIHRpbWVzdHJhcCk7XHJcblx0ICAgICAgICAgICAgdmFyIGlmcmFtZSA9IGJ0bklmcmFtZURvYy5nZXRFbGVtZW50QnlJZCgnZWR1aV9pZnJhbWVfJyArIHRpbWVzdHJhcCk7XHJcblxyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLm9uKGlucHV0LCAnY2hhbmdlJywgZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgaWYoIWlucHV0LnZhbHVlKSByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgIHZhciBsb2FkaW5nSWQgPSAnbG9hZGluZ18nICsgKCtuZXcgRGF0ZSgpKS50b1N0cmluZygzNik7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB1dGlscy5zZXJpYWxpemVQYXJhbShtZS5xdWVyeUNvbW1hbmRWYWx1ZSgnc2VydmVycGFyYW0nKSkgfHwgJyc7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB2YXIgaW1hZ2VBY3Rpb25VcmwgPSBtZS5nZXRBY3Rpb25VcmwobWUuZ2V0T3B0KCdpbWFnZUFjdGlvbk5hbWUnKSk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBhbGxvd0ZpbGVzID0gbWUuZ2V0T3B0KCdpbWFnZUFsbG93RmlsZXMnKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIG1lLmZvY3VzKCk7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmV4ZWNDb21tYW5kKCdpbnNlcnRodG1sJywgJzxpbWcgY2xhc3M9XCJsb2FkaW5nY2xhc3NcIiBpZD1cIicgKyBsb2FkaW5nSWQgKyAnXCIgc3JjPVwiJyArIG1lLm9wdGlvbnMudGhlbWVQYXRoICsgbWUub3B0aW9ucy50aGVtZSArJy9pbWFnZXMvc3BhY2VyLmdpZlwiIHRpdGxlPVwiJyArIChtZS5nZXRMYW5nKCdzaW1wbGV1cGxvYWQubG9hZGluZycpIHx8ICcnKSArICdcIiA+Jyk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFjaygpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdHJ5e1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaW5rLCBqc29uLCBsb2FkZXIsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgPSAoaWZyYW1lLmNvbnRlbnREb2N1bWVudCB8fCBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudCkuYm9keSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYm9keS5pbm5lclRleHQgfHwgYm9keS50ZXh0Q29udGVudCB8fCAnJztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBqc29uID0gKG5ldyBGdW5jdGlvbihcInJldHVybiBcIiArIHJlc3VsdCkpKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGluayA9IG1lLm9wdGlvbnMuaW1hZ2VVcmxQcmVmaXggKyBqc29uLnVybDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihqc29uLnN0YXRlID09ICdTVUNDRVNTJyAmJiBqc29uLnVybCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXIgPSBtZS5kb2N1bWVudC5nZXRFbGVtZW50QnlJZChsb2FkaW5nSWQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXIuc2V0QXR0cmlidXRlKCdzcmMnLCBsaW5rKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVyLnNldEF0dHJpYnV0ZSgnX3NyYycsIGxpbmspO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXIuc2V0QXR0cmlidXRlKCd0aXRsZScsIGpzb24udGl0bGUgfHwgJycpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXIuc2V0QXR0cmlidXRlKCdhbHQnLCBqc29uLm9yaWdpbmFsIHx8ICcnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVyLnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlQ2xhc3Nlcyhsb2FkZXIsICdsb2FkaW5nY2xhc3MnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93RXJyb3JMb2FkZXIgJiYgc2hvd0Vycm9yTG9hZGVyKGpzb24uc3RhdGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1jYXRjaChlcil7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0Vycm9yTG9hZGVyICYmIHNob3dFcnJvckxvYWRlcihtZS5nZXRMYW5nKCdzaW1wbGV1cGxvYWQubG9hZEVycm9yJykpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9ybS5yZXNldCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMudW4oaWZyYW1lLCAnbG9hZCcsIGNhbGxiYWNrKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBmdW5jdGlvbiBzaG93RXJyb3JMb2FkZXIodGl0bGUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYobG9hZGluZ0lkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvYWRlciA9IG1lLmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGxvYWRpbmdJZCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGVyICYmIGRvbVV0aWxzLnJlbW92ZShsb2FkZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnc2hvd21lc3NhZ2UnLCB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZCc6IGxvYWRpbmdJZCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiB0aXRsZSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnZXJyb3InLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGltZW91dCc6IDQwMDBcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgLyog5Yik5pat5ZCO56uv6YWN572u5piv5ZCm5rKh5pyJ5Yqg6L295oiQ5YqfICovXHJcblx0ICAgICAgICAgICAgICAgIGlmICghbWUuZ2V0T3B0KCdpbWFnZUFjdGlvbk5hbWUnKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZXJyb3JIYW5kbGVyKG1lLmdldExhbmcoJ2F1dG91cGxvYWQuZXJyb3JMb2FkQ29uZmlnJykpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIC8vIOWIpOaWreaWh+S7tuagvOW8j+aYr+WQpumUmeivr1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgZmlsZW5hbWUgPSBpbnB1dC52YWx1ZSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGZpbGVleHQgPSBmaWxlbmFtZSA/IGZpbGVuYW1lLnN1YnN0cihmaWxlbmFtZS5sYXN0SW5kZXhPZignLicpKTonJztcclxuXHQgICAgICAgICAgICAgICAgaWYgKCFmaWxlZXh0IHx8IChhbGxvd0ZpbGVzICYmIChhbGxvd0ZpbGVzLmpvaW4oJycpICsgJy4nKS5pbmRleE9mKGZpbGVleHQudG9Mb3dlckNhc2UoKSArICcuJykgPT0gLTEpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzaG93RXJyb3JMb2FkZXIobWUuZ2V0TGFuZygnc2ltcGxldXBsb2FkLmV4Y2VlZFR5cGVFcnJvcicpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMub24oaWZyYW1lLCAnbG9hZCcsIGNhbGxiYWNrKTtcclxuXHQgICAgICAgICAgICAgICAgZm9ybS5hY3Rpb24gPSB1dGlscy5mb3JtYXRVcmwoaW1hZ2VBY3Rpb25VcmwgKyAoaW1hZ2VBY3Rpb25VcmwuaW5kZXhPZignPycpID09IC0xID8gJz8nOicmJykgKyBwYXJhbXMpO1xyXG5cdCAgICAgICAgICAgICAgICBmb3JtLnN1Ym1pdCgpO1xyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgc3RhdGVUaW1lcjtcclxuXHQgICAgICAgICAgICBtZS5hZGRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoc3RhdGVUaW1lcik7XHJcblx0ICAgICAgICAgICAgICAgIHN0YXRlVGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gbWUucXVlcnlDb21tYW5kU3RhdGUoJ3NpbXBsZXVwbG9hZCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlID09IC0xKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuZGlzYWJsZWQgPSAnZGlzYWJsZWQnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dC5kaXNhYmxlZCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9LCA0MDApO1xyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIGlzTG9hZGVkID0gdHJ1ZTtcclxuXHQgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgIGJ0bklmcmFtZS5zdHlsZS5jc3NUZXh0ID0gYnRuU3R5bGU7XHJcblx0ICAgICAgICBjb250YWluZXJCdG4uYXBwZW5kQ2hpbGQoYnRuSWZyYW1lKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgcmV0dXJuIHtcclxuXHQgICAgICAgIGJpbmRFdmVudHM6e1xyXG5cdCAgICAgICAgICAgICdyZWFkeSc6IGZ1bmN0aW9uKCkge1xyXG5cdCAgICAgICAgICAgICAgICAvL+iuvue9rmxvYWRpbmfnmoTmoLflvI9cclxuXHQgICAgICAgICAgICAgICAgdXRpbHMuY3NzUnVsZSgnbG9hZGluZycsXHJcblx0ICAgICAgICAgICAgICAgICAgICAnLmxvYWRpbmdjbGFzc3tkaXNwbGF5OmlubGluZS1ibG9jaztjdXJzb3I6ZGVmYXVsdDtiYWNrZ3JvdW5kOiB1cmwoXFwnJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgKyB0aGlzLm9wdGlvbnMudGhlbWVQYXRoXHJcblx0ICAgICAgICAgICAgICAgICAgICArIHRoaXMub3B0aW9ucy50aGVtZSArJy9pbWFnZXMvbG9hZGluZy5naWZcXCcpIG5vLXJlcGVhdCBjZW50ZXIgY2VudGVyIHRyYW5zcGFyZW50O2JvcmRlcjoxcHggc29saWQgI2NjY2NjYzttYXJnaW4tcmlnaHQ6MXB4O2hlaWdodDogMjJweDt3aWR0aDogMjJweDt9XFxuJyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAnLmxvYWRlcnJvcmNsYXNze2Rpc3BsYXk6aW5saW5lLWJsb2NrO2N1cnNvcjpkZWZhdWx0O2JhY2tncm91bmQ6IHVybChcXCcnXHJcblx0ICAgICAgICAgICAgICAgICAgICArIHRoaXMub3B0aW9ucy50aGVtZVBhdGhcclxuXHQgICAgICAgICAgICAgICAgICAgICsgdGhpcy5vcHRpb25zLnRoZW1lICsnL2ltYWdlcy9sb2FkZXJyb3IucG5nXFwnKSBuby1yZXBlYXQgY2VudGVyIGNlbnRlciB0cmFuc3BhcmVudDtib3JkZXI6MXB4IHNvbGlkICNjY2NjY2M7bWFyZ2luLXJpZ2h0OjFweDtoZWlnaHQ6IDIycHg7d2lkdGg6IDIycHg7JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAnfScsXHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50KTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIC8qIOWIneWni+WMlueugOWNleS4iuS8oOaMiemSriAqL1xyXG5cdCAgICAgICAgICAgICdzaW1wbGV1cGxvYWRidG5yZWFkeSc6IGZ1bmN0aW9uKHR5cGUsIGNvbnRhaW5lcikge1xyXG5cdCAgICAgICAgICAgICAgICBjb250YWluZXJCdG4gPSBjb250YWluZXI7XHJcblx0ICAgICAgICAgICAgICAgIG1lLmFmdGVyQ29uZmlnUmVhZHkoaW5pdFVwbG9hZEJ0bik7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIG91dHB1dFJ1bGU6IGZ1bmN0aW9uKHJvb3Qpe1xyXG5cdCAgICAgICAgICAgIHV0aWxzLmVhY2gocm9vdC5nZXROb2Rlc0J5VGFnTmFtZSgnaW1nJyksZnVuY3Rpb24obil7XHJcblx0ICAgICAgICAgICAgICAgIGlmICgvXFxiKGxvYWRlcnJvcmNsYXNzKXwoYmxvYWRlcnJvcmNsYXNzKVxcYi8udGVzdChuLmdldEF0dHIoJ2NsYXNzJykpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBuLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobik7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBjb21tYW5kczoge1xyXG5cdCAgICAgICAgICAgICdzaW1wbGV1cGxvYWQnOiB7XHJcblx0ICAgICAgICAgICAgICAgIHF1ZXJ5Q29tbWFuZFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNMb2FkZWQgPyAwOi0xO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0fSk7XHJcblxyXG5cdC8vIHBsdWdpbnMvc2VydmVycGFyYW0uanNcclxuXHQvKipcclxuXHQgKiDmnI3liqHlmajmj5DkuqTnmoTpop3lpJblj4LmlbDliJfooajorr7nva7mj5Lku7ZcclxuXHQgKiBAZmlsZVxyXG5cdCAqIEBzaW5jZSAxLjIuNi4xXHJcblx0ICovXHJcblx0VUUucGx1Z2luLnJlZ2lzdGVyKCdzZXJ2ZXJwYXJhbScsIGZ1bmN0aW9uICgpe1xyXG5cclxuXHQgICAgdmFyIG1lID0gdGhpcyxcclxuXHQgICAgICAgIHNlcnZlclBhcmFtID0ge307XHJcblxyXG5cdCAgICByZXR1cm4ge1xyXG5cdCAgICAgICAgY29tbWFuZHM6e1xyXG5cdCAgICAgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICAgICAqIOS/ruaUueacjeWKoeWZqOaPkOS6pOeahOmineWkluWPguaVsOWIl+ihqCzmuIXpmaTmiYDmnInpoblcclxuXHQgICAgICAgICAgICAgKiBAY29tbWFuZCBzZXJ2ZXJwYXJhbVxyXG5cdCAgICAgICAgICAgICAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgICAgICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCdzZXJ2ZXJwYXJhbScpO1xyXG5cdCAgICAgICAgICAgICAqIGVkaXRvci5xdWVyeUNvbW1hbmRWYWx1ZSgnc2VydmVycGFyYW0nKTsgLy/ov5Tlm57nqbpcclxuXHQgICAgICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAgICAgKi9cclxuXHQgICAgICAgICAgICAvKipcclxuXHQgICAgICAgICAgICAgKiDkv67mlLnmnI3liqHlmajmj5DkuqTnmoTpop3lpJblj4LmlbDliJfooags5Yig6Zmk5oyH5a6a6aG5XHJcblx0ICAgICAgICAgICAgICogQGNvbW1hbmQgc2VydmVycGFyYW1cclxuXHQgICAgICAgICAgICAgKiBAbWV0aG9kIGV4ZWNDb21tYW5kXHJcblx0ICAgICAgICAgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gY21kIOWRveS7pOWtl+espuS4slxyXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGtleSDopoHmuIXpmaTnmoTlsZ7mgKdcclxuXHQgICAgICAgICAgICAgKiBAZXhhbXBsZVxyXG5cdCAgICAgICAgICAgICAqIGBgYGphdmFzY3JpcHRcclxuXHQgICAgICAgICAgICAgKiBlZGl0b3IuZXhlY0NvbW1hbmQoJ3NlcnZlcnBhcmFtJywgJ25hbWUnKTsgLy/liKDpmaTlsZ7mgKduYW1lXHJcblx0ICAgICAgICAgICAgICogYGBgXHJcblx0ICAgICAgICAgICAgICovXHJcblx0ICAgICAgICAgICAgLyoqXHJcblx0ICAgICAgICAgICAgICog5L+u5pS55pyN5Yqh5Zmo5o+Q5Lqk55qE6aKd5aSW5Y+C5pWw5YiX6KGoLOS9v+eUqOmUruWAvOa3u+WKoOmhuVxyXG5cdCAgICAgICAgICAgICAqIEBjb21tYW5kIHNlcnZlcnBhcmFtXHJcblx0ICAgICAgICAgICAgICogQG1ldGhvZCBleGVjQ29tbWFuZFxyXG5cdCAgICAgICAgICAgICAqIEBwYXJhbSB7IFN0cmluZyB9IGNtZCDlkb3ku6TlrZfnrKbkuLJcclxuXHQgICAgICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBrZXkg6KaB5re75Yqg55qE5bGe5oCnXHJcblx0ICAgICAgICAgICAgICogQHBhcmFtIHsgU3RyaW5nIH0gdmFsdWUg6KaB5re75Yqg5bGe5oCn55qE5YC8XHJcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCdzZXJ2ZXJwYXJhbScsICduYW1lJywgJ2hlbGxvJyk7XHJcblx0ICAgICAgICAgICAgICogZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCdzZXJ2ZXJwYXJhbScpOyAvL+i/lOWbnuWvueixoSB7J25hbWUnOiAnaGVsbG8nfVxyXG5cdCAgICAgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICAgICAqL1xyXG5cdCAgICAgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICAgICAqIOS/ruaUueacjeWKoeWZqOaPkOS6pOeahOmineWkluWPguaVsOWIl+ihqCzkvKDlhaXplK7lgLzlr7nlr7nosaHmt7vliqDlpJrpoblcclxuXHQgICAgICAgICAgICAgKiBAY29tbWFuZCBzZXJ2ZXJwYXJhbVxyXG5cdCAgICAgICAgICAgICAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgICAgICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAgICAgICAgICogQHBhcmFtIHsgT2JqZWN0IH0ga2V5IOS8oOWFpeeahOmUruWAvOWvueWvueixoVxyXG5cdCAgICAgICAgICAgICAqIEBleGFtcGxlXHJcblx0ICAgICAgICAgICAgICogYGBgamF2YXNjcmlwdFxyXG5cdCAgICAgICAgICAgICAqIGVkaXRvci5leGVjQ29tbWFuZCgnc2VydmVycGFyYW0nLCB7J25hbWUnOiAnaGVsbG8nfSk7XHJcblx0ICAgICAgICAgICAgICogZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCdzZXJ2ZXJwYXJhbScpOyAvL+i/lOWbnuWvueixoSB7J25hbWUnOiAnaGVsbG8nfVxyXG5cdCAgICAgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICAgICAqL1xyXG5cdCAgICAgICAgICAgIC8qKlxyXG5cdCAgICAgICAgICAgICAqIOS/ruaUueacjeWKoeWZqOaPkOS6pOeahOmineWkluWPguaVsOWIl+ihqCzkvb/nlKjoh6rlrprkuYnlh73mlbDmt7vliqDlpJrpoblcclxuXHQgICAgICAgICAgICAgKiBAY29tbWFuZCBzZXJ2ZXJwYXJhbVxyXG5cdCAgICAgICAgICAgICAqIEBtZXRob2QgZXhlY0NvbW1hbmRcclxuXHQgICAgICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAgICAgICAgICogQHBhcmFtIHsgRnVuY3Rpb24gfSBrZXkg6Ieq5a6a5LmJ6I635Y+W5Y+C5pWw55qE5Ye95pWwXHJcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgICAgICogZWRpdG9yLmV4ZWNDb21tYW5kKCdzZXJ2ZXJwYXJhbScsIGZ1bmN0aW9uKGVkaXRvcil7XHJcblx0ICAgICAgICAgICAgICogICAgIHJldHVybiB7J2tleSc6ICd2YWx1ZSd9O1xyXG5cdCAgICAgICAgICAgICAqIH0pO1xyXG5cdCAgICAgICAgICAgICAqIGVkaXRvci5xdWVyeUNvbW1hbmRWYWx1ZSgnc2VydmVycGFyYW0nKTsgLy/ov5Tlm57lr7nosaEgeydrZXknOiAndmFsdWUnfVxyXG5cdCAgICAgICAgICAgICAqIGBgYFxyXG5cdCAgICAgICAgICAgICAqL1xyXG5cclxuXHQgICAgICAgICAgICAvKipcclxuXHQgICAgICAgICAgICAgKiDojrflj5bmnI3liqHlmajmj5DkuqTnmoTpop3lpJblj4LmlbDliJfooahcclxuXHQgICAgICAgICAgICAgKiBAY29tbWFuZCBzZXJ2ZXJwYXJhbVxyXG5cdCAgICAgICAgICAgICAqIEBtZXRob2QgcXVlcnlDb21tYW5kVmFsdWVcclxuXHQgICAgICAgICAgICAgKiBAcGFyYW0geyBTdHJpbmcgfSBjbWQg5ZG95Luk5a2X56ym5LiyXHJcblx0ICAgICAgICAgICAgICogQGV4YW1wbGVcclxuXHQgICAgICAgICAgICAgKiBgYGBqYXZhc2NyaXB0XHJcblx0ICAgICAgICAgICAgICogZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCAnc2VydmVycGFyYW0nICk7IC8v6L+U5Zue5a+56LGhIHsna2V5JzogJ3ZhbHVlJ31cclxuXHQgICAgICAgICAgICAgKiBgYGBcclxuXHQgICAgICAgICAgICAgKi9cclxuXHQgICAgICAgICAgICAnc2VydmVycGFyYW0nOntcclxuXHQgICAgICAgICAgICAgICAgZXhlY0NvbW1hbmQ6ZnVuY3Rpb24gKGNtZCwga2V5LCB2YWx1ZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkIHx8IGtleSA9PT0gbnVsbCkgeyAvL+S4jeS8oOWPguaVsCzmuIXnqbrliJfooahcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJQYXJhbSA9IHt9O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc1N0cmluZyhrZXkpKSB7IC8v5Lyg5YWl6ZSu5YC8XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgc2VydmVyUGFyYW1ba2V5XTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2ZXJQYXJhbVtrZXldID0gdmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChrZXkpKSB7IC8v5Lyg5YWl5a+56LGhLOimhuebluWIl+ihqOmhuVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLmV4dGVuZChzZXJ2ZXJQYXJhbSwga2V5LCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNGdW5jdGlvbihrZXkpKXsgLy/kvKDlhaXlh73mlbAs5re75Yqg5YiX6KGo6aG5XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuZXh0ZW5kKHNlcnZlclBhcmFtLCBrZXkoKSwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIHF1ZXJ5Q29tbWFuZFZhbHVlOiBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZlclBhcmFtIHx8IHt9O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0fSk7XHJcblxyXG5cclxuXHQvLyBwbHVnaW5zL2luc2VydGZpbGUuanNcclxuXHQvKipcclxuXHQgKiDmj5LlhaXpmYTku7ZcclxuXHQgKi9cclxuXHRVRS5wbHVnaW4ucmVnaXN0ZXIoJ2luc2VydGZpbGUnLCBmdW5jdGlvbiAoKXtcclxuXHJcblx0ICAgIHZhciBtZSA9IHRoaXM7XHJcblxyXG5cdCAgICBmdW5jdGlvbiBnZXRGaWxlSWNvbih1cmwpe1xyXG5cdCAgICAgICAgdmFyIGV4dCA9IHVybC5zdWJzdHIodXJsLmxhc3RJbmRleE9mKCcuJykgKyAxKS50b0xvd2VyQ2FzZSgpLFxyXG5cdCAgICAgICAgICAgIG1hcHMgPSB7XHJcblx0ICAgICAgICAgICAgICAgIFwicmFyXCI6XCJpY29uX3Jhci5naWZcIixcclxuXHQgICAgICAgICAgICAgICAgXCJ6aXBcIjpcImljb25fcmFyLmdpZlwiLFxyXG5cdCAgICAgICAgICAgICAgICBcInRhclwiOlwiaWNvbl9yYXIuZ2lmXCIsXHJcblx0ICAgICAgICAgICAgICAgIFwiZ3pcIjpcImljb25fcmFyLmdpZlwiLFxyXG5cdCAgICAgICAgICAgICAgICBcImJ6MlwiOlwiaWNvbl9yYXIuZ2lmXCIsXHJcblx0ICAgICAgICAgICAgICAgIFwiZG9jXCI6XCJpY29uX2RvYy5naWZcIixcclxuXHQgICAgICAgICAgICAgICAgXCJkb2N4XCI6XCJpY29uX2RvYy5naWZcIixcclxuXHQgICAgICAgICAgICAgICAgXCJwZGZcIjpcImljb25fcGRmLmdpZlwiLFxyXG5cdCAgICAgICAgICAgICAgICBcIm1wM1wiOlwiaWNvbl9tcDMuZ2lmXCIsXHJcblx0ICAgICAgICAgICAgICAgIFwieGxzXCI6XCJpY29uX3hscy5naWZcIixcclxuXHQgICAgICAgICAgICAgICAgXCJjaG1cIjpcImljb25fY2htLmdpZlwiLFxyXG5cdCAgICAgICAgICAgICAgICBcInBwdFwiOlwiaWNvbl9wcHQuZ2lmXCIsXHJcblx0ICAgICAgICAgICAgICAgIFwicHB0eFwiOlwiaWNvbl9wcHQuZ2lmXCIsXHJcblx0ICAgICAgICAgICAgICAgIFwiYXZpXCI6XCJpY29uX212LmdpZlwiLFxyXG5cdCAgICAgICAgICAgICAgICBcInJtdmJcIjpcImljb25fbXYuZ2lmXCIsXHJcblx0ICAgICAgICAgICAgICAgIFwid212XCI6XCJpY29uX212LmdpZlwiLFxyXG5cdCAgICAgICAgICAgICAgICBcImZsdlwiOlwiaWNvbl9tdi5naWZcIixcclxuXHQgICAgICAgICAgICAgICAgXCJzd2ZcIjpcImljb25fbXYuZ2lmXCIsXHJcblx0ICAgICAgICAgICAgICAgIFwicm1cIjpcImljb25fbXYuZ2lmXCIsXHJcblx0ICAgICAgICAgICAgICAgIFwiZXhlXCI6XCJpY29uX2V4ZS5naWZcIixcclxuXHQgICAgICAgICAgICAgICAgXCJwc2RcIjpcImljb25fcHNkLmdpZlwiLFxyXG5cdCAgICAgICAgICAgICAgICBcInR4dFwiOlwiaWNvbl90eHQuZ2lmXCIsXHJcblx0ICAgICAgICAgICAgICAgIFwianBnXCI6XCJpY29uX2pwZy5naWZcIixcclxuXHQgICAgICAgICAgICAgICAgXCJwbmdcIjpcImljb25fanBnLmdpZlwiLFxyXG5cdCAgICAgICAgICAgICAgICBcImpwZWdcIjpcImljb25fanBnLmdpZlwiLFxyXG5cdCAgICAgICAgICAgICAgICBcImdpZlwiOlwiaWNvbl9qcGcuZ2lmXCIsXHJcblx0ICAgICAgICAgICAgICAgIFwiaWNvXCI6XCJpY29uX2pwZy5naWZcIixcclxuXHQgICAgICAgICAgICAgICAgXCJibXBcIjpcImljb25fanBnLmdpZlwiXHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgIHJldHVybiBtYXBzW2V4dF0gPyBtYXBzW2V4dF06bWFwc1sndHh0J107XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIHJldHVybiB7XHJcblx0ICAgICAgICBjb21tYW5kczp7XHJcblx0ICAgICAgICAgICAgJ2luc2VydGZpbGUnOiB7XHJcblx0ICAgICAgICAgICAgICAgIGV4ZWNDb21tYW5kOiBmdW5jdGlvbiAoY29tbWFuZCwgZmlsZWxpc3Qpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZmlsZWxpc3QgPSB1dGlscy5pc0FycmF5KGZpbGVsaXN0KSA/IGZpbGVsaXN0IDogW2ZpbGVsaXN0XTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaSwgaXRlbSwgaWNvbiwgdGl0bGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCA9ICcnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIFVSTCA9IG1lLmdldE9wdCgnVUVESVRPUl9IT01FX1VSTCcpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGljb25EaXIgPSBVUkwgKyAoVVJMLnN1YnN0cihVUkwubGVuZ3RoIC0gMSkgPT0gJy8nID8gJyc6Jy8nKSArICdkaWFsb2dzL2F0dGFjaG1lbnQvZmlsZVR5cGVJbWFnZXMvJztcclxuXHQgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWxlbGlzdC5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBmaWxlbGlzdFtpXTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpY29uID0gaWNvbkRpciArIGdldEZpbGVJY29uKGl0ZW0udXJsKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSA9IGl0ZW0udGl0bGUgfHwgaXRlbS51cmwuc3Vic3RyKGl0ZW0udXJsLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8cCBzdHlsZT1cImxpbmUtaGVpZ2h0OiAxNnB4O1wiPicgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGltZyBzdHlsZT1cInZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IG1hcmdpbi1yaWdodDogMnB4O1wiIHNyYz1cIicrIGljb24gKyAnXCIgX3NyYz1cIicgKyBpY29uICsgJ1wiIC8+JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YSBzdHlsZT1cImZvbnQtc2l6ZToxMnB4OyBjb2xvcjojMDA2NmNjO1wiIGhyZWY9XCInICsgaXRlbS51cmwgKydcIiB0aXRsZT1cIicgKyB0aXRsZSArICdcIj4nICsgdGl0bGUgKyAnPC9hPicgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9wPic7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5leGVjQ29tbWFuZCgnaW5zZXJ0SHRtbCcsIGh0bWwpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblx0fSk7XHJcblxyXG5cclxuXHJcblxyXG5cdC8vIHBsdWdpbnMveHNzRmlsdGVyLmpzXHJcblx0LyoqXHJcblx0ICogQGZpbGUgeHNzRmlsdGVyLmpzXHJcblx0ICogQGRlc2MgeHNz6L+H5ruk5ZmoXHJcblx0ICogQGF1dGhvciByb2JiZW5tdVxyXG5cdCAqL1xyXG5cclxuXHRVRS5wbHVnaW5zLnhzc0ZpbHRlciA9IGZ1bmN0aW9uKCkge1xyXG5cclxuXHRcdHZhciBjb25maWcgPSBVRURJVE9SX0NPTkZJRztcclxuXHRcdHZhciB3aGl0TGlzdCA9IGNvbmZpZy53aGl0TGlzdDtcclxuXHJcblx0XHRmdW5jdGlvbiBmaWx0ZXIobm9kZSkge1xyXG5cclxuXHRcdFx0dmFyIHRhZ05hbWUgPSBub2RlLnRhZ05hbWU7XHJcblx0XHRcdHZhciBhdHRycyA9IG5vZGUuYXR0cnM7XHJcblxyXG5cdFx0XHRpZiAoIXdoaXRMaXN0Lmhhc093blByb3BlcnR5KHRhZ05hbWUpKSB7XHJcblx0XHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0VUUudXRpbHMuZWFjaChhdHRycywgZnVuY3Rpb24gKHZhbCwga2V5KSB7XHJcblxyXG5cdFx0XHRcdGlmICh3aGl0TGlzdFt0YWdOYW1lXS5pbmRleE9mKGtleSkgPT09IC0xKSB7XHJcblx0XHRcdFx0XHRub2RlLnNldEF0dHIoa2V5KTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHRcdC8vIOa3u+WKoGluc2VydGh0bWxcXHBhc3Rl562J5pON5L2c55So55qE6L+H5ruk6KeE5YiZXHJcblx0XHRpZiAod2hpdExpc3QgJiYgY29uZmlnLnhzc0ZpbHRlclJ1bGVzKSB7XHJcblx0XHRcdHRoaXMub3B0aW9ucy5maWx0ZXJSdWxlcyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcblx0XHRcdFx0dmFyIHJlc3VsdCA9IHt9O1xyXG5cclxuXHRcdFx0XHRVRS51dGlscy5lYWNoKHdoaXRMaXN0LCBmdW5jdGlvbih2YWwsIGtleSkge1xyXG5cdFx0XHRcdFx0cmVzdWx0W2tleV0gPSBmdW5jdGlvbiAobm9kZSkge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmlsdGVyKG5vZGUpO1xyXG5cdFx0XHRcdFx0fTtcclxuXHRcdFx0XHR9KTtcclxuXHJcblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdFx0fSgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHZhciB0YWdMaXN0ID0gW107XHJcblxyXG5cdFx0VUUudXRpbHMuZWFjaCh3aGl0TGlzdCwgZnVuY3Rpb24gKHZhbCwga2V5KSB7XHJcblx0XHRcdHRhZ0xpc3QucHVzaChrZXkpO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0Ly8g5re75YqgaW5wdXTov4fmu6Top4TliJlcclxuXHRcdC8vXHJcblx0XHRpZiAod2hpdExpc3QgJiYgY29uZmlnLmlucHV0WHNzRmlsdGVyKSB7XHJcblx0XHRcdHRoaXMuYWRkSW5wdXRSdWxlKGZ1bmN0aW9uIChyb290KSB7XHJcblxyXG5cdFx0XHRcdHJvb3QudHJhdmVyc2FsKGZ1bmN0aW9uKG5vZGUpIHtcclxuXHRcdFx0XHRcdGlmIChub2RlLnR5cGUgIT09ICdlbGVtZW50Jykge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRmaWx0ZXIobm9kZSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cdFx0Ly8g5re75Yqgb3V0cHV06L+H5ruk6KeE5YiZXHJcblx0XHQvL1xyXG5cdFx0aWYgKHdoaXRMaXN0ICYmIGNvbmZpZy5vdXRwdXRYc3NGaWx0ZXIpIHtcclxuXHRcdFx0dGhpcy5hZGRPdXRwdXRSdWxlKGZ1bmN0aW9uIChyb290KSB7XHJcblxyXG5cdFx0XHRcdHJvb3QudHJhdmVyc2FsKGZ1bmN0aW9uKG5vZGUpIHtcclxuXHRcdFx0XHRcdGlmIChub2RlLnR5cGUgIT09ICdlbGVtZW50Jykge1xyXG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRmaWx0ZXIobm9kZSk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH0pO1xyXG5cdFx0fVxyXG5cclxuXHR9O1xyXG5cclxuXHJcblx0Ly8gdWkvdWkuanNcclxuXHR2YXIgYmFpZHUgPSBiYWlkdSB8fCB7fTtcclxuXHRiYWlkdS5lZGl0b3IgPSBiYWlkdS5lZGl0b3IgfHwge307XHJcblx0VUUudWkgPSBiYWlkdS5lZGl0b3IudWkgPSB7fTtcclxuXHJcblx0Ly8gdWkvdWl1dGlscy5qc1xyXG5cdChmdW5jdGlvbiAoKXtcclxuXHQgICAgdmFyIGJyb3dzZXIgPSBiYWlkdS5lZGl0b3IuYnJvd3NlcixcclxuXHQgICAgICAgIGRvbVV0aWxzID0gYmFpZHUuZWRpdG9yLmRvbS5kb21VdGlscztcclxuXHJcblx0ICAgIHZhciBtYWdpYyA9ICckRURJVE9SVUknO1xyXG5cdCAgICB2YXIgcm9vdCA9IHdpbmRvd1ttYWdpY10gPSB7fTtcclxuXHQgICAgdmFyIHVpZE1hZ2ljID0gJ0lEJyArIG1hZ2ljO1xyXG5cdCAgICB2YXIgdWlkQ291bnQgPSAwO1xyXG5cclxuXHQgICAgdmFyIHVpVXRpbHMgPSBiYWlkdS5lZGl0b3IudWkudWlVdGlscyA9IHtcclxuXHQgICAgICAgIHVpZDogZnVuY3Rpb24gKG9iail7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIChvYmogPyBvYmpbdWlkTWFnaWNdIHx8IChvYmpbdWlkTWFnaWNdID0gKysgdWlkQ291bnQpIDogKysgdWlkQ291bnQpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGhvb2s6IGZ1bmN0aW9uICggZm4sIGNhbGxiYWNrICkge1xyXG5cdCAgICAgICAgICAgIHZhciBkZztcclxuXHQgICAgICAgICAgICBpZiAoZm4gJiYgZm4uX2NhbGxiYWNrcykge1xyXG5cdCAgICAgICAgICAgICAgICBkZyA9IGZuO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIGRnID0gZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChmbikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHEgPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IGRnLl9jYWxsYmFja3M7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgayA9IGNhbGxiYWNrcy5sZW5ndGg7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZSAoayAtLSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciByID0gY2FsbGJhY2tzW2tdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHEgPT09IHVuZGVmaW5lZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBxID0gcjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gcTtcclxuXHQgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgZGcuX2NhbGxiYWNrcyA9IFtdO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBkZy5fY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xyXG5cdCAgICAgICAgICAgIHJldHVybiBkZztcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBjcmVhdGVFbGVtZW50QnlIdG1sOiBmdW5jdGlvbiAoaHRtbCl7XHJcblx0ICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0ICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gaHRtbDtcclxuXHQgICAgICAgICAgICBlbCA9IGVsLmZpcnN0Q2hpbGQ7XHJcblx0ICAgICAgICAgICAgZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbCk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGVsO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldFZpZXdwb3J0RWxlbWVudDogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIChicm93c2VyLmllICYmIGJyb3dzZXIucXVpcmtzKSA/XHJcblx0ICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0Q2xpZW50UmVjdDogZnVuY3Rpb24gKGVsZW1lbnQpe1xyXG5cdCAgICAgICAgICAgIHZhciBiY3I7XHJcblx0ICAgICAgICAgICAgLy90cmFjZSAgSUU25LiL5Zyo5o6n5Yi257yW6L6R5Zmo5pi+6ZqQ5pe25Y+v6IO95Lya5oql6ZSZ77yMY2F0Y2jkuIDkuItcclxuXHQgICAgICAgICAgICB0cnl7XHJcblx0ICAgICAgICAgICAgICAgIGJjciA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0ICAgICAgICAgICAgfWNhdGNoKGUpe1xyXG5cdCAgICAgICAgICAgICAgICBiY3I9e2xlZnQ6MCx0b3A6MCxoZWlnaHQ6MCx3aWR0aDowfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgcmVjdCA9IHtcclxuXHQgICAgICAgICAgICAgICAgbGVmdDogTWF0aC5yb3VuZChiY3IubGVmdCksXHJcblx0ICAgICAgICAgICAgICAgIHRvcDogTWF0aC5yb3VuZChiY3IudG9wKSxcclxuXHQgICAgICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLnJvdW5kKGJjci5ib3R0b20gLSBiY3IudG9wKSxcclxuXHQgICAgICAgICAgICAgICAgd2lkdGg6IE1hdGgucm91bmQoYmNyLnJpZ2h0IC0gYmNyLmxlZnQpXHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICB2YXIgZG9jO1xyXG5cdCAgICAgICAgICAgIHdoaWxlICgoZG9jID0gZWxlbWVudC5vd25lckRvY3VtZW50KSAhPT0gZG9jdW1lbnQgJiZcclxuXHQgICAgICAgICAgICAgICAgKGVsZW1lbnQgPSBkb21VdGlscy5nZXRXaW5kb3coZG9jKS5mcmFtZUVsZW1lbnQpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGJjciA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgIHJlY3QubGVmdCArPSBiY3IubGVmdDtcclxuXHQgICAgICAgICAgICAgICAgcmVjdC50b3AgKz0gYmNyLnRvcDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmVjdC5ib3R0b20gPSByZWN0LnRvcCArIHJlY3QuaGVpZ2h0O1xyXG5cdCAgICAgICAgICAgIHJlY3QucmlnaHQgPSByZWN0LmxlZnQgKyByZWN0LndpZHRoO1xyXG5cdCAgICAgICAgICAgIHJldHVybiByZWN0O1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldFZpZXdwb3J0UmVjdDogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdmFyIHZpZXdwb3J0RWwgPSB1aVV0aWxzLmdldFZpZXdwb3J0RWxlbWVudCgpO1xyXG5cdCAgICAgICAgICAgIHZhciB3aWR0aCA9ICh3aW5kb3cuaW5uZXJXaWR0aCB8fCB2aWV3cG9ydEVsLmNsaWVudFdpZHRoKSB8IDA7XHJcblx0ICAgICAgICAgICAgdmFyIGhlaWdodCA9ICh3aW5kb3cuaW5uZXJIZWlnaHQgfHx2aWV3cG9ydEVsLmNsaWVudEhlaWdodCkgfCAwO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgIGxlZnQ6IDAsXHJcblx0ICAgICAgICAgICAgICAgIHRvcDogMCxcclxuXHQgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsXHJcblx0ICAgICAgICAgICAgICAgIHdpZHRoOiB3aWR0aCxcclxuXHQgICAgICAgICAgICAgICAgYm90dG9tOiBoZWlnaHQsXHJcblx0ICAgICAgICAgICAgICAgIHJpZ2h0OiB3aWR0aFxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgc2V0Vmlld3BvcnRPZmZzZXQ6IGZ1bmN0aW9uIChlbGVtZW50LCBvZmZzZXQpe1xyXG5cdCAgICAgICAgICAgIHZhciByZWN0O1xyXG5cdCAgICAgICAgICAgIHZhciBmaXhlZExheWVyID0gdWlVdGlscy5nZXRGaXhlZExheWVyKCk7XHJcblx0ICAgICAgICAgICAgaWYgKGVsZW1lbnQucGFyZW50Tm9kZSA9PT0gZml4ZWRMYXllcikge1xyXG5cdCAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSBvZmZzZXQubGVmdCArICdweCc7XHJcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUudG9wID0gb2Zmc2V0LnRvcCArICdweCc7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMuc2V0Vmlld3BvcnRPZmZzZXQoZWxlbWVudCwgb2Zmc2V0KTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0RXZlbnRPZmZzZXQ6IGZ1bmN0aW9uIChldnQpe1xyXG5cdCAgICAgICAgICAgIHZhciBlbCA9IGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQ7XHJcblx0ICAgICAgICAgICAgdmFyIHJlY3QgPSB1aVV0aWxzLmdldENsaWVudFJlY3QoZWwpO1xyXG5cdCAgICAgICAgICAgIHZhciBvZmZzZXQgPSB1aVV0aWxzLmdldFZpZXdwb3J0T2Zmc2V0QnlFdmVudChldnQpO1xyXG5cdCAgICAgICAgICAgIHJldHVybiB7XHJcblx0ICAgICAgICAgICAgICAgIGxlZnQ6IG9mZnNldC5sZWZ0IC0gcmVjdC5sZWZ0LFxyXG5cdCAgICAgICAgICAgICAgICB0b3A6IG9mZnNldC50b3AgLSByZWN0LnRvcFxyXG5cdCAgICAgICAgICAgIH07XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0Vmlld3BvcnRPZmZzZXRCeUV2ZW50OiBmdW5jdGlvbiAoZXZ0KXtcclxuXHQgICAgICAgICAgICB2YXIgZWwgPSBldnQudGFyZ2V0IHx8IGV2dC5zcmNFbGVtZW50O1xyXG5cdCAgICAgICAgICAgIHZhciBmcmFtZUVsID0gZG9tVXRpbHMuZ2V0V2luZG93KGVsKS5mcmFtZUVsZW1lbnQ7XHJcblx0ICAgICAgICAgICAgdmFyIG9mZnNldCA9IHtcclxuXHQgICAgICAgICAgICAgICAgbGVmdDogZXZ0LmNsaWVudFgsXHJcblx0ICAgICAgICAgICAgICAgIHRvcDogZXZ0LmNsaWVudFlcclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgIGlmIChmcmFtZUVsICYmIGVsLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50KSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciByZWN0ID0gdWlVdGlscy5nZXRDbGllbnRSZWN0KGZyYW1lRWwpO1xyXG5cdCAgICAgICAgICAgICAgICBvZmZzZXQubGVmdCArPSByZWN0LmxlZnQ7XHJcblx0ICAgICAgICAgICAgICAgIG9mZnNldC50b3AgKz0gcmVjdC50b3A7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiBvZmZzZXQ7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgc2V0R2xvYmFsOiBmdW5jdGlvbiAoaWQsIG9iail7XHJcblx0ICAgICAgICAgICAgcm9vdFtpZF0gPSBvYmo7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG1hZ2ljICsgJ1tcIicgKyBpZCAgKyAnXCJdJztcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICB1bnNldEdsb2JhbDogZnVuY3Rpb24gKGlkKXtcclxuXHQgICAgICAgICAgICBkZWxldGUgcm9vdFtpZF07XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgY29weUF0dHJpYnV0ZXM6IGZ1bmN0aW9uICh0Z3QsIHNyYyl7XHJcblx0ICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzcmMuYXR0cmlidXRlcztcclxuXHQgICAgICAgICAgICB2YXIgayA9IGF0dHJpYnV0ZXMubGVuZ3RoO1xyXG5cdCAgICAgICAgICAgIHdoaWxlIChrIC0tKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBhdHRyTm9kZSA9IGF0dHJpYnV0ZXNba107XHJcblx0ICAgICAgICAgICAgICAgIGlmICggYXR0ck5vZGUubm9kZU5hbWUgIT0gJ3N0eWxlJyAmJiBhdHRyTm9kZS5ub2RlTmFtZSAhPSAnY2xhc3MnICYmICghYnJvd3Nlci5pZSB8fCBhdHRyTm9kZS5zcGVjaWZpZWQpICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGd0LnNldEF0dHJpYnV0ZShhdHRyTm9kZS5ub2RlTmFtZSwgYXR0ck5vZGUubm9kZVZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoc3JjLmNsYXNzTmFtZSkge1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5hZGRDbGFzcyh0Z3Qsc3JjLmNsYXNzTmFtZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmIChzcmMuc3R5bGUuY3NzVGV4dCkge1xyXG5cdCAgICAgICAgICAgICAgICB0Z3Quc3R5bGUuY3NzVGV4dCArPSAnOycgKyBzcmMuc3R5bGUuY3NzVGV4dDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcmVtb3ZlU3R5bGU6IGZ1bmN0aW9uIChlbCwgc3R5bGVOYW1lKXtcclxuXHQgICAgICAgICAgICBpZiAoZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkpIHtcclxuXHQgICAgICAgICAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoc3R5bGVOYW1lKTtcclxuXHQgICAgICAgICAgICB9IGVsc2UgaWYgKGVsLnN0eWxlLnJlbW92ZUF0dHJpYnV0ZSkge1xyXG5cdCAgICAgICAgICAgICAgICBlbC5zdHlsZS5yZW1vdmVBdHRyaWJ1dGUoc3R5bGVOYW1lKTtcclxuXHQgICAgICAgICAgICB9IGVsc2UgdGhyb3cgJyc7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgY29udGFpbnM6IGZ1bmN0aW9uIChlbEEsIGVsQil7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGVsQSAmJiBlbEIgJiYgKGVsQSA9PT0gZWxCID8gZmFsc2UgOiAoXHJcblx0ICAgICAgICAgICAgICAgIGVsQS5jb250YWlucyA/IGVsQS5jb250YWlucyhlbEIpIDpcclxuXHQgICAgICAgICAgICAgICAgICAgIGVsQS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlbEIpICYgMTZcclxuXHQgICAgICAgICAgICAgICAgKSk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgc3RhcnREcmFnOiBmdW5jdGlvbiAoZXZ0LCBjYWxsYmFja3MsZG9jKXtcclxuXHQgICAgICAgICAgICB2YXIgZG9jID0gZG9jIHx8IGRvY3VtZW50O1xyXG5cdCAgICAgICAgICAgIHZhciBzdGFydFggPSBldnQuY2xpZW50WDtcclxuXHQgICAgICAgICAgICB2YXIgc3RhcnRZID0gZXZ0LmNsaWVudFk7XHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlKGV2dCl7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB4ID0gZXZ0LmNsaWVudFggLSBzdGFydFg7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB5ID0gZXZ0LmNsaWVudFkgLSBzdGFydFk7XHJcblx0ICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vbmRyYWdtb3ZlKHgsIHksZXZ0KTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGV2dC5zdG9wUHJvcGFnYXRpb24pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGV2dC5jYW5jZWxCdWJibGUgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmIChkb2MuYWRkRXZlbnRMaXN0ZW5lcikge1xyXG5cdCAgICAgICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVNb3VzZVVwKGV2dCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaGFuZGxlTW91c2VNb3ZlLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgaGFuZGxlTW91c2VVcCwgdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIGhhbmRsZU1vdXNlVXAsIHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLm9uZHJhZ3N0b3AoKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgaGFuZGxlTW91c2VNb3ZlLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVNb3VzZVVwLCB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCBoYW5kbGVNb3VzZVVwLCB0cnVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBlbG0gPSBldnQuc3JjRWxlbWVudDtcclxuXHQgICAgICAgICAgICAgICAgZWxtLnNldENhcHR1cmUoKTtcclxuXHQgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVsZWFzZUNhcHRydWUoKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVsbS5yZWxlYXNlQ2FwdHVyZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZWxtLmRldGFjaEV2ZW50KCdvbm1vdXNlbW92ZScsIGhhbmRsZU1vdXNlTW92ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbG0uZGV0YWNoRXZlbnQoJ29ubW91c2V1cCcsIHJlbGVhc2VDYXB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVsbS5kZXRhY2hFdmVudCgnb25sb3NlY2FwdHJ1ZScsIHJlbGVhc2VDYXB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5vbmRyYWdzdG9wKCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWxtLmF0dGFjaEV2ZW50KCdvbm1vdXNlbW92ZScsIGhhbmRsZU1vdXNlTW92ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGVsbS5hdHRhY2hFdmVudCgnb25tb3VzZXVwJywgcmVsZWFzZUNhcHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICBlbG0uYXR0YWNoRXZlbnQoJ29ubG9zZWNhcHRydWUnLCByZWxlYXNlQ2FwdHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIGV2dC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBjYWxsYmFja3Mub25kcmFnc3RhcnQoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRGaXhlZExheWVyOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB2YXIgbGF5ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWR1aV9maXhlZGxheWVyJyk7XHJcblx0ICAgICAgICAgICAgaWYgKGxheWVyID09IG51bGwpIHtcclxuXHQgICAgICAgICAgICAgICAgbGF5ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHQgICAgICAgICAgICAgICAgbGF5ZXIuaWQgPSAnZWR1aV9maXhlZGxheWVyJztcclxuXHQgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsYXllcik7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChicm93c2VyLmllICYmIGJyb3dzZXIudmVyc2lvbiA8PSA4KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsYXllci5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcblx0ICAgICAgICAgICAgICAgICAgICBiaW5kRml4ZWRMYXllcigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCh1cGRhdGVGaXhlZE9mZnNldCk7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsYXllci5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgbGF5ZXIuc3R5bGUubGVmdCA9ICcwJztcclxuXHQgICAgICAgICAgICAgICAgbGF5ZXIuc3R5bGUudG9wID0gJzAnO1xyXG5cdCAgICAgICAgICAgICAgICBsYXllci5zdHlsZS53aWR0aCA9ICcwJztcclxuXHQgICAgICAgICAgICAgICAgbGF5ZXIuc3R5bGUuaGVpZ2h0ID0gJzAnO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gbGF5ZXI7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgbWFrZVVuc2VsZWN0YWJsZTogZnVuY3Rpb24gKGVsZW1lbnQpe1xyXG5cdCAgICAgICAgICAgIGlmIChicm93c2VyLm9wZXJhIHx8IChicm93c2VyLmllICYmIGJyb3dzZXIudmVyc2lvbiA8IDkpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnQudW5zZWxlY3RhYmxlID0gJ29uJztcclxuXHQgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuaGFzQ2hpbGROb2RlcygpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8ZWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hpbGROb2Rlc1tpXS5ub2RlVHlwZSA9PSAxKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpVXRpbHMubWFrZVVuc2VsZWN0YWJsZShlbGVtZW50LmNoaWxkTm9kZXNbaV0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnN0eWxlLk1velVzZXJTZWxlY3QgIT09IHVuZGVmaW5lZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5Nb3pVc2VyU2VsZWN0ID0gJ25vbmUnO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQuc3R5bGUuV2Via2l0VXNlclNlbGVjdCAhPT0gdW5kZWZpbmVkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPSAnbm9uZSc7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5zdHlsZS5LaHRtbFVzZXJTZWxlY3QgIT09IHVuZGVmaW5lZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zdHlsZS5LaHRtbFVzZXJTZWxlY3QgPSAnbm9uZSc7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIGZ1bmN0aW9uIHVwZGF0ZUZpeGVkT2Zmc2V0KCl7XHJcblx0ICAgICAgICB2YXIgbGF5ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZWR1aV9maXhlZGxheWVyJyk7XHJcblx0ICAgICAgICB1aVV0aWxzLnNldFZpZXdwb3J0T2Zmc2V0KGxheWVyLCB7XHJcblx0ICAgICAgICAgICAgbGVmdDogMCxcclxuXHQgICAgICAgICAgICB0b3A6IDBcclxuXHQgICAgICAgIH0pO1xyXG4vL1x0ICAgICAgICBsYXllci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4vL1x0ICAgICAgICBsYXllci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcclxuXHJcblx0ICAgICAgICAvLyN0cmFjZTogMTM1NFxyXG4vL1x0ICAgICAgICBzZXRUaW1lb3V0KHVwZGF0ZUZpeGVkT2Zmc2V0KTtcclxuXHQgICAgfVxyXG5cdCAgICBmdW5jdGlvbiBiaW5kRml4ZWRMYXllcihhZGpPZmZzZXQpe1xyXG5cdCAgICAgICAgZG9tVXRpbHMub24od2luZG93LCAnc2Nyb2xsJywgdXBkYXRlRml4ZWRPZmZzZXQpO1xyXG5cdCAgICAgICAgZG9tVXRpbHMub24od2luZG93LCAncmVzaXplJywgYmFpZHUuZWRpdG9yLnV0aWxzLmRlZmVyKHVwZGF0ZUZpeGVkT2Zmc2V0LCAwLCB0cnVlKSk7XHJcblx0ICAgIH1cclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gdWkvdWliYXNlLmpzXHJcblx0KGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdmFyIHV0aWxzID0gYmFpZHUuZWRpdG9yLnV0aWxzLFxyXG5cdCAgICAgICAgdWlVdGlscyA9IGJhaWR1LmVkaXRvci51aS51aVV0aWxzLFxyXG5cdCAgICAgICAgRXZlbnRCYXNlID0gYmFpZHUuZWRpdG9yLkV2ZW50QmFzZSxcclxuXHQgICAgICAgIFVJQmFzZSA9IGJhaWR1LmVkaXRvci51aS5VSUJhc2UgPSBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICB9O1xyXG5cclxuXHQgICAgVUlCYXNlLnByb3RvdHlwZSA9IHtcclxuXHQgICAgICAgIGNsYXNzTmFtZTonJyxcclxuXHQgICAgICAgIHVpTmFtZTonJyxcclxuXHQgICAgICAgIGluaXRPcHRpb25zOmZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBrIGluIG9wdGlvbnMpIHtcclxuXHQgICAgICAgICAgICAgICAgbWVba10gPSBvcHRpb25zW2tdO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0aGlzLmlkID0gdGhpcy5pZCB8fCAnZWR1aScgKyB1aVV0aWxzLnVpZCgpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGluaXRVSUJhc2U6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMuX2dsb2JhbEtleSA9IHV0aWxzLnVuaHRtbCh1aVV0aWxzLnNldEdsb2JhbCh0aGlzLmlkLCB0aGlzKSk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcmVuZGVyOmZ1bmN0aW9uIChob2xkZXIpIHtcclxuXHQgICAgICAgICAgICB2YXIgaHRtbCA9IHRoaXMucmVuZGVySHRtbCgpO1xyXG5cdCAgICAgICAgICAgIHZhciBlbCA9IHVpVXRpbHMuY3JlYXRlRWxlbWVudEJ5SHRtbChodG1sKTtcclxuXHJcblx0ICAgICAgICAgICAgLy9ieSB4dWhlbmcg57uZ5q+P5Liqbm9kZea3u+WKoGNsYXNzXHJcblx0ICAgICAgICAgICAgdmFyIGxpc3QgPSBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZShlbCwgXCIqXCIpO1xyXG5cdCAgICAgICAgICAgIHZhciB0aGVtZSA9IFwiZWR1aS1cIiArICh0aGlzLnRoZW1lIHx8IHRoaXMuZWRpdG9yLm9wdGlvbnMudGhlbWUpO1xyXG5cdCAgICAgICAgICAgIHZhciBsYXllciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZHVpX2ZpeGVkbGF5ZXInKTtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbm9kZTsgbm9kZSA9IGxpc3RbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMuYWRkQ2xhc3Mobm9kZSwgdGhlbWUpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBkb21VdGlscy5hZGRDbGFzcyhlbCwgdGhlbWUpO1xyXG5cdCAgICAgICAgICAgIGlmKGxheWVyKXtcclxuXHQgICAgICAgICAgICAgICAgbGF5ZXIuY2xhc3NOYW1lPVwiXCI7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLmFkZENsYXNzKGxheWVyLHRoZW1lKTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBzZWF0RWwgPSB0aGlzLmdldERvbSgpO1xyXG5cdCAgICAgICAgICAgIGlmIChzZWF0RWwgIT0gbnVsbCkge1xyXG5cdCAgICAgICAgICAgICAgICBzZWF0RWwucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoZWwsIHNlYXRFbCk7XHJcblx0ICAgICAgICAgICAgICAgIHVpVXRpbHMuY29weUF0dHJpYnV0ZXMoZWwsIHNlYXRFbCk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBob2xkZXIgPT0gJ3N0cmluZycpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGhvbGRlciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGhvbGRlcik7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaG9sZGVyID0gaG9sZGVyIHx8IHVpVXRpbHMuZ2V0Rml4ZWRMYXllcigpO1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5hZGRDbGFzcyhob2xkZXIsIHRoZW1lKTtcclxuXHQgICAgICAgICAgICAgICAgaG9sZGVyLmFwcGVuZENoaWxkKGVsKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy5wb3N0UmVuZGVyKCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0RG9tOmZ1bmN0aW9uIChuYW1lKSB7XHJcblx0ICAgICAgICAgICAgaWYgKCFuYW1lKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5pZCArICdfJyArIG5hbWUpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBwb3N0UmVuZGVyOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgncG9zdHJlbmRlcicpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldEh0bWxUcGw6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiAnJztcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBmb3JtYXRIdG1sOmZ1bmN0aW9uICh0cGwpIHtcclxuXHQgICAgICAgICAgICB2YXIgcHJlZml4ID0gJ2VkdWktJyArIHRoaXMudWlOYW1lO1xyXG5cdCAgICAgICAgICAgIHJldHVybiAodHBsXHJcblx0ICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8jIy9nLCB0aGlzLmlkKVxyXG5cdCAgICAgICAgICAgICAgICAucmVwbGFjZSgvJSUtL2csIHRoaXMudWlOYW1lID8gcHJlZml4ICsgJy0nIDogJycpXHJcblx0ICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8lJS9nLCAodGhpcy51aU5hbWUgPyBwcmVmaXggOiAnJykgKyAnICcgKyB0aGlzLmNsYXNzTmFtZSlcclxuXHQgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcJFxcJC9nLCB0aGlzLl9nbG9iYWxLZXkpKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICByZW5kZXJIdG1sOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXRIdG1sKHRoaXMuZ2V0SHRtbFRwbCgpKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBkaXNwb3NlOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgYm94ID0gdGhpcy5nZXREb20oKTtcclxuXHQgICAgICAgICAgICBpZiAoYm94KSBiYWlkdS5lZGl0b3IuZG9tLmRvbVV0aWxzLnJlbW92ZShib3gpO1xyXG5cdCAgICAgICAgICAgIHVpVXRpbHMudW5zZXRHbG9iYWwodGhpcy5pZCk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIHV0aWxzLmluaGVyaXRzKFVJQmFzZSwgRXZlbnRCYXNlKTtcclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gdWkvc2VwYXJhdG9yLmpzXHJcblx0KGZ1bmN0aW9uICgpe1xyXG5cdCAgICB2YXIgdXRpbHMgPSBiYWlkdS5lZGl0b3IudXRpbHMsXHJcblx0ICAgICAgICBVSUJhc2UgPSBiYWlkdS5lZGl0b3IudWkuVUlCYXNlLFxyXG5cdCAgICAgICAgU2VwYXJhdG9yID0gYmFpZHUuZWRpdG9yLnVpLlNlcGFyYXRvciA9IGZ1bmN0aW9uIChvcHRpb25zKXtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRPcHRpb25zKG9wdGlvbnMpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdFNlcGFyYXRvcigpO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgU2VwYXJhdG9yLnByb3RvdHlwZSA9IHtcclxuXHQgICAgICAgIHVpTmFtZTogJ3NlcGFyYXRvcicsXHJcblx0ICAgICAgICBpbml0U2VwYXJhdG9yOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRVSUJhc2UoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRIdG1sVHBsOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICByZXR1cm4gJzxkaXYgaWQ9XCIjI1wiIGNsYXNzPVwiZWR1aS1ib3ggJSVcIj48L2Rpdj4nO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICB1dGlscy5pbmhlcml0cyhTZXBhcmF0b3IsIFVJQmFzZSk7XHJcblxyXG5cdH0pKCk7XHJcblxyXG5cclxuXHQvLyB1aS9tYXNrLmpzXHJcblx0Ly8vaW1wb3J0IGNvcmVcclxuXHQvLy9pbXBvcnQgdWljb3JlXHJcblx0KGZ1bmN0aW9uICgpe1xyXG5cdCAgICB2YXIgdXRpbHMgPSBiYWlkdS5lZGl0b3IudXRpbHMsXHJcblx0ICAgICAgICBkb21VdGlscyA9IGJhaWR1LmVkaXRvci5kb20uZG9tVXRpbHMsXHJcblx0ICAgICAgICBVSUJhc2UgPSBiYWlkdS5lZGl0b3IudWkuVUlCYXNlLFxyXG5cdCAgICAgICAgdWlVdGlscyA9IGJhaWR1LmVkaXRvci51aS51aVV0aWxzO1xyXG5cdCAgICBcclxuXHQgICAgdmFyIE1hc2sgPSBiYWlkdS5lZGl0b3IudWkuTWFzayA9IGZ1bmN0aW9uIChvcHRpb25zKXtcclxuXHQgICAgICAgIHRoaXMuaW5pdE9wdGlvbnMob3B0aW9ucyk7XHJcblx0ICAgICAgICB0aGlzLmluaXRVSUJhc2UoKTtcclxuXHQgICAgfTtcclxuXHQgICAgTWFzay5wcm90b3R5cGUgPSB7XHJcblx0ICAgICAgICBnZXRIdG1sVHBsOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICByZXR1cm4gJzxkaXYgaWQ9XCIjI1wiIGNsYXNzPVwiZWR1aS1tYXNrICUlXCIgb25jbGljaz1cInJldHVybiAkJC5fb25DbGljayhldmVudCwgdGhpcyk7XCIgb25tb3VzZWRvd249XCJyZXR1cm4gJCQuX29uTW91c2VEb3duKGV2ZW50LCB0aGlzKTtcIj48L2Rpdj4nO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHBvc3RSZW5kZXI6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMub24od2luZG93LCAncmVzaXplJywgZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIW1lLmlzSGlkZGVuKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5fZmlsbCgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzaG93OiBmdW5jdGlvbiAoekluZGV4KXtcclxuXHQgICAgICAgICAgICB0aGlzLl9maWxsKCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5nZXREb20oKS5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcblx0ICAgICAgICAgICAgdGhpcy5nZXREb20oKS5zdHlsZS56SW5kZXggPSB6SW5kZXg7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgaGlkZTogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdGhpcy5nZXREb20oKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdCAgICAgICAgICAgIHRoaXMuZ2V0RG9tKCkuc3R5bGUuekluZGV4ID0gJyc7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgaXNIaWRkZW46IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERvbSgpLnN0eWxlLmRpc3BsYXkgPT0gJ25vbmUnO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9vbk1vdXNlRG93bjogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9vbkNsaWNrOiBmdW5jdGlvbiAoZSwgdGFyZ2V0KXtcclxuXHQgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgnY2xpY2snLCBlLCB0YXJnZXQpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9maWxsOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB2YXIgZWwgPSB0aGlzLmdldERvbSgpO1xyXG5cdCAgICAgICAgICAgIHZhciB2cFJlY3QgPSB1aVV0aWxzLmdldFZpZXdwb3J0UmVjdCgpO1xyXG5cdCAgICAgICAgICAgIGVsLnN0eWxlLndpZHRoID0gdnBSZWN0LndpZHRoICsgJ3B4JztcclxuXHQgICAgICAgICAgICBlbC5zdHlsZS5oZWlnaHQgPSB2cFJlY3QuaGVpZ2h0ICsgJ3B4JztcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgdXRpbHMuaW5oZXJpdHMoTWFzaywgVUlCYXNlKTtcclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gdWkvcG9wdXAuanNcclxuXHQvLy9pbXBvcnQgY29yZVxyXG5cdC8vL2ltcG9ydCB1aWNvcmVcclxuXHQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICB2YXIgdXRpbHMgPSBiYWlkdS5lZGl0b3IudXRpbHMsXHJcblx0ICAgICAgICB1aVV0aWxzID0gYmFpZHUuZWRpdG9yLnVpLnVpVXRpbHMsXHJcblx0ICAgICAgICBkb21VdGlscyA9IGJhaWR1LmVkaXRvci5kb20uZG9tVXRpbHMsXHJcblx0ICAgICAgICBVSUJhc2UgPSBiYWlkdS5lZGl0b3IudWkuVUlCYXNlLFxyXG5cdCAgICAgICAgUG9wdXAgPSBiYWlkdS5lZGl0b3IudWkuUG9wdXAgPSBmdW5jdGlvbiAob3B0aW9ucyl7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0T3B0aW9ucyhvcHRpb25zKTtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRQb3B1cCgpO1xyXG5cdCAgICAgICAgfTtcclxuXHJcblx0ICAgIHZhciBhbGxQb3B1cHMgPSBbXTtcclxuXHQgICAgZnVuY3Rpb24gY2xvc2VBbGxQb3B1cCggZXZ0LGVsICl7XHJcblx0ICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBhbGxQb3B1cHMubGVuZ3RoOyBpKysgKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHBvcCA9IGFsbFBvcHVwc1tpXTtcclxuXHQgICAgICAgICAgICBpZiAoIXBvcC5pc0hpZGRlbigpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChwb3AucXVlcnlBdXRvSGlkZShlbCkgIT09IGZhbHNlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihldnQmJi9zY3JvbGwvaWcudGVzdChldnQudHlwZSkmJnBvcC5jbGFzc05hbWU9PVwiZWR1aS13b3JkcGFzdGVwb3BcIikgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgICAgICBwb3AuaGlkZSgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIGlmKGFsbFBvcHVwcy5sZW5ndGgpXHJcblx0ICAgICAgICAgICAgcG9wLmVkaXRvci5maXJlRXZlbnQoXCJhZnRlcmhpZGVwb3BcIik7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIFBvcHVwLnBvc3RIaWRlID0gY2xvc2VBbGxQb3B1cDtcclxuXHJcblx0ICAgIHZhciBBTkNIT1JfQ0xBU1NFUyA9IFsnZWR1aS1hbmNob3ItdG9wbGVmdCcsJ2VkdWktYW5jaG9yLXRvcHJpZ2h0JyxcclxuXHQgICAgICAgICdlZHVpLWFuY2hvci1ib3R0b21sZWZ0JywnZWR1aS1hbmNob3ItYm90dG9tcmlnaHQnXTtcclxuXHQgICAgUG9wdXAucHJvdG90eXBlID0ge1xyXG5cdCAgICAgICAgU0hBRE9XX1JBRElVUzogNSxcclxuXHQgICAgICAgIGNvbnRlbnQ6IG51bGwsXHJcblx0ICAgICAgICBfaGlkZGVuOiBmYWxzZSxcclxuXHQgICAgICAgIGF1dG9SZW5kZXI6IHRydWUsXHJcblx0ICAgICAgICBjYW5TaWRlTGVmdDogdHJ1ZSxcclxuXHQgICAgICAgIGNhblNpZGVVcDogdHJ1ZSxcclxuXHQgICAgICAgIGluaXRQb3B1cDogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0VUlCYXNlKCk7XHJcblx0ICAgICAgICAgICAgYWxsUG9wdXBzLnB1c2goIHRoaXMgKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRIdG1sVHBsOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICByZXR1cm4gJzxkaXYgaWQ9XCIjI1wiIGNsYXNzPVwiZWR1aS1wb3B1cCAlJVwiIG9ubW91c2Vkb3duPVwicmV0dXJuIGZhbHNlO1wiPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnIDxkaXYgaWQ9XCIjI19ib2R5XCIgY2xhc3M9XCJlZHVpLXBvcHVwLWJvZHlcIj4nICtcclxuXHQgICAgICAgICAgICAgICAgJyA8aWZyYW1lIHN0eWxlPVwicG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDotMTtsZWZ0OjA7dG9wOjA7YmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XCIgZnJhbWVib3JkZXI9XCIwXCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiIHNyYz1cImFib3V0OmJsYW5rXCI+PC9pZnJhbWU+JyArXHJcblx0ICAgICAgICAgICAgICAgICcgPGRpdiBjbGFzcz1cImVkdWktc2hhZG93XCI+PC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICcgPGRpdiBpZD1cIiMjX2NvbnRlbnRcIiBjbGFzcz1cImVkdWktcG9wdXAtY29udGVudFwiPicgK1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmdldENvbnRlbnRIdG1sVHBsKCkgK1xyXG5cdCAgICAgICAgICAgICAgICAnICA8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAgICAgJyA8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzwvZGl2Pic7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0Q29udGVudEh0bWxUcGw6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIGlmKHRoaXMuY29udGVudCl7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb250ZW50ID09ICdzdHJpbmcnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50O1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnQucmVuZGVySHRtbCgpO1xyXG5cdCAgICAgICAgICAgIH1lbHNle1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gJydcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9VSUJhc2VfcG9zdFJlbmRlcjogVUlCYXNlLnByb3RvdHlwZS5wb3N0UmVuZGVyLFxyXG5cdCAgICAgICAgcG9zdFJlbmRlcjogZnVuY3Rpb24gKCl7XHJcblxyXG5cclxuXHQgICAgICAgICAgICBpZiAodGhpcy5jb250ZW50IGluc3RhbmNlb2YgVUlCYXNlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5wb3N0UmVuZGVyKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAvL+aNleiOt+m8oOagh+a7mui9rlxyXG5cdCAgICAgICAgICAgIGlmKCB0aGlzLmNhcHR1cmVXaGVlbCAmJiAhdGhpcy5jYXB0dXJlZCApIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY2FwdHVyZWQgPSB0cnVlO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdmFyIHdpbkhlaWdodCA9ICggZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCB8fCBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodCApICAtIDgwLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgX2hlaWdodCA9IHRoaXMuZ2V0RG9tKCkub2Zmc2V0SGVpZ2h0LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgX3RvcCA9IHVpVXRpbHMuZ2V0Q2xpZW50UmVjdCggdGhpcy5jb21ib3guZ2V0RG9tKCkgKS50b3AsXHJcblx0ICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gdGhpcy5nZXREb20oJ2NvbnRlbnQnKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmciA9IHRoaXMuZ2V0RG9tKCdib2R5JykuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lmcmFtZScpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUgPSB0aGlzO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgaWZyLmxlbmd0aCAmJiAoIGlmciA9IGlmclswXSApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgd2hpbGUoIF90b3AgKyBfaGVpZ2h0ID4gd2luSGVpZ2h0ICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgX2hlaWdodCAtPSAzMDtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBjb250ZW50LnN0eWxlLmhlaWdodCA9IF9oZWlnaHQgKyAncHgnO1xyXG5cdCAgICAgICAgICAgICAgICAvL+WQjOatpeabtOaUuWlmcmFtZemrmOW6plxyXG5cdCAgICAgICAgICAgICAgICBpZnIgJiYgKCBpZnIuc3R5bGUuaGVpZ2h0ID0gX2hlaWdodCArICdweCcgKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIC8v6Zi75q2i5ZyoY29tYm945LiK55qE6byg5qCH5rua6L2u5LqL5Lu2LCDpmLLmraLnlKjmiLfnmoTmraPluLjmk43kvZzooqvor6/op6NcclxuXHQgICAgICAgICAgICAgICAgaWYoIHdpbmRvdy5YTUxIdHRwUmVxdWVzdCApIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5vbiggY29udGVudCwgKCAnb25tb3VzZXdoZWVsJyBpbiBkb2N1bWVudC5ib2R5ICkgPyAnbW91c2V3aGVlbCcgOidET01Nb3VzZVNjcm9sbCcgLCBmdW5jdGlvbihlKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoZS5wcmV2ZW50RGVmYXVsdCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGUud2hlZWxEZWx0YSApIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuc2Nyb2xsVG9wIC09ICggZS53aGVlbERlbHRhIC8gMTIwICkqNjA7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LnNjcm9sbFRvcCAtPSAoIGUuZGV0YWlsIC8gLTMgKSo2MDtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAvL2llNlxyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMub24oIHRoaXMuZ2V0RG9tKCksICdtb3VzZXdoZWVsJyAsIGZ1bmN0aW9uKGUpe1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlLnJldHVyblZhbHVlID0gZmFsc2U7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmdldERvbSgnY29udGVudCcpLnNjcm9sbFRvcCAtPSAoIGUud2hlZWxEZWx0YSAvIDEyMCApKjYwO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3Bvc3RSZW5kZXJBZnRlcicpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaGlkZSh0cnVlKTtcclxuXHQgICAgICAgICAgICB0aGlzLl9VSUJhc2VfcG9zdFJlbmRlcigpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9kb0F1dG9SZW5kZXI6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5nZXREb20oKSAmJiB0aGlzLmF1dG9SZW5kZXIpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIoKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgbWVzdXJlU2l6ZTogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdmFyIGJveCA9IHRoaXMuZ2V0RG9tKCdjb250ZW50Jyk7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHVpVXRpbHMuZ2V0Q2xpZW50UmVjdChib3gpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGZpdFNpemU6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIGlmKCB0aGlzLmNhcHR1cmVXaGVlbCAmJiB0aGlzLnNpemVkICkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fX3NpemU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMuc2l6ZWQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgIHZhciBwb3BCb2R5RWwgPSB0aGlzLmdldERvbSgnYm9keScpO1xyXG5cdCAgICAgICAgICAgIHBvcEJvZHlFbC5zdHlsZS53aWR0aCA9ICcnO1xyXG5cdCAgICAgICAgICAgIHBvcEJvZHlFbC5zdHlsZS5oZWlnaHQgPSAnJztcclxuXHQgICAgICAgICAgICB2YXIgc2l6ZSA9IHRoaXMubWVzdXJlU2l6ZSgpO1xyXG5cdCAgICAgICAgICAgIGlmKCB0aGlzLmNhcHR1cmVXaGVlbCApIHtcclxuXHQgICAgICAgICAgICAgICAgcG9wQm9keUVsLnN0eWxlLndpZHRoID0gIC0oLTIwIC1zaXplLndpZHRoKSArICdweCc7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBoZWlnaHQgPSBwYXJzZUludCggdGhpcy5nZXREb20oJ2NvbnRlbnQnKS5zdHlsZS5oZWlnaHQsIDEwICk7XHJcblx0ICAgICAgICAgICAgICAgICF3aW5kb3cuaXNOYU4oIGhlaWdodCApICYmICggc2l6ZS5oZWlnaHQgPSBoZWlnaHQgKTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBwb3BCb2R5RWwuc3R5bGUud2lkdGggPSAgc2l6ZS53aWR0aCArICdweCc7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHBvcEJvZHlFbC5zdHlsZS5oZWlnaHQgPSBzaXplLmhlaWdodCArICdweCc7XHJcblx0ICAgICAgICAgICAgdGhpcy5fX3NpemUgPSBzaXplO1xyXG5cdCAgICAgICAgICAgIHRoaXMuY2FwdHVyZVdoZWVsICYmICh0aGlzLmdldERvbSgnY29udGVudCcpLnN0eWxlLm92ZXJmbG93ID0gJ2F1dG8nKTtcclxuXHQgICAgICAgICAgICByZXR1cm4gc2l6ZTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzaG93QW5jaG9yOiBmdW5jdGlvbiAoIGVsZW1lbnQsIGhveiApe1xyXG5cdCAgICAgICAgICAgIHRoaXMuc2hvd0FuY2hvclJlY3QoIHVpVXRpbHMuZ2V0Q2xpZW50UmVjdCggZWxlbWVudCApLCBob3ogKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzaG93QW5jaG9yUmVjdDogZnVuY3Rpb24gKCByZWN0LCBob3osIGFkaiApe1xyXG5cdCAgICAgICAgICAgIHRoaXMuX2RvQXV0b1JlbmRlcigpO1xyXG5cdCAgICAgICAgICAgIHZhciB2cFJlY3QgPSB1aVV0aWxzLmdldFZpZXdwb3J0UmVjdCgpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuZ2V0RG9tKCkuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG5cdCAgICAgICAgICAgIHRoaXMuX3Nob3coKTtcclxuXHQgICAgICAgICAgICB2YXIgcG9wU2l6ZSA9IHRoaXMuZml0U2l6ZSgpO1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgc2lkZUxlZnQsIHNpZGVVcCwgbGVmdCwgdG9wO1xyXG5cdCAgICAgICAgICAgIGlmIChob3opIHtcclxuXHQgICAgICAgICAgICAgICAgc2lkZUxlZnQgPSB0aGlzLmNhblNpZGVMZWZ0ICYmIChyZWN0LnJpZ2h0ICsgcG9wU2l6ZS53aWR0aCA+IHZwUmVjdC5yaWdodCAmJiByZWN0LmxlZnQgPiBwb3BTaXplLndpZHRoKTtcclxuXHQgICAgICAgICAgICAgICAgc2lkZVVwID0gdGhpcy5jYW5TaWRlVXAgJiYgKHJlY3QudG9wICsgcG9wU2l6ZS5oZWlnaHQgPiB2cFJlY3QuYm90dG9tICYmIHJlY3QuYm90dG9tID4gcG9wU2l6ZS5oZWlnaHQpO1xyXG5cdCAgICAgICAgICAgICAgICBsZWZ0ID0gKHNpZGVMZWZ0ID8gcmVjdC5sZWZ0IC0gcG9wU2l6ZS53aWR0aCA6IHJlY3QucmlnaHQpO1xyXG5cdCAgICAgICAgICAgICAgICB0b3AgPSAoc2lkZVVwID8gcmVjdC5ib3R0b20gLSBwb3BTaXplLmhlaWdodCA6IHJlY3QudG9wKTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBzaWRlTGVmdCA9IHRoaXMuY2FuU2lkZUxlZnQgJiYgKHJlY3QucmlnaHQgKyBwb3BTaXplLndpZHRoID4gdnBSZWN0LnJpZ2h0ICYmIHJlY3QubGVmdCA+IHBvcFNpemUud2lkdGgpO1xyXG5cdCAgICAgICAgICAgICAgICBzaWRlVXAgPSB0aGlzLmNhblNpZGVVcCAmJiAocmVjdC50b3AgKyBwb3BTaXplLmhlaWdodCA+IHZwUmVjdC5ib3R0b20gJiYgcmVjdC5ib3R0b20gPiBwb3BTaXplLmhlaWdodCk7XHJcblx0ICAgICAgICAgICAgICAgIGxlZnQgPSAoc2lkZUxlZnQgPyByZWN0LnJpZ2h0IC0gcG9wU2l6ZS53aWR0aCA6IHJlY3QubGVmdCk7XHJcblx0ICAgICAgICAgICAgICAgIHRvcCA9IChzaWRlVXAgPyByZWN0LnRvcCAtIHBvcFNpemUuaGVpZ2h0IDogcmVjdC5ib3R0b20pO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgdmFyIHBvcEVsID0gdGhpcy5nZXREb20oKTtcclxuXHQgICAgICAgICAgICB1aVV0aWxzLnNldFZpZXdwb3J0T2Zmc2V0KHBvcEVsLCB7XHJcblx0ICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnQsXHJcblx0ICAgICAgICAgICAgICAgIHRvcDogdG9wXHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlQ2xhc3Nlcyhwb3BFbCwgQU5DSE9SX0NMQVNTRVMpO1xyXG5cdCAgICAgICAgICAgIHBvcEVsLmNsYXNzTmFtZSArPSAnICcgKyBBTkNIT1JfQ0xBU1NFU1soc2lkZVVwID8gMSA6IDApICogMiArIChzaWRlTGVmdCA/IDEgOiAwKV07XHJcblx0ICAgICAgICAgICAgaWYodGhpcy5lZGl0b3Ipe1xyXG5cdCAgICAgICAgICAgICAgICBwb3BFbC5zdHlsZS56SW5kZXggPSB0aGlzLmVkaXRvci5jb250YWluZXIuc3R5bGUuekluZGV4ICogMSArIDEwO1xyXG5cdCAgICAgICAgICAgICAgICBiYWlkdS5lZGl0b3IudWkudWlVdGlscy5nZXRGaXhlZExheWVyKCkuc3R5bGUuekluZGV4ID0gcG9wRWwuc3R5bGUuekluZGV4IC0gMTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy5nZXREb20oKS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG5cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzaG93QXQ6IGZ1bmN0aW9uIChvZmZzZXQpIHtcclxuXHQgICAgICAgICAgICB2YXIgbGVmdCA9IG9mZnNldC5sZWZ0O1xyXG5cdCAgICAgICAgICAgIHZhciB0b3AgPSBvZmZzZXQudG9wO1xyXG5cdCAgICAgICAgICAgIHZhciByZWN0ID0ge1xyXG5cdCAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0LFxyXG5cdCAgICAgICAgICAgICAgICB0b3A6IHRvcCxcclxuXHQgICAgICAgICAgICAgICAgcmlnaHQ6IGxlZnQsXHJcblx0ICAgICAgICAgICAgICAgIGJvdHRvbTogdG9wLFxyXG5cdCAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXHJcblx0ICAgICAgICAgICAgICAgIHdpZHRoOiAwXHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICB0aGlzLnNob3dBbmNob3JSZWN0KHJlY3QsIGZhbHNlLCB0cnVlKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfc2hvdzogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuX2hpZGRlbikge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgYm94ID0gdGhpcy5nZXREb20oKTtcclxuXHQgICAgICAgICAgICAgICAgYm94LnN0eWxlLmRpc3BsYXkgPSAnJztcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5faGlkZGVuID0gZmFsc2U7XHJcbi8vXHQgICAgICAgICAgICAgICAgaWYgKGJveC5zZXRBY3RpdmUpIHtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgYm94LnNldEFjdGl2ZSgpO1xyXG4vL1x0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3Nob3cnKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgaXNIaWRkZW46IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9oaWRkZW47XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgc2hvdzogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdGhpcy5fZG9BdXRvUmVuZGVyKCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5fc2hvdygpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGhpZGU6IGZ1bmN0aW9uIChub3ROb2ZpdHkpe1xyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5faGlkZGVuICYmIHRoaXMuZ2V0RG9tKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5nZXREb20oKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9oaWRkZW4gPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIW5vdE5vZml0eSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2hpZGUnKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBxdWVyeUF1dG9IaWRlOiBmdW5jdGlvbiAoZWwpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiAhZWwgfHwgIXVpVXRpbHMuY29udGFpbnModGhpcy5nZXREb20oKSwgZWwpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICB1dGlscy5pbmhlcml0cyhQb3B1cCwgVUlCYXNlKTtcclxuXHQgICAgXHJcblx0ICAgIGRvbVV0aWxzLm9uKCBkb2N1bWVudCwgJ21vdXNlZG93bicsIGZ1bmN0aW9uICggZXZ0ICkge1xyXG5cdCAgICAgICAgdmFyIGVsID0gZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudDtcclxuXHQgICAgICAgIGNsb3NlQWxsUG9wdXAoIGV2dCxlbCApO1xyXG5cdCAgICB9ICk7XHJcblx0ICAgIGRvbVV0aWxzLm9uKCB3aW5kb3csICdzY3JvbGwnLCBmdW5jdGlvbiAoZXZ0LGVsKSB7XHJcblx0ICAgICAgICBjbG9zZUFsbFBvcHVwKCBldnQsZWwgKTtcclxuXHQgICAgfSApO1xyXG5cclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gdWkvY29sb3JwaWNrZXIuanNcclxuXHQvLy9pbXBvcnQgY29yZVxyXG5cdC8vL2ltcG9ydCB1aWNvcmVcclxuXHQoZnVuY3Rpb24gKCl7XHJcblx0ICAgIHZhciB1dGlscyA9IGJhaWR1LmVkaXRvci51dGlscyxcclxuXHQgICAgICAgIFVJQmFzZSA9IGJhaWR1LmVkaXRvci51aS5VSUJhc2UsXHJcblx0ICAgICAgICBDb2xvclBpY2tlciA9IGJhaWR1LmVkaXRvci51aS5Db2xvclBpY2tlciA9IGZ1bmN0aW9uIChvcHRpb25zKXtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRPcHRpb25zKG9wdGlvbnMpO1xyXG5cdCAgICAgICAgICAgIHRoaXMubm9Db2xvclRleHQgPSB0aGlzLm5vQ29sb3JUZXh0IHx8IHRoaXMuZWRpdG9yLmdldExhbmcoXCJjbGVhckNvbG9yXCIpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdFVJQmFzZSgpO1xyXG5cdCAgICAgICAgfTtcclxuXHJcblx0ICAgIENvbG9yUGlja2VyLnByb3RvdHlwZSA9IHtcclxuXHQgICAgICAgIGdldEh0bWxUcGw6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiBnZW5Db2xvclBpY2tlcih0aGlzLm5vQ29sb3JUZXh0LHRoaXMuZWRpdG9yKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfb25UYWJsZUNsaWNrOiBmdW5jdGlvbiAoZXZ0KXtcclxuXHQgICAgICAgICAgICB2YXIgdGd0ID0gZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudDtcclxuXHQgICAgICAgICAgICB2YXIgY29sb3IgPSB0Z3QuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbG9yJyk7XHJcblx0ICAgICAgICAgICAgaWYgKGNvbG9yKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCdwaWNrY29sb3InLCBjb2xvcik7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9vblRhYmxlT3ZlcjogZnVuY3Rpb24gKGV2dCl7XHJcblx0ICAgICAgICAgICAgdmFyIHRndCA9IGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQ7XHJcblx0ICAgICAgICAgICAgdmFyIGNvbG9yID0gdGd0LmdldEF0dHJpYnV0ZSgnZGF0YS1jb2xvcicpO1xyXG5cdCAgICAgICAgICAgIGlmIChjb2xvcikge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmdldERvbSgncHJldmlldycpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IGNvbG9yO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfb25UYWJsZU91dDogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdGhpcy5nZXREb20oJ3ByZXZpZXcnKS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnJztcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfb25QaWNrTm9Db2xvcjogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ3BpY2tub2NvbG9yJyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIHV0aWxzLmluaGVyaXRzKENvbG9yUGlja2VyLCBVSUJhc2UpO1xyXG5cclxuXHQgICAgdmFyIENPTE9SUyA9IChcclxuXHQgICAgICAgICdmZmZmZmYsMDAwMDAwLGVlZWNlMSwxZjQ5N2QsNGY4MWJkLGMwNTA0ZCw5YmJiNTksODA2NGEyLDRiYWNjNixmNzk2NDYsJyArXHJcblx0ICAgICAgICAgICAgJ2YyZjJmMiw3ZjdmN2YsZGRkOWMzLGM2ZDlmMCxkYmU1ZjEsZjJkY2RiLGViZjFkZCxlNWUwZWMsZGJlZWYzLGZkZWFkYSwnICtcclxuXHQgICAgICAgICAgICAnZDhkOGQ4LDU5NTk1OSxjNGJkOTcsOGRiM2UyLGI4Y2NlNCxlNWI5YjcsZDdlM2JjLGNjYzFkOSxiN2RkZTgsZmJkNWI1LCcgK1xyXG5cdCAgICAgICAgICAgICdiZmJmYmYsM2YzZjNmLDkzODk1Myw1NDhkZDQsOTViM2Q3LGQ5OTY5NCxjM2Q2OWIsYjJhMmM3LDkyY2RkYyxmYWMwOGYsJyArXHJcblx0ICAgICAgICAgICAgJ2E1YTVhNSwyNjI2MjYsNDk0NDI5LDE3MzY1ZCwzNjYwOTIsOTUzNzM0LDc2OTIzYyw1ZjQ5N2EsMzE4NTliLGUzNmMwOSwnICtcclxuXHQgICAgICAgICAgICAnN2Y3ZjdmLDBjMGMwYywxZDFiMTAsMGYyNDNlLDI0NDA2MSw2MzI0MjMsNGY2MTI4LDNmMzE1MSwyMDU4NjcsOTc0ODA2LCcgK1xyXG5cdCAgICAgICAgICAgICdjMDAwMDAsZmYwMDAwLGZmYzAwMCxmZmZmMDAsOTJkMDUwLDAwYjA1MCwwMGIwZjAsMDA3MGMwLDAwMjA2MCw3MDMwYTAsJykuc3BsaXQoJywnKTtcclxuXHJcblx0ICAgIGZ1bmN0aW9uIGdlbkNvbG9yUGlja2VyKG5vQ29sb3JUZXh0LGVkaXRvcil7XHJcblx0ICAgICAgICB2YXIgaHRtbCA9ICc8ZGl2IGlkPVwiIyNcIiBjbGFzcz1cImVkdWktY29sb3JwaWNrZXIgJSVcIj4nICtcclxuXHQgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImVkdWktY29sb3JwaWNrZXItdG9wYmFyIGVkdWktY2xlYXJmaXhcIj4nICtcclxuXHQgICAgICAgICAgICAnPGRpdiB1bnNlbGVjdGFibGU9XCJvblwiIGlkPVwiIyNfcHJldmlld1wiIGNsYXNzPVwiZWR1aS1jb2xvcnBpY2tlci1wcmV2aWV3XCI+PC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgJzxkaXYgdW5zZWxlY3RhYmxlPVwib25cIiBjbGFzcz1cImVkdWktY29sb3JwaWNrZXItbm9jb2xvclwiIG9uY2xpY2s9XCIkJC5fb25QaWNrTm9Db2xvcihldmVudCwgdGhpcyk7XCI+Jysgbm9Db2xvclRleHQgKyc8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAnPC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgJzx0YWJsZSAgY2xhc3M9XCJlZHVpLWJveFwiIHN0eWxlPVwiYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcIiBvbm1vdXNlb3Zlcj1cIiQkLl9vblRhYmxlT3ZlcihldmVudCwgdGhpcyk7XCIgb25tb3VzZW91dD1cIiQkLl9vblRhYmxlT3V0KGV2ZW50LCB0aGlzKTtcIiBvbmNsaWNrPVwicmV0dXJuICQkLl9vblRhYmxlQ2xpY2soZXZlbnQsIHRoaXMpO1wiIGNlbGxzcGFjaW5nPVwiMFwiIGNlbGxwYWRkaW5nPVwiMFwiPicgK1xyXG5cdCAgICAgICAgICAgICc8dHIgc3R5bGU9XCJib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RkZDtmb250LXNpemU6IDEzcHg7bGluZS1oZWlnaHQ6IDI1cHg7Y29sb3I6IzM5QztwYWRkaW5nLXRvcDogMnB4XCI+PHRkIGNvbHNwYW49XCIxMFwiPicrZWRpdG9yLmdldExhbmcoXCJ0aGVtZUNvbG9yXCIpKyc8L3RkPiA8L3RyPicrXHJcblx0ICAgICAgICAgICAgJzx0ciBjbGFzcz1cImVkdWktY29sb3JwaWNrZXItdGFibGVmaXJzdHJvd1wiID4nO1xyXG5cdCAgICAgICAgZm9yICh2YXIgaT0wOyBpPENPTE9SUy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgIGlmIChpICYmIGklMTAgPT09IDApIHtcclxuXHQgICAgICAgICAgICAgICAgaHRtbCArPSAnPC90cj4nKyhpPT02MD8nPHRyIHN0eWxlPVwiYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNkZGQ7Zm9udC1zaXplOiAxM3B4O2xpbmUtaGVpZ2h0OiAyNXB4O2NvbG9yOiMzOUM7XCI+PHRkIGNvbHNwYW49XCIxMFwiPicrZWRpdG9yLmdldExhbmcoXCJzdGFuZGFyZENvbG9yXCIpKyc8L3RkPjwvdHI+JzonJykrJzx0cicrKGk9PTYwPycgY2xhc3M9XCJlZHVpLWNvbG9ycGlja2VyLXRhYmxlZmlyc3Ryb3dcIic6JycpKyc+JztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaHRtbCArPSBpPDcwID8gJzx0ZCBzdHlsZT1cInBhZGRpbmc6IDAgMnB4O1wiPjxhIGhpZGVmb2N1cyB0aXRsZT1cIicrQ09MT1JTW2ldKydcIiBvbmNsaWNrPVwicmV0dXJuIGZhbHNlO1wiIGhyZWY9XCJqYXZhc2NyaXB0OlwiIHVuc2VsZWN0YWJsZT1cIm9uXCIgY2xhc3M9XCJlZHVpLWJveCBlZHVpLWNvbG9ycGlja2VyLWNvbG9yY2VsbFwiJyArXHJcblx0ICAgICAgICAgICAgICAgICcgZGF0YS1jb2xvcj1cIiMnKyBDT0xPUlNbaV0gKydcIicrXHJcblx0ICAgICAgICAgICAgICAgICcgc3R5bGU9XCJiYWNrZ3JvdW5kLWNvbG9yOiMnKyBDT0xPUlNbaV0gKyc7Ym9yZGVyOnNvbGlkICNjY2M7JytcclxuXHQgICAgICAgICAgICAgICAgKGk8MTAgfHwgaT49NjA/J2JvcmRlci13aWR0aDoxcHg7JzpcclxuXHQgICAgICAgICAgICAgICAgICAgIGk+PTEwJiZpPDIwPydib3JkZXItd2lkdGg6MXB4IDFweCAwIDFweDsnOlxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAnYm9yZGVyLXdpZHRoOjAgMXB4IDAgMXB4OycpK1xyXG5cdCAgICAgICAgICAgICAgICAnXCInICtcclxuXHQgICAgICAgICAgICAgICAgJz48L2E+PC90ZD4nOicnO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaHRtbCArPSAnPC90cj48L3RhYmxlPjwvZGl2Pic7XHJcblx0ICAgICAgICByZXR1cm4gaHRtbDtcclxuXHQgICAgfVxyXG5cdH0pKCk7XHJcblxyXG5cclxuXHQvLyB1aS90YWJsZXBpY2tlci5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vaW1wb3J0IHVpY29yZVxyXG5cdChmdW5jdGlvbiAoKXtcclxuXHQgICAgdmFyIHV0aWxzID0gYmFpZHUuZWRpdG9yLnV0aWxzLFxyXG5cdCAgICAgICAgdWlVdGlscyA9IGJhaWR1LmVkaXRvci51aS51aVV0aWxzLFxyXG5cdCAgICAgICAgVUlCYXNlID0gYmFpZHUuZWRpdG9yLnVpLlVJQmFzZTtcclxuXHQgICAgXHJcblx0ICAgIHZhciBUYWJsZVBpY2tlciA9IGJhaWR1LmVkaXRvci51aS5UYWJsZVBpY2tlciA9IGZ1bmN0aW9uIChvcHRpb25zKXtcclxuXHQgICAgICAgIHRoaXMuaW5pdE9wdGlvbnMob3B0aW9ucyk7XHJcblx0ICAgICAgICB0aGlzLmluaXRUYWJsZVBpY2tlcigpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBUYWJsZVBpY2tlci5wcm90b3R5cGUgPSB7XHJcblx0ICAgICAgICBkZWZhdWx0TnVtUm93czogMTAsXHJcblx0ICAgICAgICBkZWZhdWx0TnVtQ29sczogMTAsXHJcblx0ICAgICAgICBtYXhOdW1Sb3dzOiAyMCxcclxuXHQgICAgICAgIG1heE51bUNvbHM6IDIwLFxyXG5cdCAgICAgICAgbnVtUm93czogMTAsXHJcblx0ICAgICAgICBudW1Db2xzOiAxMCxcclxuXHQgICAgICAgIGxlbmd0aE9mQ2VsbFNpZGU6IDIyLFxyXG5cdCAgICAgICAgaW5pdFRhYmxlUGlja2VyOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRVSUJhc2UoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRIdG1sVHBsOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgIHJldHVybiAnPGRpdiBpZD1cIiMjXCIgY2xhc3M9XCJlZHVpLXRhYmxlcGlja2VyICUlXCI+JyArXHJcblx0ICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImVkdWktdGFibGVwaWNrZXItYm9keVwiPicgK1xyXG5cdCAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZWR1aS1pbmZvYXJlYVwiPicgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAnPHNwYW4gaWQ9XCIjI19sYWJlbFwiIGNsYXNzPVwiZWR1aS1sYWJlbFwiPjwvc3Bhbj4nICtcclxuXHQgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJlZHVpLXBpY2thcmVhXCInICtcclxuXHQgICAgICAgICAgICAgICAgICAgJyBvbm1vdXNlbW92ZT1cIiQkLl9vbk1vdXNlTW92ZShldmVudCwgdGhpcyk7XCInICtcclxuXHQgICAgICAgICAgICAgICAgICAgJyBvbm1vdXNlb3Zlcj1cIiQkLl9vbk1vdXNlT3ZlcihldmVudCwgdGhpcyk7XCInICtcclxuXHQgICAgICAgICAgICAgICAgICAgJyBvbm1vdXNlb3V0PVwiJCQuX29uTW91c2VPdXQoZXZlbnQsIHRoaXMpO1wiJyArXHJcblx0ICAgICAgICAgICAgICAgICAgICcgb25jbGljaz1cIiQkLl9vbkNsaWNrKGV2ZW50LCB0aGlzKTtcIicgK1xyXG5cdCAgICAgICAgICAgICAgICAgICc+JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAnPGRpdiBpZD1cIiMjX292ZXJsYXlcIiBjbGFzcz1cImVkdWktb3ZlcmxheVwiPjwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzwvZGl2Pic7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgX1VJQmFzZV9yZW5kZXI6IFVJQmFzZS5wcm90b3R5cGUucmVuZGVyLFxyXG5cdCAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiAoaG9sZGVyKXtcclxuXHQgICAgICAgICAgICB0aGlzLl9VSUJhc2VfcmVuZGVyKGhvbGRlcik7XHJcblx0ICAgICAgICAgICAgdGhpcy5nZXREb20oJ2xhYmVsJykuaW5uZXJIVE1MID0gJzAnK3RoaXMuZWRpdG9yLmdldExhbmcoXCJ0X3Jvd1wiKSsnIHggMCcrdGhpcy5lZGl0b3IuZ2V0TGFuZyhcInRfY29sXCIpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF90cmFjazogZnVuY3Rpb24gKG51bUNvbHMsIG51bVJvd3Mpe1xyXG5cdCAgICAgICAgICAgIHZhciBzdHlsZSA9IHRoaXMuZ2V0RG9tKCdvdmVybGF5Jykuc3R5bGU7XHJcblx0ICAgICAgICAgICAgdmFyIHNpZGVMZW4gPSB0aGlzLmxlbmd0aE9mQ2VsbFNpZGU7XHJcblx0ICAgICAgICAgICAgc3R5bGUud2lkdGggPSBudW1Db2xzICogc2lkZUxlbiArICdweCc7XHJcblx0ICAgICAgICAgICAgc3R5bGUuaGVpZ2h0ID0gbnVtUm93cyAqIHNpZGVMZW4gKyAncHgnO1xyXG5cdCAgICAgICAgICAgIHZhciBsYWJlbCA9IHRoaXMuZ2V0RG9tKCdsYWJlbCcpO1xyXG5cdCAgICAgICAgICAgIGxhYmVsLmlubmVySFRNTCA9IG51bUNvbHMgK3RoaXMuZWRpdG9yLmdldExhbmcoXCJ0X2NvbFwiKSsnIHggJyArIG51bVJvd3MgKyB0aGlzLmVkaXRvci5nZXRMYW5nKFwidF9yb3dcIik7XHJcblx0ICAgICAgICAgICAgdGhpcy5udW1Db2xzID0gbnVtQ29scztcclxuXHQgICAgICAgICAgICB0aGlzLm51bVJvd3MgPSBudW1Sb3dzO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9vbk1vdXNlT3ZlcjogZnVuY3Rpb24gKGV2dCwgZWwpe1xyXG5cdCAgICAgICAgICAgIHZhciByZWwgPSBldnQucmVsYXRlZFRhcmdldCB8fCBldnQuZnJvbUVsZW1lbnQ7XHJcblx0ICAgICAgICAgICAgaWYgKCF1aVV0aWxzLmNvbnRhaW5zKGVsLCByZWwpICYmIGVsICE9PSByZWwpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5nZXREb20oJ2xhYmVsJykuaW5uZXJIVE1MID0gJzAnK3RoaXMuZWRpdG9yLmdldExhbmcoXCJ0X2NvbFwiKSsnIHggMCcrdGhpcy5lZGl0b3IuZ2V0TGFuZyhcInRfcm93XCIpO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmdldERvbSgnb3ZlcmxheScpLnN0eWxlLnZpc2liaWxpdHkgPSAnJztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgX29uTW91c2VPdXQ6IGZ1bmN0aW9uIChldnQsIGVsKXtcclxuXHQgICAgICAgICAgICB2YXIgcmVsID0gZXZ0LnJlbGF0ZWRUYXJnZXQgfHwgZXZ0LnRvRWxlbWVudDtcclxuXHQgICAgICAgICAgICBpZiAoIXVpVXRpbHMuY29udGFpbnMoZWwsIHJlbCkgJiYgZWwgIT09IHJlbCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmdldERvbSgnbGFiZWwnKS5pbm5lckhUTUwgPSAnMCcrdGhpcy5lZGl0b3IuZ2V0TGFuZyhcInRfY29sXCIpKycgeCAwJyt0aGlzLmVkaXRvci5nZXRMYW5nKFwidF9yb3dcIik7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZ2V0RG9tKCdvdmVybGF5Jykuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfb25Nb3VzZU1vdmU6IGZ1bmN0aW9uIChldnQsIGVsKXtcclxuXHQgICAgICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLmdldERvbSgnb3ZlcmxheScpLnN0eWxlO1xyXG5cdCAgICAgICAgICAgIHZhciBvZmZzZXQgPSB1aVV0aWxzLmdldEV2ZW50T2Zmc2V0KGV2dCk7XHJcblx0ICAgICAgICAgICAgdmFyIHNpZGVMZW4gPSB0aGlzLmxlbmd0aE9mQ2VsbFNpZGU7XHJcblx0ICAgICAgICAgICAgdmFyIG51bUNvbHMgPSBNYXRoLmNlaWwob2Zmc2V0LmxlZnQgLyBzaWRlTGVuKTtcclxuXHQgICAgICAgICAgICB2YXIgbnVtUm93cyA9IE1hdGguY2VpbChvZmZzZXQudG9wIC8gc2lkZUxlbik7XHJcblx0ICAgICAgICAgICAgdGhpcy5fdHJhY2sobnVtQ29scywgbnVtUm93cyk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgX29uQ2xpY2s6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCdwaWNrdGFibGUnLCB0aGlzLm51bUNvbHMsIHRoaXMubnVtUm93cyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIHV0aWxzLmluaGVyaXRzKFRhYmxlUGlja2VyLCBVSUJhc2UpO1xyXG5cdH0pKCk7XHJcblxyXG5cclxuXHQvLyB1aS9zdGF0ZWZ1bC5qc1xyXG5cdChmdW5jdGlvbiAoKXtcclxuXHQgICAgdmFyIGJyb3dzZXIgPSBiYWlkdS5lZGl0b3IuYnJvd3NlcixcclxuXHQgICAgICAgIGRvbVV0aWxzID0gYmFpZHUuZWRpdG9yLmRvbS5kb21VdGlscyxcclxuXHQgICAgICAgIHVpVXRpbHMgPSBiYWlkdS5lZGl0b3IudWkudWlVdGlscztcclxuXHQgICAgXHJcblx0ICAgIHZhciBUUExfU1RBVEVGVUwgPSAnb25tb3VzZWRvd249XCIkJC5TdGF0ZWZ1bF9vbk1vdXNlRG93bihldmVudCwgdGhpcyk7XCInICtcclxuXHQgICAgICAgICcgb25tb3VzZXVwPVwiJCQuU3RhdGVmdWxfb25Nb3VzZVVwKGV2ZW50LCB0aGlzKTtcIicgK1xyXG5cdCAgICAgICAgKCBicm93c2VyLmllID8gKFxyXG5cdCAgICAgICAgJyBvbm1vdXNlZW50ZXI9XCIkJC5TdGF0ZWZ1bF9vbk1vdXNlRW50ZXIoZXZlbnQsIHRoaXMpO1wiJyArXHJcblx0ICAgICAgICAnIG9ubW91c2VsZWF2ZT1cIiQkLlN0YXRlZnVsX29uTW91c2VMZWF2ZShldmVudCwgdGhpcyk7XCInIClcclxuXHQgICAgICAgIDogKFxyXG5cdCAgICAgICAgJyBvbm1vdXNlb3Zlcj1cIiQkLlN0YXRlZnVsX29uTW91c2VPdmVyKGV2ZW50LCB0aGlzKTtcIicgK1xyXG5cdCAgICAgICAgJyBvbm1vdXNlb3V0PVwiJCQuU3RhdGVmdWxfb25Nb3VzZU91dChldmVudCwgdGhpcyk7XCInICkpO1xyXG5cdCAgICBcclxuXHQgICAgYmFpZHUuZWRpdG9yLnVpLlN0YXRlZnVsID0ge1xyXG5cdCAgICAgICAgYWx3YWx5c0hvdmVyYWJsZTogZmFsc2UsXHJcblx0ICAgICAgICB0YXJnZXQ6bnVsbCwvL+ebruagh+WFg+e0oOWSjHRoaXPmjIflkJFkb23kuI3kuIDmoLdcclxuXHQgICAgICAgIFN0YXRlZnVsX2luaXQ6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHRoaXMuX1N0YXRlZnVsX2RHZXRIdG1sVHBsID0gdGhpcy5nZXRIdG1sVHBsO1xyXG5cdCAgICAgICAgICAgIHRoaXMuZ2V0SHRtbFRwbCA9IHRoaXMuU3RhdGVmdWxfZ2V0SHRtbFRwbDtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBTdGF0ZWZ1bF9nZXRIdG1sVHBsOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB2YXIgdHBsID0gdGhpcy5fU3RhdGVmdWxfZEdldEh0bWxUcGwoKTtcclxuXHQgICAgICAgICAgICAvLyDkvb/nlKhmdW5jdGlvbumBv+WFjSTovazkuYlcclxuXHQgICAgICAgICAgICByZXR1cm4gdHBsLnJlcGxhY2UoL3N0YXRlZnVsL2csIGZ1bmN0aW9uICgpeyByZXR1cm4gVFBMX1NUQVRFRlVMOyB9KTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBTdGF0ZWZ1bF9vbk1vdXNlRW50ZXI6IGZ1bmN0aW9uIChldnQsIGVsKXtcclxuXHQgICAgICAgICAgICB0aGlzLnRhcmdldD1lbDtcclxuXHQgICAgICAgICAgICBpZiAoIXRoaXMuaXNEaXNhYmxlZCgpIHx8IHRoaXMuYWx3YWx5c0hvdmVyYWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmFkZFN0YXRlKCdob3ZlcicpO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgnb3ZlcicpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBTdGF0ZWZ1bF9vbk1vdXNlTGVhdmU6IGZ1bmN0aW9uIChldnQsIGVsKXtcclxuXHQgICAgICAgICAgICBpZiAoIXRoaXMuaXNEaXNhYmxlZCgpIHx8IHRoaXMuYWx3YWx5c0hvdmVyYWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVN0YXRlKCdob3ZlcicpO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVN0YXRlKCdhY3RpdmUnKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ291dCcpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBTdGF0ZWZ1bF9vbk1vdXNlT3ZlcjogZnVuY3Rpb24gKGV2dCwgZWwpe1xyXG5cdCAgICAgICAgICAgIHZhciByZWwgPSBldnQucmVsYXRlZFRhcmdldDtcclxuXHQgICAgICAgICAgICBpZiAoIXVpVXRpbHMuY29udGFpbnMoZWwsIHJlbCkgJiYgZWwgIT09IHJlbCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLlN0YXRlZnVsX29uTW91c2VFbnRlcihldnQsIGVsKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgU3RhdGVmdWxfb25Nb3VzZU91dDogZnVuY3Rpb24gKGV2dCwgZWwpe1xyXG5cdCAgICAgICAgICAgIHZhciByZWwgPSBldnQucmVsYXRlZFRhcmdldDtcclxuXHQgICAgICAgICAgICBpZiAoIXVpVXRpbHMuY29udGFpbnMoZWwsIHJlbCkgJiYgZWwgIT09IHJlbCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLlN0YXRlZnVsX29uTW91c2VMZWF2ZShldnQsIGVsKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgU3RhdGVmdWxfb25Nb3VzZURvd246IGZ1bmN0aW9uIChldnQsIGVsKXtcclxuXHQgICAgICAgICAgICBpZiAoIXRoaXMuaXNEaXNhYmxlZCgpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuYWRkU3RhdGUoJ2FjdGl2ZScpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBTdGF0ZWZ1bF9vbk1vdXNlVXA6IGZ1bmN0aW9uIChldnQsIGVsKXtcclxuXHQgICAgICAgICAgICBpZiAoIXRoaXMuaXNEaXNhYmxlZCgpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlU3RhdGUoJ2FjdGl2ZScpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBTdGF0ZWZ1bF9wb3N0UmVuZGVyOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCAmJiAhdGhpcy5oYXNTdGF0ZSgnZGlzYWJsZWQnKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmFkZFN0YXRlKCdkaXNhYmxlZCcpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBoYXNTdGF0ZTogZnVuY3Rpb24gKHN0YXRlKXtcclxuXHQgICAgICAgICAgICByZXR1cm4gZG9tVXRpbHMuaGFzQ2xhc3ModGhpcy5nZXRTdGF0ZURvbSgpLCAnZWR1aS1zdGF0ZS0nICsgc3RhdGUpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGFkZFN0YXRlOiBmdW5jdGlvbiAoc3RhdGUpe1xyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5oYXNTdGF0ZShzdGF0ZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5nZXRTdGF0ZURvbSgpLmNsYXNzTmFtZSArPSAnIGVkdWktc3RhdGUtJyArIHN0YXRlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICByZW1vdmVTdGF0ZTogZnVuY3Rpb24gKHN0YXRlKXtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5oYXNTdGF0ZShzdGF0ZSkpIHtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlQ2xhc3Nlcyh0aGlzLmdldFN0YXRlRG9tKCksIFsnZWR1aS1zdGF0ZS0nICsgc3RhdGVdKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0U3RhdGVEb206IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERvbSgnc3RhdGUnKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBpc0NoZWNrZWQ6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmhhc1N0YXRlKCdjaGVja2VkJyk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgc2V0Q2hlY2tlZDogZnVuY3Rpb24gKGNoZWNrZWQpe1xyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5pc0Rpc2FibGVkKCkgJiYgY2hlY2tlZCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmFkZFN0YXRlKCdjaGVja2VkJyk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTdGF0ZSgnY2hlY2tlZCcpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBpc0Rpc2FibGVkOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5oYXNTdGF0ZSgnZGlzYWJsZWQnKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzZXREaXNhYmxlZDogZnVuY3Rpb24gKGRpc2FibGVkKXtcclxuXHQgICAgICAgICAgICBpZiAoZGlzYWJsZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTdGF0ZSgnaG92ZXInKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTdGF0ZSgnY2hlY2tlZCcpO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVN0YXRlKCdhY3RpdmUnKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5hZGRTdGF0ZSgnZGlzYWJsZWQnKTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVN0YXRlKCdkaXNhYmxlZCcpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gdWkvYnV0dG9uLmpzXHJcblx0Ly8vaW1wb3J0IGNvcmVcclxuXHQvLy9pbXBvcnQgdWljb3JlXHJcblx0Ly8vaW1wb3J0IHVpL3N0YXRlZnVsLmpzXHJcblx0KGZ1bmN0aW9uICgpe1xyXG5cdCAgICB2YXIgdXRpbHMgPSBiYWlkdS5lZGl0b3IudXRpbHMsXHJcblx0ICAgICAgICBVSUJhc2UgPSBiYWlkdS5lZGl0b3IudWkuVUlCYXNlLFxyXG5cdCAgICAgICAgU3RhdGVmdWwgPSBiYWlkdS5lZGl0b3IudWkuU3RhdGVmdWwsXHJcblx0ICAgICAgICBCdXR0b24gPSBiYWlkdS5lZGl0b3IudWkuQnV0dG9uID0gZnVuY3Rpb24gKG9wdGlvbnMpe1xyXG5cdCAgICAgICAgICAgIGlmKG9wdGlvbnMubmFtZSl7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBidG5OYW1lID0gb3B0aW9ucy5uYW1lO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgY3NzUnVsZXMgPSBvcHRpb25zLmNzc1J1bGVzO1xyXG5cdCAgICAgICAgICAgICAgICBpZighb3B0aW9ucy5jbGFzc05hbWUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jbGFzc05hbWUgPSAgJ2VkdWktZm9yLScgKyBidG5OYW1lO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIG9wdGlvbnMuY3NzUnVsZXMgPSAnLmVkdWktZGVmYXVsdCAgLmVkdWktZm9yLScrIGJ0bk5hbWUgKycgLmVkdWktaWNvbiB7JysgY3NzUnVsZXMgKyd9J1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0aGlzLmluaXRPcHRpb25zKG9wdGlvbnMpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdEJ1dHRvbigpO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgQnV0dG9uLnByb3RvdHlwZSA9IHtcclxuXHQgICAgICAgIHVpTmFtZTogJ2J1dHRvbicsXHJcblx0ICAgICAgICBsYWJlbDogJycsXHJcblx0ICAgICAgICB0aXRsZTogJycsXHJcblx0ICAgICAgICBzaG93SWNvbjogdHJ1ZSxcclxuXHQgICAgICAgIHNob3dUZXh0OiB0cnVlLFxyXG5cdCAgICAgICAgY3NzUnVsZXM6JycsXHJcblx0ICAgICAgICBpbml0QnV0dG9uOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRVSUJhc2UoKTtcclxuXHQgICAgICAgICAgICB0aGlzLlN0YXRlZnVsX2luaXQoKTtcclxuXHQgICAgICAgICAgICBpZih0aGlzLmNzc1J1bGVzKXtcclxuXHQgICAgICAgICAgICAgICAgdXRpbHMuY3NzUnVsZSgnZWR1aS1jdXN0b21pemUtJyt0aGlzLm5hbWUrJy1zdHlsZScsdGhpcy5jc3NSdWxlcyk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldEh0bWxUcGw6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiAnPGRpdiBpZD1cIiMjXCIgY2xhc3M9XCJlZHVpLWJveCAlJVwiPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGRpdiBpZD1cIiMjX3N0YXRlXCIgc3RhdGVmdWw+JyArXHJcblx0ICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIiUlLXdyYXBcIj48ZGl2IGlkPVwiIyNfYm9keVwiIHVuc2VsZWN0YWJsZT1cIm9uXCIgJyArICh0aGlzLnRpdGxlID8gJ3RpdGxlPVwiJyArIHRoaXMudGl0bGUgKyAnXCInIDogJycpICtcclxuXHQgICAgICAgICAgICAgICAgICcgY2xhc3M9XCIlJS1ib2R5XCIgb25tb3VzZWRvd249XCJyZXR1cm4gJCQuX29uTW91c2VEb3duKGV2ZW50LCB0aGlzKTtcIiBvbmNsaWNrPVwicmV0dXJuICQkLl9vbkNsaWNrKGV2ZW50LCB0aGlzKTtcIj4nICtcclxuXHQgICAgICAgICAgICAgICAgICAodGhpcy5zaG93SWNvbiA/ICc8ZGl2IGNsYXNzPVwiZWR1aS1ib3ggZWR1aS1pY29uXCI+PC9kaXY+JyA6ICcnKSArXHJcblx0ICAgICAgICAgICAgICAgICAgKHRoaXMuc2hvd1RleHQgPyAnPGRpdiBjbGFzcz1cImVkdWktYm94IGVkdWktbGFiZWxcIj4nICsgdGhpcy5sYWJlbCArICc8L2Rpdj4nIDogJycpICtcclxuXHQgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC9kaXY+PC9kaXY+JztcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBwb3N0UmVuZGVyOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB0aGlzLlN0YXRlZnVsX3Bvc3RSZW5kZXIoKTtcclxuXHQgICAgICAgICAgICB0aGlzLnNldERpc2FibGVkKHRoaXMuZGlzYWJsZWQpXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgX29uTW91c2VEb3duOiBmdW5jdGlvbiAoZSl7XHJcblx0ICAgICAgICAgICAgdmFyIHRhcmdldCA9IGUudGFyZ2V0IHx8IGUuc3JjRWxlbWVudCxcclxuXHQgICAgICAgICAgICAgICAgdGFnTmFtZSA9IHRhcmdldCAmJiB0YXJnZXQudGFnTmFtZSAmJiB0YXJnZXQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG5cdCAgICAgICAgICAgIGlmICh0YWdOYW1lID09ICdpbnB1dCcgfHwgdGFnTmFtZSA9PSAnb2JqZWN0JyB8fCB0YWdOYW1lID09ICdvYmplY3QnKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgX29uQ2xpY2s6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5pc0Rpc2FibGVkKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5maXJlRXZlbnQoJ2NsaWNrJyk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNldFRpdGxlOiBmdW5jdGlvbih0ZXh0KXtcclxuXHQgICAgICAgICAgICB2YXIgbGFiZWwgPSB0aGlzLmdldERvbSgnbGFiZWwnKTtcclxuXHQgICAgICAgICAgICBsYWJlbC5pbm5lckhUTUwgPSB0ZXh0O1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICB1dGlscy5pbmhlcml0cyhCdXR0b24sIFVJQmFzZSk7XHJcblx0ICAgIHV0aWxzLmV4dGVuZChCdXR0b24ucHJvdG90eXBlLCBTdGF0ZWZ1bCk7XHJcblxyXG5cdH0pKCk7XHJcblxyXG5cclxuXHQvLyB1aS9zcGxpdGJ1dHRvbi5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vaW1wb3J0IHVpY29yZVxyXG5cdC8vL2ltcG9ydCB1aS9zdGF0ZWZ1bC5qc1xyXG5cdChmdW5jdGlvbiAoKXtcclxuXHQgICAgdmFyIHV0aWxzID0gYmFpZHUuZWRpdG9yLnV0aWxzLFxyXG5cdCAgICAgICAgdWlVdGlscyA9IGJhaWR1LmVkaXRvci51aS51aVV0aWxzLFxyXG5cdCAgICAgICAgZG9tVXRpbHMgPSBiYWlkdS5lZGl0b3IuZG9tLmRvbVV0aWxzLFxyXG5cdCAgICAgICAgVUlCYXNlID0gYmFpZHUuZWRpdG9yLnVpLlVJQmFzZSxcclxuXHQgICAgICAgIFN0YXRlZnVsID0gYmFpZHUuZWRpdG9yLnVpLlN0YXRlZnVsLFxyXG5cdCAgICAgICAgU3BsaXRCdXR0b24gPSBiYWlkdS5lZGl0b3IudWkuU3BsaXRCdXR0b24gPSBmdW5jdGlvbiAob3B0aW9ucyl7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0T3B0aW9ucyhvcHRpb25zKTtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRTcGxpdEJ1dHRvbigpO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgU3BsaXRCdXR0b24ucHJvdG90eXBlID0ge1xyXG5cdCAgICAgICAgcG9wdXA6IG51bGwsXHJcblx0ICAgICAgICB1aU5hbWU6ICdzcGxpdGJ1dHRvbicsXHJcblx0ICAgICAgICB0aXRsZTogJycsXHJcblx0ICAgICAgICBpbml0U3BsaXRCdXR0b246IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdFVJQmFzZSgpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuU3RhdGVmdWxfaW5pdCgpO1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMucG9wdXAgIT0gbnVsbCkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcG9wdXAgPSB0aGlzLnBvcHVwO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnBvcHVwID0gbnVsbDtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zZXRQb3B1cChwb3B1cCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9VSUJhc2VfcG9zdFJlbmRlcjogVUlCYXNlLnByb3RvdHlwZS5wb3N0UmVuZGVyLFxyXG5cdCAgICAgICAgcG9zdFJlbmRlcjogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdGhpcy5TdGF0ZWZ1bF9wb3N0UmVuZGVyKCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5fVUlCYXNlX3Bvc3RSZW5kZXIoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzZXRQb3B1cDogZnVuY3Rpb24gKHBvcHVwKXtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5wb3B1cCA9PT0gcG9wdXApIHJldHVybjtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5wb3B1cCAhPSBudWxsKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMucG9wdXAuZGlzcG9zZSgpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBwb3B1cC5hZGRMaXN0ZW5lcignc2hvdycsIHV0aWxzLmJpbmQodGhpcy5fb25Qb3B1cFNob3csIHRoaXMpKTtcclxuXHQgICAgICAgICAgICBwb3B1cC5hZGRMaXN0ZW5lcignaGlkZScsIHV0aWxzLmJpbmQodGhpcy5fb25Qb3B1cEhpZGUsIHRoaXMpKTtcclxuXHQgICAgICAgICAgICBwb3B1cC5hZGRMaXN0ZW5lcigncG9zdHJlbmRlcicsIHV0aWxzLmJpbmQoZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgIHBvcHVwLmdldERvbSgnYm9keScpLmFwcGVuZENoaWxkKFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdWlVdGlscy5jcmVhdGVFbGVtZW50QnlIdG1sKCc8ZGl2IGlkPVwiJyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3B1cC5pZCArICdfYm9yZGVyZXJhc2VyXCIgY2xhc3M9XCJlZHVpLWJvcmRlcmVyYXNlciBlZHVpLWJhY2tncm91bmRcIiBzdHlsZT1cIndpZHRoOicgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICh1aVV0aWxzLmdldENsaWVudFJlY3QodGhpcy5nZXREb20oKSkud2lkdGggKyAyMCkgKyAncHhcIj48L2Rpdj4nKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgKTtcclxuXHQgICAgICAgICAgICAgICAgcG9wdXAuZ2V0RG9tKCkuY2xhc3NOYW1lICs9ICcgJyArIHRoaXMuY2xhc3NOYW1lO1xyXG5cdCAgICAgICAgICAgIH0sIHRoaXMpKTtcclxuXHQgICAgICAgICAgICB0aGlzLnBvcHVwID0gcG9wdXA7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgX29uUG9wdXBTaG93OiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB0aGlzLmFkZFN0YXRlKCdvcGVuZWQnKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfb25Qb3B1cEhpZGU6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHRoaXMucmVtb3ZlU3RhdGUoJ29wZW5lZCcpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldEh0bWxUcGw6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiAnPGRpdiBpZD1cIiMjXCIgY2xhc3M9XCJlZHVpLWJveCAlJVwiPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGRpdiAnKyAodGhpcy50aXRsZSA/ICd0aXRsZT1cIicgKyB0aGlzLnRpdGxlICsgJ1wiJyA6ICcnKSArJyBpZD1cIiMjX3N0YXRlXCIgc3RhdGVmdWw+PGRpdiBjbGFzcz1cIiUlLWJvZHlcIj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCIjI19idXR0b25fYm9keVwiIGNsYXNzPVwiZWR1aS1ib3ggZWR1aS1idXR0b24tYm9keVwiIG9uY2xpY2s9XCIkJC5fb25CdXR0b25DbGljayhldmVudCwgdGhpcyk7XCI+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZWR1aS1ib3ggZWR1aS1pY29uXCI+PC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJlZHVpLWJveCBlZHVpLXNwbGl0Ym9yZGVyXCI+PC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiZWR1aS1ib3ggZWR1aS1hcnJvd1wiIG9uY2xpY2s9XCIkJC5fb25BcnJvd0NsaWNrKCk7XCI+PC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8L2Rpdj48L2Rpdj48L2Rpdj4nO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNob3dQb3B1cDogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgLy8g5b2TcG9wdXDlvoDkuIrlvLnlh7rnmoTml7blgJnvvIzlgZrnibnmrorlpITnkIZcclxuXHQgICAgICAgICAgICB2YXIgcmVjdCA9IHVpVXRpbHMuZ2V0Q2xpZW50UmVjdCh0aGlzLmdldERvbSgpKTtcclxuXHQgICAgICAgICAgICByZWN0LnRvcCAtPSB0aGlzLnBvcHVwLlNIQURPV19SQURJVVM7XHJcblx0ICAgICAgICAgICAgcmVjdC5oZWlnaHQgKz0gdGhpcy5wb3B1cC5TSEFET1dfUkFESVVTO1xyXG5cdCAgICAgICAgICAgIHRoaXMucG9wdXAuc2hvd0FuY2hvclJlY3QocmVjdCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgX29uQXJyb3dDbGljazogZnVuY3Rpb24gKGV2ZW50LCBlbCl7XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQoKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnNob3dQb3B1cCgpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfb25CdXR0b25DbGljazogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLmlzRGlzYWJsZWQoKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgnYnV0dG9uY2xpY2snKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIHV0aWxzLmluaGVyaXRzKFNwbGl0QnV0dG9uLCBVSUJhc2UpO1xyXG5cdCAgICB1dGlscy5leHRlbmQoU3BsaXRCdXR0b24ucHJvdG90eXBlLCBTdGF0ZWZ1bCwgdHJ1ZSk7XHJcblxyXG5cdH0pKCk7XHJcblxyXG5cclxuXHQvLyB1aS9jb2xvcmJ1dHRvbi5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vaW1wb3J0IHVpY29yZVxyXG5cdC8vL2ltcG9ydCB1aS9jb2xvcnBpY2tlci5qc1xyXG5cdC8vL2ltcG9ydCB1aS9wb3B1cC5qc1xyXG5cdC8vL2ltcG9ydCB1aS9zcGxpdGJ1dHRvbi5qc1xyXG5cdChmdW5jdGlvbiAoKXtcclxuXHQgICAgdmFyIHV0aWxzID0gYmFpZHUuZWRpdG9yLnV0aWxzLFxyXG5cdCAgICAgICAgdWlVdGlscyA9IGJhaWR1LmVkaXRvci51aS51aVV0aWxzLFxyXG5cdCAgICAgICAgQ29sb3JQaWNrZXIgPSBiYWlkdS5lZGl0b3IudWkuQ29sb3JQaWNrZXIsXHJcblx0ICAgICAgICBQb3B1cCA9IGJhaWR1LmVkaXRvci51aS5Qb3B1cCxcclxuXHQgICAgICAgIFNwbGl0QnV0dG9uID0gYmFpZHUuZWRpdG9yLnVpLlNwbGl0QnV0dG9uLFxyXG5cdCAgICAgICAgQ29sb3JCdXR0b24gPSBiYWlkdS5lZGl0b3IudWkuQ29sb3JCdXR0b24gPSBmdW5jdGlvbiAob3B0aW9ucyl7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0T3B0aW9ucyhvcHRpb25zKTtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRDb2xvckJ1dHRvbigpO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgQ29sb3JCdXR0b24ucHJvdG90eXBlID0ge1xyXG5cdCAgICAgICAgaW5pdENvbG9yQnV0dG9uOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgIHRoaXMucG9wdXAgPSBuZXcgUG9wdXAoe1xyXG5cdCAgICAgICAgICAgICAgICBjb250ZW50OiBuZXcgQ29sb3JQaWNrZXIoe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbm9Db2xvclRleHQ6IG1lLmVkaXRvci5nZXRMYW5nKFwiY2xlYXJDb2xvclwiKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvcjptZS5lZGl0b3IsXHJcblx0ICAgICAgICAgICAgICAgICAgICBvbnBpY2tjb2xvcjogZnVuY3Rpb24gKHQsIGNvbG9yKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5fb25QaWNrQ29sb3IoY29sb3IpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgIG9ucGlja25vY29sb3I6IGZ1bmN0aW9uICh0LCBjb2xvcil7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuX29uUGlja05vQ29sb3IoY29sb3IpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9KSxcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9yOm1lLmVkaXRvclxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdFNwbGl0QnV0dG9uKCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgX1NwbGl0QnV0dG9uX3Bvc3RSZW5kZXI6IFNwbGl0QnV0dG9uLnByb3RvdHlwZS5wb3N0UmVuZGVyLFxyXG5cdCAgICAgICAgcG9zdFJlbmRlcjogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdGhpcy5fU3BsaXRCdXR0b25fcG9zdFJlbmRlcigpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuZ2V0RG9tKCdidXR0b25fYm9keScpLmFwcGVuZENoaWxkKFxyXG5cdCAgICAgICAgICAgICAgICB1aVV0aWxzLmNyZWF0ZUVsZW1lbnRCeUh0bWwoJzxkaXYgaWQ9XCInICsgdGhpcy5pZCArICdfY29sb3JsdW1wXCIgY2xhc3M9XCJlZHVpLWNvbG9ybHVtcFwiPjwvZGl2PicpXHJcblx0ICAgICAgICAgICAgKTtcclxuXHQgICAgICAgICAgICB0aGlzLmdldERvbSgpLmNsYXNzTmFtZSArPSAnIGVkdWktY29sb3JidXR0b24nO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNldENvbG9yOiBmdW5jdGlvbiAoY29sb3Ipe1xyXG5cdCAgICAgICAgICAgIHRoaXMuZ2V0RG9tKCdjb2xvcmx1bXAnKS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBjb2xvcjtcclxuXHQgICAgICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgX29uUGlja0NvbG9yOiBmdW5jdGlvbiAoY29sb3Ipe1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLmZpcmVFdmVudCgncGlja2NvbG9yJywgY29sb3IpICE9PSBmYWxzZSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnNldENvbG9yKGNvbG9yKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5wb3B1cC5oaWRlKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9vblBpY2tOb0NvbG9yOiBmdW5jdGlvbiAoY29sb3Ipe1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLmZpcmVFdmVudCgncGlja25vY29sb3InKSAhPT0gZmFsc2UpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5wb3B1cC5oaWRlKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICB1dGlscy5pbmhlcml0cyhDb2xvckJ1dHRvbiwgU3BsaXRCdXR0b24pO1xyXG5cclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gdWkvdGFibGVidXR0b24uanNcclxuXHQvLy9pbXBvcnQgY29yZVxyXG5cdC8vL2ltcG9ydCB1aWNvcmVcclxuXHQvLy9pbXBvcnQgdWkvcG9wdXAuanNcclxuXHQvLy9pbXBvcnQgdWkvdGFibGVwaWNrZXIuanNcclxuXHQvLy9pbXBvcnQgdWkvc3BsaXRidXR0b24uanNcclxuXHQoZnVuY3Rpb24gKCl7XHJcblx0ICAgIHZhciB1dGlscyA9IGJhaWR1LmVkaXRvci51dGlscyxcclxuXHQgICAgICAgIFBvcHVwID0gYmFpZHUuZWRpdG9yLnVpLlBvcHVwLFxyXG5cdCAgICAgICAgVGFibGVQaWNrZXIgPSBiYWlkdS5lZGl0b3IudWkuVGFibGVQaWNrZXIsXHJcblx0ICAgICAgICBTcGxpdEJ1dHRvbiA9IGJhaWR1LmVkaXRvci51aS5TcGxpdEJ1dHRvbixcclxuXHQgICAgICAgIFRhYmxlQnV0dG9uID0gYmFpZHUuZWRpdG9yLnVpLlRhYmxlQnV0dG9uID0gZnVuY3Rpb24gKG9wdGlvbnMpe1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdE9wdGlvbnMob3B0aW9ucyk7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0VGFibGVCdXR0b24oKTtcclxuXHQgICAgICAgIH07XHJcblx0ICAgIFRhYmxlQnV0dG9uLnByb3RvdHlwZSA9IHtcclxuXHQgICAgICAgIGluaXRUYWJsZUJ1dHRvbjogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICB0aGlzLnBvcHVwID0gbmV3IFBvcHVwKHtcclxuXHQgICAgICAgICAgICAgICAgY29udGVudDogbmV3IFRhYmxlUGlja2VyKHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvcjptZS5lZGl0b3IsXHJcblx0ICAgICAgICAgICAgICAgICAgICBvbnBpY2t0YWJsZTogZnVuY3Rpb24gKHQsIG51bUNvbHMsIG51bVJvd3Mpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLl9vblBpY2tUYWJsZShudW1Db2xzLCBudW1Sb3dzKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSksXHJcblx0ICAgICAgICAgICAgICAgICdlZGl0b3InOm1lLmVkaXRvclxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdFNwbGl0QnV0dG9uKCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgX29uUGlja1RhYmxlOiBmdW5jdGlvbiAobnVtQ29scywgbnVtUm93cyl7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuZmlyZUV2ZW50KCdwaWNrdGFibGUnLCBudW1Db2xzLCBudW1Sb3dzKSAhPT0gZmFsc2UpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5wb3B1cC5oaWRlKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICB1dGlscy5pbmhlcml0cyhUYWJsZUJ1dHRvbiwgU3BsaXRCdXR0b24pO1xyXG5cclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gdWkvYXV0b3R5cGVzZXRwaWNrZXIuanNcclxuXHQvLy9pbXBvcnQgY29yZVxyXG5cdC8vL2ltcG9ydCB1aWNvcmVcclxuXHQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICB2YXIgdXRpbHMgPSBiYWlkdS5lZGl0b3IudXRpbHMsXHJcblx0ICAgICAgICBVSUJhc2UgPSBiYWlkdS5lZGl0b3IudWkuVUlCYXNlO1xyXG5cclxuXHQgICAgdmFyIEF1dG9UeXBlU2V0UGlja2VyID0gYmFpZHUuZWRpdG9yLnVpLkF1dG9UeXBlU2V0UGlja2VyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHQgICAgICAgIHRoaXMuaW5pdE9wdGlvbnMob3B0aW9ucyk7XHJcblx0ICAgICAgICB0aGlzLmluaXRBdXRvVHlwZVNldFBpY2tlcigpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBBdXRvVHlwZVNldFBpY2tlci5wcm90b3R5cGUgPSB7XHJcblx0ICAgICAgICBpbml0QXV0b1R5cGVTZXRQaWNrZXI6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdFVJQmFzZSgpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldEh0bWxUcGw6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMuZWRpdG9yLFxyXG5cdCAgICAgICAgICAgICAgICBvcHQgPSBtZS5vcHRpb25zLmF1dG90eXBlc2V0LFxyXG5cdCAgICAgICAgICAgICAgICBsYW5nID0gbWUuZ2V0TGFuZyhcImF1dG9UeXBlU2V0XCIpO1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgdGV4dEFsaWduSW5wdXROYW1lID0gJ3RleHRBbGlnblZhbHVlJyArIG1lLnVpZCxcclxuXHQgICAgICAgICAgICAgICAgaW1hZ2VCbG9ja0lucHV0TmFtZSA9ICdpbWFnZUJsb2NrTGluZVZhbHVlJyArIG1lLnVpZCxcclxuXHQgICAgICAgICAgICAgICAgc3ltYm9sQ29udmVySW5wdXROYW1lID0gJ3N5bWJvbENvbnZlclZhbHVlJyArIG1lLnVpZDtcclxuXHJcblx0ICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGlkPVwiIyNcIiBjbGFzcz1cImVkdWktYXV0b3R5cGVzZXRwaWNrZXIgJSVcIj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJlZHVpLWF1dG90eXBlc2V0cGlja2VyLWJvZHlcIj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzx0YWJsZSA+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8dHI+PHRkIG5vd3JhcD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cIm1lcmdlRW1wdHlsaW5lXCIgJyArIChvcHRbXCJtZXJnZUVtcHR5bGluZVwiXSA/IFwiY2hlY2tlZFwiIDogXCJcIiApICsgJz4nICsgbGFuZy5tZXJnZUxpbmUgKyAnPC90ZD48dGQgY29sc3Bhbj1cIjJcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cInJlbW92ZUVtcHR5bGluZVwiICcgKyAob3B0W1wicmVtb3ZlRW1wdHlsaW5lXCJdID8gXCJjaGVja2VkXCIgOiBcIlwiICkgKyAnPicgKyBsYW5nLmRlbExpbmUgKyAnPC90ZD48L3RyPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPHRyPjx0ZCBub3dyYXA+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJyZW1vdmVDbGFzc1wiICcgKyAob3B0W1wicmVtb3ZlQ2xhc3NcIl0gPyBcImNoZWNrZWRcIiA6IFwiXCIgKSArICc+JyArIGxhbmcucmVtb3ZlRm9ybWF0ICsgJzwvdGQ+PHRkIGNvbHNwYW49XCIyXCI+PGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG5hbWU9XCJpbmRlbnRcIiAnICsgKG9wdFtcImluZGVudFwiXSA/IFwiY2hlY2tlZFwiIDogXCJcIiApICsgJz4nICsgbGFuZy5pbmRlbnQgKyAnPC90ZD48L3RyPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPHRyPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPHRkIG5vd3JhcD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cInRleHRBbGlnblwiICcgKyAob3B0W1widGV4dEFsaWduXCJdID8gXCJjaGVja2VkXCIgOiBcIlwiICkgKyAnPicgKyBsYW5nLmFsaWdubWVudCArICc8L3RkPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPHRkIGNvbHNwYW49XCIyXCIgaWQ9XCInICsgdGV4dEFsaWduSW5wdXROYW1lICsgJ1wiPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCInKyB0ZXh0QWxpZ25JbnB1dE5hbWUgKydcIiB2YWx1ZT1cImxlZnRcIiAnICsgKChvcHRbXCJ0ZXh0QWxpZ25cIl0gJiYgb3B0W1widGV4dEFsaWduXCJdID09IFwibGVmdFwiKSA/IFwiY2hlY2tlZFwiIDogXCJcIikgKyAnPicgKyBtZS5nZXRMYW5nKFwianVzdGlmeWxlZnRcIikgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCInKyB0ZXh0QWxpZ25JbnB1dE5hbWUgKydcIiB2YWx1ZT1cImNlbnRlclwiICcgKyAoKG9wdFtcInRleHRBbGlnblwiXSAmJiBvcHRbXCJ0ZXh0QWxpZ25cIl0gPT0gXCJjZW50ZXJcIikgPyBcImNoZWNrZWRcIiA6IFwiXCIpICsgJz4nICsgbWUuZ2V0TGFuZyhcImp1c3RpZnljZW50ZXJcIikgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCInKyB0ZXh0QWxpZ25JbnB1dE5hbWUgKydcIiB2YWx1ZT1cInJpZ2h0XCIgJyArICgob3B0W1widGV4dEFsaWduXCJdICYmIG9wdFtcInRleHRBbGlnblwiXSA9PSBcInJpZ2h0XCIpID8gXCJjaGVja2VkXCIgOiBcIlwiKSArICc+JyArIG1lLmdldExhbmcoXCJqdXN0aWZ5cmlnaHRcIikgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC90ZD4nICtcclxuXHQgICAgICAgICAgICAgICAgJzwvdHI+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8dHI+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8dGQgbm93cmFwPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwiaW1hZ2VCbG9ja0xpbmVcIiAnICsgKG9wdFtcImltYWdlQmxvY2tMaW5lXCJdID8gXCJjaGVja2VkXCIgOiBcIlwiICkgKyAnPicgKyBsYW5nLmltYWdlRmxvYXQgKyAnPC90ZD4nICtcclxuXHQgICAgICAgICAgICAgICAgJzx0ZCBub3dyYXAgaWQ9XCInKyBpbWFnZUJsb2NrSW5wdXROYW1lICsnXCI+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cIicrIGltYWdlQmxvY2tJbnB1dE5hbWUgKydcIiB2YWx1ZT1cIm5vbmVcIiAnICsgKChvcHRbXCJpbWFnZUJsb2NrTGluZVwiXSAmJiBvcHRbXCJpbWFnZUJsb2NrTGluZVwiXSA9PSBcIm5vbmVcIikgPyBcImNoZWNrZWRcIiA6IFwiXCIpICsgJz4nICsgbWUuZ2V0TGFuZyhcImRlZmF1bHRcIikgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCInKyBpbWFnZUJsb2NrSW5wdXROYW1lICsnXCIgdmFsdWU9XCJsZWZ0XCIgJyArICgob3B0W1wiaW1hZ2VCbG9ja0xpbmVcIl0gJiYgb3B0W1wiaW1hZ2VCbG9ja0xpbmVcIl0gPT0gXCJsZWZ0XCIpID8gXCJjaGVja2VkXCIgOiBcIlwiKSArICc+JyArIG1lLmdldExhbmcoXCJqdXN0aWZ5bGVmdFwiKSArXHJcblx0ICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cIicrIGltYWdlQmxvY2tJbnB1dE5hbWUgKydcIiB2YWx1ZT1cImNlbnRlclwiICcgKyAoKG9wdFtcImltYWdlQmxvY2tMaW5lXCJdICYmIG9wdFtcImltYWdlQmxvY2tMaW5lXCJdID09IFwiY2VudGVyXCIpID8gXCJjaGVja2VkXCIgOiBcIlwiKSArICc+JyArIG1lLmdldExhbmcoXCJqdXN0aWZ5Y2VudGVyXCIpICtcclxuXHQgICAgICAgICAgICAgICAgJzxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiJysgaW1hZ2VCbG9ja0lucHV0TmFtZSArJ1wiIHZhbHVlPVwicmlnaHRcIiAnICsgKChvcHRbXCJpbWFnZUJsb2NrTGluZVwiXSAmJiBvcHRbXCJpbWFnZUJsb2NrTGluZVwiXSA9PSBcInJpZ2h0XCIpID8gXCJjaGVja2VkXCIgOiBcIlwiKSArICc+JyArIG1lLmdldExhbmcoXCJqdXN0aWZ5cmlnaHRcIikgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC90ZD4nICtcclxuXHQgICAgICAgICAgICAgICAgJzwvdHI+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8dHI+PHRkIG5vd3JhcD48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNsZWFyRm9udFNpemVcIiAnICsgKG9wdFtcImNsZWFyRm9udFNpemVcIl0gPyBcImNoZWNrZWRcIiA6IFwiXCIgKSArICc+JyArIGxhbmcucmVtb3ZlRm9udHNpemUgKyAnPC90ZD48dGQgY29sc3Bhbj1cIjJcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cImNsZWFyRm9udEZhbWlseVwiICcgKyAob3B0W1wiY2xlYXJGb250RmFtaWx5XCJdID8gXCJjaGVja2VkXCIgOiBcIlwiICkgKyAnPicgKyBsYW5nLnJlbW92ZUZvbnRGYW1pbHkgKyAnPC90ZD48L3RyPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPHRyPjx0ZCBub3dyYXAgY29sc3Bhbj1cIjNcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cInJlbW92ZUVtcHR5Tm9kZVwiICcgKyAob3B0W1wicmVtb3ZlRW1wdHlOb2RlXCJdID8gXCJjaGVja2VkXCIgOiBcIlwiICkgKyAnPicgKyBsYW5nLnJlbW92ZUh0bWwgKyAnPC90ZD48L3RyPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPHRyPjx0ZCBub3dyYXAgY29sc3Bhbj1cIjNcIj48aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cInBhc3RlRmlsdGVyXCIgJyArIChvcHRbXCJwYXN0ZUZpbHRlclwiXSA/IFwiY2hlY2tlZFwiIDogXCJcIiApICsgJz4nICsgbGFuZy5wYXN0ZUZpbHRlciArICc8L3RkPjwvdHI+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8dHI+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8dGQgbm93cmFwPjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwic3ltYm9sQ29udmVyXCIgJyArIChvcHRbXCJiZGMyc2JcIl0gfHwgb3B0W1widG9iZGNcIl0gPyBcImNoZWNrZWRcIiA6IFwiXCIgKSArICc+JyArIGxhbmcuc3ltYm9sICsgJzwvdGQ+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8dGQgaWQ9XCInICsgc3ltYm9sQ29udmVySW5wdXROYW1lICsgJ1wiPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJiZGNcIiB2YWx1ZT1cImJkYzJzYlwiICcgKyAob3B0W1wiYmRjMnNiXCJdID8gXCJjaGVja2VkXCIgOiBcIlwiICkgKyAnPicgKyBsYW5nLmJkYzJzYiArXHJcblx0ICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImJkY1wiIHZhbHVlPVwidG9iZGNcIiAnICsgKG9wdFtcInRvYmRjXCJdID8gXCJjaGVja2VkXCIgOiBcIlwiICkgKyAnPicgKyBsYW5nLnRvYmRjICsgJycgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC90ZD4nICtcclxuXHQgICAgICAgICAgICAgICAgJzx0ZCBub3dyYXAgYWxpZ249XCJyaWdodFwiPjxidXR0b24gPicgKyBsYW5nLnJ1biArICc8L2J1dHRvbj48L3RkPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC90cj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzwvdGFibGU+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzwvZGl2Pic7XHJcblxyXG5cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfVUlCYXNlX3JlbmRlcjpVSUJhc2UucHJvdG90eXBlLnJlbmRlclxyXG5cdCAgICB9O1xyXG5cdCAgICB1dGlscy5pbmhlcml0cyhBdXRvVHlwZVNldFBpY2tlciwgVUlCYXNlKTtcclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gdWkvYXV0b3R5cGVzZXRidXR0b24uanNcclxuXHQvLy9pbXBvcnQgY29yZVxyXG5cdC8vL2ltcG9ydCB1aWNvcmVcclxuXHQvLy9pbXBvcnQgdWkvcG9wdXAuanNcclxuXHQvLy9pbXBvcnQgdWkvYXV0b3R5cGVzZXRwaWNrZXIuanNcclxuXHQvLy9pbXBvcnQgdWkvc3BsaXRidXR0b24uanNcclxuXHQoZnVuY3Rpb24gKCl7XHJcblx0ICAgIHZhciB1dGlscyA9IGJhaWR1LmVkaXRvci51dGlscyxcclxuXHQgICAgICAgIFBvcHVwID0gYmFpZHUuZWRpdG9yLnVpLlBvcHVwLFxyXG5cdCAgICAgICAgQXV0b1R5cGVTZXRQaWNrZXIgPSBiYWlkdS5lZGl0b3IudWkuQXV0b1R5cGVTZXRQaWNrZXIsXHJcblx0ICAgICAgICBTcGxpdEJ1dHRvbiA9IGJhaWR1LmVkaXRvci51aS5TcGxpdEJ1dHRvbixcclxuXHQgICAgICAgIEF1dG9UeXBlU2V0QnV0dG9uID0gYmFpZHUuZWRpdG9yLnVpLkF1dG9UeXBlU2V0QnV0dG9uID0gZnVuY3Rpb24gKG9wdGlvbnMpe1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdE9wdGlvbnMob3B0aW9ucyk7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0QXV0b1R5cGVTZXRCdXR0b24oKTtcclxuXHQgICAgICAgIH07XHJcblx0ICAgIGZ1bmN0aW9uIGdldFBhcmEobWUpe1xyXG5cclxuXHQgICAgICAgIHZhciBvcHQgPSB7fSxcclxuXHQgICAgICAgICAgICBjb250ID0gbWUuZ2V0RG9tKCksXHJcblx0ICAgICAgICAgICAgZWRpdG9ySWQgPSBtZS5lZGl0b3IudWlkLFxyXG5cdCAgICAgICAgICAgIGlucHV0VHlwZSA9IG51bGwsXHJcblx0ICAgICAgICAgICAgYXR0ck5hbWUgPSBudWxsLFxyXG5cdCAgICAgICAgICAgIGlwdHMgPSBkb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZShjb250LFwiaW5wdXRcIik7XHJcblx0ICAgICAgICBmb3IodmFyIGk9aXB0cy5sZW5ndGgtMSxpcHQ7aXB0PWlwdHNbaS0tXTspe1xyXG5cdCAgICAgICAgICAgIGlucHV0VHlwZSA9IGlwdC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xyXG5cdCAgICAgICAgICAgIGlmKGlucHV0VHlwZT09XCJjaGVja2JveFwiKXtcclxuXHQgICAgICAgICAgICAgICAgYXR0ck5hbWUgPSBpcHQuZ2V0QXR0cmlidXRlKFwibmFtZVwiKTtcclxuXHQgICAgICAgICAgICAgICAgb3B0W2F0dHJOYW1lXSAmJiBkZWxldGUgb3B0W2F0dHJOYW1lXTtcclxuXHQgICAgICAgICAgICAgICAgaWYoaXB0LmNoZWNrZWQpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJWYWx1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBhdHRyTmFtZSArIFwiVmFsdWVcIiArIGVkaXRvcklkICk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihhdHRyVmFsdWUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKC9pbnB1dC9pZy50ZXN0KGF0dHJWYWx1ZS50YWdOYW1lKSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdFthdHRyTmFtZV0gPSBhdHRyVmFsdWUudmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlwdENoaWxkcyA9IGF0dHJWYWx1ZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlucHV0XCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGo9aXB0Q2hpbGRzLmxlbmd0aC0xLGlwdGNoaWxkO2lwdGNoaWxkPWlwdENoaWxkc1tqLS1dOyl7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihpcHRjaGlsZC5jaGVja2VkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRbYXR0ck5hbWVdID0gaXB0Y2hpbGQudmFsdWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9wdFthdHRyTmFtZV0gPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgb3B0W2F0dHJOYW1lXSA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgb3B0W2lwdC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKV0gPSBpcHQuY2hlY2tlZDtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIHZhciBzZWxlY3RzID0gZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUoY29udCxcInNlbGVjdFwiKTtcclxuXHQgICAgICAgIGZvcih2YXIgaT0wLHNpO3NpPXNlbGVjdHNbaSsrXTspe1xyXG5cdCAgICAgICAgICAgIHZhciBhdHRyID0gc2kuZ2V0QXR0cmlidXRlKCduYW1lJyk7XHJcblx0ICAgICAgICAgICAgb3B0W2F0dHJdID0gb3B0W2F0dHJdID8gc2kudmFsdWUgOiAnJztcclxuXHQgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB1dGlscy5leHRlbmQobWUuZWRpdG9yLm9wdGlvbnMuYXV0b3R5cGVzZXQsb3B0KTtcclxuXHJcblx0ICAgICAgICBtZS5lZGl0b3Iuc2V0UHJlZmVyZW5jZXMoJ2F1dG90eXBlc2V0Jywgb3B0KTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgQXV0b1R5cGVTZXRCdXR0b24ucHJvdG90eXBlID0ge1xyXG5cdCAgICAgICAgaW5pdEF1dG9UeXBlU2V0QnV0dG9uOiBmdW5jdGlvbiAoKXtcclxuXHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICB0aGlzLnBvcHVwID0gbmV3IFBvcHVwKHtcclxuXHQgICAgICAgICAgICAgICAgLy/kvKDlhaXphY3nva7lj4LmlbBcclxuXHQgICAgICAgICAgICAgICAgY29udGVudDogbmV3IEF1dG9UeXBlU2V0UGlja2VyKHtlZGl0b3I6bWUuZWRpdG9yfSksXHJcblx0ICAgICAgICAgICAgICAgICdlZGl0b3InOm1lLmVkaXRvcixcclxuXHQgICAgICAgICAgICAgICAgaGlkZSA6IGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2hpZGRlbiAmJiB0aGlzLmdldERvbSgpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UGFyYSh0aGlzKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldERvbSgpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlkZGVuID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgnaGlkZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgdmFyIGZsYWcgPSAwO1xyXG5cdCAgICAgICAgICAgIHRoaXMucG9wdXAuYWRkTGlzdGVuZXIoJ3Bvc3RSZW5kZXJBZnRlcicsZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHBvcHVwVUkgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgICAgICBpZihmbGFnKXJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGNvbnQgPSB0aGlzLmdldERvbSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgYnRuID0gY29udC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYnV0dG9uJylbMF07XHJcblxyXG5cdCAgICAgICAgICAgICAgICBidG4ub25jbGljayA9IGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBnZXRQYXJhKHBvcHVwVUkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZWRpdG9yLmV4ZWNDb21tYW5kKCdhdXRvdHlwZXNldCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcG9wdXBVSS5oaWRlKClcclxuXHQgICAgICAgICAgICAgICAgfTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLm9uKGNvbnQsICdjbGljaycsIGZ1bmN0aW9uKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9ySWQgPSBtZS5lZGl0b3IudWlkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQudGFnTmFtZSA9PSAnSU5QVVQnKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vIOeCueWHu+WbvueJh+a1ruWKqOeahGNoZWNrYm94LOWOu+mZpOWvueW6lOeahHJhZGlvXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldC5uYW1lID09ICdpbWFnZUJsb2NrTGluZScgfHwgdGFyZ2V0Lm5hbWUgPT0gJ3RleHRBbGlnbicgfHwgdGFyZ2V0Lm5hbWUgPT0gJ3N5bWJvbENvbnZlcicpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoZWNrZWQgPSB0YXJnZXQuY2hlY2tlZCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGlvVGQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggdGFyZ2V0Lm5hbWUgKyAnVmFsdWUnICsgZWRpdG9ySWQpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaW9zID0gcmFkaW9UZC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW5wdXQnKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmFsdXRTZWxlY3QgPSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ltYWdlQmxvY2tMaW5lJzogJ25vbmUnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0QWxpZ24nOiAnbGVmdCcsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N5bWJvbENvbnZlcic6ICd0b2JkYydcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJhZGlvcy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFkaW9zW2ldLnZhbHVlID09IGRlZmFsdXRTZWxlY3RbdGFyZ2V0Lm5hbWVdKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGlvc1tpXS5jaGVja2VkID0gJ2NoZWNrZWQnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFkaW9zW2ldLmNoZWNrZWQgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvLyDngrnlh7tyYWRpbyzpgInkuK3lr7nlupTnmoRjaGVja2JveFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQubmFtZSA9PSAoJ2ltYWdlQmxvY2tMaW5lVmFsdWUnICsgZWRpdG9ySWQpIHx8IHRhcmdldC5uYW1lID09ICgndGV4dEFsaWduVmFsdWUnICsgZWRpdG9ySWQpIHx8IHRhcmdldC5uYW1lID09ICdiZGMnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjaGVja2JveHMgPSB0YXJnZXQucGFyZW50Tm9kZS5wcmV2aW91c1NpYmxpbmcuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2lucHV0Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrYm94cyAmJiAoY2hlY2tib3hzWzBdLmNoZWNrZWQgPSB0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGdldFBhcmEocG9wdXBVSSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgZmxhZyA9IDE7XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0U3BsaXRCdXR0b24oKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgdXRpbHMuaW5oZXJpdHMoQXV0b1R5cGVTZXRCdXR0b24sIFNwbGl0QnV0dG9uKTtcclxuXHJcblx0fSkoKTtcclxuXHJcblxyXG5cdC8vIHVpL2NlbGxhbGlnbnBpY2tlci5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vaW1wb3J0IHVpY29yZVxyXG5cdChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciB1dGlscyA9IGJhaWR1LmVkaXRvci51dGlscyxcclxuXHQgICAgICAgIFBvcHVwID0gYmFpZHUuZWRpdG9yLnVpLlBvcHVwLFxyXG5cdCAgICAgICAgU3RhdGVmdWwgPSBiYWlkdS5lZGl0b3IudWkuU3RhdGVmdWwsXHJcblx0ICAgICAgICBVSUJhc2UgPSBiYWlkdS5lZGl0b3IudWkuVUlCYXNlO1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIOivpeWPguaVsOWwhuaWsOWinuS4gOS4quWPguaVsO+8miBzZWxlY3RlZO+8jCDlj4LmlbDnsbvlnovkuLrkuIDkuKpPYmplY3TvvIwg5b2i5aaCeyAnYWxpZ24nOiAnY2VudGVyJywgJ3ZhbGlnbic6ICd0b3AnIH3vvIwg6KGo56S65Y2V5YWD5qC855qE5Yid5aeLXHJcblx0ICAgICAqIOWvuem9kOeKtuaAgeS4uu+8miDnq5bnm7TlsYXkuIrvvIzmsLTlubPlsYXkuK07IOWFtuS4rSBhbGlnbueahOWPluWAvOS4uu+8midjZW50ZXInLCAnbGVmdCcsICdyaWdodCc7IHZhbGlnbueahOWPluWAvOS4ujogJ3RvcCcsICdtaWRkbGUnLCAnYm90dG9tJ1xyXG5cdCAgICAgKiBAdXBkYXRlIDIwMTMvNC8yIGhhbmNvbmcwM0BiYWlkdS5jb21cclxuXHQgICAgICovXHJcblx0ICAgIHZhciBDZWxsQWxpZ25QaWNrZXIgPSBiYWlkdS5lZGl0b3IudWkuQ2VsbEFsaWduUGlja2VyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHQgICAgICAgIHRoaXMuaW5pdE9wdGlvbnMob3B0aW9ucyk7XHJcblx0ICAgICAgICB0aGlzLmluaXRTZWxlY3RlZCgpO1xyXG5cdCAgICAgICAgdGhpcy5pbml0Q2VsbEFsaWduUGlja2VyKCk7XHJcblx0ICAgIH07XHJcblx0ICAgIENlbGxBbGlnblBpY2tlci5wcm90b3R5cGUgPSB7XHJcblx0ICAgICAgICAvL+WIneWni+WMlumAieS4reeKtuaAge+8jCDor6Xmlrnms5XlsIbmoLnmja7kvKDpgJLov5vmnaXnmoTlj4LmlbDojrflj5bliLDlupTor6XpgInkuK3nmoTlr7npvZDmlrnlvI/lm77moIfnmoTntKLlvJVcclxuXHQgICAgICAgIGluaXRTZWxlY3RlZDogZnVuY3Rpb24oKXtcclxuXHJcblx0ICAgICAgICAgICAgdmFyIHN0YXR1cyA9IHtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHZhbGlnbjoge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdG9wOiAwLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgbWlkZGxlOiAxLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgYm90dG9tOiAyXHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIGFsaWduOiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsZWZ0OiAwLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgY2VudGVyOiAxLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDJcclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgY291bnQ6IDNcclxuXHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIHJlc3VsdCA9IC0xO1xyXG5cclxuXHQgICAgICAgICAgICBpZiggdGhpcy5zZWxlY3RlZCApIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gc3RhdHVzLnZhbGlnblsgdGhpcy5zZWxlY3RlZC52YWxpZ24gXSAqIHN0YXR1cy5jb3VudCArIHN0YXR1cy5hbGlnblsgdGhpcy5zZWxlY3RlZC5hbGlnbiBdO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgaW5pdENlbGxBbGlnblBpY2tlcjpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0VUlCYXNlKCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5TdGF0ZWZ1bF9pbml0KCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0SHRtbFRwbDpmdW5jdGlvbiAoKSB7XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBhbGlnblR5cGUgPSBbICdsZWZ0JywgJ2NlbnRlcicsICdyaWdodCcgXSxcclxuXHQgICAgICAgICAgICAgICAgQ09VTlQgPSA5LFxyXG5cdCAgICAgICAgICAgICAgICB0ZW1wQ2xhc3NOYW1lID0gbnVsbCxcclxuXHQgICAgICAgICAgICAgICAgdGVtcEluZGV4ID0gLTEsXHJcblx0ICAgICAgICAgICAgICAgIHRtcGwgPSBbXTtcclxuXHJcblxyXG5cdCAgICAgICAgICAgIGZvciggdmFyIGk9IDA7IGk8Q09VTlQ7IGkrKyApIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgIHRlbXBDbGFzc05hbWUgPSB0aGlzLnNlbGVjdGVkSW5kZXggPT09IGkgPyAnIGNsYXNzPVwiZWR1aS1jZWxsYWxpZ24tc2VsZWN0ZWRcIiAnIDogJyc7XHJcblx0ICAgICAgICAgICAgICAgIHRlbXBJbmRleCA9IGkgJSAzO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdGVtcEluZGV4ID09PSAwICYmIHRtcGwucHVzaCgnPHRyPicpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdG1wbC5wdXNoKCAnPHRkIGluZGV4PVwiJysgaSArJ1wiICcgKyB0ZW1wQ2xhc3NOYW1lICsgJyBzdGF0ZWZ1bD48ZGl2IGNsYXNzPVwiZWR1aS1pY29uIGVkdWktJysgYWxpZ25UeXBlWyB0ZW1wSW5kZXggXSArJ1wiPjwvZGl2PjwvdGQ+JyApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdGVtcEluZGV4ID09PSAyICYmIHRtcGwucHVzaCgnPC90cj4nKTtcclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICByZXR1cm4gJzxkaXYgaWQ9XCIjI1wiIGNsYXNzPVwiZWR1aS1jZWxsYWxpZ25waWNrZXIgJSVcIj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJlZHVpLWNlbGxhbGlnbnBpY2tlci1ib2R5XCI+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8dGFibGUgb25jbGljaz1cIiQkLl9vbkNsaWNrKGV2ZW50KTtcIj4nICtcclxuXHQgICAgICAgICAgICAgICAgdG1wbC5qb2luKCcnKSArXHJcblx0ICAgICAgICAgICAgICAgICc8L3RhYmxlPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldFN0YXRlRG9tOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy50YXJnZXQ7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgX29uQ2xpY2s6IGZ1bmN0aW9uIChldnQpe1xyXG5cdCAgICAgICAgICAgIHZhciB0YXJnZXQ9IGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQ7XHJcblx0ICAgICAgICAgICAgaWYoL2ljb24vLnRlc3QodGFyZ2V0LmNsYXNzTmFtZSkpe1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLml0ZW1zW3RhcmdldC5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZShcImluZGV4XCIpXS5vbmNsaWNrKCk7XHJcblx0ICAgICAgICAgICAgICAgIFBvcHVwLnBvc3RIaWRlKGV2dCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9VSUJhc2VfcmVuZGVyOlVJQmFzZS5wcm90b3R5cGUucmVuZGVyXHJcblx0ICAgIH07XHJcblx0ICAgIHV0aWxzLmluaGVyaXRzKENlbGxBbGlnblBpY2tlciwgVUlCYXNlKTtcclxuXHQgICAgdXRpbHMuZXh0ZW5kKENlbGxBbGlnblBpY2tlci5wcm90b3R5cGUsIFN0YXRlZnVsLHRydWUpO1xyXG5cdH0pKCk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHQvLyB1aS9wYXN0ZXBpY2tlci5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vaW1wb3J0IHVpY29yZVxyXG5cdChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciB1dGlscyA9IGJhaWR1LmVkaXRvci51dGlscyxcclxuXHQgICAgICAgIFN0YXRlZnVsID0gYmFpZHUuZWRpdG9yLnVpLlN0YXRlZnVsLFxyXG5cdCAgICAgICAgdWlVdGlscyA9IGJhaWR1LmVkaXRvci51aS51aVV0aWxzLFxyXG5cdCAgICAgICAgVUlCYXNlID0gYmFpZHUuZWRpdG9yLnVpLlVJQmFzZTtcclxuXHJcblx0ICAgIHZhciBQYXN0ZVBpY2tlciA9IGJhaWR1LmVkaXRvci51aS5QYXN0ZVBpY2tlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblx0ICAgICAgICB0aGlzLmluaXRPcHRpb25zKG9wdGlvbnMpO1xyXG5cdCAgICAgICAgdGhpcy5pbml0UGFzdGVQaWNrZXIoKTtcclxuXHQgICAgfTtcclxuXHQgICAgUGFzdGVQaWNrZXIucHJvdG90eXBlID0ge1xyXG5cdCAgICAgICAgaW5pdFBhc3RlUGlja2VyOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRVSUJhc2UoKTtcclxuXHQgICAgICAgICAgICB0aGlzLlN0YXRlZnVsX2luaXQoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRIdG1sVHBsOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJlZHVpLXBhc3RlaWNvblwiIG9uY2xpY2s9XCIkJC5fb25DbGljayh0aGlzKVwiPjwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImVkdWktcGFzdGVjb250YWluZXJcIj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJlZHVpLXRpdGxlXCI+JyArIHRoaXMuZWRpdG9yLmdldExhbmcoXCJwYXN0ZU9wdFwiKSArICc8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJlZHVpLWJ1dHRvblwiPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGRpdiB0aXRsZT1cIicgKyB0aGlzLmVkaXRvci5nZXRMYW5nKFwicGFzdGVTb3VyY2VGb3JtYXRcIikgKyAnXCIgb25jbGljaz1cIiQkLmZvcm1hdChmYWxzZSlcIiBzdGF0ZWZ1bD4nICtcclxuXHQgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJlZHVpLXJpY2h0eHRpY29uXCI+PC9kaXY+PC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8ZGl2IHRpdGxlPVwiJyArIHRoaXMuZWRpdG9yLmdldExhbmcoXCJ0YWdGb3JtYXRcIikgKyAnXCIgb25jbGljaz1cIiQkLmZvcm1hdCgyKVwiIHN0YXRlZnVsPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImVkdWktdGFnaWNvblwiPjwvZGl2PjwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGRpdiB0aXRsZT1cIicgKyB0aGlzLmVkaXRvci5nZXRMYW5nKFwicGFzdGVUZXh0Rm9ybWF0XCIpICsgJ1wiIG9uY2xpY2s9XCIkJC5mb3JtYXQodHJ1ZSlcIiBzdGF0ZWZ1bD4nICtcclxuXHQgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJlZHVpLXBsYWludHh0aWNvblwiPjwvZGl2PjwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzwvZGl2PidcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRTdGF0ZURvbTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0O1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGZvcm1hdDpmdW5jdGlvbiAocGFyYW0pIHtcclxuXHQgICAgICAgICAgICB0aGlzLmVkaXRvci51aS5faXNUcmFuc2ZlciA9IHRydWU7XHJcblx0ICAgICAgICAgICAgdGhpcy5lZGl0b3IuZmlyZUV2ZW50KCdwYXN0ZVRyYW5zZmVyJywgcGFyYW0pO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9vbkNsaWNrOmZ1bmN0aW9uIChjdXIpIHtcclxuXHQgICAgICAgICAgICB2YXIgbm9kZSA9IGRvbVV0aWxzLmdldE5leHREb21Ob2RlKGN1ciksXHJcblx0ICAgICAgICAgICAgICAgIHNjcmVlbkh0ID0gdWlVdGlscy5nZXRWaWV3cG9ydFJlY3QoKS5oZWlnaHQsXHJcblx0ICAgICAgICAgICAgICAgIHN1YlBvcCA9IHVpVXRpbHMuZ2V0Q2xpZW50UmVjdChub2RlKTtcclxuXHJcblx0ICAgICAgICAgICAgaWYgKChzdWJQb3AudG9wICsgc3ViUG9wLmhlaWdodCkgPiBzY3JlZW5IdClcclxuXHQgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS50b3AgPSAoLXN1YlBvcC5oZWlnaHQgLSBjdXIub2Zmc2V0SGVpZ2h0KSArIFwicHhcIjtcclxuXHQgICAgICAgICAgICBlbHNlXHJcblx0ICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUudG9wID0gXCJcIjtcclxuXHJcblx0ICAgICAgICAgICAgaWYgKC9oaWRkZW4vaWcudGVzdChkb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKG5vZGUsIFwidmlzaWJpbGl0eVwiKSkpIHtcclxuXHQgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLmFkZENsYXNzKGN1ciwgXCJlZHVpLXN0YXRlLW9wZW5lZFwiKTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBub2RlLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmVDbGFzc2VzKGN1ciwgXCJlZHVpLXN0YXRlLW9wZW5lZFwiKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfVUlCYXNlX3JlbmRlcjpVSUJhc2UucHJvdG90eXBlLnJlbmRlclxyXG5cdCAgICB9O1xyXG5cdCAgICB1dGlscy5pbmhlcml0cyhQYXN0ZVBpY2tlciwgVUlCYXNlKTtcclxuXHQgICAgdXRpbHMuZXh0ZW5kKFBhc3RlUGlja2VyLnByb3RvdHlwZSwgU3RhdGVmdWwsIHRydWUpO1xyXG5cdH0pKCk7XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblx0Ly8gdWkvdG9vbGJhci5qc1xyXG5cdChmdW5jdGlvbiAoKXtcclxuXHQgICAgdmFyIHV0aWxzID0gYmFpZHUuZWRpdG9yLnV0aWxzLFxyXG5cdCAgICAgICAgdWlVdGlscyA9IGJhaWR1LmVkaXRvci51aS51aVV0aWxzLFxyXG5cdCAgICAgICAgVUlCYXNlID0gYmFpZHUuZWRpdG9yLnVpLlVJQmFzZSxcclxuXHQgICAgICAgIFRvb2xiYXIgPSBiYWlkdS5lZGl0b3IudWkuVG9vbGJhciA9IGZ1bmN0aW9uIChvcHRpb25zKXtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRPcHRpb25zKG9wdGlvbnMpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdFRvb2xiYXIoKTtcclxuXHQgICAgICAgIH07XHJcblx0ICAgIFRvb2xiYXIucHJvdG90eXBlID0ge1xyXG5cdCAgICAgICAgaXRlbXM6IG51bGwsXHJcblx0ICAgICAgICBpbml0VG9vbGJhcjogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuaXRlbXMgfHwgW107XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0VUlCYXNlKCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgYWRkOiBmdW5jdGlvbiAoaXRlbSxpbmRleCl7XHJcblx0ICAgICAgICAgICAgaWYoaW5kZXggPT09IHVuZGVmaW5lZCl7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChpdGVtKTtcclxuXHQgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaW5kZXgsMCxpdGVtKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0SHRtbFRwbDogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdmFyIGJ1ZmYgPSBbXTtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICBidWZmW2ldID0gdGhpcy5pdGVtc1tpXS5yZW5kZXJIdG1sKCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiAnPGRpdiBpZD1cIiMjXCIgY2xhc3M9XCJlZHVpLXRvb2xiYXIgJSVcIiBvbnNlbGVjdHN0YXJ0PVwicmV0dXJuIGZhbHNlO1wiIG9ubW91c2Vkb3duPVwicmV0dXJuICQkLl9vbk1vdXNlRG93bihldmVudCwgdGhpcyk7XCI+JyArXHJcblx0ICAgICAgICAgICAgICAgIGJ1ZmYuam9pbignJykgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC9kaXY+J1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHBvc3RSZW5kZXI6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHZhciBib3ggPSB0aGlzLmdldERvbSgpO1xyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTx0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuaXRlbXNbaV0ucG9zdFJlbmRlcigpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB1aVV0aWxzLm1ha2VVbnNlbGVjdGFibGUoYm94KTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfb25Nb3VzZURvd246IGZ1bmN0aW9uIChlKXtcclxuXHQgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50LFxyXG5cdCAgICAgICAgICAgICAgICB0YWdOYW1lID0gdGFyZ2V0ICYmIHRhcmdldC50YWdOYW1lICYmIHRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCk7XHJcblx0ICAgICAgICAgICAgaWYgKHRhZ05hbWUgPT0gJ2lucHV0JyB8fCB0YWdOYW1lID09ICdvYmplY3QnIHx8IHRhZ05hbWUgPT0gJ29iamVjdCcpIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgdXRpbHMuaW5oZXJpdHMoVG9vbGJhciwgVUlCYXNlKTtcclxuXHJcblx0fSkoKTtcclxuXHJcblxyXG5cdC8vIHVpL21lbnUuanNcclxuXHQvLy9pbXBvcnQgY29yZVxyXG5cdC8vL2ltcG9ydCB1aWNvcmVcclxuXHQvLy9pbXBvcnQgdWlcXHBvcHVwLmpzXHJcblx0Ly8vaW1wb3J0IHVpXFxzdGF0ZWZ1bC5qc1xyXG5cdChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciB1dGlscyA9IGJhaWR1LmVkaXRvci51dGlscyxcclxuXHQgICAgICAgIGRvbVV0aWxzID0gYmFpZHUuZWRpdG9yLmRvbS5kb21VdGlscyxcclxuXHQgICAgICAgIHVpVXRpbHMgPSBiYWlkdS5lZGl0b3IudWkudWlVdGlscyxcclxuXHQgICAgICAgIFVJQmFzZSA9IGJhaWR1LmVkaXRvci51aS5VSUJhc2UsXHJcblx0ICAgICAgICBQb3B1cCA9IGJhaWR1LmVkaXRvci51aS5Qb3B1cCxcclxuXHQgICAgICAgIFN0YXRlZnVsID0gYmFpZHUuZWRpdG9yLnVpLlN0YXRlZnVsLFxyXG5cdCAgICAgICAgQ2VsbEFsaWduUGlja2VyID0gYmFpZHUuZWRpdG9yLnVpLkNlbGxBbGlnblBpY2tlcixcclxuXHJcblx0ICAgICAgICBNZW51ID0gYmFpZHUuZWRpdG9yLnVpLk1lbnUgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdE9wdGlvbnMob3B0aW9ucyk7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0TWVudSgpO1xyXG5cdCAgICAgICAgfTtcclxuXHJcblx0ICAgIHZhciBtZW51U2VwYXJhdG9yID0ge1xyXG5cdCAgICAgICAgcmVuZGVySHRtbDpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiZWR1aS1tZW51aXRlbSBlZHVpLW1lbnVzZXBhcmF0b3JcIj48ZGl2IGNsYXNzPVwiZWR1aS1tZW51c2VwYXJhdG9yLWlubmVyXCI+PC9kaXY+PC9kaXY+JztcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBwb3N0UmVuZGVyOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBxdWVyeUF1dG9IaWRlOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgTWVudS5wcm90b3R5cGUgPSB7XHJcblx0ICAgICAgICBpdGVtczpudWxsLFxyXG5cdCAgICAgICAgdWlOYW1lOidtZW51JyxcclxuXHQgICAgICAgIGluaXRNZW51OmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcyB8fCBbXTtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRQb3B1cCgpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdEl0ZW1zKCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgaW5pdEl0ZW1zOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLml0ZW1zW2ldO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoaXRlbSA9PSAnLScpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXNbaV0gPSB0aGlzLmdldFNlcGFyYXRvcigpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEoaXRlbSBpbnN0YW5jZW9mIE1lbnVJdGVtKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5lZGl0b3IgPSB0aGlzLmVkaXRvcjtcclxuXHQgICAgICAgICAgICAgICAgICAgIGl0ZW0udGhlbWUgPSB0aGlzLmVkaXRvci5vcHRpb25zLnRoZW1lO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtc1tpXSA9IHRoaXMuY3JlYXRlSXRlbShpdGVtKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRTZXBhcmF0b3I6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBtZW51U2VwYXJhdG9yO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGNyZWF0ZUl0ZW06ZnVuY3Rpb24gKGl0ZW0pIHtcclxuXHQgICAgICAgICAgICAvL+aWsOWinuS4gOS4quWPguaVsG1lbnUsIOivpeWPguaVsOWtmOWCqOS6hm1lbnVJdGVt5omA5a+55bqU55qEbWVudeW8leeUqFxyXG5cdCAgICAgICAgICAgIGl0ZW0ubWVudSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIG5ldyBNZW51SXRlbShpdGVtKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfUG9wdXBfZ2V0Q29udGVudEh0bWxUcGw6UG9wdXAucHJvdG90eXBlLmdldENvbnRlbnRIdG1sVHBsLFxyXG5cdCAgICAgICAgZ2V0Q29udGVudEh0bWxUcGw6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCA9PSAwKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9Qb3B1cF9nZXRDb250ZW50SHRtbFRwbCgpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgYnVmZiA9IFtdO1xyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XHJcblx0ICAgICAgICAgICAgICAgIGJ1ZmZbaV0gPSBpdGVtLnJlbmRlckh0bWwoKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuICgnPGRpdiBjbGFzcz1cIiUlLWJvZHlcIj4nICsgYnVmZi5qb2luKCcnKSArICc8L2Rpdj4nKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfUG9wdXBfcG9zdFJlbmRlcjpQb3B1cC5wcm90b3R5cGUucG9zdFJlbmRlcixcclxuXHQgICAgICAgIHBvc3RSZW5kZXI6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcclxuXHQgICAgICAgICAgICAgICAgaXRlbS5vd25lck1lbnUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgICAgICBpdGVtLnBvc3RSZW5kZXIoKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMub24odGhpcy5nZXREb20oKSwgJ21vdXNlb3ZlcicsIGZ1bmN0aW9uIChldnQpIHtcclxuXHQgICAgICAgICAgICAgICAgZXZ0ID0gZXZ0IHx8IGV2ZW50O1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcmVsID0gZXZ0LnJlbGF0ZWRUYXJnZXQgfHwgZXZ0LmZyb21FbGVtZW50O1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgZWwgPSBtZS5nZXREb20oKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCF1aVV0aWxzLmNvbnRhaW5zKGVsLCByZWwpICYmIGVsICE9PSByZWwpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCgnb3ZlcicpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgdGhpcy5fUG9wdXBfcG9zdFJlbmRlcigpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHF1ZXJ5QXV0b0hpZGU6ZnVuY3Rpb24gKGVsKSB7XHJcblx0ICAgICAgICAgICAgaWYgKGVsKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh1aVV0aWxzLmNvbnRhaW5zKHRoaXMuZ2V0RG9tKCksIGVsKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLml0ZW1zW2ldO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0ucXVlcnlBdXRvSGlkZShlbCkgPT09IGZhbHNlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGNsZWFySXRlbXM6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuaXRlbXNbaV07XHJcblx0ICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChpdGVtLl9zaG93aW5nVGltZXIpO1xyXG5cdCAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaXRlbS5fY2xvc2luZ1RpbWVyKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGl0ZW0uc3ViTWVudSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5zdWJNZW51LmRlc3Ryb3koKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0aGlzLml0ZW1zID0gW107XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZGVzdHJveTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuZ2V0RG9tKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHRoaXMuZ2V0RG9tKCkpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0aGlzLmNsZWFySXRlbXMoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBkaXNwb3NlOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB0aGlzLmRlc3Ryb3koKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgdXRpbHMuaW5oZXJpdHMoTWVudSwgUG9wdXApO1xyXG5cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIEB1cGRhdGUgMjAxMy8wNC8wMyBoYW5jb25nMDMg5paw5aKe5LiA5Liq5Y+C5pWwbWVudSwg6K+l5Y+C5pWw5a2Y5YKo5LqGbWVudUl0ZW3miYDlr7nlupTnmoRtZW515byV55SoXHJcblx0ICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cclxuXHQgICAgICovXHJcblx0ICAgIHZhciBNZW51SXRlbSA9IGJhaWR1LmVkaXRvci51aS5NZW51SXRlbSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblx0ICAgICAgICB0aGlzLmluaXRPcHRpb25zKG9wdGlvbnMpO1xyXG5cdCAgICAgICAgdGhpcy5pbml0VUlCYXNlKCk7XHJcblx0ICAgICAgICB0aGlzLlN0YXRlZnVsX2luaXQoKTtcclxuXHQgICAgICAgIGlmICh0aGlzLnN1Yk1lbnUgJiYgISh0aGlzLnN1Yk1lbnUgaW5zdGFuY2VvZiBNZW51KSkge1xyXG5cdCAgICAgICAgICAgIGlmIChvcHRpb25zLmNsYXNzTmFtZSAmJiBvcHRpb25zLmNsYXNzTmFtZS5pbmRleE9mKFwiYWxpZ250ZFwiKSAhPSAtMSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgLy/ojrflj5bljZXlhYPmoLzlr7npvZDliJ3lp4vnirbmgIFcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zdWJNZW51LnNlbGVjdGVkID0gdGhpcy5lZGl0b3IucXVlcnlDb21tYW5kVmFsdWUoICdjZWxsYWxpZ25tZW50JyApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zdWJNZW51ID0gbmV3IFBvcHVwKHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6bmV3IENlbGxBbGlnblBpY2tlcih0aGlzLnN1Yk1lbnUpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgcGFyZW50TWVudTptZSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvcjptZS5lZGl0b3IsXHJcblx0ICAgICAgICAgICAgICAgICAgICBkZXN0cm95OmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXREb20oKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUodGhpcy5nZXREb20oKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zdWJNZW51LmFkZExpc3RlbmVyKFwicG9zdFJlbmRlckFmdGVyXCIsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLm9uKHRoaXMuZ2V0RG9tKCksIFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5hZGRTdGF0ZSgnb3BlbmVkJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zdWJNZW51ID0gbmV3IE1lbnUodGhpcy5zdWJNZW51KTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIE1lbnVJdGVtLnByb3RvdHlwZSA9IHtcclxuXHQgICAgICAgIGxhYmVsOicnLFxyXG5cdCAgICAgICAgc3ViTWVudTpudWxsLFxyXG5cdCAgICAgICAgb3duZXJNZW51Om51bGwsXHJcblx0ICAgICAgICB1aU5hbWU6J21lbnVpdGVtJyxcclxuXHQgICAgICAgIGFsd2FseXNIb3ZlcmFibGU6dHJ1ZSxcclxuXHQgICAgICAgIGdldEh0bWxUcGw6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiAnPGRpdiBpZD1cIiMjXCIgY2xhc3M9XCIlJVwiIHN0YXRlZnVsIG9uY2xpY2s9XCIkJC5fb25DbGljayhldmVudCwgdGhpcyk7XCI+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiJSUtYm9keVwiPicgK1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckxhYmVsSHRtbCgpICtcclxuXHQgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBwb3N0UmVuZGVyOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgIHRoaXMuYWRkTGlzdGVuZXIoJ292ZXInLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgIG1lLm93bmVyTWVudS5maXJlRXZlbnQoJ3N1Ym1lbnVvdmVyJywgbWUpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobWUuc3ViTWVudSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZGVsYXlTaG93U3ViTWVudSgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuc3ViTWVudSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmdldERvbSgpLmNsYXNzTmFtZSArPSAnIGVkdWktaGFzc3VibWVudSc7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc3ViTWVudS5yZW5kZXIoKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5hZGRMaXN0ZW5lcignb3V0JywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZGVsYXlIaWRlU3ViTWVudSgpO1xyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zdWJNZW51LmFkZExpc3RlbmVyKCdvdmVyJywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KG1lLl9jbG9zaW5nVGltZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuX2Nsb3NpbmdUaW1lciA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5hZGRTdGF0ZSgnb3BlbmVkJyk7XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm93bmVyTWVudS5hZGRMaXN0ZW5lcignaGlkZScsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmhpZGVTdWJNZW51KCk7XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLm93bmVyTWVudS5hZGRMaXN0ZW5lcignc3VibWVudW92ZXInLCBmdW5jdGlvbiAodCwgc3ViTWVudSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHN1Yk1lbnUgIT09IG1lKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuZGVsYXlIaWRlU3ViTWVudSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zdWJNZW51Ll9iYWtRdWVyeUF1dG9IaWRlID0gdGhpcy5zdWJNZW51LnF1ZXJ5QXV0b0hpZGU7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc3ViTWVudS5xdWVyeUF1dG9IaWRlID0gZnVuY3Rpb24gKGVsKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZWwgJiYgdWlVdGlscy5jb250YWlucyhtZS5nZXREb20oKSwgZWwpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Jha1F1ZXJ5QXV0b0hpZGUoZWwpO1xyXG5cdCAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0aGlzLmdldERvbSgpLnN0eWxlLnRhYkluZGV4ID0gJy0xJztcclxuXHQgICAgICAgICAgICB1aVV0aWxzLm1ha2VVbnNlbGVjdGFibGUodGhpcy5nZXREb20oKSk7XHJcblx0ICAgICAgICAgICAgdGhpcy5TdGF0ZWZ1bF9wb3N0UmVuZGVyKCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZGVsYXlTaG93U3ViTWVudTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICBpZiAoIW1lLmlzRGlzYWJsZWQoKSkge1xyXG5cdCAgICAgICAgICAgICAgICBtZS5hZGRTdGF0ZSgnb3BlbmVkJyk7XHJcblx0ICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChtZS5fc2hvd2luZ1RpbWVyKTtcclxuXHQgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KG1lLl9jbG9zaW5nVGltZXIpO1xyXG5cdCAgICAgICAgICAgICAgICBtZS5fY2xvc2luZ1RpbWVyID0gbnVsbDtcclxuXHQgICAgICAgICAgICAgICAgbWUuX3Nob3dpbmdUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuc2hvd1N1Yk1lbnUoKTtcclxuXHQgICAgICAgICAgICAgICAgfSwgMjUwKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZGVsYXlIaWRlU3ViTWVudTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICBpZiAoIW1lLmlzRGlzYWJsZWQoKSkge1xyXG5cdCAgICAgICAgICAgICAgICBtZS5yZW1vdmVTdGF0ZSgnb3BlbmVkJyk7XHJcblx0ICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChtZS5fc2hvd2luZ1RpbWVyKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCFtZS5fY2xvc2luZ1RpbWVyKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5fY2xvc2luZ1RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtZS5oYXNTdGF0ZSgnb3BlbmVkJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuaGlkZVN1Yk1lbnUoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuX2Nsb3NpbmdUaW1lciA9IG51bGw7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9LCA0MDApO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHJlbmRlckxhYmVsSHRtbDpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiZWR1aS1hcnJvd1wiPjwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImVkdWktYm94IGVkdWktaWNvblwiPjwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImVkdWktYm94IGVkdWktbGFiZWwgJSUtbGFiZWxcIj4nICsgKHRoaXMubGFiZWwgfHwgJycpICsgJzwvZGl2Pic7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0U3RhdGVEb206ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERvbSgpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHF1ZXJ5QXV0b0hpZGU6ZnVuY3Rpb24gKGVsKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuc3ViTWVudSAmJiB0aGlzLmhhc1N0YXRlKCdvcGVuZWQnKSkge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdWJNZW51LnF1ZXJ5QXV0b0hpZGUoZWwpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfb25DbGljazpmdW5jdGlvbiAoZXZlbnQsIHRoaXNfKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuaGFzU3RhdGUoJ2Rpc2FibGVkJykpIHJldHVybjtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5maXJlRXZlbnQoJ2NsaWNrJywgZXZlbnQsIHRoaXNfKSAhPT0gZmFsc2UpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3ViTWVudSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93U3ViTWVudSgpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgUG9wdXAucG9zdEhpZGUoZXZlbnQpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNob3dTdWJNZW51OmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgcmVjdCA9IHVpVXRpbHMuZ2V0Q2xpZW50UmVjdCh0aGlzLmdldERvbSgpKTtcclxuXHQgICAgICAgICAgICByZWN0LnJpZ2h0IC09IDU7XHJcblx0ICAgICAgICAgICAgcmVjdC5sZWZ0ICs9IDI7XHJcblx0ICAgICAgICAgICAgcmVjdC53aWR0aCAtPSA3O1xyXG5cdCAgICAgICAgICAgIHJlY3QudG9wIC09IDQ7XHJcblx0ICAgICAgICAgICAgcmVjdC5ib3R0b20gKz0gNDtcclxuXHQgICAgICAgICAgICByZWN0LmhlaWdodCArPSA4O1xyXG5cdCAgICAgICAgICAgIHRoaXMuc3ViTWVudS5zaG93QW5jaG9yUmVjdChyZWN0LCB0cnVlLCB0cnVlKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBoaWRlU3ViTWVudTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5zdWJNZW51LmhpZGUoKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgdXRpbHMuaW5oZXJpdHMoTWVudUl0ZW0sIFVJQmFzZSk7XHJcblx0ICAgIHV0aWxzLmV4dGVuZChNZW51SXRlbS5wcm90b3R5cGUsIFN0YXRlZnVsLCB0cnVlKTtcclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gdWkvY29tYm94LmpzXHJcblx0Ly8vaW1wb3J0IGNvcmVcclxuXHQvLy9pbXBvcnQgdWljb3JlXHJcblx0Ly8vaW1wb3J0IHVpL21lbnUuanNcclxuXHQvLy9pbXBvcnQgdWkvc3BsaXRidXR0b24uanNcclxuXHQoZnVuY3Rpb24gKCl7XHJcblx0ICAgIC8vIHRvZG86IG1lbnXlkoxpdGVt5o+Q5oiQ6YCa55SobGlzdFxyXG5cdCAgICB2YXIgdXRpbHMgPSBiYWlkdS5lZGl0b3IudXRpbHMsXHJcblx0ICAgICAgICB1aVV0aWxzID0gYmFpZHUuZWRpdG9yLnVpLnVpVXRpbHMsXHJcblx0ICAgICAgICBNZW51ID0gYmFpZHUuZWRpdG9yLnVpLk1lbnUsXHJcblx0ICAgICAgICBTcGxpdEJ1dHRvbiA9IGJhaWR1LmVkaXRvci51aS5TcGxpdEJ1dHRvbixcclxuXHQgICAgICAgIENvbWJveCA9IGJhaWR1LmVkaXRvci51aS5Db21ib3ggPSBmdW5jdGlvbiAob3B0aW9ucyl7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0T3B0aW9ucyhvcHRpb25zKTtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRDb21ib3goKTtcclxuXHQgICAgICAgIH07XHJcblx0ICAgIENvbWJveC5wcm90b3R5cGUgPSB7XHJcblx0ICAgICAgICB1aU5hbWU6ICdjb21ib3gnLFxyXG5cdCAgICAgICAgb25idXR0b25jbGljazpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5zaG93UG9wdXAoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBpbml0Q29tYm94OiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zIHx8IFtdO1xyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTx0aGlzLml0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXTtcclxuXHQgICAgICAgICAgICAgICAgaXRlbS51aU5hbWUgPSAnbGlzdGl0ZW0nO1xyXG5cdCAgICAgICAgICAgICAgICBpdGVtLmluZGV4ID0gaTtcclxuXHQgICAgICAgICAgICAgICAgaXRlbS5vbmNsaWNrID0gZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5zZWxlY3RCeUluZGV4KHRoaXMuaW5kZXgpO1xyXG5cdCAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB0aGlzLnBvcHVwID0gbmV3IE1lbnUoe1xyXG5cdCAgICAgICAgICAgICAgICBpdGVtczogdGhpcy5pdGVtcyxcclxuXHQgICAgICAgICAgICAgICAgdWlOYW1lOiAnbGlzdCcsXHJcblx0ICAgICAgICAgICAgICAgIGVkaXRvcjp0aGlzLmVkaXRvcixcclxuXHQgICAgICAgICAgICAgICAgY2FwdHVyZVdoZWVsOiB0cnVlLFxyXG5cdCAgICAgICAgICAgICAgICBjb21ib3g6IHRoaXNcclxuXHQgICAgICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0U3BsaXRCdXR0b24oKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfU3BsaXRCdXR0b25fcG9zdFJlbmRlcjogU3BsaXRCdXR0b24ucHJvdG90eXBlLnBvc3RSZW5kZXIsXHJcblx0ICAgICAgICBwb3N0UmVuZGVyOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB0aGlzLl9TcGxpdEJ1dHRvbl9wb3N0UmVuZGVyKCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5zZXRMYWJlbCh0aGlzLmxhYmVsIHx8ICcnKTtcclxuXHQgICAgICAgICAgICB0aGlzLnNldFZhbHVlKHRoaXMuaW5pdFZhbHVlIHx8ICcnKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzaG93UG9wdXA6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHZhciByZWN0ID0gdWlVdGlscy5nZXRDbGllbnRSZWN0KHRoaXMuZ2V0RG9tKCkpO1xyXG5cdCAgICAgICAgICAgIHJlY3QudG9wICs9IDE7XHJcblx0ICAgICAgICAgICAgcmVjdC5ib3R0b20gLT0gMTtcclxuXHQgICAgICAgICAgICByZWN0LmhlaWdodCAtPSAyO1xyXG5cdCAgICAgICAgICAgIHRoaXMucG9wdXAuc2hvd0FuY2hvclJlY3QocmVjdCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNldFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpe1xyXG5cdCAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhCeVZhbHVlKHZhbHVlKTtcclxuXHQgICAgICAgICAgICBpZiAoaW5kZXggIT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2V0TGFiZWwodGhpcy5pdGVtc1tpbmRleF0ubGFiZWwpO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5pdGVtc1tpbmRleF0udmFsdWU7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gLTE7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2V0TGFiZWwodGhpcy5nZXRMYWJlbEZvclVua25vd1ZhbHVlKHZhbHVlKSk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgc2V0TGFiZWw6IGZ1bmN0aW9uIChsYWJlbCl7XHJcblx0ICAgICAgICAgICAgdGhpcy5nZXREb20oJ2J1dHRvbl9ib2R5JykuaW5uZXJIVE1MID0gbGFiZWw7XHJcblx0ICAgICAgICAgICAgdGhpcy5sYWJlbCA9IGxhYmVsO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldExhYmVsRm9yVW5rbm93VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGluZGV4QnlWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKXtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5pdGVtcy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gdGhpcy5pdGVtc1tpXS52YWx1ZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldEl0ZW06IGZ1bmN0aW9uIChpbmRleCl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXNbaW5kZXhdO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNlbGVjdEJ5SW5kZXg6IGZ1bmN0aW9uIChpbmRleCl7XHJcblx0ICAgICAgICAgICAgaWYgKGluZGV4IDwgdGhpcy5pdGVtcy5sZW5ndGggJiYgdGhpcy5maXJlRXZlbnQoJ3NlbGVjdCcsIGluZGV4KSAhPT0gZmFsc2UpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLml0ZW1zW2luZGV4XS52YWx1ZTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zZXRMYWJlbCh0aGlzLml0ZW1zW2luZGV4XS5sYWJlbCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9O1xyXG5cdCAgICB1dGlscy5pbmhlcml0cyhDb21ib3gsIFNwbGl0QnV0dG9uKTtcclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gdWkvZGlhbG9nLmpzXHJcblx0Ly8vaW1wb3J0IGNvcmVcclxuXHQvLy9pbXBvcnQgdWljb3JlXHJcblx0Ly8vaW1wb3J0IHVpL21hc2suanNcclxuXHQvLy9pbXBvcnQgdWkvYnV0dG9uLmpzXHJcblx0KGZ1bmN0aW9uICgpe1xyXG5cdCAgICB2YXIgdXRpbHMgPSBiYWlkdS5lZGl0b3IudXRpbHMsXHJcblx0ICAgICAgICBkb21VdGlscyA9IGJhaWR1LmVkaXRvci5kb20uZG9tVXRpbHMsXHJcblx0ICAgICAgICB1aVV0aWxzID0gYmFpZHUuZWRpdG9yLnVpLnVpVXRpbHMsXHJcblx0ICAgICAgICBNYXNrID0gYmFpZHUuZWRpdG9yLnVpLk1hc2ssXHJcblx0ICAgICAgICBVSUJhc2UgPSBiYWlkdS5lZGl0b3IudWkuVUlCYXNlLFxyXG5cdCAgICAgICAgQnV0dG9uID0gYmFpZHUuZWRpdG9yLnVpLkJ1dHRvbixcclxuXHQgICAgICAgIERpYWxvZyA9IGJhaWR1LmVkaXRvci51aS5EaWFsb2cgPSBmdW5jdGlvbiAob3B0aW9ucyl7XHJcblx0ICAgICAgICAgICAgaWYob3B0aW9ucy5uYW1lKXtcclxuXHQgICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWU7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjc3NSdWxlcyA9IG9wdGlvbnMuY3NzUnVsZXM7XHJcblx0ICAgICAgICAgICAgICAgIGlmKCFvcHRpb25zLmNsYXNzTmFtZSl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmNsYXNzTmFtZSA9ICAnZWR1aS1mb3ItJyArIG5hbWU7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYoY3NzUnVsZXMpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jc3NSdWxlcyA9ICcuZWR1aS1kZWZhdWx0IC5lZHVpLWZvci0nKyBuYW1lICsnIC5lZHVpLWRpYWxvZy1jb250ZW50ICB7JysgY3NzUnVsZXMgKyd9J1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdE9wdGlvbnModXRpbHMuZXh0ZW5kKHtcclxuXHQgICAgICAgICAgICAgICAgYXV0b1Jlc2V0OiB0cnVlLFxyXG5cdCAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXHJcblx0ICAgICAgICAgICAgICAgIG9ub2s6IGZ1bmN0aW9uICgpe30sXHJcblx0ICAgICAgICAgICAgICAgIG9uY2FuY2VsOiBmdW5jdGlvbiAoKXt9LFxyXG5cdCAgICAgICAgICAgICAgICBvbmNsb3NlOiBmdW5jdGlvbiAodCwgb2spe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9rID8gdGhpcy5vbm9rKCkgOiB0aGlzLm9uY2FuY2VsKCk7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIC8v5piv5ZCm5o6n5Yi2ZGlhbG9n5Lit55qEc2Nyb2xs5LqL5Lu277yMIOm7mOiupOS4uuS4jemYu+atolxyXG5cdCAgICAgICAgICAgICAgICBob2xkU2Nyb2xsOiBmYWxzZVxyXG5cdCAgICAgICAgICAgIH0sb3B0aW9ucykpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdERpYWxvZygpO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgdmFyIG1vZGFsTWFzaztcclxuXHQgICAgdmFyIGRyYWdNYXNrO1xyXG5cdCAgICB2YXIgYWN0aXZlRGlhbG9nO1xyXG5cdCAgICBEaWFsb2cucHJvdG90eXBlID0ge1xyXG5cdCAgICAgICAgZHJhZ2dhYmxlOiBmYWxzZSxcclxuXHQgICAgICAgIHVpTmFtZTogJ2RpYWxvZycsXHJcblx0ICAgICAgICBpbml0RGlhbG9nOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICB0aGVtZT10aGlzLmVkaXRvci5vcHRpb25zLnRoZW1lO1xyXG5cdCAgICAgICAgICAgIGlmKHRoaXMuY3NzUnVsZXMpe1xyXG5cdCAgICAgICAgICAgICAgICB1dGlscy5jc3NSdWxlKCdlZHVpLWN1c3RvbWl6ZS0nK3RoaXMubmFtZSsnLXN0eWxlJyx0aGlzLmNzc1J1bGVzKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0VUlCYXNlKCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5tb2RhbE1hc2sgPSAobW9kYWxNYXNrIHx8IChtb2RhbE1hc2sgPSBuZXcgTWFzayh7XHJcblx0ICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2VkdWktZGlhbG9nLW1vZGFsbWFzaycsXHJcblx0ICAgICAgICAgICAgICAgIHRoZW1lOnRoZW1lLFxyXG5cdCAgICAgICAgICAgICAgICBvbmNsaWNrOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIGFjdGl2ZURpYWxvZyAmJiBhY3RpdmVEaWFsb2cuY2xvc2UoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSkpKTtcclxuXHQgICAgICAgICAgICB0aGlzLmRyYWdNYXNrID0gKGRyYWdNYXNrIHx8IChkcmFnTWFzayA9IG5ldyBNYXNrKHtcclxuXHQgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnZWR1aS1kaWFsb2ctZHJhZ21hc2snLFxyXG5cdCAgICAgICAgICAgICAgICB0aGVtZTp0aGVtZVxyXG5cdCAgICAgICAgICAgIH0pKSk7XHJcblx0ICAgICAgICAgICAgdGhpcy5jbG9zZUJ1dHRvbiA9IG5ldyBCdXR0b24oe1xyXG5cdCAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdlZHVpLWRpYWxvZy1jbG9zZWJ1dHRvbicsXHJcblx0ICAgICAgICAgICAgICAgIHRpdGxlOiBtZS5jbG9zZURpYWxvZyxcclxuXHQgICAgICAgICAgICAgICAgdGhlbWU6dGhlbWUsXHJcblx0ICAgICAgICAgICAgICAgIG9uY2xpY2s6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuY2xvc2UoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgICAgIHRoaXMuZnVsbHNjcmVlbiAmJiB0aGlzLmluaXRSZXNpemVFdmVudCgpO1xyXG5cclxuXHQgICAgICAgICAgICBpZiAodGhpcy5idXR0b25zKSB7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTx0aGlzLmJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmICghKHRoaXMuYnV0dG9uc1tpXSBpbnN0YW5jZW9mIEJ1dHRvbikpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbnNbaV0gPSBuZXcgQnV0dG9uKHV0aWxzLmV4dGVuZCh0aGlzLmJ1dHRvbnNbaV0se1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IgOiB0aGlzLmVkaXRvclxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0sdHJ1ZSkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGluaXRSZXNpemVFdmVudDogZnVuY3Rpb24gKCkge1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cclxuXHQgICAgICAgICAgICBkb21VdGlscy5vbiggd2luZG93LCBcInJlc2l6ZVwiLCBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIG1lLl9oaWRkZW4gfHwgbWUuX2hpZGRlbiA9PT0gdW5kZWZpbmVkICkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIG1lLl9fcmVzaXplVGltZXIgKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJUaW1lb3V0KCBtZS5fX3Jlc2l6ZVRpbWVyICk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIG1lLl9fcmVzaXplVGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24gKCkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLl9fcmVzaXplVGltZXIgPSBudWxsO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBkaWFsb2dXcmFwTm9kZSA9IG1lLmdldERvbSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnROb2RlID0gbWUuZ2V0RG9tKCdjb250ZW50JyksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgd3JhcFJlY3QgPSBVRS51aS51aVV0aWxzLmdldENsaWVudFJlY3QoIGRpYWxvZ1dyYXBOb2RlICksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFJlY3QgPSBVRS51aS51aVV0aWxzLmdldENsaWVudFJlY3QoIGNvbnRlbnROb2RlICksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdnBSZWN0ID0gdWlVdGlscy5nZXRWaWV3cG9ydFJlY3QoKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBjb250ZW50Tm9kZS5zdHlsZS53aWR0aCA9ICggdnBSZWN0LndpZHRoIC0gd3JhcFJlY3Qud2lkdGggKyBjb250ZW50UmVjdC53aWR0aCApICsgXCJweFwiO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY29udGVudE5vZGUuc3R5bGUuaGVpZ2h0ID0gKCB2cFJlY3QuaGVpZ2h0IC0gd3JhcFJlY3QuaGVpZ2h0ICsgY29udGVudFJlY3QuaGVpZ2h0ICkgKyBcInB4XCI7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgZGlhbG9nV3JhcE5vZGUuc3R5bGUud2lkdGggPSB2cFJlY3Qud2lkdGggKyBcInB4XCI7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkaWFsb2dXcmFwTm9kZS5zdHlsZS5oZWlnaHQgPSB2cFJlY3QuaGVpZ2h0ICsgXCJweFwiO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmZpcmVFdmVudCggXCJyZXNpemVcIiApO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgfSwgMTAwICk7XHJcblxyXG5cdCAgICAgICAgICAgIH0gKTtcclxuXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZml0U2l6ZTogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdmFyIHBvcEJvZHlFbCA9IHRoaXMuZ2V0RG9tKCdib2R5Jyk7XHJcbi8vXHQgICAgICAgICAgICBpZiAoIShiYWlkdS5lZGl0b3IuYnJvd3Nlci5pZSAmJiBiYWlkdS5lZGl0b3IuYnJvd3Nlci52ZXJzaW9uID09IDcpKSB7XHJcbi8vXHQgICAgICAgICAgICAgICAgdWlVdGlscy5yZW1vdmVTdHlsZShwb3BCb2R5RWwsICd3aWR0aCcpO1xyXG4vL1x0ICAgICAgICAgICAgICAgIHVpVXRpbHMucmVtb3ZlU3R5bGUocG9wQm9keUVsLCAnaGVpZ2h0Jyk7XHJcbi8vXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdmFyIHNpemUgPSB0aGlzLm1lc3VyZVNpemUoKTtcclxuXHQgICAgICAgICAgICBwb3BCb2R5RWwuc3R5bGUud2lkdGggPSBzaXplLndpZHRoICsgJ3B4JztcclxuXHQgICAgICAgICAgICBwb3BCb2R5RWwuc3R5bGUuaGVpZ2h0ID0gc2l6ZS5oZWlnaHQgKyAncHgnO1xyXG5cdCAgICAgICAgICAgIHJldHVybiBzaXplO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNhZmVTZXRPZmZzZXQ6IGZ1bmN0aW9uIChvZmZzZXQpe1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgdmFyIGVsID0gbWUuZ2V0RG9tKCk7XHJcblx0ICAgICAgICAgICAgdmFyIHZwUmVjdCA9IHVpVXRpbHMuZ2V0Vmlld3BvcnRSZWN0KCk7XHJcblx0ICAgICAgICAgICAgdmFyIHJlY3QgPSB1aVV0aWxzLmdldENsaWVudFJlY3QoZWwpO1xyXG5cdCAgICAgICAgICAgIHZhciBsZWZ0ID0gb2Zmc2V0LmxlZnQ7XHJcblx0ICAgICAgICAgICAgaWYgKGxlZnQgKyByZWN0LndpZHRoID4gdnBSZWN0LnJpZ2h0KSB7XHJcblx0ICAgICAgICAgICAgICAgIGxlZnQgPSB2cFJlY3QucmlnaHQgLSByZWN0LndpZHRoO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgdG9wID0gb2Zmc2V0LnRvcDtcclxuXHQgICAgICAgICAgICBpZiAodG9wICsgcmVjdC5oZWlnaHQgPiB2cFJlY3QuYm90dG9tKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRvcCA9IHZwUmVjdC5ib3R0b20gLSByZWN0LmhlaWdodDtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgZWwuc3R5bGUubGVmdCA9IE1hdGgubWF4KGxlZnQsIDApICsgJ3B4JztcclxuXHQgICAgICAgICAgICBlbC5zdHlsZS50b3AgPSBNYXRoLm1heCh0b3AsIDApICsgJ3B4JztcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzaG93QXRDZW50ZXI6IGZ1bmN0aW9uICgpe1xyXG5cclxuXHQgICAgICAgICAgICB2YXIgdnBSZWN0ID0gdWlVdGlscy5nZXRWaWV3cG9ydFJlY3QoKTtcclxuXHJcblx0ICAgICAgICAgICAgaWYgKCAhdGhpcy5mdWxsc2NyZWVuICkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmdldERvbSgpLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuXHQgICAgICAgICAgICAgICAgdmFyIHBvcFNpemUgPSB0aGlzLmZpdFNpemUoKTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRpdGxlSGVpZ2h0ID0gdGhpcy5nZXREb20oJ3RpdGxlYmFyJykub2Zmc2V0SGVpZ2h0IHwgMDtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGxlZnQgPSB2cFJlY3Qud2lkdGggLyAyIC0gcG9wU2l6ZS53aWR0aCAvIDI7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB0b3AgPSB2cFJlY3QuaGVpZ2h0IC8gMiAtIChwb3BTaXplLmhlaWdodCAtIHRpdGxlSGVpZ2h0KSAvIDIgLSB0aXRsZUhlaWdodDtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHBvcEVsID0gdGhpcy5nZXREb20oKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zYWZlU2V0T2Zmc2V0KHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxlZnQ6IE1hdGgubWF4KGxlZnQgfCAwLCAwKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIHRvcDogTWF0aC5tYXgodG9wIHwgMCwgMClcclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghZG9tVXRpbHMuaGFzQ2xhc3MocG9wRWwsICdlZHVpLXN0YXRlLWNlbnRlcmVkJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHBvcEVsLmNsYXNzTmFtZSArPSAnIGVkdWktc3RhdGUtY2VudGVyZWQnO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIGRpYWxvZ1dyYXBOb2RlID0gdGhpcy5nZXREb20oKSxcclxuXHQgICAgICAgICAgICAgICAgICAgIGNvbnRlbnROb2RlID0gdGhpcy5nZXREb20oJ2NvbnRlbnQnKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGRpYWxvZ1dyYXBOb2RlLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB2YXIgd3JhcFJlY3QgPSBVRS51aS51aVV0aWxzLmdldENsaWVudFJlY3QoIGRpYWxvZ1dyYXBOb2RlICksXHJcblx0ICAgICAgICAgICAgICAgICAgICBjb250ZW50UmVjdCA9IFVFLnVpLnVpVXRpbHMuZ2V0Q2xpZW50UmVjdCggY29udGVudE5vZGUgKTtcclxuXHQgICAgICAgICAgICAgICAgZGlhbG9nV3JhcE5vZGUuc3R5bGUubGVmdCA9IFwiLTEwMDAwMHB4XCI7XHJcblxyXG5cdCAgICAgICAgICAgICAgICBjb250ZW50Tm9kZS5zdHlsZS53aWR0aCA9ICggdnBSZWN0LndpZHRoIC0gd3JhcFJlY3Qud2lkdGggKyBjb250ZW50UmVjdC53aWR0aCApICsgXCJweFwiO1xyXG5cdCAgICAgICAgICAgICAgICBjb250ZW50Tm9kZS5zdHlsZS5oZWlnaHQgPSAoIHZwUmVjdC5oZWlnaHQgLSB3cmFwUmVjdC5oZWlnaHQgKyBjb250ZW50UmVjdC5oZWlnaHQgKSArIFwicHhcIjtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGRpYWxvZ1dyYXBOb2RlLnN0eWxlLndpZHRoID0gdnBSZWN0LndpZHRoICsgXCJweFwiO1xyXG5cdCAgICAgICAgICAgICAgICBkaWFsb2dXcmFwTm9kZS5zdHlsZS5oZWlnaHQgPSB2cFJlY3QuaGVpZ2h0ICsgXCJweFwiO1xyXG5cdCAgICAgICAgICAgICAgICBkaWFsb2dXcmFwTm9kZS5zdHlsZS5sZWZ0ID0gMDtcclxuXHJcblx0ICAgICAgICAgICAgICAgIC8v5L+d5a2Y546v5aKD55qEb3ZlcmZsb3flgLxcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5fb3JpZ2luYWxDb250ZXh0ID0ge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaHRtbDoge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93WCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvd1lcclxuXHQgICAgICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgICAgICBib2R5OiB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3dYOiBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93WCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvd1k6IGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3dZXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH07XHJcblxyXG5cdCAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3dYID0gJ2hpZGRlbic7XHJcblx0ICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvd1kgPSAnaGlkZGVuJztcclxuXHQgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvd1ggPSAnaGlkZGVuJztcclxuXHQgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvd1kgPSAnaGlkZGVuJztcclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICB0aGlzLl9zaG93KCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0Q29udGVudEh0bWw6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHZhciBjb250ZW50SHRtbCA9ICcnO1xyXG5cdCAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5jb250ZW50ID09ICdzdHJpbmcnKSB7XHJcblx0ICAgICAgICAgICAgICAgIGNvbnRlbnRIdG1sID0gdGhpcy5jb250ZW50O1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pZnJhbWVVcmwpIHtcclxuXHQgICAgICAgICAgICAgICAgY29udGVudEh0bWwgPSAnPHNwYW4gaWQ9XCInKyB0aGlzLmlkICsnX2NvbnRtYXNrXCIgY2xhc3M9XCJkaWFsb2djb250bWFza1wiPjwvc3Bhbj48aWZyYW1lIGlkPVwiJysgdGhpcy5pZCArXHJcblx0ICAgICAgICAgICAgICAgICAgICAnX2lmcmFtZVwiIGNsYXNzPVwiJSUtaWZyYW1lXCIgaGVpZ2h0PVwiMTAwJVwiIHdpZHRoPVwiMTAwJVwiIGZyYW1lYm9yZGVyPVwiMFwiIHNyYz1cIicrIHRoaXMuaWZyYW1lVXJsICsnXCI+PC9pZnJhbWU+JztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRIdG1sO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGdldEh0bWxUcGw6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHZhciBmb290SHRtbCA9ICcnO1xyXG5cclxuXHQgICAgICAgICAgICBpZiAodGhpcy5idXR0b25zKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBidWZmID0gW107XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTx0aGlzLmJ1dHRvbnMubGVuZ3RoOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJ1ZmZbaV0gPSB0aGlzLmJ1dHRvbnNbaV0ucmVuZGVySHRtbCgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGZvb3RIdG1sID0gJzxkaXYgY2xhc3M9XCIlJS1mb290XCI+JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCIjI19idXR0b25zXCIgY2xhc3M9XCIlJS1idXR0b25zXCI+JyArIGJ1ZmYuam9pbignJykgKyAnPC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIHJldHVybiAnPGRpdiBpZD1cIiMjXCIgY2xhc3M9XCIlJVwiPjxkaXYgJysgKCAhdGhpcy5mdWxsc2NyZWVuID8gJ2NsYXNzPVwiJSVcIicgOiAnY2xhc3M9XCIlJS13cmFwIGVkdWktZGlhbG9nLWZ1bGxzY3JlZW4tZmxhZ1wiJyApICsnPjxkaXYgaWQ9XCIjI19ib2R5XCIgY2xhc3M9XCIlJS1ib2R5XCI+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiJSUtc2hhZG93XCI+PC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8ZGl2IGlkPVwiIyNfdGl0bGViYXJcIiBjbGFzcz1cIiUlLXRpdGxlYmFyXCI+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiJSUtZHJhZ2hhbmRsZVwiIG9ubW91c2Vkb3duPVwiJCQuX29uVGl0bGViYXJNb3VzZURvd24oZXZlbnQsIHRoaXMpO1wiPicgK1xyXG5cdCAgICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiJSUtY2FwdGlvblwiPicgKyAodGhpcy50aXRsZSB8fCAnJykgKyAnPC9zcGFuPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VCdXR0b24ucmVuZGVySHRtbCgpICtcclxuXHQgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGRpdiBpZD1cIiMjX2NvbnRlbnRcIiBjbGFzcz1cIiUlLWNvbnRlbnRcIj4nKyAoIHRoaXMuYXV0b1Jlc2V0ID8gJycgOiB0aGlzLmdldENvbnRlbnRIdG1sKCkpICsnPC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgIGZvb3RIdG1sICtcclxuXHQgICAgICAgICAgICAgICAgJzwvZGl2PjwvZGl2PjwvZGl2Pic7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcG9zdFJlbmRlcjogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgLy8gdG9kbzog5L+d5oyB5bGF5LitL+iusOS9j+S4iuasoeWFs+mXreS9jee9rumAiemhuVxyXG5cdCAgICAgICAgICAgIGlmICghdGhpcy5tb2RhbE1hc2suZ2V0RG9tKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5tb2RhbE1hc2sucmVuZGVyKCk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMubW9kYWxNYXNrLmhpZGUoKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKCF0aGlzLmRyYWdNYXNrLmdldERvbSgpKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZHJhZ01hc2sucmVuZGVyKCk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZHJhZ01hc2suaGlkZSgpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgIHRoaXMuYWRkTGlzdGVuZXIoJ3Nob3cnLCBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICAgICAgbWUubW9kYWxNYXNrLnNob3codGhpcy5nZXREb20oKS5zdHlsZS56SW5kZXggLSAyKTtcclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICB0aGlzLmFkZExpc3RlbmVyKCdoaWRlJywgZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgIG1lLm1vZGFsTWFzay5oaWRlKCk7XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuYnV0dG9ucykge1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8dGhpcy5idXR0b25zLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvbnNbaV0ucG9zdFJlbmRlcigpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLm9uKHdpbmRvdywgJ3Jlc2l6ZScsIGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKCFtZS5pc0hpZGRlbigpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuc2FmZVNldE9mZnNldCh1aVV0aWxzLmdldENsaWVudFJlY3QobWUuZ2V0RG9tKCkpKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgICAgIC8vaG9sZOS9j3Njcm9sbOS6i+S7tu+8jOmYsuatomRpYWxvZ+eahOa7muWKqOW9seWTjemhtemdolxyXG4vL1x0ICAgICAgICAgICAgaWYoIHRoaXMuaG9sZFNjcm9sbCApIHtcclxuXHQvL1xyXG4vL1x0ICAgICAgICAgICAgICAgIGlmKCAhbWUuaWZyYW1lVXJsICkge1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5vbiggZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1lLmlkICsgXCJfaWZyYW1lXCIpLCAhYnJvd3Nlci5nZWNrbyA/IFwibW91c2V3aGVlbFwiIDogXCJET01Nb3VzZVNjcm9sbFwiLCBmdW5jdGlvbihlKXtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnByZXZlbnREZWZhdWx0KGUpO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbi8vXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgbWUuYWRkTGlzdGVuZXIoJ2RpYWxvZ2FmdGVycmVzZXQnLCBmdW5jdGlvbigpe1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWZyYW1lV2luZG93ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1lLmlkICsgXCJfaWZyYW1lXCIpLmNvbnRlbnRXaW5kb3c7XHJcblx0Ly9cclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggYnJvd3Nlci5pZSApIHtcclxuXHQvL1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtcclxuXHQvL1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoIGlmcmFtZVdpbmRvdy5kb2N1bWVudCAmJiBpZnJhbWVXaW5kb3cuZG9jdW1lbnQuYm9keSApIHtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCggdGltZXIgKTtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lciA9IG51bGw7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMub24oIGlmcmFtZVdpbmRvdy5kb2N1bWVudC5ib2R5LCAhYnJvd3Nlci5nZWNrbyA/IFwibW91c2V3aGVlbFwiIDogXCJET01Nb3VzZVNjcm9sbFwiLCBmdW5jdGlvbihlKXtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucHJldmVudERlZmF1bHQoZSk7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSApO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdC8vXHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XHJcblx0Ly9cclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5vbiggaWZyYW1lV2luZG93LCAhYnJvd3Nlci5nZWNrbyA/IFwibW91c2V3aGVlbFwiIDogXCJET01Nb3VzZVNjcm9sbFwiLCBmdW5jdGlvbihlKXtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnByZXZlbnREZWZhdWx0KGUpO1xyXG4vL1x0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICk7XHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdC8vXHJcbi8vXHQgICAgICAgICAgICAgICAgICAgICAgICB9LCAxKTtcclxuLy9cdCAgICAgICAgICAgICAgICAgICAgfSk7XHJcbi8vXHQgICAgICAgICAgICAgICAgfVxyXG5cdC8vXHJcbi8vXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdGhpcy5faGlkZSgpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIG1lc3VyZVNpemU6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHZhciBib2R5ID0gdGhpcy5nZXREb20oJ2JvZHknKTtcclxuXHQgICAgICAgICAgICB2YXIgd2lkdGggPSB1aVV0aWxzLmdldENsaWVudFJlY3QodGhpcy5nZXREb20oJ2NvbnRlbnQnKSkud2lkdGg7XHJcblx0ICAgICAgICAgICAgdmFyIGRpYWxvZ0JvZHlTdHlsZSA9IGJvZHkuc3R5bGU7XHJcblx0ICAgICAgICAgICAgZGlhbG9nQm9keVN0eWxlLndpZHRoID0gd2lkdGg7XHJcblx0ICAgICAgICAgICAgcmV0dXJuIHVpVXRpbHMuZ2V0Q2xpZW50UmVjdChib2R5KTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfb25UaXRsZWJhck1vdXNlRG93bjogZnVuY3Rpb24gKGV2dCwgZWwpe1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLmRyYWdnYWJsZSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgcmVjdDtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHZwUmVjdCA9IHVpVXRpbHMuZ2V0Vmlld3BvcnRSZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgICAgIHVpVXRpbHMuc3RhcnREcmFnKGV2dCwge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgb25kcmFnc3RhcnQ6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHJlY3QgPSB1aVV0aWxzLmdldENsaWVudFJlY3QobWUuZ2V0RG9tKCkpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmdldERvbSgnY29udG1hc2snKS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmRyYWdNYXNrLnNob3cobWUuZ2V0RG9tKCkuc3R5bGUuekluZGV4IC0gMSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgb25kcmFnbW92ZTogZnVuY3Rpb24gKHgsIHkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsZWZ0ID0gcmVjdC5sZWZ0ICsgeDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9wID0gcmVjdC50b3AgKyB5O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLnNhZmVTZXRPZmZzZXQoe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBsZWZ0LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IHRvcFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgIG9uZHJhZ3N0b3A6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmdldERvbSgnY29udG1hc2snKS5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlQ2xhc3NlcyhtZS5nZXREb20oKSwgWydlZHVpLXN0YXRlLWNlbnRlcmVkJ10pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG1lLmRyYWdNYXNrLmhpZGUoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB0aGlzLmdldERvbSgnY29udGVudCcpLmlubmVySFRNTCA9IHRoaXMuZ2V0Q29udGVudEh0bWwoKTtcclxuXHQgICAgICAgICAgICB0aGlzLmZpcmVFdmVudCgnZGlhbG9nYWZ0ZXJyZXNldCcpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9zaG93OiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5faGlkZGVuKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZ2V0RG9tKCkuc3R5bGUuZGlzcGxheSA9ICcnO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgLy/opoHpq5jov4fnvJbovpHlmajnmoR6aW5keGVcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IuY29udGFpbmVyLnN0eWxlLnpJbmRleCAmJiAodGhpcy5nZXREb20oKS5zdHlsZS56SW5kZXggPSB0aGlzLmVkaXRvci5jb250YWluZXIuc3R5bGUuekluZGV4ICogMSArIDEwKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5faGlkZGVuID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCdzaG93Jyk7XHJcblx0ICAgICAgICAgICAgICAgIGJhaWR1LmVkaXRvci51aS51aVV0aWxzLmdldEZpeGVkTGF5ZXIoKS5zdHlsZS56SW5kZXggPSB0aGlzLmdldERvbSgpLnN0eWxlLnpJbmRleCAtIDQ7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGlzSGlkZGVuOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICByZXR1cm4gdGhpcy5faGlkZGVuO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9oaWRlOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICBpZiAoIXRoaXMuX2hpZGRlbikge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgd3JhcE5vZGUgPSB0aGlzLmdldERvbSgpO1xyXG5cdCAgICAgICAgICAgICAgICB3cmFwTm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG5cdCAgICAgICAgICAgICAgICB3cmFwTm9kZS5zdHlsZS56SW5kZXggPSAnJztcclxuXHQgICAgICAgICAgICAgICAgd3JhcE5vZGUuc3R5bGUud2lkdGggPSAnJztcclxuXHQgICAgICAgICAgICAgICAgd3JhcE5vZGUuc3R5bGUuaGVpZ2h0ID0gJyc7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2hpZGRlbiA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZmlyZUV2ZW50KCdoaWRlJyk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIG9wZW46IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLmF1dG9SZXNldCkge1xyXG5cdCAgICAgICAgICAgICAgICAvL+acieWPr+iDvei/mOayoeaciea4suafk1xyXG5cdCAgICAgICAgICAgICAgICB0cnl7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KCk7XHJcblx0ICAgICAgICAgICAgICAgIH1jYXRjaChlKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW4oKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMuc2hvd0F0Q2VudGVyKCk7XHJcblx0ICAgICAgICAgICAgaWYgKHRoaXMuaWZyYW1lVXJsKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRyeSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmdldERvbSgnaWZyYW1lJykuZm9jdXMoKTtcclxuXHQgICAgICAgICAgICAgICAgfSBjYXRjaChleCl7fVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBhY3RpdmVEaWFsb2cgPSB0aGlzO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9vbkNsb3NlQnV0dG9uQ2xpY2s6IGZ1bmN0aW9uIChldnQsIGVsKXtcclxuXHQgICAgICAgICAgICB0aGlzLmNsb3NlKGZhbHNlKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBjbG9zZTogZnVuY3Rpb24gKG9rKXtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5maXJlRXZlbnQoJ2Nsb3NlJywgb2spICE9PSBmYWxzZSkge1xyXG5cdCAgICAgICAgICAgICAgICAvL+i/mOWOn+eOr+Wig1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIHRoaXMuZnVsbHNjcmVlbiApIHtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3dYID0gdGhpcy5fb3JpZ2luYWxDb250ZXh0Lmh0bWwub3ZlcmZsb3dYO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93WSA9IHRoaXMuX29yaWdpbmFsQ29udGV4dC5odG1sLm92ZXJmbG93WTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3dYID0gdGhpcy5fb3JpZ2luYWxDb250ZXh0LmJvZHkub3ZlcmZsb3dYO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvd1kgPSB0aGlzLl9vcmlnaW5hbENvbnRleHQuYm9keS5vdmVyZmxvd1k7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fb3JpZ2luYWxDb250ZXh0O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB0aGlzLl9oaWRlKCk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAvL+mUgOavgWNvbnRlbnRcclxuXHQgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSB0aGlzLmdldERvbSgnY29udGVudCcpO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgaWZyYW1lID0gdGhpcy5nZXREb20oJ2lmcmFtZScpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoY29udGVudCAmJiBpZnJhbWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBkb2MgPSBpZnJhbWUuY29udGVudERvY3VtZW50IHx8IGlmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9jICYmIChkb2MuYm9keS5pbm5lckhUTUwgPSAnJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5yZW1vdmUoY29udGVudCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIHV0aWxzLmluaGVyaXRzKERpYWxvZywgVUlCYXNlKTtcclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gdWkvbWVudWJ1dHRvbi5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vaW1wb3J0IHVpY29yZVxyXG5cdC8vL2ltcG9ydCB1aS9tZW51LmpzXHJcblx0Ly8vaW1wb3J0IHVpL3NwbGl0YnV0dG9uLmpzXHJcblx0KGZ1bmN0aW9uICgpe1xyXG5cdCAgICB2YXIgdXRpbHMgPSBiYWlkdS5lZGl0b3IudXRpbHMsXHJcblx0ICAgICAgICBNZW51ID0gYmFpZHUuZWRpdG9yLnVpLk1lbnUsXHJcblx0ICAgICAgICBTcGxpdEJ1dHRvbiA9IGJhaWR1LmVkaXRvci51aS5TcGxpdEJ1dHRvbixcclxuXHQgICAgICAgIE1lbnVCdXR0b24gPSBiYWlkdS5lZGl0b3IudWkuTWVudUJ1dHRvbiA9IGZ1bmN0aW9uIChvcHRpb25zKXtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRPcHRpb25zKG9wdGlvbnMpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdE1lbnVCdXR0b24oKTtcclxuXHQgICAgICAgIH07XHJcblx0ICAgIE1lbnVCdXR0b24ucHJvdG90eXBlID0ge1xyXG5cdCAgICAgICAgaW5pdE1lbnVCdXR0b246IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgdGhpcy51aU5hbWUgPSBcIm1lbnVidXR0b25cIjtcclxuXHQgICAgICAgICAgICB0aGlzLnBvcHVwID0gbmV3IE1lbnUoe1xyXG5cdCAgICAgICAgICAgICAgICBpdGVtczogbWUuaXRlbXMsXHJcblx0ICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogbWUuY2xhc3NOYW1lLFxyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3I6bWUuZWRpdG9yXHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgdGhpcy5wb3B1cC5hZGRMaXN0ZW5lcignc2hvdycsIGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxsaXN0Lml0ZW1zLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsaXN0Lml0ZW1zW2ldLnJlbW92ZVN0YXRlKCdjaGVja2VkJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAobGlzdC5pdGVtc1tpXS52YWx1ZSA9PSBtZS5fdmFsdWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsaXN0Lml0ZW1zW2ldLmFkZFN0YXRlKCdjaGVja2VkJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IG1lLl92YWx1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdFNwbGl0QnV0dG9uKCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgc2V0VmFsdWUgOiBmdW5jdGlvbih2YWx1ZSl7XHJcblx0ICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIFxyXG5cdCAgICB9O1xyXG5cdCAgICB1dGlscy5pbmhlcml0cyhNZW51QnV0dG9uLCBTcGxpdEJ1dHRvbik7XHJcblx0fSkoKTtcclxuXHJcblx0Ly8gdWkvbXVsdGlNZW51LmpzXHJcblx0Ly8vaW1wb3J0IGNvcmVcclxuXHQvLy9pbXBvcnQgdWljb3JlXHJcblx0IC8vL2NvbW1hbmRzIOihqOaDhVxyXG5cdChmdW5jdGlvbigpe1xyXG5cdCAgICB2YXIgdXRpbHMgPSBiYWlkdS5lZGl0b3IudXRpbHMsXHJcblx0ICAgICAgICBQb3B1cCA9IGJhaWR1LmVkaXRvci51aS5Qb3B1cCxcclxuXHQgICAgICAgIFNwbGl0QnV0dG9uID0gYmFpZHUuZWRpdG9yLnVpLlNwbGl0QnV0dG9uLFxyXG5cdCAgICAgICAgTXVsdGlNZW51UG9wID0gYmFpZHUuZWRpdG9yLnVpLk11bHRpTWVudVBvcCA9IGZ1bmN0aW9uKG9wdGlvbnMpe1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdE9wdGlvbnMob3B0aW9ucyk7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0TXVsdGlNZW51KCk7XHJcblx0ICAgICAgICB9O1xyXG5cclxuXHQgICAgTXVsdGlNZW51UG9wLnByb3RvdHlwZSA9IHtcclxuXHQgICAgICAgIGluaXRNdWx0aU1lbnU6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgdGhpcy5wb3B1cCA9IG5ldyBQb3B1cCh7XHJcblx0ICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICcnLFxyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3IgOiBtZS5lZGl0b3IsXHJcblx0ICAgICAgICAgICAgICAgIGlmcmFtZV9yZW5kZXJlZDogZmFsc2UsXHJcblx0ICAgICAgICAgICAgICAgIG9uc2hvdzogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaWZyYW1lX3JlbmRlcmVkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pZnJhbWVfcmVuZGVyZWQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RG9tKCdjb250ZW50JykuaW5uZXJIVE1MID0gJzxpZnJhbWUgaWQ9XCInK21lLmlkKydfaWZyYW1lXCIgc3JjPVwiJysgbWUuaWZyYW1lVXJsICsnXCIgZnJhbWVib3JkZXI9XCIwXCI+PC9pZnJhbWU+JztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5lZGl0b3IuY29udGFpbmVyLnN0eWxlLnpJbmRleCAmJiAodGhpcy5nZXREb20oKS5zdHlsZS56SW5kZXggPSBtZS5lZGl0b3IuY29udGFpbmVyLnN0eWxlLnpJbmRleCAqIDEgKyAxKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgIC8vIGNhblNpZGVVcDpmYWxzZSxcclxuXHQgICAgICAgICAgICAgICAvLyBjYW5TaWRlTGVmdDpmYWxzZVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIHRoaXMub25idXR0b25jbGljayA9IGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2hvd1BvcHVwKCk7XHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRTcGxpdEJ1dHRvbigpO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgfTtcclxuXHJcblx0ICAgIHV0aWxzLmluaGVyaXRzKE11bHRpTWVudVBvcCwgU3BsaXRCdXR0b24pO1xyXG5cdH0pKCk7XHJcblxyXG5cclxuXHQvLyB1aS9zaG9ydGN1dG1lbnUuanNcclxuXHQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICB2YXIgVUkgPSBiYWlkdS5lZGl0b3IudWksXHJcblx0ICAgICAgICBVSUJhc2UgPSBVSS5VSUJhc2UsXHJcblx0ICAgICAgICB1aVV0aWxzID0gVUkudWlVdGlscyxcclxuXHQgICAgICAgIHV0aWxzID0gYmFpZHUuZWRpdG9yLnV0aWxzLFxyXG5cdCAgICAgICAgZG9tVXRpbHMgPSBiYWlkdS5lZGl0b3IuZG9tLmRvbVV0aWxzO1xyXG5cclxuXHQgICAgdmFyIGFsbE1lbnVzID0gW10sLy/lrZjlgqjmiYDmnInlv6vmjbfoj5zljZVcclxuXHQgICAgICAgIHRpbWVJRCxcclxuXHQgICAgICAgIGlzU3ViTWVudVNob3cgPSBmYWxzZTsvL+aYr+WQpuacieWtkHBvcOaYvuekulxyXG5cclxuXHQgICAgdmFyIFNob3J0Q3V0TWVudSA9IFVJLlNob3J0Q3V0TWVudSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblx0ICAgICAgICB0aGlzLmluaXRPcHRpb25zIChvcHRpb25zKTtcclxuXHQgICAgICAgIHRoaXMuaW5pdFNob3J0Q3V0TWVudSAoKTtcclxuXHQgICAgfTtcclxuXHJcblx0ICAgIFNob3J0Q3V0TWVudS5wb3N0SGlkZSA9IGhpZGVBbGxNZW51O1xyXG5cclxuXHQgICAgU2hvcnRDdXRNZW51LnByb3RvdHlwZSA9IHtcclxuXHQgICAgICAgIGlzSGlkZGVuIDogdHJ1ZSAsXHJcblx0ICAgICAgICBTUEFDRSA6IDUgLFxyXG5cdCAgICAgICAgaW5pdFNob3J0Q3V0TWVudSA6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5pdGVtcyB8fCBbXTtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRVSUJhc2UgKCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0SXRlbXMgKCk7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0RXZlbnQgKCk7XHJcblx0ICAgICAgICAgICAgYWxsTWVudXMucHVzaCAodGhpcyk7XHJcblx0ICAgICAgICB9ICxcclxuXHQgICAgICAgIGluaXRFdmVudCA6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICBkb2MgPSBtZS5lZGl0b3IuZG9jdW1lbnQ7XHJcblxyXG5cdCAgICAgICAgICAgIGRvbVV0aWxzLm9uIChkb2MgLCBcIm1vdXNlbW92ZVwiICwgZnVuY3Rpb24gKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG1lLmlzSGlkZGVuID09PSBmYWxzZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/mnIlwb3DmmL7npLrlsLHkuI3pmpDol4/lv6vmjbfoj5zljZVcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChtZS5nZXRTdWJNZW51TWFyayAoKSB8fCBtZS5ldmVudFR5cGUgPT0gXCJjb250ZXh0bWVudVwiKSAgIHJldHVybjtcclxuXHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGZsYWcgPSB0cnVlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVsID0gbWUuZ2V0RG9tICgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHd0ID0gZWwub2Zmc2V0V2lkdGgsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaHQgPSBlbC5vZmZzZXRIZWlnaHQsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VYID0gd3QgLyAyICsgbWUuU1BBQ0UsLy/ot53nprvkuK3lv4NY5qCH5YeGXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2VZID0gaHQgLyAyLC8v6Led56a75Lit5b+DWeagh+WHhlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHggPSBNYXRoLmFicyAoZS5zY3JlZW5YIC0gbWUubGVmdCksLy/nprvkuK3lv4Pot53nprvmqKrlnZDmoIdcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB5ID0gTWF0aC5hYnMgKGUuc2NyZWVuWSAtIG1lLnRvcCk7Ly/nprvkuK3lv4Pot53nprvnurXlnZDmoIdcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQgKHRpbWVJRCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aW1lSUQgPSBzZXRUaW1lb3V0IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHkgPiAwICYmIHkgPCBkaXN0YW5jZVkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuc2V0T3BhY2l0eSAoZWwgLCBcIjFcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh5ID4gZGlzdGFuY2VZICYmIHkgPCBkaXN0YW5jZVkgKyA3MCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5zZXRPcGFjaXR5IChlbCAsIFwiMC41XCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh5ID4gZGlzdGFuY2VZICsgNzAgJiYgeSA8IGRpc3RhbmNlWSArIDE0MCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5oaWRlICgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZsYWcgJiYgeCA+IDAgJiYgeCA8IGRpc3RhbmNlWCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZS5zZXRPcGFjaXR5IChlbCAsIFwiMVwiKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeCA+IGRpc3RhbmNlWCAmJiB4IDwgZGlzdGFuY2VYICsgNzApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuc2V0T3BhY2l0eSAoZWwgLCBcIjAuNVwiKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeCA+IGRpc3RhbmNlWCArIDcwICYmIHggPCBkaXN0YW5jZVggKyAxNDApIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWUuaGlkZSAoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgICAgICAvL2llXFxmZuS4iyBtb3VzZW91dOS4jeWHhlxyXG5cdCAgICAgICAgICAgIGlmIChicm93c2VyLmNocm9tZSkge1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5vbiAoZG9jICwgXCJtb3VzZW91dFwiICwgZnVuY3Rpb24gKGUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciByZWxhdGVkVGd0ID0gZS5yZWxhdGVkVGFyZ2V0IHx8IGUudG9FbGVtZW50O1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChyZWxhdGVkVGd0ID09IG51bGwgfHwgcmVsYXRlZFRndC50YWdOYW1lID09IFwiSFRNTFwiKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbWUuaGlkZSAoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICBtZS5lZGl0b3IuYWRkTGlzdGVuZXIgKFwiYWZ0ZXJoaWRlcG9wXCIgLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICghbWUuaXNIaWRkZW4pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlzU3ViTWVudVNob3cgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgfSAsXHJcblx0ICAgICAgICBpbml0SXRlbXMgOiBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgaWYgKHV0aWxzLmlzQXJyYXkgKHRoaXMuaXRlbXMpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLml0ZW1zLmxlbmd0aCA7IGkgPCBsZW4gOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gdGhpcy5pdGVtc1tpXS50b0xvd2VyQ2FzZSAoKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoVUlbaXRlbV0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zW2ldID0gbmV3IFVJW2l0ZW1dICh0aGlzLmVkaXRvcik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtc1tpXS5jbGFzc05hbWUgKz0gXCIgZWR1aS1zaG9ydGN1dHN1Ym1lbnUgXCI7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9ICxcclxuXHQgICAgICAgIHNldE9wYWNpdHkgOiBmdW5jdGlvbiAoZWwgLCB2YWx1ZSkge1xyXG5cdCAgICAgICAgICAgIGlmIChicm93c2VyLmllICYmIGJyb3dzZXIudmVyc2lvbiA8IDkpIHtcclxuXHQgICAgICAgICAgICAgICAgZWwuc3R5bGUuZmlsdGVyID0gXCJhbHBoYShvcGFjaXR5ID0gXCIgKyBwYXJzZUZsb2F0ICh2YWx1ZSkgKiAxMDAgKyBcIik7XCJcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gdmFsdWU7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSAsXHJcblx0ICAgICAgICBnZXRTdWJNZW51TWFyayA6IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICBpc1N1Yk1lbnVTaG93ID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgdmFyIGxheWVyRWxlID0gdWlVdGlscy5nZXRGaXhlZExheWVyICgpO1xyXG5cdCAgICAgICAgICAgIHZhciBsaXN0ID0gZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUgKGxheWVyRWxlICwgXCJkaXZcIiAsIGZ1bmN0aW9uIChub2RlKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiBkb21VdGlscy5oYXNDbGFzcyAobm9kZSAsIFwiZWR1aS1zaG9ydGN1dHN1Ym1lbnUgZWR1aS1wb3B1cFwiKVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbm9kZSA7IG5vZGUgPSBsaXN0W2krK10gOykge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobm9kZS5zdHlsZS5kaXNwbGF5ICE9IFwibm9uZVwiKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpc1N1Yk1lbnVTaG93ID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICByZXR1cm4gaXNTdWJNZW51U2hvdztcclxuXHQgICAgICAgIH0gLFxyXG5cdCAgICAgICAgc2hvdyA6IGZ1bmN0aW9uIChlICwgaGFzQ29udGV4dG1lbnUpIHtcclxuXHQgICAgICAgICAgICB2YXIgbWUgPSB0aGlzLFxyXG5cdCAgICAgICAgICAgICAgICBvZmZzZXQgPSB7fSxcclxuXHQgICAgICAgICAgICAgICAgZWwgPSB0aGlzLmdldERvbSAoKSxcclxuXHQgICAgICAgICAgICAgICAgZml4ZWRsYXllciA9IHVpVXRpbHMuZ2V0Rml4ZWRMYXllciAoKTtcclxuXHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gc2V0UG9zIChvZmZzZXQpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKG9mZnNldC5sZWZ0IDwgMCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LmxlZnQgPSAwO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChvZmZzZXQudG9wIDwgMCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgb2Zmc2V0LnRvcCA9IDA7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgZWwuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDpcIiArIG9mZnNldC5sZWZ0ICsgXCJweDt0b3A6XCIgKyBvZmZzZXQudG9wICsgXCJweDtcIjtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIHNldFBvc0J5Q3h0TWVudSAobWVudSkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIW1lbnUudGFnTmFtZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWVudSA9IG1lbnUuZ2V0RG9tICgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIG9mZnNldC5sZWZ0ID0gcGFyc2VJbnQgKG1lbnUuc3R5bGUubGVmdCk7XHJcblx0ICAgICAgICAgICAgICAgIG9mZnNldC50b3AgPSBwYXJzZUludCAobWVudS5zdHlsZS50b3ApO1xyXG5cdCAgICAgICAgICAgICAgICBvZmZzZXQudG9wIC09IGVsLm9mZnNldEhlaWdodCArIDE1O1xyXG5cdCAgICAgICAgICAgICAgICBzZXRQb3MgKG9mZnNldCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgbWUuZXZlbnRUeXBlID0gZS50eXBlO1xyXG5cdCAgICAgICAgICAgIGVsLnN0eWxlLmNzc1RleHQgPSBcImRpc3BsYXk6YmxvY2s7bGVmdDotOTk5OXB4XCI7XHJcblxyXG5cdCAgICAgICAgICAgIGlmIChlLnR5cGUgPT0gXCJjb250ZXh0bWVudVwiICYmIGhhc0NvbnRleHRtZW51KSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBtZW51ID0gZG9tVXRpbHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUgKGZpeGVkbGF5ZXIgLCBcImRpdlwiICwgXCJlZHVpLWNvbnRleHRtZW51XCIpWzBdO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAobWVudSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc2V0UG9zQnlDeHRNZW51IChtZW51KVxyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWUuZWRpdG9yLmFkZExpc3RlbmVyIChcImFmdGVyc2hvd2NvbnRleHRtZW51XCIgLCBmdW5jdGlvbiAodHlwZSAsIG1lbnUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzZXRQb3NCeUN4dE1lbnUgKG1lbnUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBvZmZzZXQgPSB1aVV0aWxzLmdldFZpZXdwb3J0T2Zmc2V0QnlFdmVudCAoZSk7XHJcblx0ICAgICAgICAgICAgICAgIG9mZnNldC50b3AgLT0gZWwub2Zmc2V0SGVpZ2h0ICsgbWUuU1BBQ0U7XHJcblx0ICAgICAgICAgICAgICAgIG9mZnNldC5sZWZ0ICs9IG1lLlNQQUNFICsgMjA7XHJcblx0ICAgICAgICAgICAgICAgIHNldFBvcyAob2Zmc2V0KTtcclxuXHQgICAgICAgICAgICAgICAgbWUuc2V0T3BhY2l0eSAoZWwgLCAwLjIpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblxyXG5cdCAgICAgICAgICAgIG1lLmlzSGlkZGVuID0gZmFsc2U7XHJcblx0ICAgICAgICAgICAgbWUubGVmdCA9IGUuc2NyZWVuWCArIGVsLm9mZnNldFdpZHRoIC8gMiAtIG1lLlNQQUNFO1xyXG5cdCAgICAgICAgICAgIG1lLnRvcCA9IGUuc2NyZWVuWSAtIChlbC5vZmZzZXRIZWlnaHQgLyAyKSAtIG1lLlNQQUNFO1xyXG5cclxuXHQgICAgICAgICAgICBpZiAobWUuZWRpdG9yKSB7XHJcblx0ICAgICAgICAgICAgICAgIGVsLnN0eWxlLnpJbmRleCA9IG1lLmVkaXRvci5jb250YWluZXIuc3R5bGUuekluZGV4ICogMSArIDEwO1xyXG5cdCAgICAgICAgICAgICAgICBmaXhlZGxheWVyLnN0eWxlLnpJbmRleCA9IGVsLnN0eWxlLnpJbmRleCAtIDE7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSAsXHJcblx0ICAgICAgICBoaWRlIDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLmdldERvbSAoKSkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmdldERvbSAoKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHRoaXMuaXNIaWRkZW4gPSB0cnVlO1xyXG5cdCAgICAgICAgfSAsXHJcblx0ICAgICAgICBwb3N0UmVuZGVyIDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGlmICh1dGlscy5pc0FycmF5ICh0aGlzLml0ZW1zKSkge1xyXG5cdCAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaXRlbSA7IGl0ZW0gPSB0aGlzLml0ZW1zW2krK10gOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbS5wb3N0UmVuZGVyICgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSAsXHJcblx0ICAgICAgICBnZXRIdG1sVHBsIDogZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBidWZmO1xyXG5cdCAgICAgICAgICAgIGlmICh1dGlscy5pc0FycmF5ICh0aGlzLml0ZW1zKSkge1xyXG5cdCAgICAgICAgICAgICAgICBidWZmID0gW107XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwIDsgaSA8IHRoaXMuaXRlbXMubGVuZ3RoIDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBidWZmW2ldID0gdGhpcy5pdGVtc1tpXS5yZW5kZXJIdG1sICgpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGJ1ZmYgPSBidWZmLmpvaW4gKFwiXCIpO1xyXG5cdCAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgIGJ1ZmYgPSB0aGlzLml0ZW1zO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGlkPVwiIyNcIiBjbGFzcz1cIiUlIGVkdWktdG9vbGJhclwiIGRhdGEtc3JjPVwic2hvcnRjdXRtZW51XCIgb25tb3VzZWRvd249XCJyZXR1cm4gZmFsc2U7XCIgb25zZWxlY3RzdGFydD1cInJldHVybiBmYWxzZTtcIiA+JyArXHJcblx0ICAgICAgICAgICAgICAgIGJ1ZmYgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHJcblx0ICAgIHV0aWxzLmluaGVyaXRzIChTaG9ydEN1dE1lbnUgLCBVSUJhc2UpO1xyXG5cclxuXHQgICAgZnVuY3Rpb24gaGlkZUFsbE1lbnUgKGUpIHtcclxuXHQgICAgICAgIHZhciB0Z3QgPSBlLnRhcmdldCB8fCBlLnNyY0VsZW1lbnQsXHJcblx0ICAgICAgICAgICAgY3VyID0gZG9tVXRpbHMuZmluZFBhcmVudCAodGd0ICwgZnVuY3Rpb24gKG5vZGUpIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuIGRvbVV0aWxzLmhhc0NsYXNzIChub2RlICwgXCJlZHVpLXNob3J0Y3V0bWVudVwiKSB8fCBkb21VdGlscy5oYXNDbGFzcyAobm9kZSAsIFwiZWR1aS1wb3B1cFwiKTtcclxuXHQgICAgICAgICAgICB9ICwgdHJ1ZSk7XHJcblxyXG5cdCAgICAgICAgaWYgKCFjdXIpIHtcclxuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbWVudSA7IG1lbnUgPSBhbGxNZW51c1tpKytdIDspIHtcclxuXHQgICAgICAgICAgICAgICAgbWVudS5oaWRlICgpXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICBkb21VdGlscy5vbiAoZG9jdW1lbnQgLCAnbW91c2Vkb3duJyAsIGZ1bmN0aW9uIChlKSB7XHJcblx0ICAgICAgICBoaWRlQWxsTWVudSAoZSk7XHJcblx0ICAgIH0pO1xyXG5cclxuXHQgICAgZG9tVXRpbHMub24gKHdpbmRvdyAsICdzY3JvbGwnICwgZnVuY3Rpb24gKGUpIHtcclxuXHQgICAgICAgIGhpZGVBbGxNZW51IChlKTtcclxuXHQgICAgfSk7XHJcblxyXG5cdH0pICgpO1xyXG5cclxuXHJcblx0Ly8gdWkvYnJlYWtsaW5lLmpzXHJcblx0KGZ1bmN0aW9uICgpe1xyXG5cdCAgICB2YXIgdXRpbHMgPSBiYWlkdS5lZGl0b3IudXRpbHMsXHJcblx0ICAgICAgICBVSUJhc2UgPSBiYWlkdS5lZGl0b3IudWkuVUlCYXNlLFxyXG5cdCAgICAgICAgQnJlYWtsaW5lID0gYmFpZHUuZWRpdG9yLnVpLkJyZWFrbGluZSA9IGZ1bmN0aW9uIChvcHRpb25zKXtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRPcHRpb25zKG9wdGlvbnMpO1xyXG5cdCAgICAgICAgICAgIHRoaXMuaW5pdFNlcGFyYXRvcigpO1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgQnJlYWtsaW5lLnByb3RvdHlwZSA9IHtcclxuXHQgICAgICAgIHVpTmFtZTogJ0JyZWFrbGluZScsXHJcblx0ICAgICAgICBpbml0U2VwYXJhdG9yOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRVSUJhc2UoKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRIdG1sVHBsOiBmdW5jdGlvbiAoKXtcclxuXHQgICAgICAgICAgICByZXR1cm4gJzxici8+JztcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgdXRpbHMuaW5oZXJpdHMoQnJlYWtsaW5lLCBVSUJhc2UpO1xyXG5cclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gdWkvbWVzc2FnZS5qc1xyXG5cdC8vL2ltcG9ydCBjb3JlXHJcblx0Ly8vaW1wb3J0IHVpY29yZVxyXG5cdChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIHZhciB1dGlscyA9IGJhaWR1LmVkaXRvci51dGlscyxcclxuXHQgICAgICAgIGRvbVV0aWxzID0gYmFpZHUuZWRpdG9yLmRvbS5kb21VdGlscyxcclxuXHQgICAgICAgIFVJQmFzZSA9IGJhaWR1LmVkaXRvci51aS5VSUJhc2UsXHJcblx0ICAgICAgICBNZXNzYWdlID0gYmFpZHUuZWRpdG9yLnVpLk1lc3NhZ2UgPSBmdW5jdGlvbiAob3B0aW9ucyl7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0T3B0aW9ucyhvcHRpb25zKTtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRNZXNzYWdlKCk7XHJcblx0ICAgICAgICB9O1xyXG5cclxuXHQgICAgTWVzc2FnZS5wcm90b3R5cGUgPSB7XHJcblx0ICAgICAgICBpbml0TWVzc2FnZTogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdGhpcy5pbml0VUlCYXNlKCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZ2V0SHRtbFRwbDogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGlkPVwiIyNcIiBjbGFzcz1cImVkdWktbWVzc2FnZSAlJVwiPicgK1xyXG5cdCAgICAgICAgICAgICcgPGRpdiBpZD1cIiMjX2Nsb3NlclwiIGNsYXNzPVwiZWR1aS1tZXNzYWdlLWNsb3NlclwiPsOXPC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgJyA8ZGl2IGlkPVwiIyNfYm9keVwiIGNsYXNzPVwiZWR1aS1tZXNzYWdlLWJvZHkgZWR1aS1tZXNzYWdlLXR5cGUtaW5mb1wiPicgK1xyXG5cdCAgICAgICAgICAgICcgPGlmcmFtZSBzdHlsZT1cInBvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6LTE7bGVmdDowO3RvcDowO2JhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1wiIGZyYW1lYm9yZGVyPVwiMFwiIHdpZHRoPVwiMTAwJVwiIGhlaWdodD1cIjEwMCVcIiBzcmM9XCJhYm91dDpibGFua1wiPjwvaWZyYW1lPicgK1xyXG5cdCAgICAgICAgICAgICcgPGRpdiBjbGFzcz1cImVkdWktc2hhZG93XCI+PC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgJyA8ZGl2IGlkPVwiIyNfY29udGVudFwiIGNsYXNzPVwiZWR1aS1tZXNzYWdlLWNvbnRlbnRcIj4nICtcclxuXHQgICAgICAgICAgICAnICA8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAnIDwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHJlc2V0OiBmdW5jdGlvbihvcHQpe1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgaWYgKCFvcHQua2VlcHNob3cpIHtcclxuXHQgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xyXG5cdCAgICAgICAgICAgICAgICBtZS50aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmhpZGUoKTtcclxuXHQgICAgICAgICAgICAgICAgfSwgb3B0LnRpbWVvdXQgfHwgNDAwMCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICBvcHQuY29udGVudCAhPT0gdW5kZWZpbmVkICYmIG1lLnNldENvbnRlbnQob3B0LmNvbnRlbnQpO1xyXG5cdCAgICAgICAgICAgIG9wdC50eXBlICE9PSB1bmRlZmluZWQgJiYgbWUuc2V0VHlwZShvcHQudHlwZSk7XHJcblxyXG5cdCAgICAgICAgICAgIG1lLnNob3coKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBwb3N0UmVuZGVyOiBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXMsXHJcblx0ICAgICAgICAgICAgICAgIGNsb3NlciA9IHRoaXMuZ2V0RG9tKCdjbG9zZXInKTtcclxuXHQgICAgICAgICAgICBjbG9zZXIgJiYgZG9tVXRpbHMub24oY2xvc2VyLCAnY2xpY2snLCBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgICAgICBtZS5oaWRlKCk7XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgc2V0Q29udGVudDogZnVuY3Rpb24oY29udGVudCl7XHJcblx0ICAgICAgICAgICAgdGhpcy5nZXREb20oJ2NvbnRlbnQnKS5pbm5lckhUTUwgPSBjb250ZW50O1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNldFR5cGU6IGZ1bmN0aW9uKHR5cGUpe1xyXG5cdCAgICAgICAgICAgIHR5cGUgPSB0eXBlIHx8ICdpbmZvJztcclxuXHQgICAgICAgICAgICB2YXIgYm9keSA9IHRoaXMuZ2V0RG9tKCdib2R5Jyk7XHJcblx0ICAgICAgICAgICAgYm9keS5jbGFzc05hbWUgPSBib2R5LmNsYXNzTmFtZS5yZXBsYWNlKC9lZHVpLW1lc3NhZ2UtdHlwZS1bXFx3LV0rLywgJ2VkdWktbWVzc2FnZS10eXBlLScgKyB0eXBlKTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRDb250ZW50OiBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERvbSgnY29udGVudCcpLmlubmVySFRNTDtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRUeXBlOiBmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgIHZhciBhcnIgPSB0aGlzLmdldERvbSgnYm9keScpLm1hdGNoKC9lZHVpLW1lc3NhZ2UtdHlwZS0oW1xcdy1dKykvKTtcclxuXHQgICAgICAgICAgICByZXR1cm4gYXJyID8gYXJyWzFdOicnO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNob3c6IGZ1bmN0aW9uICgpe1xyXG5cdCAgICAgICAgICAgIHRoaXMuZ2V0RG9tKCkuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgaGlkZTogZnVuY3Rpb24gKCl7XHJcblx0ICAgICAgICAgICAgdmFyIGRvbSA9IHRoaXMuZ2V0RG9tKCk7XHJcblx0ICAgICAgICAgICAgaWYgKGRvbSkge1xyXG5cdCAgICAgICAgICAgICAgICBkb20uc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuXHQgICAgICAgICAgICAgICAgZG9tLnBhcmVudE5vZGUgJiYgZG9tLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZG9tKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICB1dGlscy5pbmhlcml0cyhNZXNzYWdlLCBVSUJhc2UpO1xyXG5cclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gYWRhcHRlci9lZGl0b3J1aS5qc1xyXG5cdC8vdWnot5/nvJbovpHlmajnmoTpgILphY3lsaRcclxuXHQvL+mCo+S4quaMiemSruW8ueWHuuaYr2RpYWxvZ++8jOaYr+S4i+aLieetkOetiemDveaYr+WcqOi/meS4qmpz5Lit6YWN572uXHJcblx0Ly/oh6rlt7HlhpnnmoR1aeS5n+imgeWcqOi/memHjOmFjee9ru+8jOaUvuWIsGJhaWR1LmVkaXRvci51aeS4i+i+ue+8jOW9k+e8lui+keWZqOWunuS+i+WMlueahOaXtuWAmeS8muagueaNrnVlZGl0b3IuY29uZmln5Lit55qEdG9vbGJhcnPmib7liLDnm7jlupTnmoTov5vooYzlrp7kvovljJZcclxuXHQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICB2YXIgdXRpbHMgPSBiYWlkdS5lZGl0b3IudXRpbHM7XHJcblx0ICAgIHZhciBlZGl0b3J1aSA9IGJhaWR1LmVkaXRvci51aTtcclxuXHQgICAgdmFyIF9EaWFsb2cgPSBlZGl0b3J1aS5EaWFsb2c7XHJcblx0ICAgIGVkaXRvcnVpLmJ1dHRvbnMgPSB7fTtcclxuXHJcblx0ICAgIGVkaXRvcnVpLkRpYWxvZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcblx0ICAgICAgICB2YXIgZGlhbG9nID0gbmV3IF9EaWFsb2cob3B0aW9ucyk7XHJcblx0ICAgICAgICBkaWFsb2cuYWRkTGlzdGVuZXIoJ2hpZGUnLCBmdW5jdGlvbiAoKSB7XHJcblxyXG5cdCAgICAgICAgICAgIGlmIChkaWFsb2cuZWRpdG9yKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBlZGl0b3IgPSBkaWFsb2cuZWRpdG9yO1xyXG5cdCAgICAgICAgICAgICAgICB0cnkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGJyb3dzZXIuZ2Vja28pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IGVkaXRvci53aW5kb3cuc2Nyb2xsWSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGVkaXRvci53aW5kb3cuc2Nyb2xsWDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IuYm9keS5mb2N1cygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci53aW5kb3cuc2Nyb2xsVG8oeCwgeSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5mb2N1cygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIHJldHVybiBkaWFsb2c7XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICB2YXIgaWZyYW1lVXJsTWFwID0ge1xyXG5cdCAgICAgICAgJ2FuY2hvcic6J34vZGlhbG9ncy9hbmNob3IvYW5jaG9yLmh0bWwnLFxyXG5cdCAgICAgICAgJ2luc2VydGltYWdlJzonfi9kaWFsb2dzL2ltYWdlL2ltYWdlLmh0bWwnLFxyXG5cdCAgICAgICAgJ2xpbmsnOid+L2RpYWxvZ3MvbGluay9saW5rLmh0bWwnLFxyXG5cdCAgICAgICAgJ3NwZWNoYXJzJzonfi9kaWFsb2dzL3NwZWNoYXJzL3NwZWNoYXJzLmh0bWwnLFxyXG5cdCAgICAgICAgJ3NlYXJjaHJlcGxhY2UnOid+L2RpYWxvZ3Mvc2VhcmNocmVwbGFjZS9zZWFyY2hyZXBsYWNlLmh0bWwnLFxyXG5cdCAgICAgICAgJ21hcCc6J34vZGlhbG9ncy9tYXAvbWFwLmh0bWwnLFxyXG5cdCAgICAgICAgJ2dtYXAnOid+L2RpYWxvZ3MvZ21hcC9nbWFwLmh0bWwnLFxyXG5cdCAgICAgICAgJ2luc2VydHZpZGVvJzonfi9kaWFsb2dzL3ZpZGVvL3ZpZGVvLmh0bWwnLFxyXG5cdCAgICAgICAgJ2hlbHAnOid+L2RpYWxvZ3MvaGVscC9oZWxwLmh0bWwnLFxyXG5cdCAgICAgICAgJ3ByZXZpZXcnOid+L2RpYWxvZ3MvcHJldmlldy9wcmV2aWV3Lmh0bWwnLFxyXG5cdCAgICAgICAgJ2Vtb3Rpb24nOid+L2RpYWxvZ3MvZW1vdGlvbi9lbW90aW9uLmh0bWwnLFxyXG5cdCAgICAgICAgJ3dvcmRpbWFnZSc6J34vZGlhbG9ncy93b3JkaW1hZ2Uvd29yZGltYWdlLmh0bWwnLFxyXG5cdCAgICAgICAgJ2F0dGFjaG1lbnQnOid+L2RpYWxvZ3MvYXR0YWNobWVudC9hdHRhY2htZW50Lmh0bWwnLFxyXG5cdCAgICAgICAgJ2luc2VydGZyYW1lJzonfi9kaWFsb2dzL2luc2VydGZyYW1lL2luc2VydGZyYW1lLmh0bWwnLFxyXG5cdCAgICAgICAgJ2VkaXR0aXAnOid+L2RpYWxvZ3MvdGFibGUvZWRpdHRpcC5odG1sJyxcclxuXHQgICAgICAgICdlZGl0dGFibGUnOid+L2RpYWxvZ3MvdGFibGUvZWRpdHRhYmxlLmh0bWwnLFxyXG5cdCAgICAgICAgJ2VkaXR0ZCc6J34vZGlhbG9ncy90YWJsZS9lZGl0dGQuaHRtbCcsXHJcblx0ICAgICAgICAnd2ViYXBwJzonfi9kaWFsb2dzL3dlYmFwcC93ZWJhcHAuaHRtbCcsXHJcblx0ICAgICAgICAnc25hcHNjcmVlbic6J34vZGlhbG9ncy9zbmFwc2NyZWVuL3NuYXBzY3JlZW4uaHRtbCcsXHJcblx0ICAgICAgICAnc2NyYXdsJzonfi9kaWFsb2dzL3NjcmF3bC9zY3Jhd2wuaHRtbCcsXHJcblx0ICAgICAgICAnbXVzaWMnOid+L2RpYWxvZ3MvbXVzaWMvbXVzaWMuaHRtbCcsXHJcblx0ICAgICAgICAndGVtcGxhdGUnOid+L2RpYWxvZ3MvdGVtcGxhdGUvdGVtcGxhdGUuaHRtbCcsXHJcblx0ICAgICAgICAnYmFja2dyb3VuZCc6J34vZGlhbG9ncy9iYWNrZ3JvdW5kL2JhY2tncm91bmQuaHRtbCcsXHJcblx0ICAgICAgICAnY2hhcnRzJzogJ34vZGlhbG9ncy9jaGFydHMvY2hhcnRzLmh0bWwnXHJcblx0ICAgIH07XHJcblx0ICAgIC8v5Li65bel5YW35qCP5re75Yqg5oyJ6ZKu77yM5Lul5LiL6YO95piv57uf5LiA55qE5oyJ6ZKu6Kem5Y+R5ZG95Luk77yM5omA5Lul5YaZ5Zyo5LiA6LW3XHJcblx0ICAgIHZhciBidG5DbWRzID0gWyd1bmRvJywgJ3JlZG8nLCAnZm9ybWF0bWF0Y2gnLFxyXG5cdCAgICAgICAgJ2JvbGQnLCAnaXRhbGljJywgJ3VuZGVybGluZScsICdmb250Ym9yZGVyJywgJ3RvdXBwZXJjYXNlJywgJ3RvbG93ZXJjYXNlJyxcclxuXHQgICAgICAgICdzdHJpa2V0aHJvdWdoJywgJ3N1YnNjcmlwdCcsICdzdXBlcnNjcmlwdCcsICdzb3VyY2UnLCAnaW5kZW50JywgJ291dGRlbnQnLFxyXG5cdCAgICAgICAgJ2Jsb2NrcXVvdGUnLCAncGFzdGVwbGFpbicsICdwYWdlYnJlYWsnLFxyXG5cdCAgICAgICAgJ3NlbGVjdGFsbCcsICdwcmludCcsJ2hvcml6b250YWwnLCAncmVtb3ZlZm9ybWF0JywgJ3RpbWUnLCAnZGF0ZScsICd1bmxpbmsnLFxyXG5cdCAgICAgICAgJ2luc2VydHBhcmFncmFwaGJlZm9yZXRhYmxlJywgJ2luc2VydHJvdycsICdpbnNlcnRjb2wnLCAnbWVyZ2VyaWdodCcsICdtZXJnZWRvd24nLCAnZGVsZXRlcm93JyxcclxuXHQgICAgICAgICdkZWxldGVjb2wnLCAnc3BsaXR0b3Jvd3MnLCAnc3BsaXR0b2NvbHMnLCAnc3BsaXR0b2NlbGxzJywgJ21lcmdlY2VsbHMnLCAnZGVsZXRldGFibGUnLCAnZHJhZnRzJ107XHJcblxyXG5cdCAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gYnRuQ21kc1tpKytdOykge1xyXG5cdCAgICAgICAgY2kgPSBjaS50b0xvd2VyQ2FzZSgpO1xyXG5cdCAgICAgICAgZWRpdG9ydWlbY2ldID0gZnVuY3Rpb24gKGNtZCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB1aSA9IG5ldyBlZGl0b3J1aS5CdXR0b24oe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLWZvci0nICsgY21kLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGl0bGU6ZWRpdG9yLm9wdGlvbnMubGFiZWxNYXBbY21kXSB8fCBlZGl0b3IuZ2V0TGFuZyhcImxhYmVsTWFwLlwiICsgY21kKSB8fCAnJyxcclxuXHQgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5leGVjQ29tbWFuZChjbWQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoZW1lOmVkaXRvci5vcHRpb25zLnRoZW1lLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgc2hvd1RleHQ6ZmFsc2VcclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIGVkaXRvcnVpLmJ1dHRvbnNbY21kXSA9IHVpO1xyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3IuYWRkTGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICh0eXBlLCBjYXVzZUJ5VWksIHVpUmVhZHkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGVkaXRvci5xdWVyeUNvbW1hbmRTdGF0ZShjbWQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlID09IC0xKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0RGlzYWJsZWQodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0Q2hlY2tlZChmYWxzZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdWlSZWFkeSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXREaXNhYmxlZChmYWxzZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldENoZWNrZWQoc3RhdGUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB1aTtcclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgfShjaSk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIC8v5riF6Zmk5paH5qGjXHJcblx0ICAgIGVkaXRvcnVpLmNsZWFyZG9jID0gZnVuY3Rpb24gKGVkaXRvcikge1xyXG5cdCAgICAgICAgdmFyIHVpID0gbmV3IGVkaXRvcnVpLkJ1dHRvbih7XHJcblx0ICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLWZvci1jbGVhcmRvYycsXHJcblx0ICAgICAgICAgICAgdGl0bGU6ZWRpdG9yLm9wdGlvbnMubGFiZWxNYXAuY2xlYXJkb2MgfHwgZWRpdG9yLmdldExhbmcoXCJsYWJlbE1hcC5jbGVhcmRvY1wiKSB8fCAnJyxcclxuXHQgICAgICAgICAgICB0aGVtZTplZGl0b3Iub3B0aW9ucy50aGVtZSxcclxuXHQgICAgICAgICAgICBvbmNsaWNrOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNvbmZpcm0oZWRpdG9yLmdldExhbmcoXCJjb25maXJtQ2xlYXJcIikpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlZGl0b3IuZXhlY0NvbW1hbmQoJ2NsZWFyZG9jJyk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIGVkaXRvcnVpLmJ1dHRvbnNbXCJjbGVhcmRvY1wiXSA9IHVpO1xyXG5cdCAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdWkuc2V0RGlzYWJsZWQoZWRpdG9yLnF1ZXJ5Q29tbWFuZFN0YXRlKCdjbGVhcmRvYycpID09IC0xKTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgcmV0dXJuIHVpO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgLy/mjpLniYjvvIzlm77niYfmjpLniYjvvIzmloflrZfmlrnlkJFcclxuXHQgICAgdmFyIHR5cGVzZXQgPSB7XHJcblx0ICAgICAgICAnanVzdGlmeSc6WydsZWZ0JywgJ3JpZ2h0JywgJ2NlbnRlcicsICdqdXN0aWZ5J10sXHJcblx0ICAgICAgICAnaW1hZ2VmbG9hdCc6Wydub25lJywgJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0J10sXHJcblx0ICAgICAgICAnZGlyZWN0aW9uYWxpdHknOlsnbHRyJywgJ3J0bCddXHJcblx0ICAgIH07XHJcblxyXG5cdCAgICBmb3IgKHZhciBwIGluIHR5cGVzZXQpIHtcclxuXHJcblx0ICAgICAgICAoZnVuY3Rpb24gKGNtZCwgdmFsKSB7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHZhbFtpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGNtZDIpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvcnVpW2NtZC5yZXBsYWNlKCdmbG9hdCcsICcnKSArIGNtZDJdID0gZnVuY3Rpb24gKGVkaXRvcikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1aSA9IG5ldyBlZGl0b3J1aS5CdXR0b24oe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6J2VkdWktZm9yLScgKyBjbWQucmVwbGFjZSgnZmxvYXQnLCAnJykgKyBjbWQyLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTplZGl0b3Iub3B0aW9ucy5sYWJlbE1hcFtjbWQucmVwbGFjZSgnZmxvYXQnLCAnJykgKyBjbWQyXSB8fCBlZGl0b3IuZ2V0TGFuZyhcImxhYmVsTWFwLlwiICsgY21kLnJlcGxhY2UoJ2Zsb2F0JywgJycpICsgY21kMikgfHwgJycsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lOmVkaXRvci5vcHRpb25zLnRoZW1lLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5leGVjQ29tbWFuZChjbWQsIGNtZDIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9ydWkuYnV0dG9uc1tjbWRdID0gdWk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAodHlwZSwgY2F1c2VCeVVpLCB1aVJlYWR5KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldERpc2FibGVkKGVkaXRvci5xdWVyeUNvbW1hbmRTdGF0ZShjbWQpID09IC0xKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0Q2hlY2tlZChlZGl0b3IucXVlcnlDb21tYW5kVmFsdWUoY21kKSA9PSBjbWQyICYmICF1aVJlYWR5KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdWk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgICAgICAgICB9KShjaSlcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9KShwLCB0eXBlc2V0W3BdKVxyXG5cdCAgICB9XHJcblxyXG5cdCAgICAvL+Wtl+S9k+minOiJsuWSjOiDjOaZr+minOiJslxyXG5cdCAgICBmb3IgKHZhciBpID0gMCwgY2k7IGNpID0gWydiYWNrY29sb3InLCAnZm9yZWNvbG9yJ11baSsrXTspIHtcclxuXHQgICAgICAgIGVkaXRvcnVpW2NpXSA9IGZ1bmN0aW9uIChjbWQpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGVkaXRvcikge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgdWkgPSBuZXcgZWRpdG9ydWkuQ29sb3JCdXR0b24oe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLWZvci0nICsgY21kLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgY29sb3I6J2RlZmF1bHQnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGl0bGU6ZWRpdG9yLm9wdGlvbnMubGFiZWxNYXBbY21kXSB8fCBlZGl0b3IuZ2V0TGFuZyhcImxhYmVsTWFwLlwiICsgY21kKSB8fCAnJyxcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvcjplZGl0b3IsXHJcblx0ICAgICAgICAgICAgICAgICAgICBvbnBpY2tjb2xvcjpmdW5jdGlvbiAodCwgY29sb3IpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IuZXhlY0NvbW1hbmQoY21kLCBjb2xvcik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgb25waWNrbm9jb2xvcjpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmV4ZWNDb21tYW5kKGNtZCwgJ2RlZmF1bHQnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldENvbG9yKCd0cmFuc3BhcmVudCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPSAnZGVmYXVsdCc7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgb25idXR0b25jbGljazpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmV4ZWNDb21tYW5kKGNtZCwgdGhpcy5jb2xvcik7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3J1aS5idXR0b25zW2NtZF0gPSB1aTtcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB1aS5zZXREaXNhYmxlZChlZGl0b3IucXVlcnlDb21tYW5kU3RhdGUoY21kKSA9PSAtMSk7XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gdWk7XHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgIH0oY2kpO1xyXG5cdCAgICB9XHJcblxyXG5cclxuXHQgICAgdmFyIGRpYWxvZ0J0bnMgPSB7XHJcblx0ICAgICAgICBub09rOlsnc2VhcmNocmVwbGFjZScsICdoZWxwJywgJ3NwZWNoYXJzJywgJ3dlYmFwcCcsJ3ByZXZpZXcnXSxcclxuXHQgICAgICAgIG9rOlsnYXR0YWNobWVudCcsICdhbmNob3InLCAnbGluaycsICdpbnNlcnRpbWFnZScsICdtYXAnLCAnZ21hcCcsICdpbnNlcnRmcmFtZScsICd3b3JkaW1hZ2UnLFxyXG5cdCAgICAgICAgICAgICdpbnNlcnR2aWRlbycsICdpbnNlcnRmcmFtZScsICdlZGl0dGlwJywgJ2VkaXR0YWJsZScsICdlZGl0dGQnLCAnc2NyYXdsJywgJ3RlbXBsYXRlJywgJ211c2ljJywgJ2JhY2tncm91bmQnLCAnY2hhcnRzJ11cclxuXHQgICAgfTtcclxuXHJcblx0ICAgIGZvciAodmFyIHAgaW4gZGlhbG9nQnRucykge1xyXG5cdCAgICAgICAgKGZ1bmN0aW9uICh0eXBlLCB2YWxzKSB7XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHZhbHNbaSsrXTspIHtcclxuXHQgICAgICAgICAgICAgICAgLy90b2RvIG9wZXJh5LiL5a2Y5Zyo6Zeu6aKYXHJcblx0ICAgICAgICAgICAgICAgIGlmIChicm93c2VyLm9wZXJhICYmIGNpID09PSBcInNlYXJjaHJlcGxhY2VcIikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChjbWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvcnVpW2NtZF0gPSBmdW5jdGlvbiAoZWRpdG9yLCBpZnJhbWVVcmwsIHRpdGxlKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWZyYW1lVXJsID0gaWZyYW1lVXJsIHx8IChlZGl0b3Iub3B0aW9ucy5pZnJhbWVVcmxNYXAgfHwge30pW2NtZF0gfHwgaWZyYW1lVXJsTWFwW2NtZF07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGUgPSBlZGl0b3Iub3B0aW9ucy5sYWJlbE1hcFtjbWRdIHx8IGVkaXRvci5nZXRMYW5nKFwibGFiZWxNYXAuXCIgKyBjbWQpIHx8ICcnO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlhbG9nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8v5rKh5pyJaWZyYW1lVXJs5LiN5Yib5bu6ZGlhbG9nXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlmcmFtZVVybCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2cgPSBuZXcgZWRpdG9ydWkuRGlhbG9nKHV0aWxzLmV4dGVuZCh7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZnJhbWVVcmw6ZWRpdG9yLnVpLm1hcFVybChpZnJhbWVVcmwpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yOmVkaXRvcixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTonZWR1aS1mb3ItJyArIGNtZCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOnRpdGxlLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZFNjcm9sbDogY21kID09PSAnaW5zZXJ0aW1hZ2UnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlbjogL2NoYXJ0c3xwcmV2aWV3Ly50ZXN0KGNtZCksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbG9zZURpYWxvZzplZGl0b3IuZ2V0TGFuZyhcImNsb3NlRGlhbG9nXCIpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHR5cGUgPT0gJ29rJyA/IHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6W1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLW9rYnV0dG9uJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ZWRpdG9yLmdldExhbmcoXCJva1wiKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yOmVkaXRvcixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2cuY2xvc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLWNhbmNlbGJ1dHRvbicsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOmVkaXRvci5nZXRMYW5nKFwiY2FuY2VsXCIpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3I6ZWRpdG9yLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZy5jbG9zZShmYWxzZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiB7fSkpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnVpLl9kaWFsb2dzW2NtZCArIFwiRGlhbG9nXCJdID0gZGlhbG9nO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVpID0gbmV3IGVkaXRvcnVpLkJ1dHRvbih7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTonZWR1aS1mb3ItJyArIGNtZCxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6dGl0bGUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpYWxvZykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoY21kKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJ3b3JkaW1hZ2VcIjpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbWFnZXMgPSBlZGl0b3IuZXhlY0NvbW1hbmQoXCJ3b3JkaW1hZ2VcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VzICYmIGltYWdlcy5sZW5ndGgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2cucmVuZGVyKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nLm9wZW4oKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwic2NyYXdsXCI6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWRpdG9yLnF1ZXJ5Q29tbWFuZFN0YXRlKFwic2NyYXdsXCIpICE9IC0xKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nLnJlbmRlcigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZy5vcGVuKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2cucmVuZGVyKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2cub3BlbigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWU6ZWRpdG9yLm9wdGlvbnMudGhlbWUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkOihjbWQgPT0gJ3NjcmF3bCcgJiYgZWRpdG9yLnF1ZXJ5Q29tbWFuZFN0YXRlKFwic2NyYXdsXCIpID09IC0xKSB8fCAoIGNtZCA9PSAnY2hhcnRzJyApXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9ydWkuYnV0dG9uc1tjbWRdID0gdWk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8v5Y+q5a2Y5Zyo5LqO5Y+z6ZSu6I+c5Y2V6ICM5peg5bel5YW35qCP5oyJ6ZKu55qEdWnkuI3pnIDopoHmo4DmtYvnirbmgIFcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuTmVlZENoZWNrU3RhdGUgPSB7J2VkaXR0YWJsZSc6MX07XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbWQgaW4gdW5OZWVkQ2hlY2tTdGF0ZSlyZXR1cm47XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBlZGl0b3IucXVlcnlDb21tYW5kU3RhdGUoY21kKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVpLmdldERvbSgpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXREaXNhYmxlZChzdGF0ZSA9PSAtMSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXRDaGVja2VkKHN0YXRlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgfSkoY2kudG9Mb3dlckNhc2UoKSlcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9KShwLCBkaWFsb2dCdG5zW3BdKTtcclxuXHQgICAgfVxyXG5cclxuXHQgICAgZWRpdG9ydWkuc25hcHNjcmVlbiA9IGZ1bmN0aW9uIChlZGl0b3IsIGlmcmFtZVVybCwgdGl0bGUpIHtcclxuXHQgICAgICAgIHRpdGxlID0gZWRpdG9yLm9wdGlvbnMubGFiZWxNYXBbJ3NuYXBzY3JlZW4nXSB8fCBlZGl0b3IuZ2V0TGFuZyhcImxhYmVsTWFwLnNuYXBzY3JlZW5cIikgfHwgJyc7XHJcblx0ICAgICAgICB2YXIgdWkgPSBuZXcgZWRpdG9ydWkuQnV0dG9uKHtcclxuXHQgICAgICAgICAgICBjbGFzc05hbWU6J2VkdWktZm9yLXNuYXBzY3JlZW4nLFxyXG5cdCAgICAgICAgICAgIHRpdGxlOnRpdGxlLFxyXG5cdCAgICAgICAgICAgIG9uY2xpY2s6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3IuZXhlY0NvbW1hbmQoXCJzbmFwc2NyZWVuXCIpO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgdGhlbWU6ZWRpdG9yLm9wdGlvbnMudGhlbWVcclxuXHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIGVkaXRvcnVpLmJ1dHRvbnNbJ3NuYXBzY3JlZW4nXSA9IHVpO1xyXG5cdCAgICAgICAgaWZyYW1lVXJsID0gaWZyYW1lVXJsIHx8IChlZGl0b3Iub3B0aW9ucy5pZnJhbWVVcmxNYXAgfHwge30pW1wic25hcHNjcmVlblwiXSB8fCBpZnJhbWVVcmxNYXBbXCJzbmFwc2NyZWVuXCJdO1xyXG5cdCAgICAgICAgaWYgKGlmcmFtZVVybCkge1xyXG5cdCAgICAgICAgICAgIHZhciBkaWFsb2cgPSBuZXcgZWRpdG9ydWkuRGlhbG9nKHtcclxuXHQgICAgICAgICAgICAgICAgaWZyYW1lVXJsOmVkaXRvci51aS5tYXBVcmwoaWZyYW1lVXJsKSxcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9yOmVkaXRvcixcclxuXHQgICAgICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLWZvci1zbmFwc2NyZWVuJyxcclxuXHQgICAgICAgICAgICAgICAgdGl0bGU6dGl0bGUsXHJcblx0ICAgICAgICAgICAgICAgIGJ1dHRvbnM6W1xyXG5cdCAgICAgICAgICAgICAgICAgICAge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTonZWR1aS1va2J1dHRvbicsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ZWRpdG9yLmdldExhbmcoXCJva1wiKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3I6ZWRpdG9yLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2cuY2xvc2UodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgICAgIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6J2VkdWktY2FuY2VsYnV0dG9uJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDplZGl0b3IuZ2V0TGFuZyhcImNhbmNlbFwiKSxcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3I6ZWRpdG9yLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2cuY2xvc2UoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgXVxyXG5cclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICBkaWFsb2cucmVuZGVyKCk7XHJcblx0ICAgICAgICAgICAgZWRpdG9yLnVpLl9kaWFsb2dzW1wic25hcHNjcmVlbkRpYWxvZ1wiXSA9IGRpYWxvZztcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVkaXRvci5hZGRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHVpLnNldERpc2FibGVkKGVkaXRvci5xdWVyeUNvbW1hbmRTdGF0ZSgnc25hcHNjcmVlbicpID09IC0xKTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgcmV0dXJuIHVpO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgZWRpdG9ydWkuaW5zZXJ0Y29kZSA9IGZ1bmN0aW9uIChlZGl0b3IsIGxpc3QsIHRpdGxlKSB7XHJcblx0ICAgICAgICBsaXN0ID0gZWRpdG9yLm9wdGlvbnNbJ2luc2VydGNvZGUnXSB8fCBbXTtcclxuXHQgICAgICAgIHRpdGxlID0gZWRpdG9yLm9wdGlvbnMubGFiZWxNYXBbJ2luc2VydGNvZGUnXSB8fCBlZGl0b3IuZ2V0TGFuZyhcImxhYmVsTWFwLmluc2VydGNvZGVcIikgfHwgJyc7XHJcblx0ICAgICAgIC8vIGlmICghbGlzdC5sZW5ndGgpIHJldHVybjtcclxuXHQgICAgICAgIHZhciBpdGVtcyA9IFtdO1xyXG5cdCAgICAgICAgdXRpbHMuZWFjaChsaXN0LGZ1bmN0aW9uKGtleSx2YWwpe1xyXG5cdCAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG5cdCAgICAgICAgICAgICAgICBsYWJlbDprZXksXHJcblx0ICAgICAgICAgICAgICAgIHZhbHVlOnZhbCxcclxuXHQgICAgICAgICAgICAgICAgdGhlbWU6ZWRpdG9yLm9wdGlvbnMudGhlbWUsXHJcblx0ICAgICAgICAgICAgICAgIHJlbmRlckxhYmVsSHRtbDpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJlZHVpLWxhYmVsICUlLWxhYmVsXCIgPicgKyAodGhpcy5sYWJlbCB8fCAnJykgKyAnPC9kaXY+JztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgdmFyIHVpID0gbmV3IGVkaXRvcnVpLkNvbWJveCh7XHJcblx0ICAgICAgICAgICAgZWRpdG9yOmVkaXRvcixcclxuXHQgICAgICAgICAgICBpdGVtczppdGVtcyxcclxuXHQgICAgICAgICAgICBvbnNlbGVjdDpmdW5jdGlvbiAodCwgaW5kZXgpIHtcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9yLmV4ZWNDb21tYW5kKCdpbnNlcnRjb2RlJywgdGhpcy5pdGVtc1tpbmRleF0udmFsdWUpO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgb25idXR0b25jbGljazpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2hvd1BvcHVwKCk7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICB0aXRsZTp0aXRsZSxcclxuXHQgICAgICAgICAgICBpbml0VmFsdWU6dGl0bGUsXHJcblx0ICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLWZvci1pbnNlcnRjb2RlJyxcclxuXHQgICAgICAgICAgICBpbmRleEJ5VmFsdWU6ZnVuY3Rpb24gKHZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHRoaXMuaXRlbXNbaV07IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaS52YWx1ZS5pbmRleE9mKHZhbHVlKSAhPSAtMSlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIGVkaXRvcnVpLmJ1dHRvbnNbJ2luc2VydGNvZGUnXSA9IHVpO1xyXG5cdCAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAodHlwZSwgY2F1c2VCeVVpLCB1aVJlYWR5KSB7XHJcblx0ICAgICAgICAgICAgaWYgKCF1aVJlYWR5KSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGVkaXRvci5xdWVyeUNvbW1hbmRTdGF0ZSgnaW5zZXJ0Y29kZScpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHVpLnNldERpc2FibGVkKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdWkuc2V0RGlzYWJsZWQoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCdpbnNlcnRjb2RlJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZighdmFsdWUpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldFZhbHVlKHRpdGxlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL3RyYWNlOjE4NzEgaWXkuIvku47mupDnoIHmqKHlvI/liIfmjaLlm57mnaXml7bvvIzlrZfkvZPkvJrluKbljZXlvJXlj7fvvIzogIzkuJTkvJrmnInpgJflj7dcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhbHVlICYmICh2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1snXCJdL2csICcnKS5zcGxpdCgnLCcpWzBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHVpLnNldFZhbHVlKHZhbHVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICByZXR1cm4gdWk7XHJcblx0ICAgIH07XHJcblx0ICAgIGVkaXRvcnVpLmZvbnRmYW1pbHkgPSBmdW5jdGlvbiAoZWRpdG9yLCBsaXN0LCB0aXRsZSkge1xyXG5cclxuXHQgICAgICAgIGxpc3QgPSBlZGl0b3Iub3B0aW9uc1snZm9udGZhbWlseSddIHx8IFtdO1xyXG5cdCAgICAgICAgdGl0bGUgPSBlZGl0b3Iub3B0aW9ucy5sYWJlbE1hcFsnZm9udGZhbWlseSddIHx8IGVkaXRvci5nZXRMYW5nKFwibGFiZWxNYXAuZm9udGZhbWlseVwiKSB8fCAnJztcclxuXHQgICAgICAgIGlmICghbGlzdC5sZW5ndGgpIHJldHVybjtcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaSwgaXRlbXMgPSBbXTsgY2kgPSBsaXN0W2ldOyBpKyspIHtcclxuXHQgICAgICAgICAgICB2YXIgbGFuZ0xhYmVsID0gZWRpdG9yLmdldExhbmcoJ2ZvbnRmYW1pbHknKVtjaS5uYW1lXSB8fCBcIlwiO1xyXG5cdCAgICAgICAgICAgIChmdW5jdGlvbiAoa2V5LCB2YWwpIHtcclxuXHQgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XHJcblx0ICAgICAgICAgICAgICAgICAgICBsYWJlbDprZXksXHJcblx0ICAgICAgICAgICAgICAgICAgICB2YWx1ZTp2YWwsXHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGVtZTplZGl0b3Iub3B0aW9ucy50aGVtZSxcclxuXHQgICAgICAgICAgICAgICAgICAgIHJlbmRlckxhYmVsSHRtbDpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiZWR1aS1sYWJlbCAlJS1sYWJlbFwiIHN0eWxlPVwiZm9udC1mYW1pbHk6JyArXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWxzLnVuaHRtbCh0aGlzLnZhbHVlKSArICdcIj4nICsgKHRoaXMubGFiZWwgfHwgJycpICsgJzwvZGl2Pic7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIH0pKGNpLmxhYmVsIHx8IGxhbmdMYWJlbCwgY2kudmFsKVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIHVpID0gbmV3IGVkaXRvcnVpLkNvbWJveCh7XHJcblx0ICAgICAgICAgICAgZWRpdG9yOmVkaXRvcixcclxuXHQgICAgICAgICAgICBpdGVtczppdGVtcyxcclxuXHQgICAgICAgICAgICBvbnNlbGVjdDpmdW5jdGlvbiAodCwgaW5kZXgpIHtcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9yLmV4ZWNDb21tYW5kKCdGb250RmFtaWx5JywgdGhpcy5pdGVtc1tpbmRleF0udmFsdWUpO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgb25idXR0b25jbGljazpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2hvd1BvcHVwKCk7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICB0aXRsZTp0aXRsZSxcclxuXHQgICAgICAgICAgICBpbml0VmFsdWU6dGl0bGUsXHJcblx0ICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLWZvci1mb250ZmFtaWx5JyxcclxuXHQgICAgICAgICAgICBpbmRleEJ5VmFsdWU6ZnVuY3Rpb24gKHZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IHRoaXMuaXRlbXNbaV07IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaS52YWx1ZS5pbmRleE9mKHZhbHVlKSAhPSAtMSlcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiAtMTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIGVkaXRvcnVpLmJ1dHRvbnNbJ2ZvbnRmYW1pbHknXSA9IHVpO1xyXG5cdCAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAodHlwZSwgY2F1c2VCeVVpLCB1aVJlYWR5KSB7XHJcblx0ICAgICAgICAgICAgaWYgKCF1aVJlYWR5KSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGVkaXRvci5xdWVyeUNvbW1hbmRTdGF0ZSgnRm9udEZhbWlseScpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHVpLnNldERpc2FibGVkKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdWkuc2V0RGlzYWJsZWQoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCdGb250RmFtaWx5Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL3RyYWNlOjE4NzEgaWXkuIvku47mupDnoIHmqKHlvI/liIfmjaLlm57mnaXml7bvvIzlrZfkvZPkvJrluKbljZXlvJXlj7fvvIzogIzkuJTkvJrmnInpgJflj7dcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhbHVlICYmICh2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1snXCJdL2csICcnKS5zcGxpdCgnLCcpWzBdKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHVpLnNldFZhbHVlKHZhbHVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICByZXR1cm4gdWk7XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICBlZGl0b3J1aS5mb250c2l6ZSA9IGZ1bmN0aW9uIChlZGl0b3IsIGxpc3QsIHRpdGxlKSB7XHJcblx0ICAgICAgICB0aXRsZSA9IGVkaXRvci5vcHRpb25zLmxhYmVsTWFwWydmb250c2l6ZSddIHx8IGVkaXRvci5nZXRMYW5nKFwibGFiZWxNYXAuZm9udHNpemVcIikgfHwgJyc7XHJcblx0ICAgICAgICBsaXN0ID0gbGlzdCB8fCBlZGl0b3Iub3B0aW9uc1snZm9udHNpemUnXSB8fCBbXTtcclxuXHQgICAgICAgIGlmICghbGlzdC5sZW5ndGgpIHJldHVybjtcclxuXHQgICAgICAgIHZhciBpdGVtcyA9IFtdO1xyXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgdmFyIHNpemUgPSBsaXN0W2ldICsgJ3B4JztcclxuXHQgICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuXHQgICAgICAgICAgICAgICAgbGFiZWw6c2l6ZSxcclxuXHQgICAgICAgICAgICAgICAgdmFsdWU6c2l6ZSxcclxuXHQgICAgICAgICAgICAgICAgdGhlbWU6ZWRpdG9yLm9wdGlvbnMudGhlbWUsXHJcblx0ICAgICAgICAgICAgICAgIHJlbmRlckxhYmVsSHRtbDpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gJzxkaXYgY2xhc3M9XCJlZHVpLWxhYmVsICUlLWxhYmVsXCIgc3R5bGU9XCJsaW5lLWhlaWdodDoxO2ZvbnQtc2l6ZTonICtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlICsgJ1wiPicgKyAodGhpcy5sYWJlbCB8fCAnJykgKyAnPC9kaXY+JztcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIHVpID0gbmV3IGVkaXRvcnVpLkNvbWJveCh7XHJcblx0ICAgICAgICAgICAgZWRpdG9yOmVkaXRvcixcclxuXHQgICAgICAgICAgICBpdGVtczppdGVtcyxcclxuXHQgICAgICAgICAgICB0aXRsZTp0aXRsZSxcclxuXHQgICAgICAgICAgICBpbml0VmFsdWU6dGl0bGUsXHJcblx0ICAgICAgICAgICAgb25zZWxlY3Q6ZnVuY3Rpb24gKHQsIGluZGV4KSB7XHJcblx0ICAgICAgICAgICAgICAgIGVkaXRvci5leGVjQ29tbWFuZCgnRm9udFNpemUnLCB0aGlzLml0ZW1zW2luZGV4XS52YWx1ZSk7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBvbmJ1dHRvbmNsaWNrOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zaG93UG9wdXAoKTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIGNsYXNzTmFtZTonZWR1aS1mb3ItZm9udHNpemUnXHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIGVkaXRvcnVpLmJ1dHRvbnNbJ2ZvbnRzaXplJ10gPSB1aTtcclxuXHQgICAgICAgIGVkaXRvci5hZGRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKHR5cGUsIGNhdXNlQnlVaSwgdWlSZWFkeSkge1xyXG5cdCAgICAgICAgICAgIGlmICghdWlSZWFkeSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBlZGl0b3IucXVlcnlDb21tYW5kU3RhdGUoJ0ZvbnRTaXplJyk7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PSAtMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdWkuc2V0RGlzYWJsZWQodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB1aS5zZXREaXNhYmxlZChmYWxzZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB1aS5zZXRWYWx1ZShlZGl0b3IucXVlcnlDb21tYW5kVmFsdWUoJ0ZvbnRTaXplJykpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgcmV0dXJuIHVpO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgZWRpdG9ydWkucGFyYWdyYXBoID0gZnVuY3Rpb24gKGVkaXRvciwgbGlzdCwgdGl0bGUpIHtcclxuXHQgICAgICAgIHRpdGxlID0gZWRpdG9yLm9wdGlvbnMubGFiZWxNYXBbJ3BhcmFncmFwaCddIHx8IGVkaXRvci5nZXRMYW5nKFwibGFiZWxNYXAucGFyYWdyYXBoXCIpIHx8ICcnO1xyXG5cdCAgICAgICAgbGlzdCA9IGVkaXRvci5vcHRpb25zWydwYXJhZ3JhcGgnXSB8fCBbXTtcclxuXHQgICAgICAgIGlmICh1dGlscy5pc0VtcHR5T2JqZWN0KGxpc3QpKSByZXR1cm47XHJcblx0ICAgICAgICB2YXIgaXRlbXMgPSBbXTtcclxuXHQgICAgICAgIGZvciAodmFyIGkgaW4gbGlzdCkge1xyXG5cdCAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xyXG5cdCAgICAgICAgICAgICAgICB2YWx1ZTppLFxyXG5cdCAgICAgICAgICAgICAgICBsYWJlbDpsaXN0W2ldIHx8IGVkaXRvci5nZXRMYW5nKFwicGFyYWdyYXBoXCIpW2ldLFxyXG5cdCAgICAgICAgICAgICAgICB0aGVtZTplZGl0b3Iub3B0aW9ucy50aGVtZSxcclxuXHQgICAgICAgICAgICAgICAgcmVuZGVyTGFiZWxIdG1sOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiAnPGRpdiBjbGFzcz1cImVkdWktbGFiZWwgJSUtbGFiZWxcIj48c3BhbiBjbGFzcz1cImVkdWktZm9yLScgKyB0aGlzLnZhbHVlICsgJ1wiPicgKyAodGhpcy5sYWJlbCB8fCAnJykgKyAnPC9zcGFuPjwvZGl2Pic7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIHVpID0gbmV3IGVkaXRvcnVpLkNvbWJveCh7XHJcblx0ICAgICAgICAgICAgZWRpdG9yOmVkaXRvcixcclxuXHQgICAgICAgICAgICBpdGVtczppdGVtcyxcclxuXHQgICAgICAgICAgICB0aXRsZTp0aXRsZSxcclxuXHQgICAgICAgICAgICBpbml0VmFsdWU6dGl0bGUsXHJcblx0ICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLWZvci1wYXJhZ3JhcGgnLFxyXG5cdCAgICAgICAgICAgIG9uc2VsZWN0OmZ1bmN0aW9uICh0LCBpbmRleCkge1xyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3IuZXhlY0NvbW1hbmQoJ1BhcmFncmFwaCcsIHRoaXMuaXRlbXNbaW5kZXhdLnZhbHVlKTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIG9uYnV0dG9uY2xpY2s6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnNob3dQb3B1cCgpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgZWRpdG9ydWkuYnV0dG9uc1sncGFyYWdyYXBoJ10gPSB1aTtcclxuXHQgICAgICAgIGVkaXRvci5hZGRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKHR5cGUsIGNhdXNlQnlVaSwgdWlSZWFkeSkge1xyXG5cdCAgICAgICAgICAgIGlmICghdWlSZWFkeSkge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSBlZGl0b3IucXVlcnlDb21tYW5kU3RhdGUoJ1BhcmFncmFwaCcpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHVpLnNldERpc2FibGVkKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdWkuc2V0RGlzYWJsZWQoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCdQYXJhZ3JhcGgnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHVpLmluZGV4QnlWYWx1ZSh2YWx1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXRWYWx1ZSh2YWx1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldFZhbHVlKHVpLmluaXRWYWx1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICByZXR1cm4gdWk7XHJcblx0ICAgIH07XHJcblxyXG5cclxuXHQgICAgLy/oh6rlrprkuYnmoIfpophcclxuXHQgICAgZWRpdG9ydWkuY3VzdG9tc3R5bGUgPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcblx0ICAgICAgICB2YXIgbGlzdCA9IGVkaXRvci5vcHRpb25zWydjdXN0b21zdHlsZSddIHx8IFtdLFxyXG5cdCAgICAgICAgICAgIHRpdGxlID0gZWRpdG9yLm9wdGlvbnMubGFiZWxNYXBbJ2N1c3RvbXN0eWxlJ10gfHwgZWRpdG9yLmdldExhbmcoXCJsYWJlbE1hcC5jdXN0b21zdHlsZVwiKSB8fCAnJztcclxuXHQgICAgICAgIGlmICghbGlzdC5sZW5ndGgpcmV0dXJuO1xyXG5cdCAgICAgICAgdmFyIGxhbmdDcyA9IGVkaXRvci5nZXRMYW5nKCdjdXN0b21zdHlsZScpO1xyXG5cdCAgICAgICAgZm9yICh2YXIgaSA9IDAsIGl0ZW1zID0gW10sIHQ7IHQgPSBsaXN0W2krK107KSB7XHJcblx0ICAgICAgICAgICAgKGZ1bmN0aW9uICh0KSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBjayA9IHt9O1xyXG5cdCAgICAgICAgICAgICAgICBjay5sYWJlbCA9IHQubGFiZWwgPyB0LmxhYmVsIDogbGFuZ0NzW3QubmFtZV07XHJcblx0ICAgICAgICAgICAgICAgIGNrLnN0eWxlID0gdC5zdHlsZTtcclxuXHQgICAgICAgICAgICAgICAgY2suY2xhc3NOYW1lID0gdC5jbGFzc05hbWU7XHJcblx0ICAgICAgICAgICAgICAgIGNrLnRhZyA9IHQudGFnO1xyXG5cdCAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGxhYmVsOmNrLmxhYmVsLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFsdWU6Y2ssXHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGVtZTplZGl0b3Iub3B0aW9ucy50aGVtZSxcclxuXHQgICAgICAgICAgICAgICAgICAgIHJlbmRlckxhYmVsSHRtbDpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiZWR1aS1sYWJlbCAlJS1sYWJlbFwiPicgKyAnPCcgKyBjay50YWcgKyAnICcgKyAoY2suY2xhc3NOYW1lID8gJyBjbGFzcz1cIicgKyBjay5jbGFzc05hbWUgKyAnXCInIDogXCJcIilcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoY2suc3R5bGUgPyAnIHN0eWxlPVwiJyArIGNrLnN0eWxlICsgJ1wiJyA6IFwiXCIpICsgJz4nICsgY2subGFiZWwgKyBcIjxcXC9cIiArIGNrLnRhZyArIFwiPlwiXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgJzwvZGl2Pic7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIH0pKHQpO1xyXG5cdCAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIHZhciB1aSA9IG5ldyBlZGl0b3J1aS5Db21ib3goe1xyXG5cdCAgICAgICAgICAgIGVkaXRvcjplZGl0b3IsXHJcblx0ICAgICAgICAgICAgaXRlbXM6aXRlbXMsXHJcblx0ICAgICAgICAgICAgdGl0bGU6dGl0bGUsXHJcblx0ICAgICAgICAgICAgaW5pdFZhbHVlOnRpdGxlLFxyXG5cdCAgICAgICAgICAgIGNsYXNzTmFtZTonZWR1aS1mb3ItY3VzdG9tc3R5bGUnLFxyXG5cdCAgICAgICAgICAgIG9uc2VsZWN0OmZ1bmN0aW9uICh0LCBpbmRleCkge1xyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3IuZXhlY0NvbW1hbmQoJ2N1c3RvbXN0eWxlJywgdGhpcy5pdGVtc1tpbmRleF0udmFsdWUpO1xyXG5cdCAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgb25idXR0b25jbGljazpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2hvd1BvcHVwKCk7XHJcblx0ICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICBpbmRleEJ5VmFsdWU6ZnVuY3Rpb24gKHZhbHVlKSB7XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0aTsgdGkgPSB0aGlzLml0ZW1zW2krK107KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodGkubGFiZWwgPT0gdmFsdWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSAtIDFcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICByZXR1cm4gLTE7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICBlZGl0b3J1aS5idXR0b25zWydjdXN0b21zdHlsZSddID0gdWk7XHJcblx0ICAgICAgICBlZGl0b3IuYWRkTGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICh0eXBlLCBjYXVzZUJ5VWksIHVpUmVhZHkpIHtcclxuXHQgICAgICAgICAgICBpZiAoIXVpUmVhZHkpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gZWRpdG9yLnF1ZXJ5Q29tbWFuZFN0YXRlKCdjdXN0b21zdHlsZScpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoc3RhdGUgPT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHVpLnNldERpc2FibGVkKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdWkuc2V0RGlzYWJsZWQoZmFsc2UpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCdjdXN0b21zdHlsZScpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdWkuaW5kZXhCeVZhbHVlKHZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPSAtMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldFZhbHVlKHZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0VmFsdWUodWkuaW5pdFZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIHJldHVybiB1aTtcclxuXHQgICAgfTtcclxuXHQgICAgZWRpdG9ydWkuaW5zZXJ0dGFibGUgPSBmdW5jdGlvbiAoZWRpdG9yLCBpZnJhbWVVcmwsIHRpdGxlKSB7XHJcblx0ICAgICAgICB0aXRsZSA9IGVkaXRvci5vcHRpb25zLmxhYmVsTWFwWydpbnNlcnR0YWJsZSddIHx8IGVkaXRvci5nZXRMYW5nKFwibGFiZWxNYXAuaW5zZXJ0dGFibGVcIikgfHwgJyc7XHJcblx0ICAgICAgICB2YXIgdWkgPSBuZXcgZWRpdG9ydWkuVGFibGVCdXR0b24oe1xyXG5cdCAgICAgICAgICAgIGVkaXRvcjplZGl0b3IsXHJcblx0ICAgICAgICAgICAgdGl0bGU6dGl0bGUsXHJcblx0ICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLWZvci1pbnNlcnR0YWJsZScsXHJcblx0ICAgICAgICAgICAgb25waWNrdGFibGU6ZnVuY3Rpb24gKHQsIG51bUNvbHMsIG51bVJvd3MpIHtcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9yLmV4ZWNDb21tYW5kKCdJbnNlcnRUYWJsZScsIHtudW1Sb3dzOm51bVJvd3MsIG51bUNvbHM6bnVtQ29scywgYm9yZGVyOjF9KTtcclxuXHQgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgIG9uYnV0dG9uY2xpY2s6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnNob3dQb3B1cCgpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgZWRpdG9ydWkuYnV0dG9uc1snaW5zZXJ0dGFibGUnXSA9IHVpO1xyXG5cdCAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdWkuc2V0RGlzYWJsZWQoZWRpdG9yLnF1ZXJ5Q29tbWFuZFN0YXRlKCdpbnNlcnR0YWJsZScpID09IC0xKTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgcmV0dXJuIHVpO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgZWRpdG9ydWkubGluZWhlaWdodCA9IGZ1bmN0aW9uIChlZGl0b3IpIHtcclxuXHQgICAgICAgIHZhciB2YWwgPSBlZGl0b3Iub3B0aW9ucy5saW5laGVpZ2h0IHx8IFtdO1xyXG5cdCAgICAgICAgaWYgKCF2YWwubGVuZ3RoKXJldHVybjtcclxuXHQgICAgICAgIGZvciAodmFyIGkgPSAwLCBjaSwgaXRlbXMgPSBbXTsgY2kgPSB2YWxbaSsrXTspIHtcclxuXHQgICAgICAgICAgICBpdGVtcy5wdXNoKHtcclxuXHQgICAgICAgICAgICAgICAgLy90b2RvOuWGmeatu+S6hlxyXG5cdCAgICAgICAgICAgICAgICBsYWJlbDpjaSxcclxuXHQgICAgICAgICAgICAgICAgdmFsdWU6Y2ksXHJcblx0ICAgICAgICAgICAgICAgIHRoZW1lOmVkaXRvci5vcHRpb25zLnRoZW1lLFxyXG5cdCAgICAgICAgICAgICAgICBvbmNsaWNrOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvci5leGVjQ29tbWFuZChcImxpbmVoZWlnaHRcIiwgdGhpcy52YWx1ZSk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgdmFyIHVpID0gbmV3IGVkaXRvcnVpLk1lbnVCdXR0b24oe1xyXG5cdCAgICAgICAgICAgIGVkaXRvcjplZGl0b3IsXHJcblx0ICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLWZvci1saW5laGVpZ2h0JyxcclxuXHQgICAgICAgICAgICB0aXRsZTplZGl0b3Iub3B0aW9ucy5sYWJlbE1hcFsnbGluZWhlaWdodCddIHx8IGVkaXRvci5nZXRMYW5nKFwibGFiZWxNYXAubGluZWhlaWdodFwiKSB8fCAnJyxcclxuXHQgICAgICAgICAgICBpdGVtczppdGVtcyxcclxuXHQgICAgICAgICAgICBvbmJ1dHRvbmNsaWNrOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCdMaW5lSGVpZ2h0JykgfHwgdGhpcy52YWx1ZTtcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9yLmV4ZWNDb21tYW5kKFwiTGluZUhlaWdodFwiLCB2YWx1ZSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICBlZGl0b3J1aS5idXR0b25zWydsaW5laGVpZ2h0J10gPSB1aTtcclxuXHQgICAgICAgIGVkaXRvci5hZGRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBzdGF0ZSA9IGVkaXRvci5xdWVyeUNvbW1hbmRTdGF0ZSgnTGluZUhlaWdodCcpO1xyXG5cdCAgICAgICAgICAgIGlmIChzdGF0ZSA9PSAtMSkge1xyXG5cdCAgICAgICAgICAgICAgICB1aS5zZXREaXNhYmxlZCh0cnVlKTtcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICB1aS5zZXREaXNhYmxlZChmYWxzZSk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGVkaXRvci5xdWVyeUNvbW1hbmRWYWx1ZSgnTGluZUhlaWdodCcpO1xyXG5cdCAgICAgICAgICAgICAgICB2YWx1ZSAmJiB1aS5zZXRWYWx1ZSgodmFsdWUgKyAnJykucmVwbGFjZSgvY20vLCAnJykpO1xyXG5cdCAgICAgICAgICAgICAgICB1aS5zZXRDaGVja2VkKHN0YXRlKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgcmV0dXJuIHVpO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgdmFyIHJvd3NwYWNpbmdzID0gWyd0b3AnLCAnYm90dG9tJ107XHJcblx0ICAgIGZvciAodmFyIHIgPSAwLCByaTsgcmkgPSByb3dzcGFjaW5nc1tyKytdOykge1xyXG5cdCAgICAgICAgKGZ1bmN0aW9uIChjbWQpIHtcclxuXHQgICAgICAgICAgICBlZGl0b3J1aVsncm93c3BhY2luZycgKyBjbWRdID0gZnVuY3Rpb24gKGVkaXRvcikge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgdmFsID0gZWRpdG9yLm9wdGlvbnNbJ3Jvd3NwYWNpbmcnICsgY21kXSB8fCBbXTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCF2YWwubGVuZ3RoKSByZXR1cm4gbnVsbDtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpLCBpdGVtcyA9IFtdOyBjaSA9IHZhbFtpKytdOykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6Y2ksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6Y2ksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdGhlbWU6ZWRpdG9yLm9wdGlvbnMudGhlbWUsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgb25jbGljazpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5leGVjQ29tbWFuZChcInJvd3NwYWNpbmdcIiwgdGhpcy52YWx1ZSwgY21kKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHZhciB1aSA9IG5ldyBlZGl0b3J1aS5NZW51QnV0dG9uKHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvcjplZGl0b3IsXHJcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6J2VkdWktZm9yLXJvd3NwYWNpbmcnICsgY21kLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGl0bGU6ZWRpdG9yLm9wdGlvbnMubGFiZWxNYXBbJ3Jvd3NwYWNpbmcnICsgY21kXSB8fCBlZGl0b3IuZ2V0TGFuZyhcImxhYmVsTWFwLnJvd3NwYWNpbmdcIiArIGNtZCkgfHwgJycsXHJcblx0ICAgICAgICAgICAgICAgICAgICBpdGVtczppdGVtcyxcclxuXHQgICAgICAgICAgICAgICAgICAgIG9uYnV0dG9uY2xpY2s6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGVkaXRvci5xdWVyeUNvbW1hbmRWYWx1ZSgncm93c3BhY2luZycsIGNtZCkgfHwgdGhpcy52YWx1ZTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IuZXhlY0NvbW1hbmQoXCJyb3dzcGFjaW5nXCIsIHZhbHVlLCBjbWQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9ydWkuYnV0dG9uc1tjbWRdID0gdWk7XHJcblx0ICAgICAgICAgICAgICAgIGVkaXRvci5hZGRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gZWRpdG9yLnF1ZXJ5Q29tbWFuZFN0YXRlKCdyb3dzcGFjaW5nJywgY21kKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PSAtMSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldERpc2FibGVkKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXREaXNhYmxlZChmYWxzZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCdyb3dzcGFjaW5nJywgY21kKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSAmJiB1aS5zZXRWYWx1ZSgodmFsdWUgKyAnJykucmVwbGFjZSgvJS8sICcnKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0Q2hlY2tlZChzdGF0ZSlcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB1aTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9KShyaSlcclxuXHQgICAgfVxyXG5cdCAgICAvL+acieW6j++8jOaXoOW6j+WIl+ihqFxyXG5cdCAgICB2YXIgbGlzdHMgPSBbJ2luc2VydG9yZGVyZWRsaXN0JywgJ2luc2VydHVub3JkZXJlZGxpc3QnXTtcclxuXHQgICAgZm9yICh2YXIgbCA9IDAsIGNsOyBjbCA9IGxpc3RzW2wrK107KSB7XHJcblx0ICAgICAgICAoZnVuY3Rpb24gKGNtZCkge1xyXG5cdCAgICAgICAgICAgIGVkaXRvcnVpW2NtZF0gPSBmdW5jdGlvbiAoZWRpdG9yKSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciB2YWxzID0gZWRpdG9yLm9wdGlvbnNbY21kXSxcclxuXHQgICAgICAgICAgICAgICAgICAgIF9vbk1lbnVDbGljayA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IuZXhlY0NvbW1hbmQoY21kLCB0aGlzLnZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH0sIGl0ZW1zID0gW107XHJcblx0ICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gdmFscykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6dmFsc1tpXSB8fCBlZGl0b3IuZ2V0TGFuZygpW2NtZF1baV0gfHwgXCJcIixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTppLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lOmVkaXRvci5vcHRpb25zLnRoZW1lLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9uY2xpY2s6X29uTWVudUNsaWNrXHJcblx0ICAgICAgICAgICAgICAgICAgICB9KVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHZhciB1aSA9IG5ldyBlZGl0b3J1aS5NZW51QnV0dG9uKHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvcjplZGl0b3IsXHJcblx0ICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6J2VkdWktZm9yLScgKyBjbWQsXHJcblx0ICAgICAgICAgICAgICAgICAgICB0aXRsZTplZGl0b3IuZ2V0TGFuZyhcImxhYmVsTWFwLlwiICsgY21kKSB8fCAnJyxcclxuXHQgICAgICAgICAgICAgICAgICAgICdpdGVtcyc6aXRlbXMsXHJcblx0ICAgICAgICAgICAgICAgICAgICBvbmJ1dHRvbmNsaWNrOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBlZGl0b3IucXVlcnlDb21tYW5kVmFsdWUoY21kKSB8fCB0aGlzLnZhbHVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5leGVjQ29tbWFuZChjbWQsIHZhbHVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIGVkaXRvcnVpLmJ1dHRvbnNbY21kXSA9IHVpO1xyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3IuYWRkTGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IGVkaXRvci5xdWVyeUNvbW1hbmRTdGF0ZShjbWQpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlID09IC0xKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0RGlzYWJsZWQodHJ1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHVpLnNldERpc2FibGVkKGZhbHNlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBlZGl0b3IucXVlcnlDb21tYW5kVmFsdWUoY21kKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB1aS5zZXRWYWx1ZSh2YWx1ZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdWkuc2V0Q2hlY2tlZChzdGF0ZSlcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybiB1aTtcclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgfSkoY2wpXHJcblx0ICAgIH1cclxuXHJcblx0ICAgIGVkaXRvcnVpLmZ1bGxzY3JlZW4gPSBmdW5jdGlvbiAoZWRpdG9yLCB0aXRsZSkge1xyXG5cdCAgICAgICAgdGl0bGUgPSBlZGl0b3Iub3B0aW9ucy5sYWJlbE1hcFsnZnVsbHNjcmVlbiddIHx8IGVkaXRvci5nZXRMYW5nKFwibGFiZWxNYXAuZnVsbHNjcmVlblwiKSB8fCAnJztcclxuXHQgICAgICAgIHZhciB1aSA9IG5ldyBlZGl0b3J1aS5CdXR0b24oe1xyXG5cdCAgICAgICAgICAgIGNsYXNzTmFtZTonZWR1aS1mb3ItZnVsbHNjcmVlbicsXHJcblx0ICAgICAgICAgICAgdGl0bGU6dGl0bGUsXHJcblx0ICAgICAgICAgICAgdGhlbWU6ZWRpdG9yLm9wdGlvbnMudGhlbWUsXHJcblx0ICAgICAgICAgICAgb25jbGljazpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChlZGl0b3IudWkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvci51aS5zZXRGdWxsU2NyZWVuKCFlZGl0b3IudWkuaXNGdWxsU2NyZWVuKCkpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2hlY2tlZChlZGl0b3IudWkuaXNGdWxsU2NyZWVuKCkpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgZWRpdG9ydWkuYnV0dG9uc1snZnVsbHNjcmVlbiddID0gdWk7XHJcblx0ICAgICAgICBlZGl0b3IuYWRkTGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgc3RhdGUgPSBlZGl0b3IucXVlcnlDb21tYW5kU3RhdGUoJ2Z1bGxzY3JlZW4nKTtcclxuXHQgICAgICAgICAgICB1aS5zZXREaXNhYmxlZChzdGF0ZSA9PSAtMSk7XHJcblx0ICAgICAgICAgICAgdWkuc2V0Q2hlY2tlZChlZGl0b3IudWkuaXNGdWxsU2NyZWVuKCkpO1xyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICByZXR1cm4gdWk7XHJcblx0ICAgIH07XHJcblxyXG5cdCAgICAvLyDooajmg4VcclxuXHQgICAgZWRpdG9ydWlbXCJlbW90aW9uXCJdID0gZnVuY3Rpb24gKGVkaXRvciwgaWZyYW1lVXJsKSB7XHJcblx0ICAgICAgICB2YXIgY21kID0gXCJlbW90aW9uXCI7XHJcblx0ICAgICAgICB2YXIgdWkgPSBuZXcgZWRpdG9ydWkuTXVsdGlNZW51UG9wKHtcclxuXHQgICAgICAgICAgICB0aXRsZTplZGl0b3Iub3B0aW9ucy5sYWJlbE1hcFtjbWRdIHx8IGVkaXRvci5nZXRMYW5nKFwibGFiZWxNYXAuXCIgKyBjbWQgKyBcIlwiKSB8fCAnJyxcclxuXHQgICAgICAgICAgICBlZGl0b3I6ZWRpdG9yLFxyXG5cdCAgICAgICAgICAgIGNsYXNzTmFtZTonZWR1aS1mb3ItJyArIGNtZCxcclxuXHQgICAgICAgICAgICBpZnJhbWVVcmw6ZWRpdG9yLnVpLm1hcFVybChpZnJhbWVVcmwgfHwgKGVkaXRvci5vcHRpb25zLmlmcmFtZVVybE1hcCB8fCB7fSlbY21kXSB8fCBpZnJhbWVVcmxNYXBbY21kXSlcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgZWRpdG9ydWkuYnV0dG9uc1tjbWRdID0gdWk7XHJcblxyXG5cdCAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdWkuc2V0RGlzYWJsZWQoZWRpdG9yLnF1ZXJ5Q29tbWFuZFN0YXRlKGNtZCkgPT0gLTEpXHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgICAgIHJldHVybiB1aTtcclxuXHQgICAgfTtcclxuXHJcblx0ICAgIGVkaXRvcnVpLmF1dG90eXBlc2V0ID0gZnVuY3Rpb24gKGVkaXRvcikge1xyXG5cdCAgICAgICAgdmFyIHVpID0gbmV3IGVkaXRvcnVpLkF1dG9UeXBlU2V0QnV0dG9uKHtcclxuXHQgICAgICAgICAgICBlZGl0b3I6ZWRpdG9yLFxyXG5cdCAgICAgICAgICAgIHRpdGxlOmVkaXRvci5vcHRpb25zLmxhYmVsTWFwWydhdXRvdHlwZXNldCddIHx8IGVkaXRvci5nZXRMYW5nKFwibGFiZWxNYXAuYXV0b3R5cGVzZXRcIikgfHwgJycsXHJcblx0ICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLWZvci1hdXRvdHlwZXNldCcsXHJcblx0ICAgICAgICAgICAgb25idXR0b25jbGljazpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgIGVkaXRvci5leGVjQ29tbWFuZCgnYXV0b3R5cGVzZXQnKVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgZWRpdG9ydWkuYnV0dG9uc1snYXV0b3R5cGVzZXQnXSA9IHVpO1xyXG5cdCAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdWkuc2V0RGlzYWJsZWQoZWRpdG9yLnF1ZXJ5Q29tbWFuZFN0YXRlKCdhdXRvdHlwZXNldCcpID09IC0xKTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgcmV0dXJuIHVpO1xyXG5cdCAgICB9O1xyXG5cclxuXHQgICAgLyog566A5Y2V5LiK5Lyg5o+S5Lu2ICovXHJcblx0ICAgIGVkaXRvcnVpW1wic2ltcGxldXBsb2FkXCJdID0gZnVuY3Rpb24gKGVkaXRvcikge1xyXG5cdCAgICAgICAgdmFyIG5hbWUgPSAnc2ltcGxldXBsb2FkJyxcclxuXHQgICAgICAgICAgICB1aSA9IG5ldyBlZGl0b3J1aS5CdXR0b24oe1xyXG5cdCAgICAgICAgICAgICAgICBjbGFzc05hbWU6J2VkdWktZm9yLScgKyBuYW1lLFxyXG5cdCAgICAgICAgICAgICAgICB0aXRsZTplZGl0b3Iub3B0aW9ucy5sYWJlbE1hcFtuYW1lXSB8fCBlZGl0b3IuZ2V0TGFuZyhcImxhYmVsTWFwLlwiICsgbmFtZSkgfHwgJycsXHJcblx0ICAgICAgICAgICAgICAgIG9uY2xpY2s6ZnVuY3Rpb24gKCkge30sXHJcblx0ICAgICAgICAgICAgICAgIHRoZW1lOmVkaXRvci5vcHRpb25zLnRoZW1lLFxyXG5cdCAgICAgICAgICAgICAgICBzaG93VGV4dDpmYWxzZVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgZWRpdG9ydWkuYnV0dG9uc1tuYW1lXSA9IHVpO1xyXG5cdCAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdyZWFkeScsIGZ1bmN0aW9uKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBiID0gdWkuZ2V0RG9tKCdib2R5JyksXHJcblx0ICAgICAgICAgICAgICAgIGljb25TcGFuID0gYi5jaGlsZHJlblswXTtcclxuXHQgICAgICAgICAgICBlZGl0b3IuZmlyZUV2ZW50KCdzaW1wbGV1cGxvYWRidG5yZWFkeScsIGljb25TcGFuKTtcclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAodHlwZSwgY2F1c2VCeVVpLCB1aVJlYWR5KSB7XHJcblx0ICAgICAgICAgICAgdmFyIHN0YXRlID0gZWRpdG9yLnF1ZXJ5Q29tbWFuZFN0YXRlKG5hbWUpO1xyXG5cdCAgICAgICAgICAgIGlmIChzdGF0ZSA9PSAtMSkge1xyXG5cdCAgICAgICAgICAgICAgICB1aS5zZXREaXNhYmxlZCh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgdWkuc2V0Q2hlY2tlZChmYWxzZSk7XHJcblx0ICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKCF1aVJlYWR5KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB1aS5zZXREaXNhYmxlZChmYWxzZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB1aS5zZXRDaGVja2VkKHN0YXRlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICAgICAgcmV0dXJuIHVpO1xyXG5cdCAgICB9O1xyXG5cclxuXHR9KSgpO1xyXG5cclxuXHJcblx0Ly8gYWRhcHRlci9lZGl0b3IuanNcclxuXHQvLy9pbXBvcnQgY29yZVxyXG5cdC8vL2NvbW1hbmRzIOWFqOWxj1xyXG5cdC8vL2NvbW1hbmRzTmFtZSBGdWxsU2NyZWVuXHJcblx0Ly8vY29tbWFuZHNUaXRsZSAg5YWo5bGPXHJcblx0KGZ1bmN0aW9uICgpIHtcclxuXHQgICAgdmFyIHV0aWxzID0gYmFpZHUuZWRpdG9yLnV0aWxzLFxyXG5cdCAgICAgICAgdWlVdGlscyA9IGJhaWR1LmVkaXRvci51aS51aVV0aWxzLFxyXG5cdCAgICAgICAgVUlCYXNlID0gYmFpZHUuZWRpdG9yLnVpLlVJQmFzZSxcclxuXHQgICAgICAgIGRvbVV0aWxzID0gYmFpZHUuZWRpdG9yLmRvbS5kb21VdGlscztcclxuXHQgICAgdmFyIG5vZGVTdGFjayA9IFtdO1xyXG5cclxuXHQgICAgZnVuY3Rpb24gRWRpdG9yVUkob3B0aW9ucykge1xyXG5cdCAgICAgICAgdGhpcy5pbml0T3B0aW9ucyhvcHRpb25zKTtcclxuXHQgICAgICAgIHRoaXMuaW5pdEVkaXRvclVJKCk7XHJcblx0ICAgIH1cclxuXHJcblx0ICAgIEVkaXRvclVJLnByb3RvdHlwZSA9IHtcclxuXHQgICAgICAgIHVpTmFtZTonZWRpdG9yJyxcclxuXHQgICAgICAgIGluaXRFZGl0b3JVSTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5lZGl0b3IudWkgPSB0aGlzO1xyXG5cdCAgICAgICAgICAgIHRoaXMuX2RpYWxvZ3MgPSB7fTtcclxuXHQgICAgICAgICAgICB0aGlzLmluaXRVSUJhc2UoKTtcclxuXHQgICAgICAgICAgICB0aGlzLl9pbml0VG9vbGJhcnMoKTtcclxuXHQgICAgICAgICAgICB2YXIgZWRpdG9yID0gdGhpcy5lZGl0b3IsXHJcblx0ICAgICAgICAgICAgICAgIG1lID0gdGhpcztcclxuXHJcblx0ICAgICAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdyZWFkeScsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgLy/mj5DkvptnZXREaWFsb2fmlrnms5VcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9yLmdldERpYWxvZyA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWRpdG9yLnVpLl9kaWFsb2dzW25hbWUgKyBcIkRpYWxvZ1wiXTtcclxuXHQgICAgICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMub24oZWRpdG9yLndpbmRvdywgJ3Njcm9sbCcsIGZ1bmN0aW9uIChldnQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGJhaWR1LmVkaXRvci51aS5Qb3B1cC5wb3N0SGlkZShldnQpO1xyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgLy/mj5DkvpvnvJbovpHlmajlrp7ml7blrr3pq5go5YWo5bGP5pe25a696auY5LiN5Y+Y5YyWKVxyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3IudWkuX2FjdHVhbEZyYW1lV2lkdGggPSBlZGl0b3Iub3B0aW9ucy5pbml0aWFsRnJhbWVXaWR0aDtcclxuXHJcblx0ICAgICAgICAgICAgICAgIFVFLmJyb3dzZXIuaWUgJiYgVUUuYnJvd3Nlci52ZXJzaW9uID09PSA2ICYmIGVkaXRvci5jb250YWluZXIub3duZXJEb2N1bWVudC5leGVjQ29tbWFuZChcIkJhY2tncm91bmRJbWFnZUNhY2hlXCIsIGZhbHNlLCB0cnVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIC8vZGlzcGxheSBib3R0b20tYmFyIGxhYmVsIGJhc2VkIG9uIGNvbmZpZ1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoZWRpdG9yLm9wdGlvbnMuZWxlbWVudFBhdGhFbmFibGVkKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlZGl0b3IudWkuZ2V0RG9tKCdlbGVtZW50cGF0aCcpLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPVwiZWR1aS1lZGl0b3ItYnJlYWRjcnVtYlwiPicgKyBlZGl0b3IuZ2V0TGFuZyhcImVsZW1lbnRQYXRoVGlwXCIpICsgJzo8L2Rpdj4nO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChlZGl0b3Iub3B0aW9ucy53b3JkQ291bnQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNvdW50Rm4oKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q291bnQoZWRpdG9yLG1lKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkb21VdGlscy51bihlZGl0b3IuZG9jdW1lbnQsIFwiY2xpY2tcIiwgYXJndW1lbnRzLmNhbGxlZSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb21VdGlscy5vbihlZGl0b3IuZG9jdW1lbnQsIFwiY2xpY2tcIiwgY291bnRGbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlZGl0b3IudWkuZ2V0RG9tKCd3b3JkY291bnQnKS5pbm5lckhUTUwgPSBlZGl0b3IuZ2V0TGFuZyhcIndvcmRDb3VudFRpcFwiKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3IudWkuX3NjYWxlKCk7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChlZGl0b3Iub3B0aW9ucy5zY2FsZUVuYWJsZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChlZGl0b3IuYXV0b0hlaWdodEVuYWJsZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IuZGlzYWJsZUF1dG9IZWlnaHQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmVuYWJsZVNjYWxlKCk7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtZS5kaXNhYmxlU2NhbGUoKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoIWVkaXRvci5vcHRpb25zLmVsZW1lbnRQYXRoRW5hYmxlZCAmJiAhZWRpdG9yLm9wdGlvbnMud29yZENvdW50ICYmICFlZGl0b3Iub3B0aW9ucy5zY2FsZUVuYWJsZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvci51aS5nZXREb20oJ2VsZW1lbnRwYXRoJykuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnVpLmdldERvbSgnd29yZGNvdW50Jykuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnVpLmdldERvbSgnc2NhbGUnKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmICghZWRpdG9yLnNlbGVjdGlvbi5pc0ZvY3VzKCkpcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3IuZmlyZUV2ZW50KCdzZWxlY3Rpb25jaGFuZ2UnLCBmYWxzZSwgdHJ1ZSk7XHJcblxyXG5cclxuXHQgICAgICAgICAgICB9KTtcclxuXHJcblx0ICAgICAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAodCwgZXZ0KSB7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBlbCA9IGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQ7XHJcblx0ICAgICAgICAgICAgICAgIGJhaWR1LmVkaXRvci51aS5Qb3B1cC5wb3N0SGlkZShldnQsIGVsKTtcclxuXHQgICAgICAgICAgICAgICAgYmFpZHUuZWRpdG9yLnVpLlNob3J0Q3V0TWVudS5wb3N0SGlkZShldnQpO1xyXG5cclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICBlZGl0b3IuYWRkTGlzdGVuZXIoXCJkZWxjZWxsc1wiLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChVRS51aVsnZWRpdHRpcCddKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBuZXcgVUUudWlbJ2VkaXR0aXAnXShlZGl0b3IpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGVkaXRvci5nZXREaWFsb2coJ2VkaXR0aXAnKS5vcGVuKCk7XHJcblx0ICAgICAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBwYXN0ZVBvcCwgaXNQYXN0ZSA9IGZhbHNlLCB0aW1lcjtcclxuXHQgICAgICAgICAgICBlZGl0b3IuYWRkTGlzdGVuZXIoXCJhZnRlcnBhc3RlXCIsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYoZWRpdG9yLnF1ZXJ5Q29tbWFuZFN0YXRlKCdwYXN0ZXBsYWluJykpXHJcblx0ICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgICAgIGlmKGJhaWR1LmVkaXRvci51aS5QYXN0ZVBpY2tlcil7XHJcblx0ICAgICAgICAgICAgICAgICAgICBwYXN0ZVBvcCA9IG5ldyBiYWlkdS5lZGl0b3IudWkuUG9wdXAoe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6bmV3IGJhaWR1LmVkaXRvci51aS5QYXN0ZVBpY2tlcih7ZWRpdG9yOmVkaXRvcn0pLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvcjplZGl0b3IsXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOidlZHVpLXdvcmRwYXN0ZXBvcCdcclxuXHQgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgcGFzdGVQb3AucmVuZGVyKCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaXNQYXN0ZSA9IHRydWU7XHJcblx0ICAgICAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgICAgIGVkaXRvci5hZGRMaXN0ZW5lcihcImFmdGVyaW5zZXJ0aHRtbFwiLCBmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XHJcblx0ICAgICAgICAgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAocGFzdGVQb3AgJiYgKGlzUGFzdGUgfHwgZWRpdG9yLnVpLl9pc1RyYW5zZmVyKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKHBhc3RlUG9wLmlzSGlkZGVuKCkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3BhbiA9IGRvbVV0aWxzLmNyZWF0ZUVsZW1lbnQoZWRpdG9yLmRvY3VtZW50LCAnc3BhbicsIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3R5bGUnOlwibGluZS1oZWlnaHQ6MHB4O1wiLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpbm5lckhUTUwnOidcXHVmZWZmJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSksXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IGVkaXRvci5zZWxlY3Rpb24uZ2V0UmFuZ2UoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UuaW5zZXJ0Tm9kZShzcGFuKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcD0gZ2V0RG9tTm9kZShzcGFuLCAnZmlyc3RDaGlsZCcsICdwcmV2aW91c1NpYmxpbmcnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wICYmIHBhc3RlUG9wLnNob3dBbmNob3IodG1wLm5vZGVUeXBlID09IDMgPyB0bXAucGFyZW50Tm9kZSA6IHRtcCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLnJlbW92ZShzcGFuKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzdGVQb3Auc2hvdygpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZWRpdG9yLnVpLl9pc1RyYW5zZmVyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlzUGFzdGUgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSwgMjAwKVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIGVkaXRvci5hZGRMaXN0ZW5lcignY29udGV4dG1lbnUnLCBmdW5jdGlvbiAodCwgZXZ0KSB7XHJcblx0ICAgICAgICAgICAgICAgIGJhaWR1LmVkaXRvci51aS5Qb3B1cC5wb3N0SGlkZShldnQpO1xyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIGVkaXRvci5hZGRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uICh0LCBldnQpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKHBhc3RlUG9wKSAgICBwYXN0ZVBvcC5kaXNwb3NlKGV2dCk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZXZ0LmtleUNvZGUgfHwgZXZ0LndoaWNoO1xyXG5cdCAgICAgICAgICAgICAgICBpZihldnQuYWx0S2V5JiZrZXlDb2RlPT05MCl7XHJcblx0ICAgICAgICAgICAgICAgICAgICBVRS51aS5idXR0b25zWydmdWxsc2NyZWVuJ10ub25jbGljaygpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCd3b3JkY291bnQnLCBmdW5jdGlvbiAodHlwZSkge1xyXG5cdCAgICAgICAgICAgICAgICBzZXRDb3VudCh0aGlzLG1lKTtcclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICBmdW5jdGlvbiBzZXRDb3VudChlZGl0b3IsdWkpIHtcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9yLnNldE9wdCh7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3b3JkQ291bnQ6dHJ1ZSxcclxuXHQgICAgICAgICAgICAgICAgICAgIG1heGltdW1Xb3JkczoxMDAwMCxcclxuXHQgICAgICAgICAgICAgICAgICAgIHdvcmRDb3VudE1zZzplZGl0b3Iub3B0aW9ucy53b3JkQ291bnRNc2cgfHwgZWRpdG9yLmdldExhbmcoXCJ3b3JkQ291bnRNc2dcIiksXHJcblx0ICAgICAgICAgICAgICAgICAgICB3b3JkT3ZlckZsb3dNc2c6ZWRpdG9yLm9wdGlvbnMud29yZE92ZXJGbG93TXNnIHx8IGVkaXRvci5nZXRMYW5nKFwid29yZE92ZXJGbG93TXNnXCIpXHJcblx0ICAgICAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgb3B0ID0gZWRpdG9yLm9wdGlvbnMsXHJcblx0ICAgICAgICAgICAgICAgICAgICBtYXggPSBvcHQubWF4aW11bVdvcmRzLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgbXNnID0gb3B0LndvcmRDb3VudE1zZyAsXHJcblx0ICAgICAgICAgICAgICAgICAgICBlcnJNc2cgPSBvcHQud29yZE92ZXJGbG93TXNnLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgY291bnREb20gPSB1aS5nZXREb20oJ3dvcmRjb3VudCcpO1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoIW9wdC53b3JkQ291bnQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB2YXIgY291bnQgPSBlZGl0b3IuZ2V0Q29udGVudExlbmd0aCh0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGNvdW50ID4gbWF4KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjb3VudERvbS5pbm5lckhUTUwgPSBlcnJNc2c7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlZGl0b3IuZmlyZUV2ZW50KFwid29yZGNvdW50b3ZlcmZsb3dcIik7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBjb3VudERvbS5pbm5lckhUTUwgPSBtc2cucmVwbGFjZShcInsjbGVhdmV9XCIsIG1heCAtIGNvdW50KS5yZXBsYWNlKFwieyNjb3VudH1cIiwgY291bnQpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICBlZGl0b3IuYWRkTGlzdGVuZXIoJ3NlbGVjdGlvbmNoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGVkaXRvci5vcHRpb25zLmVsZW1lbnRQYXRoRW5hYmxlZCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgbWVbKGVkaXRvci5xdWVyeUNvbW1hbmRTdGF0ZSgnZWxlbWVudHBhdGgnKSA9PSAtMSA/ICdkaXMnIDogJ2VuJykgKyAnYWJsZUVsZW1lbnRQYXRoJ10oKVxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChlZGl0b3Iub3B0aW9ucy5zY2FsZUVuYWJsZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lWyhlZGl0b3IucXVlcnlDb21tYW5kU3RhdGUoJ3NjYWxlJykgPT0gLTEgPyAnZGlzJyA6ICdlbicpICsgJ2FibGVTY2FsZSddKCk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgdmFyIHBvcHVwID0gbmV3IGJhaWR1LmVkaXRvci51aS5Qb3B1cCh7XHJcblx0ICAgICAgICAgICAgICAgIGVkaXRvcjplZGl0b3IsXHJcblx0ICAgICAgICAgICAgICAgIGNvbnRlbnQ6JycsXHJcblx0ICAgICAgICAgICAgICAgIGNsYXNzTmFtZTonZWR1aS1idWJibGUnLFxyXG5cdCAgICAgICAgICAgICAgICBfb25FZGl0QnV0dG9uQ2xpY2s6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlZGl0b3IudWkuX2RpYWxvZ3MubGlua0RpYWxvZy5vcGVuKCk7XHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIF9vbkltZ0VkaXRCdXR0b25DbGljazpmdW5jdGlvbiAobmFtZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlZGl0b3IudWkuX2RpYWxvZ3NbbmFtZV0gJiYgZWRpdG9yLnVpLl9kaWFsb2dzW25hbWVdLm9wZW4oKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIF9vbkltZ1NldEZsb2F0OmZ1bmN0aW9uICh2YWx1ZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlZGl0b3IuZXhlY0NvbW1hbmQoXCJpbWFnZWZsb2F0XCIsIHZhbHVlKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIH0sXHJcblx0ICAgICAgICAgICAgICAgIF9zZXRJZnJhbWVBbGlnbjpmdW5jdGlvbiAodmFsdWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBmcmFtZSA9IHBvcHVwLmFuY2hvckVsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0ZyYW1lID0gZnJhbWUuY2xvbmVOb2RlKHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh2YWx1ZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgLTI6XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0ZyYW1lLnNldEF0dHJpYnV0ZShcImFsaWduXCIsIFwiXCIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIC0xOlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdGcmFtZS5zZXRBdHRyaWJ1dGUoXCJhbGlnblwiLCBcImxlZnRcIik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RnJhbWUuc2V0QXR0cmlidXRlKFwiYWxpZ25cIiwgXCJyaWdodFwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBmcmFtZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdGcmFtZSwgZnJhbWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKGZyYW1lKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHBvcHVwLmFuY2hvckVsID0gbmV3RnJhbWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBwb3B1cC5zaG93QW5jaG9yKHBvcHVwLmFuY2hvckVsKTtcclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgX3VwZGF0ZUlmcmFtZTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgZnJhbWUgPSBlZGl0b3IuX2lmcmFtZSA9IHBvcHVwLmFuY2hvckVsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYoZG9tVXRpbHMuaGFzQ2xhc3MoZnJhbWUsICd1ZWRpdG9yX2JhaWR1bWFwJykpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2VsZWN0aW9uLmdldFJhbmdlKCkuc2VsZWN0Tm9kZShmcmFtZSkuc2VsZWN0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnVpLl9kaWFsb2dzLm1hcERpYWxvZy5vcGVuKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXAuaGlkZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IudWkuX2RpYWxvZ3MuaW5zZXJ0ZnJhbWVEaWFsb2cub3BlbigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwLmhpZGUoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSxcclxuXHQgICAgICAgICAgICAgICAgX29uUmVtb3ZlQnV0dG9uQ2xpY2s6ZnVuY3Rpb24gKGNtZE5hbWUpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvci5leGVjQ29tbWFuZChjbWROYW1lKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xyXG5cdCAgICAgICAgICAgICAgICB9LFxyXG5cdCAgICAgICAgICAgICAgICBxdWVyeUF1dG9IaWRlOmZ1bmN0aW9uIChlbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGVsICYmIGVsLm93bmVyRG9jdW1lbnQgPT0gZWRpdG9yLmRvY3VtZW50KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PSAnaW1nJyB8fCBkb21VdGlscy5maW5kUGFyZW50QnlUYWdOYW1lKGVsLCAnYScsIHRydWUpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbCAhPT0gcG9wdXAuYW5jaG9yRWw7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJhaWR1LmVkaXRvci51aS5Qb3B1cC5wcm90b3R5cGUucXVlcnlBdXRvSGlkZS5jYWxsKHRoaXMsIGVsKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cdCAgICAgICAgICAgIHBvcHVwLnJlbmRlcigpO1xyXG5cdCAgICAgICAgICAgIGlmIChlZGl0b3Iub3B0aW9ucy5pbWFnZVBvcHVwKSB7XHJcblx0ICAgICAgICAgICAgICAgIGVkaXRvci5hZGRMaXN0ZW5lcignbW91c2VvdmVyJywgZnVuY3Rpb24gKHQsIGV2dCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZXZ0ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBlbCA9IGV2dC50YXJnZXQgfHwgZXZ0LnNyY0VsZW1lbnQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoZWRpdG9yLnVpLl9kaWFsb2dzLmluc2VydGZyYW1lRGlhbG9nICYmIC9pZnJhbWUvaWcudGVzdChlbC50YWdOYW1lKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBodG1sID0gcG9wdXAuZm9ybWF0SHRtbChcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxub2JyPicgKyBlZGl0b3IuZ2V0TGFuZyhcInByb3BlcnR5XCIpICsgJzogPHNwYW4gb25jbGljaz0kJC5fc2V0SWZyYW1lQWxpZ24oLTIpIGNsYXNzPVwiZWR1aS1jbGlja2FibGVcIj4nICsgZWRpdG9yLmdldExhbmcoXCJkZWZhdWx0XCIpICsgJzwvc3Bhbj4mbmJzcDsmbmJzcDs8c3BhbiBvbmNsaWNrPSQkLl9zZXRJZnJhbWVBbGlnbigtMSkgY2xhc3M9XCJlZHVpLWNsaWNrYWJsZVwiPicgKyBlZGl0b3IuZ2V0TGFuZyhcImp1c3RpZnlsZWZ0XCIpICsgJzwvc3Bhbj4mbmJzcDsmbmJzcDs8c3BhbiBvbmNsaWNrPSQkLl9zZXRJZnJhbWVBbGlnbigxKSBjbGFzcz1cImVkdWktY2xpY2thYmxlXCI+JyArIGVkaXRvci5nZXRMYW5nKFwianVzdGlmeXJpZ2h0XCIpICsgJzwvc3Bhbj4mbmJzcDsmbmJzcDsnICtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgPHNwYW4gb25jbGljaz1cIiQkLl91cGRhdGVJZnJhbWUoIHRoaXMpO1wiIGNsYXNzPVwiZWR1aS1jbGlja2FibGVcIj4nICsgZWRpdG9yLmdldExhbmcoXCJtb2RpZnlcIikgKyAnPC9zcGFuPjwvbm9icj4nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaHRtbCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cC5nZXREb20oJ2NvbnRlbnQnKS5pbm5lckhUTUwgPSBodG1sO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cC5hbmNob3JFbCA9IGVsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cC5zaG93QW5jaG9yKHBvcHVwLmFuY2hvckVsKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cC5oaWRlKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9yLmFkZExpc3RlbmVyKCdzZWxlY3Rpb25jaGFuZ2UnLCBmdW5jdGlvbiAodCwgY2F1c2VCeVVpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoIWNhdXNlQnlVaSkgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIGh0bWwgPSAnJywgc3RyID0gXCJcIixcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbWcgPSBlZGl0b3Iuc2VsZWN0aW9uLmdldFJhbmdlKCkuZ2V0Q2xvc2VkTm9kZSgpLFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ3MgPSBlZGl0b3IudWkuX2RpYWxvZ3M7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAoaW1nICYmIGltZy50YWdOYW1lID09ICdJTUcnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpYWxvZ05hbWUgPSAnaW5zZXJ0aW1hZ2VEaWFsb2cnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWcuY2xhc3NOYW1lLmluZGV4T2YoXCJlZHVpLWZha2VkLXZpZGVvXCIpICE9IC0xIHx8IGltZy5jbGFzc05hbWUuaW5kZXhPZihcImVkdWktdXBsb2FkLXZpZGVvXCIpICE9IC0xKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ05hbWUgPSBcImluc2VydHZpZGVvRGlhbG9nXCJcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltZy5jbGFzc05hbWUuaW5kZXhPZihcImVkdWktZmFrZWQtd2ViYXBwXCIpICE9IC0xKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ05hbWUgPSBcIndlYmFwcERpYWxvZ1wiXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWcuc3JjLmluZGV4T2YoXCJodHRwOi8vYXBpLm1hcC5iYWlkdS5jb21cIikgIT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nTmFtZSA9IFwibWFwRGlhbG9nXCJcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltZy5jbGFzc05hbWUuaW5kZXhPZihcImVkdWktZmFrZWQtbXVzaWNcIikgIT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nTmFtZSA9IFwibXVzaWNEaWFsb2dcIlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1nLnNyYy5pbmRleE9mKFwiaHR0cDovL21hcHMuZ29vZ2xlLmNvbS9tYXBzL2FwaS9zdGF0aWNtYXBcIikgIT0gLTEpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9nTmFtZSA9IFwiZ21hcERpYWxvZ1wiXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbWcuZ2V0QXR0cmlidXRlKFwiYW5jaG9ybmFtZVwiKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dOYW1lID0gXCJhbmNob3JEaWFsb2dcIjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCA9IHBvcHVwLmZvcm1hdEh0bWwoXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPG5vYnI+JyArIGVkaXRvci5nZXRMYW5nKFwicHJvcGVydHlcIikgKyAnOiA8c3BhbiBvbmNsaWNrPSQkLl9vbkltZ0VkaXRCdXR0b25DbGljayhcImFuY2hvckRpYWxvZ1wiKSBjbGFzcz1cImVkdWktY2xpY2thYmxlXCI+JyArIGVkaXRvci5nZXRMYW5nKFwibW9kaWZ5XCIpICsgJzwvc3Bhbj4mbmJzcDsmbmJzcDsnICtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gb25jbGljaz0kJC5fb25SZW1vdmVCdXR0b25DbGljayhcXCdhbmNob3JcXCcpIGNsYXNzPVwiZWR1aS1jbGlja2FibGVcIj4nICsgZWRpdG9yLmdldExhbmcoXCJkZWxldGVcIikgKyAnPC9zcGFuPjwvbm9icj4nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltZy5nZXRBdHRyaWJ1dGUoXCJ3b3JkX2ltZ1wiKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RvZG8g5pS+5YiwZGlhbG9n5Y675YGa5p+l6K+iXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci53b3JkX2ltZyA9IFtpbWcuZ2V0QXR0cmlidXRlKFwid29yZF9pbWdcIildO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWFsb2dOYW1lID0gXCJ3b3JkaW1hZ2VEaWFsb2dcIlxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZihkb21VdGlscy5oYXNDbGFzcyhpbWcsICdsb2FkaW5nY2xhc3MnKSB8fCBkb21VdGlscy5oYXNDbGFzcyhpbWcsICdsb2FkZXJyb3JjbGFzcycpKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ05hbWUgPSBcIlwiO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRpYWxvZ3NbZGlhbG9nTmFtZV0pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSAnPG5vYnI+JyArIGVkaXRvci5nZXRMYW5nKFwicHJvcGVydHlcIikgKyAnOiAnK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gb25jbGljaz0kJC5fb25JbWdTZXRGbG9hdChcIm5vbmVcIikgY2xhc3M9XCJlZHVpLWNsaWNrYWJsZVwiPicgKyBlZGl0b3IuZ2V0TGFuZyhcImRlZmF1bHRcIikgKyAnPC9zcGFuPiZuYnNwOyZuYnNwOycgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gb25jbGljaz0kJC5fb25JbWdTZXRGbG9hdChcImxlZnRcIikgY2xhc3M9XCJlZHVpLWNsaWNrYWJsZVwiPicgKyBlZGl0b3IuZ2V0TGFuZyhcImp1c3RpZnlsZWZ0XCIpICsgJzwvc3Bhbj4mbmJzcDsmbmJzcDsnICtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIG9uY2xpY2s9JCQuX29uSW1nU2V0RmxvYXQoXCJyaWdodFwiKSBjbGFzcz1cImVkdWktY2xpY2thYmxlXCI+JyArIGVkaXRvci5nZXRMYW5nKFwianVzdGlmeXJpZ2h0XCIpICsgJzwvc3Bhbj4mbmJzcDsmbmJzcDsnICtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIG9uY2xpY2s9JCQuX29uSW1nU2V0RmxvYXQoXCJjZW50ZXJcIikgY2xhc3M9XCJlZHVpLWNsaWNrYWJsZVwiPicgKyBlZGl0b3IuZ2V0TGFuZyhcImp1c3RpZnljZW50ZXJcIikgKyAnPC9zcGFuPiZuYnNwOyZuYnNwOycrXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiBvbmNsaWNrPVwiJCQuX29uSW1nRWRpdEJ1dHRvbkNsaWNrKFxcJycgKyBkaWFsb2dOYW1lICsgJ1xcJyk7XCIgY2xhc3M9XCJlZHVpLWNsaWNrYWJsZVwiPicgKyBlZGl0b3IuZ2V0TGFuZyhcIm1vZGlmeVwiKSArICc8L3NwYW4+PC9ub2JyPic7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICFodG1sICYmIChodG1sID0gcG9wdXAuZm9ybWF0SHRtbChzdHIpKVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChlZGl0b3IudWkuX2RpYWxvZ3MubGlua0RpYWxvZykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaW5rID0gZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCdsaW5rJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluayAmJiAodXJsID0gKGxpbmsuZ2V0QXR0cmlidXRlKCdfaHJlZicpIHx8IGxpbmsuZ2V0QXR0cmlidXRlKCdocmVmJywgMikpKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHh0ID0gdXJsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXJsLmxlbmd0aCA+IDMwKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eHQgPSB1cmwuc3Vic3RyaW5nKDAsIDIwKSArIFwiLi4uXCI7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGh0bWwpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxkaXYgc3R5bGU9XCJoZWlnaHQ6NXB4O1wiPjwvZGl2PidcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9IHBvcHVwLmZvcm1hdEh0bWwoXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPG5vYnI+JyArIGVkaXRvci5nZXRMYW5nKFwiYW50aG9yTXNnXCIpICsgJzogPGEgdGFyZ2V0PVwiX2JsYW5rXCIgaHJlZj1cIicgKyB1cmwgKyAnXCIgdGl0bGU9XCInICsgdXJsICsgJ1wiID4nICsgdHh0ICsgJzwvYT4nICtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIDxzcGFuIGNsYXNzPVwiZWR1aS1jbGlja2FibGVcIiBvbmNsaWNrPVwiJCQuX29uRWRpdEJ1dHRvbkNsaWNrKCk7XCI+JyArIGVkaXRvci5nZXRMYW5nKFwibW9kaWZ5XCIpICsgJzwvc3Bhbj4nICtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnIDxzcGFuIGNsYXNzPVwiZWR1aS1jbGlja2FibGVcIiBvbmNsaWNrPVwiJCQuX29uUmVtb3ZlQnV0dG9uQ2xpY2soXFwndW5saW5rXFwnKTtcIj4gJyArIGVkaXRvci5nZXRMYW5nKFwiY2xlYXJcIikgKyAnPC9zcGFuPjwvbm9icj4nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXAuc2hvd0FuY2hvcihsaW5rKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGh0bWwpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBwb3B1cC5nZXREb20oJ2NvbnRlbnQnKS5pbm5lckhUTUwgPSBodG1sO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwLmFuY2hvckVsID0gaW1nIHx8IGxpbms7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXAuc2hvd0FuY2hvcihwb3B1cC5hbmNob3JFbCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwLmhpZGUoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBfaW5pdFRvb2xiYXJzOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB2YXIgZWRpdG9yID0gdGhpcy5lZGl0b3I7XHJcblx0ICAgICAgICAgICAgdmFyIHRvb2xiYXJzID0gdGhpcy50b29sYmFycyB8fCBbXTtcclxuXHQgICAgICAgICAgICB2YXIgdG9vbGJhclVpcyA9IFtdO1xyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9vbGJhcnMubGVuZ3RoOyBpKyspIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRvb2xiYXIgPSB0b29sYmFyc1tpXTtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHRvb2xiYXJVaSA9IG5ldyBiYWlkdS5lZGl0b3IudWkuVG9vbGJhcih7dGhlbWU6ZWRpdG9yLm9wdGlvbnMudGhlbWV9KTtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0b29sYmFyLmxlbmd0aDsgaisrKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgdG9vbGJhckl0ZW0gPSB0b29sYmFyW2pdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIHRvb2xiYXJJdGVtVWkgPSBudWxsO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0b29sYmFySXRlbSA9PSAnc3RyaW5nJykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXJJdGVtID0gdG9vbGJhckl0ZW0udG9Mb3dlckNhc2UoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9vbGJhckl0ZW0gPT0gJ3wnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXJJdGVtID0gJ1NlcGFyYXRvcic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmKHRvb2xiYXJJdGVtID09ICd8fCcpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySXRlbSA9ICdCcmVha2xpbmUnO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYmFpZHUuZWRpdG9yLnVpW3Rvb2xiYXJJdGVtXSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySXRlbVVpID0gbmV3IGJhaWR1LmVkaXRvci51aVt0b29sYmFySXRlbV0oZWRpdG9yKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIC8vZnVsbHNjcmVlbui/memHjOWNleeLrOWkhOeQhuS4gOS4i++8jOaUvuWIsOmmluihjOWOu1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b29sYmFySXRlbSA9PSAnZnVsbHNjcmVlbicpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvb2xiYXJVaXMgJiYgdG9vbGJhclVpc1swXSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9vbGJhclVpc1swXS5pdGVtcy5zcGxpY2UoMCwgMCwgdG9vbGJhckl0ZW1VaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySXRlbVVpICYmIHRvb2xiYXJVaS5pdGVtcy5zcGxpY2UoMCwgMCwgdG9vbGJhckl0ZW1VaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB0b29sYmFySXRlbVVpID0gdG9vbGJhckl0ZW07XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAodG9vbGJhckl0ZW1VaSAmJiB0b29sYmFySXRlbVVpLmlkKSB7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRvb2xiYXJVaS5hZGQodG9vbGJhckl0ZW1VaSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgdG9vbGJhclVpc1tpXSA9IHRvb2xiYXJVaTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIC8v5o6l5Y+X5aSW6YOo5a6a5Yi255qEVUlcclxuXHJcblx0ICAgICAgICAgICAgdXRpbHMuZWFjaChVRS5fY3VzdG9taXplVUksZnVuY3Rpb24ob2JqLGtleSl7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBpdGVtVUksaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgIGlmKG9iai5pZCAmJiBvYmouaWQgIT0gZWRpdG9yLmtleSl7XHJcblx0ICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpdGVtVUkgPSBvYmouZXhlY0ZuLmNhbGwoZWRpdG9yLGVkaXRvcixrZXkpO1xyXG5cdCAgICAgICAgICAgICAgICBpZihpdGVtVUkpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBvYmouaW5kZXg7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihpbmRleCA9PT0gdW5kZWZpbmVkKXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IHRvb2xiYXJVaS5pdGVtcy5sZW5ndGg7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB0b29sYmFyVWkuYWRkKGl0ZW1VSSxpbmRleClcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgICAgICB0aGlzLnRvb2xiYXJzID0gdG9vbGJhclVpcztcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBnZXRIdG1sVHBsOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gJzxkaXYgaWQ9XCIjI1wiIGNsYXNzPVwiJSVcIj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCIjI190b29sYmFyYm94XCIgY2xhc3M9XCIlJS10b29sYmFyYm94XCI+JyArXHJcblx0ICAgICAgICAgICAgICAgICh0aGlzLnRvb2xiYXJzLmxlbmd0aCA/XHJcblx0ICAgICAgICAgICAgICAgICAgICAnPGRpdiBpZD1cIiMjX3Rvb2xiYXJib3hvdXRlclwiIGNsYXNzPVwiJSUtdG9vbGJhcmJveG91dGVyXCI+PGRpdiBjbGFzcz1cIiUlLXRvb2xiYXJib3hpbm5lclwiPicgK1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyVG9vbGJhckJveEh0bWwoKSArXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PjwvZGl2PicgOiAnJykgK1xyXG5cdCAgICAgICAgICAgICAgICAnPGRpdiBpZD1cIiMjX3Rvb2xiYXJtc2dcIiBjbGFzcz1cIiUlLXRvb2xiYXJtc2dcIiBzdHlsZT1cImRpc3BsYXk6bm9uZTtcIj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzxkaXYgaWQgPSBcIiMjX3VwbG9hZF9kaWFsb2dcIiBjbGFzcz1cIiUlLXRvb2xiYXJtc2ctdXBsb2FkXCIgb25jbGljaz1cIiQkLnNob3dXb3JkSW1hZ2VEaWFsb2coKTtcIj4nICsgdGhpcy5lZGl0b3IuZ2V0TGFuZyhcImNsaWNrVG9VcGxvYWRcIikgKyAnPC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiJSUtdG9vbGJhcm1zZy1jbG9zZVwiIG9uY2xpY2s9XCIkJC5oaWRlVG9vbGJhck1zZygpO1wiPng8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCIjI190b29sYmFybXNnX2xhYmVsXCIgY2xhc3M9XCIlJS10b29sYmFybXNnLWxhYmVsXCI+PC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8ZGl2IHN0eWxlPVwiaGVpZ2h0OjA7b3ZlcmZsb3c6aGlkZGVuO2NsZWFyOmJvdGg7XCI+PC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCIjI19tZXNzYWdlX2hvbGRlclwiIGNsYXNzPVwiJSUtbWVzc2FnZWhvbGRlclwiPjwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8ZGl2IGlkPVwiIyNfaWZyYW1laG9sZGVyXCIgY2xhc3M9XCIlJS1pZnJhbWVob2xkZXJcIj4nICtcclxuXHQgICAgICAgICAgICAgICAgJzwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICAgICAvL21vZGlmeSB3ZGNvdW50IGJ5IG1hdGFvXHJcblx0ICAgICAgICAgICAgICAgICc8ZGl2IGlkPVwiIyNfYm90dG9tYmFyXCIgY2xhc3M9XCIlJS1ib3R0b21Db250YWluZXJcIj48dGFibGU+PHRyPicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPHRkIGlkPVwiIyNfZWxlbWVudHBhdGhcIiBjbGFzcz1cIiUlLWJvdHRvbWJhclwiPjwvdGQ+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8dGQgaWQ9XCIjI193b3JkY291bnRcIiBjbGFzcz1cIiUlLXdvcmRjb3VudFwiPjwvdGQ+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8dGQgaWQ9XCIjI19zY2FsZVwiIGNsYXNzPVwiJSUtc2NhbGVcIj48ZGl2IGNsYXNzPVwiJSUtaWNvblwiPjwvZGl2PjwvdGQ+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8L3RyPjwvdGFibGU+PC9kaXY+JyArXHJcblx0ICAgICAgICAgICAgICAgICc8ZGl2IGlkPVwiIyNfc2NhbGVsYXllclwiPjwvZGl2PicgK1xyXG5cdCAgICAgICAgICAgICAgICAnPC9kaXY+JztcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzaG93V29yZEltYWdlRGlhbG9nOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB0aGlzLl9kaWFsb2dzWyd3b3JkaW1hZ2VEaWFsb2cnXS5vcGVuKCk7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgcmVuZGVyVG9vbGJhckJveEh0bWw6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBidWZmID0gW107XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnRvb2xiYXJzLmxlbmd0aDsgaSsrKSB7XHJcblx0ICAgICAgICAgICAgICAgIGJ1ZmYucHVzaCh0aGlzLnRvb2xiYXJzW2ldLnJlbmRlckh0bWwoKSk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIHJldHVybiBidWZmLmpvaW4oJycpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHNldEZ1bGxTY3JlZW46ZnVuY3Rpb24gKGZ1bGxzY3JlZW4pIHtcclxuXHJcblx0ICAgICAgICAgICAgdmFyIGVkaXRvciA9IHRoaXMuZWRpdG9yLFxyXG5cdCAgICAgICAgICAgICAgICBjb250YWluZXIgPSBlZGl0b3IuY29udGFpbmVyLnBhcmVudE5vZGUucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5fZnVsbHNjcmVlbiAhPSBmdWxsc2NyZWVuKSB7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuX2Z1bGxzY3JlZW4gPSBmdWxsc2NyZWVuO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5maXJlRXZlbnQoJ2JlZm9yZWZ1bGxzY3JlZW5jaGFuZ2UnLCBmdWxsc2NyZWVuKTtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGJhaWR1LmVkaXRvci5icm93c2VyLmdlY2tvKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgYmsgPSBlZGl0b3Iuc2VsZWN0aW9uLmdldFJhbmdlKCkuY3JlYXRlQm9va21hcmsoKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoZnVsbHNjcmVlbikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGNvbnRhaW5lci50YWdOYW1lICE9IFwiQk9EWVwiKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gYmFpZHUuZWRpdG9yLmRvbS5kb21VdGlscy5nZXRDb21wdXRlZFN0eWxlKGNvbnRhaW5lciwgXCJwb3NpdGlvblwiKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBub2RlU3RhY2sucHVzaChwb3NpdGlvbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gXCJzdGF0aWNcIjtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Jha0h0bWxPdmVyZmxvdyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdztcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Jha0JvZHlPdmVyZmxvdyA9IGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3c7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYWtBdXRvSGVpZ2h0ID0gdGhpcy5lZGl0b3IuYXV0b0hlaWdodEVuYWJsZWQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYWtTY3JvbGxUb3AgPSBNYXRoLm1heChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wLCBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCk7XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmFrRWRpdG9yQ29udGFuaW5lcldpZHRoID0gZWRpdG9yLmlmcmFtZS5wYXJlbnROb2RlLm9mZnNldFdpZHRoO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Jha0F1dG9IZWlnaHQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAvL+W9k+WFqOWxj+aXtuS4jeiDveaJp+ihjOiHquWKqOmVv+mrmFxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5hdXRvSGVpZ2h0RW5hYmxlZCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmRpc2FibGVBdXRvSGVpZ2h0KCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcblx0ICAgICAgICAgICAgICAgICAgICAvL+S/ruWkje+8jOa7muWKqOadoeS4jeaUtui1t+eahOmXrumimFxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLHdpbmRvdy5zY3JvbGxZKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Jha0Nzc1RleHQgPSB0aGlzLmdldERvbSgpLnN0eWxlLmNzc1RleHQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYWtDc3NUZXh0MSA9IHRoaXMuZ2V0RG9tKCdpZnJhbWVob2xkZXInKS5zdHlsZS5jc3NUZXh0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmlmcmFtZS5wYXJlbnROb2RlLnN0eWxlLndpZHRoID0gJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVGdWxsU2NyZWVuKCk7XHJcblx0ICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY29udGFpbmVyLnRhZ05hbWUgIT0gXCJCT0RZXCIpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuc3R5bGUucG9zaXRpb24gPSBub2RlU3RhY2suc2hpZnQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIgPSBjb250YWluZXIucGFyZW50Tm9kZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RG9tKCkuc3R5bGUuY3NzVGV4dCA9IHRoaXMuX2Jha0Nzc1RleHQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB0aGlzLmdldERvbSgnaWZyYW1laG9sZGVyJykuc3R5bGUuY3NzVGV4dCA9IHRoaXMuX2Jha0Nzc1RleHQxO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2Jha0F1dG9IZWlnaHQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBlZGl0b3IuYXV0b0hlaWdodEVuYWJsZWQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmVuYWJsZUF1dG9IZWlnaHQoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSB0aGlzLl9iYWtIdG1sT3ZlcmZsb3c7XHJcblx0ICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm92ZXJmbG93ID0gdGhpcy5fYmFrQm9keU92ZXJmbG93O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmlmcmFtZS5wYXJlbnROb2RlLnN0eWxlLndpZHRoID0gdGhpcy5fYmFrRWRpdG9yQ29udGFuaW5lcldpZHRoICsgJ3B4JztcclxuXHQgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5zY3JvbGxUbygwLCB0aGlzLl9iYWtTY3JvbGxUb3ApO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIGlmIChicm93c2VyLmdlY2tvICYmIGVkaXRvci5ib2R5LmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpbnB1dCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlZGl0b3IuYm9keS5jb250ZW50RWRpdGFibGUgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0LmZvY3VzKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5ib2R5LmNvbnRlbnRFZGl0YWJsZSA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5maXJlRXZlbnQoJ2Z1bGxzY3JlZW5jaGFuZ2VkJywgZnVsbHNjcmVlbik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5zZWxlY3Rpb24uZ2V0UmFuZ2UoKS5tb3ZlVG9Cb29rbWFyayhiaykuc2VsZWN0KHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWlkdS5lZGl0b3IuZG9tLmRvbVV0aWxzLnJlbW92ZShpbnB1dCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW4gJiYgd2luZG93LnNjcm9sbCgwLCAwKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSwgMClcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgaWYoZWRpdG9yLmJvZHkuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IuZmlyZUV2ZW50KCdmdWxsc2NyZWVuY2hhbmdlZCcsIGZ1bGxzY3JlZW4pO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyTGF5b3V0KCk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF91cGRhdGVGdWxsU2NyZWVuOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICBpZiAodGhpcy5fZnVsbHNjcmVlbikge1xyXG5cdCAgICAgICAgICAgICAgICB2YXIgdnBSZWN0ID0gdWlVdGlscy5nZXRWaWV3cG9ydFJlY3QoKTtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5nZXREb20oKS5zdHlsZS5jc3NUZXh0ID0gJ2JvcmRlcjowO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6JyArICh0aGlzLmVkaXRvci5vcHRpb25zLnRvcE9mZnNldCB8fCAwKSArICdweDt3aWR0aDonICsgdnBSZWN0LndpZHRoICsgJ3B4O2hlaWdodDonICsgdnBSZWN0LmhlaWdodCArICdweDt6LWluZGV4OicgKyAodGhpcy5nZXREb20oKS5zdHlsZS56SW5kZXggKiAxICsgMTAwKTtcclxuXHQgICAgICAgICAgICAgICAgdWlVdGlscy5zZXRWaWV3cG9ydE9mZnNldCh0aGlzLmdldERvbSgpLCB7IGxlZnQ6MCwgdG9wOnRoaXMuZWRpdG9yLm9wdGlvbnMudG9wT2Zmc2V0IHx8IDAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLnNldEhlaWdodCh2cFJlY3QuaGVpZ2h0IC0gdGhpcy5nZXREb20oJ3Rvb2xiYXJib3gnKS5vZmZzZXRIZWlnaHQgLSB0aGlzLmdldERvbSgnYm90dG9tYmFyJykub2Zmc2V0SGVpZ2h0IC0gKHRoaXMuZWRpdG9yLm9wdGlvbnMudG9wT2Zmc2V0IHx8IDApLHRydWUpO1xyXG5cdCAgICAgICAgICAgICAgICAvL+S4jeaJi+WKqOiwg+S4gOS4i++8jOS8muWvvOiHtOWFqOWxj+WkseaViFxyXG5cdCAgICAgICAgICAgICAgICBpZihicm93c2VyLmdlY2tvKXtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRyeXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub25yZXNpemUoKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIH1jYXRjaChlKXtcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF91cGRhdGVFbGVtZW50UGF0aDpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGJvdHRvbSA9IHRoaXMuZ2V0RG9tKCdlbGVtZW50cGF0aCcpLCBsaXN0O1xyXG5cdCAgICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRQYXRoRW5hYmxlZCAmJiAobGlzdCA9IHRoaXMuZWRpdG9yLnF1ZXJ5Q29tbWFuZFZhbHVlKCdlbGVtZW50cGF0aCcpKSkge1xyXG5cclxuXHQgICAgICAgICAgICAgICAgdmFyIGJ1ZmYgPSBbXTtcclxuXHQgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGNpOyBjaSA9IGxpc3RbaV07IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgYnVmZltpXSA9IHRoaXMuZm9ybWF0SHRtbCgnPHNwYW4gdW5zZWxlY3RhYmxlPVwib25cIiBvbmNsaWNrPVwiJCQuZWRpdG9yLmV4ZWNDb21tYW5kKCZxdW90O2VsZW1lbnRwYXRoJnF1b3Q7LCAmcXVvdDsnICsgaSArICcmcXVvdDspO1wiPicgKyBjaSArICc8L3NwYW4+Jyk7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgYm90dG9tLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPVwiZWR1aS1lZGl0b3ItYnJlYWRjcnVtYlwiIG9ubW91c2Vkb3duPVwicmV0dXJuIGZhbHNlO1wiPicgKyB0aGlzLmVkaXRvci5nZXRMYW5nKFwiZWxlbWVudFBhdGhUaXBcIikgKyAnOiAnICsgYnVmZi5qb2luKCcgJmd0OyAnKSArICc8L2Rpdj4nO1xyXG5cclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBib3R0b20uc3R5bGUuZGlzcGxheSA9ICdub25lJ1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBkaXNhYmxlRWxlbWVudFBhdGg6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBib3R0b20gPSB0aGlzLmdldERvbSgnZWxlbWVudHBhdGgnKTtcclxuXHQgICAgICAgICAgICBib3R0b20uaW5uZXJIVE1MID0gJyc7XHJcblx0ICAgICAgICAgICAgYm90dG9tLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblx0ICAgICAgICAgICAgdGhpcy5lbGVtZW50UGF0aEVuYWJsZWQgPSBmYWxzZTtcclxuXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgZW5hYmxlRWxlbWVudFBhdGg6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBib3R0b20gPSB0aGlzLmdldERvbSgnZWxlbWVudHBhdGgnKTtcclxuXHQgICAgICAgICAgICBib3R0b20uc3R5bGUuZGlzcGxheSA9ICcnO1xyXG5cdCAgICAgICAgICAgIHRoaXMuZWxlbWVudFBhdGhFbmFibGVkID0gdHJ1ZTtcclxuXHQgICAgICAgICAgICB0aGlzLl91cGRhdGVFbGVtZW50UGF0aCgpO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIF9zY2FsZTpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGRvYyA9IGRvY3VtZW50LFxyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3IgPSB0aGlzLmVkaXRvcixcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9ySG9sZGVyID0gZWRpdG9yLmNvbnRhaW5lcixcclxuXHQgICAgICAgICAgICAgICAgZWRpdG9yRG9jdW1lbnQgPSBlZGl0b3IuZG9jdW1lbnQsXHJcblx0ICAgICAgICAgICAgICAgIHRvb2xiYXJCb3ggPSB0aGlzLmdldERvbShcInRvb2xiYXJib3hcIiksXHJcblx0ICAgICAgICAgICAgICAgIGJvdHRvbWJhciA9IHRoaXMuZ2V0RG9tKFwiYm90dG9tYmFyXCIpLFxyXG5cdCAgICAgICAgICAgICAgICBzY2FsZSA9IHRoaXMuZ2V0RG9tKFwic2NhbGVcIiksXHJcblx0ICAgICAgICAgICAgICAgIHNjYWxlbGF5ZXIgPSB0aGlzLmdldERvbShcInNjYWxlbGF5ZXJcIik7XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBpc01vdXNlTW92ZSA9IGZhbHNlLFxyXG5cdCAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IG51bGwsXHJcblx0ICAgICAgICAgICAgICAgIG1pbkVkaXRvckhlaWdodCA9IDAsXHJcblx0ICAgICAgICAgICAgICAgIG1pbkVkaXRvcldpZHRoID0gZWRpdG9yLm9wdGlvbnMubWluRnJhbWVXaWR0aCxcclxuXHQgICAgICAgICAgICAgICAgcGFnZVggPSAwLFxyXG5cdCAgICAgICAgICAgICAgICBwYWdlWSA9IDAsXHJcblx0ICAgICAgICAgICAgICAgIHNjYWxlV2lkdGggPSAwLFxyXG5cdCAgICAgICAgICAgICAgICBzY2FsZUhlaWdodCA9IDA7XHJcblxyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGRvd24oKSB7XHJcblx0ICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gZG9tVXRpbHMuZ2V0WFkoZWRpdG9ySG9sZGVyKTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmICghbWluRWRpdG9ySGVpZ2h0KSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBtaW5FZGl0b3JIZWlnaHQgPSBlZGl0b3Iub3B0aW9ucy5taW5GcmFtZUhlaWdodCArIHRvb2xiYXJCb3gub2Zmc2V0SGVpZ2h0ICsgYm90dG9tYmFyLm9mZnNldEhlaWdodDtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgc2NhbGVsYXllci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7ZGlzcGxheTo7dG9wOjA7YmFja2dyb3VuZC1jb2xvcjojNDFBQkZGO29wYWNpdHk6MC40O2ZpbHRlcjogQWxwaGEob3BhY2l0eT00MCk7d2lkdGg6XCIgKyBlZGl0b3JIb2xkZXIub2Zmc2V0V2lkdGggKyBcInB4O2hlaWdodDpcIlxyXG5cdCAgICAgICAgICAgICAgICAgICAgKyBlZGl0b3JIb2xkZXIub2Zmc2V0SGVpZ2h0ICsgXCJweDt6LWluZGV4OlwiICsgKGVkaXRvci5vcHRpb25zLnpJbmRleCArIDEpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMub24oZG9jLCBcIm1vdXNlbW92ZVwiLCBtb3ZlKTtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMub24oZWRpdG9yRG9jdW1lbnQsIFwibW91c2V1cFwiLCB1cCk7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLm9uKGRvYywgXCJtb3VzZXVwXCIsIHVwKTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIHZhciBtZSA9IHRoaXM7XHJcblx0ICAgICAgICAgICAgLy9ieSB4dWhlbmcg5YWo5bGP5pe25YWz5o6J57yp5pS+XHJcblx0ICAgICAgICAgICAgdGhpcy5lZGl0b3IuYWRkTGlzdGVuZXIoJ2Z1bGxzY3JlZW5jaGFuZ2VkJywgZnVuY3Rpb24gKGUsIGZ1bGxTY3JlZW4pIHtcclxuXHQgICAgICAgICAgICAgICAgaWYgKGZ1bGxTY3JlZW4pIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIG1lLmRpc2FibGVTY2FsZSgpO1xyXG5cclxuXHQgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGlmIChtZS5lZGl0b3Iub3B0aW9ucy5zY2FsZUVuYWJsZWQpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5lbmFibGVTY2FsZSgpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXBOb2RlID0gbWUuZWRpdG9yLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5lZGl0b3IuYm9keS5hcHBlbmRDaGlsZCh0bXBOb2RlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5lZGl0b3IuYm9keS5zdHlsZS5oZWlnaHQgPSBNYXRoLm1heChkb21VdGlscy5nZXRYWSh0bXBOb2RlKS55LCBtZS5lZGl0b3IuaWZyYW1lLm9mZnNldEhlaWdodCAtIDIwKSArICdweCc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlKHRtcE5vZGUpXHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICB9KTtcclxuXHQgICAgICAgICAgICBmdW5jdGlvbiBtb3ZlKGV2ZW50KSB7XHJcblx0ICAgICAgICAgICAgICAgIGNsZWFyU2VsZWN0aW9uKCk7XHJcblx0ICAgICAgICAgICAgICAgIHZhciBlID0gZXZlbnQgfHwgd2luZG93LmV2ZW50O1xyXG5cdCAgICAgICAgICAgICAgICBwYWdlWCA9IGUucGFnZVggfHwgKGRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCArIGUuY2xpZW50WCk7XHJcblx0ICAgICAgICAgICAgICAgIHBhZ2VZID0gZS5wYWdlWSB8fCAoZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgKyBlLmNsaWVudFkpO1xyXG5cdCAgICAgICAgICAgICAgICBzY2FsZVdpZHRoID0gcGFnZVggLSBwb3NpdGlvbi54O1xyXG5cdCAgICAgICAgICAgICAgICBzY2FsZUhlaWdodCA9IHBhZ2VZIC0gcG9zaXRpb24ueTtcclxuXHJcblx0ICAgICAgICAgICAgICAgIGlmIChzY2FsZVdpZHRoID49IG1pbkVkaXRvcldpZHRoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBpc01vdXNlTW92ZSA9IHRydWU7XHJcblx0ICAgICAgICAgICAgICAgICAgICBzY2FsZWxheWVyLnN0eWxlLndpZHRoID0gc2NhbGVXaWR0aCArICdweCc7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgaWYgKHNjYWxlSGVpZ2h0ID49IG1pbkVkaXRvckhlaWdodCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaXNNb3VzZU1vdmUgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc2NhbGVsYXllci5zdHlsZS5oZWlnaHQgPSBzY2FsZUhlaWdodCArIFwicHhcIjtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgZnVuY3Rpb24gdXAoKSB7XHJcblx0ICAgICAgICAgICAgICAgIGlmIChpc01vdXNlTW92ZSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaXNNb3VzZU1vdmUgPSBmYWxzZTtcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvci51aS5fYWN0dWFsRnJhbWVXaWR0aCA9IHNjYWxlbGF5ZXIub2Zmc2V0V2lkdGggLSAyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZWRpdG9ySG9sZGVyLnN0eWxlLndpZHRoID0gZWRpdG9yLnVpLl9hY3R1YWxGcmFtZVdpZHRoICsgJ3B4JztcclxuXHJcblx0ICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0SGVpZ2h0KHNjYWxlbGF5ZXIub2Zmc2V0SGVpZ2h0IC0gYm90dG9tYmFyLm9mZnNldEhlaWdodCAtIHRvb2xiYXJCb3gub2Zmc2V0SGVpZ2h0IC0gMix0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICBpZiAoc2NhbGVsYXllcikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgc2NhbGVsYXllci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcblx0ICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgY2xlYXJTZWxlY3Rpb24oKTtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMudW4oZG9jLCBcIm1vdXNlbW92ZVwiLCBtb3ZlKTtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMudW4oZWRpdG9yRG9jdW1lbnQsIFwibW91c2V1cFwiLCB1cCk7XHJcblx0ICAgICAgICAgICAgICAgIGRvbVV0aWxzLnVuKGRvYywgXCJtb3VzZXVwXCIsIHVwKTtcclxuXHQgICAgICAgICAgICB9XHJcblxyXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uIGNsZWFyU2VsZWN0aW9uKCkge1xyXG5cdCAgICAgICAgICAgICAgICBpZiAoYnJvd3Nlci5pZSlcclxuXHQgICAgICAgICAgICAgICAgICAgIGRvYy5zZWxlY3Rpb24uY2xlYXIoKTtcclxuXHQgICAgICAgICAgICAgICAgZWxzZVxyXG5cdCAgICAgICAgICAgICAgICAgICAgd2luZG93LmdldFNlbGVjdGlvbigpLnJlbW92ZUFsbFJhbmdlcygpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHJcblx0ICAgICAgICAgICAgdGhpcy5lbmFibGVTY2FsZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgLy90cmFjZToyODY4XHJcblx0ICAgICAgICAgICAgICAgIGlmIChlZGl0b3IucXVlcnlDb21tYW5kU3RhdGUoXCJzb3VyY2VcIikgPT0gMSkgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgICAgICBzY2FsZS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcclxuXHQgICAgICAgICAgICAgICAgdGhpcy5zY2FsZUVuYWJsZWQgPSB0cnVlO1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy5vbihzY2FsZSwgXCJtb3VzZWRvd25cIiwgZG93bik7XHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgICAgICB0aGlzLmRpc2FibGVTY2FsZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgc2NhbGUuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnNjYWxlRW5hYmxlZCA9IGZhbHNlO1xyXG5cdCAgICAgICAgICAgICAgICBkb21VdGlscy51bihzY2FsZSwgXCJtb3VzZWRvd25cIiwgZG93bik7XHJcblx0ICAgICAgICAgICAgfTtcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBpc0Z1bGxTY3JlZW46ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLl9mdWxsc2NyZWVuO1xyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIHBvc3RSZW5kZXI6ZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIFVJQmFzZS5wcm90b3R5cGUucG9zdFJlbmRlci5jYWxsKHRoaXMpO1xyXG5cdCAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy50b29sYmFycy5sZW5ndGg7IGkrKykge1xyXG5cdCAgICAgICAgICAgICAgICB0aGlzLnRvb2xiYXJzW2ldLnBvc3RSZW5kZXIoKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdmFyIG1lID0gdGhpcztcclxuXHQgICAgICAgICAgICB2YXIgdGltZXJJZCxcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMgPSBiYWlkdS5lZGl0b3IuZG9tLmRvbVV0aWxzLFxyXG5cdCAgICAgICAgICAgICAgICB1cGRhdGVGdWxsU2NyZWVuVGltZSA9IGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBtZS5fdXBkYXRlRnVsbFNjcmVlbigpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgIH07XHJcblx0ICAgICAgICAgICAgZG9tVXRpbHMub24od2luZG93LCAncmVzaXplJywgdXBkYXRlRnVsbFNjcmVlblRpbWUpO1xyXG5cclxuXHQgICAgICAgICAgICBtZS5hZGRMaXN0ZW5lcignZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICAgICAgZG9tVXRpbHMudW4od2luZG93LCAncmVzaXplJywgdXBkYXRlRnVsbFNjcmVlblRpbWUpO1xyXG5cdCAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJJZCk7XHJcblx0ICAgICAgICAgICAgfSlcclxuXHQgICAgICAgIH0sXHJcblx0ICAgICAgICBzaG93VG9vbGJhck1zZzpmdW5jdGlvbiAobXNnLCBmbGFnKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5nZXREb20oJ3Rvb2xiYXJtc2dfbGFiZWwnKS5pbm5lckhUTUwgPSBtc2c7XHJcblx0ICAgICAgICAgICAgdGhpcy5nZXREb20oJ3Rvb2xiYXJtc2cnKS5zdHlsZS5kaXNwbGF5ID0gJyc7XHJcblx0ICAgICAgICAgICAgLy9cclxuXHQgICAgICAgICAgICBpZiAoIWZsYWcpIHtcclxuXHQgICAgICAgICAgICAgICAgdmFyIHcgPSB0aGlzLmdldERvbSgndXBsb2FkX2RpYWxvZycpO1xyXG5cdCAgICAgICAgICAgICAgICB3LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSxcclxuXHQgICAgICAgIGhpZGVUb29sYmFyTXNnOmZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICB0aGlzLmdldERvbSgndG9vbGJhcm1zZycpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgbWFwVXJsOmZ1bmN0aW9uICh1cmwpIHtcclxuXHQgICAgICAgICAgICByZXR1cm4gdXJsID8gdXJsLnJlcGxhY2UoJ34vJywgdGhpcy5lZGl0b3Iub3B0aW9ucy5VRURJVE9SX0hPTUVfVVJMIHx8ICcnKSA6ICcnXHJcblx0ICAgICAgICB9LFxyXG5cdCAgICAgICAgdHJpZ2dlckxheW91dDpmdW5jdGlvbiAoKSB7XHJcblx0ICAgICAgICAgICAgdmFyIGRvbSA9IHRoaXMuZ2V0RG9tKCk7XHJcblx0ICAgICAgICAgICAgaWYgKGRvbS5zdHlsZS56b29tID09ICcxJykge1xyXG5cdCAgICAgICAgICAgICAgICBkb20uc3R5bGUuem9vbSA9ICcxMDAlJztcclxuXHQgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICBkb20uc3R5bGUuem9vbSA9ICcxJztcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICB9XHJcblx0ICAgIH07XHJcblx0ICAgIHV0aWxzLmluaGVyaXRzKEVkaXRvclVJLCBiYWlkdS5lZGl0b3IudWkuVUlCYXNlKTtcclxuXHJcblxyXG5cdCAgICB2YXIgaW5zdGFuY2VzID0ge307XHJcblxyXG5cclxuXHQgICAgVUUudWkuRWRpdG9yID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHQgICAgICAgIHZhciBlZGl0b3IgPSBuZXcgVUUuRWRpdG9yKG9wdGlvbnMpO1xyXG5cdCAgICAgICAgZWRpdG9yLm9wdGlvbnMuZWRpdG9yID0gZWRpdG9yO1xyXG5cdCAgICAgICAgdXRpbHMubG9hZEZpbGUoZG9jdW1lbnQsIHtcclxuXHQgICAgICAgICAgICBocmVmOmVkaXRvci5vcHRpb25zLnRoZW1lUGF0aCArIGVkaXRvci5vcHRpb25zLnRoZW1lICsgXCIvY3NzL3VlZGl0b3IuY3NzXCIsXHJcblx0ICAgICAgICAgICAgdGFnOlwibGlua1wiLFxyXG5cdCAgICAgICAgICAgIHR5cGU6XCJ0ZXh0L2Nzc1wiLFxyXG5cdCAgICAgICAgICAgIHJlbDpcInN0eWxlc2hlZXRcIlxyXG5cdCAgICAgICAgfSk7XHJcblxyXG5cdCAgICAgICAgdmFyIG9sZFJlbmRlciA9IGVkaXRvci5yZW5kZXI7XHJcblx0ICAgICAgICBlZGl0b3IucmVuZGVyID0gZnVuY3Rpb24gKGhvbGRlcikge1xyXG5cdCAgICAgICAgICAgIGlmIChob2xkZXIuY29uc3RydWN0b3IgPT09IFN0cmluZykge1xyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3Iua2V5ID0gaG9sZGVyO1xyXG5cdCAgICAgICAgICAgICAgICBpbnN0YW5jZXNbaG9sZGVyXSA9IGVkaXRvcjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdXRpbHMuZG9tUmVhZHkoZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgICAgICBlZGl0b3IubGFuZ0lzUmVhZHkgPyByZW5kZXJVSSgpIDogZWRpdG9yLmFkZExpc3RlbmVyKFwibGFuZ1JlYWR5XCIsIHJlbmRlclVJKTtcclxuXHQgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVuZGVyVUkoKSB7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0T3B0KHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbE1hcDplZGl0b3Iub3B0aW9ucy5sYWJlbE1hcCB8fCBlZGl0b3IuZ2V0TGFuZygnbGFiZWxNYXAnKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgfSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBuZXcgRWRpdG9yVUkoZWRpdG9yLm9wdGlvbnMpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKGhvbGRlcikge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob2xkZXIuY29uc3RydWN0b3IgPT09IFN0cmluZykge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2xkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChob2xkZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBob2xkZXIgJiYgaG9sZGVyLmdldEF0dHJpYnV0ZSgnbmFtZScpICYmICggZWRpdG9yLm9wdGlvbnMudGV4dGFyZWEgPSBob2xkZXIuZ2V0QXR0cmlidXRlKCduYW1lJykpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob2xkZXIgJiYgL3NjcmlwdHx0ZXh0YXJlYS9pZy50ZXN0KGhvbGRlci50YWdOYW1lKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlci5wYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdEaXYsIGhvbGRlcik7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ID0gaG9sZGVyLnZhbHVlIHx8IGhvbGRlci5pbm5lckhUTUw7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRvci5vcHRpb25zLmluaXRpYWxDb250ZW50ID0gL15bXFx0XFxyXFxuIF0qJC8udGVzdChjb250KSA/IGVkaXRvci5vcHRpb25zLmluaXRpYWxDb250ZW50IDpcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnQucmVwbGFjZSgvPltcXG5cXHJcXHRdKyhbIF17NH0pKy9nLCAnPicpXHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1tcXG5cXHJcXHRdKyhbIF17NH0pKzwvZywgJzwnKVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8+W1xcblxcclxcdF0rPC9nLCAnPjwnKTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZGVyLmNsYXNzTmFtZSAmJiAobmV3RGl2LmNsYXNzTmFtZSA9IGhvbGRlci5jbGFzc05hbWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2xkZXIuc3R5bGUuY3NzVGV4dCAmJiAobmV3RGl2LnN0eWxlLmNzc1RleHQgPSBob2xkZXIuc3R5bGUuY3NzVGV4dCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvdGV4dGFyZWEvaS50ZXN0KGhvbGRlci50YWdOYW1lKSkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnRleHRhcmVhID0gaG9sZGVyO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnRleHRhcmVhLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcblxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGhvbGRlcik7XHJcblxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihob2xkZXIuaWQpe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3RGl2LmlkID0gaG9sZGVyLmlkO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tVXRpbHMucmVtb3ZlQXR0cmlidXRlcyhob2xkZXIsJ2lkJyk7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZGVyID0gbmV3RGl2O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgICAgICBob2xkZXIuaW5uZXJIVE1MID0gJyc7XHJcblx0ICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGRvbVV0aWxzLmFkZENsYXNzKGhvbGRlciwgXCJlZHVpLVwiICsgZWRpdG9yLm9wdGlvbnMudGhlbWUpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnVpLnJlbmRlcihob2xkZXIpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgdmFyIG9wdCA9IGVkaXRvci5vcHRpb25zO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgLy/nu5nlrp7kvovmt7vliqDkuIDkuKrnvJbovpHlmajnmoTlrrnlmajlvJXnlKhcclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvci5jb250YWluZXIgPSBlZGl0b3IudWkuZ2V0RG9tKCk7XHJcblx0ICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50cyA9IGRvbVV0aWxzLmZpbmRQYXJlbnRzKGhvbGRlcix0cnVlKTtcclxuXHQgICAgICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5cyA9IFtdO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCAsY2k7Y2k9cGFyZW50c1tpXTtpKyspe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXlzW2ldID0gY2kuc3R5bGUuZGlzcGxheTtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBjaS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJ1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgaWYgKG9wdC5pbml0aWFsRnJhbWVXaWR0aCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5taW5GcmFtZVdpZHRoID0gb3B0LmluaXRpYWxGcmFtZVdpZHRoO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBvcHQubWluRnJhbWVXaWR0aCA9IG9wdC5pbml0aWFsRnJhbWVXaWR0aCA9IGhvbGRlci5vZmZzZXRXaWR0aDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3R5bGVXaWR0aCA9IGhvbGRlci5zdHlsZS53aWR0aDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBpZigvJSQvLnRlc3Qoc3R5bGVXaWR0aCkpIHtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0LmluaXRpYWxGcmFtZVdpZHRoID0gc3R5bGVXaWR0aDtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgICAgICAgICBpZiAob3B0LmluaXRpYWxGcmFtZUhlaWdodCkge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5taW5GcmFtZUhlaWdodCA9IG9wdC5pbml0aWFsRnJhbWVIZWlnaHQ7XHJcblx0ICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIG9wdC5pbml0aWFsRnJhbWVIZWlnaHQgPSBvcHQubWluRnJhbWVIZWlnaHQgPSBob2xkZXIub2Zmc2V0SGVpZ2h0O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCAsY2k7Y2k9cGFyZW50c1tpXTtpKyspe1xyXG5cdCAgICAgICAgICAgICAgICAgICAgICAgIGNpLnN0eWxlLmRpc3BsYXkgPSAgZGlzcGxheXNbaV1cclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIC8v57yW6L6R5Zmo5pyA5aSW5a655Zmo6K6+572u5LqG6auY5bqm77yM5Lya5a+86Ie077yM57yW6L6R5Zmo5LiN5Y2g5L2NXHJcblx0ICAgICAgICAgICAgICAgICAgICAvL3RvZG8g5YWI5Y675o6J77yM5rKh5pyJ5om+5Yiw5Y6f5ZugXHJcblx0ICAgICAgICAgICAgICAgICAgICBpZihob2xkZXIuc3R5bGUuaGVpZ2h0KXtcclxuXHQgICAgICAgICAgICAgICAgICAgICAgICBob2xkZXIuc3R5bGUuaGVpZ2h0ID0gJydcclxuXHQgICAgICAgICAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICAgICAgICAgIGVkaXRvci5jb250YWluZXIuc3R5bGUud2lkdGggPSBvcHQuaW5pdGlhbEZyYW1lV2lkdGggKyAoLyUkLy50ZXN0KG9wdC5pbml0aWFsRnJhbWVXaWR0aCkgPyAnJyA6ICdweCcpO1xyXG5cdCAgICAgICAgICAgICAgICAgICAgZWRpdG9yLmNvbnRhaW5lci5zdHlsZS56SW5kZXggPSBvcHQuekluZGV4O1xyXG5cdCAgICAgICAgICAgICAgICAgICAgb2xkUmVuZGVyLmNhbGwoZWRpdG9yLCBlZGl0b3IudWkuZ2V0RG9tKCdpZnJhbWVob2xkZXInKSk7XHJcblx0ICAgICAgICAgICAgICAgICAgICBlZGl0b3IuZmlyZUV2ZW50KFwiYWZ0ZXJ1aXJlYWR5XCIpO1xyXG5cdCAgICAgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgfSlcclxuXHQgICAgICAgIH07XHJcblx0ICAgICAgICByZXR1cm4gZWRpdG9yO1xyXG5cdCAgICB9O1xyXG5cclxuXHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBAZmlsZVxyXG5cdCAgICAgKiBAbmFtZSBVRVxyXG5cdCAgICAgKiBAc2hvcnQgVUVcclxuXHQgICAgICogQGRlc2MgVUVkaXRvcueahOmhtumDqOWRveWQjeepuumXtFxyXG5cdCAgICAgKi9cclxuXHQgICAgLyoqXHJcblx0ICAgICAqIEBuYW1lIGdldEVkaXRvclxyXG5cdCAgICAgKiBAc2luY2UgMS4yLjQrXHJcblx0ICAgICAqIEBncmFtbWFyIFVFLmdldEVkaXRvcihpZCxbb3B0XSkgID0+ICBFZGl0b3Llrp7kvotcclxuXHQgICAgICogQGRlc2Mg5o+Q5L6b5LiA5Liq5YWo5bGA55qE5pa55rOV5b6X5Yiw57yW6L6R5Zmo5a6e5L6LXHJcblx0ICAgICAqXHJcblx0ICAgICAqICogJydpZCcnICDmlL7nva7nvJbovpHlmajnmoTlrrnlmahpZCwg5aaC5p6c5a655Zmo5LiL55qE57yW6L6R5Zmo5bey57uP5a2Y5Zyo77yM5bCx55u05o6l6L+U5ZueXHJcblx0ICAgICAqICogJydvcHQnJyDnvJbovpHlmajnmoTlj6/pgInlj4LmlbBcclxuXHQgICAgICogQGV4YW1wbGVcclxuXHQgICAgICogIFVFLmdldEVkaXRvcignY29udGFpbmVySWQnLHtvbnJlYWR5OmZ1bmN0aW9uKCl7Ly/liJvlu7rkuIDkuKrnvJbovpHlmajlrp7kvotcclxuXHQgICAgICogICAgICB0aGlzLnNldENvbnRlbnQoJ2hlbGxvJylcclxuXHQgICAgICogIH19KTtcclxuXHQgICAgICogIFVFLmdldEVkaXRvcignY29udGFpbmVySWQnKTsgLy/ov5Tlm57liJrliJvlu7rnmoTlrp7kvotcclxuXHQgICAgICpcclxuXHQgICAgICovXHJcblx0ICAvKiAgVUUuZ2V0RWRpdG9yID0gZnVuY3Rpb24gKGlkLCBvcHQpIHtcclxuXHQgICAgICAgIHZhciBlZGl0b3IgPSBpbnN0YW5jZXNbaWRdO1xyXG5cdCAgICAgICAgaWYgKCFlZGl0b3IpIHtcclxuXHQgICAgICAgICAgICBlZGl0b3IgPSBpbnN0YW5jZXNbaWRdID0gbmV3IFVFLnVpLkVkaXRvcihvcHQpO1xyXG5cdCAgICAgICAgICAgIGVkaXRvci5yZW5kZXIoaWQpO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgcmV0dXJuIGVkaXRvcjtcclxuXHQgICAgfTsqL1xyXG5cdCAgICBVRS5nZXRFZGl0b3IgPSBmdW5jdGlvbiAoaWQsIG9wdCkge1xyXG5cclxuXHQgICAgXHRVRS5kZWxFZGl0b3IoaWQpO1xyXG5cdCAgICBcdHZhciBlZGl0b3IgPSBuZXcgVUUudWkuRWRpdG9yKG9wdCk7XHJcblx0ICAgIFx0ZWRpdG9yLnJlbmRlcihpZCk7XHJcblx0ICAgIFx0cmV0dXJuIGVkaXRvcjtcclxuXHQgICAgXHR9O1xyXG5cclxuXHQgICAgVUUuZGVsRWRpdG9yID0gZnVuY3Rpb24gKGlkKSB7XHJcblx0ICAgICAgICB2YXIgZWRpdG9yO1xyXG5cdCAgICAgICAgaWYgKGVkaXRvciA9IGluc3RhbmNlc1tpZF0pIHtcclxuXHQgICAgICAgICAgICBlZGl0b3Iua2V5ICYmIGVkaXRvci5kZXN0cm95KCk7XHJcblx0ICAgICAgICAgICAgZGVsZXRlIGluc3RhbmNlc1tpZF1cclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHJcblx0ICAgIFVFLnJlZ2lzdGVyVUkgPSBmdW5jdGlvbih1aU5hbWUsZm4saW5kZXgsZWRpdG9ySWQpe1xyXG5cdCAgICAgICAgdXRpbHMuZWFjaCh1aU5hbWUuc3BsaXQoL1xccysvKSwgZnVuY3Rpb24gKG5hbWUpIHtcclxuXHQgICAgICAgICAgICBVRS5fY3VzdG9taXplVUlbbmFtZV0gPSB7XHJcblx0ICAgICAgICAgICAgICAgIGlkIDogZWRpdG9ySWQsXHJcblx0ICAgICAgICAgICAgICAgIGV4ZWNGbjpmbixcclxuXHQgICAgICAgICAgICAgICAgaW5kZXg6aW5kZXhcclxuXHQgICAgICAgICAgICB9O1xyXG5cdCAgICAgICAgfSlcclxuXHJcblx0ICAgIH1cclxuXHJcblx0fSkoKTtcclxuXHJcblx0Ly8gYWRhcHRlci9tZXNzYWdlLmpzXHJcblx0VUUucmVnaXN0ZXJVSSgnbWVzc2FnZScsIGZ1bmN0aW9uKGVkaXRvcikge1xyXG5cclxuXHQgICAgdmFyIGVkaXRvcnVpID0gYmFpZHUuZWRpdG9yLnVpO1xyXG5cdCAgICB2YXIgTWVzc2FnZSA9IGVkaXRvcnVpLk1lc3NhZ2U7XHJcblx0ICAgIHZhciBob2xkZXI7XHJcblx0ICAgIHZhciBfbWVzc2FnZUl0ZW1zID0gW107XHJcblx0ICAgIHZhciBtZSA9IGVkaXRvcjtcclxuXHJcblx0ICAgIG1lLmFkZExpc3RlbmVyKCdyZWFkeScsIGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICBob2xkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChtZS51aS5pZCArICdfbWVzc2FnZV9ob2xkZXInKTtcclxuXHQgICAgICAgIHVwZGF0ZUhvbGRlclBvcygpO1xyXG5cdCAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgIHVwZGF0ZUhvbGRlclBvcygpO1xyXG5cdCAgICAgICAgfSwgNTAwKTtcclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICBtZS5hZGRMaXN0ZW5lcignc2hvd21lc3NhZ2UnLCBmdW5jdGlvbih0eXBlLCBvcHQpe1xyXG5cdCAgICAgICAgb3B0ID0gdXRpbHMuaXNTdHJpbmcob3B0KSA/IHtcclxuXHQgICAgICAgICAgICAnY29udGVudCc6IG9wdFxyXG5cdCAgICAgICAgfSA6IG9wdDtcclxuXHQgICAgICAgIHZhciBtZXNzYWdlID0gbmV3IE1lc3NhZ2Uoe1xyXG5cdCAgICAgICAgICAgICAgICAndGltZW91dCc6IG9wdC50aW1lb3V0LFxyXG5cdCAgICAgICAgICAgICAgICAndHlwZSc6IG9wdC50eXBlLFxyXG5cdCAgICAgICAgICAgICAgICAnY29udGVudCc6IG9wdC5jb250ZW50LFxyXG5cdCAgICAgICAgICAgICAgICAna2VlcHNob3cnOiBvcHQua2VlcHNob3csXHJcblx0ICAgICAgICAgICAgICAgICdlZGl0b3InOiBtZVxyXG5cdCAgICAgICAgICAgIH0pLFxyXG5cdCAgICAgICAgICAgIG1pZCA9IG9wdC5pZCB8fCAoJ21zZ18nICsgKCtuZXcgRGF0ZSgpKS50b1N0cmluZygzNikpO1xyXG5cdCAgICAgICAgbWVzc2FnZS5yZW5kZXIoaG9sZGVyKTtcclxuXHQgICAgICAgIF9tZXNzYWdlSXRlbXNbbWlkXSA9IG1lc3NhZ2U7XHJcblx0ICAgICAgICBtZXNzYWdlLnJlc2V0KG9wdCk7XHJcblx0ICAgICAgICB1cGRhdGVIb2xkZXJQb3MoKTtcclxuXHQgICAgICAgIHJldHVybiBtaWQ7XHJcblx0ICAgIH0pO1xyXG5cclxuXHQgICAgbWUuYWRkTGlzdGVuZXIoJ3VwZGF0ZW1lc3NhZ2UnLGZ1bmN0aW9uKHR5cGUsIGlkLCBvcHQpe1xyXG5cdCAgICAgICAgb3B0ID0gdXRpbHMuaXNTdHJpbmcob3B0KSA/IHtcclxuXHQgICAgICAgICAgICAnY29udGVudCc6IG9wdFxyXG5cdCAgICAgICAgfSA6IG9wdDtcclxuXHQgICAgICAgIHZhciBtZXNzYWdlID0gX21lc3NhZ2VJdGVtc1tpZF07XHJcblx0ICAgICAgICBtZXNzYWdlLnJlbmRlcihob2xkZXIpO1xyXG5cdCAgICAgICAgbWVzc2FnZSAmJiBtZXNzYWdlLnJlc2V0KG9wdCk7XHJcblx0ICAgIH0pO1xyXG5cclxuXHQgICAgbWUuYWRkTGlzdGVuZXIoJ2hpZGVtZXNzYWdlJyxmdW5jdGlvbih0eXBlLCBpZCl7XHJcblx0ICAgICAgICB2YXIgbWVzc2FnZSA9IF9tZXNzYWdlSXRlbXNbaWRdO1xyXG5cdCAgICAgICAgbWVzc2FnZSAmJiBtZXNzYWdlLmhpZGUoKTtcclxuXHQgICAgfSk7XHJcblxyXG5cdCAgICBmdW5jdGlvbiB1cGRhdGVIb2xkZXJQb3MoKXtcclxuXHQgICAgICAgIHZhciB0b29sYmFyYm94ID0gbWUudWkuZ2V0RG9tKCd0b29sYmFyYm94Jyk7XHJcblx0ICAgICAgICBpZiAodG9vbGJhcmJveCkge1xyXG5cdCAgICAgICAgICAgIGhvbGRlci5zdHlsZS50b3AgPSB0b29sYmFyYm94Lm9mZnNldEhlaWdodCArIDMgKyAncHgnO1xyXG5cdCAgICAgICAgfVxyXG5cdCAgICAgICAgaG9sZGVyLnN0eWxlLnpJbmRleCA9IE1hdGgubWF4KG1lLm9wdGlvbnMuekluZGV4LCBtZS5pZnJhbWUuc3R5bGUuekluZGV4KSArIDE7XHJcblx0ICAgIH1cclxuXHJcblx0fSk7XHJcblxyXG5cclxuXHQvLyBhZGFwdGVyL2F1dG9zYXZlLmpzXHJcblx0VUUucmVnaXN0ZXJVSSgnYXV0b3NhdmUnLCBmdW5jdGlvbihlZGl0b3IpIHtcclxuXHQgICAgdmFyIHRpbWVyID0gbnVsbCx1aWQgPSBudWxsO1xyXG5cdCAgICBlZGl0b3Iub24oJ2FmdGVyYXV0b3NhdmUnLGZ1bmN0aW9uKCl7XHJcblx0ICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xyXG5cclxuXHQgICAgICAgIHRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xyXG5cdCAgICAgICAgICAgIGlmKHVpZCl7XHJcblx0ICAgICAgICAgICAgICAgIGVkaXRvci50cmlnZ2VyKCdoaWRlbWVzc2FnZScsdWlkKTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgdWlkID0gZWRpdG9yLnRyaWdnZXIoJ3Nob3dtZXNzYWdlJyx7XHJcblx0ICAgICAgICAgICAgICAgIGNvbnRlbnQgOiBlZGl0b3IuZ2V0TGFuZygnYXV0b3NhdmUuc3VjY2VzcycpLFxyXG5cdCAgICAgICAgICAgICAgICB0aW1lb3V0IDogMjAwMFxyXG5cdCAgICAgICAgICAgIH0pO1xyXG5cclxuXHQgICAgICAgIH0sMjAwMClcclxuXHQgICAgfSlcclxuXHJcblx0fSk7XHJcblxyXG5cclxuXHJcblx0fSkoKTtcclxuXHJcblx0XHJcblx0XHJcbnJldHVybiBVRTtcclxufSk7Il0sImZpbGUiOiJwbHVnaW5zL3VlZGl0b3IvdWVteS5qcyJ9
